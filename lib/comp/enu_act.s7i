
(********************************************************************)
(*                                                                  *)
(*  enu_act.s7i   Generate code for actions of enumeration values.  *)
(*  Copyright (C) 1990 - 1994, 2004 - 2014  Thomas Mertes           *)
(*                                                                  *)
(*  This file is part of the Seed7 compiler.                        *)
(*                                                                  *)
(*  This program is free software; you can redistribute it and/or   *)
(*  modify it under the terms of the GNU General Public License as  *)
(*  published by the Free Software Foundation; either version 2 of  *)
(*  the License, or (at your option) any later version.             *)
(*                                                                  *)
(*  This program is distributed in the hope that it will be useful, *)
(*  but WITHOUT ANY WARRANTY; without even the implied warranty of  *)
(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   *)
(*  GNU General Public License for more details.                    *)
(*                                                                  *)
(*  You should have received a copy of the GNU General Public       *)
(*  License along with this program; if not, write to the           *)
(*  Free Software Foundation, Inc., 51 Franklin Street,             *)
(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)
(*                                                                  *)
(********************************************************************)


const ACTION: ENU_CONV    is action "ENU_CONV";
const ACTION: ENU_CPY     is action "ENU_CPY";
const ACTION: ENU_EQ      is action "ENU_EQ";
const ACTION: ENU_ICONV2  is action "ENU_ICONV2";
const ACTION: ENU_NE      is action "ENU_NE";
const ACTION: ENU_ORD2    is action "ENU_ORD2";
const ACTION: ENU_VALUE   is action "ENU_VALUE";


const proc: process (ENU_CONV, in reference: function,
    in ref_list: params, inout expr_type: c_expr) is func

  begin
    c_expr.expr &:= "(";
    process_expr(params[3], c_expr);
    c_expr.expr &:= ")";
  end func;


const proc: process (ENU_CPY, in reference: function,
    in ref_list: params, inout expr_type: c_expr) is func

  local
    var expr_type: statement is expr_type.value;
  begin
    process_expr(params[1], statement);
    statement.expr &:= "=";
    process_expr(params[3], statement);
    statement.expr &:= ";\n";
    doLocalDeclsOfStatement(statement, c_expr);
  end func;


const proc: process (ENU_EQ, in reference: function,
    in ref_list: params, inout expr_type: c_expr) is func

  begin
    c_expr.expr &:= "(";
    process_expr(params[1], c_expr);
    c_expr.expr &:= ") == (";
    process_expr(params[3], c_expr);
    c_expr.expr &:= ")";
  end func;


const proc: process (ENU_ICONV2, in reference: function,
    in ref_list: params, inout expr_type: c_expr) is func

  local
    var integer: numberOfEnumLiterals is 0;
    var reference: evaluatedParam is NIL;
    var intRange: number_range is intRange.value;
    var string: number_name is "";
  begin
    numberOfEnumLiterals := length(getValue(evaluate(prog, params[2]), ref_list));
    if getConstant(params[1], INTOBJECT, evaluatedParam) then
      if getValue(evaluatedParam, integer) >= numberOfEnumLiterals then
        warning(DOES_RAISE, "RANGE_ERROR", c_expr);
        c_expr.expr &:= intRaiseError("RANGE_ERROR");
      else
        c_expr.expr &:= integerLiteral(getValue(evaluatedParam, integer));
      end if;
    else
      number_range := getIntRange(params[1]);
      if conversion_range_check and (number_range.minValue < 0 or
          number_range.maxValue >= numberOfEnumLiterals) then
        incr(countRangeChecks);
        c_expr.expr &:= "(";
        number_name := getParameterAsVariable("intType", "tmp_", params[1], c_expr);
        c_expr.expr &:= "rngChk(";
        if ccConf.TWOS_COMPLEMENT_INTTYPE then
          c_expr.expr &:= "(uintType)(";
          c_expr.expr &:= number_name;
          c_expr.expr &:= ")";
        else
          c_expr.expr &:= number_name;
          c_expr.expr &:= "<0&&";
          c_expr.expr &:= number_name;
        end if;
        c_expr.expr &:= ">=";
        c_expr.expr &:= str(numberOfEnumLiterals);
        c_expr.expr &:= ")?";
        c_expr.expr &:= intRaiseError("RANGE_ERROR");
        c_expr.expr &:= ":";
        c_expr.expr &:= number_name;
        c_expr.expr &:= ")";
      else
        c_expr.expr &:= "(";
        process_expr(params[1], c_expr);
        c_expr.expr &:= ")";
      end if;
    end if;
  end func;


const proc: process (ENU_NE, in reference: function,
    in ref_list: params, inout expr_type: c_expr) is func

  begin
    c_expr.expr &:= "(";
    process_expr(params[1], c_expr);
    c_expr.expr &:= ") != (";
    process_expr(params[3], c_expr);
    c_expr.expr &:= ")";
  end func;


const proc: process (ENU_ORD2, in reference: function,
    in ref_list: params, inout expr_type: c_expr) is func

  begin
    c_expr.expr &:= "(";
    process_expr(params[1], c_expr);
    c_expr.expr &:= ")";
  end func;


const proc: process (ENU_VALUE, in reference: function,
    in ref_list: params, inout expr_type: c_expr) is func

  begin
    c_expr.expr &:= "enuValue(";
    process_expr(params[1], c_expr);
    c_expr.expr &:= ")";
  end func;
