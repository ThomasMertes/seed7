
(********************************************************************)
(*                                                                  *)
(*  intrange.s7i  Handle ranges of possible values for expressions. *)
(*  Copyright (C) 2020, 2021  Thomas Mertes                         *)
(*                                                                  *)
(*  This file is part of the Seed7 compiler.                        *)
(*                                                                  *)
(*  This program is free software; you can redistribute it and/or   *)
(*  modify it under the terms of the GNU General Public License as  *)
(*  published by the Free Software Foundation; either version 2 of  *)
(*  the License, or (at your option) any later version.             *)
(*                                                                  *)
(*  This program is distributed in the hope that it will be useful, *)
(*  but WITHOUT ANY WARRANTY; without even the implied warranty of  *)
(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   *)
(*  GNU General Public License for more details.                    *)
(*                                                                  *)
(*  You should have received a copy of the GNU General Public       *)
(*  License along with this program; if not, write to the           *)
(*  Free Software Foundation, Inc., 51 Franklin Street,             *)
(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)
(*                                                                  *)
(********************************************************************)


const type: intRange is new struct
    var integer: minValue is integer.first;
    var integer: maxValue is integer.last;
  end struct;


const func boolean: (ref intRange: range1) = (ref intRange: range2) is
  return range1.minValue = range2.minValue and range1.maxValue = range2.maxValue;


const func boolean: (ref intRange: range1) <> (ref intRange: range2) is
  return range1.minValue <> range2.minValue or range1.maxValue <> range2.maxValue;


const type: intRangeOfVariableHash is hash[reference] intRange;

var intRangeOfVariableHash: intRangeOfVariable is intRangeOfVariableHash.value;


const func intRange: getIntRange (in reference: intExpression) is forward;


const func intRange: getIntAddRange (in reference: summand1, in reference: summand2) is func
  result
    var intRange: valueRange is intRange.value;
  local
    var intRange: summand1Range is intRange.value;
    var intRange: summand2Range is intRange.value;
  begin
    summand1Range := getIntRange(summand1);
    summand2Range := getIntRange(summand2);
    if summand1Range.minValue < 0 then
      if summand2Range.minValue < 0 then
        if summand1Range.minValue >= integer.first - summand2Range.minValue then
          valueRange.minValue := summand1Range.minValue + summand2Range.minValue;
        end if;
      else
        valueRange.minValue := summand1Range.minValue + summand2Range.minValue;
      end if;
    else
      if summand2Range.minValue > 0 then
        if summand2Range.minValue <= integer.last - summand1Range.minValue then
          valueRange.minValue := summand1Range.minValue + summand2Range.minValue;
        else
          valueRange.minValue := integer.last;
          valueRange.maxValue := integer.first;
        end if
      else
        valueRange.minValue := summand1Range.minValue + summand2Range.minValue;
      end if;
    end if;
    if summand1Range.maxValue > 0 then
      if summand2Range.maxValue > 0 then
        if summand2Range.maxValue <= integer.last - summand1Range.maxValue then
          valueRange.maxValue := summand1Range.maxValue + summand2Range.maxValue;
        end if;
      else
        valueRange.maxValue := summand1Range.maxValue + summand2Range.maxValue;
      end if;
    else
      if summand2Range.maxValue < 0 then
        if summand2Range.maxValue >= integer.first - summand1Range.maxValue then
          valueRange.maxValue := summand1Range.maxValue + summand2Range.maxValue;
        else
          valueRange.minValue := integer.last;
          valueRange.maxValue := integer.first;
        end if
      else
        valueRange.maxValue := summand1Range.maxValue + summand2Range.maxValue;
      end if;
    end if;
    if valueRange.minValue > valueRange.maxValue then
      valueRange.minValue := 0;
      valueRange.maxValue := -1;
    end if;
  end func;


const func intRange: getIntLshiftRange (in reference: number, in reference: lshift) is func
  result
    var intRange: valueRange is intRange.value;
  local
    var intRange: numberRange is intRange.value;
    var intRange: lshiftRange is intRange.value;
  begin
    numberRange := getIntRange(number);
    lshiftRange := getIntRange(lshift);
    if lshiftRange.maxValue < 0 or
        lshiftRange.minValue > bitLength(integer.last) then
      valueRange.minValue := 0;
      valueRange.maxValue := -1;
    elsif numberRange.minValue < 0 then
      if lshiftRange.maxValue <= bitLength(integer.last) then
        if numberRange.minValue >= integer.first >> lshiftRange.maxValue then
          valueRange.minValue := numberRange.minValue << lshiftRange.maxValue;
        else
          valueRange.minValue := integer.first;
        end if;
      else
        valueRange.minValue := integer.first;
      end if;
    elsif numberRange.minValue > 0 then
      if lshiftRange.minValue >= 0 then
        if numberRange.minValue <= integer.last >> lshiftRange.minValue then
          valueRange.minValue := numberRange.minValue << lshiftRange.minValue;
        else
          valueRange.minValue := integer.last;
        end if;
      else
        valueRange.minValue := numberRange.minValue;
      end if;
    else
      valueRange.minValue := 0;
    end if;
    if numberRange.maxValue < 0 then
      if lshiftRange.minValue >= 0 then
        if numberRange.maxValue >= integer.first >> lshiftRange.minValue then
          valueRange.maxValue := numberRange.maxValue << lshiftRange.minValue;
        else
          valueRange.maxValue := integer.first;
        end if;
      else
        valueRange.maxValue := numberRange.maxValue;
      end if;
    elsif numberRange.maxValue > 0 then
      if lshiftRange.maxValue <= bitLength(integer.last) then
        if numberRange.maxValue <= integer.last >> lshiftRange.maxValue then
          valueRange.maxValue := numberRange.maxValue << lshiftRange.maxValue;
        elsif lshiftRange.minValue > 0 then
          valueRange.maxValue := integer.last >> lshiftRange.minValue << lshiftRange.minValue;
        else
          valueRange.maxValue := integer.last;
        end if;
      else
        valueRange.maxValue := integer.last;
      end if;
    else
      valueRange.maxValue := 0;
    end if;
    if valueRange.minValue > valueRange.maxValue then
      valueRange.minValue := 0;
      valueRange.maxValue := -1;
    end if;
  end func;


const func intRange: getIntModRange (in reference: dividend, in reference: divisor) is func
  result
    var intRange: valueRange is intRange.value;
  local
    var intRange: divisorRange is intRange.value;
    var reference: evaluatedParam is NIL;
    var integer: dividendValue is 0;
    var intRange: valueRange2 is intRange.value;
  begin
    divisorRange := getIntRange(divisor);
    if divisorRange.minValue > 0 then
      valueRange.minValue := 0;
      valueRange.maxValue := pred(divisorRange.maxValue);
    elsif divisorRange.maxValue < 0 then
      valueRange.minValue := succ(divisorRange.minValue);
      valueRange.maxValue := 0;
    end if;
    if getConstant(dividend, INTOBJECT, evaluatedParam) then
      dividendValue := getValue(evaluatedParam, integer);
      if dividendValue = integer.first then
        valueRange2.minValue := succ(integer.first) div 2;
        valueRange2.maxValue := -2 - integer.first;
      elsif dividendValue = integer.last then
        valueRange2.minValue := 2 - integer.last;
        valueRange2.maxValue := pred(integer.last) div 2;
      elsif dividendValue > 0 then
        if integer.first + dividendValue <= 2 - dividendValue then
          valueRange2.minValue := integer.first + dividendValue;
        else
          valueRange2.minValue := 2 - dividendValue;
        end if;
        valueRange2.maxValue := dividendValue;
      elsif dividendValue = 0 then
        valueRange2.minValue := 0;
        valueRange2.maxValue := 0;
      else # dividendValue < 0 then
        valueRange2.minValue := dividendValue;
        if integer.last + dividendValue >= -(dividendValue + 2) then
          valueRange2.maxValue := integer.last + dividendValue;
        else
          valueRange2.maxValue := -(dividendValue + 2);
        end if;
      end if;
      valueRange.minValue := max(valueRange.minValue, valueRange2.minValue);
      valueRange.maxValue := min(valueRange.maxValue, valueRange2.maxValue);
    end if;
    if valueRange.minValue > valueRange.maxValue then
      valueRange.minValue := 0;
      valueRange.maxValue := -1;
    end if;
  end func;


const func intRange: getIntBytes2UIntRange (in reference: stri) is func
  result
    var intRange: valueRange is intRange.value;
  local
    var integer: length is 0;
  begin
    valueRange.minValue := 0;
    if isActionExpression(stri, "STR_SUBSTR") and
        category(getValue(stri, ref_list)[6]) = INTOBJECT and
        not isVar(getValue(stri, ref_list)[6]) then
      length := getValue(getValue(stri, ref_list)[6], integer);
      valueRange.maxValue := pred(2 ** (length * 8));
    end if;
  end func;


const func intRange: getSetRandRange (in reference: aSet) is func
  result
    var intRange: valueRange is intRange.value;
  local
    var reference: evaluatedParam is NIL;
    var bitset: setValue is {};
  begin
    if getConstant(aSet, SETOBJECT, evaluatedParam) then
      setValue := getValue(evaluatedParam, bitset);
      if setValue = {} then
        valueRange.minValue := 0;
        valueRange.maxValue := -1;
      else
        valueRange.minValue := min(setValue);
        valueRange.maxValue := max(setValue);
      end if;
    end if;
  end func;


const func intRange: getIntRange (in reference: intExpression) is func
  result
    var intRange: valueRange is intRange.value;
  local
    var reference: function is NIL;
    var ref_list: params is ref_list.EMPTY;
    var string: actionName is "";
    var reference: evaluatedParam is NIL;
    var integer: number is 0;
    var intRange: argument1Range is intRange.value;
    var intRange: argument2Range is intRange.value;
  begin
    if reduceOverflowChecks then
      if getConstant(intExpression, INTOBJECT, evaluatedParam) then
        number := getValue(evaluatedParam, integer);
        valueRange.minValue := number;
        valueRange.maxValue := number;
        # writeln("intRange of constant: " <& valueRange.minValue <& ".." <& valueRange.maxValue);
      elsif intExpression in intRangeOfVariable then
        valueRange := intRangeOfVariable[intExpression];
        # writeln("intRange of variable: " <& valueRange.minValue <& ".." <& valueRange.maxValue);
      elsif category(intExpression) = CALLOBJECT then
        params := getValue(intExpression, ref_list);
        function := params[1];
        params := params[2 ..];
        if category(function) = ACTOBJECT then
          actionName := str(getValue(function, ACTION));
          case actionName of
            when {"ARR_LNG", "BST_LNG", "FIL_LNG", "HSH_LNG", "RFL_LNG",
                  "SET_CARD",
                  "SQL_STMT_COLUMN_COUNT"}:
              valueRange.minValue := 0;
              valueRange.maxValue := integer.last;
            when {"BIG_CMP", "BIN_CMP", "BST_CMP", "CHR_CMP", "DRW_CMP",
                  "FLT_CMP", "INT_CMP", "ITF_CMP", "PCS_CMP", "REF_CMP",
                  "SET_CMP", "SQL_CMP_DB", "SQL_CMP_STMT", "STR_CMP",
                  "TYP_CMP"}:
              valueRange.minValue := -1;
              valueRange.maxValue := 1;
            when {"BIN_CARD"}:
              valueRange.minValue := 0;
              valueRange.maxValue := ccConf.INTTYPE_SIZE;
            when {"BLN_ORD"}:
              valueRange.minValue := 0;
              valueRange.maxValue := 1;
            when {"CHR_ORD"}:
              if ccConf.TWOS_COMPLEMENT_INTTYPE then
                valueRange.minValue := -2147483648;
              else
                valueRange.minValue := -2147483647;
              end if;
              valueRange.maxValue := 2147483647;
            when {"ENU_ORD2"}:
              valueRange.minValue := 0;
              valueRange.maxValue :=
                  pred(length(getValue(evaluate(prog, params[2]), ref_list)));
            when {"FIL_TELL"}:
              valueRange.minValue := 1;
              valueRange.maxValue := integer.last;
            when {"INT_ABS"}:
              valueRange.minValue := 0;
              argument1Range := getIntRange(params[1]);
              if argument1Range <> intRange.value and
                  argument1Range.minValue > integer.first and
                  argument1Range.maxValue > integer.first then
                if argument1Range.maxValue < argument1Range.minValue then
                  valueRange.minValue := 0;
                  valueRange.maxValue := -1;
                elsif abs(argument1Range.minValue) > abs(argument1Range.maxValue) then
                  valueRange.maxValue := abs(argument1Range.minValue);
                else
                  valueRange.maxValue := abs(argument1Range.maxValue);
                end if;
              else
                valueRange.maxValue := integer.last;
              end if;
            when {"INT_ADD"}:
              valueRange := getIntAddRange(params[1], params[3]);
            when {"INT_BIT_LENGTH"}:
              valueRange.minValue := 0;
              valueRange.maxValue := pred(ccConf.INTTYPE_SIZE);
            when {"INT_BYTES_BE_2_UINT",
                  "INT_BYTES_LE_2_UINT"}:
              valueRange := getIntBytes2UIntRange(params[1]);
            when {"INT_DIV"}:
              if getConstant(params[3], INTOBJECT, evaluatedParam) then
                number := getValue(evaluatedParam, integer);
                if number > 0 then
                  valueRange.minValue := integer.first div number;
                  valueRange.maxValue := integer.last div number;
                elsif number = -1 then
                  valueRange.minValue := -integer.last;
                elsif number < -1 then
                  valueRange.minValue := integer.last div number;
                  valueRange.maxValue := integer.first div number;
                end if;
              elsif getConstant(params[1], INTOBJECT, evaluatedParam) then
                number := getValue(evaluatedParam, integer);
                if number >= 0 then
                  valueRange.minValue := -number;
                  valueRange.maxValue := number;
                elsif number <> integer.first then
                  valueRange.minValue := number;
                  valueRange.maxValue := -number;
                end if;
              end if;
            when {"INT_ICONV1"}:
              valueRange := getIntRange(params[1]);
            when {"INT_ICONV3"}:
              valueRange := getIntRange(params[3]);
            when {"INT_LOG10"}:
              valueRange.minValue := -1;
              valueRange.maxValue := log10(integer.last);
            when {"INT_LOG2"}:
              valueRange.minValue := -1;
              valueRange.maxValue := log2(integer.last);
            when {"INT_LOWEST_SET_BIT"}:
              valueRange.minValue := -1;
              valueRange.maxValue := pred(ccConf.INTTYPE_SIZE);
            when {"INT_LSHIFT"}:
              valueRange := getIntLshiftRange(params[1], params[3]);
            when {"INT_MDIV"}:
              if getConstant(params[3], INTOBJECT, evaluatedParam) then
                number := getValue(evaluatedParam, integer);
                if number > 0 then
                  valueRange.minValue := integer.first mdiv number;
                  valueRange.maxValue := integer.last mdiv number;
                elsif number = -1 then
                  valueRange.minValue := -integer.last;
                elsif number < -1 then
                  valueRange.minValue := integer.last mdiv number;
                  valueRange.maxValue := integer.first mdiv number;
                end if;
              elsif getConstant(params[1], INTOBJECT, evaluatedParam) then
                number := getValue(evaluatedParam, integer);
                if number >= 0 then
                  valueRange.minValue := -number;
                  valueRange.maxValue := number;
                elsif number <> integer.first then
                  valueRange.minValue := number;
                  valueRange.maxValue := -number;
                end if;
              end if;
            when {"INT_MOD"}:
              valueRange := getIntModRange(params[1], params[3]);
            when {"INT_MULT"}:
              if getConstant(params[1], INTOBJECT, evaluatedParam) then
                number := getValue(evaluatedParam, integer);
                if number >= 2 then
                  argument2Range := getIntRange(params[3]);
                  if argument2Range.minValue >= integer.first div number and
                      argument2Range.minValue <= integer.last div number then
                    valueRange.minValue := argument2Range.minValue * number;
                  else
                    valueRange.minValue := integer.first div number * number;
                  end if;
                  if argument2Range.maxValue >= integer.first div number and
                      argument2Range.maxValue <= integer.last div number then
                    valueRange.maxValue := argument2Range.maxValue * number;
                  else
                    valueRange.maxValue := integer.last div number * number;
                  end if;
                end if;
              elsif getConstant(params[3], INTOBJECT, evaluatedParam) then
                number := getValue(evaluatedParam, integer);
                if number >= 2 then
                  argument1Range := getIntRange(params[1]);
                  if argument1Range.minValue >= integer.first div number and
                      argument1Range.minValue <= integer.last div number then
                    valueRange.minValue := argument1Range.minValue * number;
                  else
                    valueRange.minValue := integer.first div number * number;
                  end if;
                  if argument1Range.maxValue >= integer.first div number and
                      argument1Range.maxValue <= integer.last div number then
                    valueRange.maxValue := argument1Range.maxValue * number;
                  else
                    valueRange.maxValue := integer.last div number * number;
                  end if;
                end if;
              end if;
            when {"INT_NEGATE"}:
              argument1Range := getIntRange(params[2]);
              if argument1Range <> intRange.value then
                if argument1Range.maxValue < -integer.last or
                    argument1Range.maxValue < argument1Range.minValue then
                  valueRange.minValue := 0;
                  valueRange.maxValue := -1;
                else
                  valueRange.minValue := -argument1Range.maxValue;
                  if argument1Range.minValue < -integer.last then
                    valueRange.maxValue := integer.last;
                  else
                    valueRange.maxValue := -argument1Range.minValue;
                  end if;
                end if;
              else
                valueRange.minValue := -integer.last;
                valueRange.maxValue := integer.last;
              end if;
            when {"INT_PRED"}:
              argument1Range := getIntRange(params[1]);
              if argument1Range.minValue <> integer.first then
                valueRange.minValue := pred(argument1Range.minValue);
              else
                valueRange.minValue := integer.first;
              end if;
              if argument1Range.maxValue <> integer.first then
                valueRange.maxValue := pred(argument1Range.maxValue);
              else
                valueRange.maxValue := integer.first;
              end if;
            when {"INT_RAND"}:
              argument1Range := getIntRange(params[1]);
              argument2Range := getIntRange(params[2]);
              valueRange.minValue := argument1Range.minValue;
              valueRange.maxValue := argument2Range.maxValue;
            when {"INT_REM"}:
              if getConstant(params[3], INTOBJECT, evaluatedParam) then
                number := getValue(evaluatedParam, integer);
                if number > 0 then
                  valueRange.minValue := -pred(number);
                  valueRange.maxValue := pred(number);
                elsif number < 0 then
                  valueRange.minValue := succ(number);
                  valueRange.maxValue := -succ(number);
                end if;
              elsif getConstant(params[1], INTOBJECT, evaluatedParam) then
                number := getValue(evaluatedParam, integer);
                if number >= 0 then
                  valueRange.minValue := 0;
                  valueRange.maxValue := number;
                elsif number = 0 then
                  valueRange.minValue := 0;
                  valueRange.maxValue := 0;
                else # number < 0 then
                  valueRange.minValue := number;
                  valueRange.maxValue := 0;
                end if;
              end if;
            when {"INT_RSHIFT"}:
              if getConstant(params[3], INTOBJECT, evaluatedParam) then
                number := getValue(evaluatedParam, integer);
                if number > 0 and number < ccConf.INTTYPE_SIZE then
                  valueRange.minValue := integer.first >> number;
                  valueRange.maxValue := integer.last >> number;
                end if;
              elsif getConstant(params[1], INTOBJECT, evaluatedParam) then
                number := getValue(evaluatedParam, integer);
                if number < 0 then
                  valueRange.minValue := number;
                  valueRange.maxValue := -1;
                else
                  valueRange.minValue := 0;
                  valueRange.maxValue := number;
                end if;
              end if;
            when {"INT_SQRT"}:
              valueRange.minValue := 0;
              valueRange.maxValue := sqrt(integer.last);
            when {"INT_SUCC"}:
              argument1Range := getIntRange(params[1]);
              if argument1Range.minValue <> integer.last then
                valueRange.minValue := succ(argument1Range.minValue);
              else
                valueRange.minValue := integer.last;
              end if;
              if argument1Range.maxValue <> integer.last then
                valueRange.maxValue := succ(argument1Range.maxValue);
              else
                valueRange.maxValue := integer.last;
              end if;
            when {"SET_RAND"}:
              valueRange := getSetRandRange(params[1]);
            when {"STR_CHIPOS", "STR_CHPOS", "STR_IPOS", "STR_POS",
                  "STR_RCHIPOS", "STR_RCHPOS", "STR_RIPOS", "STR_RPOS"}:
              if getConstant(params[1], STRIOBJECT, evaluatedParam) then
                number := length(getValue(evaluatedParam, string));
                valueRange.minValue := 0;
                valueRange.maxValue := number;
              elsif ccConf.POINTER_SIZE > ccConf.INTTYPE_SIZE then
                valueRange.minValue := 0;
                valueRange.maxValue := integer.last;
              else
                valueRange.minValue := 0;
                # Because of UTF-32 the available bytes are divided by four.
                valueRange.maxValue := 2 ** (ccConf.POINTER_SIZE - 2);
              end if;
            when {"STR_LNG"}:
              if ccConf.POINTER_SIZE > ccConf.INTTYPE_SIZE then
                valueRange.minValue := 0;
                valueRange.maxValue := integer.last;
              else
                valueRange.minValue := 0;
                # Because of UTF-32 the available bytes are divided by four.
                valueRange.maxValue := 2 ** (ccConf.POINTER_SIZE - 2);
              end if;
          end case;
          # writeln(actionName <& ": " <& valueRange.minValue <& " " <& valueRange.maxValue);
        elsif category(function) = BLOCKOBJECT then
          if resultVar(function) = NIL and
              resultInitValue(function) = NIL and
              localConsts(function) = ref_list.EMPTY and
              localVars(function) = ref_list.EMPTY then
            valueRange := getIntRange(body(function));
          end if;
          # writeln("BLOCKOBJECT: " <& valueRange.minValue <& " " <& valueRange.maxValue);
        end if;
      end if;
    end if;
  end func;
