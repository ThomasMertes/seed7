
(********************************************************************)
(*                                                                  *)
(*  line.s7i      Filter file which reads the input linewise        *)
(*  Copyright (C) 1992, 1993, 1994, 2005  Thomas Mertes             *)
(*                                                                  *)
(*  This file is part of the Seed7 Runtime Library.                 *)
(*                                                                  *)
(*  The Seed7 Runtime Library is free software; you can             *)
(*  redistribute it and/or modify it under the terms of the GNU     *)
(*  Lesser General Public License as published by the Free Software *)
(*  Foundation; either version 2.1 of the License, or (at your      *)
(*  option) any later version.                                      *)
(*                                                                  *)
(*  The Seed7 Runtime Library is distributed in the hope that it    *)
(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)
(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)
(*  PURPOSE.  See the GNU Lesser General Public License for more    *)
(*  details.                                                        *)
(*                                                                  *)
(*  You should have received a copy of the GNU Lesser General       *)
(*  Public License along with this program; if not, write to the    *)
(*  Free Software Foundation, Inc., 51 Franklin Street,             *)
(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)
(*                                                                  *)
(********************************************************************)


const type: line_file is sub null_file struct
    var file: baseFile is STD_NULL;
    var string: line is "";
  end struct;


const func line_file: open_line (ref file: aFile) is func
  result
    var line_file: line_fil is line_file.value;
  begin
    line_fil.baseFile := aFile;
  end func;


const proc: write (inout line_file: line_fil, in string: stri) is func
  begin
    line_fil.line &:= stri;
  end func;


const proc: writeln (inout line_file: line_fil) is func
  begin
    writeln(line_fil.baseFile, line_fil.line);
    flush(line_fil.baseFile);
    line_fil.line := "";
  end func;


const proc: flush (inout line_file: line_fil) is func
  begin
    write(line_fil.baseFile, line_fil.line);
    flush(line_fil.baseFile);
    line_fil.line := "";
  end func;


const func string: getln (inout line_file: line_fil) is func
  result
    var string: stri is "";
  local
    var char: ch is ' ';
  begin
    if line_fil.line = "" then
      ch := gets(line_fil.baseFile, 1)[1];
      while ch <> '\n' do
        if ch = '\b' then
          if stri <> "" then
            stri := stri[ .. pred(length(stri))];
          end if;
        else
          stri &:= str(ch);
        end if;
        ch := gets(line_fil.baseFile, 1)[1];
      end while;
    else
      if line_fil.line[length(line_fil.line)] = '\n' then
        stri := line_fil.line[ .. pred(length(line_fil.line))];
      else
        stri := line_fil.line;
      end if;
      line_fil.line := "";
    end if;
  end func;


const func char: getc (inout line_file: line_fil) is func
  result
    var char: ch is ' ';
  begin
    if line_fil.line = "" then
      line_fil.line := getln(line_fil) & "\n";
    end if;
    ch := line_fil.line[1];
    line_fil.line := line_fil.line[2 .. ];
  end func;


const func string: gets (inout line_file: line_fil, in integer: leng) is func
  result
    var string: stri is "";
  begin
    while length(line_fil.line) < leng do
      line_fil.line &:= getln(line_fil) & "\n";
    end while;
    stri := line_fil.line[ .. leng];
    line_fil.line := line_fil.line[succ(leng) .. ];
  end func;
