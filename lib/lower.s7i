
(********************************************************************)
(*                                                                  *)
(*  lower.s7i     Filter file which turns characters to lower case  *)
(*  Copyright (C) 1992, 1993, 1994, 2005, 2023  Thomas Mertes       *)
(*                                                                  *)
(*  This file is part of the Seed7 Runtime Library.                 *)
(*                                                                  *)
(*  The Seed7 Runtime Library is free software; you can             *)
(*  redistribute it and/or modify it under the terms of the GNU     *)
(*  Lesser General Public License as published by the Free Software *)
(*  Foundation; either version 2.1 of the License, or (at your      *)
(*  option) any later version.                                      *)
(*                                                                  *)
(*  The Seed7 Runtime Library is distributed in the hope that it    *)
(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)
(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)
(*  PURPOSE.  See the GNU Lesser General Public License for more    *)
(*  details.                                                        *)
(*                                                                  *)
(*  You should have received a copy of the GNU Lesser General       *)
(*  Public License along with this program; if not, write to the    *)
(*  Free Software Foundation, Inc., 51 Franklin Street,             *)
(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)
(*                                                                  *)
(********************************************************************)


(**
 *  [[file|File]] implementation type which turns characters to lower case.
 *  All data that is written to a ''lowerFile'' is converted to lower
 *  case and forwarded to the ''destFile''. All functions that read from
 *  ''lowerFile'' read from ''destFile'' instead and deliver the data
 *  after converting it to lower case.
 *)
const type: lowerFile is sub null_file struct
    var file: destFile is STD_NULL;
  end struct;


(**
 *  Open a filter file which turns characters to lower case.
 *  All data that is written to a ''lowerFile'' is converted to lower
 *  case and forwarded to the ''destFile''. E.g.:
 *   lowerOutput := openLower(OUT);
 *   repeat
 *     write("Enter sentence: ");
 *     flush(OUT);
 *     readln(sentence);
 *     writeln(lowerOutput, sentence);
 *   until sentence = "";
 *  All functions that read from ''lowerFile'' read from ''destFile''
 *  instead and deliver the data after converting it to lower case.
 *  This can be used to allow upper and lower case commands:
 *   KEYBOARD := openLower(KEYBOARD);
 *   repeat
 *     write("command: ");
 *     flush(OUT);
 *     command := getc(KEYBOARD);
 *     writeln;
 *     ...
 *   until command = 'q';
 *  @param destFile File to which data is written or from which data is read.
 *  @return the ''lowerFile'' opened.
 *)
const func file: openLower (in file: destFile) is func
  result
    var file: newFile is STD_NULL;
  local
    var lowerFile: new_lowerFile is lowerFile.value;
  begin
    new_lowerFile.destFile := destFile;
    newFile := toInterface(new_lowerFile);
  end func;


(**
 *  Write the [[string]] ''stri'' to ''outFile''.
 *  The characters are converted to lower case, before they are written.
 *)
const proc: write (inout lowerFile: outFile, in string: stri) is func
  begin
    write(outFile.destFile, lower(stri));
  end func;


(**
 *  Write end-of-line to ''outFile''.
 *)
const proc: writeln (inout lowerFile: outFile) is func
  begin
    writeln(outFile.destFile);
  end func;


(**
 *  Write a [[string]] followed by end-of-line to ''outFile''.
 *  The characters are converted to lower case, before they are written.
 *)
const proc: writeln (inout lowerFile: outFile, in string: stri) is func
  begin
    writeln(outFile.destFile, lower(stri));
  end func;


const proc: moveLeft (inout lowerFile: outFile, in string: stri) is func
  begin
    moveLeft(outFile.destFile, stri);
  end func;


const proc: erase (inout lowerFile: outFile, in string: stri) is func
  begin
    erase(outFile.destFile, stri);
  end func;


const proc: cursorOn (inout lowerFile: outFile, in char: cursorChar) is func
  begin
    cursorOn(outFile.destFile, cursorChar);
  end func;


const proc: cursorOff (inout lowerFile: outFile, in char: cursorChar) is func
  begin
    cursorOff(outFile.destFile, cursorChar);
  end func;


(**
 *  Read a [[string]] with a maximum length from a file.
 *  The characters read are converted to lower case.
 *  @return the string read and converted to lower case.
 *  @exception RANGE_ERROR The parameter ''maxLength'' is negative.
 *)
const func string: gets (inout lowerFile: inFile, in integer: maxLength) is func
  result
    var string: stri is "";
  begin
    stri := lower(gets(inFile.destFile, maxLength));
  end func;
