
(********************************************************************)
(*                                                                  *)
(*  dir.s7i       Read directorys as files                          *)
(*  Copyright (C) 1994, 2005  Thomas Mertes                         *)
(*                                                                  *)
(*  This file is part of the Seed7 Runtime Library.                 *)
(*                                                                  *)
(*  The Seed7 Runtime Library is free software; you can             *)
(*  redistribute it and/or modify it under the terms of the GNU     *)
(*  Lesser General Public License as published by the Free Software *)
(*  Foundation; either version 2.1 of the License, or (at your      *)
(*  option) any later version.                                      *)
(*                                                                  *)
(*  The Seed7 Runtime Library is distributed in the hope that it    *)
(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)
(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)
(*  PURPOSE.  See the GNU Lesser General Public License for more    *)
(*  details.                                                        *)
(*                                                                  *)
(*  You should have received a copy of the GNU Lesser General       *)
(*  Public License along with this program; if not, write to the    *)
(*  Free Software Foundation, Inc., 51 Franklin Street,             *)
(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)
(*                                                                  *)
(********************************************************************)


const type: dir_file is sub NULL_FILE struct
    var string: path is "";
    var array string: dir_array is 0 times "";
    var integer: curr_line is 0;
    var integer: curr_column is 0;
  end struct;


const func dir_file: malloc (ref dir_file: aDirFile) is func
  result
    var dir_file: result is dir_file.value;
  begin
    result := aDirFile;
  end func;


const func file: open_dir (in string: dir_name) is func
  result
    var file: result is STD_NULL;
  local
    var dir_file: new_file is dir_file.value;
  begin
    new_file.path := "";
    new_file.curr_line := 1;
    new_file.curr_column := 1;
    block
      new_file.dir_array := read_dir(dir_name);
      result := malloc(new_file);
    exception
      catch FILE_ERROR:
        result := STD_NULL;
    end block;
  end func;


const func file: open_dir_path (in string: dir_name) is func
  result
    var file: result is STD_NULL;
  local
    var dir_file: new_file is dir_file.value;
  begin
    if dir_name[length(dir_name)] <> '/' then
      new_file.path := dir_name & "/";
    else
      new_file.path := dir_name;
    end if;
    new_file.curr_line := 1;
    new_file.curr_column := 1;
    block
      new_file.dir_array := read_dir(dir_name);
      result := malloc(new_file);
    exception
      catch FILE_ERROR:
        result := STD_NULL;
    end block;
  end func;


const func string: getln (inout dir_file: dir_fil) is func
  result
    var string: stri is "";
  begin
    if dir_fil.curr_line <= length(dir_fil.dir_array) then
      stri := dir_fil.path &
          dir_fil.dir_array[dir_fil.curr_line][dir_fil.curr_column .. ];
      incr(dir_fil.curr_line);
      dir_fil.curr_column := 1;
    end if;
  end func;


const func string: getwd (inout dir_file: dir_fil) is func
  result
    var string: stri is "";
  begin
    if dir_fil.curr_line <= length(dir_fil.dir_array) then
      stri := dir_fil.path &
          dir_fil.dir_array[dir_fil.curr_line][dir_fil.curr_column .. ];
      incr(dir_fil.curr_line);
      dir_fil.curr_column := 1;
    end if;
  end func;


const func string: gets (in dir_file: dir_fil, in integer: leng) is func
  result
    var string: stri is "";
  begin
    stri := "";
  end func;

