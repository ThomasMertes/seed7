
(********************************************************************)
(*                                                                  *)
(*  progs.s7i     Program handling support library                  *)
(*  Copyright (C) 1991 - 1994, 2004, 2005  Thomas Mertes            *)
(*                                                                  *)
(*  This file is part of the Seed7 Runtime Library.                 *)
(*                                                                  *)
(*  The Seed7 Runtime Library is free software; you can             *)
(*  redistribute it and/or modify it under the terms of the GNU     *)
(*  Lesser General Public License as published by the Free Software *)
(*  Foundation; either version 2.1 of the License, or (at your      *)
(*  option) any later version.                                      *)
(*                                                                  *)
(*  The Seed7 Runtime Library is distributed in the hope that it    *)
(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)
(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)
(*  PURPOSE.  See the GNU Lesser General Public License for more    *)
(*  details.                                                        *)
(*                                                                  *)
(*  You should have received a copy of the GNU Lesser General       *)
(*  Public License along with this program; if not, write to the    *)
(*  Free Software Foundation, Inc., 51 Franklin Street,             *)
(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)
(*                                                                  *)
(********************************************************************)


include "category.s7i";
include "bstring.s7i";
include "bigint.s7i";
include "float.s7i";
include "external_file.s7i";
include "graph.s7i";
include "poll.s7i";


(**
 *  Type to describe a Seed7 program.
 *)
const type: program is subtype object;


const proc: (ref program param) ::= (ref program param)                 is action "PRG_CREATE";
const proc: destroy (ref program param)                                 is action "PRG_DESTR";
const proc: (inout program: dest) := (ref program: source)              is action "PRG_CPY";

const func program: _GENERATE_EMPTY_PROG                                is action "PRG_EMPTY";
const program: (attr program) . EMPTY                                   is _GENERATE_EMPTY_PROG;
const program: (attr program) . value                                   is program.EMPTY;


(**
 *  Check if two ''program'' values are equal.
 *  @return TRUE if both values are equal, FALSE otherwise.
 *)
const func boolean: (ref program: prog1) = (ref program: prog2)         is action "PRG_EQ";


(**
 *  Check if two ''program'' values are not equal.
 *  @return FALSE if both values are equal, TRUE otherwise.
 *)
const func boolean: (ref program: prog1) <> (ref program: prog2)        is action "PRG_NE";


(**
 *  Parse the file with the name ''fileName''.
 *  @return the parsed program.
 *  @exception RANGE_ERROR ''fileName'' does not use the standard path
 *             representation or ''fileName'' is not representable in
 *             the system path type.
 *  @exception MEMORY_ERROR An out of memory situation occurred.
 *)
const func program: parseFile (in string: fileName)                     is action "PRG_FIL_PARSE";


(**
 *  Parse the given ''string''.
 *  @return the parsed program.
 *  @exception MEMORY_ERROR An out of memory situation occurred.
 *)
const func program: parseStri (in string: stri)                         is action "PRG_STR_PARSE";


(**
 *  Evaluate ''anExpression'' which is part of ''aProgram''.
 *  @return the result of the evaluation.
 *)
const func reference: evaluate (ref program: aProgram,
                                ref reference: anExpression)            is action "PRG_EVAL";


(**
 *  Execute the program referred by ''aProgram''.
 *)
const proc: execute (ref program: aProgram)                             is action "PRG_EXEC";


(**
 *  Determine the value of the system variable ''name'' in ''aProgram''.
 *  @return a reference to the system variable or
 *          NIL when no system variable ''name'' exists.
 *  @exception MEMORY_ERROR When ''name'' cannot be converted to
 *             the internal representation.
 *)
const func reference: sys_var (ref program: aProgram, in string: name)  is action "PRG_SYSVAR";


(**
 *  Determine the number of errors in ''aProgram''.
 *  @return the number of errors.
 *)
const func integer: error_count (ref program: aProgram)                 is action "PRG_ERROR_COUNT";


(**
 *  Determine the list of objects declared in ''aProgram''.
 *  @return the list of declared objects.
 *)
const func ref_list: declared_objects (ref program: aProgram)           is action "PRG_DECL_OBJECTS";


(**
 *  Determine object with ''name'' from program ''aProgram''.
 *  @return a reference to the object or NIL when no object ''name'' exists.
 *  @exception MEMORY_ERROR When ''name'' cannot be converted to
 *             the internal representation.
 *)
const func reference: syobject (ref program: aProgram, ref string: name) is action "PRG_SYOBJECT";


(**
 *  Determine object from program ''aProgram'' which matches ''expession''.
 *  @return object from program.
 *)
const func reference: match (ref program: aProgram, ref ref_list: expession) is action "PRG_MATCH";


const func reference: matchExpr (ref program param, ref ref_list param) is action "PRG_MATCH_EXPR";
# const func program: get (PROGRAM)                                       is action "PRG_PROG";


(**
 *  Determine if a referenced object is variable.
 *  @return TRUE if ''aReference'' is a variable, FALSE otherwise.
 *  @exception RANGE_ERROR When ''aReference'' is NIL.
 *)
const func boolean: isVar (in reference: aReference)                    is action "REF_ISVAR";


(**
 *  Set var flag of a referenced object.
 *  @exception RANGE_ERROR When ''aReference'' is NIL.
 *)
const proc: setVar (in reference: aReference, in boolean: isVariable)   is action "REF_SETVAR";


(**
 *  Get the category of a referenced object.
 *  @return the category of the referenced object.
 *  @exception RANGE_ERROR When ''aReference'' is NIL.
 *)
const func category: category (in reference: aReference)                is action "REF_CATEGORY";


(**
 *  Set the category of a referenced object.
 *  @exception RANGE_ERROR When ''aReference'' is NIL.
 *)
const proc: setCategory (in reference: aReference, in category: cat)    is action "REF_SETCATEGORY";


(* const func reference: meta (ref reference param)                     is action "REF_META"; *)


(**
 *  Get the formal parameters of the function referenced by ''aReference''.
 *  For objects without parameters an empty list is returned.
 *  @return the formal parameters as [[ref_list]].
 *  @exception RANGE_ERROR When ''aReference'' is NIL.
 *  @exception MEMORY_ERROR An out of memory situation occurred.
 *)
const func ref_list: params (in reference: aReference)                  is action "REF_PARAMS";


const proc: setParams (ref reference param, ref ref_list param)         is action "REF_SETPARAMS";
const func reference: func_result (ref reference param)                 is action "REF_RESULT";
const func reference: func_res_init (ref reference param)               is action "REF_RESINI";
const func ref_list: local_consts (ref reference param)                 is action "REF_LOCAL_CONSTS";
const func ref_list: local_vars (ref reference param)                   is action "REF_LOCAL_VARS";
const func reference: body (ref reference param)                        is action "REF_BODY";
const func ref_list: array_to_list (ref reference param)                is action "REF_ARRTOLIST";
const func integer: array_min_index (ref reference param)               is action "REF_ARRMINIDX";
const func integer: array_max_index (ref reference param)               is action "REF_ARRMAXIDX";
const func ref_list: struct_to_list (ref reference param)               is action "REF_SCTTOLIST";
const func ref_list: hash_data_to_list (ref reference param)            is action "REF_HSHDATATOLIST";
const func ref_list: hash_key_to_list (ref reference param)             is action "REF_HSHKEYTOLIST";
const func reference: interface_to_struct (ref reference param)         is action "REF_ITFTOSCT";


(**
 *  Determine the file name of a referenced object.
 *  @return the file name of the referenced object.
 *  @exception RANGE_ERROR When ''aReference'' is NIL.
 *  @exception MEMORY_ERROR Not enough memory to represent the result.
 *)
const func string: file (in reference: aReference)                      is action "REF_FILE";


(**
 *  Determine the line number of a referenced object.
 *  @return the line number of the referenced object.
 *  @exception RANGE_ERROR When ''aReference'' is NIL.
 *)
const func integer: line (ref reference: aReference)                    is action "REF_LINE";


const func reference: alloc (in reference param)                        is action "REF_ALLOC";
const func integer: obj_number (ref reference param)                    is action "REF_NUM";

const func integer: getValue (ref reference param, attr integer)        is action "INT_VALUE";
const func char: getValue (ref reference param, attr char)              is action "CHR_VALUE";
const func string: getValue (ref reference param, attr string)          is action "STR_VALUE";
const func bstring: getValue (ref reference param, attr bstring)        is action "BST_VALUE";
const func bitset: getValue (ref reference param, attr bitset)          is action "SET_VALUE";
const func pollData: getValue (ref reference param, attr pollData)      is action "POL_VALUE";
const func program: getValue (ref reference param, attr program)        is action "PRG_VALUE";
const func ACTION: getValue (ref reference param, attr ACTION)          is action "ACT_VALUE";
const func clib_file: getValue (ref reference param, attr clib_file)    is action "FIL_VALUE";
const func ref_list: getValue (ref reference param, attr ref_list)      is action "RFL_VALUE";
const func bigInteger: getValue (ref reference param, attr bigInteger)  is action "BIG_VALUE";
const func float: getValue (ref reference param, attr float)            is action "FLT_VALUE";
const func reference: getValue (ref reference param, attr reference)    is action "REF_VALUE";
const func PRIMITIVE_WINDOW: getValue (ref reference param,
                                       attr PRIMITIVE_WINDOW)           is action "DRW_VALUE";
# const func type: getValue (in reference param, attr type)               is action "TYP_VALUE";
(*
const func integer: integer (ref reference param)                       is action "INT_VALUE";
const func char: char (ref reference param)                             is action "CHR_VALUE";
const func string: string (ref reference param)                         is action "STR_VALUE";
const func bitset: bitset (ref reference param)                         is action "SET_VALUE";
const func program: program (ref reference param)                       is action "PRG_VALUE";
const func ACTION: ACTION (ref reference param)                         is action "ACT_VALUE";
const func clib_file: clib_file (ref reference param)                   is action "FIL_VALUE";
const func ref_list: ref_list (ref reference param)                     is action "RFL_VALUE";
const func bigInteger: bigInteger (ref reference param)                 is action "BIG_VALUE";
const func float: float (ref reference param)                           is action "FLT_VALUE";
const func reference: reference (ref reference param)                   is action "REF_VALUE";
const func type: type (ref reference: aRef)
  return getValue(aRef, type);
*)
const proc: setValue(inout reference param, in ref_list param)          is action "RFL_SETVALUE";

const func integer: type_number (ref type param)                        is action "TYP_NUM";
const func reference: match_obj (ref type param)                        is action "TYP_MATCHOBJ";
