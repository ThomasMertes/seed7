
(********************************************************************)
(*                                                                  *)
(*  scanfile.s7i  File scanner functions                            *)
(*  Copyright (C) 1989 - 2008  Thomas Mertes                        *)
(*                                                                  *)
(*  This file is part of the Seed7 Runtime Library.                 *)
(*                                                                  *)
(*  The Seed7 Runtime Library is free software; you can             *)
(*  redistribute it and/or modify it under the terms of the GNU     *)
(*  Lesser General Public License as published by the Free Software *)
(*  Foundation; either version 2.1 of the License, or (at your      *)
(*  option) any later version.                                      *)
(*                                                                  *)
(*  The Seed7 Runtime Library is distributed in the hope that it    *)
(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)
(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)
(*  PURPOSE.  See the GNU Lesser General Public License for more    *)
(*  details.                                                        *)
(*                                                                  *)
(*  You should have received a copy of the GNU Lesser General       *)
(*  Public License along with this program; if not, write to the    *)
(*  Free Software Foundation, Inc., 51 Franklin Street,             *)
(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)
(*                                                                  *)
(********************************************************************)


include "charsets.s7i";


(**
 *  Skips a possibly nested comment from the 'inFile'.
 *  The comment starts with (* and ends with *) . When the function is
 *  called it is assumed that the '*' is in inFile.bufferChar. When
 *  the function is left the character after the ')' is in
 *  inFile.bufferChar.
 *)
const proc: skipComment (inout file: inFile) is func
  local
    var char: character is ' ';
  begin
    character := getc(inFile);
    repeat
      repeat
        while character not in special_comment_char do
          character := getc(inFile);
        end while;
        if character = '(' then
          character := getc(inFile);
          if character = '*' then
            skipComment(inFile);
            character := getc(inFile);
          end if;
        end if;
      until character = '*' or character = EOF;
      if character <> EOF then
        character := getc(inFile);
      end if;
    until character = ')' or character = EOF;
    if character = EOF then
      inFile.bufferChar := EOF;
    else
      inFile.bufferChar := getc(inFile);
    end if;
  end func; # skipComment


(**
 *  Reads a possibly nested comment from the 'inFile'.
 *  The comment starts with (* and ends with *) . When the function is
 *  called it is assumed that the '*' is in inFile.bufferChar. When
 *  the function is left the character after the ')' is in
 *  inFile.bufferChar.
 *  @return the content of the comment, including the introducing (*
 *          and the ending *) .
 *)
const func string: getComment (inout file: inFile) is func
  result
    var string: symbol is "(*";
  local
    var char: character is ' ';
  begin
    character := getc(inFile);
    repeat
      repeat
        while character not in special_comment_char do
          symbol &:= str(character);
          character := getc(inFile);
        end while;
        if character = '(' then
          character := getc(inFile);
          if character = '*' then
            symbol &:= getComment(inFile);
            character := inFile.bufferChar;
          else
            symbol &:= "(";
          end if;
        end if;
      until character = '*' or character = EOF;
      if character <> EOF then
        symbol &:= str(character);
        character := getc(inFile);
      end if;
    until character = ')' or character = EOF;
    if character = EOF then
      inFile.bufferChar := EOF;
    else
      symbol &:= str(character);
      inFile.bufferChar := getc(inFile);
    end if;
  end func; # getComment


(**
 *  Skips a line comment from the 'inFile'.
 *  A line comment starts with # and ends with the end of the line.
 *  When the function is called it is assumed that the '#' is in
 *  inFile.bufferChar. When the function is left the line end
 *  character ('\n' or EOF) is in inFile.bufferChar.
 *)
const proc: skipLineComment (inout file: inFile) is func
  local
    var char: character is ' ';
  begin
    repeat
      character := getc(inFile);
    until character = '\n' or character = EOF;
    inFile.bufferChar := character;
  end func; # skipLineComment


(**
 *  Reads a line comment from the 'inFile'.
 *  A line comment starts with # and ends with the end of the line.
 *  When the function is called it is assumed that the '#' is in
 *  inFile.bufferChar. When the function is left the line end
 *  character ('\n' or EOF) is in inFile.bufferChar.
 *  @return the content of the comment, including the start
 *          marker # but without the line end character.
 *)
const func string: getLineComment (inout file: inFile) is func
  result
    var string: symbol is "#";
  local
    var char: character is ' ';
  begin
    character := getc(inFile);
    while character <> '\n' and character <> EOF do
      symbol &:= str(character);
      character := getc(inFile);
    end while;
    inFile.bufferChar := character;
  end func; # getLineComment


(**
 *  Reads a sequence of digits from the 'inFile'.
 *  When the function is called it is assumed that inFile.bufferChar
 *  contains the first character to be handled. When the function is
 *  left inFile.bufferChar contains the character after the digits.
 *  @return the digit sequence or "" when no digit was found.
 *)
const func string: getDigits (inout file: inFile) is func
  result
    var string: symbol is "";
  local
    var char: character is ' ';
  begin
    if inFile.bufferChar in digit_char then
      symbol := str(inFile.bufferChar);
      character := getc(inFile);
      while character in digit_char do
        symbol &:= str(character);
        character := getc(inFile);
      end while;
      inFile.bufferChar := character;
    end if;
  end func;


(**
 *  Reads a numeric literal from the 'inFile'.
 *  When the function is called it is assumed that the introducing
 *  digit is in inFile.bufferChar. When the function is left the
 *  character after the literal is in inFile.bufferChar.
 *  @return The function returns the numeric literal.
 *)
const func string: getNumber (inout file: inFile) is func
  result
    var string: symbol is "";
  local
    var char: character is ' ';
  begin
    symbol := str(inFile.bufferChar);
    character := getc(inFile);
    while character in digit_char do
      symbol &:= str(character);
      character := getc(inFile);
    end while;
    if character = '.' then
      # float literal
      symbol &:= str(character);
      character := getc(inFile);
      while character in digit_char do
        symbol &:= str(character);
        character := getc(inFile);
      end while;
      if character = 'E' or character = 'e' then
        symbol &:= str(character);
        character := getc(inFile);
        if character = '+' then
          symbol &:= str(character);
          character := getc(inFile);
        elsif character = '-' then
          symbol &:= str(character);
          character := getc(inFile);
        end if;
        while character in digit_char do
          symbol &:= str(character);
          character := getc(inFile);
        end while;
      end if;
    elsif character = '#' then
      # based integer literal
      symbol &:= str(character);
      character := getc(inFile);
      while character in alphanum_char do
        symbol &:= str(character);
        character := getc(inFile);
      end while;
    elsif character = 'E' or character = 'e' then
      # integer literal with exponent
      symbol &:= str(character);
      character := getc(inFile);
      if character = '+' then
        symbol &:= str(character);
        character := getc(inFile);
      elsif character = '-' then
        symbol &:= str(character);
        character := getc(inFile);
      end if;
      while character in digit_char do
        symbol &:= str(character);
        character := getc(inFile);
      end while;
    elsif character = '_' then
      # bigInteger literal
      symbol &:= str(character);
      character := getc(inFile);
    end if;
    inFile.bufferChar := character;
  end func;


(**
 *  Reads an escape sequence from 'inFile' and appends it to 'symbol'.
 *  The function accepts escape sequences from character end string
 *  literals. When the function is called it is assumed that the
 *  introducing \ is in inFile.bufferChar. When the function is left
 *  the character after the escape sequence is in inFile.bufferChar.
 *  The complete escape sequence including the introducing \ is
 *  appended to 'symbol'.
 *)
const proc: getEscapeSequence (inout file: inFile, inout string: symbol) is func
  local
    var char: character is ' ';
  begin
    symbol &:= "\\";
    character := getc(inFile);
    if character = '\n' or character = ' ' or character = '\t' or character = '\r' then
      repeat
        symbol &:= str(character);
        character := getc(inFile);
      until character <> '\n' and character <> ' ' and character <> '\t' and character <> '\r';
      if character = '\\' then
        symbol &:= str(character);
        character := getc(inFile);
      end if;
    elsif character in digit_char then
      inFile.bufferChar := character;
      symbol &:= getNumber(inFile);
      character := inFile.bufferChar;
      if character = '\\' then
        symbol &:= str(character);
        character := getc(inFile);
      end if;
    elsif character <> EOF then
      symbol &:= str(character);
      character := getc(inFile);
    end if;
    inFile.bufferChar := character;
  end func;


(**
 *  Reads a character literal from the 'inFile'.
 *  When the function is called it is assumed that the introducing '
 *  is in inFile.bufferChar. When the function is left the character
 *  after the closing ' is in inFile.bufferChar.
 *  @return the character literal including the introducing ' and
 *          the closing ' .
 *)
const func string: getCharLiteral (inout file: inFile) is func
  result
    var string: symbol is "'";
  local
    var char: character is ' ';
  begin
    character := getc(inFile);
    if character <> '\n' and character <> '\r' and character <> EOF then
      if character = '\\' then
        repeat
          getEscapeSequence(inFile, symbol);
          character := inFile.bufferChar;
        until character <> '\\';
      else
        symbol &:= str(character);
        character := getc(inFile);
      end if;
      if character <> '\'' then
        if character <> '\n' and character <> '\r' and character <> EOF then
          repeat
            symbol &:= str(character);
            character := getc(inFile);
          until character = '\'' or
              character = '\n' or
              character = '\r' or
              character = EOF;
          if character = '\'' then
            symbol &:= str(character);
            character := getc(inFile);
          end if;
        end if;
      else
        symbol &:= str(character);
        character := getc(inFile);
      end if;
    end if;
    inFile.bufferChar := character;
  end func;


(**
 *  Reads a string literal from the 'inFile'.
 *  When the function is called it is assumed that the introducing "
 *  is in inFile.bufferChar. When the function is left the character
 *  after the closing " is in inFile.bufferChar.
 *  @return the string literal including the introducing " and the
 *          closing " .
 *)
const func string: getStringLiteral (inout file: inFile) is func
  result
    var string: symbol is "\"";
  local
    var char: character is ' ';
    var boolean: reading_string is TRUE;
  begin
    character := getc(inFile);
    repeat
      while character in no_escape_char do
        symbol &:= str(character);
        character := getc(inFile);
      end while;
      if character = '\"' then
        symbol &:= str(character);
        character := getc(inFile);
        if character = '\"' then
          symbol &:= str(character);
          character := getc(inFile);
        else
          reading_string := FALSE;
        end if;
      elsif character = '\\' then
        getEscapeSequence(inFile, symbol);
        character := inFile.bufferChar;
      elsif character = '\n' or character = '\r' or character = EOF then
        reading_string := FALSE;
      else
        repeat
          symbol &:= str(character);
          character := getc(inFile);
        until character >= ' ' or character <= '~' or character = EOF;
      end if;
    until not reading_string;
    inFile.bufferChar := character;
  end func;


(**
 *  Reads an alphanumeric name from the 'inFile'.
 *  A name consists of a letter or underscore followed by letters,
 *  digits or underscores. When the function is called it is assumed
 *  that inFile.bufferChar contains the first character to be handled.
 *  When the function is left inFile.bufferChar contains the character
 *  after the name.
 *  @return the name or "" when no letter or underscore was found.
 *)
const func string: getName (inout file: inFile) is func
  result
    var string: symbol is "";
  local
    var char: character is ' ';
  begin
    if inFile.bufferChar in name_start_char then
      symbol := str(inFile.bufferChar);
      character := getc(inFile);
      while character in name_char do
        symbol &:= str(character);
        character := getc(inFile);
      end while;
      inFile.bufferChar := character;
    end if;
  end func;


(**
 *  Skips space characters from the 'inFile'.
 *  When the function is called it is assumed that inFile.bufferChar
 *  contains the first character to be handled. When the function is
 *  left inFile.bufferChar does not contain a space character.
 *)
const proc: skipSpace (inout file: inFile) is func
  local
    var char: ch is ' ';
  begin
    ch := inFile.bufferChar;
    while ch = ' ' do
      ch := getc(inFile);
    end while;
    inFile.bufferChar := ch;
  end func;


(**
 *  Skips whitespace characters from the 'inFile'.
 *  When the function is called it is assumed that inFile.bufferChar
 *  contains the first character to be handled. When the function is
 *  left inFile.bufferChar contains the character after the
 *  whitespace characters.
 *)
const proc: skipWhiteSpace (inout file: inFile) is func
  begin
    while inFile.bufferChar in white_space_char do
      inFile.bufferChar := getc(inFile);
    end while;
  end func;


(**
 *  Reads whitespace characters from the 'inFile'.
 *  When the function is called it is assumed that inFile.bufferChar
 *  contains the first character to be handled. When the function is
 *  left inFile.bufferChar contains the character after the
 *  whitespace characters.
 *  @return the string of whitespace characters or "" when no
 *          whitespace character was found.
 *)
const func string: getWhiteSpace (inout file: inFile) is func
  result
    var string: symbol is "";
  begin
    while inFile.bufferChar in white_space_char do
      symbol &:= str(inFile.bufferChar);
      inFile.bufferChar := getc(inFile);
    end while;
  end func;


(**
 *  Reads a symbol or a comment from the 'inFile'.
 *  Before reading the symbol or comment it skips whitespace
 *  characters. A symbol can be a literal (numeric, character or
 *  string), a name, a special symbol (sequence of special characters)
 *  or a parenthesis. A comment can be a normal comment or a line
 *  comment. When the function is called it is assumed that
 *  inFile.bufferChar contains a whitespace character or the first
 *  character of a symbol or comment. When the function is left the
 *  character after the symbol or comment is in inFile.bufferChar.
 *  @return the symbol, comment or "" when EOF was reached.
 *)
const func string: getSymbolOrComment (inout file: inFile) is func
  result
    var string: symbol is "";
  begin
    while inFile.bufferChar in white_space_char do
      inFile.bufferChar := getc(inFile);
    end while;
    case inFile.bufferChar of
      when name_start_char:
        symbol := str(inFile.bufferChar);
        inFile.bufferChar := getc(inFile);
        while inFile.bufferChar in name_char do
          symbol &:= str(inFile.bufferChar);
          inFile.bufferChar := getc(inFile);
        end while;
      when special_char:
        symbol := str(inFile.bufferChar);
        inFile.bufferChar := getc(inFile);
        while inFile.bufferChar in special_char do
          symbol &:= str(inFile.bufferChar);
          inFile.bufferChar := getc(inFile);
        end while;
      when left_paren_char:
        inFile.bufferChar := getc(inFile);
        if inFile.bufferChar = '*' then
          symbol := getComment(inFile);
        else
          symbol := "(";
        end if;
      when other_paren_char:
        symbol := str(inFile.bufferChar);
        inFile.bufferChar := getc(inFile);
      when digit_char:
        symbol := getNumber(inFile);
      when apostrophe_char:
        symbol := getCharLiteral(inFile);
      when quotation_char:
        symbol := getStringLiteral(inFile);
      when sharp_char:
        symbol := getLineComment(inFile);
      when {EOF}:
        symbol := "";
      otherwise:
        symbol := str(inFile.bufferChar);
        inFile.bufferChar := getc(inFile);
    end case;
  end func;


(**
 *  Reads a symbol from the 'inFile'.
 *  Before reading the symbol it skips whitespace characters and
 *  comments (normal comments and line comments). A symbol can be a
 *  literal (numeric, character or string), a name, a special symbol
 *  (sequence of special characters) or a parenthesis. When the
 *  function is called it is assumed that inFile.bufferChar contains
 *  a whitespace character or the first character of a symbol or
 *  comment. When the function is left the character after the symbol
 *  is in inFile.bufferChar.
 *  @return the symbol or "" when EOF was reached.
 *)
const func string: getSymbol (inout file: inFile) is func
  result
    var string: symbol is "";
  begin
    while inFile.bufferChar in white_space_char do
      inFile.bufferChar := getc(inFile);
    end while;
    case inFile.bufferChar of
      when name_start_char:
        symbol := str(inFile.bufferChar);
        inFile.bufferChar := getc(inFile);
        while inFile.bufferChar in name_char do
          symbol &:= str(inFile.bufferChar);
          inFile.bufferChar := getc(inFile);
        end while;
      when special_char:
        symbol := str(inFile.bufferChar);
        inFile.bufferChar := getc(inFile);
        while inFile.bufferChar in special_char do
          symbol &:= str(inFile.bufferChar);
          inFile.bufferChar := getc(inFile);
        end while;
      when left_paren_char:
        inFile.bufferChar := getc(inFile);
        if inFile.bufferChar = '*' then
          skipComment(inFile);
          symbol := getSymbol(inFile);
        else
          symbol := "(";
        end if;
      when other_paren_char:
        symbol := str(inFile.bufferChar);
        inFile.bufferChar := getc(inFile);
      when digit_char:
        symbol := getNumber(inFile);
      when apostrophe_char:
        symbol := getCharLiteral(inFile);
      when quotation_char:
        symbol := getStringLiteral(inFile);
      when sharp_char:
        skipLineComment(inFile);
        symbol := getSymbol(inFile);
      when {EOF}:
        symbol := "";
      otherwise:
        symbol := str(inFile.bufferChar);
        inFile.bufferChar := getc(inFile);
    end case;
  end func;


(**
 *  Reads a HTML tag, a symbol or a comment from the 'inFile'.
 *  Before reading the HTML tag, symbol or comment it skips whitespace
 *  characters. A HTML tag starts with < and ends with > . A symbol
 *  can be a literal (numeric, character or string), a name, a special
 *  symbol (sequence of special characters) or a parenthesis.
 *  A comment can be a normal comment or a line comment. When the
 *  function is called it is assumed that inFile.bufferChar contains
 *  a whitespace character, an introducing < of a HTML tag or the
 *  first character of a symbol or a comment. When the function is
 *  left the character after the HTML tag, symbol or comment is in
 *  inFile.bufferChar.
 *  @return the HTML tag, symbol, comment or "" when EOF was reached.
 *)
const func string: getHtmlTagSymbolOrComment (inout file: inFile) is func
  result
    var string: symbol is "";
  begin
    while inFile.bufferChar in white_space_char do
      inFile.bufferChar := getc(inFile);
    end while;
    case inFile.bufferChar of
      when name_start_char:
        symbol := str(inFile.bufferChar);
        inFile.bufferChar := getc(inFile);
        while inFile.bufferChar in name_char do
          symbol &:= str(inFile.bufferChar);
          inFile.bufferChar := getc(inFile);
        end while;
      when special_html_char:
        if inFile.bufferChar = '&' then
          repeat
            symbol &:= str(inFile.bufferChar);
            inFile.bufferChar := getc(inFile);
          until inFile.bufferChar = ';';
        end if;
        symbol &:= str(inFile.bufferChar);
        inFile.bufferChar := getc(inFile);
        while inFile.bufferChar in special_html_char do
          if inFile.bufferChar = '&' then
            repeat
              symbol &:= str(inFile.bufferChar);
              inFile.bufferChar := getc(inFile);
            until inFile.bufferChar = ';';
          end if;
          symbol &:= str(inFile.bufferChar);
          inFile.bufferChar := getc(inFile);
        end while;
      when left_paren_char:
        inFile.bufferChar := getc(inFile);
        if inFile.bufferChar = '*' then
          symbol := getComment(inFile);
        else
          symbol := "(";
        end if;
      when other_paren_char:
        symbol := str(inFile.bufferChar);
        inFile.bufferChar := getc(inFile);
      when angle_bracket:
        repeat
          symbol &:= str(inFile.bufferChar);
          inFile.bufferChar := getc(inFile);
        until inFile.bufferChar = '>' or inFile.bufferChar = EOF;
        if inFile.bufferChar <> EOF then
          symbol &:= str(inFile.bufferChar);
          inFile.bufferChar := getc(inFile);
        end if;
      when digit_char:
        symbol := getNumber(inFile);
      when apostrophe_char:
        symbol := getCharLiteral(inFile);
      when quotation_char:
        symbol := getStringLiteral(inFile);
      when sharp_char:
        symbol := getLineComment(inFile);
      when {EOF}:
        symbol := "";
      otherwise:
        symbol := str(inFile.bufferChar);
        inFile.bufferChar := getc(inFile);
    end case;
  end func;


(**
 *  Reads a HTML tag or the HTML content text from the 'inFile'.
 *  A HTML tag starts with < and ends with > . The content text starts
 *  with everything else and ends just before a < or with EOF. When
 *  the function is called it is assumed that inFile.bufferChar
 *  contains the introducing < of a HTML tag or the first charater of
 *  the content text. When the function is left the character after
 *  the HTML tag or the content text is in inFile.bufferChar.
 *  @return the HTML tag, HTML content text or "" when EOF was
 *          reached.
 *)
const func string: getHtmlTagOrContent (inout file: inFile) is func
  result
    var string: symbol is "";
  begin
    if inFile.bufferChar = '<' then
      repeat
        symbol &:= str(inFile.bufferChar);
        inFile.bufferChar := getc(inFile);
      until inFile.bufferChar = '>' or inFile.bufferChar = EOF;
      if inFile.bufferChar <> EOF then
        symbol &:= str(inFile.bufferChar);
        inFile.bufferChar := getc(inFile);
      end if;
    else
      if inFile.bufferChar <> EOF then
        repeat
          symbol &:= str(inFile.bufferChar);
          inFile.bufferChar := getc(inFile);
        until inFile.bufferChar = '<' or inFile.bufferChar = EOF;
      end if;
    end if;
  end func;


(**
 *  Reads a simple symbol from the 'inFile'.
 *  Before reading the simple symbol it skips whitespace characters.
 *  A simple symbol can be an integer literal, a name, a special
 *  symbol (sequence of special characters) or a parenthesis.
 *  Note that string, char and float literals are not recognized as
 *  simple symbol.
 *  @return the simple symbol or "" when EOF was reached.
 *)
const func string: getSimpleSymbol (inout file: inFile) is func
  result
    var string: symbol is "";
  begin
    while inFile.bufferChar in white_space_char do
      inFile.bufferChar := getc(inFile);
    end while;
    case inFile.bufferChar of
      when name_start_char:
        symbol := str(inFile.bufferChar);
        inFile.bufferChar := getc(inFile);
        while inFile.bufferChar in name_char do
          symbol &:= str(inFile.bufferChar);
          inFile.bufferChar := getc(inFile);
        end while;
      when extended_special_char:
        symbol := str(inFile.bufferChar);
        inFile.bufferChar := getc(inFile);
        while inFile.bufferChar in extended_special_char do
          symbol &:= str(inFile.bufferChar);
          inFile.bufferChar := getc(inFile);
        end while;
      when paren_char:
        symbol := str(inFile.bufferChar);
        inFile.bufferChar := getc(inFile);
      when digit_char:
        symbol := str(inFile.bufferChar);
        inFile.bufferChar := getc(inFile);
        while inFile.bufferChar in digit_char do
          symbol &:= str(inFile.bufferChar);
          inFile.bufferChar := getc(inFile);
        end while;
      when {EOF}:
        symbol := "";
      otherwise:
        symbol := str(inFile.bufferChar);
        inFile.bufferChar := getc(inFile);
    end case;
  end func;
