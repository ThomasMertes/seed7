<html>
<head>
<title>
Seed7 Manual</title>
<style type="text/css">
<!--
a.link:visited { color: mediumblue; text-decoration: none }
a.link:link    { color: blue; text-decoration: none }
a.link:hover   { color: blue; text-decoration: underline }
a.link:active  { color: orange; text-decoration: underline }

a.menu:visited { color: purple; background-color: silver }
a.menu:link    { color: purple; background-color: silver }
a.menu:hover   { color: red;    background-color: silver }
a.menu:active  { color: green;  background-color: silver }

a.head:visited { color: cyan;  background-color: blue }
a.head:link    { color: cyan;  background-color: blue }
a.head:hover   { color: white; background-color: blue }
a.head:active  { color: green; background-color: blue }

a.type:visited { color: red; text-decoration: underline  }
a.type:link    { color: red; text-decoration: underline  }
a.type:hover   { color: navy }
a.type:active  { color: gold }

a.keywd:visited { color: blue; text-decoration: underline  }
a.keywd:link    { color: blue; text-decoration: underline  }
a.keywd:hover   { color: orange }
a.keywd:active  { color: green }

a.op:visited { color: blue; text-decoration: underline  }
a.op:link    { color: blue; text-decoration: underline  }
a.op:hover   { color: orange }
a.op:active  { color: green }

a.lib:visited { color: maroon; text-decoration: underline  }
a.lib:link    { color: maroon; text-decoration: underline  }
a.lib:hover   { color: blue }
a.lib:active  { color: orange }

a.prog:visited { color: darkgreen; text-decoration: underline  }
a.prog:link    { color: darkgreen; text-decoration: underline  }
a.prog:hover   { color: darkorange }
a.prog:active  { color: orange }

a.func:visited { color: purple; text-decoration: underline  }
a.func:link    { color: purple; text-decoration: underline  }
a.func:hover   { color: magenta }
a.func:active  { color: olive }

a.var:visited { color: darkcyan; text-decoration: underline  }
a.var:link    { color: darkcyan; text-decoration: underline  }
a.var:hover   { color: darkred }
a.var:active  { color: gold }

span.type    { color: red }
span.keywd   { color: blue }
span.op      { color: blue }
span.comment { color: green }
span.stri    { color: maroon }
span.lib     { color: maroon }
span.prog    { color: darkgreen }
span.func    { color: purple }
span.var     { color: darkcyan }

body { font-size: 12px; }
p    { font-size: 12pt; }
li   { font-size: 12pt; }
td   { font-size: 12pt; }
tt   { font-size: 10pt; }

pre {
    border: 1pt dashed black;
    white-space: pre;
    table-display: fixed;
    white-space: pre-wrap;
    font-size: 10pt;
    overflow: auto;
    padding: 1em 0;
    background: #F8F8F8;
    color: black;
}

pre.indent {
    border: 1pt dashed black;
    white-space: pre;
    table-display: fixed;
    white-space: pre-wrap;
    font-size: 10pt;
    overflow: auto;
    padding: 1em 0;
    background: #F8F8F8;
    color: black;
    padding-left: 16;
}

//-->
</style>
</head>
<body>

<!-- (********************************************************************)
(*                                                                  *)
(*  manual.txt                                                      *)
(*                                                                  *)
(*  Copyright (C) 1989 - 2012  Thomas Mertes                        *)
(*  All rights reserved.                                            *)
(*                                                                  *)
(*  Documentation:  --><p></p><hr><h1 align="center">Manual for the Seed7 programming language</h1><hr><!--         *)
(*                                                                  *)
(*  This file is distributed "AS IS" in the hope that it will be    *)
(*  useful, but WITHOUT ANY WARRANTY; without even the implied      *)
(*  warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.*)
(*                                                                  *)
(********************************************************************) -->


<div>
<h2>CONTENTS</h2>
<!-- ======== -->
<ol>
<li><!--   1.     --><a class="link" href="#intro_file_start"><big><b>INTRODUCTION</b></big></a><ol>
<li><!--   1.1      --><a class="link" href="#intro_What_is_Seed7"><b>What is Seed7?</b></a></li>
<li><!--   1.2      --><a class="link" href="#intro_Why_a_new_programming_language"><b>Why a new programming language?</b></a></li>
<li><!--   1.3      --><a class="link" href="#intro_Features_of_Seed7"><b>Features of Seed7</b></a></li>
<li><!--   1.4      --><a class="link" href="#intro_How_to_read_the_manual"><b>How to read the manual</b></a></li></ol></li>
<li><!--   2.     --><a class="link" href="#tutorial_file_start"><big><b>TUTORIAL</b></big></a><ol>
<li><!--   2.1      --><a class="link" href="#tutorial_Hello_world"><b>Hello world</b></a></li>
<li><!--   2.2      --><a class="link" href="#tutorial_Local_declarations_and_expressions"><b>Local declarations and expressions</b></a></li>
<li><!--   2.3      --><a class="link" href="#tutorial_For_loop_and_float_expressions"><b>For loop and float expressions</b></a></li>
<li><!--   2.4      --><a class="link" href="#tutorial_Parameters"><b>Parameters</b></a></li>
<li><!--   2.5      --><a class="link" href="#tutorial_Declare_a_statement"><b>Declare a statement</b></a></li>
<li><!--   2.6      --><a class="link" href="#tutorial_Template_declaring_a_statement"><b>Template declaring a statement</b></a></li></ol></li>
<li><!--   3.     --><a class="link" href="#decls_file_start"><big><b>DECLARATIONS</b></big></a><ol>
<li><!--   3.1      --><a class="link" href="#decls_Normal_declarations"><b>Normal declarations</b></a></li>
<li><!--   3.2      --><a class="link" href="#decls_Syntax_declarations"><b>Syntax declarations</b></a></li>
<li><!--   3.3      --><a class="link" href="#decls_System_declarations"><b>System declarations</b></a></li></ol></li>
<li><!--   4.     --><a class="link" href="#stats_file_start"><big><b>PREDEFINED STATEMENTS</b></big></a><ol>
<li><!--   4.1      --><a class="link" href="#stats_Assignment"><b>Assignment</b></a></li>
<li><!--   4.2      --><a class="link" href="#stats_while-statement"><b>while-statement</b></a></li>
<li><!--   4.3      --><a class="link" href="#stats_repeat-statement"><b>repeat-statement</b></a></li>
<li><!--   4.4      --><a class="link" href="#stats_for-statement"><b>for-statement</b></a></li>
<li><!--   4.5      --><a class="link" href="#stats_for-each-statement"><b>for-each-statement</b></a></li>
<li><!--   4.6      --><a class="link" href="#stats_if-statement"><b>if-statement</b></a></li>
<li><!--   4.7      --><a class="link" href="#stats_case-statement"><b>case-statement</b></a></li></ol></li>
<li><!--   5.     --><a class="link" href="#types_file_start"><big><b>PREDEFINED TYPES</b></big></a><ol>
<li><!--   5.1      --><a class="link" href="#types_boolean"><b>boolean</b></a></li>
<li><!--   5.2      --><a class="link" href="#types_integer"><b>integer</b></a></li>
<li><!--   5.3      --><a class="link" href="#types_bigInteger"><b>bigInteger</b></a></li>
<li><!--   5.4      --><a class="link" href="#types_rational"><b>rational</b></a></li>
<li><!--   5.5      --><a class="link" href="#types_bigRational"><b>bigRational</b></a></li>
<li><!--   5.6      --><a class="link" href="#types_float"><b>float</b></a></li>
<li><!--   5.7      --><a class="link" href="#types_complex"><b>complex</b></a></li>
<li><!--   5.8      --><a class="link" href="#types_char"><b>char</b></a></li>
<li><!--   5.9      --><a class="link" href="#types_string"><b>string</b></a></li>
<li><!--   5.10     --><a class="link" href="#types_array"><b>array</b></a></li>
<li><!--   5.11     --><a class="link" href="#types_hash"><b>hash</b></a></li>
<li><!--   5.12     --><a class="link" href="#types_set"><b>set</b></a></li>
<li><!--   5.13     --><a class="link" href="#types_struct"><b>struct</b></a></li>
<li><!--   5.14     --><a class="link" href="#types_category"><b>category</b></a></li>
<li><!--   5.15     --><a class="link" href="#types_reference"><b>reference</b></a></li>
<li><!--   5.16     --><a class="link" href="#types_ref_list"><b>ref_list</b></a></li>
<li><!--   5.17     --><a class="link" href="#types_program"><b>program</b></a></li>
<li><!--   5.18     --><a class="link" href="#types_ptr"><b>ptr</b></a></li>
<li><!--   5.19     --><a class="link" href="#types_ENUMERATION"><b>ENUMERATION</b></a></li>
<li><!--   5.20     --><a class="link" href="#types_color"><b>color</b></a></li>
<li><!--   5.21     --><a class="link" href="#types_time"><b>time</b></a></li>
<li><!--   5.22     --><a class="link" href="#types_duration"><b>duration</b></a></li>
<li><!--   5.23     --><a class="link" href="#types_file"><b>file</b></a></li>
<li><!--   5.24     --><a class="link" href="#types_text"><b>text</b></a></li>
<li><!--   5.25     --><a class="link" href="#types_func"><b>func</b></a></li>
<li><!--   5.26     --><a class="link" href="#types_varfunc"><b>varfunc</b></a></li>
<li><!--   5.27     --><a class="link" href="#types_void"><b>void</b></a></li>
<li><!--   5.28     --><a class="link" href="#types_proc"><b>proc</b></a></li>
<li><!--   5.29     --><a class="link" href="#types_type"><b>type</b></a></li>
<li><!--   5.30     --><a class="link" href="#types_object"><b>object</b></a></li>
<li><!--   5.31     --><a class="link" href="#types_expr"><b>expr</b></a></li></ol></li>
<li><!--   6.     --><a class="link" href="#params_file_start"><big><b>PARAMETERS</b></big></a><ol>
<li><!--   6.1      --><a class="link" href="#params_val_parameter"><b>'val' parameter</b></a></li>
<li><!--   6.2      --><a class="link" href="#params_ref_parameter"><b>'ref' parameter</b></a></li>
<li><!--   6.3      --><a class="link" href="#params_in_parameter"><b>'in' parameter</b></a></li>
<li><!--   6.4      --><a class="link" href="#params_in_var_parameter"><b>'in var' parameter</b></a></li>
<li><!--   6.5      --><a class="link" href="#params_inout_parameter"><b>'inout' parameter</b></a></li>
<li><!--   6.6      --><a class="link" href="#params_Symbol_parameter"><b>Symbol parameter</b></a></li>
<li><!--   6.7      --><a class="link" href="#params_attr_parameter"><b>'attr' parameter</b></a></li></ol></li>
<li><!--   7.     --><a class="link" href="#objects_OBJECT_ORIENTATION"><big><b>OBJECT ORIENTATION</b></big></a><ol>
<li><!--   7.1      --><a class="link" href="#objects_interface_and_implementation"><b>Interface and implementation</b></a></li>
<li><!--   7.2      --><a class="link" href="#objects_dynamic_dispatch"><b>Dynamic dispatch</b></a></li>
<li><!--   7.3      --><a class="link" href="#objects_inheritance"><b>Inheritance</b></a></li>
<li><!--   7.4      --><a class="link" href="#objects_class_methods"><b>Class methods</b></a></li>
<li><!--   7.5      --><a class="link" href="#objects_multiple_dispatch"><b>Multiple dispatch</b></a></li>
<li><!--   7.6      --><a class="link" href="#objects_replacing_pointers"><b>Replacing pointers with interface types</b></a></li></ol></li>
<li><!--   8.     --><a class="link" href="#file_file_start"><big><b>THE FILE SYSTEM</b></big></a><ol>
<li><!--   8.1      --><a class="link" href="#file_Conversion_to_strings_and_back"><b>Conversion to strings and back</b></a></li>
<li><!--   8.2      --><a class="link" href="#file_Basic_input_and_output_operations"><b>Basic input and output operations</b></a></li>
<li><!--   8.3      --><a class="link" href="#file_Input_and_output_with_conversion"><b>Input and output with conversion</b></a></li>
<li><!--   8.4      --><a class="link" href="#file_Simple_read_and_write_statements"><b>Simple read and write statements</b></a></li>
<li><!--   8.5      --><a class="link" href="#file_Standard_input_and_output_files"><b>Standard input and output files</b></a></li>
<li><!--   8.6      --><a class="link" href="#file_Access_to_operating_system_files"><b>Access to operating system files</b></a></li>
<li><!--   8.7      --><a class="link" href="#file_Keyboard_file"><b>Keyboard file</b></a></li>
<li><!--   8.8      --><a class="link" href="#file_Files_with_line_structure"><b>Files with line structure</b></a></li>
<li><!--   8.9      --><a class="link" href="#file_Sockets"><b>Sockets</b></a></li>
<li><!--   8.10     --><a class="link" href="#file_User_defined_file_types"><b>User defined file types</b></a></li>
<li><!--   8.11     --><a class="link" href="#file_Scanning_a_file"><b>Scanning a file</b></a></li></ol></li>
<li><!--   9.     --><a class="link" href="#syntax_file_start"><big><b>STRUCTURED SYNTAX DEFINITION</b></big></a><ol>
<li><!--   9.1      --><a class="link" href="#syntax_The_Extended_Backus-Naur_Form"><b>The Extended Backus-Naur Form</b></a></li>
<li><!--   9.2      --><a class="link" href="#syntax_The_syntax_of_a_statement"><b>The syntax of a statement</b></a></li>
<li><!--   9.3      --><a class="link" href="#syntax_Priority_and_associativity"><b>Priority and associativity</b></a></li>
<li><!--   9.4      --><a class="link" href="#syntax_The_syntax_of_operators"><b>The syntax of operators</b></a></li>
<li><!--   9.5      --><a class="link" href="#syntax_Syntax_of_predefined_statements"><b>Syntax of predefined statements</b></a></li>
<li><!--   9.6      --><a class="link" href="#syntax_Advanced_syntax_definitions"><b>Advanced syntax definitions</b></a></li>
<li><!--   9.7      --><a class="link" href="#syntax_Comparison_of_EBNF_and_S7SSD"><b>Comparison of EBNF and S7SSD</b></a></li></ol></li>
<li><!--   10.    --><a class="link" href="#tokens_file_start"><big><b>TOKENS</b></big></a><ol>
<li><!--   10.1     --><a class="link" href="#tokens_White_space"><b>White space</b></a><ol>
<li><!--   10.1.1     --><a class="link" href="#tokens_Spaces"><b><i>Spaces</i></b></a></li>
<li><!--   10.1.2     --><a class="link" href="#tokens_Comments"><b><i>Comments</i></b></a></li>
<li><!--   10.1.3     --><a class="link" href="#tokens_Line_comments"><b><i>Line comments</i></b></a></li></ol></li>
<li><!--   10.2     --><a class="link" href="#tokens_Identifiers"><b>Identifiers</b></a><ol>
<li><!--   10.2.1     --><a class="link" href="#tokens_Name_identifiers"><b><i>Name identifiers</i></b></a></li>
<li><!--   10.2.2     --><a class="link" href="#tokens_Special_identifiers"><b><i>Special identifiers</i></b></a></li>
<li><!--   10.2.3     --><a class="link" href="#tokens_Parentheses"><b><i>Parentheses</i></b></a></li></ol></li>
<li><!--   10.3     --><a class="link" href="#tokens_Literals"><b>Literals</b></a><ol>
<li><!--   10.3.1     --><a class="link" href="#tokens_Integer_literals"><b><i>Integer literals</i></b></a></li>
<li><!--   10.3.2     --><a class="link" href="#tokens_String_literals"><b><i>String literals</i></b></a></li>
<li><!--   10.3.3     --><a class="link" href="#tokens_Character_literals"><b><i>Character literals</i></b></a></li></ol></li></ol></li>
<li><!--   11.    --><a class="link" href="#expr_file_start"><big><b>EXPRESSIONS</b></big></a><ol>
<li><!--   11.1     --><a class="link" href="#expr_EXPRESSION_Parentheses"><b>Parentheses</b></a></li>
<li><!--   11.2     --><a class="link" href="#expr_Call_expressions"><b>Call expressions</b></a></li>
<li><!--   11.3     --><a class="link" href="#expr_Dot_expressions"><b>Dot expressions</b></a></li></ol></li>
<li><!--   12.    --><a class="link" href="#os_file_start"><big><b>OPERATING SYSTEM ACCESS</b></big></a><ol>
<li><!--   12.1     --><a class="link" href="#os_Standard_path_representation"><b>Standard path representation</b></a></li>
<li><!--   12.2     --><a class="link" href="#os_readDir"><b>readDir</b></a></li>
<li><!--   12.3     --><a class="link" href="#os_openDir"><b>openDir</b></a></li>
<li><!--   12.4     --><a class="link" href="#os_getcwd"><b>getcwd</b></a></li>
<li><!--   12.5     --><a class="link" href="#os_chdir"><b>chdir</b></a></li>
<li><!--   12.6     --><a class="link" href="#os_mkdir"><b>mkdir</b></a></li>
<li><!--   12.7     --><a class="link" href="#os_fileType"><b>fileType</b></a></li>
<li><!--   12.8     --><a class="link" href="#os_fileMode"><b>fileMode</b></a></li>
<li><!--   12.9     --><a class="link" href="#os_setFileMode"><b>setFileMode</b></a></li>
<li><!--   12.10    --><a class="link" href="#os_fileSize"><b>fileSize</b></a></li>
<li><!--   12.11    --><a class="link" href="#os_getATime"><b>getATime</b></a></li>
<li><!--   12.12    --><a class="link" href="#os_getCTime"><b>getCTime</b></a></li>
<li><!--   12.13    --><a class="link" href="#os_getMTime"><b>getMTime</b></a></li>
<li><!--   12.14    --><a class="link" href="#os_setATime"><b>setATime</b></a></li>
<li><!--   12.15    --><a class="link" href="#os_setMTime"><b>setMTime</b></a></li>
<li><!--   12.16    --><a class="link" href="#os_readlink"><b>readlink</b></a></li>
<li><!--   12.17    --><a class="link" href="#os_symlink"><b>symlink</b></a></li>
<li><!--   12.18    --><a class="link" href="#os_removeFile"><b>removeFile</b></a></li>
<li><!--   12.19    --><a class="link" href="#os_removeAnyFile"><b>removeAnyFile</b></a></li>
<li><!--   12.20    --><a class="link" href="#os_copyFile"><b>copyFile</b></a></li>
<li><!--   12.21    --><a class="link" href="#os_cloneFile"><b>cloneFile</b></a></li>
<li><!--   12.22    --><a class="link" href="#os_moveFile"><b>moveFile</b></a></li>
<li><!--   12.23    --><a class="link" href="#os_argv_PROGRAM"><b>argv(PROGRAM)</b></a></li>
<li><!--   12.24    --><a class="link" href="#os_path_PROGRAM"><b>path(PROGRAM)</b></a></li>
<li><!--   12.25    --><a class="link" href="#os_dir_PROGRAM"><b>dir(PROGRAM)</b></a></li>
<li><!--   12.26    --><a class="link" href="#os_getenv"><b>getenv</b></a></li>
<li><!--   12.27    --><a class="link" href="#os_setenv"><b>setenv</b></a></li></ol></li>
<li><!--   13.    --><a class="link" href="#actions_file_start"><big><b>PRIMITIVE ACTIONS</b></big></a><ol>
<li><!--   13.1     --><a class="link" href="#actions_ACTION"><b>Actions for the type ACTION</b></a></li>
<li><!--   13.2     --><a class="link" href="#actions_array"><b>Actions for array types</b></a></li>
<li><!--   13.3     --><a class="link" href="#actions_bigInteger"><b>Actions for the type bigInteger</b></a></li>
<li><!--   13.4     --><a class="link" href="#actions_boolean"><b>Actions for the type boolean</b></a></li>
<li><!--   13.5     --><a class="link" href="#actions_bstring"><b>Actions for byte strings</b></a></li>
<li><!--   13.6     --><a class="link" href="#actions_char"><b>Actions for the type char</b></a></li>
<li><!--   13.7     --><a class="link" href="#actions_commands"><b>Actions for various directory, file and other commands</b></a></li>
<li><!--   13.8     --><a class="link" href="#actions_console_output"><b>Actions for text (console) screen output</b></a></li>
<li><!--   13.9     --><a class="link" href="#actions_declarations"><b>Actions for declarations</b></a></li>
<li><!--   13.10    --><a class="link" href="#actions_graphic_output"><b>Actions to do graphic output</b></a></li>
<li><!--   13.11    --><a class="link" href="#actions_enumeration"><b>Actions for enumeration types</b></a></li>
<li><!--   13.12    --><a class="link" href="#actions_clib_file"><b>Actions for the type clib_file</b></a></li>
<li><!--   13.13    --><a class="link" href="#actions_float"><b>Actions for the type float</b></a></li>
<li><!--   13.14    --><a class="link" href="#actions_graphic_keyboard"><b>Actions to support the graphic keyboard</b></a></li>
<li><!--   13.15    --><a class="link" href="#actions_hash"><b>Actions for hash types</b></a></li>
<li><!--   13.16    --><a class="link" href="#actions_integer"><b>Actions for the type integer</b></a></li>
<li><!--   13.17    --><a class="link" href="#actions_interface"><b>Actions for interface types</b></a></li>
<li><!--   13.18    --><a class="link" href="#actions_console_keyboard"><b>Actions to support the text (console) screen keyboard</b></a></li>
<li><!--   13.19    --><a class="link" href="#actions_list"><b>Actions for the list type</b></a></li>
<li><!--   13.20    --><a class="link" href="#actions_pollData"><b>Actions for the type pollData</b></a></li>
<li><!--   13.21    --><a class="link" href="#actions_proc"><b>Actions for proc operations and statements</b></a></li>
<li><!--   13.22    --><a class="link" href="#actions_program"><b>Actions for the type program</b></a></li>
<li><!--   13.23    --><a class="link" href="#actions_reference"><b>Actions for the type reference</b></a></li>
<li><!--   13.24    --><a class="link" href="#actions_ref_list"><b>Actions for the type ref_list</b></a></li>
<li><!--   13.25    --><a class="link" href="#actions_struct"><b>Actions for struct types</b></a></li>
<li><!--   13.26    --><a class="link" href="#actions_set"><b>Actions for set types</b></a></li>
<li><!--   13.27    --><a class="link" href="#actions_PRIMITIVE_SOCKET"><b>Actions for the type PRIMITIVE_SOCKET</b></a></li>
<li><!--   13.28    --><a class="link" href="#actions_string"><b>Actions for the type string</b></a></li>
<li><!--   13.29    --><a class="link" href="#actions_time"><b>Actions for the type time</b></a></li>
<li><!--   13.30    --><a class="link" href="#actions_type"><b>Actions for the type type</b></a></li>
<li><!--   13.31    --><a class="link" href="#actions_utf8_file"><b>Actions for the type utf8_file</b></a></li></ol></li>
<li><!--   14.    --><a class="link" href="#errors_file_start"><big><b>ERRORS</b></big></a><ol>
<li><!--   14.1     --><a class="link" href="#errors_Compile_time_errors"><b>Compile time errors</b></a></li>
<li><!--   14.2     --><a class="link" href="#errors_Exceptions"><b>Exceptions</b></a></li>
<li><!--   14.3     --><a class="link" href="#errors_Handlers"><b>Handlers</b></a></li>
<li><!--   14.4     --><a class="link" href="#errors_Stack_trace"><b>Stack trace</b></a></li>
<li><!--   14.5     --><a class="link" href="#errors_Other_errors_and_warnings"><b>Other errors and warnings</b></a></li></ol></li>
</ol></div>

<a name="intro_file_start"></a><p></p>
<a name="intro_INTRODUCTION"><h2>1. INTRODUCTION</h2></a>
<!-- =============== -->
<p></p>

<a name="intro_What_is_Seed7"><h3>1.1 What is Seed7?</h3></a>
<p>
    Seed7 is a general-purpose programming language. It is a
  higher level language compared to Ada, C++ and Java. In Seed7
  new statements and operators can be declared easily. Functions
  with type results and type parameters are more elegant than
  the usual template or generics concept. Object orientation is
  used when it brings advantages and not in places when other
  solutions are more obvious. Although Seed7 contains several
  concepts of other programming languages it is generally not
  considered as a direct descendant of any other programming
  language.
</p><p>
  The programmer should concentrate on problem solving instead
  of administration or the fulfillment of some paradigm.
  Therefore Seed7 allows programming in the "problem space"
  instead of bending everything into a small syntactic or
  semantic concept. The predefined constructs of Seed7 are
  defined in a way to be easy readable and understandable. This
  practical approach can be summarized as:
</p><dl><dd><table border="1" cellspacing="0" cellpadding="5"><tr><td>
    <big><b><font color="orange">&nbsp;Programming should be fun&nbsp;</font></b></big>
</td></tr></table></dd></dl><p>
  Seed7 programs can be interpreted or compiled. Therefore Seed7
  can be used for scripting and for "real" programs.
</p>

<a name="intro_Why_a_new_programming_language"><h3>1.2 Why a new programming language?</h3></a>
<p>
    Conventional programming languages have a firmly given
  syntactic structure. The form of the statements, operators,
  declarations, procedures and functions is fixed in the
  language definition and cannot be changed by the user. It is
  only possible to declare new procedures, functions and in
  some languages also new operators. However the syntax of
  procedure-, function and operator calls cannot be changed.
  Although this rigid pattern is favorable for the portability
  of programs, the improvement of a programming language is
  almost impossible. Extensions are however desirable, in order
  to repair existing weaknesses, to introduce new more obvious
  constructs and to adapt the programming language to different
  application areas. E.g.: In the area of mathematics the
  readability of a program can be substantially increased by
  the introduction of matrix and vector operators. After
  declaring an inner product and an outer (or cross) product for
  vectors it is possible to write e.g.
</p><pre>
    v1: = v2 <span class="op">cross</span> v3;   write(v1 * v2);
</pre><p>
  Programs searching some data can become more understandable
  by using a search statement instead of a search procedure. A
  call of a new declared search statement could be:
</p><pre>
    <span class="keywd">search</span> person1.age = person2.age <span class="op">and</span>
       person1.mother = person2.mother <span class="op">and</span>
       person1 &lt;> person2
    <span class="keywd">when found</span>
       write(<span class="stri">"Twins: "</span> &lt;&amp; person1.name &lt;&amp; <span class="stri">" and "</span> &lt;&amp; person2.name);
    <span class="keywd">else</span>
       write(<span class="stri">"No twins found."</span>);
    <span class="keywd">end search</span>;
</pre><p>
  Such extensions make understanding, changing and debugging of
  a program easier.
</p>

<a name="intro_Features_of_Seed7"><h3>1.3 Features of Seed7</h3></a>
<p>
  Seed7 has the following features
</p><ul>
    <li><!-- -  -->User defined statements and operators.</li>

    <li><!-- -  -->Types are first class objects and therefore templates and
      generics can be defined easily without special syntax.</li>

    <li><!-- -  -->Predefined constructs like arrays or for-loops are
      declared in the language itself.</li>

    <li><!-- -  -->Object orientation is based on interfaces, supports
      multiple dispatch and allows to connect methods to objects.</li>

    <li><!-- -  -->Static type checking and no automatic casts.</li>

    <li><!-- -  -->exception handling</li>

    <li><!-- -  -->overloading of procedures/functions/operators/statements</li>

    <li><!-- -  -->Various predefined types like resizable arrays, hashes,
      bitsets, structs, etc.</li>
</ul><p>
  But a new programming language differs not only from existing
  ones by new features. The real advantage comes from omitting
  features which are outdated.
</p><p>
  Several concepts in use by other languages are not present
</p><ul>
    <li><!-- -  -->There is no goto statement.
      Hidden goto's like break- and continue-statements are
      also omitted.</li>

    <li><!-- -  -->There is no return statement. Instead a result variable
      can be declared to which the result of a function can
      be assigned.</li>

    <li><!-- -  -->There are no automatic type conversions.
      When a subprogram should be used for different types
      it must be overloaded.</li>

    <li><!-- -  -->There are no variable length parameter lists.
      Instead it is possible to use arrays as parameters.</li>

    <li><!-- -  -->There are no default parameters.
      But it is easy to define two subprograms: One with and
      one without an additional parameter.</li>

    <li><!-- -  -->There is no special "parameter" called "self" or "this".
      In a procedure the receiving object is declared as
      formal parameter with a user-defined name.</li>

    <li><!-- -  -->There is no macro feature since this mechanism is too
      similar to the subprogram feature. Instead subprograms
      can be used in a more flexible way than in other languages.</li>

    <li><!-- -  -->There are no reserved words.</li>

    <li><!-- -  -->There is no conceptual distinction between functions,
      operators, procedures and statements.</li>

    <li><!-- -  -->The procedure calling mechanism is not based on a concept
      with an object-message pair (An object receives a message).
      Instead a match is done over a list of objects. This more
      general (and powerful) mechanism is called multiple dispatch
      and it includes the simple object-message mechanism as
      special case.</li>
</ul><p>
  There are several concepts which are also used by other languages:
</p><ul>
    <li><!-- -  -->Comments start with <span class="comment">(* and end with *)</span> and may be nested.</li>

    <li><!-- -  -->Comments start with <span class="comment"># and are terminated with the end of the line.</span></li>
</ul><p>
  There are several concepts which are new
</p><ul>
    <li><!-- -  -->Variables and constants must be initialized when they are
      declared.</li>

    <li><!-- -  -->Every expression has exactly one type.
      That means that overloaded functions are resolved with
      their actual parameters and not with the context of their
      call. (This is different to the overloading mechanism
      used by ADA)</li>

    <li><!-- -  -->With a syntax declaration new operators and statements
      can be defined.</li>

    <li><!-- -  -->Not only predefined operator symbols can be
      overloaded. Additionally it is possible to invent
      completely new operator symbols.</li>
</ul><p>
  Several restrictions of other languages are released
</p><ul>
    <li><!-- -  -->There is no limitation in the length of an identifier and
      all characters of an identifier are significant.</li>

    <li><!-- -  -->Statements and parentheses can be nested without limitation
      in depth.</li>

    <li><!-- -  -->The number of parameters and local variables is not
      limited.</li>

    <li><!-- -  -->Strings can contain any characters (also the NUL character)
      This allows holding binary information in strings.</li>

    <li><!-- -  -->Although strings are not NUL terminated they have
      no size limitation. (Except there is no more memory)</li>

    <li><!-- -  -->String literals can have any length.</li>

    <li><!-- -  -->There is no limitation in the length of a source line.</li>

    <li><!-- -  -->There is no level limitation for nesting includes.</li>
</ul>

<a name="intro_How_to_read_the_manual"><h3>1.4 How to read the manual</h3></a>
<p>
    You can have several views of the Seed7 programming language.
  Dependent on the view you can concentrate on specific
  chapters.
</p><p>
  For example Seed7 can be used as conventional programming language.
  In this case you are interested in how the statements look like,
  which types are available, which operators are predefined, how
  to declare variables and procedures and other things like these.
  The statements and the predefined types are described in <a class="link" href="#stats_file_start">chapter
  4 (Predefined statements)</a> and <a class="link" href="#types_file_start">chapter 5 (Predefined types)</a> and the
  declaration mechanism is described in <a class="link" href="#decls_file_start">chapter 3 (Declarations)</a>.
</p><p>
  But Seed7 is also an object oriented programming language.
  In this case you are interested in how to define new classes,
  how instances are generated, the method calling mechanism,
  the predefined class hierarchy and other things like these.
  The object orientation of Seed7 is described in <a class="link" href="#objects_file_start">chapter 7
  (Object orientation)</a>. A good example for classes and instances
  is the file system which is described in <a class="link" href="#file_file_start">chapter 8 (The file
  system)</a>.
</p><p>
  And Seed7 is also an extensible programming language.
  In this case you are interested in how to declare new
  statements, how to define new operators, assigning a priority
  and an associativity to operators and other things like these.
  An overview about syntax declarations can be found in
  <a class="link" href="#decls_Syntax_declarations">Chapter 3.2 (Syntax declarations)</a>. A detailed description
  of the Seed7 syntax definitions can be found in <a class="link" href="#syntax_file_start">chapter 9
  (Structured syntax definition)</a>. <a class="link" href="#stats_file_start">Chapter 4 (Predefined
  statements)</a> contains various examples of syntax and semantic
  declarations. The basic parts of the syntax are described in
  <a class="link" href="#tokens_file_start">chapter 10 (Tokens)</a> and <a class="link" href="#expr_file_start">chapter 11 (Expressions)</a>.
</p>

<a name="tutorial_file_start"></a><p></p>
<a name="tutorial_TUTORIAL"><h2>2. TUTORIAL</h2></a>
<!-- =========== -->
<p>
    We begin with a tutorial introduction to Seed7. In
  this chapter we want to show the principal ideas that
  make Seed7 work. At this point, we are not trying to be
  complete or precise. We just want to give a clear view
  to the primary philosophic ideas of Seed7. When the
  primary ideas are understood a complete and precise
  reference can be learned easier.
</p>

<a name="tutorial_Hello_world"><h3>2.1 Hello world</h3></a>
<p>
    A Seed7 program consists of a sequence of declarations.
  With each declaration a <tt><a class="type" href="#types_type">type</a></tt> and a name is attached to the
  new object. In addition every new declared object gets an
  initial value. 
</p><p>
  Here is an example of an object declaration:
</p><pre>
    <span class="keywd">const</span> <span class="type">proc</span>: main <span class="keywd">is func</span>
      <span class="keywd">begin</span>
        writeln(<span class="stri">"hello world"</span>);
      <span class="keywd">end func</span>;
</pre><p>
  The object <tt>'main'</tt> is declared as constant and <tt><!-- ' --><a class="type" href="#types_proc">proc</a><!-- ' --></tt>
  is the type of <tt>'main'</tt>. Declaring <tt>'main'</tt> with the type
  <tt><!-- ' --><a class="type" href="#types_proc">proc</a><!-- ' --></tt> makes a procedure out of it. The object <tt>'main'</tt> gets a
</p><pre>
    <span class="keywd">func</span> ... <span class="keywd">end func</span>
</pre><p>
  construct as value. The <tt>'<span class="keywd">func</span>'</tt> construct is similar to
  <tt><span class="keywd">begin</span> ... <span class="keywd">end</span></tt> in PASCAL and <tt>{ ... }</tt> in C. Inside the <tt>'<span class="keywd">func</span>'</tt> is a
  <tt><!-- ' -->writeln<!-- ' --></tt> statement with the <tt><span class="stri">"hello world"</span></tt> string. The
  <tt><!-- ' -->writeln<!-- ' --></tt> statement is used to write a <tt><!-- ' --><a class="type" href="#types_string">string</a><!-- ' --></tt> followed by a
  newline character. To use this declaration as the standard
  hello world example program, we have to add a few things:
</p><pre>
    $ <span class="keywd">include</span> <span class="lib">"seed7_05.s7i"</span>;

    <span class="keywd">const</span> <span class="type">proc</span>: main <span class="keywd">is func</span>
      <span class="keywd">begin</span>
        writeln(<span class="stri">"hello world"</span>);
      <span class="keywd">end func</span>;
</pre><p>
  The first line includes all definitions of the standard
  library. In contrast to other standard libraries the seed7_05.s7i
  library contains not only function declarations but also
  declarations of statements and operators.
  Additionally the seed7_05.s7i library defines the '<tt>main</tt>' function
  as entry point for a Seed7 program.
</p><p>
  If you write this program in a file called hello.sd7
  and execute the command
</p><pre>
    hi hello
</pre><p>
  The Seed7 interpreter writes something like
</p><pre>
    HI INTERPRETER Version 4.5.79  Copyright (c) 1990-2005 Thomas Mertes
       245 syntax.s7i
      2635 seed7_05.s7i
        33 hello.sd7
      2913 lines total
     29130 lines per second
    1184171 bytes
    hello world
</pre><p>
  You get information about the Seed7 interpreter, a list of
  libraries included and how many lines they contain, the
  number of bytes used by the hello.sd7 program and finally
  the output of the hello.sd7 program itself:
</p><pre>
    hello world
</pre><p></p>

<a name="tutorial_Local_declarations_and_expressions"><h3>2.2 Local declarations and expressions</h3></a>
<p>
    To write a Fahrenheit to Celsius conversion table we use
  the following program:
</p><pre>
    <span class="comment">(* Print a Fahrenheit-Celsius table
       for Fahrenheit values between 0 and 300 *)</span>

    $ <span class="keywd">include</span> <span class="lib">"seed7_05.s7i"</span>;

    <span class="keywd">const</span> <span class="type">proc</span>: main <span class="keywd">is func</span>
      <span class="keywd">local</span>
        <span class="keywd">const</span> <span class="type">integer</span>: lower <span class="keywd">is</span> 0;
        <span class="keywd">const</span> <span class="type">integer</span>: upper <span class="keywd">is</span> 300;
        <span class="keywd">const</span> <span class="type">integer</span>: increment <span class="keywd">is</span> 20;
        <span class="keywd">var</span> <span class="type">integer</span>: fahr <span class="keywd">is</span> 0;
        <span class="keywd">var</span> <span class="type">integer</span>: celsius <span class="keywd">is</span> 0;
      <span class="keywd">begin</span>
        fahr := lower;
        <span class="keywd">while</span> fahr &lt;= upper <span class="keywd">do</span>
          celsius := 5 * (fahr - 32) <span class="op">div</span> 9;
          write(fahr);
          write(<span class="stri">" "</span>);
          writeln(celsius);
          fahr := fahr + increment;
        <span class="keywd">end while</span>;
      <span class="keywd">end func</span>;
</pre><p>
  Everything between <span class="comment">(* and *)</span> is a <a class="link" href="#tokens_Comments">comment</a>, which is ignored.
  This program contains local constants and variables of the
  type <tt><!-- ' --><a class="type" href="#types_integer">integer</a><!-- ' --></tt>. The constants and variables must be
  initialized when they are declared. This program contains
  also an <a class="link" href="#stats_Assignment">assignment</a>, a <a class="link" href="#stats_while-statement">while-statement</a> and the expression to
  compute the <tt>'celsius'</tt> value. Note that the statements inside
  the <a class="link" href="#stats_while-statement">while-loop</a> are between <tt>'<span class="keywd">do</span>'</tt> and <tt>'<span class="keywd">end while</span>'</tt>. The
  expression to compute the <tt>'celsius'</tt> value uses an integer
  division (<tt><!-- ' -->div<!-- ' --></tt>). The <tt>'write'</tt> statement can be used to write
  strings and integers without a newline character. The output
  produced by this program is
</p><pre>
    0 -17
    20 -6
    40 4
    60 15
    80 26
    100 37
    120 48
    140 60
    160 71
    180 82
    200 93
    220 104
    240 115
    260 126
    280 137
    300 148
</pre><p></p>

<a name="tutorial_For_loop_and_float_expressions"><h3>2.3 For loop and float expressions</h3></a>
<p>
    An improved version of the program to write the Fahrenheit
  to Celsius conversion table is:
</p><pre>
    $ <span class="keywd">include</span> <span class="lib">"seed7_05.s7i"</span>;
      <span class="keywd">include</span> <span class="lib">"float.s7i"</span>;

    <span class="keywd">const</span> <span class="type">proc</span>: main <span class="keywd">is func</span>
      <span class="keywd">local</span>
        <span class="keywd">const</span> <span class="type">integer</span>: lower <span class="keywd">is</span> 0;
        <span class="keywd">const</span> <span class="type">integer</span>: upper <span class="keywd">is</span> 300;
        <span class="keywd">const</span> <span class="type">integer</span>: increment <span class="keywd">is</span> 20;
        <span class="keywd">var</span> <span class="type">integer</span>: fahr <span class="keywd">is</span> 0;
        <span class="keywd">var</span> <span class="type">float</span>: celsius <span class="keywd">is</span> 0.0;
      <span class="keywd">begin</span>
        <span class="keywd">for</span> fahr <span class="keywd">range</span> lower <span class="keywd">to</span> upper <span class="keywd">step</span> increment <span class="keywd">do</span>
          celsius := flt(5 * (fahr - 32)) / 9.0;
          writeln(fahr <span class="op">lpad</span> 3 &lt;&amp; <span class="stri">" "</span> &lt;&amp; celsius <span class="op">digits</span> 2 <span class="op">lpad</span> 6);
        <span class="keywd">end for</span>;
      <span class="keywd">end func</span>;
</pre><p>
  To use the type <tt><!-- ' --><a class="type" href="#types_float">float</a><!-- ' --></tt> it is necessary to include
  <tt><!-- " -->float.s7i<!-- " --></tt>. The <tt><!-- ' --><a class="type" href="#types_float">float</a><!-- ' --></tt> variable <tt>'celsius'</tt> must be
  initialized with 0.0 (instead of 0). The <tt><a class="link" href="#stats_for-statement">for-loop</a></tt> is
  written as:
</p><pre>
    <span class="keywd">for</span> ... <span class="keywd">range</span> ... <span class="keywd">to </span>... <span class="keywd">step</span> ... <span class="keywd">do</span>
      ...
    <span class="keywd">end for</span>
</pre><p>
  To specify a lower and an upper limit together with a step
  value. For a step value of 1 the <tt><a class="link" href="#stats_for-statement">for-loop</a></tt> it is written as:
</p><pre>
    <span class="keywd">for</span> ... <span class="keywd">range</span> ... <span class="keywd">to</span> ... <span class="keywd">do</span>
      ...
    <span class="keywd">end for</span>
</pre><p>
  And for a step value of -1 it can be written as:
</p><pre>
    <span class="keywd">for</span> ... <span class="keywd">range</span> ... <span class="keywd">downto</span> ... <span class="keywd">do</span>
      ...
    <span class="keywd">end for</span>
</pre><p>
  Since Seed7 is strong typed <tt><!-- ' --><a class="type" href="#types_integer">integer</a><!-- ' --></tt> and <tt><!-- ' --><a class="type" href="#types_float">float</a><!-- ' --></tt> values
  cannot be mixed in expressions. Therefore the <tt><!-- ' --><a class="type" href="#types_integer">integer</a><!-- ' --></tt>
  expression <tt>'5 * (fahr - 32)'</tt> is converted to <tt><!-- ' --><a class="type" href="#types_float">float</a><!-- ' --></tt> with
  the function <tt><!-- ' -->flt<!-- ' --></tt>. For the same reason a <tt>'/'</tt> division and
  the value <tt>'9.0'</tt> must be used. The <tt><!-- ' -->&lt;&amp;<!-- ' --></tt> operator is used to
  concatenate elements before writing. If the right operand of
  the <tt><!-- ' -->&lt;&amp;<!-- ' --></tt> operator has not the type <tt><!-- ' --><a class="type" href="#types_string">string</a><!-- ' --></tt> it is converted to
  a <tt><!-- ' --><a class="type" href="#types_string">string</a><!-- ' --></tt> using the <tt>'str'</tt> function. The <tt><!-- ' -->lpad<!-- ' --></tt> operator
  converts the value of <tt>'fahr'</tt> to a string and pads spaces to
  the left until the string has length 3. The <tt><!-- ' -->digits<!-- ' --></tt> operator
  converts the value of <tt>'celsius'</tt> to a string with 2 decimal
  digits. The resulting string is padded left up to a length
  of 6.
</p>

<a name="tutorial_Parameters"><h3>2.4 Parameters</h3></a>
<p>
    Most parameters are not changed inside a function. Seed7
  uses <tt>'<span class="keywd">in</span>'</tt> parameters to describe this situation:
</p><pre>
    <span class="keywd">const</span> <span class="type">func integer</span>: negate (<span class="keywd">in</span> <span class="type">integer</span>: num1) <span class="keywd">is</span>
      <span class="keywd">return</span> -num1;

    <span class="keywd">const</span> <span class="type">func integer</span>: fib (<span class="keywd">in</span> <span class="type">integer</span>: num1) <span class="keywd">is func</span>
      <span class="keywd">result</span>
        <span class="keywd">var</span> <span class="type">integer</span>: result <span class="keywd">is</span> 1;
      <span class="keywd">begin</span>
        <span class="keywd">if</span> num1 &lt;> 1 <span class="op">and</span> num1 &lt;> 2 <span class="keywd">then</span>
          result := fib(pred(num1)) + fib(num1 - 2);
        <span class="keywd">end if</span>;
      <span class="keywd">end func</span>;
</pre><p>
  The functions above use <tt>'<span class="keywd">in</span>'</tt> parameters named <tt>'num1'</tt>.
  An assignment to <tt>'num1'</tt> is not allowed. A formal <tt>'<span class="keywd">in</span>'</tt>
  parameter like <tt>'num1'</tt> behaves like a constant. 
  Trying to change a formal <tt>'<span class="keywd">in</span>'</tt> parameter:
</p><pre>
    <span class="keywd">const</span> <span class="type">proc</span>: wrong (<span class="keywd">in</span> <span class="type">integer</span>: num2) <span class="keywd">is func</span>
      <span class="keywd">begin</span>
        num2 := 0;
      <span class="keywd">end func</span>;
</pre><p>
  results in a compile time error:
</p><pre>
    *** tst77.sd7(5):52: Variable expected in {num2 := 0 } found parameter (in integer: num2)
        num2 := 0;
</pre><p>
  When a function wants to change the value of the actual
  parameter it can use an <tt>'<span class="keywd">inout</span>'</tt> parameter:
</p><pre>
    <span class="keywd">const</span> <span class="type">proc</span>: reset (<span class="keywd">inout</span> <span class="type">integer</span>: num2) <span class="keywd">is func</span>
      <span class="keywd">begin</span>
        num2 := 0;
      <span class="keywd">end func</span>;
</pre><p>
  If you call this function with
</p><pre>
    reset(number);
</pre><p>
  the variable <tt>'number'</tt> has the value 0 afterwards. Calling
  <tt>'reset'</tt> with a constant instead of a variable:
</p><pre>
    reset(8);
</pre><p>
  results in a compile time error
</p><pre>
    *** tst77.sd7(12):52: Variable expected in {8 reset } found constant integer: 8
        reset(8);
</pre><p>
  Sometimes an <tt>'<span class="keywd">in</span>'</tt> parameter is needed, but you need to change
  the formal parameter in the function without affecting the
  actual parameter. In this case we use the <tt>'<span class="keywd">in var</span>'</tt> parameter:
</p><pre>
    <span class="keywd">const</span> <span class="type">func string</span>: oct_str (<span class="keywd">in var</span> <span class="type">integer</span>: number) <span class="keywd">is func</span>
      <span class="keywd">result</span>
        <span class="keywd">var</span> <span class="type">string</span>: result <span class="keywd">is</span> <span class="stri">""</span>;
      <span class="keywd">begin</span>
        <span class="keywd">while</span> number >= 0 <span class="keywd">do</span>
          result := str(number <span class="op">rem</span> 8) & result;
          number := number <span class="op">div</span> 8;
        <span class="keywd">end while</span>;
      <span class="keywd">end func</span>;
</pre><p>
  As you can see this works like a combination of an <tt>'<span class="keywd">in</span>'</tt>
  parameter with a local <tt>'<span class="keywd">var</span>'</tt>.
</p><p>
  Conventionally there are two kinds of parameters:
  <tt>'call by value'</tt> and <tt>'call by reference'</tt>. When taking the
  access right (constant or variable) into account we get
  the following table:
</p><dl><dd><table border="1" cellspacing="0" cellpadding="5">
    <!-- +-----------+-----------+--------------+ -->
    <tr><!-- | --><th> parameter </th><!-- | --><th>  call by  </th><!-- | --><th> access right </th><!-- | --></tr>
    <!-- +-----------+-----------+--------------+ -->
    <tr><!-- | --><td> val       </td><!-- | --><td align="center">   value   </td><!-- | --><td> const        </td><!-- | --></tr>
    <tr><!-- | --><td> ref       </td><!-- | --><td align="center"> reference </td><!-- | --><td> const        </td><!-- | --></tr>
    <tr><!-- | --><td> in        </td><!-- | --><td align="center"> val / ref </td><!-- | --><td> const        </td><!-- | --></tr>
    <tr><!-- | --><td> in var    </td><!-- | --><td align="center">   value   </td><!-- | --><td> var          </td><!-- | --></tr>
    <tr><!-- | --><td> inout     </td><!-- | --><td align="center"> reference </td><!-- | --><td> var          </td><!-- | --></tr>
    <!-- +-----------+-----------+--------------+ -->
</table></dd></dl><p>
  Additionally to the parameters we already know this table
  describes also <tt>'<span class="keywd">val</span>'</tt> and <tt>'<span class="keywd">ref</span>'</tt> parameters which use
  'call by value' and 'call by reference' and have a constant
  formal parameter. The <tt>'<span class="keywd">in</span>'</tt> parameter is called by
  <tt>'val / ref'</tt> in this table which is easily explained:
</p><dl><dd>
    An <tt>'<span class="keywd">in</span>'</tt> parameter is either a <tt>'<span class="keywd">val</span>'</tt> or a <tt>'<span class="keywd">ref</span>'</tt> parameter
    depending on the type of the parameter.
</dd></dl><p>
  The parameter
</p><pre>
    <span class="keywd">in</span> <span class="type">integer</span>: number
</pre><p>
  is a 'val' parameter which could also be declared as
</p><pre>
    <span class="keywd">val</span> <span class="type">integer</span>: number
</pre><p>
  while the parameter
</p><pre>
    <span class="keywd">in</span> <span class="type">string</span>: stri
</pre><p>
  is a 'ref' parameter which could also be declared as
</p><pre>
    <span class="keywd">ref</span> <span class="type">string</span>: stri
</pre><p>
  The meaning of the <tt>'<span class="keywd">in</span>'</tt> parameter is predefined for most
  types. Usually types with small amounts of data use <tt>'<span class="keywd">val</span>'</tt>
  as <tt>'<span class="keywd">in</span>'</tt> parameter while types with bigger data amounts use
  <tt>'<span class="keywd">ref</span>'</tt>. Most of the time it is not necessary to care if an
  <tt>'<span class="keywd">in</span>'</tt> parameter is really a <tt>'<span class="keywd">val</span>'</tt> or <tt>'<span class="keywd">ref</span>'</tt> parameter. 
</p><p>
  In rare cases a <tt>'<span class="keywd">ref</span>'</tt> parameter would have undesired side
  effects with global variables or other <tt>'<span class="keywd">ref</span>'</tt> parameters.
  In these cases an explicit <tt>'<span class="keywd">val</span>'</tt> parameter instead of an
  <tt>'<span class="keywd">in</span>'</tt> parameter makes sense.
</p><p>
  In all normal cases an <tt>'<span class="keywd">in</span>'</tt> parameter should be preferred
  over an explicit <tt>'<span class="keywd">val</span>'</tt> and <tt>'<span class="keywd">ref</span>'</tt> parameter.
</p>

<a name="tutorial_Declare_a_statement"><h3>2.5 Declare a statement</h3></a>
<p>
    This example program writes its arguments
</p><pre>
    $ <span class="keywd">include</span> <span class="lib">"seed7_05.s7i"</span>;       <span class="comment"># Standard Seed7 library</span>

    <span class="keywd">const</span> <span class="type">proc</span>: main <span class="keywd">is func</span>
      <span class="keywd">local</span>
        <span class="keywd">var</span> <span class="type">string</span>: stri <span class="keywd">is</span> <span class="stri">""</span>;
      <span class="keywd">begin</span>
        <span class="keywd">for</span> stri <span class="keywd">range</span> argv(PROGRAM) <span class="keywd">do</span>
          write(stri &lt;& <span class="stri">" "</span>);
        <span class="keywd">end for</span>;
        writeln;
      <span class="keywd">end func</span>;
</pre><p>
  The <tt><a class="link" href="#stats_for-statement">for-statement</a></tt> iterates over <tt><!-- ' -->argv(PROGRAM)<!-- ' --></tt>.
  The function <tt><!-- ' -->argv(PROGRAM)<!-- ' --></tt> returns an <tt><!-- ' --><a class="type" href="#types_array">array string</a><!-- ' --></tt>
  (=<tt><!-- ' --><a class="type" href="#types_array">array</a><!-- ' --></tt> of <tt><!-- ' --><a class="type" href="#types_string">string</a><!-- ' --></tt> elements). The <tt><a class="link" href="#stats_for-statement">for-statement</a></tt> is overloaded
  for various collection types. In the standard Seed7 library
  <tt><!-- " --><span class="lib">seed7_05.s7i</span><!-- " --></tt> the <tt><a class="link" href="#stats_for-statement">for-statement</a></tt> for <a class="type" href="#types_array">array</a>s is declared as
  follows:
</p><pre>
    <span class="keywd">const</span> <span class="type">proc</span>: for (<span class="keywd">inout</span> <span class="type">baseType</span>: variable) range (<span class="keywd">in</span> <span class="type">arrayType</span>: arr_obj) do
                  (<span class="keywd">in</span> <span class="type">proc</span>: statements)
                end for <span class="keywd">is func</span>
      <span class="keywd">local</span>
        <span class="keywd">var</span> <span class="type">integer</span>: number <span class="keywd">is</span> 0;
      <span class="keywd">begin</span>
        <span class="keywd">for</span> number <span class="keywd">range</span> 1 <span class="keywd">to</span> length(arr_obj) <span class="keywd">do</span>
          variable := arr_obj[number];
          statements;
        <span class="keywd">end for</span>;
      <span class="keywd">end func</span>;
</pre><p>
  The syntax of this <tt><a class="link" href="#stats_for-statement">for-statement</a></tt> is declared as:
</p><pre>
    $ <span class="keywd">syntax</span> <span class="type">expr</span>: .for.().range.().to.().do.().end.for <span class="keywd">is</span>              -> 25;
</pre><p>
  Additionally everybody can overload the <tt><a class="link" href="#stats_for-statement">for-statement</a></tt> also.
  Because of these powerful features Seed7 does not need Iterators.
</p>

<a name="tutorial_Template_declaring_a_statement"><h3>2.6 Template declaring a statement</h3></a>
<p>
  Templates are just normal functions with <a class="type" href="#types_type">type</a>s as parameters.
  The following template function declares <tt><a class="link" href="#stats_for-statement">for-statements</a></tt>:
</p><pre>
    <span class="keywd">const</span> <span class="type">proc</span>: FOR_DECLS (<span class="keywd">in</span> <span class="type">type</span>: aType) <span class="keywd">is func</span>
      <span class="keywd">begin</span>

        <span class="keywd">const</span> <span class="type">proc</span>: for (<span class="keywd">inout</span> <span class="type">aType</span>: variable) range (<span class="keywd">in</span> <span class="type">aType</span>: low) to (<span class="keywd">in</span> <span class="type">aType</span>: high) do
            (<span class="keywd">in</span> <span class="type">proc</span>: statements) end for <span class="keywd">is func</span>
          <span class="keywd">begin</span>
            variable := low;
            <span class="keywd">if</span> variable &lt;= high <span class="keywd">then</span>
              statements;
              <span class="keywd">while</span> variable &lt; high <span class="keywd">do</span>
                incr(variable);
                statements;
              <span class="keywd">end while</span>;
            <span class="keywd">end if</span>;
          <span class="keywd">end func</span>;

      <span class="keywd">end func</span>;
 
    FOR_DECLS(<span class="type">char</span>);
    FOR_DECLS(<span class="type">boolean</span>);
</pre><p>
  The body of the 'FOR_DECLS' function contains a declaration of
  the <tt><a class="link" href="#stats_for-statement">for-statement</a></tt> for the type <tt><!-- ' --><span class="type">aType</span><!-- ' --></tt>. Calling 'FOR_DECLS' with
  <tt><!-- ' --><a class="type" href="#types_char">char</a><!-- ' --></tt> and <tt><!-- ' --><a class="type" href="#types_boolean">boolean</a><!-- ' --></tt> as parameter creates corresponding declarations
  of <tt><a class="link" href="#stats_for-statement">for-statements</a></tt>. The example above is a simplified part of
  the library <tt><!-- " -->forloop.s7i<!-- " --></tt>.
</p>

<a name="decls_file_start"></a><p></p>
<a name="decls_DECLARATIONS"><h2>3. DECLARATIONS</h2></a>
<!-- =============== -->
<p>
    A declaration specifies the identifier, type, and other
  aspects of language elements such as variables, constants
  and functions. In Seed7 everything must be declared before
  it is used. Seed7 uses three kinds of declarations:
</p><ul>
    <li><!-- -  -->Normal declarations</li>
    <li><!-- -  -->Syntax declarations</li>
    <li><!-- -  -->System declarations</li>
</ul><p>
  which are described in detail in the following subchapters.
</p>

<a name="decls_Normal_declarations"><h3>3.1 Normal declarations</h3></a>
<p>
    Normal declarations are the most commonly used form of
  declarations. To contrast them to the syntax declarations normal
  declarations are sometimes called semantic declarations. Seed7
  uses uniform looking declaration constructs to declare variables,
  constants, types, functions and parameters. For example:
</p><pre>
    <span class="keywd">const</span> <span class="type">integer</span>: ONE <span class="keywd">is</span> 1;
</pre><p>
  declares the <tt><!-- ' --><a class="type" href="#types_integer">integer</a><!-- ' --></tt> constant <tt>'ONE'</tt> which is initialized with the
  value 1. Variable declarations are also possible. For example:
</p><pre>
    <span class="keywd">var</span> <span class="type">integer</span>: number <span class="keywd">is</span> 0;
</pre><p>
  declares the <tt><!-- ' --><a class="type" href="#types_integer">integer</a><!-- ' --></tt> variable <tt>'number'</tt> which is initialized with
  the value 0. Type declarations are done as constant declarations
  where the type of the declared constant is <tt><!-- ' --><a class="type" href="#types_type">type</a><!-- ' --></tt>:
</p><pre>
    <span class="keywd">const</span> <span class="type">type</span>: myChar <span class="keywd">is</span> <span class="type">char</span>;
</pre><p>
  Function declarations are also a form of constant declaration:
</p><pre>
    <span class="keywd">const</span> <span class="type">func boolean</span>: flipCoin <span class="keywd">is</span>
      <span class="keywd">return</span> rand(FALSE, TRUE);
</pre><p>
  Each object declared with a <tt>'<span class="keywd">const</span>'</tt> or <tt>'<span class="keywd">var</span>'</tt> declaration obtains
  an initial value. It is not possible to use <tt>'<span class="keywd">const</span>'</tt> or <tt>'<span class="keywd">var</span>'</tt>
  declarations without initial value. Declarations with
  initialization expressions are also possible. For example
</p><pre>
    <span class="keywd">var</span> <span class="type">string</span>: fileName <span class="keywd">is</span> NAME & <span class="stri">".txt"</span>;
</pre><p>
  The expression is evaluated and the result is assigned to
  the new object. This is done in the analyze phase of the
  interpreter or compiler, before the execution of the program
  starts. The initialization expressions may contain any
  function (or operator) call. That way user defined functions
  can also be used to initialize a constant or variable:
</p><pre>
    <span class="keywd">const</span> <span class="type">boolean</span>: maybe <span class="keywd">is</span> flipCoin;
</pre><p>
  Constant and variable declarations can be global or local.
  The mechanism to define a parameter like <tt>'x'</tt> is similar to the
  <tt>'<span class="keywd">const</span>'</tt> or <tt>'<span class="keywd">var</span>'</tt> declarations:
</p><pre>
    <span class="keywd">const</span> <span class="type">func float</span>: inverse (<span class="keywd">in</span> <span class="type">float</span>: x) <span class="keywd">is</span>
      <span class="keywd">return</span> 1/x;
</pre><p>
  Function parameters, such as the parameter <tt>'statement'</tt> in
  the example below, act as call-by-name parameters:
</p><pre>
    <span class="keywd">const</span> <span class="type">proc</span>: possiblyDo (<span class="keywd">in</span> <span class="type">proc</span>: statement) <span class="keywd">is func</span>
      <span class="keywd">begin</span>
        <span class="keywd">if</span> flipCoin <span class="keywd">then</span>
          statement;
        <span class="keywd">end if</span>;
      <span class="keywd">end func</span>;
</pre><p>
  Abstract data types such as <tt><!-- ' --><span class="type">subtype</span><!-- ' --></tt>, <tt><!-- ' --><a class="type" href="#types_struct">struct</a><!-- ' --></tt>, <tt><!-- ' --><span class="type">subrange</span><!-- ' --></tt>, <tt><!-- ' --><a class="type" href="#types_array">array</a><!-- ' --></tt>, <tt><!-- ' --><a class="type" href="#types_hash">hash</a><!-- ' --></tt>, <tt><!-- ' --><a class="type" href="#types_set">set</a><!-- ' --></tt>,
  <tt><!-- ' --><span class="type">interface</span><!-- ' --></tt> and <tt><!-- ' --><span class="type">enum</span><!-- ' --></tt> are realized as
  functions which return a type. E.g.: The type <tt><!-- ' --><a class="type" href="#types_array">array</a><!-- ' --></tt> is defined in the
  <tt><!-- " --><span class="lib">seed7_05.s7i</span><!-- " --></tt> library with the following header:
</p><pre>
    <span class="keywd">const</span> <span class="type">func type</span>: array (<span class="keywd">in</span> <span class="type">type</span>: baseType) <span class="keywd">is func</span>
</pre><p>
  User defined abstract data types are also possible.
</p><p>
  The initialization uses the creation operation ( ::= ).
  Explicit calls of the create operation are not needed.
</p><p>
  The lifetime of an object goes like this:
</p><ol><li>
  <!-- 1.  -->Memory is reserved for the new object (stack or heap memory
     make no difference here).
</li><li>
  <!-- 2.  -->The content of the new memory is undefined (It may contain
     garbage), therefore a create statement is necessary instead of
     an assignment.
</li><li>
  <!-- 3.  -->The create statements copies the right expression to the left
     expression taking into account that the left expression is
     undefined.
</li><li>
  <!-- 4.  -->If the object is variable other values can be assigned using
     the assign statement ( := ). The assignment can assume that the
     left expression contains a legal value. This allows that for
     strings (and some other types which are just references to a
     memory area) the memory containing the old string value (and
     not the memory of the object itself) can be freed when
     necessary.
</li><li>
  <!-- 5.  -->At the end of the lifetime of an object the destroy statement
     is executed. For strings (and some other types which are just
     references to a memory area) the memory containing the string
     value (and not the memory of the object itself) is freed.
</li><li>
  <!-- 6.  -->The memory of the object is freed.
</li></ol><p>
  The first three steps are usually hidden in the declaration
  statement. The expression
</p><pre>
    ONE . ::= . 1
</pre><p>
  is executed to assign 1 to the object ONE. There are two
  reasons to use ::= instead of := to assign the initialization
  value.
</p><ol><li>
  <!-- 1.  -->The assignment ( := ) can only be used to assign a value
    to a variable and initialization is also needed for
    constants.
</li><li>
  <!-- 2.  -->Sometimes some initializations are needed for the new
    object in addition to the pure assignment.
</li></ol><p>
  For all predefined types the creation operator ( ::= )
  is already defined. To allow the declaration of objects of a
  new user defined type the constructor operation for this type
  must be defined.
</p>

<a name="decls_Syntax_declarations"><h3>3.2 Syntax declarations</h3></a>
<p>
    Syntax declarations are used to specify the syntax, priority
  and associativity of operators, statements, declarations and
  other constructs. A syntax declaration which defines the
  <tt>'+'</tt> operator is:
</p><pre>
    $ <span class="keywd">syntax</span> <span class="type">expr</span>: .(). + .()   <span class="keywd">is</span> ->  7;
</pre><p>
  Most syntax definitions can be found in the file <tt><!-- " -->syntax.s7i<!-- " --></tt>.
  A detailed description of the syntax declarations can be
  found in <a class="link" href="#syntax_file_start">chapter 9 (Structured syntax definition)</a>
  There is also a hard coded syntax for function calls with
  a parenthesis enclosed parameter list where the parameters
  are separated by commas. The hard coded syntax is described
  in <a class="link" href="#expr_file_start">chapter 11 (Expressions)</a>.
  Here we use a more complex syntax description:
</p>

<a name="decls_System_declarations"><h3>3.3 System declarations</h3></a>
<p>
    With system declarations the analyzer and the interpreter
  are informed about which objects should be used for various system
  internal purposes. An example of a system declaration is
</p><pre>
    $ <span class="keywd">system</span> <span class="stri">"integer"</span> <span class="keywd">is</span> <span class="type">integer</span>;
</pre><p>
  This defines that the type of all integer literals is <tt><!-- ' --><a class="type" href="#types_integer">integer</a><!-- ' --></tt>.
  Additionally <tt><!-- ' --><a class="type" href="#types_integer">integer</a><!-- ' --></tt> is used as type for all integers generated
  by primitive actions.
  There are different objects which are defined by a
  system declaration
</p><ul>
    <li><!-- -  -->The types of literals and simple expressions for example:
        <tt><!-- ' --><a class="type" href="#types_string">string</a><!-- ' --></tt> for strings and <tt><!-- ' --><a class="type" href="#types_integer">integer</a><!-- ' --></tt> for integers</li>

    <li><!-- -  -->Which objects should be used as result values for
      primitive actions for example:<pre>
        TRUE, FALSE and empty</pre></li>

    <li><!-- -  -->The EXCEPTIONS which are to be raised by
      primitive actions for example:<pre>
        NUMERIC_ERROR and MEMORY_ERROR</pre></li>

    <li><!-- -  -->Which objects should be used for several implicit
      actions for example:<pre>
        := ::= <tt>'destroy'</tt> <tt>'write'</tt> and <tt>'flush'</tt></pre></li>
</ul><p>
  The following system declarations exist
</p><pre>
    $ <span class="keywd">system</span> <span class="stri">"type"</span> <span class="keywd">is</span> <span class="type">type</span>;
    $ <span class="keywd">system</span> <span class="stri">"expr"</span> <span class="keywd">is</span> <span class="type">expr</span>;
    $ <span class="keywd">system</span> <span class="stri">"integer"</span> <span class="keywd">is</span> <span class="type">integer</span>;
    $ <span class="keywd">system</span> <span class="stri">"char"</span> <span class="keywd">is</span> <span class="type">char</span>;
    $ <span class="keywd">system</span> <span class="stri">"string"</span> <span class="keywd">is</span> <span class="type">string</span>;
    $ <span class="keywd">system</span> <span class="stri">"proc"</span> <span class="keywd">is</span> <span class="type">proc</span>;
    $ <span class="keywd">system</span> <span class="stri">"float"</span> <span class="keywd">is</span> <span class="type">float</span>;

    $ <span class="keywd">system</span> <span class="stri">"true"</span> <span class="keywd">is</span> TRUE;
    $ <span class="keywd">system</span> <span class="stri">"false"</span> <span class="keywd">is</span> FALSE;
    $ <span class="keywd">system</span> <span class="stri">"empty"</span> <span class="keywd">is</span> empty;

    $ <span class="keywd">system</span> <span class="stri">"memory_error"</span> <span class="keywd">is</span> MEMORY_ERROR;
    $ <span class="keywd">system</span> <span class="stri">"numeric_error"</span> <span class="keywd">is</span> NUMERIC_ERROR;
    $ <span class="keywd">system</span> <span class="stri">"range_error"</span> <span class="keywd">is</span> RANGE_ERROR;
    $ <span class="keywd">system</span> <span class="stri">"io_error"</span> <span class="keywd">is</span> IO_ERROR;
    $ <span class="keywd">system</span> <span class="stri">"illegal_action"</span> <span class="keywd">is</span> ILLEGAL_ACTION;

    $ <span class="keywd">system</span> <span class="stri">"assign"</span> <span class="keywd">is</span> := ;
    $ <span class="keywd">system</span> <span class="stri">"create"</span> <span class="keywd">is</span> ::= ;
    $ <span class="keywd">system</span> <span class="stri">"destroy"</span> <span class="keywd">is</span> destroy;
    $ <span class="keywd">system</span> <span class="stri">"ord"</span> <span class="keywd">is</span> ord;
    $ <span class="keywd">system</span> <span class="stri">"in"</span> <span class="keywd">is</span> <span class="keywd">in</span>;
    $ <span class="keywd">system</span> <span class="stri">"prot_outfile"</span> <span class="keywd">is</span> PROT_OUTFILE;
    $ <span class="keywd">system</span> <span class="stri">"flush"</span> <span class="keywd">is</span> flush;
    $ <span class="keywd">system</span> <span class="stri">"write"</span> <span class="keywd">is</span> write;
    $ <span class="keywd">system</span> <span class="stri">"writeln"</span> <span class="keywd">is</span> writeln;
    $ <span class="keywd">system</span> <span class="stri">"main"</span> <span class="keywd">is</span> main;
</pre><p></p>

<a name="stats_file_start"></a><p></p>
<a name="stats_PREDEFINED_STATEMENTS"><h2>4. PREDEFINED STATEMENTS</h2></a>
<!-- ======================== -->
<p>
    The library contains several predefined statements:
  <a class="link" href="#stats_Assignment">assignment</a>, <a class="link" href="#stats_while-statement">while-statement</a>, <a class="link" href="#stats_repeat-statement">repeat-statement</a>, <a class="link" href="#stats_for-statement">for-statement</a>,
  <a class="link" href="#stats_if-statement">if-statement</a>, <a class="link" href="#stats_case-statement">case-statement</a> and procedure call.

</p><p>
  Syntax:
</p><pre>
    statement ::=
      single_statement [ ';' [ statement ] ] .

    single_statement ::=
      assignment_statement | while_statement | repeat_statement |
      for_statement | if_statement | case_statement |
      procedure_call | empty_statement .

    empty_statement ::=
      'noop' .
</pre><p>
  Everywhere where one statement can be written a sequence of
  statements can also be used. The semicolon-operator concatenates
  two statements giving a new statement. The semicolon operator
  can also be used behind the last statement of a statement
  sequence. In this case the semicolon is just ignored.

</p><p>
  Declaration:
</p><pre>
    $ <span class="keywd">syntax</span> <a class="type" href="#types_expr">expr</a>: .(). ; .() <span class="keywd">is</span>            &lt;- 50;
    $ <span class="keywd">syntax</span> <a class="type" href="#types_expr">expr</a>: .(). ; <span class="keywd">is</span>                &lt;- 50 [1];

    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: (<span class="keywd">ref</span> <a class="type" href="#types_void">void</a> <span class="keywd">param</span>) ; (<span class="keywd">ref</span> <a class="type" href="#types_void">void</a> <span class="keywd">param</span>) <span class="keywd">is</span> noop;
</pre><p></p>

<a name="stats_Assignment"><h3>4.1 Assignment</h3></a>
<p>
  For example:
</p><pre>
    minimum := maximum <span class="op">div</span> 2;
</pre><p></p><dl><dt>
  Semantics:</dt><dd>
    The expression at the right side of the assignment symbol is
    evaluated and assigned to the variable at the left side.
</dd></dl><p>

  Syntax:
</p><pre>
    assignment_statement ::=
      designator ':=' expression .
</pre><p>
  The assignment statement is defined for every standard type.
</p><p>
  If an assignment for a new user defined type is needed it
  must be defined additionally.

</p><p>
  Declaration:
</p><pre>
    $ <span class="keywd">syntax</span> <a class="type" href="#types_expr">expr</a>: .(). := .() <span class="keywd">is</span>                     &lt;-> 20;

    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: (<span class="keywd">inout</span> <a class="type" href="#types_type">type</a> <span class="keywd">param</span>) := (<span class="keywd">ref</span> <a class="type" href="#types_type">type</a> <span class="keywd">param</span>)             <span class="keywd">is</span> action <span class="stri">"TYP_CPY"</span>;
    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: (<span class="keywd">inout</span> <a class="type" href="#types_proc">proc</a> <span class="keywd">param</span>) := (<span class="keywd">ref</span> <a class="type" href="#types_proc">proc</a> <span class="keywd">param</span>)             <span class="keywd">is</span> action <span class="stri">"PRC_CPY"</span>;
    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: (<span class="keywd">inout</span> <a class="type" href="#types_func">func</a> <span class="type">aType</span> <span class="keywd">param</span>) := (<span class="keywd">ref</span> <a class="type" href="#types_func">func</a> <span class="type">aType</span> <span class="keywd">param</span>) <span class="keywd">is</span> action <span class="stri">"PRC_CPY"</span>;
    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: (<span class="keywd">inout</span> <a class="type" href="#types_varfunc">varfunc</a> <span class="type">aType</span> <span class="keywd">param</span>) := (<span class="keywd">ref</span> <a class="type" href="#types_varfunc">varfunc</a> <span class="type">aType</span> <span class="keywd">param</span>) <span class="keywd">is</span> action <span class="stri">"PRC_CPY"</span>;
    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: (<span class="keywd">inout</span> <span class="type">ACTION</span> <span class="keywd">param</span>) := (<span class="keywd">in</span> <span class="type">ACTION</span> <span class="keywd">param</span>)          <span class="keywd">is</span> action <span class="stri">"ACT_CPY"</span>;
    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: (<span class="keywd">inout</span> <a class="type" href="#types_boolean">boolean</a> <span class="keywd">param</span>) := (<span class="keywd">in</span> <a class="type" href="#types_boolean">boolean</a> <span class="keywd">param</span>)        <span class="keywd">is</span> action <span class="stri">"BLN_CPY"</span>;
    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: (<span class="keywd">inout</span> <a class="type" href="#types_integer">integer</a> <span class="keywd">param</span>) := (<span class="keywd">in</span> <a class="type" href="#types_integer">integer</a> <span class="keywd">param</span>)        <span class="keywd">is</span> action <span class="stri">"INT_CPY"</span>;
    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: (<span class="keywd">inout</span> <a class="type" href="#types_char">char</a> <span class="keywd">param</span>) := (<span class="keywd">ref</span> <a class="type" href="#types_char">char</a> <span class="keywd">param</span>)             <span class="keywd">is</span> action <span class="stri">"CHR_CPY"</span>;
    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: (<span class="keywd">inout</span> <a class="type" href="#types_string">string</a> <span class="keywd">param</span>) := (<span class="keywd">ref</span> <a class="type" href="#types_string">string</a> <span class="keywd">param</span>)         <span class="keywd">is</span> action <span class="stri">"STR_CPY"</span>;
    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: (<span class="keywd">inout</span> <a class="type" href="#types_reference">reference</a> <span class="keywd">param</span>) := (<span class="keywd">ref</span> <a class="type" href="#types_reference">reference</a> <span class="keywd">param</span>)   <span class="keywd">is</span> action <span class="stri">"REF_CPY"</span>;
    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: (<span class="keywd">inout</span> <a class="type" href="#types_ref_list">ref_list</a> <span class="keywd">param</span>) := (<span class="keywd">in</span> <a class="type" href="#types_ref_list">ref_list</a> <span class="keywd">param</span>)      <span class="keywd">is</span> action <span class="stri">"RFL_CPY"</span>;
    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: (<span class="keywd">inout</span> <span class="type">ptrType</span> <span class="keywd">param</span>) := (<span class="keywd">in</span> <span class="type">ptrType</span> <span class="keywd">param</span>)        <span class="keywd">is</span> action <span class="stri">"REF_CPY"</span>;
    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: (<span class="keywd">inout</span> <span class="type">varptrType</span> <span class="keywd">param</span>) := (<span class="keywd">in</span> <span class="type">varptrType</span> <span class="keywd">param</span>)  <span class="keywd">is</span> action <span class="stri">"REF_CPY"</span>;
    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: (<span class="keywd">inout</span> <span class="type">arrayType</span> <span class="keywd">param</span>) := (<span class="keywd">in</span> <span class="type">arrayType</span> <span class="keywd">param</span>)    <span class="keywd">is</span> action <span class="stri">"ARR_CPY"</span>;
    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: (<span class="keywd">inout</span> <a class="type" href="#types_set">bitset</a> <span class="keywd">param</span>) := (<span class="keywd">in</span> <a class="type" href="#types_set">bitset</a> <span class="keywd">param</span>)          <span class="keywd">is</span> action <span class="stri">"SET_CPY"</span>;
    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: (<span class="keywd">inout</span> <span class="type">structType</span> <span class="keywd">param</span>) := (<span class="keywd">in</span> <span class="type">structType</span> <span class="keywd">param</span>)  <span class="keywd">is</span> action <span class="stri">"SCT_CPY"</span>;
    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: (<span class="keywd">inout</span> <span class="type">enumType</span> <span class="keywd">param</span>) := (<span class="keywd">in</span> <span class="type">enumType</span> <span class="keywd">param</span>)      <span class="keywd">is</span> action <span class="stri">"ENU_CPY"</span>;
    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: (<span class="keywd">inout</span> <span class="type">clib_file</span> <span class="keywd">param</span>) := (<span class="keywd">ref</span> <span class="type">clib_file</span> <span class="keywd">param</span>)   <span class="keywd">is</span> action <span class="stri">"FIL_CPY"</span>;
    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: (<span class="keywd">inout</span> <span class="type">file</span> <span class="keywd">param</span>) := (<span class="keywd">ref</span> <span class="type">file</span> <span class="keywd">param</span>)             <span class="keywd">is</span> action <span class="stri">"CLS_CPY"</span>;
    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: (<span class="keywd">inout</span> <span class="type">file</span> <span class="keywd">param</span>) := (<span class="keywd">ref</span> <span class="type">null_file</span> <span class="keywd">param</span>)        <span class="keywd">is</span> action <span class="stri">"CLS_CPY2"</span>;
    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: (<span class="keywd">inout</span> <span class="type">file</span> <span class="keywd">param</span>) := (<span class="keywd">ref</span> <span class="type">external_file</span> <span class="keywd">param</span>)    <span class="keywd">is</span> action <span class="stri">"CLS_CPY2"</span>;
</pre><p></p>

<a name="stats_while-statement"><h3>4.2 while-statement</h3></a>
<p>
  For example:
</p><pre>
    <span class="keywd">while</span> maximum > minimum <span class="keywd">do</span>
      minimum := 2 * minimum + stepValue;
      decr(stepValue);
    <span class="keywd">end while</span>;
</pre><p></p><dl><dt>
  Semantics:</dt><dd>
    First the condition between <tt><!-- ' --><span class="keywd">while</span><!-- ' --></tt> and <tt><!-- ' --><span class="keywd">do</span><!-- ' --></tt> is evaluated.
    When this evaluation yields <tt>'FALSE'</tt>, the while-statement is
    finished. When the evaluation yields <tt>'TRUE'</tt>, the statement
    between <tt><!-- ' --><span class="keywd">do</span><!-- ' --></tt> and <tt><!-- ' --><span class="keywd">end</span><!-- ' --></tt> is executed and the whole while-statement
    is executed again.
</dd></dl><p>

  Syntax:
</p><pre>
    while_statement ::=
      '<span class="keywd">while</span>' expression '<span class="keywd">do</span>'
        statement
      '<span class="keywd">end</span>' '<span class="keywd">while</span>' .
</pre><p>
  The expression must be of type <tt><!-- ' --><a class="type" href="#types_boolean">boolean</a><!-- ' --></tt>.

</p><p>
  Declaration:
</p><pre>
    $ <span class="keywd">syntax</span> <a class="type" href="#types_expr">expr</a>: .while.().do.().end.while <span class="keywd">is</span>       -> 25;

    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: while (<span class="keywd">ref</span> <a class="type" href="#types_func">func</a> <a class="type" href="#types_boolean">boolean</a> <span class="keywd">param</span>) do (<span class="keywd">ref</span> <a class="type" href="#types_proc">proc</a> <span class="keywd">param</span>) end while <span class="keywd">is action</span> <span class="stri">"PRC_WHILE"</span>;
    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: while (<span class="keywd">ref</span> <a class="type" href="#types_boolean">boolean</a> <span class="keywd">param</span>)  do (<span class="keywd">ref</span> <a class="type" href="#types_proc">proc</a> <span class="keywd">param</span>) end while     <span class="keywd">is action</span> <span class="stri">"PRC_WHILE"</span>;
</pre><p>
  Alternate declaration:
</p><pre>
    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: while (<span class="keywd">ref</span> <a class="type" href="#types_func">func</a> <a class="type" href="#types_boolean">boolean</a>: condition) do (<span class="keywd">ref</span> <a class="type" href="#types_proc">proc</a>: statement) end while <span class="keywd">is func</span>
      <span class="keywd">begin</span>
        <span class="keywd">if</span> condition <span class="keywd">then</span>
          statement;
          <span class="keywd">while</span> condition <span class="keywd">do</span>
            statement;
          <span class="keywd">end while</span>;
        <span class="keywd">end if</span>;
      <span class="keywd">end func</span>;
</pre><p></p>

<a name="stats_repeat-statement"><h3>4.3 repeat-statement</h3></a>
<p>
  For example:
</p><pre>
    <span class="keywd">repeat</span>
      incr(minimum);
      maximum := maximum - stepValue;
    <span class="keywd">until</span> 2 * minimum > maximum;
</pre><p></p><dl><dt>
  Semantics:</dt><dd>
    The statement between <tt><!-- ' --><span class="keywd">repeat</span><!-- ' --></tt> and <tt><!-- ' --><span class="keywd">until</span><!-- ' --></tt> is executed.
    Then the condition after <tt><!-- ' --><span class="keywd">until</span><!-- ' --></tt> is evaluated. When this
    evaluation yields <tt>'TRUE'</tt>, the repeat-statement is finished.
    When the evaluation yields <tt>'FALSE'</tt> the repeat-statement is
    executed again.
</dd></dl><p>

  Syntax:
</p><pre>
    repeat_statement ::=
      '<span class="keywd">repeat</span>'
        statement
      '<span class="keywd">until</span>' expression .
</pre><p>
  The expression must be of type <tt><!-- ' --><a class="type" href="#types_boolean">boolean</a><!-- ' --></tt>.

</p><p>
  Declaration:
</p><pre>
    $ <span class="keywd">syntax</span> <a class="type" href="#types_expr">expr</a>: .repeat.().until.() <span class="keywd">is</span>             -> 25;

    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: repeat (<span class="keywd">ref</span> <a class="type" href="#types_proc">proc</a> <span class="keywd">param</span>) until (<span class="keywd">ref</span> <a class="type" href="#types_func">func</a> <a class="type" href="#types_boolean">boolean</a> <span class="keywd">param</span>) <span class="keywd">is action</span> <span class="stri">"PRC_REPEAT"</span>;
    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: repeat (<span class="keywd">ref</span> <a class="type" href="#types_proc">proc</a> <span class="keywd">param</span>) until (<span class="keywd">ref</span> <a class="type" href="#types_boolean">boolean</a> <span class="keywd">param</span>)      <span class="keywd">is action</span> <span class="stri">"PRC_REPEAT"</span>;
</pre><p>
  Alternate declaration:
</p><pre>
    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: repeat (<span class="keywd">ref</span> <a class="type" href="#types_proc">proc</a>: statement) until (<span class="keywd">ref</span> <a class="type" href="#types_func">func</a> <a class="type" href="#types_boolean">boolean</a>: condition) <span class="keywd">is func</span>
      <span class="keywd">begin</span>
        statement;
        <span class="keywd">if</span> <span class="keywd">not</span> condition <span class="keywd">then</span>
          <span class="keywd">repeat</span>
            statement;
          <span class="keywd">until</span> condition;
        <span class="keywd">end if</span>;
      <span class="keywd">end func</span>;
</pre><p></p>

<a name="stats_for-statement"><h3>4.4 for-statement</h3></a>
<p>
  For example:
</p><pre>
    <span class="keywd">for</span> index <span class="keywd">range</span> min_index <span class="keywd">to</span> max_index <span class="keywd">do</span>
      sumValue +:= field[index];
    <span class="keywd">end for</span>;
</pre><p></p><dl><dt>
  Semantics:</dt><dd><dl><dt>
    When the <tt><!-- ' --><span class="keywd">to</span><!-- ' --></tt> symbol is used the for-statement is defined as
    follows:</dt><dd>
      First the lower limit and the upper limit which stand behind
      <tt><!-- ' --><span class="keywd">range</span><!-- ' --></tt> and <tt><!-- ' --><span class="keywd">to</span><!-- ' --></tt> are evaluated. Then the lower limit is assigned
      to the control variable which stands behind <tt><!-- ' --><span class="keywd">for</span><!-- ' --></tt>. If the value
      of the control variable is less than or equal the upper limit
      the statements behind <tt><!-- ' --><span class="keywd">do</span><!-- ' --></tt> are executed. After that the control
      variable is incremented and compared with the upper limit
      again. This compare - execute - increment cycle is repeated
      until the control variable is greater than the upper limit.</dd><dt>
    When the <tt><!-- ' --><span class="keywd">downto</span><!-- ' --></tt> symbol is used the for-statement is defined as
    follows:</dt><dd>
      First the upper limit and the lower limit which stand behind
      <tt><!-- ' --><span class="keywd">range</span><!-- ' --></tt> and <tt><!-- ' --><span class="keywd">downto</span><!-- ' --></tt> are evaluated. Then the upper limit is
      assigned to the control variable which stands behind <tt><!-- ' --><span class="keywd">for</span><!-- ' --></tt>. If
      the value of the control variable is greater than or equal the
      lower limit the statements behind <tt><!-- ' --><span class="keywd">do</span><!-- ' --></tt> are executed. After that
      the control variable is decremented and compared with the lower
      limit again. This compare - execute - increment cycle is
      repeated until the control variable is less than the lower limit.</dd></dl>
</dd></dl><p>

  Syntax:
</p><pre>
    for_statement ::=
      '<span class="keywd">for</span>' identifier '<span class="keywd">range</span>' expression [ '<span class="keywd">to</span>' | '<span class="keywd">downto</span>' ] expression '<span class="keywd">do</span>'
        statement
      '<span class="keywd">end</span>' '<span class="keywd">for</span>' .
</pre><p>

  Declaration:
</p><pre>
    $ <span class="keywd">syntax</span> <a class="type" href="#types_expr">expr</a>: .for.().range.().to.().do.().end.for <span class="keywd">is</span>     -> 25;
    $ <span class="keywd">syntax</span> <a class="type" href="#types_expr">expr</a>: .for.().range.().downto.().do.().end.for <span class="keywd">is</span> -> 25;

    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: FOR_DECLS (<span class="keywd">in</span> <a class="type" href="#types_type">type</a>: aType) <span class="keywd">is func</span>
      <span class="keywd">begin</span>
        <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: for (<span class="keywd">inout</span> <span class="type">aType</span>: variable) range
            (<span class="keywd">in</span> <span class="type">aType</span>: lower_limit) to (<span class="keywd">in</span> <span class="type">aType</span>: upper_limit) do
            (<span class="keywd">in</span> <a class="type" href="#types_proc">proc</a>: statements) end for <span class="keywd">is func</span>
          <span class="keywd">begin</span>
            variable := lower_limit;
            <span class="keywd">if</span> variable &lt;= upper_limit <span class="keywd">then</span>
              statements;
              <span class="keywd">while</span> variable &lt; upper_limit <span class="keywd">do</span>
                incr(variable);
                statements;
              <span class="keywd">end while</span>;
            <span class="keywd">end if</span>;
          <span class="keywd">end func</span>;

        <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: for (<span class="keywd">inout</span> <span class="type">aType</span>: variable) range
            (<span class="keywd">in</span> <span class="type">aType</span>: upper_limit) downto (<span class="keywd">in</span> <span class="type">aType</span>: lower_limit) do
            (<span class="keywd">in</span> <a class="type" href="#types_proc">proc</a>: statements) end for <span class="keywd">is func</span>
          <span class="keywd">begin</span>
            variable := upper_limit;
            <span class="keywd">if</span> variable >= lower_limit <span class="keywd">then</span>
              statements;
              <span class="keywd">while</span> variable > lower_limit <span class="keywd">do</span>
                decr(variable);
                statements;
              <span class="keywd">end while</span>;
            end if;
          <span class="keywd">end func</span>;
      <span class="keywd">end func</span>;

    FOR_DECLS(<a class="type" href="#types_integer">integer</a>);
    FOR_DECLS(<a class="type" href="#types_char">char</a>);
    FOR_DECLS(<a class="type" href="#types_boolean">boolean</a>);
</pre><p></p>

<a name="stats_for-each-statement"><h3>4.5 for-each-statement</h3></a>
<p>
  For example:
</p><pre>
    <span class="keywd">for</span> currObject <span class="keywd">range</span> element_list <span class="keywd">do</span>
      result &amp;:= " " & str(currObject);
    <span class="keywd">end for</span>;
</pre><p></p><dl><dt>
  Semantics:</dt><dd>
    First the element list which stands behind <tt><!-- ' --><span class="keywd">range</span><!-- ' --></tt> is evaluated.
    If the element list is empty the for-each-statement is finished.
    Otherwise the first element of the element list is assigned
    to the control variable which stands behind <tt><!-- ' --><span class="keywd">for</span><!-- ' --></tt>. Then the
    statements behind <tt><!-- ' --><span class="keywd">do</span><!-- ' --></tt> are executed. If there is no next element
    in the element the for-each-statement is finished. Otherwise
    the next element of the element list is assigned to the control
    variable. This check for next element - execute cycle is repeated
    until there is no next element in the element list.
</dd></dl><p>

  Syntax:
</p><pre>
    for_statement ::=
      '<span class="keywd">for</span>' identifier '<span class="keywd">range</span>' expression '<span class="keywd">do</span>'
        statement
      '<span class="keywd">end</span>' '<span class="keywd">for</span>' .
</pre><p>

  Declaration:
</p><pre>
    $ <span class="keywd">syntax</span> <a class="type" href="#types_expr">expr</a>: .for.().range.().do.().end.for <span class="keywd">is</span>          -> 25;

    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: for (<span class="keywd">ref</span> <a class="type" href="#types_reference">reference</a> <span class="keywd">param</span>) range (<span class="keywd">ref</span> <a class="type" href="#types_ref_list">ref_list</a> <span class="keywd">param</span>) do
                  (<span class="keywd">ref</span> <a class="type" href="#types_proc">proc</a> <span class="keywd">param</span>)
                end for <span class="keywd">is action</span> <span class="stri">"RFL_FOR"</span>;

    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: for (<span class="keywd">inout</span> <span class="type">baseType</span>: variable) range (<span class="keywd">in</span> <span class="type">arrayType</span>: arr_obj) do
                  (<span class="keywd">in</span> <a class="type" href="#types_proc">proc</a>: statements)
                end for <span class="keywd">is func</span>
      <span class="keywd">local</span>
        <span class="keywd">var</span> <a class="type" href="#types_integer">integer</a>: number <span class="keywd">is</span> 0;
      <span class="keywd">begin</span>
        <span class="keywd">for</span> number <span class="keywd">range</span> minIdx(arr_obj) <span class="keywd">to</span> maxIdx(arr_obj) <span class="keywd">do</span>
          variable := arr_obj[number];
          statements;
        <span class="keywd">end for</span>;
      <span class="keywd">end func</span>;

    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: for (<span class="keywd">inout</span> <span class="type">baseType</span>: variable) range (<span class="keywd">in</span> <span class="type">setType</span>: a_set) do
                  (<span class="keywd">in</span> <a class="type" href="#types_proc">proc</a>: statements)
                end for <span class="keywd">is func</span>
      <span class="keywd">begin</span>
        <span class="keywd">for</span> variable <span class="keywd">range</span> min(a_set) <span class="keywd">to</span> max(a_set) <span class="keywd">do</span>
          <span class="keywd">if</span> variable <span class="keywd">in</span> a_set <span class="keywd">then</span>
            statements;
          <span class="keywd">end if</span>;
        <span class="keywd">end for</span>;
      <span class="keywd">end func</span>;
</pre><p></p>

<a name="stats_if-statement"><h3>4.6 if-statement</h3></a>
<p>
  For example:
</p><pre>
    <span class="keywd">if</span> sumValue &lt; minimum <span class="keywd">then</span>
      factor := sumValue;
      sumValue := minimum;
    <span class="keywd">elsif</span> sumValue > maximum <span class="keywd">then</span>
      factor := -sumValue;
      sumValue := maximum;
    <span class="keywd">else</span>
      factor := 0;
    <span class="keywd">end if</span>;
</pre><p></p><dl><dt>
  Semantics:</dt><dd>
    The expressions before <tt><!-- ' --><span class="keywd">then</span><!-- ' --></tt> are evaluated in row.
    When such an expression evaluates to 'TRUE' the statements
    behind <tt><!-- ' --><span class="keywd">then</span><!-- ' --></tt> are executed and the if-statement is finished.
    If all expressions before <tt><!-- ' --><span class="keywd">then</span><!-- ' --></tt> evaluate to 'FALSE' and an
    else-part is present the statements behind <tt><!-- ' --><span class="keywd">else</span><!-- ' --></tt> are executed
    and the if-statement is finished.
    If all expressions before <tt><!-- ' --><span class="keywd">then</span><!-- ' --></tt> evaluate to 'FALSE' and no
    else-part is present the if-statement is finished.
</dd></dl><p>

  Syntax:
</p><pre>
    if_statement ::=
      '<span class="keywd">if</span>' expression '<span class="keywd">then</span>'
        statement
      { '<span class="keywd">elsif</span>' expression '<span class="keywd">then</span>'
        statement }
      [ '<span class="keywd">else</span>'
        statement ]
      '<span class="keywd">end</span>' '<span class="keywd">if</span>' .
</pre><p>
  The expression must be of type <tt><!-- ' --><a class="type" href="#types_boolean">boolean</a><!-- ' --></tt>.

</p><p>
  Declaration:
</p><pre>
    $ <span class="keywd">syntax</span> <a class="type" href="#types_expr">expr</a>: .if.().then.().end.if <span class="keywd">is</span>           -> 25;
    $ <span class="keywd">syntax</span> <a class="type" href="#types_expr">expr</a>: .if.().then.().().end.if <span class="keywd">is</span>        -> 25;

    $ <span class="keywd">syntax</span> <a class="type" href="#types_expr">expr</a>: .elsif.().then.() <span class="keywd">is</span>               &lt;- 60;
    $ <span class="keywd">syntax</span> <a class="type" href="#types_expr">expr</a>: .elsif.().then.().() <span class="keywd">is</span>            &lt;- 60;
    $ <span class="keywd">syntax</span> <a class="type" href="#types_expr">expr</a>: .else.() <span class="keywd">is</span>                        &lt;- 60;

    <span class="keywd">const</span> <a class="type" href="#types_type">type</a>: ELSIF_RESULT <span class="keywd">is</span> newtype;
    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: (ref ELSIF_RESULT <span class="keywd">param</span>) ::= enumlit <span class="keywd">is  action</span> <span class="stri">"ENU_GENLIT"</span>;
    <span class="keywd">const</span> <span class="type">ELSIF_RESULT</span>: ELSIF_EMPTY <span class="keywd">is</span> enumlit;
    <span class="keywd">const</span> <a class="type" href="#types_type">type</a>: ELSIF_PROC <span class="keywd">is</span>                        (func ELSIF_RESULT);
    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: (ref ELSIF_PROC <span class="keywd">param</span>) ::= (ref ELSIF_RESULT <span class="keywd">param</span>) <span class="keywd">is action</span> <span class="stri">"ENU_CREATE"</span>;

    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>:       if (<span class="keywd">in</span> <a class="type" href="#types_boolean">boolean</a> <span class="keywd">param</span>) then
                        (<span class="keywd">in</span> <a class="type" href="#types_proc">proc</a> <span class="keywd">param</span>)
                      end if <span class="keywd">is                        action</span> <span class="stri">"PRC_IF"</span>;

    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>:       if (<span class="keywd">in</span> <a class="type" href="#types_boolean">boolean</a> <span class="keywd">param</span>) then
                        (<span class="keywd">in</span> <a class="type" href="#types_proc">proc</a> <span class="keywd">param</span>)
                      (<span class="keywd">in</span> <span class="type">ELSIF_PROC</span> <span class="keywd">param</span>)
                      end if <span class="keywd">is                        action</span> <span class="stri">"PRC_IF_ELSIF"</span>;

    <span class="keywd">const</span> <span class="type">ELSIF_PROC</span>: elsif (<span class="keywd">in</span> <a class="type" href="#types_boolean">boolean</a> <span class="keywd">param</span>) then
                        (<span class="keywd">in</span> <a class="type" href="#types_proc">proc</a> <span class="keywd">param</span>) <span class="keywd">is             action</span> <span class="stri">"PRC_IF"</span>;

    <span class="keywd">const</span> <span class="type">ELSIF_PROC</span>: elsif (<span class="keywd">in</span> <a class="type" href="#types_boolean">boolean</a> <span class="keywd">param</span>) then
                        (<span class="keywd">in</span> <a class="type" href="#types_proc">proc</a> <span class="keywd">param</span>)
                      (<span class="keywd">in</span> <span class="type">ELSIF_PROC</span> <span class="keywd">param</span>) <span class="keywd">is         action</span> <span class="stri">"PRC_IF_ELSIF"</span>;

    <span class="keywd">const</span> <span class="type">ELSIF_PROC</span>: else
                        (<span class="keywd">in</span> <a class="type" href="#types_void">void</a> <span class="keywd">param</span>) <span class="keywd">is</span>             ELSIF_EMPTY;


    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: if TRUE  then (<span class="keywd">in</span> <a class="type" href="#types_void">void</a> <span class="keywd">param</span>) end if <span class="keywd">is</span>                           noop;
    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: if TRUE  then (<span class="keywd">in</span> <a class="type" href="#types_void">void</a> <span class="keywd">param</span>) (<span class="keywd">in</span> <span class="type">ELSIF_PROC</span> <span class="keywd">param</span>) end if <span class="keywd">is</span>     noop;
    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: if FALSE then (<span class="keywd">in</span> <a class="type" href="#types_proc">proc</a> <span class="keywd">param</span>) end if <span class="keywd">is</span>                           noop;
    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: if FALSE then (<span class="keywd">in</span> <a class="type" href="#types_proc">proc</a> <span class="keywd">param</span>) (<span class="keywd">in</span> <span class="type">ELSIF_RESULT</span> <span class="keywd">param</span>) end if <span class="keywd">is</span>   noop;
    <span class="keywd">const</span> <span class="type">ELSIF_PROC</span>: elsif TRUE  then (<span class="keywd">in</span> <a class="type" href="#types_void">void</a> <span class="keywd">param</span>) <span class="keywd">is</span>                         ELSIF_EMPTY;
    <span class="keywd">const</span> <span class="type">ELSIF_PROC</span>: elsif TRUE then (<span class="keywd">in</span> <a class="type" href="#types_void">void</a> <span class="keywd">param</span>) (<span class="keywd">in</span> <span class="type">ELSIF_PROC</span> <span class="keywd">param</span>)   <span class="keywd">is</span>  ELSIF_EMPTY;
    <span class="keywd">const</span> <span class="type">ELSIF_PROC</span>: elsif FALSE then (<span class="keywd">in</span> <a class="type" href="#types_proc">proc</a> <span class="keywd">param</span>) <span class="keywd">is</span>                         ELSIF_EMPTY;
    <span class="keywd">const</span> <span class="type">ELSIF_PROC</span>: elsif FALSE then (<span class="keywd">in</span> <a class="type" href="#types_proc">proc</a> <span class="keywd">param</span>) (<span class="keywd">in</span> <span class="type">ELSIF_RESULT</span> <span class="keywd">param</span>) <span class="keywd">is</span> ELSIF_EMPTY;
</pre><p></p>

<a name="stats_case-statement"><h3>4.7 case-statement</h3></a>
<p>
  For example:
</p><pre>
    <span class="keywd">case</span> currChar <span class="keywd">of</span>
      <span class="keywd">when</span> {<span class="stri">'A'</span> .. <span class="stri">'Z'</span>} | {<span class="stri">'a'</span> .. <span class="stri">'z'</span>}:
        characterClass := LETTER;
      <span class="keywd">when</span> {<span class="stri">'0'</span> .. <span class="stri">'9'</span>}:
        characterClass := DIGIT;
      <span class="keywd">when</span> {<span class="stri">'!'</span>, <span class="stri">'$'</span>, <span class="stri">'%'</span>, <span class="stri">'&'</span>, <span class="stri">'*'</span>, <span class="stri">'+'</span>, <span class="stri">','</span>, <span class="stri">'-'</span>, <span class="stri">'.'</span>, <span class="stri">'/',
          ':'</span>, <span class="stri">';'</span>, <span class="stri">'&lt;'</span>, <span class="stri">'='</span>, <span class="stri">'>'</span>, <span class="stri">'?'</span>, <span class="stri">'@'</span>, <span class="stri">'\'</span>, <span class="stri">'^'</span>, <span class="stri">'`',
          '|'</span>, <span class="stri">'~'</span>}:
        characterClass := SPECIAL;
      <span class="keywd">when</span> {<span class="stri">'('</span>, <span class="stri">')'</span>, <span class="stri">'['</span>, <span class="stri">']'</span>, <span class="stri">'{'</span>, <span class="stri">'}'</span>}:
        characterClass := PAREN;
      <span class="keywd">when</span> {<span class="stri">'"'</span>}:  <span class="comment"># Also possible '\"'</span>
        characterClass := APPOSTROPHE;
      <span class="keywd">when</span> {<span class="stri">'''</span>}:  <span class="comment"># Also possible '\''</span>
        characterClass := QUOTE;
      <span class="keywd">otherwise</span>:
        characterClass := ILLEGAL;
    <span class="keywd">end case</span>;
</pre><p></p><dl><dt>
  Semantics:</dt><dd>
    The expression between <tt><!-- ' --><span class="keywd">case</span><!-- ' --></tt> and <tt><!-- ' --><span class="keywd">of</span><!-- ' --></tt> is evaluated. When the
    resulting value is element of a set behind a <tt><!-- ' --><span class="keywd">when</span><!-- ' --></tt> the
    statements behind the corresponding colon are executed and
    the case-statement is finished. If the value is not element of
    a set behind a <tt><!-- ' --><span class="keywd">when</span><!-- ' --></tt> and an <tt><!-- ' --><span class="keywd">otherwise</span><!-- ' --></tt> part is present the
    statements behind the colon of the <tt><!-- ' --><span class="keywd">otherwise</span><!-- ' --></tt> are executed
    and the case-statement is finished. If the value is not element
    of a set behind a <tt><!-- ' --><span class="keywd">when</span><!-- ' --></tt> and no <tt><!-- ' --><span class="keywd">otherwise</span><!-- ' --></tt> part is present
    the case-statement is finished.
</dd></dl><p>

  Syntax:
</p><pre>
    case_statement ::=
      '<span class="keywd">case</span>' expression '<span class="keywd">of</span>'
        { '<span class="keywd">when</span>' set_expression ':'
          statement }
        [ '<span class="keywd">otherwise</span>' ':'
          statement ]
      '<span class="keywd">end</span>' '<span class="keywd">case</span>' .
</pre><p>

  Declaration:
</p><pre>
    $ <span class="keywd">syntax</span> <a class="type" href="#types_expr">expr</a>: .case.().of.().end.case <span class="keywd">is</span>                      -> 25;
    $ <span class="keywd">syntax</span> <a class="type" href="#types_expr">expr</a>: .case.().of.().otherwise. : .().end.case <span class="keywd">is</span>     -> 25;
    $ <span class="keywd">syntax</span> <a class="type" href="#types_expr">expr</a>: .case.().of.end.case <span class="keywd">is</span>                         -> 25;

    $ <span class="keywd">syntax</span> <a class="type" href="#types_expr">expr</a>: .when.(). : .().() <span class="keywd">is</span>              &lt;- 60;
    $ <span class="keywd">syntax</span> <a class="type" href="#types_expr">expr</a>: .when.(). : .() <span class="keywd">is</span>                 &lt;- 60;

    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: CASE_DECLS (<span class="keywd">in</span> <a class="type" href="#types_type">type</a>: aType) <span class="keywd">is func</span>
      <span class="keywd">local</span>
        <span class="keywd">var</span> <a class="type" href="#types_type">type</a>: WHEN_RESULT <span class="keywd">is</span> <a class="type" href="#types_void">void</a>;
        <span class="keywd">var</span> <a class="type" href="#types_type">type</a>: WHEN_PROC <span class="keywd">is</span> <a class="type" href="#types_void">void</a>;
        <span class="keywd">var</span> <a class="type" href="#types_type">type</a>: SELECTOR_TYPE <span class="keywd">is</span> <a class="type" href="#types_void">void</a>;
      <span class="keywd">begin</span>
        <span class="type">WHEN_RESULT</span> := newtype;
        <span class="type">WHEN_PROC</span> := (<a class="type" href="#types_func">func</a> <span class="type">WHEN_RESULT</span>);
        <span class="type">SELECTOR_TYPE</span> := <a class="type" href="#types_set">set</a> <a class="type" href="#types_set">of</a> <span class="type">aType</span>;
        <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: case (<span class="keywd">ref</span> <span class="type">aType</span> <span class="keywd">param</span>) of end case                       <span class="keywd">is</span> noop;
        <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: case (<span class="keywd">ref</span> <span class="type">aType</span> <span class="keywd">param</span>) of
                      (<span class="keywd">ref</span> <span class="type">WHEN_PROC</span> <span class="keywd">param</span>)
                    end case                                                 <span class="keywd">is action</span> <span class="stri">"PRC_CASE"</span>;
        <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: case (<span class="keywd">ref</span> <span class="type">aType</span> <span class="keywd">param</span>) of
                      (<span class="keywd">ref</span> <span class="type">WHEN_PROC</span> <span class="keywd">param</span>)
                      otherwise : (<span class="keywd">ref</span> <a class="type" href="#types_proc">proc</a> <span class="keywd">param</span>)
                    end case                                                 <span class="keywd">is action</span> <span class="stri">"PRC_CASE_DEF"</span>;
        <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: (<span class="keywd">ref</span> <span class="type">WHEN_RESULT</span> <span class="keywd">param</span>) ::= enumlit                      <span class="keywd">is action</span> <span class="stri">"ENU_GENLIT"</span>;
        <span class="keywd">const</span> <span class="type">WHEN_RESULT</span>: WHEN_EMPTY (<span class="keywd">attr</span> <span class="type">aType</span>) is enumlit;
        <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: (<span class="keywd">ref</span> <span class="type">WHEN_PROC</span> <span class="keywd">param</span>) ::= (<span class="keywd">ref</span> <span class="type">WHEN_RESULT</span> <span class="keywd">param</span>)        <span class="keywd">is action</span> <span class="stri">"ENU_CREATE"</span>;
        <span class="keywd">const</span> <span class="type">WHEN_PROC</span>: when (<span class="keywd">ref</span> <span class="type">SELECTOR_TYPE</span> <span class="keywd">param</span>) : (<span class="keywd">ref</span> <a class="type" href="#types_proc">proc</a> <span class="keywd">param</span>)   <span class="keywd">is</span> WHEN_EMPTY(<span class="type">aType</span>);
        <span class="keywd">const</span> <span class="type">WHEN_PROC</span>: when (<span class="keywd">ref</span> <span class="type">SELECTOR_TYPE</span> <span class="keywd">param</span>) : (<span class="keywd">ref</span> <a class="type" href="#types_proc">proc</a> <span class="keywd">param</span>)
                           (<span class="keywd">ref</span> <span class="type">WHEN_PROC</span> <span class="keywd">param</span>)                             <span class="keywd">is</span> WHEN_EMPTY(<span class="type">aType</span>);
      <span class="keywd">end func</span>;

    CASE_DECLS(<a class="type" href="#types_integer">integer</a>);
    CASE_DECLS(<a class="type" href="#types_char">char</a>);
</pre><p></p>

<a name="types_file_start"></a><p></p>
<a name="types_PREDEFINED_TYPES"><h2>5. PREDEFINED TYPES</h2></a>
<!-- =================== -->
<p>
    In the following subchapters the predefined types of the
  standard library are introduced. The operators have, when not
  stated otherwise, the type described in the subchapter as
  parameter type and result type. The relations have also the
  type described in the subchapter as parameter type and
  a result of type <tt><!-- ' --><a class="type" href="#types_boolean">boolean</a><!-- ' --></tt>. In the descriptions <tt>=></tt> is used
  to show an equivalent expression.
</p>

<a name="types_boolean"><h3>5.1 boolean</h3></a>
<p>
    The type <tt><!-- ' -->boolean<!-- ' --></tt> consists of the two truth values
  TRUE and FALSE. The <tt><!-- ' -->boolean<!-- ' --></tt> functions are defined in
  the library <span class="stri">"boolean.s7i"</span>.
</p><pre>
    Prefix operators:
      not       Negation
                  ( not TRUE => FALSE,
                    not FALSE => TRUE )
    Infix operators:
      and       Logical and
                  ( TRUE and TRUE => TRUE,
                    A and B => FALSE else )
      or        Inclusive logical or
                  ( FALSE or FALSE => FALSE,
                    A or B => TRUE else )
      <a class="type" href="#types_boolean">boolean</a> conv A   Conversion of <a class="type" href="#types_integer">integer</a> to <a class="type" href="#types_boolean">boolean</a>
                  ( Type of argument A: <a class="type" href="#types_integer">integer</a>,
                    <a class="type" href="#types_boolean">boolean</a> conv 0 => FALSE,
                    <a class="type" href="#types_boolean">boolean</a> conv 1 => TRUE )
      <a class="type" href="#types_boolean">boolean</a> parse A   Conversion of <a class="type" href="#types_string">string</a> to <a class="type" href="#types_boolean">boolean</a>
                  ( Type of argument A: <a class="type" href="#types_string">string</a>,
                    <a class="type" href="#types_boolean">boolean</a> parse <span class="stri">"FALSE"</span> => FALSE,
                    <a class="type" href="#types_boolean">boolean</a> parse <span class="stri">"TRUE"</span> => TRUE,
                    <a class="type" href="#types_boolean">boolean</a> parse <span class="stri">"TRUE "</span> => EXCEPTION RANGE_ERROR,
                    <a class="type" href="#types_boolean">boolean</a> parse <span class="stri">"ASDF"</span> => EXCEPTION RANGE_ERROR )
    Relations:
      =, &lt;>, &lt;, &lt;=, >, >=
                  ( A relation B =>
                    ord(A) relation ord(B) )
    Functions:
      ord(A)    Ordinal number
                  ( Type of result: <a class="type" href="#types_integer">integer</a>,
                    ord(FALSE) => 0, ord(TRUE) => 1 )
      succ(A)   Successor
                  ( succ(FALSE) => TRUE,
                    succ(TRUE) => EXCEPTION RANGE_ERROR )
      pred(A)   Predecessor
                  ( pred(FALSE) => EXCEPTION RANGE_ERROR )
                    pred(TRUE) => FALSE )
      str(A)    Conversion to <a class="type" href="#types_string">string</a>
                  ( Type of result: <a class="type" href="#types_string">string</a>,
                    str(FALSE) => <span class="stri">"FALSE"</span>,
                    str(TRUE) => <span class="stri">"TRUE"</span> )
      rand(A, B) Random value in the range [A, B]
                 The random values are uniform distributed.
                  ( rand(A, B) returns a random value such that
                    A &lt;= rand(A, B) and rand(A, B) &lt;= B holds.
                    rand(A, A) => A,
                    rand(TRUE, FALSE) => EXCEPTION RANGE_ERROR )
      compare(A, B) Compare function
                  ( Type of result: <a class="type" href="#types_integer">integer</a>,
                    compare(FALSE, TRUE) => -1,
                    compare(TRUE, TRUE) => 0,
                    compare(TRUE, FALSE) => 1 )
      hashCode(A) Hash function
                  ( Type of result: <a class="type" href="#types_integer">integer</a> )
    Statements:
      incr(A)   Increment
                  ( incr(A) => A:=succ(A) )
      decr(A)   Decrement
                  ( decr(A) => A:=pred(A) )
</pre><p>

    The logical operators <tt><!-- ' -->and<!-- ' --></tt> and <tt><!-- ' -->or<!-- ' --></tt> work strictly left
  to right. First they evaluate the left operand and then
  the right operand. When the result of the operation can be
  determined after evaluation of the left operand the right
  operand is not evaluated. This can be used to check for
  a boundary in a boolean expression. Naturally side effects
  of the right operand of the <tt><!-- ' -->and<!-- ' --></tt> and <tt><!-- ' -->or<!-- ' --></tt> operator only
  take place when the operand is executed.

</p><p>
  Table for the behavior of different boolean expressions:
</p><pre>
                               Result when the    Result when the
    Expression                  first operand      first operand
                             evaluates to FALSE  evaluates to TRUE

    not A                           TRUE               FALSE
    A and B  respectively
      not((not A)or(not B))         FALSE                B
    A or  B  respectively
      not((not A)and(not B))          B                TRUE
    A >  B  respectively
      A and(not B)                  FALSE              not B
    A >= B  respectively
      A or(not B)                   not B              TRUE
    A &lt;  B  respectively
      (not A)and B                    B                FALSE
    A &lt;= B  respectively
      (not A)or B                   TRUE                 B
    not (A and B)  respectively
      (not A)or(not B)              TRUE               not B
    not (A or B)  respectively
      (not A)and(not B)             not B              FALSE
</pre><p>

  Optimizing boolean expressions:
</p><p>
    When the result of a boolean expression can be
  determined at compile time, the expression can be
  replaced by a constant. Additionally the following
  equations can be used:
</p><pre>
    (A or  B) and (A or  C)  =  A or  (B and C)
    (A and B) or  (A and C)  =  A and (B or  C)
</pre><p></p>

<a name="types_integer"><h3>5.2 integer</h3></a>
<p>
    The type <tt><!-- ' --><a class="type" href="#types_integer">integer</a><!-- ' --></tt> consists of signed integer numbers
  which are at least 32 bits wide. An <tt><!-- ' --><a class="type" href="#types_integer">integer</a><!-- ' --></tt> literal is
  a sequence of digits which is taken to be decimal. The
  sequence of digits may be followed by the letter E or e
  an optional + sign and a decimal exponent. Based numbers
  can be specified when the sequence of digits is followed
  by the # character and a sequence of extended digits.
  The decimal number in front of the # character specifies
  the base of the number which follows the # character.
  As base a number between 2 and 36 is allowed. As
  extended digits the letters A or a can be used for 10,
  B or b can be used for 11 and so on to Z or z which can
  be used as 35. Examples of <tt><!-- ' --><a class="type" href="#types_integer">integer</a><!-- ' --></tt> literals are:
</p><pre>
    0   2147483647   1E6   2e+9   16#c0   16#FFFF   8#177777   2#1010101010
</pre><p>
  The result of an <tt><!-- ' --><a class="type" href="#types_integer">integer</a><!-- ' --></tt> operation is undefined when
  it overflows. The <tt><!-- ' --><a class="type" href="#types_integer">integer</a><!-- ' --></tt> functions are defined in
  the library <span class="stri">"integer.s7i"</span>.
</p><pre>
    Prefix operators:
      +         Identity
      -         Change sign
      !         Factorial
    Infix operators:
      +         Addition
      -         Subtraction
      *         Multiplication
      div       Integer division truncated towards zero
                  ( A div B => trunc(flt(A) / flt(B)),
                    A div 0 => EXCEPTION NUMERIC_ERROR )
      rem       Reminder of integer division div
                  ( A rem B => A - (A div B) * B,
                    A rem 0 => EXCEPTION NUMERIC_ERROR )
      mdiv      Integer division truncated towards negative infinity
                  ( A mdiv B => round(floor(flt(A) / flt(B))),
                    A mdiv 0 => EXCEPTION NUMERIC_ERROR )
      mod       Reminder of integer division mdiv
                  ( A mod B => A - (A mdiv B) * B,
                    A mod 0 => EXCEPTION NUMERIC_ERROR )
      **        Power
                  ( A ** B is okay for B >= 0,
                    A ** 0 => 1,
                    1 ** B => 1 for B >= 0,
                    A ** B => -(-A) ** B for A &lt;= 0 and B >= 0 and odd(B),
                    A ** B => (-A) ** B for A &lt;= 0 and B >= 0 and not odd(B),
                    A ** -1 => EXCEPTION NUMERIC_ERROR )
      A &lt;&lt; B    Shift left
                  ( A &lt;&lt; B is okay for B >= 0 and B &lt;= 31,
                    A &lt;&lt; B => A * 2 ** B,
                    A &lt;&lt; 0 => A )
      A >> B    Arithmetic shift right
                  ( A >> B is okay for B >= 0 and B &lt;= 31,
                    A >> B => A mdiv 2 ** B  for B &lt;= 30,
                    A >> B => C for A >= 0 holds: C >= 0
                    A >> B => C for A &lt; 0 holds: C &lt; 0
                    A >> B => 0 for A >= 0 and B > ord(log2(A)),
                    A >> B => -1 for A &lt; 0 and B > ord(log2(-A)),
                    A >> 0 => A )
      !         Binomial coefficient
                  ( A ! B => !A div (!B * !(A - B)) )
      <span class="op">lpad</span>      Left padding with spaces
                  ( 123 <span class="op">lpad</span>  8 => <span class="stri">"     123"</span>,
                    123 <span class="op">lpad</span>  4 => <span class="stri">" 123"</span>,
                    123 <span class="op">lpad</span>  3 => <span class="stri">"123"</span>,
                    123 <span class="op">lpad</span>  2 => <span class="stri">"123"</span>,
                    123 <span class="op">lpad</span> -8 => <span class="stri">"123"</span> )
                    -12 <span class="op">lpad</span>  4 => <span class="stri">" -12"</span>,
                    -12 <span class="op">lpad</span>  3 => <span class="stri">"-12"</span>,
                    -12 <span class="op">lpad</span>  2 => <span class="stri">"-12"</span> )
      <span class="op">lpad0</span>     Left padding with zeros
                  ( 123 <span class="op">lpad0</span>  8 => <span class="stri">"00000123"</span>,
                    123 <span class="op">lpad0</span>  4 => <span class="stri">"0123"</span>,
                    123 <span class="op">lpad0</span>  3 => <span class="stri">"123"</span>,
                    123 <span class="op">lpad0</span>  2 => <span class="stri">"123"</span>,
                    123 <span class="op">lpad0</span> -8 => <span class="stri">"123"</span>,
                    -12 <span class="op">lpad0</span>  4 => <span class="stri">"-012"</span>,
                    -12 <span class="op">lpad0</span>  3 => <span class="stri">"-12"</span>,
                    -12 <span class="op">lpad0</span>  2 => <span class="stri">"-12"</span> )
      <span class="op">rpad</span>      Right padding with spaces
                  ( 123 <span class="op">rpad</span>  8 => <span class="stri">"123     "</span>,
                    123 <span class="op">rpad</span>  4 => <span class="stri">"123 "</span>,
                    123 <span class="op">rpad</span>  3 => <span class="stri">"123"</span>,
                    123 <span class="op">rpad</span>  2 => <span class="stri">"123"</span>,
                    123 <span class="op">rpad</span> -8 => <span class="stri">"123"</span> )
                    -12 <span class="op">rpad</span>  4 => <span class="stri">"-12 "</span>,
                    -12 <span class="op">rpad</span>  3 => <span class="stri">"-12"</span>,
                    -12 <span class="op">rpad</span>  2 => <span class="stri">"-12"</span> )
      <a class="type" href="#types_integer">integer</a> conv A   Identity
                  ( <a class="type" href="#types_integer">integer</a> conv A => A )
      <a class="type" href="#types_integer">integer</a> parse A   Conversion of <a class="type" href="#types_string">string</a> to <a class="type" href="#types_integer">integer</a>
                  ( Type of argument A: <a class="type" href="#types_string">string</a>,
                    <a class="type" href="#types_integer">integer</a> parse <span class="stri">"123"</span> => 123,
                    <a class="type" href="#types_integer">integer</a> parse <span class="stri">"-123"</span> => -123,
                    <a class="type" href="#types_integer">integer</a> parse <span class="stri">"+5"</span> => 5,
                    <a class="type" href="#types_integer">integer</a> parse <span class="stri">" 1"</span> => EXCEPTION RANGE_ERROR,
                    <a class="type" href="#types_integer">integer</a> parse <span class="stri">"10 "</span> => EXCEPTION RANGE_ERROR,
                    <a class="type" href="#types_integer">integer</a> parse <span class="stri">"ASDF"</span> => EXCEPTION RANGE_ERROR )
    Relations:
      =, &lt;>, &lt;, &lt;=, >, >=
    Functions:
      ord(A)    Identity
      succ(A)   Successor
                  ( succ(A) => A+1 )
      pred(A)   Predecessor
                  ( pred(A) => A-1 )
      abs(A)    Absolute value
      odd(A)    Odd value
                  ( Type of result: <a class="type" href="#types_boolean">boolean</a> )
      str(A)    Conversion to <a class="type" href="#types_string">string</a>
                  ( Type of result: <a class="type" href="#types_string">string</a> )
      literal(A) Conversion to a literal
                  ( Type of result: <a class="type" href="#types_string">string</a>,
                    literal(A) => str(A) )
      sqrt(A)   Integer square root
                  ( sqrt(A) is okay for A >= 0
                    sqrt(A) => trunc(sqrt(flt(A))),
                    sqrt(-1) => EXCEPTION NUMERIC_ERROR )
      log2(A)   Truncated base 2 logarithm
                  ( log2(A) returns the position of the
                    highest bit set. It is defined for A >= 0
                    log2(2 ** A) = A for A >= 0,
                    log2(0) => -1,
                    log2(1) => 0,
                    log2(2) => 1,
                    log2(-1) => EXCEPTION NUMERIC_ERROR )
      bitLength(A) Number of bits in the minimal two's-complement
                   representation, excluding the sign bit.
                  ( bitLength(A) => succ(log2(A)) for A >= 0,
                    bitLength(A) => succ(log2(pred(-A))) for A &lt; 0 )
      lowestSetBit(A) Index of the lowest-order one bit
                      For A &lt;> 0 this is equal to the number of
                      lowest-order zero bits.
                  ( A >> B &lt;&lt; B = A for A &lt;> 0 and B = lowestSetBit(A),
                    lowestSetBit(0) => -1,
                    lowestSetBit(1) => 0,
                    lowestSetBit(2) => 1 )
      rand(A, B) Random number in the range [A, B]
                 The random values are uniform distributed.
                  ( rand(A, B) returns a random number such that
                    A &lt;= rand(A, B) and rand(A, B) &lt;= B holds.
                    rand(A, A) => A,
                    rand(1, 0) => EXCEPTION RANGE_ERROR )
      compare(A, B) Compare function
                  ( compare(1, 2) => -1,
                    compare(5, 5) => 0,
                    compare(8, 7) => 1 )
      hashCode(A) Hash function
    Statements:
      A +:= B   Increment A by B
                  ( A +:= B => A := A + B )
      A -:= B   Decrement A by B
                  ( A -:= B => A := A - B )
      A *:= B   Multiplying copy
                  ( A *:= B => A := A * B )
      A &lt;&lt;:= B  Shift left copy
                  ( A &lt;&lt;:= B => A := A &lt;&lt; B )
      A >>:= B  Shift right copy
                  ( A >>:= B => A := A >> B )
      incr(A)   Increment with 1
                  ( incr(A) => A +:= 1 )
      decr(A)   Decrement with 1
                  ( decr(A) => A -:= 1 )
</pre><p>
  For the operations <tt>'div'</tt> and <tt>'rem'</tt> holds for all A:</p><pre>
    (A div B) * B + A rem B = A           when B &lt;> 0
    -A div B = -(A div B)                 when B &lt;> 0
    -A rem B = -(A rem B)                 when B &lt;> 0
    A rem B >= 0 and A rem B &lt; abs(B)     when B &lt;> 0 and A >= 0
    A rem B &lt;= 0 and A rem B > -abs(B)    when B &lt;> 0 and A &lt;= 0
</pre><p>
  For the operations <tt>'mdiv'</tt> and <tt>'mod'</tt> holds for all A:</p><pre>
    (A mdiv B) * B + A mod B = A          when B &lt;> 0
    -A mdiv B = A mdiv -B                 when B &lt;> 0
    -A mod -B = -(A mod B)                when B &lt;> 0
    A mod B >= 0 and A mod B &lt; B          when B > 0
    A mod B &lt;= 0 and A mod B > B          when B &lt; 0
</pre><p>
  For the operation <tt>'mdiv'</tt> holds:</p><pre>
    A mdiv B = A div B - 1            when A and B have different
                                      signs and A rem B &lt;> 0 holds.
    A mdiv B = A div B                when A and B have the same
                                      sign or A rem B = 0 holds.
    A mdiv B = (A - 1) div B - 1      when A > 0 and B &lt; 0 holds.
    A mdiv B = (A + 1) div B - 1      when A &lt; 0 and B > 0 holds.
    A mdiv 2 ** B = A >> B            when B >= 0 holds
</pre><p>
  For the operation <tt>'mod'</tt> holds:</p><pre>
    A mod B = A rem B + B      when A and B have different
                               signs and A rem B &lt;> 0 holds.
    A mod B = A rem B          when A and B have the same
                               sign or A rem B = 0 holds.
</pre><p>

  Table for the behavior of <tt>'div'</tt>, <tt>'rem'</tt>, <tt>'mdiv'</tt> and <tt>'mod'</tt>:
</p><pre>
     A    B   A div B   A rem B   A mdiv B  A mod B

     5    3      1         2         1         2
     4    3      1         1         1         1
     3    3      1         0         1         0
     2    3      0         2         0         2
     1    3      0         1         0         1
     0    3      0         0         0         0
    -1    3      0        -1        -1         2
    -2    3      0        -2        -1         1
    -3    3     -1         0        -1         0
    -4    3     -1        -1        -2         2
    -5    3     -1        -2        -2         1

     A    B   A div B   A rem B   A mdiv B  A mod B

     5   -3     -1         2        -2        -1
     4   -3     -1         1        -2        -2
     3   -3     -1         0        -1         0
     2   -3      0         2        -1        -1
     1   -3      0         1        -1        -2
     0   -3      0         0         0         0
    -1   -3      0        -1         0        -1
    -2   -3      0        -2         0        -2
    -3   -3      1         0         1         0
    -4   -3      1        -1         1        -1
    -5   -3      1        -2         1        -2
</pre><p>

  For the 'sqrt' function holds (when A >= 0):</p><pre>
    sqrt(A) * sqrt(A) &lt;= A and
    (sqrt(A) + 1) * (sqrt(A) + 1) > A
</pre><p></p>

<a name="types_bigInteger"><h3>5.3 bigInteger</h3></a>
<p>
    The type <tt><!-- ' -->bigInteger<!-- ' --></tt> describes signed integer numbers of
  unlimited size. The literals of the type <tt><!-- ' -->bigInteger<!-- ' --></tt> are sequences
  of digits followed by an underscore character (for example 1_ ).
  Although <tt><!-- ' -->bigInteger<!-- ' --></tt> operations cannot overflow, it can happen
  that there is not enough memory to represent a <tt><!-- ' -->bigInteger<!-- ' --></tt> value.
  In this case the exception <tt>'MEMORY_ERROR'</tt> is raised. The <tt><!-- ' -->bigInteger<!-- ' --></tt>
  functions are defined in the library <span class="stri">"bigint.s7i"</span>.
</p><pre>
    Prefix operators:
      +         Identity
      -         Change sign
      !         Factorial
    Infix operators:
      +         Addition
      -         Subtraction
      *         Multiplication
      div       Integer division truncated towards zero
                  ( A div B => trunc(A / B),
                    A div 0_ => EXCEPTION NUMERIC_ERROR )
      rem       Reminder of integer division div
                  ( A rem B => A - (A div B) * B,
                    A rem 0_ => EXCEPTION NUMERIC_ERROR )
      mdiv      Integer division truncated towards negative infinity
                  ( A mdiv B => floor(A / B),
                    A mdiv 0_ => EXCEPTION NUMERIC_ERROR )
      mod       Reminder of integer division mdiv
                  ( A mod B => A - (A mdiv B) * B,
                    A mod 0_ => EXCEPTION NUMERIC_ERROR )
      A ** B    Power
                  ( Type of argument B: <a class="type" href="#types_integer">integer</a>,
                    A ** B is okay for B >= 0,
                    A ** 0 => 1_,
                    1_ ** B => 1_ for B >= 0,
                    A ** B => -(-A) ** B for A &lt;= 0 and B >= 0 and odd(B),
                    A ** B => (-A) ** B for A &lt;= 0 and B >= 0 and not odd(B),
                    A ** -1 => EXCEPTION NUMERIC_ERROR )
      A &lt;&lt; B    Shift left
                  ( Type of argument B: <a class="type" href="#types_integer">integer</a>,
                    A &lt;&lt; B is okay for B >= 0,
                    A &lt;&lt; B => A * 2_ ** B,
                    A &lt;&lt; 0 => A,
                    A &lt;&lt; -1 => EXCEPTION NUMERIC_ERROR )
      A >> B    Arithmetic shift right
                  ( Type of argument B: <a class="type" href="#types_integer">integer</a>,
                    A >> B is okay for B >= 0,
                    A >> B => A mdiv 2_ ** B,
                    A >> B => C for A >= 0_ holds: C >= 0_
                    A >> B => C for A &lt; 0_ holds: C &lt; 0_
                    A >> B => 0_ for A >= 0_ and B > ord(log2(A)),
                    A >> B => -1_ for A &lt; 0_ and B > ord(log2(-A)),
                    A >> 0 => A,
                    A >> -1 => EXCEPTION NUMERIC_ERROR )
      <font color=red>bigInteger</font> conv A   Conversion of <a class="type" href="#types_integer">integer</a> to <font color=red>bigInteger</font>
                  ( Type of argument A: <a class="type" href="#types_integer">integer</a>,
                    <font color=red>bigInteger</font> conv 1 => 1_ )
      <font color=red>bigInteger</font> parse A   Conversion of <a class="type" href="#types_string">string</a> to <a class="type" href="#types_integer">integer</a>
                  ( Type of argument A: <a class="type" href="#types_string">string</a>,
                    <font color=red>bigInteger</font> parse <span class="stri">"123"</span> => 123_,
                    <font color=red>bigInteger</font> parse <span class="stri">"-123"</span> => -123_,
                    <font color=red>bigInteger</font> parse <span class="stri">"+5"</span> => 5_,
                    <font color=red>bigInteger</font> parse <span class="stri">" 1"</span> => EXCEPTION RANGE_ERROR,
                    <font color=red>bigInteger</font> parse <span class="stri">"10 "</span> => EXCEPTION RANGE_ERROR,
                    <font color=red>bigInteger</font> parse <span class="stri">"ASDF"</span> => EXCEPTION RANGE_ERROR )
    Relations:
      =, &lt;>, &lt;, &lt;=, >, >=
    Functions:
      ord(A)    Ordinal number
                  ( Type of result: <a class="type" href="#types_integer">integer</a> )
                    ord(99999999999999999999_) => EXCEPTION RANGE_ERROR )
      succ(A)   Successor
                  ( succ(A) => A+1_ )
      pred(A)   Predecessor
                  ( pred(A) => A-1_ )
      abs(A)    Absolute value
      odd(A)    Odd value
                  ( Type of result: <a class="type" href="#types_boolean">boolean</a> )
      str(A)    Conversion to <a class="type" href="#types_string">string</a>
                  ( Type of result: <a class="type" href="#types_string">string</a> )
      sqrt(A)   Integer square root
                  ( sqrt(A) is okay for A >= 0_
                    sqrt(A) => trunc(sqrt(flt(A))),
                    sqrt(-1_) => EXCEPTION NUMERIC_ERROR )
      modInverse(A, B) Compute the modular multiplicative inverse of A modulo B
      log2(A)   Truncated base 2 logarithm
                  ( log2(A) returns the position of the
                    highest bit set. It is defined for A >= 0
                    log2(2_ ** A) = A for A >= 0,
                    log2(0_) => -1_,
                    log2(1_) => 0_,
                    log2(2_) => 1_,
                    log2(-1) => EXCEPTION NUMERIC_ERROR )
      gcd(A, B) Greatest common divisor of A and B.
                  ( gcd(A, B) = gcd(B, A),
                    gcd(A, B) = gcd(-A, B),
                    gcd(A, 0) = abs(A) )
      bitLength(A) Number of bits in the minimal two's-complement
                   representation, excluding the sign bit.
                  ( Type of result: <a class="type" href="#types_integer">integer</a>,
                    bitLength(A) => ord(succ(log2(A))) for A >= 0_,
                    bitLength(A) => ord(succ(log2(pred(-A)))) for A &lt; 0_ )
      lowestSetBit(A) Index of the lowest-order one bit
                      For A &lt;> 0_ this is equal to the number of
                      lowest-order zero bits.
                  ( Type of result: <a class="type" href="#types_integer">integer</a>,
                    A >> B &lt;&lt; B = A for A &lt;> 0_ and B = lowestSetBit(A),
                    lowestSetBit(0_) => -1,
                    lowestSetBit(1_) => 0,
                    lowestSetBit(2_) => 1 )
      rand(A, B) Random number in the range [A, B]
                 The random values are uniform distributed.
                  ( rand(A, B) returns a random number such that
                    A &lt;= rand(A, B) and rand(A, B) &lt;= B holds.
                    rand(A, A) => A,
                    rand(1_, 0_) => EXCEPTION RANGE_ERROR )
      compare(A, B) Compare function
                  ( Type of result: <a class="type" href="#types_integer">integer</a>,
                    compare(1_, 2_) => -1,
                    compare(5_, 5_) => 0,
                    compare(8_, 7_) => 1 )
      hashCode(A) Hash function
                  ( Type of result: <a class="type" href="#types_integer">integer</a> )
    Statements:
      A +:= B   Increment A by B
                  ( A +:= B => A := A + B )
      A -:= B   Decrement A by B
                  ( A -:= B => A := A - B )
      A *:= B   Multiplying copy
                  ( A *:= B => A := A * B )
      A &lt;&lt;:= B  Shift left copy
                  ( A &lt;&lt;:= B => A := A &lt;&lt; B )
      A >>:= B  Shift right copy
                  ( A >>:= B => A := A >> B )
      incr(A)   Increment with 1
                  ( incr(A) => A +:= 1_ )
      decr(A)   Decrement with 1
                  ( decr(A) => A -:= 1_ )
</pre><p>
  For the operations <tt>'div'</tt> and <tt>'rem'</tt> holds for all A:</p><pre>
    (A div B) * B + A rem B = A           when B &lt;> 0_
    -A div B = -(A div B)                 when B &lt;> 0_
    -A rem B = -(A rem B)                 when B &lt;> 0_
    A rem B >= 0_ and A rem B &lt; abs(B)    when B &lt;> 0_ and A >= 0_
    A rem B &lt;= 0_ and A rem B > -abs(B)   when B &lt;> 0_ and A &lt;= 0_
</pre><p>
  For the operations <tt>'mdiv'</tt> and <tt>'mod'</tt> holds for all A:</p><pre>
    (A mdiv B) * B + A mod B = A          when B &lt;> 0_
    -A mdiv B = A mdiv -B                 when B &lt;> 0_
    -A mod -B = -(A mod B)                when B &lt;> 0_
    A mod B >= 0_ and A mod B &lt; B         when B > 0_
    A mod B &lt;= 0_ and A mod B > B         when B &lt; 0_
</pre><p>
  For the operation <tt>'mdiv'</tt> holds:</p><pre>
    A mdiv B = A div B - 1_           when A and B have different
                                      signs and A rem B &lt;> 0_ holds.
    A mdiv B = A div B                when A and B have the same
                                      sign or A rem B = 0_ holds.
    A mdiv B = (A - 1_) div B - 1_    when A > 0_ and B &lt; 0_ holds.
    A mdiv B = (A + 1_) div B - 1_    when A &lt; 0_ and B > 0_ holds.
    A mdiv 2_ ** B = A >> B           when B >= 0 holds
</pre><p>
  For the operation <tt>'mod'</tt> holds:</p><pre>
    A mod B = A rem B + B      when A and B have different
                               signs and A rem B &lt;> 0_ holds.
    A mod B = A rem B          when A and B have the same
                               sign or A rem B = 0_ holds.
</pre><p>

  Table for the behavior of <tt>'div'</tt>, <tt>'rem'</tt>, <tt>'mdiv'</tt> and <tt>'mod'</tt>:
</p><pre>
     A    B   A div B   A rem B   A mdiv B  A mod B

     5_   3_     1_        2_        1_        2_
     4_   3_     1_        1_        1_        1_
     3_   3_     1_        0_        1_        0_
     2_   3_     0_        2_        0_        2_
     1_   3_     0_        1_        0_        1_
     0_   3_     0_        0_        0_        0_
    -1_   3_     0_       -1_       -1_        2_
    -2_   3_     0_       -2_       -1_        1_
    -3_   3_    -1_        0_       -1_        0_
    -4_   3_    -1_       -1_       -2_        2_
    -5_   3_    -1_       -2_       -2_        1_

     A    B   A div B   A rem B   A mdiv B  A mod B

     5_  -3_    -1_        2_       -2_       -1_
     4_  -3_    -1_        1_       -2_       -2_
     3_  -3_    -1_        0_       -1_        0_
     2_  -3_     0_        2_       -1_       -1_
     1_  -3_     0_        1_       -1_       -2_
     0_  -3_     0_        0_        0_        0_
    -1_  -3_     0_       -1_        0_       -1_
    -2_  -3_     0_       -2_        0_       -2_
    -3_  -3_     1_        0_        1_        0_
    -4_  -3_     1_       -1_        1_       -1_
    -5_  -3_     1_       -2_        1_       -2_
</pre><p>

  For the 'sqrt' function holds (when A >= 0_):</p><pre>
    sqrt(A) * sqrt(A) &lt;= A and
    (sqrt(A) + 1_) * (sqrt(A) + 1_) > A
</pre><p></p>

<a name="types_rational"><h3>5.4 rational</h3></a>
<p>
    The type <tt><!-- ' -->rational<!-- ' --></tt> consists of rational numbers
  represented with an <tt><!-- ' --><a class="type" href="#types_integer">integer</a><!-- ' --></tt> numerator and an <tt><!-- ' --><a class="type" href="#types_integer">integer</a><!-- ' --></tt>
  denominator. The values of the type <tt><!-- ' -->rational<!-- ' --></tt> are
  finite and periodical decimal numbers. Rational literals
  do not exist. The result of a <tt><!-- ' -->rational<!-- ' --></tt> operation
  is undefined when it overflows. The <tt><!-- ' -->rational<!-- ' --></tt> functions
  are defined in the library <span class="stri">"rational.s7i"</span>.
</p><pre>
    Elements:
      <span class="keywd">var</span> <a class="type" href="#types_integer">integer</a>: numerator <span class="keywd">is</span> 0;
      <span class="keywd">var</span> <a class="type" href="#types_integer">integer</a>: denominator <span class="keywd">is</span> 1;
    Prefix operators:
      +         Identity
      -         Change sign
    Infix operators:
      +         Addition
      -         Subtraction
      *         Multiplication
      /         Division
      /         Create <font color=red>rational</font> from numerator and denominator
                  ( Type of left operand: <a class="type" href="#types_integer">integer</a>,
                    Type of right operand: <a class="type" href="#types_integer">integer</a> )
      **        Power
                  ( <font color=red>rational</font> ** <a class="type" href="#types_integer">integer</a> )
      <font color=red>rational</font> conv A   Conversion of <a class="type" href="#types_integer">integer</a> to <font color=red>rational</font>
                  ( Type of argument A: <a class="type" href="#types_integer">integer</a>,
                    <font color=red>rational</font> conv 1 => 1 / 1 )
      <font color=red>rational</font> parse A   Conversion of <a class="type" href="#types_string">string</a> to <font color=red>rational</font>
                  ( Type of argument A: <a class="type" href="#types_string">string</a> )
    Relations:
      =, &lt;>, &lt;, &lt;=, >, >=
    Functions:
      abs(A)    Absolute value
      rat(A)    Conversion of <a class="type" href="#types_integer">integer</a> to <font color=red>rational</font>
                  ( Type of argument A: <a class="type" href="#types_integer">integer</a>,
                    rat(1) => 1 / 1 )
      floor(A)  Truncation towards negative infinity
                  ( Type of result: <a class="type" href="#types_integer">integer</a>,
                    floor( 1.8)=> 1, floor( 1.0)=> 1,
                    floor(-1.0)=>-1, floor(-1.8)=>-2 )
      ceil(A)   Rounding up towards positive infinity
                  ( Type of result: <a class="type" href="#types_integer">integer</a>,
                    ceil( 1.2)=> 2, ceil( 1.0)=> 1,
                    ceil(-1.0)=>-1, ceil(-1.2)=>-1 )
      trunc(A)  Truncation towards zero
                  ( Type of result: <a class="type" href="#types_integer">integer</a>,
                    trunc( 1.8)=> 1, trunc( 1.0)=> 1,
                    trunc(-1.0)=>-1, trunc(-1.8)=>-1 )
      round(A)  Round towards zero
                  ( Type of result: <a class="type" href="#types_integer">integer</a>,
                    round(0.5)=>1, round(-0.5)=>-1,
                    round(0.4)=>0, round(-0.4)=>0 )
      str(A)    Conversion to <a class="type" href="#types_string">string</a>
                  ( Type of result: <a class="type" href="#types_string">string</a> )
      compare(A, B) Compare function
                  ( Type of result: <a class="type" href="#types_integer">integer</a>,
                    compare(1.9, 2.0) => -1,
                    compare(5.2, 5.2) => 0,
                    compare(8.0, 7.9) => 1 )
      hashCode(A) Hash function
                  ( Type of result: <a class="type" href="#types_integer">integer</a> )
    Statements:
      A +:= B   Increment A by B
                  ( A +:= B => A := A + B )
      A -:= B   Decrement A by B
                  ( A -:= B => A := A - B )
      A *:= B   Multiplying copy
                  ( A *:= B => A := A * B )
      A /:= B   Dividing copy
                  ( A /:= B => A := A / B )
</pre><p>
  All calculations with <tt><!-- ' -->rational<!-- ' --></tt> numbers are done exact.
  (Without any rounding)
</p><p></p>

<a name="types_bigRational"><h3>5.5 bigRational</h3></a>
<p>
    The type <tt><!-- ' -->bigRational<!-- ' --></tt> consists of rational numbers
  represented with an <tt><!-- ' --><a class="type" href="#types_bigInteger">bigInteger</a><!-- ' --></tt> numerator and an
  <tt><!-- ' --><a class="type" href="#types_bigInteger">bigInteger</a><!-- ' --></tt> denominator. The values of the type
  <tt><!-- ' -->bigRational<!-- ' --></tt> are finite and periodical decimal numbers.
  BigRational literals do not exist. Although <tt><!-- ' -->bigRational<!-- ' --></tt>
  operations cannot overflow, it can happen that there
  is not enough memory to represent a <tt><!-- ' -->bigRational<!-- ' --></tt> value.
  In this case the exception <tt>'MEMORY_ERROR'</tt> is raised.
  The <tt><!-- ' -->bigRational<!-- ' --></tt> functions are defined in the library
  <span class="stri">"bigrat.s7i"</span>.
</p><pre>
    Elements:
      <span class="keywd">var</span> <font color=red>bigInteger</font>: numerator <span class="keywd">is</span> 0_;
      <span class="keywd">var</span> <font color=red>bigInteger</font>: denominator <span class="keywd">is</span> 1_;
    Prefix operators:
      +         Identity
      -         Change sign
    Infix operators:
      +         Addition
      -         Subtraction
      *         Multiplication
      /         Division
      /         Create <font color=red>bigRational</font> from numerator and denominator
                  ( Type of left argument: <font color=red>bigInteger</font>,
                    Type of right argument: <font color=red>bigInteger</font> )
      **        Power
                  ( <font color=red>bigRational</font> ** <a class="type" href="#types_integer">integer</a> )
      <font color=red>bigRational</font> conv A   Conversion of <a class="type" href="#types_integer">integer</a> to <font color=red>bigRational</font>
                  ( Type of argument A: <a class="type" href="#types_integer">integer</a>,
                    <font color=red>bigRational</font> conv 1 => 1_ / 1_ )
      <font color=red>bigRational</font> conv A   Conversion of <font color=red>bigInteger</font> to <font color=red>bigRational</font>
                  ( Type of argument A: <font color=red>bigInteger</font>,
                    <font color=red>bigRational</font> conv 1_ => 1_ / 1_ )
      <font color=red>bigRational</font> parse A   Conversion of <a class="type" href="#types_string">string</a> to <font color=red>bigRational</font>
                  ( Type of argument A: <a class="type" href="#types_string">string</a> )
    Relations:
      <a class="op" href="#..s/libraries/bigrat_(in_bigRational)=(in_bigRational)">=</a>, &lt;>, &lt;, &lt;=, >, >=
    Functions:
      abs(A)    Absolute value
      rat(A)    Conversion of <font color=red>bigInteger</font> to <font color=red>bigRational</font>
                  ( Type of argument A: <font color=red>bigInteger</font>,
                    rat(1_) => 1_ / 1_ )
      floor(A)  Truncation towards negative infinity
                  ( Type of result: <font color=red>bigInteger</font>,
                    floor( 1.8)=> 1, floor( 1.0)=> 1,
                    floor(-1.0)=>-1, floor(-1.8)=>-2 )
      ceil(A)   Rounding up towards positive infinity
                  ( Type of result: <font color=red>bigInteger</font>,
                    ceil( 1.2)=> 2, ceil( 1.0)=> 1,
                    ceil(-1.0)=>-1, ceil(-1.2)=>-1 )
      trunc(A)  Truncation towards zero
                  ( Type of result: <font color=red>bigInteger</font>,
                    trunc( 1.8)=> 1, trunc( 1.0)=> 1,
                    trunc(-1.0)=>-1, trunc(-1.8)=>-1 )
      round(A)  Round towards zero
                  ( Type of result: <font color=red>bigInteger</font>,
                    round(0.5)=>1, round(-0.5)=>-1,
                    round(0.4)=>0, round(-0.4)=>0 )
      str(A)    Conversion to <a class="type" href="#types_string">string</a>
                  ( Type of result: <a class="type" href="#types_string">string</a> )
      compare(A, B) Compare function
                  ( Type of result: <a class="type" href="#types_integer">integer</a>,
                    compare(1.9, 2.0) => -1,
                    compare(5.2, 5.2) => 0,
                    compare(8.0, 7.9) => 1 )
      hashCode(A) Hash function
                  ( Type of result: <a class="type" href="#types_integer">integer</a> )
    Statements:
      A +:= B   Increment A by B
                  ( A +:= B => A := A + B )
      A -:= B   Decrement A by B
                  ( A -:= B => A := A - B )
      A *:= B   Multiplying copy
                  ( A *:= B => A := A * B )
      A /:= B   Dividing copy
                  ( A /:= B => A := A / B )
</pre><p>
  All calculations with <tt><!-- ' -->bigRational<!-- ' --></tt> numbers are done exact.
  (Without any rounding)
</p>

<a name="types_float"><h3>5.6 float</h3></a>
<p>
    The type <tt><!-- ' -->float<!-- ' --></tt> consists of single precision floating point
  numbers. Float literals are base 10 and contain a decimal point.
  There must be at least one digit before and after the decimal point.
  An exponent part, which is introduced with E or e, is optional.
  The exponent can be signed, but the mantissa is not. A literal does
  not have a sign, + or - are unary operations. Examples of <tt><!-- ' -->float<!-- ' --></tt>
  literals are:
</p><pre>
  3.14159265358979
  1.0E-12
  0.1234
</pre><p>
  The function <tt><!-- ' -->str<!-- ' --></tt> and the operators <tt><!-- ' -->digits<!-- ' --></tt> and <tt><!-- ' -->parse<!-- ' --></tt>
  create and accept float literals with sign. Basic <tt><!-- ' -->float<!-- ' --></tt>
  functions are defined in the library <span class="stri">"float.s7i"</span>.
  Trigonometric- and other mathematical functions are defined
  in the library <span class="stri">"math.s7i"</span>.
</p><pre>
    Constants:
      Infinity  Positive infinity
      NaN       Not-a-Number
    Prefix operators:
      +         Identity
      -         Change sign
    Infix operators:
      +         Addition
      -         Subtraction
      *         Multiplication
      /         Division
                  ( A / 0.0 =>  Infinity for A > 0.0,
                    A / 0.0 => -Infinity for A &lt; 0.0,
                    0.0 / 0.0 => NaN )
      **        Power
                  ( A ** B is okay for A > 0.0,
                    A ** B is okay for A &lt; 0.0 and B is integer,
                    A ** B => NaN for A &lt; 0.0 and B is not integer,
                    A ** 0.0 => 1.0,
                    0.0 ** B => 0.0 for B > 0.0,
                    0.0 ** 0.0 => 1.0,
                    0.0 ** B => Infinity for B &lt; 0.0 )
      **        Power
                  ( Type of right operand: <a class="type" href="#types_integer">integer</a>
                    A ** B is okay for A > 0.0,
                    A ** B is okay for A &lt; 0.0,
                    A ** 0 => 1.0,
                    0.0 ** B => 0.0 for B > 0,
                    0.0 ** 0 => 1.0,
                    0.0 ** B => Infinity for B &lt; 0 )
      <a class="type" href="#types_float">float</a> conv A   Conversion of <a class="type" href="#types_integer">integer</a> to <a class="type" href="#types_float">float</a>
                  ( Type of argument A: <a class="type" href="#types_integer">integer</a>,
                    <a class="type" href="#types_float">float</a> conv 1 => 1.0 )
      digits    Conversion to <a class="type" href="#types_string">string</a> with specified precision
                  ( Type of right operand: <a class="type" href="#types_integer">integer</a>,
                    Type of result: <a class="type" href="#types_string">string</a>,
                    0.012345 digits 4 => <span class="stri">"0.0123"</span>,
                    1.2468 digits 2 => <span class="stri">"1.25"</span>,
                    0.125 digits 2 => <span class="stri">"0.12"</span>,
                    0.375 digits 2 => <span class="stri">"0.38"</span>,
                    Infinity digits A => <span class="stri">"Infinity"</span>,
                    -Infinity digits A => <span class="stri">"-Infinity"</span>,
                    NaN digits A => <span class="stri">"NaN"</span> )
      <a class="type" href="#types_float">float</a> parse A   Conversion of <a class="type" href="#types_string">string</a> to <a class="type" href="#types_float">float</a>
                  ( Type of argument A: <a class="type" href="#types_string">string</a> )
    Relations:
      =, &lt;>, &lt;, &lt;=, >, >=
    Functions:
      abs(A)    Absolute value
      flt(A)    Conversion of <a class="type" href="#types_integer">integer</a> to <a class="type" href="#types_float">float</a>
                  ( Type of argument A: <a class="type" href="#types_integer">integer</a>,
                    flt(1) => 1.0 )
      floor(A)  Truncation towards negative infinity
                  ( floor( 1.8)=> 1.0, floor( 1.0)=> 1.0,
                    floor(-1.0)=>-1.0, floor(-1.2)=>-2.0,
                    floor( 0.9)=> 0.0, floor(-0.1)=>-1.0 )
      ceil(A)   Rounding up towards positive infinity
                  ( ceil( 1.2)=> 2.0, ceil( 1.0)=> 1.0,
                    ceil(-1.8)=>-1.0, ceil(-1.0)=>-1.0,
                    ceil( 0.1)=> 1.0, ceil(-0.9)=> 0.0 )
      trunc(A)  Truncation towards zero
                  ( Type of result: <a class="type" href="#types_integer">integer</a>,
                    trunc( 1.8)=> 1, trunc( 1.0)=> 1,
                    trunc(-1.8)=>-1, trunc(-1.0)=>-1,
                    trunc( 0.9)=> 0, trunc(-0.9)=> 0 )
      round(A)  Round towards zero
                  ( Type of result: <a class="type" href="#types_integer">integer</a>,
                    round(1.5)=>2, round(-1.5)=>-2,
                    round(0.5)=>1, round(-0.5)=>-1,
                    round(0.4)=>0, round(-0.4)=>0 )
      str(A)    Conversion to <a class="type" href="#types_string">string</a>
                  ( Type of result: <a class="type" href="#types_string">string</a>,
                    str(Infinity) => <span class="stri">"Infinity"</span>,
                    str(-Infinity) => <span class="stri">"-Infinity"</span>,
                    str(NaN) => <span class="stri">"NaN"</span> )
      isNaN(A)  Check if A is Not-a-Number
      sin(A)    Sine
      cos(A)    Cosine
      tan(A)    Tangent
      exp(A)    Exponential function
      log(A)    Natural logarithm
                  ( log(A) is okay for A > 0.0,
                    log(0.0)  => -Infinity,
                    log(-1.0) =>  NaN )
      log10(A)  Base 10 logarithm
                  ( log10(A) is okay for A > 0.0,
                    log10(0.0)  => -Infinity,
                    log10(-1.0) =>  NaN )
      sqrt(A)   Square root
                  ( sqrt(A) is okay for A >= 0.0,
                    sqrt(-1.0) => NaN )
      asin(A)   Inverse sine
                  ( asin(A) is okay for A >= -1.0 and A &lt;= 1.0,
                    asin(2.0) => NaN )
      acos(A)   Inverse cosine
                  ( acos(A) is okay for A >= -1.0 and A &lt;= 1.0,
                    acos(2.0) => NaN )
      atan(A)   Inverse tangent
      atan2(A, B) Inverse tangent of A / B
      sinh(A)   Hyperbolic sine
      cosh(A)   Hyperbolic cosine
      tanh(A)   Hyperbolic tangent
      rand(A, B) Random number in the range [A, B]
                 The random values are uniform distributed.
                  ( rand(A, B) returns a random number such that
                    A &lt;= rand(A, B) and rand(A, B) &lt;= B holds.
                    rand(A, A) => A,
                    rand(1.0, 0.0) => EXCEPTION RANGE_ERROR )
      compare(A, B) Compare function
                  ( Type of result: <a class="type" href="#types_integer">integer</a>,
                    compare(1.9, 2.1) => -1,
                    compare(5.3, 5.3) => 0,
                    compare(7.8, 7.7) => 1 )
      hashCode(A) Hash function
                  ( Type of result: <a class="type" href="#types_integer">integer</a> )
    Statements:
      A +:= B   Increment A by B
                  ( A +:= B => A := A + B )
      A -:= B   Decrement A by B
                  ( A -:= B => A := A - B )
      A *:= B   Multiplying copy
                  ( A *:= B => A := A * B )
      A /:= B   Dividing copy
                  ( A /:= B => A := A / B )
</pre><p></p>

<a name="types_complex"><h3>5.7 complex</h3></a>
<p>
    The type <tt><!-- ' -->complex<!-- ' --></tt> consists of complex numbers represented
  with an <tt><!-- ' --><a class="type" href="#types_float">float</a><!-- ' --></tt> real part and an <tt><!-- ' --><a class="type" href="#types_float">float</a><!-- ' --></tt> imaginary part.
  Complex literals do not exist. The <tt><!-- ' -->complex<!-- ' --></tt> functions are
  defined in the library <span class="stri">"complex.s7i"</span>.
</p><pre>
    Elements:
      <span class="keywd">var</span> <a class="type" href="#types_float">float</a>: re <span class="keywd">is</span> 0.0;
      <span class="keywd">var</span> <a class="type" href="#types_float">float</a>: im <span class="keywd">is</span> 0.0;
    Prefix operators:
      +         Identity
      -         Change sign
      conj      Complex conjugate
    Infix operators:
      +         Addition
      -         Subtraction
      *         Multiplication
      /         Division
                  ( A / complex(0.0) => complex(NaN, NaN) )
      **        Power
                  ( Type of right operand: <a class="type" href="#types_integer">integer</a>
                    A ** B is okay for A > complex(0.0),
                    A ** B is okay for A &lt; complex(0.0),
                    A ** 0 => complex(1.0),
                    complex(0.0) ** B => complex(0.0) for B > 0,
                    complex(0.0) ** 0 => complex(1.0),
                    complex(0.0) ** B => complex(Infinity, NaN) for B &lt; 0 )
      <font color=red>complex</font> conv A   Conversion of <a class="type" href="#types_integer">integer</a> to <font color=red>complex</font>
                  ( Type of argument A: <a class="type" href="#types_integer">integer</a>,
                    <font color=red>complex</font> conv A => complex(flt(A)) )
      <font color=red>complex</font> conv A   Conversion of <a class="type" href="#types_float">float</a> to <font color=red>complex</font>
                  ( Type of argument A: <a class="type" href="#types_float">float</a>,
                    <font color=red>complex</font> conv A => complex(A) )
      digits    Conversion to <a class="type" href="#types_string">string</a> with specified precision
                  ( Type of right operand: <a class="type" href="#types_integer">integer</a>,
                    Type of result: <a class="type" href="#types_string">string</a>,
                    complex(3.1415) digits 2 => <span class="stri">"3.14+0.00i"</span> )
      <font color=red>complex</font> parse A   Conversion of <a class="type" href="#types_string">string</a> to <font color=red>complex</font>
                  ( Type of argument A: <a class="type" href="#types_string">string</a> )
    Relations:
      =, &lt;>
    Functions:
      abs(A)    Absolute value
                  ( Type of result: <a class="type" href="#types_float">float</a> )
      sqrAbs(A) Square of absolute value
                  ( Type of result: <a class="type" href="#types_float">float</a> )
      arg(A)    Argument (=angle of the polar form of A)
                  ( Type of result: <a class="type" href="#types_float">float</a> )
      complex(A, B)  Return a <font color=red>complex</font> number from its real and imaginary part
                  ( Type of argument A: <a class="type" href="#types_float">float</a>,
                    Type of argument B: <a class="type" href="#types_float">float</a> )
      complex(A)  Return a <font color=red>complex</font> number from its real part
                  ( Type of argument A: <a class="type" href="#types_float">float</a> )
      polar(A, B)  Return a <font color=red>complex</font> number from polar coordinates
                  ( Type of argument A: <a class="type" href="#types_float">float</a>,
                    Type of argument B: <a class="type" href="#types_float">float</a> )
      str(A)    Conversion to <a class="type" href="#types_string">string</a>
                  ( Type of result: <a class="type" href="#types_string">string</a>,
                    str(complex(1.125)) => <span class="stri">"1.125+0.0i"</span> )
      compare(A, B) Compare function
                  ( Type of result: <a class="type" href="#types_integer">integer</a> )
      hashCode(A) Hash function
                  ( Type of result: <a class="type" href="#types_integer">integer</a> )
    Statements:
      A +:= B   Increment A by B
                  ( A +:= B => A := A + B )
      A -:= B   Decrement A by B
                  ( A -:= B => A := A - B )
      A *:= B   Multiplying copy
                  ( A *:= B => A := A * B )
      A /:= B   Dividing copy
                  ( A /:= B => A := A / B )
</pre><p></p>

<a name="types_char"><h3>5.8 char</h3></a>
<p>
    The type <tt><!-- ' -->char<!-- ' --></tt> describes Unicode characters encoded
  with UTF-32. In the source file a character literal is
  written as UTF-8 encoded Unicode character enclosed in
  single quotes. In order to represent non-printable
  characters and certain printable characters the following
  escape sequences may be used.
</p><pre>
    audible alert    BEL      \a    backslash    (\)   \\
    backspace        BS       \b    apostrophe   (')   \'   
    escape           ESC      \e    double quote (")   \"
    formfeed         FF       \f
    newline          NL (LF)  \n    control-A          \A
    carriage return  CR       \r      ...
    horizontal tab   HT       \t    control-Z          \Z
    vertical tab     VT       \v
</pre><p>
  Additionally the following escape sequence can be used:
</p><ul>
    <li><!-- -  -->Two backslashes with an integer literal between them are
      interpreted as character with the specified ordinal number.
      Note that the integer literal is interpreted decimal unless
      it is written as based integer.</li>
</ul><p>
  Examples of character literals are:
</p><pre>
    <span class="stri">'a'</span>   <span class="stri">' '</span>   <span class="stri">'\n'</span>   <span class="stri">'!'</span>   <span class="stri">'\\'</span>   <span class="stri">'2'</span>   <span class="stri">'"'</span>   <span class="stri">'\"'</span>   <span class="stri">'\''</span>   <span class="stri">'\8\'</span>
</pre><p>
  To use characters beyond ASCII (which is a subset of Unicode)
  in the source file make sure that the editor uses UTF-8
  encoded characters. The <tt><!-- ' -->char<!-- ' --></tt> functions are defined in
  the library <span class="stri">"char.s7i"</span>.
</p><pre>
    Infix operators:
      <a class="type" href="#types_char">char</a> conv A   Conversion of <a class="type" href="#types_integer">integer</a> to <a class="type" href="#types_char">char</a>
                  ( Type of argument A: <a class="type" href="#types_integer">integer</a>,
                    <a class="type" href="#types_char">char</a> conv 65 => 'A' )
      <a class="type" href="#types_char">char</a> parse A   Conversion of <a class="type" href="#types_string">string</a> to <a class="type" href="#types_char">char</a>
                  ( Type of argument A: <a class="type" href="#types_string">string</a> )
    Relations:
      =, &lt;>, &lt;, &lt;=, >, >=
    Functions:
      ord(A)    Ordinal number
                  ( Type of result: <a class="type" href="#types_integer">integer</a> )
      chr(A)    Conversion of <a class="type" href="#types_integer">integer</a> to <a class="type" href="#types_char">char</a>
                  ( Type of argument: <a class="type" href="#types_integer">integer</a> )
      succ(A)   Successor
                  ( succ(A)=>chr(succ(ord(A))) )
      pred(A)   Predecessor
                  ( pred(A)=>chr(pred(ord(A))) )
      str(A)    Conversion to <a class="type" href="#types_string">string</a>
                  ( Type of result: <a class="type" href="#types_string">string</a>,
                    str(<span class="stri">'A'</span>) => <span class="stri">"A"</span> )
      literal(A) Conversion to a literal
                  ( Type of result: <a class="type" href="#types_string">string</a>,
                    literal(<span class="stri">'A'</span>) => <span class="stri">"'A'"</span> )
      upper(A)  Conversion to upper case character
                  ( upper(<span class="stri">'A'</span>) => <span class="stri">'A'</span> )
                  ( upper(<span class="stri">'z'</span>) => <span class="stri">'Z'</span> )
      lower(A)  Conversion to lower case character
                  ( lower(<span class="stri">'A'</span>) => <span class="stri">'a'</span> )
                  ( lower(<span class="stri">'z'</span>) => <span class="stri">'z'</span> )
      rand(A, B) Random character in the range [A, B]
                 The random values are uniform distributed.
                  ( rand(A, B) returns a random character such that
                    A &lt;= rand(A, B) and rand(A, B) &lt;= B holds.
                    rand(A, A) => A,
                    rand('B', <span class="stri">'A'</span>) => EXCEPTION RANGE_ERROR )
      compare(A, B) Compare function
                  ( Type of result: <a class="type" href="#types_integer">integer</a>,
                    compare(<span class="stri">'A'</span>, <span class="stri">'B'</span>) => -1,
                    compare(<span class="stri">'A'</span>, <span class="stri">'A'</span>) => 0,
                    compare(<span class="stri">'B'</span>, <span class="stri">'A'</span>) => 1 )
      hashCode(A) Hash function
                  ( Type of result: <a class="type" href="#types_integer">integer</a> )
    Statements:
      incr(A)   Increment
                  ( incr(A) => A := succ(A) )
      decr(A)   Decrement
                  ( decr(A) => A := pred(A) )
</pre><p></p>

<a name="types_string"><h3>5.9 string</h3></a>
<p>
    The type <tt><!-- ' --><a class="type" href="#types_string">string</a><!-- ' --></tt> describes sequences of Unicode characters
  (including the empty string). The characters in the <tt><!-- ' --><a class="type" href="#types_string">string</a><!-- ' --></tt>
  use the UTF-32 encoding. Strings are not <tt><span class="stri">'\0\'</span></tt> terminated
  and therefore can also contain binary data. Although <tt><!-- ' --><a class="type" href="#types_string">string</a><!-- ' --></tt>s
  are allowed to grow very big, it can happen that there is not
  enough memory to represent a <tt><!-- ' --><a class="type" href="#types_string">string</a><!-- ' --></tt> value. In this case the
  exception <tt>'MEMORY_ERROR'</tt> is raised. In the source file a string
  literal is a sequence of UTF-8 encoded Unicode characters
  surrounded by double quotes.
</p><p>
  To represent control characters and certain other characters
  in strings the same escape sequences as for character literals
  may be used. E.g.: Quotation characters (") inside strings can
  be represented by preceding them with a backslash ( \" ).
  Additionally there is the following possibility:
</p><ul>
    <li><!-- -  -->Two backslashes with a sequence of blanks, horizontal tabs,
      carriage returns and new lines between them are completely
      ignored. The ignored characters are not part of the string.
      This can be used to continue a string in the following line.
      Note that in this case the leading spaces in the new line
      are not part of the string. Although this possibility exists
      also for character literals it is mentioned here, since it
      makes more sense to use it with string literals</li>
</ul><p>
  Examples of string literals are:
</p><pre>
    <span class="stri">""</span>   <span class="stri">" "</span>   <span class="stri">"\""</span>   <span class="stri">"'"</span>   <span class="stri">"String"</span>   <span class="stri">"CAN\"T !"</span>
</pre><p>
  To use characters beyond ASCII (which is a subset of Unicode)
  in the source file make sure that the editor uses UTF-8
  encoded characters. The <tt><!-- ' --><a class="type" href="#types_string">string</a><!-- ' --></tt> functions are defined in
  the library <span class="stri">"string.s7i"</span>.
</p><pre>
    Infix operators:
      &amp;         String concatenation
                  ( <span class="stri">"All "</span> &amp; <span class="stri">"OK"</span> => <span class="stri">"All OK"</span> )
      &lt;&amp;        String concatenation with weak priority
                Overloaded for various types with <!-- ' -->enable_output<!-- ' --> or <!-- ' -->enable_io<!-- ' -->
                  ( write(<span class="stri">"i="</span> &lt;&amp; i digits 2 lpad 6 &lt;&amp; <span class="stri">" $"</span>); )
      <span class="op">mult</span>      String multiplication
                  ( Type of right operand: <a class="type" href="#types_integer">integer</a>,
                    <span class="stri">"LA"</span> <span class="op">mult</span> 3 => <span class="stri">"LALALA"</span>,
                    <span class="stri">"WORD"</span> <span class="op">mult</span> 0 => <span class="stri">""</span>,
                    <span class="stri">"ANY"</span> <span class="op">mult</span> -1 => EXCEPTION RANGE_ERROR )
      lpad      Left padding with spaces
                  ( Type of right operand: <a class="type" href="#types_integer">integer</a>,
                    <span class="stri">"HELLO"</span> lpad  8 => <span class="stri">"   HELLO"</span>,
                    <span class="stri">"HELLO"</span> lpad  6 => <span class="stri">" HELLO"</span>,
                    <span class="stri">"HELLO"</span> lpad  5 => <span class="stri">"HELLO"</span>,
                    <span class="stri">"HELLO"</span> lpad  4 => <span class="stri">"HELLO"</span>,
                    <span class="stri">"HELLO"</span> lpad  0 => <span class="stri">"HELLO"</span>,
                    <span class="stri">"HELLO"</span> lpad -8 => <span class="stri">"HELLO"</span> )
      lpad0      Left padding with zeroes
                  ( Type of right operand: <a class="type" href="#types_integer">integer</a>,
                    <span class="stri">"12"</span> lpad0  5 => <span class="stri">"00012"</span>,
                    <span class="stri">"12"</span> lpad0  3 => <span class="stri">"012"</span>,
                    <span class="stri">"12"</span> lpad0  2 => <span class="stri">"12"</span>,
                    <span class="stri">"12"</span> lpad0  1 => <span class="stri">"12"</span>,
                    <span class="stri">"12"</span> lpad0  0 => <span class="stri">"12"</span>,
                    <span class="stri">"12"</span> lpad0 -5 => <span class="stri">"12"</span> )
      rpad      Right padding with spaces
                  ( Type of right operand: <a class="type" href="#types_integer">integer</a>,
                    <span class="stri">"HELLO"</span> rpad  8 => <span class="stri">"HELLO   "</span>,
                    <span class="stri">"HELLO"</span> rpad  6 => <span class="stri">"HELLO "</span>,
                    <span class="stri">"HELLO"</span> rpad  5 => <span class="stri">"HELLO"</span>,
                    <span class="stri">"HELLO"</span> rpad  4 => <span class="stri">"HELLO"</span>,
                    <span class="stri">"HELLO"</span> rpad  0 => <span class="stri">"HELLO"</span>,
                    <span class="stri">"HELLO"</span> rpad -8 => <span class="stri">"HELLO"</span> )
      <a class="type" href="#types_string">string</a> parse A   Identity
    Indices:
      [ A ]     Access one character
                  ( Type of argument A: <a class="type" href="#types_integer">integer</a>,
                    Type of result: <a class="type" href="#types_char">char</a>,
                    <span class="stri">"abcde"</span>[1] => <span class="stri">'a'</span>,
                    <span class="stri">"abcde"</span>[5] => <span class="stri">'e'</span>,
                    <span class="stri">"abcde"</span>[0] => EXCEPTION RANGE_ERROR,
                    <span class="stri">"abcde"</span>[6] => EXCEPTION RANGE_ERROR )
      [ A .. B ] Access a substring from position A to B
                  ( Type of arguments A and B: <a class="type" href="#types_integer">integer</a>,
                    <span class="stri">"abcde"</span>[2 .. 4] => <span class="stri">"bcd"</span>,
                    <span class="stri">"abcde"</span>[2 .. 7] => <span class="stri">"bcde"</span>,
                    <span class="stri">"abcde"</span>[4 .. 2] => <span class="stri">""</span>,
                    <span class="stri">"abcde"</span>[6 .. 8] => <span class="stri">""</span>,
                    <span class="stri">"abcde"</span>[-3 .. 4] => <span class="stri">"abcd"</span>,
                    <span class="stri">"abcde"</span>[-3 .. 7] => <span class="stri">"abcde"</span>,
                    <span class="stri">"abcde"</span>[-3 .. 0] => <span class="stri">""</span> )
      [ A <span class="keywd">len</span> B ] Access a substring from position A with length B
                  ( Type of arguments A and B: <a class="type" href="#types_integer">integer</a>,
                    <span class="stri">"abcde"</span>[2 <span class="keywd">len</span> 3] => <span class="stri">"bcd"</span>,
                    <span class="stri">"abcde"</span>[2 <span class="keywd">len</span> 5] => <span class="stri">"bcde"</span>,
                    <span class="stri">"abcde"</span>[-3 <span class="keywd">len</span> 8] => <span class="stri">"abcd"</span>,
                    <span class="stri">"abcde"</span>[-1 <span class="keywd">len</span> 9] => <span class="stri">"abcde"</span> )
      [ A .. ]  Access a substring beginning at position A
                  ( Type of argument A: <a class="type" href="#types_integer">integer</a>,
                    <span class="stri">"abcde"</span>[3 ..] => <span class="stri">"cde"</span>,
                    <span class="stri">"abcde"</span>[6 ..] => <span class="stri">""</span>,
                    <span class="stri">"abcde"</span>[-3 ..] => <span class="stri">"abcde"</span>,
                    <span class="stri">""</span>[1 ..] => <span class="stri">""</span> )
      [ .. A ]  Access a substring ending at position A
                  ( Type of argument A: <a class="type" href="#types_integer">integer</a>,
                    <span class="stri">"abcde"</span>[.. 4] => <span class="stri">"abcd"</span>,
                    <span class="stri">"abcde"</span>[.. 6] => <span class="stri">"abcde"</span>,
                    <span class="stri">"abcde"</span>[.. -3] => <span class="stri">""</span>,
                    <span class="stri">""</span>[.. 5] => <span class="stri">""</span> )
    Relations:
      =, &lt;>, &lt;, &lt;=, >, >=
    Functions:
      length(A) Length of <a class="type" href="#types_string">string</a>
                  ( Type of result: <a class="type" href="#types_integer">integer</a>,
                    length(<span class="stri">""</span>) => 0 )
      pos(A,B)  First position of <a class="type" href="#types_char">char</a> B in <a class="type" href="#types_string">string</a> A
                  ( Type of argument B: <a class="type" href="#types_char">char</a>,
                    Type of result: <a class="type" href="#types_integer">integer</a>,
                    pos(<span class="stri">"ABCABC"</span>,<span class="stri">'B'</span>)=>2,
                    pos(<span class="stri">"XYZ"</span>,<span class="stri">'A'</span>)=>0 )
      pos(A,B)  First position of <a class="type" href="#types_string">string</a> B in <a class="type" href="#types_string">string</a> A
                  ( Type of result: <a class="type" href="#types_integer">integer</a>,
                    pos(<span class="stri">"ABCDE ABCDE"</span>,<span class="stri">"BC"</span>)=>2,
                    pos(<span class="stri">"XYZXYZ"</span>,<span class="stri">"ZYX"</span>)=>0,
                    pos(<span class="stri">"123456789"</span>,<span class="stri">""</span>)=>0 )
      pos(A,B,C) First position of <a class="type" href="#types_char">char</a> B in <a class="type" href="#types_string">string</a> A
                 The search starts at position C of <a class="type" href="#types_string">string</a> A
                  ( Type of argument B: <a class="type" href="#types_char">char</a>,
                    Type of argument C: <a class="type" href="#types_integer">integer</a>,
                    Type of result: <a class="type" href="#types_integer">integer</a>,
                    pos(<span class="stri">"ABCABC"</span>,<span class="stri">'B'</span>, 3)=>5,
                    pos(<span class="stri">"XYZYX"</span>,<span class="stri">'Z'</span>, 4)=>0,
                    pos(<span class="stri">"12345"</span>,<span class="stri">'3'</span>, 7)=>0 )
      pos(A,B,C) First position of <a class="type" href="#types_string">string</a> B in <a class="type" href="#types_string">string</a> A
                 The search starts at position C of <a class="type" href="#types_string">string</a> A
                  ( Type of argument C: <a class="type" href="#types_integer">integer</a>,
                    Type of result: <a class="type" href="#types_integer">integer</a>,
                    pos(<span class="stri">"ABCDE ABCDE"</span>,<span class="stri">"BC"</span>, 3)=>8,
                    pos(<span class="stri">"XYZXYZ"</span>,<span class="stri">"ZXY"</span>, 4)=>0,
                    pos(<span class="stri">"12345"</span>,<span class="stri">"34"</span>, 7)=>0 )
                    pos(<span class="stri">"123456789"</span>,<span class="stri">""</span>, 2)=>0 )
      rpos(A,B) Last position of <a class="type" href="#types_char">char</a> B in <a class="type" href="#types_string">string</a> A
                  ( Type of argument B: <a class="type" href="#types_char">char</a>,
                    Type of result: <a class="type" href="#types_integer">integer</a>,
                    rpos(<span class="stri">"ABCABC"</span>,<span class="stri">'B'</span>)=>5,
                    rpos(<span class="stri">"XYZ"</span>,<span class="stri">'A'</span>)=>0 )
      rpos(A,B) Last position of <a class="type" href="#types_string">string</a> B in <a class="type" href="#types_string">string</a> A
                  ( Type of result: <a class="type" href="#types_integer">integer</a>,
                    rpos(<span class="stri">"ABCDE ABCDE"</span>,<span class="stri">"BC"</span>)=>8,
                    rpos(<span class="stri">"XYZXYZ"</span>,<span class="stri">"ZYX"</span>)=>0,
                    rpos(<span class="stri">"123456789"</span>,<span class="stri">""</span>)=>0 )
      rpos(A,B,C) Last position of <a class="type" href="#types_char">char</a> B in <a class="type" href="#types_string">string</a> A
                 The search starts at position C of <a class="type" href="#types_string">string</a> A
                  ( Type of argument B: <a class="type" href="#types_char">char</a>,
                    Type of argument C: <a class="type" href="#types_integer">integer</a>,
                    Type of result: <a class="type" href="#types_integer">integer</a>,
                    rpos(<span class="stri">"ABCABC"</span>,<span class="stri">'B'</span>, 4)=>2,
                    rpos(<span class="stri">"XYZYX"</span>,<span class="stri">'Z'</span>, 2)=>0,
                    rpos(<span class="stri">"12345"</span>,<span class="stri">'3'</span>, 5)=>3 )
      rpos(A,B,C) Last position of <a class="type" href="#types_char">char</a> B in <a class="type" href="#types_string">string</a> A
                 The search starts at position C of <a class="type" href="#types_string">string</a> A
                  ( Type of argument C: <a class="type" href="#types_integer">integer</a>,
                    Type of result: <a class="type" href="#types_integer">integer</a>,
                    rpos(<span class="stri">"ABCABC"</span>,<span class="stri">"BC"</span>, 4)=>2,
                    rpos(<span class="stri">"XYZYX"</span>,<span class="stri">"ZY"</span>, 2)=>0,
                    rpos(<span class="stri">"12345"</span>,<span class="stri">"34"</span>, 5)=>3 )
      replace(A,B,C) Replace all occurrences of <a class="type" href="#types_string">string</a> B in
                <a class="type" href="#types_string">string</a> A by <a class="type" href="#types_string">string</a> C
                  ( replace(<span class="stri">"old gold"</span>, <span class="stri">"old"</span>, <span class="stri">"one"</span>)=>
                    <span class="stri">"one gone"</span> )
      split(A,B) Split A into strings delimited by B
                  ( Type of argument B: <a class="type" href="#types_char">char</a>,
                    Type of result: <font color=red>array string</font>,
                    split(<span class="stri">""</span>, <span class="stri">':'</span>) => [](<span class="stri">""</span>),
                    split(<span class="stri">":"</span>, <span class="stri">':'</span>) => [](<span class="stri">""</span>, <span class="stri">""</span>),
                    split(<span class="stri">"15:30"</span>, <span class="stri">':'</span>) => [](<span class="stri">"15"</span>, <span class="stri">"30"</span>) )
      split(A,B) Split A into strings delimited by B
                  ( Type of result: <font color=red>array string</font>,
                    split(<span class="stri">""</span>, <span class="stri">""</span>) => [](<span class="stri">""</span>),
                    split(<span class="stri">"ABC"</span>, <span class="stri">""</span>) => [](<span class="stri">"ABC"</span>),
                    split(<span class="stri">""</span>, <span class="stri">"; "</span>) => [](<span class="stri">""</span>),
                    split(<span class="stri">"writeln; readln;"</span>, <span class="stri">"; "</span>) => [](<span class="stri">"writeln"</span>, <span class="stri">"readln;"</span>) )
      join(A,B) Join the elements of A together with B's between them
                  ( Type of argument A: <font color=red>array string</font>,
                    Type of argument B: <a class="type" href="#types_char">char</a>,
                    join([](<span class="stri">"This"</span>, <span class="stri">"is"</span>, <span class="stri">"a"</span>, <span class="stri">"test"</span>), <span class="stri">' '</span>) => <span class="stri">"This is a test"</span> )
      join(A,B) Join the elements of A together with B's between them
                  ( Type of argument A: <font color=red>array string</font>,
                    Type of argument B: <a class="type" href="#types_string">string</a>,
                    join([](<span class="stri">"pro"</span>, <span class="stri">"gram"</span>), <span class="stri">""</span>) => <span class="stri">"program"</span> )
      trim(A)   Removes leading and trailing spaces and control chars
                  ( trim(<span class="stri">" /n xyz /r"</span>) = <span class="stri">"xyz"</span> )
      str(A)    Conversion to <a class="type" href="#types_string">string</a>
                  ( Type of result: <a class="type" href="#types_string">string</a>,
                    str(A) => A )
      literal(A) Conversion to a literal
                  ( Type of result: <a class="type" href="#types_string">string</a>,
                    literal(<span class="stri">"ABC"</span>) => <span class="stri">"\"ABC\""</span>,
                    literal(<span class="stri">"O' \"X\""</span>) => <span class="stri">"\"O\' \\\"X\\\"\""</span> )
      upper(A)  Conversion to upper case characters
                  ( upper(<span class="stri">"Upper"</span>)=><span class="stri">"UPPER"</span> )
      lower(A)  Conversion to lower case characters
                  ( lower(<span class="stri">"Lower"</span>)=><span class="stri">"lower"</span> )
      compare(A, B) Compare function
                  ( Type of result: <a class="type" href="#types_integer">integer</a>,
                    compare(<span class="stri">"ABC"</span>, <span class="stri">"ABCD"</span>) => -1,
                    compare(<span class="stri">"ABC"</span>, <span class="stri">"ABC"</span>) => 0,
                    compare(<span class="stri">"ABCD"</span>, <span class="stri">"ABCC"</span>) => 1 )
      hashCode(A) Hash function
                  ( Type of result: <a class="type" href="#types_integer">integer</a> )
    Statements:
      A &amp;:= B   Append B to A
                  ( A &amp;:= B => A := A &amp; B )
      A &amp;:= B   Append B to A
                  ( Type of argument B: <a class="type" href="#types_char">char</a>,
                    A &amp;:= B => A := A &amp; str(B) )
      A @:= [B] C  Assign C to element B of <a class="type" href="#types_string">string</a> A
                  ( Type of argument B: <a class="type" href="#types_integer">integer</a>,
                    Type of argument C: <a class="type" href="#types_char">char</a>,
                    A @:= [B] C =>
                        A := A[..pred(B)] &amp; str(C) &amp; A[succ(B)..],
                    A @:= [0] 'x' => EXCEPTION RANGE_ERROR,
                    A @:= [succ(length(A))] 'x' => EXCEPTION RANGE_ERROR )
</pre><p></p>

<a name="types_array"><h3>5.10 array</h3></a>
<p>
    The type <tt>'<font color=red>array baseType</font>'</tt> describes sequences of <tt>'<font color=red>baseType</font>'</tt>
  elements (including the empty sequence).
</p><dl>
    <dt></dt><dd>For example: <tt>'<font color=red>array integer</font>'</tt> describes arrays of integer elements.</dd>
</dl><p>
  An element of an array can be accessed with an <tt><!-- ' --><a class="type" href="#types_integer">integer</a><!-- ' --></tt> index.
  The minimal and maximal indices of an array are part of the value
  and can be obtained with the functions <tt>'minIdx'</tt> and <tt>'maxIdx'</tt>.
  There are functions which generate arrays with the default minimal
  index of 1 and other functions which generate arrays with the minimal
  index taken from a parameter. The <tt><!-- ' -->array<!-- ' --></tt> functions are defined
  in the library <span class="stri">"array.s7i"</span>. Arrays with non-integer index are defined
  in the library <span class="stri">"idxarray.s7i"</span>.
</p><pre>
    Literal:
      [] (elem1, elem2)  Create an array with the given elements
                    The starting index of the array is 1.
      [0] (elem1, elem2)  Create an array with the given elements
                    The starting index of the array is 0.
    Infix operators:
      &amp;         Array concatenation
      times     Array generation
                  ( Left operand: <a class="type" href="#types_integer">integer</a>,
                    Right operand: <font color=red>baseType</font>,
                    A times B Generates an '<font color=red>array baseType</font>'
                    with A elements of B,
                    (1 times B)[1] => B
                    -1 times B => EXCEPTION RANGE_ERROR )
      [ A .. B ] <font color=blue>times</font> C    Array generation
                  ( Type of arguments A and B: <a class="type" href="#types_integer">integer</a> )
                    Type of argument C: <font color=red>baseType</font>,
                    [ A .. B ] <font color=blue>times</font> C Generates an '<font color=red>array baseType</font>'
                    with pred(B - A) elements of C,
                    [ -1 .. -2 ] <font color=blue>times</font> B => empty array,
                    [ -1 .. -3 ] <font color=blue>times</font> B => EXCEPTION RANGE_ERROR )
    Indices:
      [ A ]     Access one array element
                  ( Type of argument A: <a class="type" href="#types_integer">integer</a>,
                    Type of result: <font color=red>baseType</font>,
                    A[minIdx(A)] => First element,
                    A[maxIdx(A)] => Last element,
                    A[pred(minIdx(A))] => EXCEPTION RANGE_ERROR,
                    A[succ(maxIdx(A))] => EXCEPTION RANGE_ERROR )
      [ A .. B ] Access a sub array
                  ( Type of arguments A and B: <a class="type" href="#types_integer">integer</a> )
      [ A .. ]  Access a sub array beginning at position A
                  ( Type of argument A: <a class="type" href="#types_integer">integer</a> )
      [ .. A ]  Access a sub array ending at position A
                  ( Type of argument A: <a class="type" href="#types_integer">integer</a> )
    Relations:
      =, &lt;>
    Functions:
      length(A) Length of array
                  ( Type of result: <a class="type" href="#types_integer">integer</a>,
                    length(A) = succ(maxIdx(A) - minIdx(A)),
                    length(0 times TRUE) => 0,
                    length(5 times TRUE) => 5 )
      minIdx(A) Minimal index of array
                  ( Type of result: <a class="type" href="#types_integer">integer</a>,
                    minIdx(3 times TRUE) => 1,
                    minIdx([-1 .. 4] <font color=blue>times</font> TRUE) => -1 )
      maxIdx(A) Maximal index of array
                  ( Type of result: <a class="type" href="#types_integer">integer</a>,
                    maxIdx(3 times TRUE) => 3 )
      rand(A)   Random element from an array
                The random elements are uniform distributed.
                  ( Type of result:  <font color=red>baseType</font> )
      remove(A,B) Remove element with index B from array A and
                  return the removed element
                  ( Type of argument B: <a class="type" href="#types_integer">integer</a>,
                    Type of result: <font color=red>baseType</font>,
                    remove(0 times TRUE, 1) => EXCEPTION RANGE_ERROR )
      <a class="func" href="#types_..">sort</a>(A)   Sort array using the compare(<font color=red>baseType</font>, <font color=red>baseType</font>) function
    Statements:
      A &amp;:= B   Append B to A
                  ( A &amp;:= B => A := A &amp; B )
      <span class="keywd">for</span> A <span class="keywd">range</span> B <span class="keywd">do</span>
        C
      <span class="keywd">end for</span>   Loop over all elements of an array
                  ( Type of argument A: <font color=red>baseType</font>,
                    Type of argument C: <a class="type" href="#types_proc">proc</a> )
      insert(A, B, C) Insert C to the array A at position B
                  ( Type of argument B: <a class="type" href="#types_integer">integer</a>,
                    Type of argument C: <font color=red>baseType</font> )
      insert(A, B) Insert B into the sorted array A
                  ( Type of argument C: <font color=red>baseType</font> )
</pre><p></p>

<a name="types_hash"><h3>5.11 hash</h3></a>
<p>
    The type <tt>'<font color=red>hash [keyType] baseType</font>'</tt> describes hash tables with
  elements of <tt>'<font color=red>baseType</font>'</tt>. The elements can be accessed with an index
  of <tt>'<font color=red>keyType</font>'</tt>.
</p><dl>
    <dt></dt><dd>For example: <tt>'<font color=red>hash [string] integer</font>'</tt> describes hash tables with
    <tt><!-- ' --><a class="type" href="#types_integer">integer</a><!-- ' --></tt> elements and <tt><!-- ' --><a class="type" href="#types_string">string</a><!-- ' --></tt> keys.</dd>
</dl><p>
  The <tt>'<font color=red>keyType</font>'</tt> of a hash needs to provide the functions <tt>'hashCode'</tt>
  and <tt>'compare'</tt>. Besides this the <tt>'<font color=red>keyType</font>'</tt> can be any type. The
  <tt><!-- ' -->hash<!-- ' --></tt> functions are defined in the library <span class="stri">"hash.s7i"</span>.
</p><pre>
    Constants:
      <font color=red>hashType</font>.EMPTY_HASH  Empty hash table
    Infix operators:
      in        Element
                  ( Left argument: <font color=red>baseType</font>,
                    Type of result: <a class="type" href="#types_boolean">boolean</a> )
      not in    Is not Element
                  ( Left argument: <font color=red>baseType</font>,
                    Type of result: <a class="type" href="#types_boolean">boolean</a> )
    Indices:
      [ A ]     Access one hash table element
                  ( Type of argument A: <font color=red>keyType</font>,
                    Type of result: <font color=red>baseType</font> )
    Functions:
      length(A) Number of elements in hash table A
                  ( Type of result: <a class="type" href="#types_integer">integer</a>,
                    length(hashType.EMPTY_HASH) => 0 )
      keys(A)   Unsorted array of keys from hash table A
                  ( Type of result: <font color=red>array keyType</font> )
      values(A) Unsorted array of values from hash table A
                  ( Type of result: <font color=red>array baseType</font> )
      flip(A)   Deliver a hash with keys and values flipped
                  ( Type of result: <font color=red>hash [baseType] array keyType</font> )
    Statements:
      incl(A,B,C) Include element B to hash table A
                  ( Type of argument B: <font color=red>keyType</font>,
                    Type of argument C: <font color=red>baseType</font> )
      excl(A,B) Exclude element B from hash table A
                  ( Type of argument B: <font color=red>keyType</font> )
      A @:= [B] C  Assign C to element B of hash table A
                  ( Type of argument B: <font color=red>keyType</font>,
                    Type of argument C: <font color=red>baseType</font> )
      <span class="keywd">for</span> A <span class="keywd">range</span> B <span class="keywd">do</span>
        C
      <span class="keywd">end for</span>   Unsorted loop over all values of a hash
                  ( Type of argument A: <font color=red>baseType</font>,
                    Type of argument C: <a class="type" href="#types_proc">proc</a> )
      <span class="keywd">for</span> <span class="keywd">key</span> A <span class="keywd">range</span> B <span class="keywd">do</span>
        C
      <span class="keywd">end for</span>   Unsorted loop over all keys of a hash
                  ( Type of argument A: <font color=red>keyType</font>,
                    Type of argument C: <a class="type" href="#types_proc">proc</a> )
      <span class="keywd">for</span> A <span class="keywd">key</span> B <span class="keywd">range</span> C <span class="keywd">do</span>
        D
      <span class="keywd">end for</span>   Unsorted loop over all values and keys of a hash
                  ( Type of argument A: <font color=red>baseType</font>,
                    Type of argument B: <font color=red>keyType</font>,
                    Type of argument D: <a class="type" href="#types_proc">proc</a> )
</pre><p></p>

<a name="types_set"><h3>5.12 set</h3></a>
<p>
    The type <tt>'<font color=red>set of baseType</font>'</tt> describes a set of elements of a
  <tt>'<font color=red>baseType</font>'</tt>. (including the empty set). The <tt>'<font color=red>set of baseType</font>'</tt>
  functions are defined in the library <span class="stri">"set.s7i"</span>. The type
  <tt>'<font color=red>set of integer</font>'</tt> is an alternate name for <tt><!-- ' -->bitset<!-- ' --></tt>, which is
  defined in the library <span class="stri">"bitset.s7i"</span>.
</p><pre>
    Constants:
      <font color=red>setType</font>.EMPTY_SET  Empty set
      EMPTY_SET  Empty set of the type <font color=red>bitset</font>
    Infix operators:
      |         Union 
      &amp;         Intersection
      -         Difference
      >&lt;        Symmetric Difference
      in        Element
                  ( Left argument: <font color=red>baseType</font>,
                    Type of result: <a class="type" href="#types_boolean">boolean</a> )
      not in    Is not Element
                  ( Left argument: <font color=red>baseType</font>,
                    Type of result: <a class="type" href="#types_boolean">boolean</a> )
    Relations:
      =, &lt;>     Equal and not equal
                  ( Type of result: <a class="type" href="#types_boolean">boolean</a> )
      &lt;=        Subset
                  ( Type of result: <a class="type" href="#types_boolean">boolean</a>,
                    A &lt;= B => TRUE when no element X exists for which
                       X in A and X not in B
                    holds.
                    A &lt;= B => FALSE when an element X exists for which
                       X in A and X not in B
                    holds.
                    <font color=red>setType</font>.EMPTY_SET &lt;= A => TRUE,
                    A &lt;= <font color=red>setType</font>.EMPTY_SET => FALSE for A &lt;> EMPTY_SET,
                    A &lt;= B => B >= A )
      &lt;         Proper subset
                  ( Type of result: <a class="type" href="#types_boolean">boolean</a>,
                    A &lt; B => A &lt;= B and A &lt;> B,
                    <font color=red>setType</font>.EMPTY_SET &lt; A => TRUE for A &lt;> EMPTY_SET,
                    A &lt; <font color=red>setType</font>.EMPTY_SET => FALSE,
                    A &lt; B => B > A )
      >=        Superset
                  ( Type of result: <a class="type" href="#types_boolean">boolean</a>,
                    A >= B => TRUE when no element X exists for which
                       X in B and X not in A
                    holds.
                    A >= B => FALSE when an element X exists for which
                       X in B and X not in A
                    holds.
                    A >= <font color=red>setType</font>.EMPTY_SET => TRUE,
                    <font color=red>setType</font>.EMPTY_SET >= A => FALSE for A &lt;> EMPTY_SET,
                    A >= B => B &lt;= A )
      >         Proper superset
                  ( Type of result: <a class="type" href="#types_boolean">boolean</a>,
                    A > B => A >= B and A &lt;> B,
                    A > <font color=red>setType</font>.EMPTY_SET => TRUE for A &lt;> EMPTY_SET,
                    <font color=red>setType</font>.EMPTY_SET > A => FALSE,
                    A > B => B &lt; A )
    Functions:
      card      Cardinality of a set
                  ( Type of result: <a class="type" href="#types_integer">integer</a>,
                    card(<font color=red>setType</font>.EMPTY_SET) => 0  )
      min       Minimal element
                  ( Type of result: <font color=red>baseType</font>,
                    Delivers the element from the set for
                    which the following condition holds:
                       Element &lt;= X
                    for all X which are in the set.
                    min(<font color=red>setType</font>.EMPTY_SET) => EXCEPTION RANGE_ERROR )
      max       Maximum element
                  ( Type of result: <font color=red>baseType</font>,
                    Delivers the element from the set for
                    which the following condition holds:
                       Element >= X
                    for all X which are in the set.
                    min(<font color=red>setType</font>.EMPTY_SET) => EXCEPTION RANGE_ERROR )
      str(A)    Conversion to <a class="type" href="#types_string">string</a>
                  ( Type of result: <a class="type" href="#types_string">string</a>,
                    str(<font color=red>setType</font>.EMPTY_SET) => <span class="stri">"{}"</span>,
                    str({}) => <span class="stri">"{}"</span> )
                    str({1, 2}) => <span class="stri">"{1, 2}"</span> )
      rand      Random element from a set
                The random elements are uniform distributed.
                  ( Type of result: <font color=red>baseType</font>,
                    rand(<font color=red>setType</font>.EMPTY_SET) => EXCEPTION RANGE_ERROR )
      compare(A, B) Compare function
                  ( Type of result: <a class="type" href="#types_integer">integer</a> )
      hashCode(A) Hash function
                  ( Type of result: <a class="type" href="#types_integer">integer</a> )
    Statements:
      incl(A,B) Include element B to set A
                  ( Type of argument B: <font color=red>baseType</font> )
      excl(A,B) Exclude element B from set A
                  ( Type of argument B: <font color=red>baseType</font> )
      <span class="keywd">for</span> A <span class="keywd">range</span> B <span class="keywd">do</span>
        C
      <span class="keywd">end for</span>   Loop over all elements of a set
                  ( Type of argument A: <font color=red>baseType</font>,
                    Type of argument C: <a class="type" href="#types_proc">proc</a> )
</pre><p></p>

<a name="types_struct"><h3>5.13 struct</h3></a>
<p>
    The type <tt>'<font color=red>struct</font>'</tt> describes all structured types.
</p><pre>
    Type generators:
      <span class="keywd">new struct</span>
        <span class="keywd">var</span> <font color=red>aType</font>: name <span class="keywd">is</span> value;
        ...
      <span class="keywd">end struct</span>
                Create new structure type

      <span class="keywd">new</span> <font color=red>metaType</font> <span class="keywd">struct</span>
        <span class="keywd">var</span> <font color=red>aType</font>: name <span class="keywd">is</span> value;
        ...
      <span class="keywd">end struct</span>
                Create new structure type as subtype of <tt>'<font color=red>metaType</font>'</tt>,
                which is not a structure

      <span class="keywd">sub</span> <font color=red>metaType</font> <span class="keywd">struct</span>
        <span class="keywd">var</span> <font color=red>aType</font>: name <span class="keywd">is</span> value;
        ...
      <span class="keywd">end struct</span>
                Create new structure type as subtype of <tt>'<font color=red>metaType</font>'</tt>,
                which is a structure type. The new structure type inherits all
		elements of the structure type <tt>'<font color=red>metaType</font>'</tt>.

      <span class="keywd">var</span> <font color=red>aType</font>: name <span class="keywd">is</span> value
                Declare structure element 'name' with 'value'

    Infixoperators:
      .         Access Element of STRUCT
                  ( example.element )
      ->        Access Element of ptr STRUCT
                  ( example->element )
    Relations:
      =, &lt;>
    Functions:
      incl(A, B) Include element in MODULE
                  ( Type of argument B: <font color=red>reference</font> )
      excl(A, B) Exclude element from MODULE
                  ( Type of argument B: <font color=red>reference</font> )
</pre><p></p>

<a name="types_category"><h3>5.14 category</h3></a>
<p>
    The type <tt>'<font color=red>category</font>'</tt> describes the category of a <tt>'<font color=red>reference</font>'</tt>.
</p><pre>
    Constants:
      SYMBOLOBJECT, DECLAREDOBJECT, FORWARDOBJECT, FWDREFOBJECT, BLOCKOBJECT,
      CALLOBJECT,MATCHOBJECT, TYPEOBJECT, FORMPARAMOBJECT, INTOBJECT,
      BIGINTOBJECT, CHAROBJECT, STRIOBJECT, BSTRIOBJECT, ARRAYOBJECT,
      HASHOBJECT, STRUCTOBJECT, CLASSOBJECT, INTERFACEOBJECT, SETOBJECT,
      FILEOBJECT, SOCKETOBJECT, LISTOBJECT, FLOATOBJECT, WINOBJECT,
      ENUMLITERALOBJECT, CONSTENUMOBJECT, VARENUMOBJECT, REFOBJECT,
      REFLISTOBJECT, EXPROBJECT, ACTOBJECT, VALUEPARAMOBJECT, REFPARAMOBJECT,
      RESULTOBJECT, LOCALVOBJECT, PROGOBJECT
    Infix operators:
      <font color=red>category</font> <font color=blue>conv</font> A   Conversion of <a class="type" href="#types_integer">integer</a> to <font color=red>category</font>
                  ( Type of argument A: <a class="type" href="#types_integer">integer</a>,
                    <font color=red>category</font> <font color=blue>conv</font> ord(INTOBJECT) => INTOBJECT )
      <font color=red>category</font> <font color=blue>parse</font> A   Conversion of <a class="type" href="#types_string">string</a> to <font color=red>category</font>
                  ( Type of argument A: <a class="type" href="#types_string">string</a>,
                    <font color=red>category</font> <font color=blue>parse</font> <span class="stri">"FLOATOBJECT"</span> => FLOATOBJECT )
    Relations:
      =, &lt;>
    Functions:
      ord(A)    Ordinal number
                  ( Type of result: <a class="type" href="#types_integer">integer</a> )
      str(A)    Conversion to <a class="type" href="#types_string">string</a>
                  ( Type of result: <a class="type" href="#types_string">string</a>,
                    str(CHAROBJECT) => <span class="stri">"CHAROBJECT"</span> )
</pre><p></p>

<a name="types_reference"><h3>5.15 reference</h3></a>
<p>
    The type <tt>'<font color=red>reference</font>'</tt> describes a reference to any
  object.
</p><pre>
    Constants:
      NIL       Reference to no element.
    Relations:
      =, &lt;>
    Functions:
      category(A) Get the category of the referenced object
                  ( Type of result: <font color=red>category</font>,
                    category(NIL) => EXCEPTION RANGE_ERROR )
      str(A)    Conversion to <a class="type" href="#types_string">string</a>
                  ( Type of result: <a class="type" href="#types_string">string</a> )
      getType(A) Get the type of the referenced object
                  ( Type of result: <a class="type" href="#types_type">type</a>,
                    getType(NIL) => EXCEPTION RANGE_ERROR )
      obj_number(A) Delivers an unique number for each object
                  ( Type of result: <a class="type" href="#types_integer">integer</a>,
                    obj_number(NIL) => 0 )
      isVar(A)  Reference to a variable object
                  ( Type of result: <a class="type" href="#types_boolean">boolean</a>,
                    isVar(NIL) => EXCEPTION RANGE_ERROR )
      params(A) Gets the formal parameters of a function
                  ( Type of result: <font color=red>ref_list</font> )
      local_vars(A) Gets the local variables of a function
                  ( Type of result: <font color=red>ref_list</font>,
                    local_vars(NIL) => EXCEPTION RANGE_ERROR,
                    local_vars(A) => EXCEPTION RANGE_ERROR for category(A) &lt;> BLOCKOBJECT )
      local_consts(A) Gets the local constants of a function
                  ( Type of result: <font color=red>ref_list</font>,
                    local_consts(NIL) => EXCEPTION RANGE_ERROR,
                    local_consts(A) => EXCEPTION RANGE_ERROR for category(A) &lt;> BLOCKOBJECT )
      body(A)   Gets the body of a function
                  ( body(NIL) => EXCEPTION RANGE_ERROR,
                    body(A) => EXCEPTION RANGE_ERROR for category(A) &lt;> BLOCKOBJECT )
      func_result(A) Gets the result object of a function
      func_res_init(A) Gets the initialization value of the result
                       object of a function
      array_to_list(A) Return the array elements as list
                  ( Type of result: <font color=red>ref_list</font>,
                    array_to_list(NIL) => EXCEPTION RANGE_ERROR,
                    array_to_list(A) => EXCEPTION RANGE_ERROR for category(A) &lt;> ARRAYOBJECT )
      array_min_index(A) Return the minimal index of an array
                  ( Type of result: <a class="type" href="#types_integer">integer</a>,
                    array_min_index(NIL) => EXCEPTION RANGE_ERROR,
                    array_min_index(A) => EXCEPTION RANGE_ERROR for category(A) &lt;> ARRAYOBJECT )
      array_max_index(A) Return the maximal index of an array
                  ( Type of result: <a class="type" href="#types_integer">integer</a>,
                    array_max_index(NIL) => EXCEPTION RANGE_ERROR,
                    array_max_index(A) => EXCEPTION RANGE_ERROR for category(A) &lt;> ARRAYOBJECT )
      struct_to_list(A) Return the struct elements as list
                  ( Type of result: <font color=red>ref_list</font>,
                    struct_to_list(NIL) => EXCEPTION RANGE_ERROR,
                    struct_to_list(A) => EXCEPTION RANGE_ERROR for category(A) &lt;> STRUCTOBJECT )
      interface_to_struct(A) Return the struct to which the interface object points.
                  ( interface_to_struct(NIL) => EXCEPTION RANGE_ERROR,
                    interface_to_struct(A) => EXCEPTION RANGE_ERROR for category(A) &lt;> INTERFACEOBJECT )
      file(A)   File name of the referenced object
                  ( Type of result: <a class="type" href="#types_string">string</a> )
      line(A)   Line number of the referenced object
                  ( Type of result: <a class="type" href="#types_integer">integer</a> )
      alloc(A)  Create a copy of the object referenced by A
                The object value of the copy is set to NULL
      getValue(A, <font color=red>reference</font>) Dereference as <font color=red>reference</font>
                  ( Type of result: <font color=red>reference</font>,
                    getValue(NIL, <font color=red>reference</font>) => EXCEPTION RANGE_ERROR,
                    getValue(A, <font color=red>reference</font>) => EXCEPTION RANGE_ERROR for
                        category(A) not in {FWDREFOBJECT, REFOBJECT, REFPARAMOBJECT, RESULTOBJECT,
                        LOCALVOBJECT, ENUMLITERALOBJECT, CONSTENUMOBJECT, VARENUMOBJECT} )
      getValue(A, <font color=red>ref_list</font>) Dereference as <font color=red>ref_list</font>
                  ( Type of result: <font color=red>ref_list</font>,
                    getValue(NIL, <font color=red>ref_list</font>) => EXCEPTION RANGE_ERROR,
                    getValue(A, <font color=red>ref_list</font>) => EXCEPTION RANGE_ERROR for
                        category(A) not in {MATCHOBJECT, CALLOBJECT, REFLISTOBJECT} )
      getValue(A, <a class="type" href="#types_integer">integer</a>) Dereference as <a class="type" href="#types_integer">integer</a>
                  ( Type of result: <a class="type" href="#types_integer">integer</a>,
                    getValue(NIL, <a class="type" href="#types_integer">integer</a>) => EXCEPTION RANGE_ERROR,
                    getValue(A, <a class="type" href="#types_integer">integer</a>) => EXCEPTION RANGE_ERROR for category(A) &lt;> INTOBJECT )
      getValue(A, <font color=red>bigInteger</font>) Dereference as <font color=red>bigInteger</font>
                  ( Type of result: <font color=red>bigInteger</font>,
                    getValue(NIL, <font color=red>bigInteger</font>) => EXCEPTION RANGE_ERROR,
                    getValue(A, <font color=red>bigInteger</font>) => EXCEPTION RANGE_ERROR for category(A) &lt;> BIGINTOBJECT )
      getValue(A, <a class="type" href="#types_float">float</a>) Dereference as <a class="type" href="#types_float">float</a>
                  ( Type of result: <a class="type" href="#types_float">float</a>,
                    getValue(NIL, <a class="type" href="#types_float">float</a>) => EXCEPTION RANGE_ERROR,
                    getValue(A, <a class="type" href="#types_float">float</a>) => EXCEPTION RANGE_ERROR for category(A) &lt;> FLOATOBJECT )
      getValue(A, <a class="type" href="#types_char">char</a>) Dereference as <a class="type" href="#types_char">char</a>
                  ( Type of result: <a class="type" href="#types_char">char</a>,
                    getValue(NIL, <a class="type" href="#types_char">char</a>) => EXCEPTION RANGE_ERROR,
                    getValue(A, <a class="type" href="#types_char">char</a>) => EXCEPTION RANGE_ERROR for category(A) &lt;> CHAROBJECT )
      getValue(A, <a class="type" href="#types_string">string</a>) Dereference as <a class="type" href="#types_string">string</a>
                  ( Type of result: <a class="type" href="#types_string">string</a>,
                    getValue(NIL, <a class="type" href="#types_string">string</a>) => EXCEPTION RANGE_ERROR,
                    getValue(A, <a class="type" href="#types_string">string</a>) => EXCEPTION RANGE_ERROR for category(A) &lt;> STRIOBJECT )
      getValue(A, <font color=red>bitset</font>) Dereference as <font color=red>bitset</font>
                  ( Type of result: <font color=red>bitset</font>,
                    getValue(NIL, <font color=red>bitset</font>) => EXCEPTION RANGE_ERROR,
                    getValue(A, <font color=red>bitset</font>) => EXCEPTION RANGE_ERROR for category(A) &lt;> SETOBJECT )
      getValue(A, <font color=red>clib_file</font>) Dereference as <font color=red>clib_file</font>
                  ( Type of result: <font color=red>clib_file</font>,
                    getValue(NIL, <font color=red>clib_file</font>) => EXCEPTION RANGE_ERROR,
                    getValue(A, <font color=red>clib_file</font>) => EXCEPTION RANGE_ERROR for category(A) &lt;> FILEOBJECT )
      getValue(A, <font color=red>program</font>) Dereference as <font color=red>program</font>
                  ( Type of result: <font color=red>program</font>,
                    getValue(NIL, <font color=red>program</font>) => EXCEPTION RANGE_ERROR,
                    getValue(A, <font color=red>program</font>) => EXCEPTION RANGE_ERROR for category(A) &lt;> PROGOBJECT )
      getValue(A, <font color=red>ACTION</font>) Dereference as <font color=red>ACTION</font>
                  ( Type of result: <font color=red>ACTION</font>,
                    getValue(NIL, <font color=red>ACTION</font>) => EXCEPTION RANGE_ERROR,
                    getValue(A, <font color=red>ACTION</font>) => EXCEPTION RANGE_ERROR for category(A) &lt;> ACTOBJECT )
      getValue(A, <a class="type" href="#types_type">type</a>) Dereference as <a class="type" href="#types_type">type</a>
                  ( Type of result: <a class="type" href="#types_type">type</a>,
                    getValue(NIL, <a class="type" href="#types_type">type</a>) => EXCEPTION RANGE_ERROR,
                    getValue(A, <a class="type" href="#types_type">type</a>) => EXCEPTION RANGE_ERROR for category(A) &lt;> TYPEOBJECT )
      compare(A, B) Compare function
                  ( Type of result: <a class="type" href="#types_integer">integer</a> )
      hashCode(A) Hash function
                  ( Type of result: <a class="type" href="#types_integer">integer</a> )
    Statements:
      setVar(A, B) Set var flag of referenced object A to B
                  ( Type of argument B: <a class="type" href="#types_boolean">boolean</a>,
                    setVar(NIL, B) => EXCEPTION RANGE_ERROR )
      setCategory(A, B) Set the category of the referenced object A to B
                  ( Type of argument B: <font color=red>category</font>,
                    setCategory(NIL, B) => EXCEPTION RANGE_ERROR )
      setType(A, B) Set the type of the referenced object A to B
                  ( Type of argument B: <a class="type" href="#types_type">type</a>,
                    setType(NIL, B) => EXCEPTION RANGE_ERROR )
      setValue(A, B) Set the value of the referenced object A to B
                  ( Type of argument B: <font color=red>ref_list</font> )
      setParams(A, B) Set the formal parameters of a function
                  ( Type of argument B: <font color=red>ref_list</font> )
</pre><p></p>

<a name="types_ref_list"><h3>5.16 ref_list</h3></a>
<p>
    The type <tt>'<font color=red>ref_list</font>'</tt> describes a list of <tt>'<font color=red>reference</font>'</tt> objects.
</p><pre>
    Constants:
      <font color=red>ref_list</font>.EMPTY  Empty reference list.
    Infix operators:
      &amp;         Ref_list list concatenation
      A <font color=blue>in</font> B    Is element in ref_list
                  ( Type of argument A: <font color=red>reference</font>,
                    Type of result: <a class="type" href="#types_boolean">boolean</a> )
      A <font color=blue>not in</font> B  Is element not in ref_list
                  ( Type of argument A: <font color=red>reference</font>,
                    Type of result: <a class="type" href="#types_boolean">boolean</a> )
    Indices:
      [ A ]     Access one ref_list element
                  ( Type of argument A: <a class="type" href="#types_integer">integer</a>,
                    Type of result: <font color=red>reference</font>,
                    A[1]=>First element,
                    A[length(A)]=>Last element,
                    A[0] => EXCEPTION RANGE_ERROR,
                    A[succ(length(A))] => EXCEPTION RANGE_ERROR )
      [ A .. B ]  Access a sub list
                  ( Type of arguments A and B: <a class="type" href="#types_integer">integer</a> )
      [ A .. ]  Access a sub list beginning at position A
                  ( Type of argument A: <a class="type" href="#types_integer">integer</a> )
      [ .. A ]  Access a sub list ending at position A
                  ( Type of argument A: <a class="type" href="#types_integer">integer</a> )
    Relations:
      =, &lt;>
    Functions:
      length(A) Length of ref_list
                  ( Type of result: <a class="type" href="#types_integer">integer</a>,
                    length(<font color=red>ref_list</font>.EMPTY) => 0 )
      make_list(A) Create ref_list with element A
                  ( Type of argument A: <font color=red>reference</font> )
      pos(A,B)  First position of <font color=red>reference</font> B in <font color=red>ref_list</font> A
                  ( Type of argument B: <font color=red>reference</font>,
                    Type of result: <a class="type" href="#types_integer">integer</a> )
      pos(A,B,C) First position of <font color=red>reference</font> B in <font color=red>ref_list</font> A
                 The search starts at position C of <font color=red>ref_list</font> A
                  ( Type of argument B: <font color=red>reference</font>,
                    Type of argument C: <a class="type" href="#types_integer">integer</a>,
                    Type of result: <a class="type" href="#types_integer">integer</a> )
      incl(A, B) Include element in list
                  ( Type of argument B: <font color=red>reference</font> )
      excl(A, B) Exclude element from list
                  ( Type of argument B: <font color=red>reference</font> )
    Statements:
      A &amp;:= B   Append B to A
                  ( A &amp;:= B => A := A &amp; B )
      A @:= [B] C  Assign C to element B of ref_list A
                  ( Type of argument B: <a class="type" href="#types_integer">integer</a>,
                    Type of argument C: <font color=red>reference</font>,
                    A @:= [B] C =>
                        A := A[..pred(B)] &amp; make_list(C) &amp; A[succ(B)..],
                    A @:= [0] C => EXCEPTION RANGE_ERROR,
                    A @:= [succ(length(A))] C => EXCEPTION RANGE_ERROR )
      for A range B do
        C
      end for   Loop over all elements of a ref_list
                  ( Type of argument A: <font color=red>reference</font>,
                    Type of argument C: <a class="type" href="#types_proc">proc</a> )
</pre><p></p>

<a name="types_program"><h3>5.17 program</h3></a>
<p>
    The type <tt>'<font color=red>program</font>'</tt> describes a Seed7 program.
</p><pre>
    Constants:
      <font color=red>program</font>.EMPTY  Empty program.
    Relations:
      =, &lt;>
    Functions:
      parseFile(A)  Parse the file with the name A
                  ( Type of argument A: <a class="type" href="#types_string">string</a> )
      parseStri(A)  Parse the string A
                  ( Type of argument A: <a class="type" href="#types_string">string</a> )
      evaluate(A, B)  Evaluate the expression B which is part of program A
                  ( Type of result: <font color=red>reference</font>,
                    Type of argument B: <font color=red>reference</font> )
      sys_var(A, B)  Return a reference of the system var B of program A
                  ( Type of result: <font color=red>reference</font>,
                    Type of argument B: <a class="type" href="#types_string">string</a> )
      error_count(A)  Number of errors in the program A
                  ( Type of result: <a class="type" href="#types_integer">integer</a> )
      declared_objects(A)  List of objects declared in the program A
                  ( Type of result: <font color=red>ref_list</font> )
      syobject(A, B)  Return object with name B in program A
                  ( Type of result: <font color=red>reference</font>,
                    Type of argument B: <a class="type" href="#types_string">string</a> )
      match(A, B)  Return object from program A which matches B
                  ( Type of result: <font color=red>reference</font>,
                    Type of argument B: <font color=red>ref_list</font> )
    Statements:
      execute(A) Execute the program referred by A
</pre><p></p>

<a name="types_ptr"><h3>5.18 ptr</h3></a>
<p>
    The type <tt>'<font color=red>ptr baseType</font>'</tt> describes a pointer to an object
  of a <tt>'<font color=red>baseType</font>'</tt>. With
</p><pre>
    <span class="keywd">const</span> <a class="type" href="#types_type">type</a>: ptrType <span class="keywd">is</span> <font color=red>ptr baseType</font>;
</pre><p>
  a new pointer type <tt>'<font color=red>ptrType</font>'</tt> is declared.
</p><pre>
    Constants:
      <font color=red>ptrType</font>.NIL   Reference to no element
    Prefix operators:
      &amp;         Address of
                  ( Type of operand: <font color=red>baseType</font> )
    Postfix operators:
      ^         Dereference
                  ( Type of result: <font color=red>baseType</font> )
    Infix operators:
      <font color=red>ptrType</font> <font color=blue>conv</font> A  Conversion from <font color=red>reference</font> A to <font color=red>ptrType</font>
      <font color=red>reference</font> <font color=blue>conv</font> A  Conversion from <font color=red>ptrType</font> A to <font color=red>reference</font>
    Relations:
      =, &lt;>
    Functions:
      base_type(<font color=red>ptrType</font>)  Gets the <font color=red>baseType</font> of a <font color=red>ptrType</font>
                  ( Type of argument <font color=red>ptrType</font>: <a class="type" href="#types_type">type</a> )
</pre><p></p>

<a name="types_ENUMERATION"><h3>5.19 ENUMERATION</h3></a>
<p>
    With
</p><pre>
    <span class="keywd">const</span> <a class="type" href="#types_type">type</a>: enumType <span class="keywd">is new enum</span>
        enum_literal1, enum_literal2
      <span class="keywd">end enum</span>;
</pre><p>
  a new enumeration type is declared. The values of this type are:
</p><pre>
    enum_literal1 and enum_literal2
</pre><p>
  For a enumeration type only few operations are predefined.
  Additional operations must be defined separately. So it is
  necessary to define the <tt>'str'</tt> and <tt>'<font color=blue>parse</font>'</tt> functions in order to
  do I/O for a new enumeration type.
</p><pre>
    Infix operators:
      <font color=red>enumType</font> <font color=blue>conv</font> A  Conversion from <a class="type" href="#types_integer">integer</a> A to <font color=red>enumType</font>
                  ( Type of argument A: <a class="type" href="#types_integer">integer</a>,
                    <font color=red>enumType</font> <font color=blue>conv</font> 0 => enum_literal1 )
      <a class="type" href="#types_integer">integer</a> <font color=blue>conv</font> A   Conversion from <font color=red>enumType</font> A to <a class="type" href="#types_integer">integer</a>
                  ( Type of result: <a class="type" href="#types_integer">integer</a>,
                    <a class="type" href="#types_integer">integer</a> <font color=blue>conv</font> enum_literal1 => 0 )
    Relations:
      =, &lt;>, &lt;, &lt;=, >, >=
    Functions:
      ord(A)    Ordinal number
                  ( Type of result: <a class="type" href="#types_integer">integer</a> )
      succ(A)   Successor
                  ( succ(A)=>enumType <font color=blue>conv</font>(succ(ord(A))) )
      pred(A)   Predecessor
                  ( pred(A)=>enumType <font color=blue>conv</font>(pred(ord(A))) )
    Statements:
      incr(A)   Increment
                  ( incr(A) => A:=succ(A) )
      decr(A)   Decrement
                  ( decr(A) => A:=pred(A) )
</pre><p></p>

<a name="types_color"><h3>5.20 color</h3></a>
<p>
    The type <tt><!-- ' -->color<!-- ' --></tt> describes colors. The <tt><!-- ' -->color<!-- ' --></tt>
  functions are defined in the library <span class="stri">"color.s7i"</span>.
</p><pre>
    Elements:
      <span class="keywd">var</span> <a class="type" href="#types_integer">integer</a>: red_part <span class="keywd">is</span> 0;
      <span class="keywd">var</span> <a class="type" href="#types_integer">integer</a>: green_part <span class="keywd">is</span> 0;
      <span class="keywd">var</span> <a class="type" href="#types_integer">integer</a>: blue_part <span class="keywd">is</span> 0;
    Constants:
      black         is color(0, 0, 0);
      dark_red      is color(32768, 0, 0);
      dark_green    is color(0, 32768, 0);
      brown         is color(32768, 16384, 0);
      dark_blue     is color(0, 0, 32768);
      dark_magenta  is color(32768, 0, 32768);
      dark_cyan     is color(0, 65535, 65535);
      light_gray    is color(49152, 49152, 49152);
      dark_gray     is color(16384, 16384, 16384);
      light_red     is color(65535, 0, 0);
      light_green   is color(0, 65535, 0);
      yellow        is color(65535, 65535, 0);
      light_blue    is color(0, 0, 65535);
      light_magenta is color(65535, 0, 65535);
      light_cyan    is color(32768, 65535, 65535);
      white         is color(65535, 65535, 65535);
      orange        is color(65535, 32768, 0);
      amber         is color(49152, 32768, 16384);
      pink          is color(65535, 32768, 32768);
    Infix operators:
      +         Add two colors in an additive color system
    Relations:
      =, &lt;>
    Functions:
      color(R,G,B) Creates a color from Red, Green and Blue 
                  ( Type of argument R: <a class="type" href="#types_integer">integer</a>,
                    Type of argument G: <a class="type" href="#types_integer">integer</a>,
                    Type of argument B: <a class="type" href="#types_integer">integer</a> )
</pre><p></p>

<a name="types_time"><h3>5.21 time</h3></a>
<p>
    The type <tt><!-- ' -->time<!-- ' --></tt> describes times and dates.
  For dates the proleptic Gregorian calendar is used (which assumes
  that the Gregorian calendar was even in effect at dates preceding
  its official introduction). This convention is used according to
  ISO 8601 which also defines that positive and negative years exist
  and that the year preceding 1 is 0. Time is measured in hours,
  minutes, seconds and micro seconds. Additionally information about
  the difference to UTC and a flag indicating daylight saving time
  is maintained also. The <tt><!-- ' -->time<!-- ' --></tt> functions are defined in the
  library <span class="stri">"time.s7i"</span>.
</p><pre>
    Elements:
      <span class="keywd">var</span> <a class="type" href="#types_integer">integer</a>: year <span class="keywd">is</span> 0;
      <span class="keywd">var</span> <a class="type" href="#types_integer">integer</a>: month <span class="keywd">is</span> 1;
      <span class="keywd">var</span> <a class="type" href="#types_integer">integer</a>: day <span class="keywd">is</span> 1;
      <span class="keywd">var</span> <a class="type" href="#types_integer">integer</a>: hour <span class="keywd">is</span> 0;
      <span class="keywd">var</span> <a class="type" href="#types_integer">integer</a>: minute <span class="keywd">is</span> 0;
      <span class="keywd">var</span> <a class="type" href="#types_integer">integer</a>: second <span class="keywd">is</span> 0;
      <span class="keywd">var</span> <a class="type" href="#types_integer">integer</a>: micro_second <span class="keywd">is</span> 0;
    Infix operators:
      +         Add a duration to a time
                  ( Type of right operand: <a class="type" href="#types_duration">duration</a> )
      -         Subtract a duration from a time
                  ( Type of right operand: <a class="type" href="#types_duration">duration</a> )
      -         Subtract two times
                  ( Type of result: <a class="type" href="#types_duration">duration</a> )
      <a class="type" href="#types_time">time</a> parse A   Conversion of <a class="type" href="#types_string">string</a> to <a class="type" href="#types_time">time</a>
                  ( Type of argument A: <a class="type" href="#types_string">string</a>,
                    <a class="type" href="#types_time">time</a> parse <span class="stri">"2005-02-28 12:00:01"</span> => 2005-02-28 12:00:01,
                    <a class="type" href="#types_time">time</a> parse <span class="stri">"2005-02-29 12:00:01"</span> => EXCEPTION RANGE_ERROR )
    Relations:
      =, &lt;>, &lt;, &lt;=, >, >=
    Functions:
      time(NOW)  Gets the current time
      str(A)    Conversion to <a class="type" href="#types_string">string</a>
                  ( Type of result: <a class="type" href="#types_string">string</a> )
      strDate(A)  Conversion of the date to <a class="type" href="#types_string">string</a>
                  ( Type of result: <a class="type" href="#types_string">string</a> )
      strTime(A)  Conversion of the daytime to <a class="type" href="#types_string">string</a>
                  ( Type of result: <a class="type" href="#types_string">string</a> )
      strTimeZone(A)  Conversion of the time zone to <a class="type" href="#types_string">string</a>
                  ( Type of result: <a class="type" href="#types_string">string</a> )
      truncToSecond(A)  Truncate a time to a second
      truncToMinute(A)  Truncate a time to a minute
      truncToHour(A)  Truncate a time to a hour
      truncToDay(A)  Truncate a time to a day
      truncToMonth(A)  Truncate a time to a month
      truncToYear(A)  Truncate a time to a year
      isLeapYear(A)  Determine if a given year is a leap year
                  ( Type of argument A: <a class="type" href="#types_integer">integer</a> )
                  ( Type of result: <a class="type" href="#types_boolean">boolean</a> )
      daysInYear(Y)  Calculate the number of days in a year
                  ( Type of argument Y: <a class="type" href="#types_integer">integer</a>,
                    Type of result: <a class="type" href="#types_integer">integer</a> )
      daysInMonth(Y, M)  Calculate the number of days in a month
                  ( Type of argument Y: <a class="type" href="#types_integer">integer</a>,
                    Type of argument M: <a class="type" href="#types_integer">integer</a>,
                    Type of result: <a class="type" href="#types_integer">integer</a> )
      daysInMonth(A)  Calculate the number of days in a month
                  ( Type of result: <a class="type" href="#types_integer">integer</a> )
      dayOfWeek(A)  Day of the week with Monday as 1
                  ( Type of result: <a class="type" href="#types_integer">integer</a> )
      dayOfYear(A)  Day of the year with 1 January as 1
                  ( Type of result: <a class="type" href="#types_integer">integer</a> )
      weekOfYear(Y, D)  Compute the week number of a year (0 to 53).
                    According to ISO 8601: Week number 1 of
                    every year contains the 4. of january.
                  ( Type of argument Y: <a class="type" href="#types_integer">integer</a>,
                    Type of argument D: <a class="type" href="#types_integer">integer</a>,
                    Type of result: <a class="type" href="#types_integer">integer</a> )
      weekOfYear(A)  Compute the week number of a year (0 to 53).
                    According to ISO 8601: Week number 1 of
                    every year contains the 4. of january.
                  ( Type of result: <a class="type" href="#types_integer">integer</a> )
      weekDateYear(A)  Compute the year of the ISO 8601 week date
                  ( Type of result: <a class="type" href="#types_integer">integer</a> )
      weekDateWeek(A)  Compute the week of the ISO 8601 week date
                  ( Type of result: <a class="type" href="#types_integer">integer</a> )
      toUTC(A)  Conversion to Coordinated Universal Time (UTC)
      julianDayNumber(A)  Number of days that have elapsed since
                January 1, 4713 BC in the proleptic Julian calendar
                  ( Type of result: <a class="type" href="#types_integer">integer</a> )
      julianDayNumToTime(A)  Convert julian day number to time
                  ( Type of argument A: <a class="type" href="#types_integer">integer</a> )
      timestamp1970(A)  Time expressed in seconds since the
                Unix Epoch (1970-01-01 00:00:00 UTC)
                  ( Type of result: <a class="type" href="#types_integer">integer</a> )
      timestamp1970ToTime(A)  Convert a timestamp into a time from
                the local time zone
                  ( Type of argument A: <a class="type" href="#types_integer">integer</a> )
      compare(A, B)  Compare function
                  ( Type of result: <a class="type" href="#types_integer">integer</a> )
      hashCode(A)  Hash function
                  ( Type of result: <a class="type" href="#types_integer">integer</a> )
    Statements:
      A +:= B   Increment A by B
                  ( Type of argument B: <a class="type" href="#types_duration">duration</a>,
                    A +:= B => A := A + B )
      A -:= B   Decrement A by B
                  ( Type of argument B: <a class="type" href="#types_duration">duration</a>,
                    A -:= B => A := A - B )
      await(A)  Wait until the given time
</pre><p>
  For the operations <tt>'+'</tt> (add a <a class="type" href="#types_duration">duration</a> to a <a class="type" href="#types_time">time</a>) and
  <tt>'-'</tt> (subtract two <a class="type" href="#types_time">time</a> values) holds:</p><pre>
    tim2 + (tim1 - tim2) = tim1
</pre><p>
  For the operations <tt>'-'</tt> (subtract a <a class="type" href="#types_duration">duration</a> from a <a class="type" href="#types_time">time</a>) and
  <tt>'-'</tt> (subtract two <a class="type" href="#types_time">time</a> values) holds:</p><pre>
    tim1 - (tim1 - tim2) = tim2
</pre><p></p>

<a name="types_duration"><h3>5.22 duration</h3></a>
<p>
    The type <tt><!-- ' -->duration<!-- ' --></tt> describes time and date durations.
  The <tt><!-- ' -->duration<!-- ' --></tt> functions are defined in the library
  <span class="stri">"duration.s7i"</span>.
</p><pre>
    Prefix operators:
      +         Identity
      -         Change sign
    Infix operators:
      +         Add two durations
      -         Subtract two durations
      *         Multiply a duration by an <a class="type" href="#types_integer">integer</a>
                  ( Type of left operand: <a class="type" href="#types_integer">integer</a> )
      *         Multiply a duration by an <a class="type" href="#types_integer">integer</a>
                  ( Type of right operand: <a class="type" href="#types_integer">integer</a> )
      <a class="type" href="#types_duration">duration</a> parse A   Conversion of <a class="type" href="#types_string">string</a> to <a class="type" href="#types_duration">duration</a>
                  ( Type of argument A: <a class="type" href="#types_string">string</a>,
                    <a class="type" href="#types_duration">duration</a> parse <span class="stri">"0-02-28 12:00:01"</span> => 0-02-28 12:00:01,
                    <a class="type" href="#types_duration">duration</a> parse <span class="stri">"0-13-29 12:00:01"</span> => EXCEPTION RANGE_ERROR )
    Relations:
      =, &lt;>, &lt;, &lt;=, >, >=
    Functions:
      getYears(A)  Obtains the years of a <a class="type" href="#types_duration">duration</a>
                  ( Type of result: <a class="type" href="#types_integer">integer</a> )
      getMonths(A) Obtains the months of a <a class="type" href="#types_duration">duration</a>
                  ( Type of result: <a class="type" href="#types_integer">integer</a> )
      getDays(A)   Obtains the days of a <a class="type" href="#types_duration">duration</a>
                  ( Type of result: <a class="type" href="#types_integer">integer</a> )
      getHours(A)  Obtains the hours of a <a class="type" href="#types_duration">duration</a>
                  ( Type of result: <a class="type" href="#types_integer">integer</a> )
      getMinutes(A) Obtains the minutes of a <a class="type" href="#types_duration">duration</a>
                  ( Type of result: <a class="type" href="#types_integer">integer</a> )
      getSeconds(A) Obtains the seconds of a <a class="type" href="#types_duration">duration</a>
                  ( Type of result: <a class="type" href="#types_integer">integer</a> )
      getMicroSeconds(A)  Obtains the micro seconds of a <a class="type" href="#types_duration">duration</a>
                  ( Type of result: <a class="type" href="#types_integer">integer</a> )
      toYears(A)  Return the <a class="type" href="#types_duration">duration</a> in years
                  ( Type of result: <a class="type" href="#types_integer">integer</a> )
      toMonths(A) Return the <a class="type" href="#types_duration">duration</a> in months
                  ( Type of result: <a class="type" href="#types_integer">integer</a> )
      toDays(A)   Return the <a class="type" href="#types_duration">duration</a> in days
                  ( Type of result: <a class="type" href="#types_integer">integer</a> )
      toHours(A)  Return the <a class="type" href="#types_duration">duration</a> in hours
                  ( Type of result: <a class="type" href="#types_integer">integer</a> )
      toMinutes(A) Return the <a class="type" href="#types_duration">duration</a> in minutes
                  ( Type of result: <a class="type" href="#types_integer">integer</a> )
      toSeconds(A) Return the <a class="type" href="#types_duration">duration</a> in seconds
                  ( Type of result: <a class="type" href="#types_integer">integer</a> )
      toMicroSeconds(A)  Return the <a class="type" href="#types_duration">duration</a> in micro seconds
                  ( Type of result: <a class="type" href="#types_integer">integer</a> )
      str(A)    Conversion to <a class="type" href="#types_string">string</a>
                  ( Type of result: <a class="type" href="#types_string">string</a> )
      compare(A, B) Compare function
                  ( Type of result: <a class="type" href="#types_integer">integer</a> )
      hashCode(A) Hash function
                  ( Type of result: <a class="type" href="#types_integer">integer</a> )
    Statements:
      wait(A)   Wait for given duration
</pre><p>
  For the operations <tt>'-'</tt> (negate a <a class="type" href="#types_duration">duration</a>) and
  <tt>'-'</tt> (subtract two <a class="type" href="#types_time">time</a> values) holds:</p><pre>
    (tim1 - tim2) = - (tim2 - tim1)
</pre><p></p>

<a name="types_file"><h3>5.23 file</h3></a>
<p>
    The type <tt><!-- ' -->file<!-- ' --></tt> is the interface type for sequential files.
  The <tt><!-- ' -->file<!-- ' --></tt> functions are defined in the library <span class="stri">"file.s7i"</span>.
</p><pre>
    Constants:
      STD_NULL  Standard null file
      STD_IN    Standard input of the operating system
      STD_OUT   Standard output of the operating system
      STD_ERR   Standard error output of the operating system
    Variables:
      IN        Standard input file used for file input
                  operations when no file is specified
                  ( IN is initialized with STD_IN )
      OUT       Standard output file used for file output
                  operations when no file is specified
                  ( OUT is initialized with STD_OUT )
    Relations:
      =, &lt;>
    Functions:
      open(A, B) Open external <a class="type" href="#types_file">file</a>
                  ( Type of argument A: <a class="type" href="#types_string">string</a>,
                    Type of argument B: <a class="type" href="#types_string">string</a>,
                    Type of result: <a class="type" href="#types_file">file</a>,
                    Returns STD_NULL if open was not
                    possible )
      open_utf8(A, B) Open external UTF-8 <a class="type" href="#types_file">file</a>
                  ( Type of argument A: <a class="type" href="#types_string">string</a>,
                    Type of argument B: <a class="type" href="#types_string">string</a>,
                    Type of result: <a class="type" href="#types_file">file</a>,
                    Returns STD_NULL if open was not
                    possible )
      open_utf8(A, B) Open external UTF-16 <a class="type" href="#types_file">file</a>
                  ( Type of argument A: <a class="type" href="#types_string">string</a>,
                    Type of argument B: <a class="type" href="#types_string">string</a>,
                    Type of result: <a class="type" href="#types_file">file</a>,
                    Returns STD_NULL if open was not
                    possible )
      popen(A, B) Open a pipe to a process
                  ( Type of argument A: <a class="type" href="#types_string">string</a>,
                    Type of argument B: <a class="type" href="#types_string">string</a>,
                    Type of result: <a class="type" href="#types_file">file</a>,
                    Returns STD_NULL if popen was not
                    possible )
      popen8(A, B) Open a UTF-8 pipe to a process
                  ( Type of argument A: <a class="type" href="#types_string">string</a>,
                    Type of argument B: <a class="type" href="#types_string">string</a>,
                    Type of result: <a class="type" href="#types_file">file</a>,
                    Returns STD_NULL if popen8 was not
                    possible )
      openInetSocket(port) Open local Internet client socket
                  ( Type of argument port: <a class="type" href="#types_integer">integer</a>,
                    Type of result: <a class="type" href="#types_file">file</a>,
                    Returns STD_NULL if open was not
                    possible )
      openInetSocket(addr, port) Open Internet client socket
                  ( Type of argument addr: <a class="type" href="#types_string">string</a>,
                    Type of argument port: <a class="type" href="#types_integer">integer</a>,
                    Type of result: <a class="type" href="#types_file">file</a>,
                    Returns STD_NULL if open was not
                    possible )
      length(A) Length of <a class="type" href="#types_file">file</a> A
                  ( Type of result: <a class="type" href="#types_integer">integer</a> )
      tell(A)   Return the actual <a class="type" href="#types_file">file</a> position
                  ( Type of argument: <a class="type" href="#types_file">file</a>,
                    The first position in the file is 1 )
      getc(A)   Get one character from <a class="type" href="#types_file">file</a> A
                  ( Type of result: <a class="type" href="#types_char">char</a> )
      gets(A, B) Get <a class="type" href="#types_string">string</a> with maximum length B from <a class="type" href="#types_file">file</a> A
                  ( Type of argument A: <a class="type" href="#types_integer">integer</a>,
                    Type of argument B: <a class="type" href="#types_file">file</a>,
                    Type of result: <a class="type" href="#types_string">string</a>,
                    gets(A, -1) => EXCEPTION RANGE_ERROR )
      getwd(A)  Get one word from <a class="type" href="#types_file">file</a> A
                  ( Type of result: <a class="type" href="#types_string">string</a> )
      getln(A)  Get one line from <a class="type" href="#types_file">file</a> A
                  ( Type of result: <a class="type" href="#types_string">string</a> )
      eoln(A)   End of line
                  ( Type of result: <a class="type" href="#types_boolean">boolean</a> )
      hasNext(A) A call of getc does not return the EOF character
                  ( Type of result: <a class="type" href="#types_boolean">boolean</a> )
      eof(A)    End of file
                  ( Type of result: <a class="type" href="#types_boolean">boolean</a> )
    Statements:
      write(A, B) Write <a class="type" href="#types_string">string</a> B to <a class="type" href="#types_file">file</a> A
                  ( Type of argument B: <a class="type" href="#types_string">string</a> )
      writeln(A) Write a new line to <a class="type" href="#types_file">file</a> A
      writeln(A, B) Write <a class="type" href="#types_string">string</a> B and new line to <a class="type" href="#types_file">file</a> A
                  ( Type of argument B: <a class="type" href="#types_string">string</a> )
      read(A, B) Read a word from <a class="type" href="#types_file">file</a> A into <a class="type" href="#types_string">string</a> B
                  ( Type of right operand: <a class="type" href="#types_string">string</a> )
      readln(A)  Read a line from <a class="type" href="#types_file">file</a> A
      readln(A, B) Read a line from <a class="type" href="#types_file">file</a> A into the <a class="type" href="#types_string">string</a> B
                  ( Type of right operand: <a class="type" href="#types_string">string</a> )
      backSpace(A) Write backspace to <a class="type" href="#types_file">file</a> A
      close(A)  Close <a class="type" href="#types_file">file</a> A
      flush(A)  Flush <a class="type" href="#types_file">file</a> A
      seek(A, B) Set actual file position of <a class="type" href="#types_file">file</a> A to B
                  ( Type of argument B: <a class="type" href="#types_integer">integer</a>,
                    seek(A, 1) => Set to file begin,
                    seek(A, length(A)) => Set to last position,
                    seek(A, length(A) + 1) => Set to end of file,
                    seek(A, 0) => EXCEPTION RANGE_ERROR )
</pre><p></p>

<a name="types_text"><h3>5.24 text</h3></a>
<p>
    The type <tt><!-- ' -->text<!-- ' --></tt> describes two dimensional files.
  The <tt><!-- ' -->text<!-- ' --></tt> functions are defined in the library <span class="stri">"text.s7i"</span>.
</p><pre>
    Relations:
      =, &lt;>
    Functions:
      open_window(F, A, B, C, D) Open a <font color=red>text</font>
                  ( Type of argument A: <a class="type" href="#types_integer">integer</a>,
                    Type of argument B: <a class="type" href="#types_integer">integer</a>,
                    Type of argument C: <a class="type" href="#types_integer">integer</a>,
                    Type of argument D: <a class="type" href="#types_integer">integer</a> )
      height(A) Height of the <font color=red>text</font>
                  ( Type of result: <a class="type" href="#types_integer">integer</a> )
      width(A)  Width of the <font color=red>text</font>
                  ( Type of result: <a class="type" href="#types_integer">integer</a> )
      line(A)   Current line of the <font color=red>text</font>
                  ( Type of result: <a class="type" href="#types_integer">integer</a> )
      column(A) Current column of the <font color=red>text</font>
                  ( Type of result: <a class="type" href="#types_integer">integer</a> )
    Statements:
      write(A, B) Write <a class="type" href="#types_string">string</a> B to <font color=red>text</font> A
                  ( Type of argument B: <a class="type" href="#types_string">string</a> )
      writeln(A) Write a new line to <font color=red>text</font> A
      writeln(A, B) Write <a class="type" href="#types_string">string</a> B and new line to <font color=red>text</font> A
                  ( Type of argument B: <a class="type" href="#types_string">string</a> )
      read(A, B) Read a word from <font color=red>text</font> A into <a class="type" href="#types_string">string</a> B
                  ( Type of right operand: <a class="type" href="#types_string">string</a> )
      readln(A)  Read a line from <font color=red>text</font> A
      readln(A, B) Read a line from <font color=red>text</font> A into the <a class="type" href="#types_string">string</a> B
                  ( Type of right operand: <a class="type" href="#types_string">string</a> )
      backSpace(A) Write backspace to <font color=red>text</font> A
      close(A)  Close <font color=red>text</font> A
      flush(A)  Flush <font color=red>text</font> A
      clear(A)  Clear the window
      clear(A, UP, LO, LE, RI)  Clear an area of the window
                  ( Type of argument UP: <a class="type" href="#types_integer">integer</a>
                    Type of argument LO: <a class="type" href="#types_integer">integer</a>
                    Type of argument LE: <a class="type" href="#types_integer">integer</a>
                    Type of argument RI: <a class="type" href="#types_integer">integer</a> )
      v_scroll(A) Scroll the window vertical
      h_scroll(A) Scroll the window horizontal
      color(A, B) Set foreground color of the <font color=red>text</font> A
                  ( Type of argument B: <font color=red>color</font> )
      color(A, B, C) Set foreground and background color of the <font color=red>text</font> A
                  ( Type of argument B: <font color=red>color</font>,
                    Type of argument C: <font color=red>color</font> )
      setPos(A, B, C) Set the current position of the <font color=red>text</font> A
                  ( Type of argument B: <a class="type" href="#types_integer">integer</a>
                    Type of argument C: <a class="type" href="#types_integer">integer</a> )
      setLine(A, B) Set the current line of the <font color=red>text</font> A
                  ( Type of argument B: <a class="type" href="#types_integer">integer</a> )
      setColumn(A, B) Set the current column of the <font color=red>text</font> A
                  ( Type of argument B: <a class="type" href="#types_integer">integer</a> )
      box(A)    Write a box around the window
      clear_box(A) Clear the box around the window
      cursor_on(A) Make the cursor visible
      cursor_off(A) Make the cursor invisible
</pre><p></p>

<a name="types_func"><h3>5.25 func</h3></a>
<p>
    The type <tt>'<font color=red>func baseType</font>'</tt> describes functions which return
  a <tt>'<font color=red>baseType</font>'</tt>. For example: <tt>'<font color=red>func integer</font>'</tt> describes an <tt><!-- ' --><a class="type" href="#types_integer">integer</a><!-- ' --></tt>
  function.
</p><pre>
    Values:
      ord, str, abs, sqrt, rand, A + B, A * B, A ** B,
      trunc, round, sin, cos, compare, hashCode, pos,
      replace, trim, length, keys, color, dayOfWeek,
      ...
                Every function declared with <span class="keywd">const</span> <font color=red>func</font> ... is a value

    Prefix operators:
      <span class="keywd">func</span>
      <span class="keywd">result</span>
        <span class="keywd">var</span> <font color=red>baseType</font>: result <span class="keywd">is</span> <font color=red>baseType</font>.value;
      <span class="keywd">begin</span>
        statements
      <span class="keywd">end func</span>
                Create a <font color=red>baseType</font> function
                  ( Type of <tt>'statements'</tt>: <a class="type" href="#types_proc">proc</a>,
                    Type of result: <font color=red>func baseType</font> )

      <span class="keywd">func</span>
      <span class="keywd">result</span>
        <span class="keywd">var</span> <font color=red>baseType</font>: result <span class="keywd">is</span> <font color=red>baseType</font>.value;
      <span class="keywd">local</span>
        declarations
      <span class="keywd">begin</span>
        statements
      <span class="keywd">end func</span>
                Create a <font color=red>baseType</font> function with local variables
                  ( Type of <tt>'declarations'</tt>: <a class="type" href="#types_proc">proc</a>,
                    Type of <tt>'statements'</tt>: <a class="type" href="#types_proc">proc</a>,
                    Type of result: <font color=red>func baseType</font> )

      <span class="keywd">return</span> value
                Create a function with the result type of value
                  ( Type of value: <font color=red>anyType</font> - which means: any type,
                    Type of result: <font color=red>func anyType</font> )
</pre><p>
  Functions are declared as constants with a <tt>'<font color=red>func</font>'</tt> type and
  are initialized with a <tt>'<span class="keywd">func result</span> ...'</tt> or <tt>'<span class="keywd">return</span> ...'</tt> operator.
  For example:
</p><pre>
    <span class="keywd">const</span> <font color=red>func integer</font>: tak (<span class="keywd">in</span> <a class="type" href="#types_integer">integer</a>: x, <span class="keywd">in</span> <a class="type" href="#types_integer">integer</a>: y, <span class="keywd">in</span> <a class="type" href="#types_integer">integer</a>: z) <span class="keywd">is func</span>
      <span class="keywd">result</span>
        <span class="keywd">var</span> <a class="type" href="#types_integer">integer</a>: result <span class="keywd">is</span> 0;
      <span class="keywd">begin</span>
        <span class="keywd">if</span> y >= x <span class="keywd">then</span>
          result := z;
        <span class="keywd">else</span>
          result := tak(tak(pred(x), y, z),
                        tak(pred(y), z, x),
                        tak(pred(z), x, y));
        <span class="keywd">end if</span>;
      <span class="keywd">end func</span>
</pre><p>
  Another example using the <tt>'<span class="keywd">return</span>'</tt> function:
</p><pre>
    <span class="keywd">const</span> <font color=red>func float</font>: convertRadianToDegree (<span class="keywd">in</span> <a class="type" href="#types_float">float</a>: x) <span class="keywd">is</span>
      <span class="keywd">return</span> x * 57.295779513082320876798154814114;
</pre><p>
  This <tt>'<span class="keywd">return</span>'</tt> function should not be confused with a <tt>'<span class="keywd">return</span>'</tt>
  statement. It is important to note that no <tt>'<span class="keywd">return</span>'</tt> statement
  exists. The declaration for the <tt>'<span class="keywd">return</span>'</tt> function is as follows:
</p><pre>
    <span class="keywd">const</span> <font color=red>func func aType</font>: return (<span class="keywd">ref</span> <font color=red>func aType</font> <span class="keywd">param</span>)  <span class="keywd">is action</span> <span class="stri">"PRC_RETURN"</span>;
    <span class="keywd">const</span> <font color=red>func func aType</font>: return (<span class="keywd">ref</span> <font color=red>aType</font> <span class="keywd">param</span>)       <span class="keywd">is action</span> <span class="stri">"PRC_RETURN"</span>;
</pre><p>
  The <tt>'<font color=red>func</font>'</tt> types can also be used for parameters.
  Functions which use a <tt>'<font color=red>func</font>'</tt> parameter do not evaluate this
  parameter before the function call. Instead this parameter can
  be evaluated zero or more times inside the function. For example:
</p><pre>
    <span class="keywd">const</span> <font color=red>func boolean</font>: (<span class="keywd">in</span> <a class="type" href="#types_boolean">boolean</a>: first) and (<span class="keywd">in</span> <font color=red>func boolean</font>: second) <span class="keywd">is func</span>
      <span class="keywd">result</span>
        <span class="keywd">var</span> <a class="type" href="#types_boolean">boolean</a>: result <span class="keywd">is</span> FALSE;
      <span class="keywd">begin</span>
        <span class="keywd">if</span> first <span class="keywd">then</span>
          result := second;
        <span class="keywd">end if</span>;
      <span class="keywd">end func</span>;
</pre><p>
  Here the second parameter is only evaluated when the first
  parameter is <tt>'TRUE'</tt>.
</p>

<a name="types_varfunc"><h3>5.26 varfunc</h3></a>
<p>
    The type <tt>'<font color=red>varfunc baseType</font>'</tt> describes functions which return
  a <tt>'<font color=red>baseType</font>'</tt> variable. For example: A function which returns an
  <tt><!-- ' --><a class="type" href="#types_integer">integer</a><!-- ' --></tt> variable is described with <tt>'<font color=red>varfunc integer</font>'</tt>. A call 
  of a <tt>'<font color=red>varfunc</font>'</tt> can be used at the left side of an assignment.
  Generally a <tt>'<font color=red>varfunc</font>'</tt> can be used at places where an <tt>'<span class="keywd">inout</span>'</tt>
  parameter requests a variable.
</p><pre>
    Prefix operators:
      <span class="keywd">return var</span> value;
                Create a varfunc which returns the variable <tt>'value'</tt>
                  ( Type of value: <font color=red>anyType</font> - which means: any type,
                    Accessright of value: <span class="keywd">var</span> = A variable, an <tt>'<span class="keywd">inout</span>'</tt> parameter or a <tt>'<font color=red>varfunc</font>'</tt>
                    Type of result: <font color=red>varfunc anyType</font> )
</pre><p>
    Varfunctions are used to express <tt><!-- ' --><a class="type" href="#types_array">array</a><!-- ' --></tt>, <tt><!-- ' --><a class="type" href="#types_hash">hash</a><!-- ' --></tt> and <tt>'<font color=red>struct</font>'</tt>
  accesses which can be used at the left and right side of an
  assignment. The access function for a <tt><!-- ' --><a class="type" href="#types_hash">hash</a><!-- ' --></tt> is defined as:
</p><pre>
    <span class="keywd">const</span> <font color=red>func baseType</font>: (<span class="keywd">in</span> <font color=red>hashType</font>: aHash) [ (<span class="keywd">in</span> <font color=red>keyType</font>: aKey) ] <span class="keywd">is</span>
      <span class="keywd">return</span> INDEX(aHash, aKey, hashCode(aKey), <font color=red>hashType</font>.keyCompare);

    <span class="keywd">const</span> <font color=red>varfunc baseType</font>: (<span class="keywd">inout</span> <font color=red>hashType</font>: aHash) [ (<span class="keywd">in</span> <font color=red>keyType</font>: aKey) ] <span class="keywd">is</span>
      <span class="keywd">return var</span> INDEX(aHash, aKey, hashCode(aKey), <font color=red>hashType</font>.keyCompare);
</pre><p>
  The example above shows that functions with <tt>'<span class="keywd">in</span>'</tt> and <tt>'<span class="keywd">inout</span>'</tt>
  parameters can be overloaded. At the right side of an assignment
  the <tt>'<font color=red>func</font>'</tt> is called, while at the left side the <tt>'<font color=red>varfunc</font>'</tt>
  is called. That way the access functions of <font color=red>array</font>s, <font color=red>hash</font>s
  and <font color=red>struct</font>s can be used in the usual way. 
</p>

<a name="types_void"><h3>5.27 void</h3></a>
<p>
    The type <tt>'<font color=red>void</font>'</tt> describes the empty type.
</p><pre>
    Value:
      empty     This is the only value of the type '<font color=red>void</font>'.
</pre><p></p>

<a name="types_proc"><h3>5.28 proc</h3></a>
<p>
    The type <tt>'<a class="type" href="#types_proc">proc</a>'</tt> describes procedures. The type <tt>'<a class="type" href="#types_proc">proc</a>'</tt>
  is defined as <tt>'<font color=red>func void</font>'</tt>.
</p><pre>
    Values:
      noop;
      <span class="keywd">while</span> ... <span class="keywd">do</span> ... <span class="keywd">end while</span>;
      <span class="keywd">repeat</span> ... <span class="keywd">until</span> ... ;
      writeln( ... );
      A := B;
      incr(A);
      ...
                Every procedure declared with <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: ... is a value
                The procedure <tt>'noop'</tt> does nothing and is used as empty procedure.

    Prefix operators:
      <span class="keywd">func</span>
      <span class="keywd">begin</span>
        statements
      <span class="keywd">end func</span>
                Create a procedure
                  ( Type of <tt>'statements'</tt>: <a class="type" href="#types_proc">proc</a>,
                    Type of result: <a class="type" href="#types_proc">proc</a> )

      <span class="keywd">func</span>
      <span class="keywd">local</span>
        declarations
      <span class="keywd">begin</span>
        statements
      <span class="keywd">end func</span>
                Create a procedure with local variables
                  ( Type of <tt>'declarations'</tt>: <a class="type" href="#types_proc">proc</a>,
                    Type of <tt>'statements'</tt>: <a class="type" href="#types_proc">proc</a>,
                    Type of result: <a class="type" href="#types_proc">proc</a> )
</pre><p></p>

<a name="types_type"><h3>5.29 type</h3></a>
<p>
    The type <tt>'<a class="type" href="#types_type">type</a>'</tt> describes all types.
</p><pre>
    Values:
      <font color=red>void</font>, <a class="type" href="#types_boolean">boolean</a>, <a class="type" href="#types_integer">integer</a>, <font color=red>rational</font>, <a class="type" href="#types_float">float</a>, <a class="type" href="#types_char">char</a>,
      <a class="type" href="#types_string">string</a>, <font color=red>reference</font>, <font color=red>ref_list</font>, <font color=red>color</font>, <a class="type" href="#types_time">time</a>, <a class="type" href="#types_duration">duration</a>
      <a class="type" href="#types_file">file</a>, <a class="type" href="#types_proc">proc</a>, <a class="type" href="#types_type">type</a>, ...
                Every type declared with <span class="keywd">const</span> <a class="type" href="#types_type">type</a>: ... is a value
                The type '<font color=red>void</font>' is used as empty type.
    Prefix operators:
      func      Function type
                  ( <font color=red>func char</font> => Function which returns a <a class="type" href="#types_char">char</a> )
      varfunc   Varfunc type
                  ( <font color=red>varfunc char</font> => Function which returns a <a class="type" href="#types_char">char</a> variable )
      ptr       Pointer type
                  ( <font color=red>ptr bitset</font> => Pointer to <font color=red>bitset</font> )
      array     Array type
                  ( <font color=red>array string</font> => Array of <a class="type" href="#types_string">string</a>s )
      set of    Set type
                  ( <font color=red>set of integer</font> => Set of <a class="type" href="#types_integer">integer</a> )
      subtype   Create subtype of existing type
                  ( <font color=red>subtype char</font> => Subtype of <a class="type" href="#types_char">char</a> )
    Relations:
      =, &lt;>
    Functions:
      str(A)    Conversion to <a class="type" href="#types_string">string</a>
                  ( Type of result: <a class="type" href="#types_string">string</a> )
      newtype   Create a new type
      gentype   Generate a type
      gensub(A) Generate a subtype
      typeof(A) Get the type of an expression
                  ( Type of argument A: Defined for all types,
                    typeof(1) => <a class="type" href="#types_integer">integer</a>,
                    typeof(<span class="stri">"asdf"</span>) => <a class="type" href="#types_string">string</a> )
      is_func(A)  Is this type a '<font color=red>func</font>' type
                  ( Type of result: <a class="type" href="#types_boolean">boolean</a>,
                    is_func(<font color=red>func char</font>) => TRUE,
                    is_func(<font color=red>varfunc char</font>) => FALSE )
                    is_func(<a class="type" href="#types_char">char</a>) => FALSE )
      is_varfunc(A)  Is this type a '<font color=red>varfunc</font>' type
                  ( Type of result: <a class="type" href="#types_boolean">boolean</a>,
                    is_varfunc(<font color=red>func char</font>) => FALSE,
                    is_varfunc(<font color=red>varfunc char</font>) => TRUE,
                    is_varfunc(<a class="type" href="#types_char">char</a>) => FALSE )
      result_type(A)  Get the result type of a '<font color=red>func</font>' or '<font color=red>varfunc</font>' type
                  ( result_type(<font color=red>func char</font>) => <a class="type" href="#types_char">char</a>,
                    result_type(<a class="type" href="#types_char">char</a>) => EXCEPTION RANGE_ERROR )
      is_derived(A)  Is this type derived from another type
                  ( Type of result: <a class="type" href="#types_boolean">boolean</a>,
                    is_derived(<font color=red>subtype char</font>) => TRUE )
      meta(A)       Get the type from which type A is derived
                  ( meta(<font color=red>subtype char</font>) => <a class="type" href="#types_char">char</a> )
      base_type(A)  Get the base type of an array, pointer or
                    set type
                  ( base_type(<font color=red>array char</font>) => <a class="type" href="#types_char">char</a>,
                    base_type(<font color=red>ptr string</font>) => <a class="type" href="#types_string">string</a>,
                    base_type(<font color=red>set of integer</font>) => <a class="type" href="#types_integer">integer</a> )                    
      type_number(A)  Get an unique number for a type
                  ( Type of result: <a class="type" href="#types_integer">integer</a> )
      match_obj(A)  Get the match object of a type
                  ( Type of result: <font color=red>reference</font> )
      compare(A, B) Compare function
                  ( Type of result: <a class="type" href="#types_integer">integer</a> )
      hashCode(A) Hash function
                  ( Type of result: <a class="type" href="#types_integer">integer</a> )
    Statements:
      addInterface(A, B)  Adds the interface type B to the implementation type A
      <span class="keywd">const</span> <font color=red>aType</font>: name <span class="keywd">is</span> value
                Declare constant 'name' with 'value'
      <span class="keywd">var</span> <font color=red>aType</font>: name <span class="keywd">is</span> value
                Declare variable 'name' with 'value'
</pre><p></p>

<a name="types_object"><h3>5.30 object</h3></a>
<p>
    The type <tt>'<font color=red>object</font>'</tt> is used as meta type for various types.
  This allows defining common operations for all this types.
  The type <tt>'<font color=red>object</font>'</tt> is not used as element type for container
  classes since this can be done much better and type save
  with abstract data types like <tt><!-- ' --><a class="type" href="#types_array">array</a><!-- ' --></tt>, <tt><!-- ' --><a class="type" href="#types_set">set</a><!-- ' --></tt>, <tt><!-- ' --><a class="type" href="#types_hash">hash</a><!-- ' --></tt> and
  others.
</p><pre>
    Functions:
      TRACE_OBJ(A)  Write internal information
</pre><p></p>

<a name="types_expr"><h3>5.31 expr</h3></a>
<p>
    The type <tt>'<a class="type" href="#types_expr">expr</a>'</tt> is used to describe unmatched expressions.
  These are expressions where the recognizing of the functions
  and the type check is not done yet. This is used for example
  in the definition of function bodies.
</p><pre>
    Functions:
      WRITE_EXPR(A)
                Write expr A to FILE OUT
</pre><p></p>

<a name="params_file_start"></a><p></p>
<a name="params_PARAMETERS"><h2>6. PARAMETERS</h2></a>
<!-- ============= -->
<p>
    The following subchapters introduce the parameter types of
  Seed7.
</p>

<a name="params_val_parameter"><h3>6.1 'val' parameter</h3></a>
<p>
  Value parameters are marked with the keyword <tt>'<font color=blue>val</font>'</tt>.
  A value parameter copies the value of the actual parameter.
  Value parameters are used, when copying is cheap or
  when copying  is necessary for the correct behavior.
  The function below appends a comma and a string to the
  variable <tt>'globalStri'</tt>:
</p><pre>
    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: appendStri (<font color=blue>val</font> <a class="type" href="#types_string">string</a>: stri) <font color=blue>is func</font>
      <span class="keywd">begin</span>
        globalStri &amp;:= <font color=maroon>","</font>;
        globalStri &amp;:= stri;
      <span class="keywd">end func</span>;
</pre><p>
  After doing
</p><pre>
    globalStri &amp;:= <font color=maroon>"a"</font>;
    appendStri(globalStri);
</pre><p>
  the globalStri variable contains the value <tt><font color=maroon>"a,a"</font></tt>. If the function
  header would be
</p><pre>
    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: appendStri (<span class="keywd">in</span> <a class="type" href="#types_string">string</a>: stri) <font color=blue>is func</font>
</pre><p>
  the globalStri variable would contain the value <tt><font color=maroon>"a,a,"</font></tt>. This
  difference is because of the following reasons:
</p><p>
  For arrays <tt>'<span class="keywd">in</span>'</tt> parameters are equal to <tt>'<font color=blue>ref</font>'</tt> parameters.
  When appendStri called with globalStri as parameter an unwanted
  side effect takes place: Every change of globalStri changes also
  the <tt>'<font color=blue>ref</font>'</tt> parameter stri. Changes to the <tt>'<font color=blue>ref</font>'</tt> parameter would
  also change the global variable. Such unwanted side effects can
  also take place between parameters (when at least one parameter
  is an <tt>'<span class="keywd">inout</span>'</tt> parameter).
</p><p>
  In most cases such unwanted side effects are impossible or can
  be avoided easily. When possible <tt>'<span class="keywd">in</span>'</tt> parameters should be
  preferred over <tt>'<font color=blue>val</font>'</tt> parameters.
</p><dl><dt>
  Semantics:</dt><dd>
    When calling a function a formal <tt>'<font color=blue>val</font>'</tt> parameter gets its
    value from the corresponding actual parameter. This is done
    with a create procedure ( ::= ). In the function it is only
    possible to read a formal <tt>'<font color=blue>val</font>'</tt> parameter. Changing a formal
    <tt>'<font color=blue>val</font>'</tt> parameter is not possible. When a function is left a
    <tt>'destr'</tt> procedure is called for every <tt>'<font color=blue>val</font>'</tt> parameter. Formal
    <tt>'<font color=blue>val</font>'</tt> parameters have the access right <tt>'<span class="keywd">const</span>'</tt>.
</dd></dl><p>

  Syntax:
</p><pre>
    val_parameter ::=
      '<font color=blue>val</font>' type_expression ':' identifier_declaration |
      '<font color=blue>val</font>' type_expression '<font color=blue>param</font>' .
</pre><p>

  Declaration:
</p><pre>
    $ <font color=blue>syntax</font> <a class="type" href="#types_expr">expr</a>: .val.().param <span class="keywd">is</span>                   -> 40;
    $ <font color=blue>syntax</font> <a class="type" href="#types_expr">expr</a>: .val.(). : .(<a class="type" href="#types_expr">expr</a>) <span class="keywd">is</span>              -> 40;

    <span class="keywd">const</span> <font color=red>func f_param</font>: val (<font color=blue>ref</font> <a class="type" href="#types_type">type</a> <font color=blue>param</font>) param <font color=blue>is               action</font> <font color=maroon>"DCL_VAL1"</font>;
    <span class="keywd">const</span> <font color=red>func f_param</font>: val (<font color=blue>ref</font> <a class="type" href="#types_type">type</a> <font color=blue>param</font>) : (<font color=blue>ref</font> <a class="type" href="#types_expr">expr</a> <font color=blue>param</font>) <font color=blue>is  action</font> <font color=maroon>"DCL_VAL2"</font>;
</pre><p></p>

<a name="params_ref_parameter"><h3>6.2 'ref' parameter</h3></a>
<p>
  Reference parameters are marked with the keyword <tt>'<font color=blue>ref</font>'</tt>.
  A reference parameter refers to the value of the actual parameter.
  Reference parameters are used, when copying is expensive and
  referring to the value does not change the correct bahavior.
  The function below defines the primitive action for the
  semicolon operator:
</p><pre>
    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: (ref <font color=red>void</font> <font color=blue>param</font>) ; (ref <font color=red>void</font> <font color=blue>param</font>) <span class="keywd">is</span> noop;
</pre><p>
  In this definition and other definitions of primitive actions
  <tt>'<font color=blue>ref</font>'</tt> parameters are used. For normal functions usually 
  <tt>'<span class="keywd">in</span>'</tt> parameters are used instead of <tt>'<font color=blue>ref</font>'</tt> parameters:
</p><pre>
    <span class="keywd">const</span> <font color=red>func integer</font>: total_length (<span class="keywd">in</span> <font color=red>array string</font>: arr) <font color=blue>is func</font>
      <font color=blue>result</font>
        <span class="keywd">var</span> <a class="type" href="#types_integer">integer</a>: result <span class="keywd">is</span> 0;
      <font color=blue>local</font>
        <span class="keywd">var</span> <a class="type" href="#types_integer">integer</a>: index <span class="keywd">is</span> 0;
      <span class="keywd">begin</span>
        <span class="keywd">for</span> index <span class="keywd">range</span> 1 <span class="keywd">to</span> length(arr) <span class="keywd">do</span>
          result +:= length(arr[index]);
        <span class="keywd">end for</span>;
      <span class="keywd">end func</span>;
</pre><p>
  Above function could also be defined with the following
  function head:
</p><pre>
    <span class="keywd">const</span> <font color=red>func integer</font>: total_length (<font color=blue>ref</font> <font color=red>array string</font>: arr) <font color=blue>is func</font>
</pre><p>
  Since for array types (and also for struct types) <tt>'<span class="keywd">in</span>'</tt>
  parameters are defined to act as <tt>'<font color=blue>ref</font>'</tt> parameters both
  definitions are equal. When possible <tt>'<span class="keywd">in</span>'</tt> parameters should
  be preferred over <tt>'<font color=blue>ref</font>'</tt> parameters.
</p><dl><dt>
  Semantics:</dt><dd>
    When calling a function a formal <tt>'<font color=blue>ref</font>'</tt> parameter is set to
    refer to the corresponding actual parameter. In the function
    it is only possible to read a formal <tt>'<font color=blue>ref</font>'</tt> parameter.
    Changing a formal <tt>'<font color=blue>ref</font>'</tt> parameter is not possible. Formal
    <tt>'<font color=blue>ref</font>'</tt> parameters have the access right <tt>'<span class="keywd">const</span>'</tt>.
</dd></dl><p>

  Syntax:
</p><pre>
    ref_parameter ::=
      '<font color=blue>ref</font>' type_expression ':' identifier_declaration |
      '<font color=blue>ref</font>' type_expression '<font color=blue>param</font>' .
</pre><p>

  Declaration:
</p><pre>
    $ <font color=blue>syntax</font> <a class="type" href="#types_expr">expr</a>: .ref.().param <span class="keywd">is</span>                   -> 40;
    $ <font color=blue>syntax</font> <a class="type" href="#types_expr">expr</a>: .ref.(). : .(<a class="type" href="#types_expr">expr</a>) <span class="keywd">is</span>              -> 40;

    <span class="keywd">const</span> <font color=red>func f_param</font>: ref (<font color=blue>ref</font> <a class="type" href="#types_type">type</a> <font color=blue>param</font>) param <font color=blue>is               action</font> <font color=maroon>"DCL_REF1"</font>;
    <span class="keywd">const</span> <font color=red>func f_param</font>: ref (<font color=blue>ref</font> <a class="type" href="#types_type">type</a> <font color=blue>param</font>) : (<font color=blue>ref</font> <a class="type" href="#types_expr">expr</a> <font color=blue>param</font>) <font color=blue>is  action</font> <font color=maroon>"DCL_REF2"</font>;
</pre><p></p>

<a name="params_in_parameter"><h3>6.3 'in' parameter</h3></a>
<p>
  Input parameters are marked with the keyword <tt>'<span class="keywd">in</span>'</tt>.
  Depending on the type an input parameter is either a
  value or a reference parameter. The function below
  checks if a given number is a prime number:
</p><pre>
    <span class="keywd">const</span> <font color=red>func boolean</font>: is_prime (<span class="keywd">in</span> <a class="type" href="#types_integer">integer</a>: number) <font color=blue>is func</font>
      <font color=blue>result</font>
        <span class="keywd">var</span> <a class="type" href="#types_boolean">boolean</a>: result <span class="keywd">is</span> FALSE;
      <font color=blue>local</font>
        <span class="keywd">var</span> <a class="type" href="#types_integer">integer</a>: count <span class="keywd">is</span> 2;
      <span class="keywd">begin</span>
        <span class="keywd">if</span> number = 2 <span class="keywd">then</span>
          result := TRUE;
        <span class="keywd">elsif</span> number >= 3 <span class="keywd">then</span>
          <span class="keywd">while</span> number <font color=blue>rem</font> count &lt;> 0 <font color=blue>and</font> count * count &lt;= number <span class="keywd">do</span>
            incr(count);
          <span class="keywd">end while</span>;
          result := number <font color=blue>rem</font> count &lt;> 0;
        <span class="keywd">end if</span>;
      <span class="keywd">end func</span>;
</pre><p>
  The following function defines the ex (outer) product:
</p><pre>
    <span class="keywd">const</span> <font color=red>func array array integer</font>:
        (<span class="keywd">in</span> <font color=red>array integer</font>: a) ex (<span class="keywd">in</span> <font color=red>array integer</font>: b) <font color=blue>is func</font>
      <font color=blue>return</font>
        <span class="keywd">var</span> <font color=red>array array integer</font>: result <span class="keywd">is</span> 0 times 0 times 0;
      <font color=blue>local</font>
        <span class="keywd">var</span> <a class="type" href="#types_integer">integer</a>: index1 <span class="keywd">is</span> 1;
      <span class="keywd">begin</span>
        result := length(a) <font color=blue>times</font> length(b) <font color=blue>times</font> 0;
        <span class="keywd">for</span> index1 <span class="keywd">range</span> 1 <span class="keywd">to</span> length(a) <span class="keywd">do</span>
          <span class="keywd">for</span> index2 <span class="keywd">range</span> 1 <span class="keywd">to</span> length(b) <span class="keywd">do</span>
            result[index1][index2] := a[index1] * b[index2];
          <span class="keywd">end for</span>;
        <span class="keywd">end for</span>;
      <span class="keywd">end func</span>;
</pre><p>
  Although both examples use <tt>'<span class="keywd">in</span>'</tt> parameters the parameter in the
  first example is actually a <tt>'<font color=blue>val</font>'</tt> parameter while the parameters
  in the second example are actually <tt>'<font color=blue>ref</font>'</tt> parameters. When a new
  type is created with the <tt>'newtype'</tt> function it is necessary to
  specify the meaning of the <tt>'<span class="keywd">in</span>'</tt> parameter. This is done with a
  call of the IN_PARAM_IS_VALUE or the IN_PARAM_IS_REFERENCE function
  with the new generated type as parameter. If a new type is created
  with the <tt>'subtype'</tt> function this specification is optional since
  the base type has already a specification of the <tt>'<span class="keywd">in</span>'</tt> parameter.
</p><dl><dt>
  Semantics:</dt><dd>
    Depending on the type an <tt>'<span class="keywd">in</span>'</tt> parameter is equivalent to an
    <tt>'<font color=blue>val</font>'</tt> (call by value) parameter or to an <tt>'<font color=blue>ref</font>'</tt> (call by reference)
    parameter. Formal <tt>'<span class="keywd">in</span>'</tt> parameters have the access right <tt>'<span class="keywd">const</span>'</tt>.
</dd></dl><p>

  Syntax:
</p><pre>
    in_parameter ::=
      '<span class="keywd">in</span>' type_expression ':' identifier_declaration .
</pre><p>

  Declaration:
</p><pre>
    $ <font color=blue>syntax</font> <a class="type" href="#types_expr">expr</a>: .in.().param <span class="keywd">is</span>                    -> 40;
    $ <font color=blue>syntax</font> <a class="type" href="#types_expr">expr</a>: .in.(). : .(<a class="type" href="#types_expr">expr</a>) <span class="keywd">is</span>               -> 40;

    <span class="keywd">const</span> <font color=red>func f_param</font>: in (<font color=blue>ref</font> <a class="type" href="#types_type">type</a> <font color=blue>param</font>) param <font color=blue>is                action</font> <font color=maroon>"DCL_REF1"</font>;

    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: IN_PARAM_IS_VALUE (<font color=blue>ref</font> <a class="type" href="#types_type">type</a>: aType) <font color=blue>is func</font>
      <span class="keywd">begin</span>
        <span class="keywd">const</span> <font color=red>func f_param</font>: in (<font color=blue>attr</font> <font color=red>aType</font>) : (<font color=blue>ref</font> <a class="type" href="#types_expr">expr</a> <font color=blue>param</font>) <font color=blue>is   action</font> <font color=maroon>"DCL_VAL2"</font>;
      <span class="keywd">end func</span>;

    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: IN_PARAM_IS_REFERENCE (<font color=blue>ref</font> <a class="type" href="#types_type">type</a>: aType) <font color=blue>is func</font>
      <span class="keywd">begin</span>
        <span class="keywd">const</span> <font color=red>func f_param</font>: in (<font color=blue>attr</font> <font color=red>aType</font>) : (<font color=blue>ref</font> <a class="type" href="#types_expr">expr</a> <font color=blue>param</font>) <font color=blue>is   action</font> <font color=maroon>"DCL_REF2"</font>;
      <span class="keywd">end func</span>;
</pre><p></p>

<a name="params_in_var_parameter"><h3>6.4 'in var' parameter</h3></a>
<p>
  This function computes the greatest common divisor:
</p><pre>
    <span class="keywd">const</span> <font color=red>func integer</font>: gcd (<font color=blue>in var</font> <a class="type" href="#types_integer">integer</a>: a, <font color=blue>in var</font> <a class="type" href="#types_integer">integer</a>: b) <font color=blue>is func</font>
      <font color=blue>result</font>
        <span class="keywd">var</span> <a class="type" href="#types_integer">integer</a>: result <span class="keywd">is</span> 0;
      <font color=blue>local</font>
        <span class="keywd">var</span> <a class="type" href="#types_integer">integer</a>: help <span class="keywd">is</span> 0;
      <span class="keywd">begin</span>
        <span class="keywd">while</span> a &lt;> 0 <span class="keywd">do</span>
          help := b <font color=blue>rem</font> a;
          b := a;
          a := help;
        <span class="keywd">end while</span>;
        result := b;
      <span class="keywd">end func</span>;
</pre><p></p><dl><dt>
  Semantics:</dt><dd>
    When calling a function a formal <tt>'<font color=blue>in var</font>'</tt> parameter gets its
    value from the corresponding actual parameter. This is done
    with a create procedure ( ::= ). In the function it is
    possible to read and change a formal <tt>'<font color=blue>in var</font>'</tt> parameter.
    Changing a formal <tt>'<font color=blue>in var</font>'</tt> parameter has no effect on the
    actual parameter. When a function is left a <tt>'destr'</tt> procedure
    is called for every <tt>'<font color=blue>in var</font>'</tt> parameter. Formal <tt>'<font color=blue>in var</font>'</tt>
    parameters have the access right <tt>'<span class="keywd">var</span>'</tt>.
</dd></dl><p>

  Syntax:
</p><pre>
    in_var_parameter ::=
      '<font color=blue>in var</font>' type-expression ':' identifier_declaration .
</pre><p>

  Declaration:
</p><pre>
    $ <font color=blue>syntax</font> <a class="type" href="#types_expr">expr</a>: .in.var.().param <span class="keywd">is</span>                -> 40;
    $ <font color=blue>syntax</font> <a class="type" href="#types_expr">expr</a>: .in.var.(). : .(<a class="type" href="#types_expr">expr</a>) <span class="keywd">is</span>           -> 40;

    <span class="keywd">const</span> <font color=red>func f_param</font>: in var (<font color=blue>ref</font> <a class="type" href="#types_type">type</a> <font color=blue>param</font>) <font color=blue>param</font> <font color=blue>is               action</font> <font color=maroon>"DCL_IN1VAR"</font>;
    <span class="keywd">const</span> <font color=red>func f_param</font>: in var (<font color=blue>ref</font> <a class="type" href="#types_type">type</a> <font color=blue>param</font>) : (<font color=blue>ref</font> <a class="type" href="#types_expr">expr</a> <font color=blue>param</font>) <font color=blue>is  action</font> <font color=maroon>"DCL_IN2VAR"</font>;
</pre><p></p>

<a name="params_inout_parameter"><h3>6.5 'inout' parameter</h3></a>
<p>
  This procedure doubles the given parameter 'number':
</p><pre>
    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: double (<span class="keywd">inout</span> <a class="type" href="#types_integer">integer</a>: number) <font color=blue>is func</font>
      <span class="keywd">begin</span>
        number := 2 * number;
      <span class="keywd">end func</span>;
</pre><p></p><dl><dt>
  Semantics:</dt><dd>
    When calling a function a formal <tt>'<span class="keywd">inout</span>'</tt> parameter is set to 
    refer to the corresponding actual parameter. In the function
    it is possible to read and change a formal <tt>'<span class="keywd">inout</span>'</tt> parameter.
    Changing a formal <tt>'<span class="keywd">inout</span>'</tt> parameter changes the actual
    parameter as well. Formal <tt>'<span class="keywd">inout</span>'</tt> parameters have the
    access right <tt>'<span class="keywd">var</span>'</tt>.
</dd></dl><p>

  Syntax:
</p><pre>
    inout_parameter ::=
      '<span class="keywd">inout</span>' type_expression ':' identifier_declaration .
</pre><p>

  Declaration:
</p><pre>
    $ <font color=blue>syntax</font> <a class="type" href="#types_expr">expr</a>: .inout.().param <span class="keywd">is</span>                 -> 40;
    $ <font color=blue>syntax</font> <a class="type" href="#types_expr">expr</a>: .inout.(). : .(expr) <span class="keywd">is</span>            -> 40;

    <span class="keywd">const</span> <font color=red>func f_param</font>: inout (<font color=blue>ref</font> <a class="type" href="#types_type">type</a> <font color=blue>param</font>) param <font color=blue>is                action</font> <font color=maroon>"DCL_INOUT1"</font>;
    <span class="keywd">const</span> <font color=red>func f_param</font>: inout (<font color=blue>ref</font> <a class="type" href="#types_type">type</a> <font color=blue>param</font>) : (<font color=blue>ref</font> <a class="type" href="#types_expr">expr</a> <font color=blue>param</font>) <font color=blue>is   action</font> <font color=maroon>"DCL_INOUT2"</font>;
</pre><p></p>

<a name="params_Symbol_parameter"><h3>6.6 Symbol parameter</h3></a>
<p>
  Some functions need symbols at fixed places in the parameter
  list. The following IF-statement requests the keywords <tt>'<span class="keywd">THEN</span>'</tt>,
  <tt>'<font color=blue>END</font>'</tt> and <tt>'<span class="keywd">IF</span>'</tt> at specific places:
</p><pre>
    <span class="keywd">IF</span> condition <span class="keywd">THEN</span>
      statement
    <span class="keywd">END IF</span>;
</pre><p>
  After defining the syntax of this IF-statement with
</p><pre>
    $ <font color=blue>syntax</font> <a class="type" href="#types_expr">expr</a>: .IF.().THEN.().END.IF <span class="keywd">is</span> -> 25;
</pre><p>
  the semantic can be defined with:
</p><pre>
    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: IF (<span class="keywd">in</span> <a class="type" href="#types_boolean">boolean</a>: condition) THEN
                  (<span class="keywd">in</span> <a class="type" href="#types_proc">proc</a>: statement)
                END IF <font color=blue>is func</font>

                  <span class="keywd">begin</span>
                    <span class="keywd">case</span> condition <font color=blue>of</font>
                      <span class="keywd">when</span> {TRUE}: statement;
                    <span class="keywd">end case</span>;
                  <span class="keywd">end func</span>;
</pre><p>
  The symbol parameters are just written outside the parentheses.
  A call of this statement could be:
</p><pre>
    <span class="keywd">IF</span> value &lt; maximum <span class="keywd">THEN</span>
      write(value)
    <span class="keywd">END IF</span>;
</pre><p></p><dl><dt>
  Semantics:</dt><dd>
  Symbol parameters must be defined in a syntax definition and in
  a corresponding semantic definition. In the semantic definition
  symbol parameters are written outside of the parentheses.
  In the actual parameter list the corresponding symbol of the
  formal parameter list must be written.
</dd></dl><p>

  Syntax:
</p><pre>
    symbol_parameter ::=
      name_identifier | special_identifier .
</pre><p></p>

<a name="params_attr_parameter"><h3>6.7 'attr' parameter</h3></a>
<p>
  This declaration associates a name to the type <tt>'<a class="type" href="#types_char">char</a>'</tt>:
</p><pre>
    <span class="keywd">const</span> <a class="type" href="#types_string">string</a>: name (<font color=blue>attr</font> <a class="type" href="#types_char">char</a>) <span class="keywd">is</span> <font color=maroon>"char"</font>;
</pre><p>
  This <tt>'name'</tt> can be used as follows:
</p><pre>
    writeln(name(<a class="type" href="#types_char">char</a>));
</pre><p>
  It is possible to overload such declarations:
</p><pre>
    <span class="keywd">const</span> <a class="type" href="#types_string">string</a>: name (<font color=blue>attr</font> <a class="type" href="#types_boolean">boolean</a>) <span class="keywd">is</span> <font color=maroon>"boolean"</font>;
    <span class="keywd">const</span> <a class="type" href="#types_string">string</a>: name (<font color=blue>attr</font> <font color=red>float</font>) <span class="keywd">is</span> <font color=maroon>"float"</font>;
</pre><p>
  An <tt>'<font color=blue>attr</font>'</tt> parameter can be used in a function also:
</p><pre>
    <span class="keywd">const</span> <font color=red>func char</font>: (<font color=blue>attr</font> <a class="type" href="#types_char">char</a>) parse (<span class="keywd">in</span> string</font>: <font color=red>stri</font>) <font color=blue>is func</font>
      <font color=blue>result</font>
        <span class="keywd">var</span> <a class="type" href="#types_char">char</a>: result <span class="keywd">is</span> <font color=maroon>' '</font>;
      <span class="keywd">begin</span>
        <span class="keywd">if</span> length(stri) >= 1 <span class="keywd">then</span>
          result := stri[1];
        <span class="keywd">else</span>
          <font color=blue>raise</font> RANGE_ERROR;
        <span class="keywd">end if</span>;
      <span class="keywd">end func</span>;
</pre><p></p><dl><dt>
  Semantics:</dt><dd>
  The actual parameter which corresponds to an <tt>'<font color=blue>attr</font>'</tt> parameter
  must be the type mentioned in the declaration of the <tt>'<font color=blue>attr</font>'</tt> parameter.
  An <tt>'<font color=blue>attr</font>'</tt> parameter does not declare a formal parameter
  variable which could be used inside a function.
</dd></dl><p>

  Syntax:
</p><pre>
    attr_parameter ::=
      '<font color=blue>attr</font>' type_expression .
</pre><p></p>

<a name="objects_file_start"></a><p></p>
<a name="objects_OBJECT_ORIENTATION"><h2>7. OBJECT ORIENTATION</h2></a>
<!-- ===================== -->
<p>
    Many people will be familiar with object-orientation from
  languages like C++, Smalltalk, and Java. Seed7 follows the
  route of declaring "interfaces". An interface is a common
  set of operations supported by an object. For instance
  cars, motorcycles, lorries and vans can all accelerate or
  brake, if they are legal to drive on the road they can all
  indicate right and left.
</p><p>
  This view isn't new. C provides a primitive form of
  interfacing. When you write to a <tt>'file'</tt> in C you use the same
  interface (<tt>'fprintf'</tt>) for hard disk files, console output and
  printer output. The implementation does totally different
  things for these files. Unix has used the "everything is a
  file" philosophy for ages (even network communication uses
  the <tt>'file'</tt> interface (see <tt><!-- ' --><a class="type" href="#file_Sockets">sockets</a><!-- ' --></tt>)).
</p><p>
  For short: An interface defines which methods are supported
  while the implementation describes how this is done.
  Several types with different method implementations can
  share the same interface. 
</p>

<a name="objects_interface_and_implementation"><h3>7.1 Interface and implementation</h3></a>
<p>
  Seed7 uses interface types and implementation types.
  Objects declared with an interface type refer to a value
  which has an implementation type. This situation is
  described with the following picture:
</p><pre>
              +----------------+
    declared  |    interface   |&lt;--- interface type
    object:   |     object     |     (known at compile-time)
              +----------------+
                      |
                      | refer to value
                      V
              +----------------+
    value:    | implementation |&lt;--- implementation type
              |     object     |     (unknown at compile-time)
              +----------------+
</pre><p>
  The interface type of an object can always be determined
  at compile-time. Several implementation types can belong
  to one interface type (they implement the interface type).
  E.g.: The types <tt><!-- ' -->null_file<!-- ' --></tt>, <tt><!-- ' -->external_file<!-- ' --></tt> and <tt><!-- ' -->socket<!-- ' --></tt>
  implement the <tt><!-- ' --><a class="type" href="#types_file">file</a><!-- ' --></tt> interface. On the other hand: An
  implementation type can also implement several interface
  types. An interface object can only refer to a value with
  an implementation type that implements the interface.
  E.g.: A <tt><!-- ' --><span class="type">shape</span><!-- ' --></tt> variable cannot refer to a <tt><!-- ' -->socket<!-- ' --></tt>.
</p><p>
  A new interface type is declared with:
</p><pre>
    <span class="keywd">const</span> <a class="type" href="#types_type">type</a>: shape <font color=blue>is new interface</font>;
</pre><p>
  Interface (DYNAMIC) functions describe what can be done
  with objects of an interface type. An interface function
  for a <tt><!-- ' --><span class="type">shape</span><!-- ' --></tt> could be:
</p><pre>
    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: draw (<span class="keywd">in</span> <font color=red>shape</font> <font color=blue>param</font>, <span class="keywd">inout</span> <font color=red>window</font> <font color=blue>param</font>) <font color=blue>is DYNAMIC</font>;
</pre><p>
  Now we know that it is possible to <tt>'draw'</tt> a <tt><!-- ' --><span class="type">shape</span><!-- ' --></tt> to a
  <tt><!-- ' --><span class="type">window</span><!-- ' --></tt>. How this drawing is done is described in the
  implementation type. An implementation type for <tt><!-- ' --><span class="type">shape</span><!-- ' --></tt> is:
</p><pre>
    <span class="keywd">const</span> <a class="type" href="#types_type">type</a>: circle <font color=blue>is new struct</font>
        <span class="keywd">var</span> <a class="type" href="#types_integer">integer</a>: radius <span class="keywd">is</span> 0;
      <font color=blue>end struct</font>;
</pre><p>
  The fact that the type <tt><!-- ' --><span class="type">circle</span><!-- ' --></tt> is an implementation type of
  <tt><!-- ' --><span class="type">shape</span><!-- ' --></tt> is described with:
</p><pre>
    type_implements_interface(<font color=red>circle</font>, <font color=red>shape</font>);
</pre><p>
  The function which implements <tt>'draw'</tt> for <tt><!-- ' --><span class="type">circle</span><!-- ' -->s</tt> is:
</p><pre>
    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: draw (<span class="keywd">in</span> <font color=red>circle</font>: aCircle, <span class="keywd">inout</span> <font color=red>window</font>: aWindow) <font color=blue>is func</font>
      <span class="keywd">begin</span>
        circle(aWindow.win, aWindow.currX, aWindow.currY,
            aCircle.radius, aWindow.foreground);
      <span class="keywd">end func</span>;
</pre><p>
  In the classic OOP philosophy a message is sent to an object.
  To express this situation classic OO languages use the
  following method call syntax:
</p><pre>
    param1.method(param2, param3)
</pre><p>
  In the method the receiving object is referred with <tt>'self'</tt> or
  <tt>'this'</tt>. The other parameters use the same mechanisms as in
  procedural programming languages (value or reference parameter). 
  Seed7 uses a different approach: Instead of an implicit defined
  <tt>'self'</tt> or <tt>'this'</tt> parameter, all formal parameters get a user
  defined name. To reflect this symmetric approach a Seed7 method
  call looks like a normal function call:
</p><pre>
    method(param1, param2, param3)
</pre><p>
  The definition of the <tt>'draw'</tt> function above uses the formal
  parameter <tt>'aCircle'</tt> in the role of a <tt>'self'</tt> or <tt>'this'</tt> parameter.
  Formal parameters which have an implementation type are
  automatically in the role of a <tt>'self'</tt> or <tt>'this'</tt> parameter.
</p><p>
  A function to create new circle objects can also be helpful:
</p><pre>
    <span class="keywd">const</span> <font color=red>func circle</font>: circle (<span class="keywd">in</span> <a class="type" href="#types_integer">integer</a>: radius) <font color=blue>is func</font>
      <font color=blue>result</font>
        <span class="keywd">var</span> <font color=red>circle</font>: result <span class="keywd">is</span> <font color=red>circle</font>.value;
      <span class="keywd">begin</span>
        result.radius := radius;
      <span class="keywd">end func</span>;
</pre><p>
  Now we can draw a <tt><!-- ' --><span class="type">circle</span><!-- ' --></tt> object with:
</p><pre>
    draw(circle(50), aWindow);
</pre><p>
  Although the statement above does exactly what it should
  do and the separation between interface and implementation
  is obvious, most OO enthusiasts would not be thrilled. All
  decisions which implementation function should be called
  can be made at compile time. To please the OO fans such
  decisions must be made at runtime. This decision process
  is called dynamic dispatch.
</p>

<a name="objects_dynamic_dispatch"><h3>7.2 Dynamic dispatch</h3></a>
<p>
    When the implementation types have different implementations
  of the same function (method) a dynamic dispatch is necessary.
  The type of the value, referred by an interface object, is not
  known at compile-time. In this case the program must decide at
  runtime which implementation of the function should be invoked.
  This decision is based on the implementation type of the value
  (referred by the interface object). A dynamic dispatch only
  takes place when a DYNAMIC (or interface) function is called.
  When the program is analyzed (in the interpreter or compiler)
  the interface functions take precedence over normal functions
  when both are to be considered.
</p><p>
  To demonstrate the dynamic dispatch we define the type <tt><!-- ' --><span class="type">line</span><!-- ' --></tt>
  which also implements a <tt><!-- ' --><span class="type">shape</span><!-- ' --></tt>:
</p><pre>
    <span class="keywd">const</span> <a class="type" href="#types_type">type</a>: line <font color=blue>is new struct</font>
        <span class="keywd">var</span> <a class="type" href="#types_integer">integer</a>: xLen <span class="keywd">is</span> 0.0;
        <span class="keywd">var</span> <a class="type" href="#types_integer">integer</a>: yLen <span class="keywd">is</span> 0.0;
      <span class="keywd">end func</span>;

    type_implements_interface(<font color=red>line</font>, <font color=red>shape</font>);

    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: draw (<span class="keywd">in</span> <font color=red>line</font>: aLine, <span class="keywd">in</span> <font color=red>window</font>: aWindow) <font color=blue>is func</font>
      <span class="keywd">begin</span>
        line(aWindow.win, aWindow.currX, aWindow.currY,
            aLine.xLen, aLine.yLen, aWindow.foreground);
      <span class="keywd">end func</span>;

    <span class="keywd">const</span> <font color=red>func line</font>: line (<span class="keywd">in</span> <a class="type" href="#types_integer">integer</a>: xLen, <span class="keywd">in</span> <a class="type" href="#types_integer">integer</a>: yLen) <font color=blue>is func</font>
      <font color=blue>result</font>
        <span class="keywd">var</span> <font color=red>line</font>: result <span class="keywd">is</span> <font color=red>line</font>.value;
      <span class="keywd">begin</span>
        result.xLen := xLen;
        result.yLen := yLen;
      <span class="keywd">end func</span>;
</pre><p>
  In addition we define a normal (not DYNAMIC) function 
  which draws <tt><!-- ' --><span class="type">shape</span><!-- ' -->s</tt> to the <tt>'currWindow'</tt>:
</p><pre>
    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: draw (<span class="keywd">in</span> <font color=red>shape</font>: aShape) <font color=blue>is func</font>
      <span class="keywd">begin</span>
        draw(aShape, currWindow);
      <span class="keywd">end func</span>;
</pre><p>
  In the example above the call of the (DYNAMIC) interface
  function is <tt>'draw(aShape, currWindow)'</tt>. The
  interface function declared with
</p><pre>
    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: draw (<span class="keywd">in</span> <font color=red>shape</font> <font color=blue>param</font>, <span class="keywd">inout</span> <font color=red>window</font> <font color=blue>param</font>) <font color=blue>is DYNAMIC</font>;
</pre><p>
  decides which implementation function has to be called.
  The dynamic dispatch works as follows:
</p><ul>
<li><!--   -  -->For all parameters which have an interface type the
    parameter is replaced with its value. In this case the
    parameter <tt>'aShape'</tt> is replaced by a value of type
    <tt><!-- ' --><span class="type">circle</span><!-- ' --></tt> or <tt><!-- ' --><span class="type">line</span><!-- ' --></tt>.</li>

<li><!--   -  -->The same logic as in the analyze part of the compiler
    is used to find the matching function. In this search
    normal functions take precedence over interface functions.</li>

<li><!--   -  -->When a matching function is found it is called.</li>
</ul><p>
  This process describes the principal logic of the dynamic
  dispatch. In practice it is not necessary to execute the
  analyze part of the compiler during the runtime. It is
  possible to simplify this process with tables and function
  pointers.
</p>

<a name="objects_inheritance"><h3>7.3 Inheritance</h3></a>
<p>
    When a new <tt><!-- ' --><a class="type" href="#types_struct">struct</a><!-- ' --></tt> type is defined it is possible to
  inherit from an existing <tt><!-- ' --><a class="type" href="#types_struct">struct</a><!-- ' --></tt> type. E.g.:
</p><pre>
    <span class="keywd">const</span> <a class="type" href="#types_type">type</a>: external_file <font color=blue>is sub</font> <font color=red>null_file</font> <font color=blue>struct</font>
        <span class="keywd">var</span> <font color=red>clib_file</font>: ext_file <span class="keywd">is</span> PRIMITIVE_NULL_FILE;
        <span class="keywd">var</span> <a class="type" href="#types_string">string</a>: name <span class="keywd">is</span> <font color=maroon>""</font>;
      <font color=blue>end struct</font>;
</pre><p>
  That way the type <tt><!-- ' -->external_file<!-- ' --></tt> inherits the fields and
  methods of <tt><!-- ' -->null_file<!-- ' --></tt>, which is declared as:
</p><pre>
    <span class="keywd">const</span> <a class="type" href="#types_type">type</a>: null_file <font color=blue>is new struct</font>
      <span class="keywd">var</span> <a class="type" href="#types_char">char</a>: bufferChar <span class="keywd">is</span> '\n';
      <span class="keywd">var</span> <a class="type" href="#types_boolean">boolean</a>: io_empty <span class="keywd">is</span> FALSE;
      <span class="keywd">var</span> <a class="type" href="#types_boolean">boolean</a>: io_ok <span class="keywd">is</span> TRUE;
    <font color=blue>end struct</font>;
</pre><p>
  In most situations it makes sense when the implementation
  types inherit from a basic implementation type such as
  <tt><!-- ' -->null_file<!-- ' --></tt>. That way it is possible to define functions
  which are inherited by all derived implementation types.
  In the standard library <tt><!-- ' -->getln<!-- ' --></tt> is such a function:
<p><pre>
    <span class="keywd">const</span> <font color=red>func string</font>: getln (<span class="keywd">inout</span> <font color=red>null_file</font>: aFile) <font color=blue>is func</font>
      <font color=blue>result</font>
        <span class="keywd">var</span> <a class="type" href="#types_string">string</a>: stri <span class="keywd">is</span> "";
      <font color=blue>local</font>
        <span class="keywd">var</span> <a class="type" href="#types_string">string</a>: buffer <span class="keywd">is</span> "";
      <span class="keywd">begin</span>
        buffer := gets(aFile, 1);
        <span class="keywd">while</span> buffer &lt;> "\n" <font color=blue>and</font> buffer &lt;> "" <span class="keywd">do</span>
          stri &amp;:= buffer;
          buffer := gets(aFile, 1);
        <span class="keywd">end while</span>;
        aFile.bufferChar := buffer[1];
      <span class="keywd">end func</span>;
</pre><p>
  All inherited types of <tt><!-- ' -->null_file<!-- ' --></tt> inherit the function
  <tt><!-- ' -->getln<!-- ' --></tt>, but they are also free to redefine it. In the
  <tt><!-- ' -->getln<!-- ' --></tt> function above the function call <tt>'gets(aFile, 1)'</tt>
  uses the (DYNAMIC) interface function:
</p><pre>
    <span class="keywd">const</span> <font color=red>func string</font>: gets (<span class="keywd">inout</span> <a class="type" href="#types_file">file</a> <font color=blue>param</font>, <span class="keywd">in</span> <a class="type" href="#types_integer">integer</a> <font color=blue>param</font>) <font color=blue>is DYNAMIC</font>;
</pre><p>
  In other OO languages the distinction between interface type
  and basic implementation type is not done. Such languages
  either use a dynamic dispatch for every method call (as Java
  does) or need a keyword to request a dynamic dispatch (as C++
  does with the <tt>'virtual'</tt> keyword).
</p><p>
  When assignments take place between inherited implementation
  types it is important to note that structure assignments are
  done with (deep) copies. Naturally such assignments can only
  copy the elements that are present in both structures.
  In the following example just the <tt><!-- ' -->null_file<!-- ' --></tt> elements
  are copied from <tt>'anExternalFile'</tt> to <tt>'aNullFile'</tt>:
</p><pre>
    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: example <font color=blue>is func</font>
      <font color=blue>local</font>
        <span class="keywd">var</span> <font color=red>null_file</font>: aNullFile <span class="keywd">is</span> <font color=red>null_file</font>.value;
        <span class="keywd">var</span> <font color=red>external_file</font>: anExternalFile <span class="keywd">is</span> <font color=red>external_file</font>.value;
      <span class="keywd">begin</span>
        aNullFile := anExternalFile;
        write(aNullFile, "hello");
      <span class="keywd">end func</span>;
</pre><p>
  Although the variable <tt>'anExternalFile'</tt> is assigned to
  <tt>'aNullFile'</tt>, the statement <tt>'write(aNullFile, "hello")'</tt>
  calls the <tt><!-- ' -->write<!-- ' --></tt> function (method) of the type <tt><!-- ' -->null_file<!-- ' --></tt>.
</p><p>
  A new interface type can also inherit from an existing
  interface type:
</p><pre>
    <span class="keywd">const</span> <a class="type" href="#types_type">type</a>: shape <font color=blue>is sub</font> <font color=red>object</font> <font color=blue>interface</font>;
</pre><p>
  Although inheritance is a very powerful feature it should
  be used with care. In many situations it makes more sense
  that a new type has an element of another type (so called
  has-a relation) instead of inheriting from that type (so
  called is-a relation).
</p>

<a name="objects_class_methods"><h3>7.4 Class methods</h3></a>
<p>
    Many object-oriented programming languages support methods
  that are associated with a class instead of an instantiated
  object. Such methods are called class methods or static
  methods. Seed7 supports class methods via attribute (<tt>'<font color=blue>attr</font>'</tt>)
  parameters which allow that a function is attached to a <tt><!-- ' --><a class="type" href="#types_type">type</a><!-- ' --></tt>:
</p><pre>
    <span class="keywd">const</span> <font color=red>func circle</font>: create (<font color=blue>attr</font> <font color=red>circle</font>, <span class="keywd">in</span> <a class="type" href="#types_integer">integer</a>: radius) <span class="keywd">is</span>
      <font color=blue>return</font> circle(radius);
</pre><p>
  This <tt>'create'</tt> function is attached to the type <tt><!-- ' --><span class="type">circle</span><!-- ' --></tt> and can be called with
</p><pre>
    create(<font color=red>circle</font>, 10)
</pre><p>
  Many languages require that the class name must precede the
  method name when a class method is called (E.g. <tt>'circle::create(10)'</tt>
  in C++). In contrast to that <tt>'<font color=blue>attr</font>'</tt> parameters are not
  restricted to a specific parameter position. They can be used
  in any parameter position as in the following example:
</p><pre>
    <span class="keywd">const</span> <font color=red>func circle</font>: create (<span class="keywd">in</span> <a class="type" href="#types_integer">integer</a>: radius, <font color=blue>attr</font> <font color=red>circle</font>) <span class="keywd">is</span>
      <font color=blue>return</font> circle(radius);
</pre><p>
  This function can be called with
</p><pre>
    create(10, <font color=red>circle</font>)
</pre><p>
  Attribute parameters can be used for any type not just for
  interface and implementation types. Objects which do not
  have a function type such as a character constant can also
  be attached to a type:
</p><pre>
    <span class="keywd">const</span> <a class="type" href="#types_char">char</a>: (<font color=blue>attr</font> <a class="type" href="#types_char">char</a>) . value <span class="keywd">is</span> <font color=maroon>' '</font>;
</pre><p>
  This way attributes can be used to specify properties
  of a type such as its default <tt>'value'</tt>.
  Programming languages such as Seed7 which support function
  definitions outside a class can also use normal functions
  instead of class methods. It is a matter of tast if a
  function should be grouped to a type or if it should
  exist stand alone and is called with:
</p><pre>
    circle(10)
</pre><p>
</p>

<a name="objects_multiple_dispatch"><h3>7.5 Multiple dispatch</h3></a>
<p>
    The Seed7 object system allows multiple dispatch (not to
  be confused with multiple inheritance). The methods are
  not assigned to one type (class). The decision which
  function (method) is called at runtime is done based upon
  the types of several arguments. The classic object
  orientation is a special case where a method is connected
  to one class and the dispatch decision is done based on
  the type of the <tt>'self'</tt> or <tt>'this'</tt> parameter.
  The classic object orientation is a single dispatch system.
</p><p>
  In the following example the type <tt><!-- ' --><span class="type">Number</span><!-- ' --></tt> is introduced
  which is capable to unify numerical types. The type
  <tt><!-- ' --><span class="type">Number</span><!-- ' --></tt> is an interface type which defines
  the interface function for the <tt>'+'</tt> operation:
</p><pre>
    <span class="keywd">const</span> <a class="type" href="#types_type">type</a>: Number <font color=blue>is sub</font> <font color=red>object</font> <font color=blue>interface</font>;

    <span class="keywd">const</span> <font color=red>func Number</font>: (<span class="keywd">in</span> <font color=red>Number</font> <font color=blue>param</font>) + (<span class="keywd">in</span> <font color=red>Number</font> <font color=blue>param</font>) <font color=blue>is DYNAMIC</font>;
</pre><p>
  The interface type <tt><!-- ' --><span class="type">Number</span><!-- ' --></tt> can represent an <tt>'<span class="type">Integer</span>'</tt> or a <tt>'<span class="type">Float</span>'</tt>:
</p><pre>
    <span class="keywd">const</span> <a class="type" href="#types_type">type</a>: Integer <font color=blue>is new struct</font>
        <span class="keywd">var</span> <a class="type" href="#types_integer">integer</a>: val <span class="keywd">is</span> 0;
      <font color=blue>end struct</font>;

    type_implements_interface(<span class="type">Integer</span>, <font color=red>Number</font>);

    <span class="keywd">const</span> <a class="type" href="#types_type">type</a>: Float <font color=blue>is new struct</font>
        <span class="keywd">var</span> <a class="type" href="#types_float">float</a>: val <span class="keywd">is</span> 0.0;
      <font color=blue>end struct</font>;

    type_implements_interface(<span class="type">Float</span>, <font color=red>Number</font>);
</pre><p>
  The declarations of the converting <tt>'+'</tt> operators are:
</p><pre>
    <span class="keywd">const</span> <font color=red>func Float</font>: (<span class="keywd">in</span> <span class="type">Integer</span>: a) + (<span class="keywd">in</span> <span class="type">Float</span>: b) <font color=blue>is func</font>
      <font color=blue>result</font>
        <span class="keywd">var</span> <span class="type">Float</span>: result <span class="keywd">is</span> <span class="type">Float</span>.value;
      <span class="keywd">begin</span>
        result.val := flt(a.val) + b.val;
      <span class="keywd">end func</span>;

    <span class="keywd">const</span> <font color=red>func Float</font>: (<span class="keywd">in</span> <span class="type">Float</span>: a) + (<span class="keywd">in</span> <span class="type">Integer</span>: b) <font color=blue>is func</font>
      <font color=blue>result</font>
        <span class="keywd">var</span> <span class="type">Float</span>: result <span class="keywd">is</span> <span class="type">Float</span>.value;
      <span class="keywd">begin</span>
        result.val := a.val + flt(b.val);
      <span class="keywd">end func</span>;
</pre><p>
  The declarations of the normal <tt>'+'</tt> operators (which do not convert) are:
</p><pre>
    <span class="keywd">const</span> <font color=red>func Integer</font>: (<span class="keywd">in</span> <span class="type">Integer</span>: a) + (<span class="keywd">in</span> <span class="type">Integer</span>: b) <font color=blue>is func</font>
      <font color=blue>result</font>
        <span class="keywd">var</span> <span class="type">Integer</span>: result <span class="keywd">is</span> <span class="type">Integer</span>.value;
      <span class="keywd">begin</span>
        result.val := a.val + b.val;
      <span class="keywd">end func</span>;

    <span class="keywd">const</span> <font color=red>func Float</font>: (<span class="keywd">in</span> <span class="type">Float</span>: a) + (<span class="keywd">in</span> <span class="type">Float</span>: b) <font color=blue>is func</font>
      <font color=blue>result</font>
        <span class="keywd">var</span> <span class="type">Float</span>: result <span class="keywd">is</span> <span class="type">Float</span>.value;
      <span class="keywd">begin</span>
        result.val := a.val + b.val;
      <span class="keywd">end func</span>;
</pre><p>
  The type <tt><!-- ' --><span class="type">Number</span><!-- ' --></tt> can be extended to support other
  operators and there can be also implementations using
  <tt><!-- ' --><a class="type" href="#types_complex">complex</a><!-- ' --></tt>, <tt><!-- ' --><a class="type" href="#types_bigInteger">bigInteger</a><!-- ' --></tt>, <tt><!-- ' --><a class="type" href="#types_bigRational">bigRational</a><!-- ' --></tt>, etc. . That way
  <tt><!-- ' --><span class="type">Number</span><!-- ' --></tt> can be used as universal type for math
  calculation. Further extending can lead to an universal
  type. Such an universal type is loved by proponents of
  dynamic typed languages, but there are also good reasons
  to have distinct types for different purposes.
</p>

<a name="objects_replacing_pointers"><h3>7.6 Replacing pointers with interface types</h3></a>
<p>
    Many languages have the concept of a pointer. It is possible
  to implement data structures, such as lists and trees, with
  pointers. Although Seed7 supports the concept of a pointer, they
  are not well suited to describe such data structures. Instead of
  pointers interface types can be used. This way list, trees and
  other advanced data structures can be defined.
</p><p>
  The following example shows how to do this:
  The interface type <tt><!-- ' --><span class="type">element</span><!-- ' --></tt> will be used as "pointer":
</p><pre>
    <span class="keywd">const</span> <a class="type" href="#types_type">type</a>: element <font color=blue>is new interface</font>;
</pre><p>
  An implementation type for the empty <tt><!-- ' --><span class="type">element</span><!-- ' --></tt> (emptyElement)
  can be used as basic implementation type from which other
  implementation types can inherit:
</p><pre>
    <span class="keywd">const</span> <a class="type" href="#types_type">type</a>: emptyElement <font color=blue>is new struct
      end struct</font>;
</pre><p>
  That the implementation type <tt><!-- ' --><span class="type">emptyElement</span><!-- ' --></tt> implements the
  interface type <tt><!-- ' --><span class="type">element</span><!-- ' --></tt> is described with:
</p><pre>
    type_implements_interface(<font color=red>emptyElement</font>, <font color=red>element</font>);
</pre><p>
  Since every Seed7 expression has exactly one type, it is
  necessary to define a special <tt>'NIL'</tt> value (used with  <tt>'<span class="type">element</span>.NIL'</tt>)
  for the type <tt><!-- ' --><span class="type">element</span><!-- ' --></tt>:
</p><pre>
    <span class="keywd">const</span> <font color=red>element</font>: (<font color=blue>attr</font> element) . NIL <span class="keywd">is</span> <font color=red>emptyElement</font>.value;
</pre><p>
  Now the struct with two "pointers" and an <tt><!-- ' --><a class="type" href="#types_integer">integer</a><!-- ' --></tt> can be
  declared:
</p><pre>
    <span class="keywd">const</span> <a class="type" href="#types_type">type</a>: treeElement <font color=blue>is sub</font> <font color=red>emptyElement</font> <font color=blue>struct</font>
        <span class="keywd">var</span> <font color=red>element</font>: left <span class="keywd">is</span> <font color=red>element</font>.NIL;
        <span class="keywd">var</span> <font color=red>element</font>: right <span class="keywd">is</span> <font color=red>element</font>.NIL;
        <span class="keywd">var</span> <a class="type" href="#types_integer">integer</a>: item <span class="keywd">is</span> 0;
      <font color=blue>end struct</font>;
</pre><p>
  Finally the type <tt><!-- ' --><span class="type">treeElement</span><!-- ' --></tt> is defined as implementation
  of the type <tt><!-- ' --><span class="type">element</span><!-- ' --></tt>:
</p><pre>
    type_implements_interface(<font color=red>treeElement</font>, <font color=red>element</font>);
</pre><p>
  To allow the direct access to the structure elements <tt>'left'</tt>, <tt>'right'</tt>
  and <tt>'item'</tt> for objects of type <tt><!-- ' --><span class="type">element</span><!-- ' --></tt> the following declarations
  are necessary:
</p><pre>
    <span class="keywd">const</span> <font color=red>func    element</font>: (<font color=blue>ref</font>   <font color=red>element</font> <font color=blue>param</font>).left  <font color=blue>is DYNAMIC</font>;
    <span class="keywd">const</span> <font color=red>varfunc element</font>: (<span class="keywd">inout</span> <font color=red>element</font> <font color=blue>param</font>).left  <font color=blue>is DYNAMIC</font>;
    <span class="keywd">const</span> <font color=red>func    element</font>: (<font color=blue>ref</font>   <font color=red>element</font> <font color=blue>param</font>).right <font color=blue>is DYNAMIC</font>;
    <span class="keywd">const</span> <font color=red>varfunc element</font>: (<span class="keywd">inout</span> <font color=red>element</font> <font color=blue>param</font>).right <font color=blue>is DYNAMIC</font>;
    <span class="keywd">const</span> <font color=red>func    integer</font>: (<font color=blue>ref</font>   <font color=red>element</font> <font color=blue>param</font>).item  <font color=blue>is DYNAMIC</font>;
    <span class="keywd">const</span> <font color=red>varfunc integer</font>: (<span class="keywd">inout</span> <font color=red>element</font> <font color=blue>param</font>).item  <font color=blue>is DYNAMIC</font>;
</pre><p>
  When all this was declared the following code is possible:
</p><pre>
    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: addItem (<span class="keywd">inout</span> <font color=red>element</font>: anElem, <span class="keywd">in</span> <a class="type" href="#types_integer">integer</a>: item) <font color=blue>is func</font>
      <span class="keywd">begin</span>
        <span class="keywd">if</span> anElem = <font color=red>element</font>.NIL <span class="keywd">then</span>
          anElem := xalloc(<font color=red>treeElement</font>.value);
          anElem.item := item;
        <span class="keywd">elsif</span> item < anElem.item <span class="keywd">then</span>
          addItem(anElem.left, item);
        <span class="keywd">elsif</span> item > anElem.item <span class="keywd">then</span>
          addItem(anElem.right, item);
        <span class="keywd">end if</span>;
      <span class="keywd">end func</span>;

    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: listItems (<span class="keywd">in</span> <font color=red>element</font>: anElem) <font color=blue>is func</font>
      <span class="keywd">begin</span>
        <span class="keywd">if</span> anElem &lt;> <font color=red>element</font>.NIL <span class="keywd">then</span>
          listItems(anElem.left);
          write(" " &lt;&amp; anElem.item);
          listItems(anElem.right);
        <span class="keywd">end if</span>;
      <span class="keywd">end func</span>;

    <span class="keywd">const</span> <font color=red>func integer</font>: sum (<span class="keywd">in</span> <font color=red>element</font>: anElem) <font color=blue>is func</font>
      <font color=blue>result</font>
        <span class="keywd">var</span> <a class="type" href="#types_integer">integer</a>: result <span class="keywd">is</span> 0;
      <span class="keywd">begin</span>
        <span class="keywd">if</span> anElem &lt;> <font color=red>element</font>.NIL <span class="keywd">then</span>
          result := anElem.item + sum(anElem.left) + sum(anElem.right);
        <span class="keywd">end if</span>;
      <span class="keywd">end func</span>;
</pre><p>
  New elements can be created with the function 'xalloc'.
  This way interface and implementation types help to provide the
  pointer functionality.
</p><p>
  Pointers and interface types are not always the best solution.
  Abstract data types like dynamic arrays, hash tables, struct
  types and set types can also be used to declare data structures.
</p>
<a name="file_file_start"></a><p></p>
<a name="file_THE_FILE_SYSTEM"><h2>8. THE FILE SYSTEM</h2></a>
<!-- ================== -->
<p>
    The file system is used for communication in various ways.
  For example: To write strings on the screen we use the
  following statements:
</p><pre>
    write(<span class="stri">"hello world"</span>);
    writeln;
</pre><p>
  The procedure <tt><!-- ' -->write<!-- ' --></tt> writes a given string and <tt><!-- ' -->writeln<!-- ' --></tt> means: Write newline.
  We can also write data of various types with <tt>'write'</tt>:
</p><pre>
    write(<span class="stri">"result = "</span>);
    write(number <span class="keywd">div</span> 5);
    write(<span class="stri">" "</span>);
    writeln(<span class="keywd">not</span> error);
</pre><p>
  The <tt>'writeln'</tt> above writes data and then terminates the line.
  This is equal to a <tt>'write'</tt> followed by a <tt>'writeln'</tt>. Instead of
  multiple write statements the <tt><!-- ' -->&lt;&amp;<!-- ' --></tt> operator can be used to
  concatenate the elements to be written:
</p><pre>
    writeln(<span class="stri">"result = "</span> &lt;&amp; number <span class="keywd">div</span> 5 &lt;&amp; <span class="stri">" "</span> &lt;&amp; <span class="keywd">not</span> error);
</pre><p>
  The <tt><!-- ' -->&lt;&amp;<!-- ' --></tt> operator needs a <tt><!-- ' --><a class="type" href="#types_string">string</a><!-- ' --></tt> as left operand and
  is overloaded for various types as right operand. To allow things like
</p><pre>
    write(next_time &lt;&amp; <span class="stri">" \r"</span>);
</pre><p>
  the <tt><!-- ' -->&lt;&amp;<!-- ' --></tt> operator is also overloaded for various types as
  left operand and a <tt><!-- ' --><a class="type" href="#types_string">string</a><!-- ' --></tt> as right operand.
  This allows you to concatenate several objects with <tt><!-- ' -->&lt;&amp;<!-- ' --></tt> when
  at least the first or the second object is a <tt><!-- ' --><a class="type" href="#types_string">string</a><!-- ' --></tt>.
  We can also read data from the keyboard:
</p><pre>
    write(<span class="stri">"Amount? "</span>);
    read(amount);
</pre><p>
  The user is allowed to use backspace and sends the input
  to the program with the RETURN-key. To let the user respond
  with the RETURN-key we can write:
</p><pre>
    writeln(<span class="stri">"Type RETURN"</span>);
    readln;
</pre><p>
  To read a line of data we can use <tt>'readln'</tt>:
</p><pre>
    write(<span class="stri">"Your comment? "</span>);
    readln(user_comment_string);
</pre><p>
  In the previous examples all <tt>'read'</tt> statements read from the
  file <tt><!-- ' -->IN<!-- ' --></tt> and all <tt>'write'</tt> statements write to the file <tt><!-- ' -->OUT<!-- ' --></tt>. The
  files <tt><!-- ' -->IN<!-- ' --></tt> and <tt><!-- ' -->OUT<!-- ' --></tt> are initialized with <tt><!-- ' -->STD_IN<!-- ' --></tt> and <tt><!-- ' -->STD_OUT<!-- ' --></tt>
  which are the stdin and stdout files of the operating system.
  (Usually the keyboard and the screen). When we want to write
  to other files we use write statements with the file as first
  parameter. To write a line of text to the file <tt><span class="stri">"info.fil"</span></tt> we
  use the following statements:
</p><pre>
    info_file := open(<span class="stri">"info.fil"</span>, <span class="stri">"w"</span>);
    writeln(info_file, <span class="stri">"This is the first line of the info file."</span>);
    close(info_file);
</pre><p>
  First the external file is opened for writing and then it is
  used. To read the file back in the string <tt>'stri'</tt> we write:
</p><pre>
    info_file := open(<span class="stri">"info.fil"</span>, <span class="stri">"r"</span>);
    readln(info_file, stri);
    close(info_file);
</pre><p>
  It is also possible to write values of other types to
  <tt>'info_file'</tt>:
</p><pre>
    writeln(info_file, number);
</pre><p>
  Here the <tt>'number'</tt> is converted to a string which is written
  to the file. A <tt>'number'</tt> is read back with:
</p><pre>
    readln(info_file, number);
</pre><p>
  For doing I/O to a window on the screen we write:
</p><pre>
    window1 := open_window(screen, 10, 10, 5, 60);
    box(window1);
    setPos(window1, 3, 1);
    write(window1, <span class="stri">"hello there"</span>);
</pre><p>
  This opens the window <tt>'window1'</tt> on the <tt>'screen'</tt> at the position
  10, 10. This window has 5 lines and 60 columns. A box (of
  characters: - | + ) is written to surround the <tt>'window1'</tt> and
  finally the string <tt><span class="stri">"hello there"</span></tt> is written in the window
  <tt>'window1'</tt> at Position 3, 1. If we want to clear the <tt>'window1'</tt>
  we write:
</p><pre>
    clear(window1);
</pre><p>
  Files can be used for much more things. Here is a list of
  goals for a file system:
</p><ul>
    <li><!-- -  -->A concept which provides conversions from arbitrary
      types to strings and back.</li>

    <li><!-- -  -->Basic input and output operations to process a file
      character wise, word wise or line wise.</li>

    <li><!-- -  -->Input and output statements which combine input with
      conversion respectively conversion with output.</li>

    <li><!-- -  -->Simple read and write statements for standard
      input and output for arbitrary types.</li>

    <li><!-- -  -->Standard input and output files and the possibility
      to route the standard I/O to any file.</li>

    <li><!-- -  -->Access to operating system files and devices.</li>

    <li><!-- -  -->An interface which allows the user to define
      his own file types.</li>
</ul><p>
  In the following subchapters we discuss each of these goals.
</p>

<a name="file_Conversion_to_strings_and_back"><h3>8.1 Conversion to strings and back</h3></a>
<p>
    We archive the goal of doing I/O for arbitrary types with
  two conversion functions. In order to do I/O with a type
  the <tt><!-- ' --><span class="func">str</span><!-- ' --></tt> and <tt><!-- ' --><span class="op">parse</span><!-- ' --></tt> functions must be defined for that
  type. As an example we show the conversion functions for the
  type <tt><!-- ' --><a class="type" href="#types_boolean">boolean</a><!-- ' --></tt>:
</p><pre>
    <span class="keywd">const</span> <span class="type">func string</span>: str (<span class="keywd">in</span> <span class="type">boolean</span>: aBool) <span class="keywd">is func</span>
      <span class="keywd">result</span>
        <span class="keywd">var</span> <span class="type">string</span>: result <span class="keywd">is</span> <span class="stri">""</span>;
      <span class="keywd">begin</span>
        <span class="keywd">if</span> aBool <span class="keywd">then</span>
          result := <span class="stri">"TRUE"</span>;
        <span class="keywd">else</span>
          result := <span class="stri">"FALSE"</span>;
        <span class="keywd">end if</span>;
      <span class="keywd">end func</span>;

    <span class="keywd">const</span> <span class="type">func boolean</span>: (<span class="keywd">attr</span> <span class="type">boolean</span>) parse (<span class="keywd">in</span> <span class="type">string</span>: stri) <span class="keywd">is func</span>
      <span class="keywd">result</span>
        <span class="keywd">var</span> <span class="type">boolean</span>: result <span class="keywd">is</span> FALSE;
      <span class="keywd">begin</span>
        <span class="keywd">if</span> stri = <span class="stri">"TRUE"</span> <span class="keywd">then</span>
          result := TRUE;
        <span class="keywd">elsif</span> stri = <span class="stri">"FALSE"</span> <span class="keywd">then</span>
          result := FALSE;
        <span class="keywd">else</span>
          raise RANGE_ERROR;
        <span class="keywd">end if</span>;
      <span class="keywd">end func</span>;
</pre><p>
  The <tt><!-- ' -->str<!-- ' --></tt> function must deliver a corresponding string for
  every value of the type. The <tt><!-- ' -->parse<!-- ' --></tt> operator parses a string
  and delivers the converted value as result. If the conversion
  is not successful the exception RANGE_ERROR is raised. The
  attribute used with <tt><!-- ' --><span class="op">parse</span><!-- ' --></tt> allows that it is overloaded for
  different types.
</p><p>
  After defining the <tt><!-- ' --><span class="func">str</span><!-- ' --></tt> and <tt><!-- ' --><span class="op">parse</span><!-- ' --></tt> functions for a type the
  <tt><!-- ' -->enable_io<!-- ' --></tt> function can be called for this type as in:
</p><pre>
    enable_io(<span class="type">boolean</span>);
</pre><p>
  The <tt><!-- ' -->enable_io<!-- ' --></tt> template declares various io functions like
  <tt>'read'</tt>, <tt>'write'</tt> and others for the provided type (in this
  example <tt><!-- ' --><a class="type" href="#types_boolean">boolean</a><!-- ' --></tt>). If only output (or only input) is needed
  for a type it is possible to define just <tt><!-- ' --><span class="func">str</span><!-- ' --></tt> (or <tt><!-- ' --><span class="op">parse</span><!-- ' --></tt>)
  and activate just <tt><!-- ' -->enable_output<!-- ' --></tt> (or <tt><!-- ' -->enable_input<!-- ' --></tt>).
</p><p>
  There is also a formatting operator called <tt><!-- ' -->lpad<!-- ' --></tt> which is based
  on the <tt><!-- ' --><span class="func">str</span><!-- ' --></tt> function. The statements
</p><pre>
    write(12 <span class="keywd">lpad</span> 6);
    write(3 <span class="keywd">lpad</span> 6);
    writeln(45 <span class="keywd">lpad</span> 6);
    write(678 <span class="keywd">lpad</span> 6);
    write(98765 <span class="keywd">lpad</span> 6);
    writeln(4321 <span class="keywd">lpad</span> 6);
</pre><p>
  produce the following output:
</p><pre>
        12     3    45
       678 98765  4321
</pre><p>
  As we see the <tt><!-- ' -->lpad<!-- ' --></tt> operator can be used to produce right
  justified output. There is also <tt><!-- ' -->rpad<!-- ' --></tt> operator to produce
  left justified output. The basic definitions of the <tt><!-- ' -->lpad<!-- ' --></tt>
  and <tt><!-- ' -->rpad<!-- ' --></tt> operators work on strings and are as follows:
</p><pre>
    <span class="keywd">const</span> <span class="type">func string</span>: (<span class="keywd">ref</span> <span class="type">string</span>: stri) lpad (<span class="keywd">in</span> <span class="type">integer</span>: leng) <span class="keywd">is func</span>
      <span class="keywd">result</span>
        <span class="keywd">var</span> <span class="type">string</span>: result <span class="keywd">is</span> <span class="stri">""</span>;
      <span class="keywd">begin</span>
        <span class="keywd">if</span> leng > length(stri) <span class="keywd">then</span>
          result := <span class="stri">" "</span> <span class="keywd">mult</span> leng - length(stri) & stri;
        <span class="keywd">else</span>
          result := stri;
        <span class="keywd">end if</span>;
      <span class="keywd">end func</span>;

    <span class="keywd">const</span> <span class="type">func string</span>: (<span class="keywd">ref</span> <span class="type">string</span>: stri) rpad (<span class="keywd">in</span> <span class="type">integer</span>: leng) <span class="keywd">is func</span>
      <span class="keywd">result</span>
        <span class="keywd">var</span> <span class="type">string</span>: result <span class="keywd">is</span> <span class="stri">""</span>;
      <span class="keywd">begin</span>
        <span class="keywd">if</span> leng > length(stri) <span class="keywd">then</span>
          result := stri & <span class="stri">" "</span> <span class="keywd">mult</span> leng - length(stri);
        <span class="keywd">else</span>
          result := stri;
        <span class="keywd">end if</span>;
      <span class="keywd">end func</span>;
</pre><p>
  The <tt><!-- ' -->enable_io<!-- ' --></tt> template contains definitions of <tt><!-- ' -->lpad<!-- ' --></tt> and <tt><!-- ' -->rpad<!-- ' --></tt>
  to work on the type specified with <tt><!-- ' -->enable_io<!-- ' --></tt>:
</p><pre>
    <span class="keywd">const</span> <span class="type">func string</span>: (<span class="keywd">in</span> <span class="type">aType</span>: aValue) lpad (<span class="keywd">in</span> <span class="type">integer</span>: leng) <span class="keywd">is func</span>
      <span class="keywd">result</span>
        <span class="keywd">var</span> <span class="type">string</span>: stri <span class="keywd">is</span> <span class="stri">""</span>;
      <span class="keywd">begin</span>
        stri := str(aValue) <span class="keywd">lpad</span> leng;
      <span class="keywd">end func</span>;

    <span class="keywd">const</span> <span class="type">func string</span>: (<span class="keywd">in</span> <span class="type">aType</span>: aValue) rpad (<span class="keywd">in</span> <span class="type">integer</span>: leng) <span class="keywd">is func</span>
      <span class="keywd">result</span>
        <span class="keywd">var</span> <span class="type">string</span>: stri <span class="keywd">is</span> <span class="stri">""</span>;
      <span class="keywd">begin</span>
        stri := str(aValue) <span class="keywd">rpad</span> leng;
      <span class="keywd">end func</span>;
</pre><p>
  For <tt><!-- ' --><a class="type" href="#types_float">float</a><!-- ' --></tt> values exists an additional way to convert them to
  strings. The <tt><!-- ' -->digits<!-- ' --></tt> operator allows the specification of a
  precision. For example the statements
</p><pre>
    writeln(3.1415 <span class="keywd">digits</span> 2);
    writeln(4.0 <span class="keywd">digits</span> 2);
</pre><p>
  produce the following output:
</p><pre>
    3.14
    4.00
</pre><p>
  A combination with the <tt><!-- ' -->lpad<!-- ' --></tt> operator as in
</p><pre>
    writeln(3.1415 <span class="keywd">digits</span> 2 <span class="keywd">lpad</span> 6);
    writeln(99.9 <span class="keywd">digits</span> 2 <span class="keywd">lpad</span> 6);
</pre><p>
  is also possible and produces the following output:
</p><pre>
      3.14
     99.90
</pre><p></p>

<a name="file_Basic_input_and_output_operations"><h3>8.2 Basic input and output operations</h3></a>
<p>
    To allow arbitrary user defined file-types beside the
  operating system files we chose a model in which the
  I/O methods are assigned to the type of the file-value and
  not to the type of the file-variable. This allows a file
  variable to point to any file-value. The file-variables
  have the type <tt><!-- ' --><a class="type" href="#types_file">file</a><!-- ' --></tt>, which is the interface type for sequencial
  files. For the operating system files and for each user
  defined file a file-type must be declared which has the
  I/O methods defined. These file-types are derived (direct
  or indirect) from the type <tt><!-- ' -->null_file<!-- ' --></tt> for which all I/O
  methods are defined upon a base of basic string I/O
  methods. So for a new user defined file-type only the
  basic string I/O methods must be defined.
</p><p>
  The two basic I/O methods defined for <tt><!-- ' -->null_file<!-- ' --></tt> are
</p><pre>
    <span class="keywd">const</span> <span class="type">proc</span>: write (<span class="keywd">ref</span> <span class="type">null_file</span>: aFile, <span class="keywd">in</span> <span class="type">string</span>: stri) <span class="keywd">is</span> noop;
    <span class="keywd">const</span> <span class="type">string</span>: gets (<span class="keywd">ref</span> <span class="type">null_file</span>: aFile, <span class="keywd">ref</span> <span class="type">integer</span>: maxLength) <span class="keywd">is</span> <span class="stri">""</span>;
</pre><p>
  A <tt><!-- ' -->write<!-- ' --></tt> to <tt><!-- ' -->null_file<!-- ' --></tt> with any string has no effect.
  Reading any number of characters with <tt><!-- ' -->gets<!-- ' --></tt> from
  <tt><!-- ' -->null_file<!-- ' --></tt> delivers the empty string. When a user defined
  file type is declared these are the two methods, which must
  be redefined, for the new file-type. Based upon these
  two methods three more methods are defined for
  <tt><!-- ' -->null_file<!-- ' --></tt>, named  <tt><!-- ' -->getc<!-- ' --></tt>, <tt><!-- ' -->getwd<!-- ' --></tt> and <tt><!-- ' -->getln<!-- ' --></tt>.
  These methods get a character, a word and a line
  respectively. A word is terminated by a space, a tab
  or a linefeed. A line is terminated by a linefeed.
  This methods need not to be redefined for a user defined
  file type but for performance reasons they can also be
  redefined. The definitions for <tt><!-- ' -->getc<!-- ' --></tt>, <tt><!-- ' -->getwd<!-- ' --></tt> and <tt><!-- ' -->getln<!-- ' --></tt> for
  <tt><!-- ' -->null_file<!-- ' --></tt> are
</p><pre>
    <span class="keywd">const</span> <span class="type">func char</span>: getc (<span class="keywd">inout</span> <span class="type">null_file</span>: aFile) <span class="keywd">is func</span>
      <span class="keywd">result</span>
        <span class="keywd">var</span> <span class="type">char</span>: ch <span class="keywd">is</span> <span class="stri">' '</span>;
      <span class="keywd">local</span>
        <span class="keywd">var</span> <span class="type">string</span>: buffer <span class="keywd">is</span> <span class="stri">""</span>;
      <span class="keywd">begin</span>
        buffer := gets(aFile, 1);
        <span class="keywd">if</span> buffer = <span class="stri">""</span> <span class="keywd">then</span>
          ch := EOF;
        <span class="keywd">else</span>
          ch := buffer[1];
        <span class="keywd">end if</span>;
      <span class="keywd">end func</span>;

    <span class="keywd">const</span> <span class="type">func string</span>: getwd (<span class="keywd">inout</span> <span class="type">null_file</span>: aFile) <span class="keywd">is func</span>
      <span class="keywd">result</span>
        <span class="keywd">var</span> <span class="type">string</span>: stri <span class="keywd">is</span> <span class="stri">""</span>;
      <span class="keywd">local</span>
        <span class="keywd">var</span> <span class="type">string</span>: buffer <span class="keywd">is</span> <span class="stri">""</span>;
      <span class="keywd">begin</span>
        <span class="keywd">repeat</span>
          buffer := gets(aFile, 1);
        <span class="keywd">until</span> buffer &lt;> <span class="stri">" "</span> <span class="keywd">and</span> buffer &lt;> <span class="stri">"\t"</span>;
        <span class="keywd">while</span> buffer &lt;> <span class="stri">" "</span> <span class="keywd">and</span> buffer &lt;> <span class="stri">"\t"</span> <span class="keywd">and</span>
            buffer &lt;> <span class="stri">"\n"</span> <span class="keywd">and</span> buffer &lt;> <span class="stri">""</span> <span class="keywd">do</span>
          stri &amp;:= buffer;
          buffer := gets(aFile, 1);
        <span class="keywd">end while</span>;
        <span class="keywd">if</span> buffer = <span class="stri">""</span> <span class="keywd">then</span>
          aFile.bufferChar := EOF;
        <span class="keywd">else</span>
          aFile.bufferChar := buffer[1];
        <span class="keywd">end if</span>;
      <span class="keywd">end func</span>;

    <span class="keywd">const</span> <span class="type">func string</span>: getln (<span class="keywd">inout</span> <span class="type">null_file</span>: aFile) <span class="keywd">is func</span>
      <span class="keywd">result</span>
        <span class="keywd">var</span> <span class="type">string</span>: stri <span class="keywd">is</span> <span class="stri">""</span>;
      <span class="keywd">local</span>
        <span class="keywd">var</span> <span class="type">string</span>: buffer <span class="keywd">is</span> <span class="stri">""</span>;
      <span class="keywd">begin</span>
        buffer := gets(aFile, 1);
        <span class="keywd">while</span> buffer &lt;> <span class="stri">"\n"</span> <span class="keywd">and</span> buffer &lt;> <span class="stri">""</span> <span class="keywd">do</span>
          stri &amp;:= buffer;
          buffer := gets(aFile, 1);
        <span class="keywd">end while</span>;
        <span class="keywd">if</span> buffer = <span class="stri">""</span> <span class="keywd">then</span>
          aFile.bufferChar := EOF;
        <span class="keywd">else</span>
          aFile.bufferChar := buffer[1];
        <span class="keywd">end if</span>;
      <span class="keywd">end func</span>;
</pre><p>
  Note that <tt><!-- ' -->getwd<!-- ' --></tt> skips leading spaces and tabs while <tt><!-- ' -->getc<!-- ' --></tt> and
  <tt><!-- ' -->getln<!-- ' --></tt> do not.
  When <tt><!-- ' -->getc<!-- ' --></tt>, <tt><!-- ' -->getwd<!-- ' --></tt> or <tt><!-- ' -->getln<!-- ' --></tt> is not defined for a new user defined
  file type the declarations from the <tt><!-- ' -->null_file<!-- ' --></tt> are used instead.
  These declarations are based on the method <tt><!-- ' --><a class="func" href="#..libraries/file_gets(inout_file,in_integer)">gets</a><!-- ' --></tt> which must be
  defined for every new user defined file-type.
</p><p>
  Note that there is an assignment to the variable <tt>'bufferChar'</tt>.
  This variable is an element of <tt><!-- ' -->null_file<!-- ' --></tt> and therefore also
  an element of all derived file types. This allows an
  <tt>'eoln'</tt> function to test if the last <tt><!-- ' -->getwd<!-- ' --></tt> or <tt><!-- ' -->getln<!-- ' --></tt> reach the end
  of a line. Here is a definition of the <tt>'eoln'</tt> function:
</p><pre>
    <span class="keywd">const</span> <span class="type">func boolean</span>: eoln (<span class="keywd">ref</span> <span class="type">null_file</span>: aFile) <span class="keywd">is func</span>
      <span class="keywd">result</span>
        <span class="keywd">var</span> <span class="type">boolean</span>: result <span class="keywd">is</span> TRUE;
      <span class="keywd">begin</span>
        result := aFile.bufferChar = '\n';
      <span class="keywd">end func</span>;
</pre><p>
  Besides assigning a value to <tt>'bufferChar'</tt> in <tt><!-- ' -->getwd<!-- ' --></tt> and <tt><!-- ' -->getln<!-- ' --></tt>
  and using it in <tt>'eoln'</tt> the standard <tt><!-- ' --><a class="type" href="#types_file">file</a><!-- ' --></tt> functions do nothing
  with <tt>'bufferChar'</tt>. The functions of the <span class="stri">"scanfile.s7i"</span> library
  use the <tt>'bufferChar'</tt> variable as current character in the scan
  process. As such all functions of the <span class="stri">"scanfile.s7i"</span> library
  assume that the first character to be processed is always in
  <tt>'bufferChar'</tt>. Since the standard <tt><!-- ' --><a class="type" href="#types_file">file</a><!-- ' --></tt> functions do not have
  this behavior, care has to be taken when mixing scanner and
  file functions.
</p><p>
  The next declarations allows various I/O operations for strings:
</p><pre>
    <span class="keywd">const</span> <span class="type">proc</span>: writeln (<span class="keywd">inout</span> <span class="type">file</span>: aFile, <span class="keywd">in</span> <span class="type">string</span>: stri) <span class="keywd">is func</span>
      <span class="keywd">begin</span>
        write(aFile, stri);
        writeln(aFile);
      <span class="keywd">end func</span>;

    <span class="keywd">const</span> <span class="type">proc</span>: read (<span class="keywd">inout</span> <span class="type">file</span>: aFile, <span class="keywd">inout</span> <span class="type">string</span>: stri) <span class="keywd">is func</span>
      <span class="keywd">begin</span>
        stri := getwd(aFile);
        aFile.io_empty := stri = <span class="stri">""</span>;
        aFile.io_ok := TRUE;
      <span class="keywd">end func</span>;

    <span class="keywd">const</span> <span class="type">proc</span>: readln (<span class="keywd">inout</span> <span class="type">file</span>: aFile, <span class="keywd">inout</span> <span class="type">string</span>: stri) <span class="keywd">is func</span>
      <span class="keywd">begin</span>
        stri := getln(aFile);
        aFile.io_empty := stri = <span class="stri">""</span>;
        aFile.io_ok := TRUE;
      <span class="keywd">end func</span>;
</pre><p></p>

<a name="file_Input_and_output_with_conversion"><h3>8.3 Input and output with conversion</h3></a>
<p>
    Normally we need a combination of an I/O operation with
  a conversion operation. There are several functions which are
  based on the <tt><!-- ' --><span class="func">str</span><!-- ' --></tt> and <tt><!-- ' --><span class="op">parse</span><!-- ' --></tt> conversions and on the basic
  I/O-functions. The declaration of this functions is done by
  the templates <tt><!-- ' -->enable_io<!-- ' --></tt>, <tt><!-- ' -->enable_input<!-- ' --></tt> and <tt><!-- ' -->enable_output<!-- ' --></tt>.
  The templates <tt><!-- ' -->enable_io<!-- ' --></tt> and <tt><!-- ' -->enable_output<!-- ' --></tt> define the following
  <tt><!-- ' -->write<!-- ' --></tt> function:
</p><pre>
    <span class="keywd">const</span> <span class="type">proc</span>: write (<span class="keywd">in</span> <span class="type">file</span>: aFile, <span class="keywd">in</span> <span class="type">aType</span>: aValue) <span class="keywd">is func</span>
      <span class="keywd">begin</span>
        write(aFile, str(aValue));
      <span class="keywd">end func</span>;
</pre><p>
  The templates <tt><!-- ' -->enable_io<!-- ' --></tt> and <tt><!-- ' -->enable_input<!-- ' --></tt> define the following
  <tt><!-- ' -->read<!-- ' --></tt> and <tt><!-- ' -->readln<!-- ' --></tt> functions:
</p><pre>
    <span class="keywd">const</span> <span class="type">proc</span>: read (<span class="keywd">inout</span> <span class="type">file</span>: aFile, <span class="keywd">inout</span> <span class="type">aType</span>: aValue) <span class="keywd">is func</span>
      <span class="keywd">local</span>
        <span class="keywd">var</span> <span class="type">string</span>: stri <span class="keywd">is</span> <span class="stri">""</span>;
      <span class="keywd">begin</span>
        stri := getwd(aFile);
        aFile.io_empty := stri = <span class="stri">""</span>;
        <span class="keywd">block</span>
          aValue := <span class="type">aType</span> <span class="op">parse</span> stri;
          aFile.io_ok := TRUE;
        <span class="keywd">exception</span>
          <span class="keywd">catch</span> RANGE_ERROR:
            aFile.io_ok := FALSE;
        <span class="keywd">end block</span>;
      <span class="keywd">end func</span>;

    <span class="keywd">const</span> <span class="type">proc</span>: readln (<span class="keywd">inout</span> <span class="type">file</span>: aFile, <span class="keywd">inout</span> <span class="type">aType</span>: aValue) <span class="keywd">is func</span>
      <span class="keywd">local</span>
        <span class="keywd">var</span> <span class="type">string</span>: stri <span class="keywd">is</span> <span class="stri">""</span>;
      <span class="keywd">begin</span>
        stri := getln(aFile);
        aFile.io_empty := stri = <span class="stri">""</span>;
        <span class="keywd">block</span>
          aValue := <span class="type">aType</span> <span class="op">parse</span> stri;
          aFile.io_ok := TRUE;
        <span class="keywd">exception</span>
          <span class="keywd">catch</span> RANGE_ERROR:
            aFile.io_ok := FALSE;
        <span class="keywd">end block</span>;
      <span class="keywd">end func</span>;
</pre><p>
  The next two declarations define <tt>'writeln'</tt> and <tt>'backSpace'</tt>:
</p><pre>
    <span class="keywd">const</span> <span class="type">proc</span>: writeln (<span class="keywd">ref</span> <span class="type">external_file</span>: aFile) <span class="keywd">is func</span>
      <span class="keywd">begin</span>
        write(aFile, <span class="stri">"\n"</span>);
      <span class="keywd">end func</span>;

    <span class="keywd">const</span> <span class="type">proc</span>: backSpace (<span class="keywd">ref</span> <span class="type">external_file</span>: aFile) <span class="keywd">is func</span>
      <span class="keywd">begin</span>
        write(aFile, <span class="stri">"\b \b"</span>);
      <span class="keywd">end func</span>;
</pre><p></p>

<a name="file_Simple_read_and_write_statements"><h3>8.4 Simple read and write statements</h3></a>
<p>
    The simple input/output for the standard I/O-files are
  <tt>'read'</tt> and <tt>'write'</tt> which are defined with <tt><!-- ' -->enable_io<!-- ' --></tt>. Simple
  I/O may look like:
</p><pre>
    write(<span class="stri">"Amount? "</span>);
    read(amount);
</pre><p>
  <tt>'read'</tt> and <tt>'write'</tt> use the files <tt><!-- ' -->IN<!-- ' --></tt> and <tt><!-- ' -->OUT<!-- ' --></tt>, which are described
  in the next chapter.  Here is the definition of the <tt>'read'</tt> and
  <tt>'write'</tt> procedures done with <tt><!-- ' -->enable_io<!-- ' --></tt>:
</p><pre>
    <span class="keywd">const</span> <span class="type">proc</span>: read (<span class="keywd">inout</span> <span class="type">aType</span>: aValue) <span class="keywd">is func</span>
      <span class="keywd">begin</span>
        read(IN, aValue);
      <span class="keywd">end func</span>;

    <span class="keywd">const</span> <span class="type">proc</span>: readln (<span class="keywd">inout</span> <span class="type">aType</span>: aValue) <span class="keywd">is func</span>
      <span class="keywd">begin</span>
        readln(IN, aValue);
      <span class="keywd">end func</span>;

    <span class="keywd">const</span> <span class="type">proc</span>: write (<span class="keywd">in</span> <span class="type">aType</span>: aValue) <span class="keywd">is func</span>
      <span class="keywd">begin</span>
        write(OUT, aValue);
      <span class="keywd">end func</span>;

    <span class="keywd">const</span> <span class="type">proc</span>: writeln (<span class="keywd">in</span> <span class="type">aType</span>: aValue) <span class="keywd">is func</span>
      <span class="keywd">begin</span>
        write(OUT, aValue);
        writeln(OUT);
      <span class="keywd">end func</span>;
</pre><p>
  Additional procedures defined outside of <tt><!-- ' -->enable_io<!-- ' --></tt> are:
</p><pre>
    <span class="keywd">const</span> <span class="type">proc</span>: readln <span class="keywd">is func</span>
      <span class="keywd">local</span>
        <span class="keywd">var</span> <span class="type">string</span>: stri <span class="keywd">is</span> <span class="stri">""</span>;
      <span class="keywd">begin</span>
        stri := getln(IN);
        IN.io_empty := stri = <span class="stri">""</span>;
        IN.io_ok := TRUE;
      <span class="keywd">end func</span>;

    <span class="keywd">const</span> <span class="type">proc</span>: read (NL) <span class="keywd">is func</span>
      <span class="keywd">begin</span>
        readln;
      <span class="keywd">end func</span>;

    <span class="keywd">const</span> <span class="type">proc</span>: writeln <span class="keywd">is func</span>
      <span class="keywd">begin</span>
        writeln(OUT);
      <span class="keywd">end func</span>;

    <span class="keywd">const</span> <span class="type">proc</span>: write (NL) <span class="keywd">is func</span>
      <span class="keywd">begin</span>
        writeln(OUT);
      <span class="keywd">end func</span>;
</pre><p>
  As an example when you call
</p><pre>
    readln(number);
</pre><p>
  the readln(integer) procedure calls
</p><pre>
    readln(IN, number);
</pre><p>
  if the file IN has not redefined readln(IN, integer) this
  procedure calls
</p><pre>
    stri := getln(IN);
</pre><p>
  and <tt>'getln'</tt> may call gets(IN, 1) in a loop or may be defined
  for the file <tt><!-- ' -->IN<!-- ' --></tt>. Finally the <tt><!-- ' --><span class="op">parse</span><!-- ' --></tt> function converts the
  string read into an <tt><!-- ' --><a class="type" href="#types_integer">integer</a><!-- ' --></tt> and assigns it to <tt>'number'</tt>
</p><pre>
    number := <span class="type">integer</span> <span class="op">parse</span> stri;
</pre><p></p>

<a name="file_Standard_input_and_output_files"><h3>8.5 Standard input and output files</h3></a>
<p>
    The standard I/O files are <tt><!-- ' -->IN<!-- ' --></tt> for input and <tt><!-- ' -->OUT<!-- ' --></tt> for output.
  <tt><!-- ' -->IN<!-- ' --></tt> and <tt><!-- ' -->OUT<!-- ' --></tt> are <tt><!-- ' --><a class="type" href="#types_file">file</a><!-- ' --></tt> variables, which are defined as follows:
</p><pre>
    <span class="keywd">var</span> <span class="type">file</span>: IN <span class="keywd">is</span> STD_IN;
    <span class="keywd">var</span> <span class="type">file</span>: OUT <span class="keywd">is</span> STD_OUT;
</pre><p>
  The files <tt><!-- ' -->STD_IN<!-- ' --></tt> and <tt><!-- ' -->STD_OUT<!-- ' --></tt> are the standard input and
  output files of the operating system (Usually the keyboard and
  the screen). Because <tt><!-- ' -->IN<!-- ' --></tt> and <tt><!-- ' -->OUT<!-- ' --></tt> are variables redirection of
  standard input or standard output can be done easily by
  assigning a new value to them:
</p><pre>
    IN := OTHER_FILE;
</pre><p>
  After that all <tt>'read'</tt> statements refer to <tt>OTHER_FILE</tt>.
  Most operating systems have also a stderr file which
  can be accessed via the name <tt><!-- ' -->STD_ERR<!-- ' --></tt>. If you want to
  write error messages to the screen even when stdout
  is redirected elsewhere you can write:
</p><pre>
    writeln(STD_ERR, <span class="stri">"ERROR MESSAGE"</span>);
</pre><p>
  To redirect the standard output to <tt>'STD_ERR'</tt> you can write:
</p><pre>
    OUT := STD_ERR;
</pre><p>
  There is also a file <tt><!-- ' -->STD_NULL<!-- ' --></tt> defined. Anything written to
  it is ignored. Reading from it does deliver empty strings.
  This file can be used to initialize file variables as in:
</p><pre>
    <span class="keywd">var</span> <span class="type">file</span>: MY_FILE <span class="keywd">is</span> STD_NULL;
</pre><p>
  It is also used to represent an illegal file value, when for
  example an attempt to <tt><!-- ' -->open<!-- ' --></tt> a <tt><!-- ' --><a class="type" href="#types_file">file</a><!-- ' --></tt> fails.
</p>

<a name="file_Access_to_operating_system_files"><h3>8.6 Access to operating system files</h3></a>
<p>
    The interface type <tt><!-- ' --><a class="type" href="#types_file">file</a><!-- ' --></tt> is also used to access
  operating system files. Usually a file variable is defined
</p><pre>
    <span class="keywd">var</span> <span class="type">file</span>: my_out <span class="keywd">is</span> STD_NULL;
</pre><p>
  and the result of the <tt><!-- ' -->open<!-- ' --></tt> function is assigned to this file
  variable
</p><pre>
    my_out := open(<span class="stri">"my_file"</span>, <span class="stri">"w"</span>);
</pre><p>
  The first parameter of <tt><!-- ' -->open<!-- ' --></tt> is the path of the file to
  be opened. Seed7 always uses the slash (<tt>'/'</tt>) as path
  delimiter. The use of a backslash in a path may raise the
  exception <tt>'RANGE_ERROR'</tt>. The second parameter of <tt><!-- ' -->open<!-- ' --></tt>
  specifies the mode:
</p><dl><dd><dl>
    <dt>Binary mode:</dt><dd><table border="0" cellspacing="0">
      <tr><td><span class="stri">"r"</span></td>   <td>...&nbsp;</td><td>Open file for reading.</td></tr>
      <tr><td><span class="stri">"w"</span></td>   <td>...&nbsp;</td><td>Truncate to zero length or create file for writing.</td></tr>
      <tr><td><span class="stri">"a"</span></td>   <td>...&nbsp;</td><td>Append; open or create file for writing at end-of-file.</td></tr>
      <tr><td><span class="stri">"r+"</span></td>  <td>...&nbsp;</td><td>Open file for update (reading and writing).</td></tr>
      <tr><td><span class="stri">"w+"</span></td>  <td>...&nbsp;</td><td>Truncate to zero length or create file for update.</td></tr>
      <tr><td><span class="stri">"a+"</span></td>  <td>...&nbsp;</td><td>Append; open or create file for update, writing at end-of-file.</td></tr></table>
    <dt>Text mode:</dt><dd><table border="0" cellspacing="0">
      <tr><td><span class="stri">"rt"</span></td>  <td>...&nbsp;</td><td>Open file for reading.</td></tr>
      <tr><td><span class="stri">"wt"</span></td>  <td>...&nbsp;</td><td>Truncate to zero length or create file for writing.</td></tr>
      <tr><td><span class="stri">"at"</span></td>  <td>...&nbsp;</td><td>Append; open or create file for writing at end-of-file.</td></tr>
      <tr><td><span class="stri">"rt+"</span></td> <td>...&nbsp;</td><td>Open file for update (reading and writing).</td></tr>
      <tr><td><span class="stri">"wt+"</span></td> <td>...&nbsp;</td><td>Truncate to zero length or create file for update.</td></tr>
      <tr><td><span class="stri">"at+"</span></td> <td>...&nbsp;</td><td>Append; open or create file for update, writing at end-of-file.</td></tr></table>
</dl></dd></dl><p>
  Note that Seed7 defines the modes <tt><span class="stri">"r"</span></tt>, <tt><span class="stri">"w"</span></tt>, <tt><span class="stri">"a"</span></tt>, <tt><span class="stri">"r+"</span></tt>, <tt><span class="stri">"w+"</span></tt>
  and <tt><span class="stri">"a+"</span></tt> as binary modes. When <tt><!-- ' -->open<!-- ' --></tt> is called, with a mode
  not listed in the table above, the exception <tt>'RANGE_ERROR'</tt>
  is raised. When there is not enough memory to convert <tt>'path'</tt>
  to the system path type the exception <tt>'MEMORY_ERROR'</tt>
  is raised. When <tt><!-- ' -->open<!-- ' --></tt> fails for other reasons it returns
  <tt><!-- ' -->STD_NULL<!-- ' --></tt>. E.g.: It is not allowed to <tt><!-- ' -->open<!-- ' --></tt> a directory.
  An attempt to <tt><!-- ' -->open<!-- ' --></tt> a directory returns <tt><!-- ' -->STD_NULL<!-- ' --></tt>. It is
  recommended to check the file variable after opening a file:
</p><pre>
    <span class="keywd">if</span> my_out &lt;> STD_NULL <span class="keywd">then</span>
</pre><p>
  After that output to <tt>'my_out'</tt> is possible with
</p><pre>
    writeln(my_out, <span class="stri">"hi there"</span>);
</pre><p>
  When processing of a file is finished it should be closed
</p><pre>
    close(my_out);
</pre><p>
  Writing to a file after it has been closed results in the
  exception <tt>'FILE_ERROR'</tt>. The following program writes
  <tt><span class="stri">"hi there"</span></tt> to the file <tt><span class="stri">"my_file"</span></tt>:
</p><pre>
    $ <span class="keywd">include</span> <span class="stri">"seed7_05.s7i"</span>;

    <span class="keywd">const</span> <span class="type">proc</span>: main <span class="keywd">is func</span>
      <span class="keywd">local</span>
        <span class="keywd">var</span> <span class="type">file</span>: my_out <span class="keywd">is</span> STD_NULL;
      <span class="keywd">begin</span>
        my_out := open(<span class="stri">"my_file"</span>, <span class="stri">"w"</span>);
        <span class="keywd">if</span> my_out &lt;> STD_NULL <span class="keywd">then</span>
          writeln(my_out, <span class="stri">"hi there"</span>);
          close(my_out);
        <span class="keywd">end if</span>;
      <span class="keywd">end func</span>;
</pre><p>
  Note that <tt><!-- ' -->open<!-- ' --></tt> opens BYTE files. Writing
  a character with an ordinal >= 256 such as
</p><pre>
    writeln(my_out, <span class="stri">"illegal char: \256\"</span>);
</pre><p>
  results in the exception <tt>'RANGE_ERROR'</tt>. To write Unicode
  characters other file types must be used. The libraries
  <span class="stri">"utf8.s7i"</span> and <span class="stri">"utf16.s7i"</span> provide access to UTF-8 and
  UTF-16 files. The function <tt><!-- ' -->open_utf8<!-- ' --></tt> can be used the same
  way as <tt><!-- ' -->open<!-- ' --></tt>:
</p><pre>
    my_out := open_utf8(<span class="stri">"utf8_file"</span>, <span class="stri">"w"</span>);
</pre><p>
  An UTF-8 file accepts all Unicode characters. That way
</p><pre>
    writeln(my_out, <span class="stri">"Unicode char: \256\"</span>);
</pre><p>
  works without problems. UTF-8 files are byte order independent.
  Therefore they do not need a byte order mark (BOM).
  In case a BOM is required it can be written by the user program:
</p><pre>
    my_out := open_utf8(<span class="stri">"utf8_file"</span>, <span class="stri">"w"</span>);
    write(<span class="stri">"\16#FEFF\"</span>);
</pre><p>
  The following example expects a mandatory BOM at the beginning of an UTF-8 file:
</p><pre>
    my_out := open_utf8(<span class="stri">"utf8_file"</span>, <span class="stri">"r"</span>);
    <span class="keywd">if</span> getc(my_file) &lt;> <span class="stri">'\16#FEFF\'</span> <span class="keywd">then</span>
      writeln(<span class="stri">"The BOM is missing"</span>");
    <span class="keywd">else</span>
      ...
    <span class="keywd">end if</span>;
</pre><p>
  Accepting an optional BOM at the beginning of an UTF-8 file is done with:
</p><pre>
    my_out := open_utf8(<span class="stri">"utf8_file"</span>, <span class="stri">"r"</span>);
    <span class="keywd">if</span> getc(my_file) &lt;> <span class="stri">'\16#FEFF\'</span> <span class="keywd">then</span>
      <span class="comment"># This is a file without BOM (the first character will be read later).</span>
      seek(my_file, 1);
    <span class="keywd">end if</span>;
    ...
</pre><p>
  UTF-16 comes in two flavors UTF-16LE and UTF-16BE. To support
  both flavors the <span class="stri">"utf16.s7i"</span> library defines several functions.
</p><p>
  The function <tt><!-- ' -->open_utf16<!-- ' --></tt> opens an Unicode file which uses the
  UTF-16LE or UTF-16BE encoding. The function <tt><!-- ' -->open_utf16<!-- ' --></tt> checks for
  a BOM and depending on that it opens an UTF-16LE or UTF-16BE file.
</p><p>
  The functions <tt><!-- ' -->open_utf16le<!-- ' --></tt> and <tt><!-- ' -->open_utf16be<!-- ' --></tt> open Unicode files
  with the UTF-16LE and UTF-16BE encoding respectively. When the
  file is opened with one of the modes <tt><span class="stri">"w"</span></tt>, <tt><span class="stri">"w+"</span></tt>, <tt><span class="stri">"wt"</span></tt> or <tt><span class="stri">"wt+"</span></tt> an
  appropriate BOM is created. When the file is opened with any other
  mode the application program is in charge to handle optional BOM
  markers. This way <tt><!-- ' -->open_utf16le<!-- ' --></tt> and <tt><!-- ' -->open_utf16be<!-- ' --></tt> can be used
  to open existing files without BOM.
</p><p>
  External BYTE files use the implementation type <tt><!-- ' -->external_file<!-- ' --></tt>.
  The type <tt><!-- ' -->external_file<!-- ' --></tt> is defined as:
</p><pre>
    <span class="keywd">const</span> <span class="type">type</span>: external_file <span class="keywd">is sub</span> <span class="type">null_file</span> <span class="keywd">struct</span>
        <span class="keywd">var</span> <span class="type">clib_file</span>: ext_file <span class="keywd">is</span> PRIMITIVE_null_file;
        <span class="keywd">var</span> <span class="type">string</span>: name <span class="keywd">is</span> <span class="stri">""</span>;
      <span class="keywd">end struct</span>;
</pre><p>
  This means that every data item of the type <tt><!-- ' -->external_file<!-- ' --></tt>
  has the elements from <tt><!-- ' -->null_file<!-- ' --></tt> and additionally the
  elements <tt>'ext_file'</tt> and <tt>'name'</tt>. The type <tt><!-- ' --><span class="type">clib_file</span><!-- ' --></tt>
  points directly to an operating system file. Objects
  of type <tt><!-- ' --><span class="type">clib_file</span><!-- ' --></tt> can only have operating system
  files as values while objects of type <tt><!-- ' --><a class="type" href="#types_file">file</a><!-- ' --></tt> can also have
  other files as values. To allow the implementation of the
  type <tt><!-- ' -->external_file<!-- ' --></tt> several operations for the type
  <tt><!-- ' --><span class="type">clib_file</span><!-- ' --></tt> are defined. But outside <tt><!-- ' -->external_file<!-- ' --></tt> the
  type <tt><!-- ' --><span class="type">clib_file</span><!-- ' --></tt> and its operations should not be used.
</p><p>
  There are three predefined external files <tt><!-- ' -->STD_IN<!-- ' --></tt>, <tt><!-- ' -->STD_OUT<!-- ' --></tt>
  and <tt><!-- ' -->STD_ERR<!-- ' --></tt> which have the following declarations:
</p><pre>
    <span class="keywd">const</span> <span class="type">func external_file</span>: INIT_STD_FILE (<span class="keywd">ref</span> <span class="type">clib_file</span>: primitive_file,
        <span class="keywd">in</span> <span class="type">string</span>: file_name) <span class="keywd">is func</span>
      <span class="keywd">result</span>
        <span class="keywd">var</span> <span class="type">external_file</span>: result <span class="keywd">is</span> <span class="type">external_file</span>.value;
      <span class="keywd">begin</span>
        result.ext_file := primitive_file;
        result.name := file_name;
      <span class="keywd">end func</span>;

    <span class="keywd">var</span> <span class="type">external_file</span>: STD_IN <span class="keywd">is</span>  INIT_STD_FILE(PRIMITIVE_INPUT,  <span class="stri">"STD_IN"</span>);
    <span class="keywd">var</span> <span class="type">external_file</span>: STD_OUT <span class="keywd">is</span> INIT_STD_FILE(PRIMITIVE_OUTPUT, <span class="stri">"STD_OUT"</span>);
    <span class="keywd">var</span> <span class="type">external_file</span>: STD_ERR <span class="keywd">is</span> INIT_STD_FILE(PRIMITIVE_ERROR,  <span class="stri">"STD_ERR"</span>);
</pre><p>
  It is possible to do I/O directly with them, but it is more wisely
  to use them only to initialize user defined file variables as in:
</p><pre>
    <span class="keywd">var</span> <span class="type">file</span>: err <span class="keywd">is</span> STD_ERR;
</pre><p>
  In the rest of the program references to such a variable can be
  used:
</p><pre>
    writeln(err, <span class="stri">"Some error occurred"</span>);
</pre><p>
  In this case redirection of the file <tt>'err'</tt> can be done very easy.
  Another way to access external files is to use the function
  <tt><!-- ' -->open<!-- ' --></tt>. The modes used by <tt><!-- ' -->open<!-- ' --></tt> differ from those used
  by the <tt>'fopen'</tt> function in the C library.
  The following table compares the file modes of Seed7 and C:
</p><dl><dd><table border="1" cellspacing="0" cellpadding="5">
    <tr><td>Seed7 <tt>'open'</tt> mode</td>   <td>C <tt>'fopen'</tt> mode</td></tr>
    <tr><td><span class="stri">"r"</span></td>                 <td><span class="stri">"rb"</span></td></tr>
    <tr><td><span class="stri">"w"</span></td>                 <td><span class="stri">"wb"</span></td></tr>
    <tr><td><span class="stri">"a"</span></td>                 <td><span class="stri">"ab"</span></td></tr>
    <tr><td><span class="stri">"r+"</span></td>                <td><span class="stri">"rb+"</span></td></tr>
    <tr><td><span class="stri">"w+"</span></td>                <td><span class="stri">"wb+"</span></td></tr>
    <tr><td><span class="stri">"a+"</span></td>                <td><span class="stri">"ab+"</span></td></tr>
    <tr><td><span class="stri">"rt"</span></td>                <td><span class="stri">"r"</span></td></tr>
    <tr><td><span class="stri">"wt"</span></td>                <td><span class="stri">"w"</span></td></tr>
    <tr><td><span class="stri">"at"</span></td>                <td><span class="stri">"a"</span></td></tr>
    <tr><td><span class="stri">"rt+"</span></td>               <td><span class="stri">"r+"</span></td></tr>
    <tr><td><span class="stri">"wt+"</span></td>               <td><span class="stri">"w+"</span></td></tr>
    <tr><td><span class="stri">"at+"</span></td>               <td><span class="stri">"a+"</span></td></tr>
</table></dd></dl><p>
  The difference between binary and text mode is as follows:
</p><ul>
    <li><!-- -  -->Binary mode provides an implementation independent
      behavior on all operating systems. In binary mode no
      conversion to and from the line end character (<tt><span class="stri">'\n'</span></tt>)
      is done. This has the advantage that an <tt><!-- ' -->external_file<!-- ' --></tt>
      written in binary mode is identical on all operating
      systems. Reading files with different line endings
      (<tt><span class="stri">"\n"</span></tt> and <tt><span class="stri">"\r\n"</span></tt>) is supported by every <tt><!-- ' -->external_file<!-- ' --></tt>:
      The functions <tt><!-- ' -->getwd<!-- ' --></tt>, <tt><!-- ' -->getln<!-- ' --></tt>, <tt><!-- ' --><span class="func">read</span><!-- ' --></tt> and <tt><!-- ' --><span class="func">readln</span><!-- ' --></tt>, of
      <tt><!-- ' -->external_file<!-- ' --></tt> skip a carriage return (<tt><span class="stri">'\r'</span></tt>) when it
      is just before a linefeed (<tt><span class="stri">'\n'</span></tt>). The rest of the
      <tt><!-- ' -->external_file<!-- ' --></tt> functions like <tt><!-- ' -->getc<!-- ' --></tt> and <tt><!-- ' -->gets<!-- ' --></tt> deliver
      line endings unchanged.
</li>
    <li><!-- -  -->The behavior of an <tt><!-- ' -->external_file<!-- ' --></tt> in text mode is
      implementation dependent. Under Unix/Linux/Bsd text and
      binary modes are identical. Other operating systems
      prefer to do some line end conversions in text mode:
      When reading a file all occurrences of <tt><span class="stri">"\r\n"</span></tt> are
      converted to <tt><span class="stri">'\n'</span></tt>. When writing to a file all
      occurrences of <tt><span class="stri">'\n'</span></tt> are converted to <tt><span class="stri">"\r\n"</span></tt>. Note that
      text mode cannot be used to automatically create files
      with <tt><span class="stri">"\r\n"</span></tt> line endings under Unix/Linux/Bsd.</li>
</ul><p>
  The library <span class="stri">"utf8.s7i"</span> defines the
  implementation type <tt><!-- ' -->utf8_file<!-- ' --></tt> as
</p><pre>
    <span class="keywd">const</span> <span class="type">type</span>: utf8_file <span class="keywd">is sub</span> <span class="type">external_file</span> <span class="keywd">struct</span>
      <span class="keywd">end struct</span>;
</pre><p></p>

<a name="file_Keyboard_file"><h3>8.7 Keyboard file</h3></a>
<p>
    As stated earlier <tt><!-- ' -->STD_IN<!-- ' --></tt> provides an interface to the keyboard
  which is line buffered and echoed on <tt><!-- ' -->STD_OUT<!-- ' --></tt>. This means that
  you can see everything you typed. Additionally you can correct
  your input with BACKSPACE until you press RETURN. But sometimes
  an unbuffered and unechoed input is needed. This is provided in
  the library <span class="stri">"keybd.s7i"</span>, which defines the type <tt><!-- ' -->keyboard_file<!-- ' --></tt>
  and the file <tt><!-- ' -->KEYBOARD<!-- ' --></tt>. Characters typed at the keyboard are
  queued (first in first out) and can be read directly from
  <tt><!-- ' -->KEYBOARD<!-- ' --></tt> without any possibility to correct. Additionally
  <tt><!-- ' -->KEYBOARD<!-- ' --></tt> does not echo the characters. Reading from <tt><!-- ' -->KEYBOARD<!-- ' --></tt>
  delivers normal Unicode characters or special codes (which may be
  or may not be Unicode characters) for function and cursor keys.
  Unicode characters and special codes both are <tt><!-- ' --><a class="type" href="#types_char">char</a><!-- ' --></tt> values. The
  library <span class="stri">"keybd.s7i"</span> defines <tt><!-- ' --><a class="type" href="#types_char">char</a><!-- ' --></tt> constants for various keys:
</p><dl><dd><table border="1" cellspacing="0" cellpadding="5">
    <tr><td>Key character constant</td>     <td>Description</td></tr>
    <tr><td><tt>KEY_CTL_A</tt> to <tt>KEY_CTL_Z</tt></td>     <td>The control keys ctrl-a to ctrl-z</td></tr>
    <tr><td><tt>KEY_ALT_A</tt> to <tt>KEY_ALT_Z</tt></td>     <td>The alternate keys alt-a to alt-z</td></tr>
    <tr><td><tt>KEY_ALT_0</tt> to <tt>KEY_ALT_9</tt></td>     <td>The alternate keys alt-0 to alt-9</td></tr>
    <tr><td><tt>KEY_F1</tt> to <tt>KEY_F10</tt></td>          <td>Function keys F1 to F10</td></tr>
    <tr><td><tt>KEY_SFT_F1</tt> to <tt>KEY_SFT_F10</tt></td>  <td>Shifted function keys F1 to F10</td></tr>
    <tr><td><tt>KEY_CTL_F1</tt> to <tt>KEY_CTL_F10</tt></td>  <td>Control function keys F1 to F10</td></tr>
    <tr><td><tt>KEY_ALT_F1</tt> to <tt>KEY_ALT_F10</tt></td>  <td>Alternate function keys F1 to F10</td></tr>
    <tr><td><tt>KEY_BS</tt></td>                     <td>Backspace (equal to KEY_CTL_H)</td></tr>
    <tr><td><tt>KEY_TAB</tt></td>                    <td>Horizontal Tab (equal to KEY_CTL_H)</td></tr>
    <tr><td><tt>KEY_NL</tt></td>                     <td>Newline/Enter/Return key (equal to KEY_CTL_J)</td></tr>
    <tr><td><tt>KEY_CR</tt></td>                     <td>Carriage return (equal to KEY_CTL_M)</td></tr>
    <tr><td><tt>KEY_ESC</tt></td>                    <td>Escape key</td></tr>
    <tr><td><tt>KEY_NULCHAR</tt></td>                <td>Nul character key</td></tr>
    <tr><td><tt>KEY_BACKTAB</tt></td>                <td>Horizontal back tab</td></tr>
    <tr><td><tt>KEY_LEFT</tt></td>                   <td>Cursor left</td></tr>
    <tr><td><tt>KEY_RIGHT</tt></td>                  <td>Cursor right</td></tr>
    <tr><td><tt>KEY_UP</tt></td>                     <td>Cursor up</td></tr>
    <tr><td><tt>KEY_DOWN</tt></td>                   <td>Cursor down</td></tr>
    <tr><td><tt>KEY_HOME</tt></td>                   <td>Home key</td></tr>
    <tr><td><tt>KEY_END</tt></td>                    <td>End key</td></tr>
    <tr><td><tt>KEY_PGUP</tt></td>                   <td>Page up</td></tr>
    <tr><td><tt>KEY_PGDN</tt></td>                   <td>Page down</td></tr>
    <tr><td><tt>KEY_INS</tt></td>                    <td>Insert key</td></tr>
    <tr><td><tt>KEY_DEL</tt></td>                    <td>Delete key</td></tr>
    <tr><td><tt>KEY_PAD_CENTER</tt></td>             <td>Numeric keypad center key</td></tr>
    <tr><td><tt>KEY_CTL_LEFT</tt></td>               <td>Control cursor left</td></tr>
    <tr><td><tt>KEY_CTL_RIGHT</tt></td>              <td>Control cursor right</td></tr>
    <tr><td><tt>KEY_CTL_UP</tt></td>                 <td>Control cursor up</td></tr>
    <tr><td><tt>KEY_CTL_DOWN</tt></td>               <td>Control cursor down</td></tr>
    <tr><td><tt>KEY_CTL_HOME</tt></td>               <td>Control home key</td></tr>
    <tr><td><tt>KEY_CTL_END</tt></td>                <td>Control end key</td></tr>
    <tr><td><tt>KEY_CTL_PGUP</tt></td>               <td>Control page up</td></tr>
    <tr><td><tt>KEY_CTL_PGDN</tt></td>               <td>Control page down</td></tr>
    <tr><td><tt>KEY_CTL_INS</tt></td>                <td>Control insert key</td></tr>
    <tr><td><tt>KEY_CTL_DEL</tt></td>                <td>Control delete key</td></tr>
    <tr><td><tt>KEY_SCRLUP</tt></td>                 <td>Scroll up key</td></tr>
    <tr><td><tt>KEY_SCRLDN</tt></td>                 <td>Scroll down key</td></tr>
    <tr><td><tt>KEY_INSLN</tt></td>                  <td>Insert line key</td></tr>
    <tr><td><tt>KEY_DELLN</tt></td>                  <td>Delete line key</td></tr>
    <tr><td><tt>KEY_ERASE</tt></td>                  <td>Erase key</td></tr>
    <tr><td><tt>KEY_CTL_CR</tt></td>                 <td>Control carriage return</td></tr>
    <tr><td><tt>KEY_NULLCMD</tt></td>                <td>Null command of window manager</td></tr>
    <tr><td><tt>KEY_REDRAW</tt></td>                 <td>Redraw command of window manager</td></tr>
    <tr><td><tt>KEY_NEWWINDOW</tt></td>              <td>New window command of window manager</td></tr>
    <tr><td><tt>KEY_MOUSE1</tt></td>                 <td>Mouse key 1 (counted from left)</td></tr>
    <tr><td><tt>KEY_MOUSE2</tt></td>                 <td>Mouse key 2 (counted from left)</td></tr>
    <tr><td><tt>KEY_MOUSE3</tt></td>                 <td>Mouse key 3 (counted from left)</td></tr>
    <tr><td><tt>KEY_MOUSE4</tt></td>                 <td>Mouse key 4 (counted from left)</td></tr>
    <tr><td><tt>KEY_MOUSE5</tt></td>                 <td>Mouse key 5 (counted from left)</td></tr>
    <tr><td><tt>KEY_UNDEF</tt></td>                  <td>Undefined key</td></tr>
    <tr><td><tt>KEY_NONE</tt></td>                   <td>No key pressed (returned by busy_getc)</td></tr>
</table></dd></dl><p>
  The following example uses the <tt><!-- ' --><a class="type" href="#types_char">char</a><!-- ' --></tt> constant <tt>'KEY_UP'</tt>:
</p><pre>
    $ <span class="keywd">include</span> <span class="stri">"seed7_05.s7i"</span>;
      <span class="keywd">include</span> <span class="stri">"keybd.s7i"</span>;

    <span class="keywd">const</span> <span class="type">proc</span>: main <span class="keywd">is func</span>
      <span class="keywd">begin</span>
        writeln(<span class="stri">"Please press cursor up"</span>);
        <span class="keywd">while</span> getc(KEYBOARD) &lt;> KEY_UP <span class="keywd">do</span>
          writeln(<span class="stri">"This was not cursor up"</span>);
        <span class="keywd">end while</span>;
        writeln(<span class="stri">"Cursor up was pressed"</span>);
      <span class="keywd">end func</span>;
</pre><p>
  Programs should use the <tt><!-- ' --><a class="type" href="#types_char">char</a><!-- ' --></tt> constants defined in <span class="stri">"keybd.s7i"</span>
  to deal with function and cursor keys, since the special key
  codes may change in future versions of Seed7.
</p><p>
  Additionally to the operations possible with a <tt><!-- ' --><a class="type" href="#types_file">file</a><!-- ' --></tt> there
  are two functions that are applicable only to files of type
  <tt><!-- ' -->keyboard_file<!-- ' --></tt>:
</p><ul>
    <li><!-- -  --><tt><!-- ' -->busy_getc<!-- ' --></tt>, which delivers the next character
      from the keyboard or <tt>'KEY_NONE'</tt> if no key has been pressed.</li>
    <li><!-- -  --><tt><!-- ' -->keypressed<!-- ' --></tt>, which returns TRUE if a character
      is available from the keyboard and FALSE otherwise.</li>
</ul><p>
  Note that <tt><!-- ' -->keypressed<!-- ' --></tt> does not actually read a character. Reading
  must be done with a different function after <tt><!-- ' -->keypressed<!-- ' --></tt> returns
  TRUE. Both functions (<tt><!-- ' -->busy_getc<!-- ' --></tt> and <tt><!-- ' -->keypressed<!-- ' --></tt>) are useful
  when user input is allowed while some processing takes place.
  The following program uses <tt><!-- ' -->busy_getc(KEYBOARD)<!-- ' --></tt> to display
  the time until a key is pressed:
</p><pre>
    $ <span class="keywd">include</span> <span class="stri">"seed7_05.s7i"</span>;
      <span class="keywd">include</span> <span class="stri">"time.s7i"</span>;
      <span class="keywd">include</span> <span class="stri">"keybd.s7i"</span>;

    <span class="keywd">const</span> <span class="type">proc</span>: main <span class="keywd">is func</span>
      <span class="keywd">begin</span>
        writeln;
        <span class="keywd">while</span> busy_getc(KEYBOARD) = KEY_NONE <span class="keywd">do</span>
          write(time(NOW) &lt;&amp; <span class="stri">"\r"</span>);
          flush(OUT);
        <span class="keywd">end while</span>;
        writeln;
        writeln;
      <span class="keywd">end func</span>;
</pre><p>
  Seed7 programs can run in two modes:
</p><ul>
    <li><!-- -  -->Console mode, where the program runs in a console/terminal window (the default).</li>
    <li><!-- -  -->Graphics mode, where the program has its own graphic window.</li>
</ul><p>
  This two modes are supported with two basic keyboard files:
</p><ul>
    <li><!-- -  --><tt><!-- ' -->CONSOLE_KEYBOARD<!-- ' --></tt>, which uses a terminfo or console driver.</li>
    <li><!-- -  --><tt><!-- ' -->GRAPH_KEYBOARD<!-- ' --></tt>, which uses a X11 or GDI driver.</li>
</ul><p>
  The file <tt><!-- ' -->KEYBOARD<!-- ' --></tt> is actually a variable which refers to one
  of the two basic keyboard files.  The declaration of the type
  <tt><!-- ' -->keyboard_file<!-- ' --></tt> and the file <tt><!-- ' -->KEYBOARD<!-- ' --></tt> in <span class="stri">"keybd.s7i"</span> is:
</p><pre>
    <span class="keywd">const</span> <span class="type">type</span>: keyboard_file <span class="keywd">is</span> <span class="type">subtype file</span>;

    <span class="keywd">var</span> <span class="type">keyboard_file</span>: KEYBOARD <span class="keywd">is</span> CONSOLE_KEYBOARD;
</pre><p>
  Graphic programs switch to to the <tt><!-- ' -->GRAPH_KEYBOARD<!-- ' --></tt> driver with:
</p><pre>
    KEYBOARD := GRAPH_KEYBOARD;
</pre><p>
  Some file types are defined to support the <tt><!-- ' -->KEYBOARD<!-- ' --></tt>. One such
  file type is <tt><!-- ' -->echo_file<!-- ' --></tt>, which is defined in the library <span class="stri">"echo.s7i"</span>.
  An <tt><!-- ' -->echo_file<!-- ' --></tt> file can be used to write input characters to
  an output file. This is useful since <tt><!-- ' -->KEYBOARD<!-- ' --></tt> does not echo its
  input, but <tt><!-- ' -->echo_file<!-- ' --></tt> is not restricted to support <tt><!-- ' -->KEYBOARD<!-- ' --></tt>.
  The following program writes echoes of the keys typed and exits as
  soon as a <tt><span class="stri">'!'</span></tt> is encountered:
</p><pre>
    $ <span class="keywd">include</span> <span class="stri">"seed7_05.s7i"</span>;
      <span class="keywd">include</span> <span class="stri">"keybd.s7i"</span>;
      <span class="keywd">include</span> <span class="stri">"echo.s7i"</span>;

    <span class="keywd">const</span> <span class="type">proc</span>: main <span class="keywd">is func</span>
      <span class="keywd">local</span>
        <span class="keywd">var</span> <span class="type">char</span>: ch <span class="keywd">is</span> <span class="stri">' '</span>;
      <span class="keywd">begin</span>
        IN := open_echo(KEYBOARD, OUT);
        <span class="keywd">repeat</span>
          ch := getc(IN);
        <span class="keywd">until</span> ch = <span class="stri">'!'</span>;
        writeln;
      <span class="keywd">end func</span>;
</pre><p>
  An <tt><!-- ' -->echo_file<!-- ' --></tt> checks also for control-C (KEY_CTL_C). When
  control-C is typed an <tt><!-- ' -->echo_file<!-- ' --></tt> asks if the program should be
  terminated:
</p><pre>
    terminate (y/n)?
</pre><p>
  Answering <tt>'y'</tt> or <tt>'Y'</tt> is interpreted as <tt>'yes'</tt> and the program
  is terminated with the following message:
</p><pre>
    *** PROGRAM TERMINATED BY USER
</pre><p>
  Any other input removes the question and the program continues
  to read input.
</p><p>  
  Another helpful file type is <tt><!-- ' -->line_file<!-- ' --></tt>, which is defined in the
  library <span class="stri">"line.s7i"</span>. A <tt><!-- ' -->line_file<!-- ' --></tt> allows to correct the input with
  BACKSPACE until a RETURN (represented with <tt><span class="stri">'\n'</span></tt>) is encountered.
  In contrast to this editing feature the possibility to edit a line
  of <tt><!-- ' -->STD_IN<!-- ' --></tt> is provided by the operating system. The following
  program uses <tt><!-- ' -->echo_file<!-- ' --></tt> and <tt><!-- ' -->line_file<!-- ' --></tt> to simulate input line
  editing:
</p><pre>
    $ <span class="keywd">include</span> <span class="stri">"seed7_05.s7i"</span>;
      <span class="keywd">include</span> <span class="stri">"keybd.s7i"</span>;
      <span class="keywd">include</span> <span class="stri">"echo.s7i"</span>;
      <span class="keywd">include</span> <span class="stri">"line.s7i"</span>;

    <span class="keywd">const</span> <span class="type">proc</span>: main <span class="keywd">is func</span>
      <span class="keywd">local</span>
        <span class="keywd">var</span> <span class="type">char</span>: ch <span class="keywd">is</span> <span class="stri">' '</span>;
      <span class="keywd">begin</span>
        IN := open_echo(KEYBOARD, OUT);
        IN := open_line(IN);
        <span class="keywd">repeat</span>
          ch := getc(IN);
          write(ch);
        <span class="keywd">until</span> ch = <span class="stri">'!'</span>;
      <span class="keywd">end func</span>;
</pre><p>
  This program terminates when a line containing <tt><span class="stri">'!'</span></tt> is confirmed
  with RETURN.
</p>

<a name="file_Files_with_line_structure"><h3>8.8 Files with line structure</h3></a>
<p>
  The library <span class="stri">"text.s7i"</span> defines the type <tt><!-- ' --><a class="type" href="#types_text">text</a><!-- ' --></tt>, which is a
  subtype of <tt><!-- ' --><a class="type" href="#types_file">file</a><!-- ' --></tt>. The type <tt><!-- ' --><a class="type" href="#types_text">text</a><!-- ' --></tt> adds a line structure and
  other features such as scrolling and color to <tt><!-- ' --><a class="type" href="#types_file">file</a><!-- ' --></tt>. The
  lines and columns of a <tt><!-- ' --><a class="type" href="#types_text">text</a><!-- ' --></tt> start with 1 in the upper left
  corner and increase downward and rightward. The function
  <tt><!-- ' -->setPos<!-- ' --></tt> sets the current line and column of a <tt><!-- ' --><a class="type" href="#types_text">text</a><!-- ' --></tt>:
</p><pre>
    setPos(aText, 10, 20);
</pre><p>
  The functions <tt><!-- ' -->setLine<!-- ' --></tt> and <tt><!-- ' -->setColumn<!-- ' --></tt> set just the
  line and column respectively:
</p><pre>
    setLine(aText, 2);
    setColumn(aText, 72);
</pre><p>
  The current line and column of a <tt><!-- ' --><a class="type" href="#types_text">text</a><!-- ' --></tt> file can be retrieved
  with <tt><!-- ' -->line<!-- ' --></tt> and <tt><!-- ' -->column<!-- ' --></tt>:
</p><pre>
    writeln(<span class="stri">"The curent line is: "</span> &lt;& line(aText));
    writeln(<span class="stri">"The curent column is: "</span> &lt;& column(aText));
</pre><p>
  The current height and width of a <tt><!-- ' --><a class="type" href="#types_text">text</a><!-- ' --></tt> file can be retrieved
  with <tt><!-- ' -->height<!-- ' --></tt> and <tt><!-- ' -->width<!-- ' --></tt>:
</p><pre>
    writeln(<span class="stri">"The height is: "</span> &lt;& height(aText));
    writeln(<span class="stri">"The width is: "</span> &lt;& width(aText));
</pre><p>
  To allow random access output to a text console (or text window)
  the library <span class="stri">"console.s7i"</span> defines the type <tt><!-- ' -->console_file<!-- ' --></tt>. The function
</p><pre>
    open(CONSOLE)
</pre><p>
  returns a <tt><!-- ' -->console_file<!-- ' --></tt>.
</p>

<a name="file_Sockets"><h3>8.9 Sockets</h3></a>
<p>
    The library <span class="stri">"socket.s7i"</span> defines types and functions to
  access sockets. The implementation type for sockets is
  <tt><!-- ' -->socket<!-- ' --></tt>. As interface type <tt><!-- ' --><a class="type" href="#types_file">file</a><!-- ' --></tt> is used:
</p><pre>
    <span class="keywd">var</span> <span class="type">file</span>: clientSocket <span class="keywd">is</span> STD_NULL;
</pre><p>
  With <tt><!-- ' -->openInetSocket<!-- ' --></tt> an Internet client socket can be opened:
</p><pre>
    clientSocket := openInetSocket(<span class="stri">"www.google.com"</span>, 80);
</pre><p>
  The function <tt><!-- ' -->openInetSocket<!-- ' --></tt> creates and connects a socket.
  Opening an Internet socket at the local host is also done with
  a variant of <tt><!-- ' -->openInetSocket<!-- ' --></tt>:
</p><pre>
    clientSocket := openInetSocket(1080);
</pre><p>
  Since sockets use the <tt><!-- ' --><a class="type" href="#types_file">file</a><!-- ' --></tt> interface functions
  like <tt><!-- ' -->writeln<!-- ' --></tt> and <tt><!-- ' -->getln<!-- ' --></tt> can be used:
</p><pre>
    sock := openInetSocket(serverName, 80);
    <span class="keywd">if</span> sock &lt;> STD_NULL <span class="keywd">then</span>
      writeln(sock, <span class="stri">"GET "</span> &lt;&amp; address &lt;&amp; <span class="stri">" HTTP/1.1"</span>);
      writeln(sock, <span class="stri">"Host: "</span> &lt;&amp; hostname);
      writeln(sock, <span class="stri">"User-Agent: BlackHole"</span>);
      writeln(sock);
      line := getln(sock);
      <span class="keywd">if</span> startsWith(line, <span class="stri">"HTTP"</span>) <span class="keywd">then</span>
        statusInfo := trim(line[pos(line, <span class="stri">" "</span>) ..]);
        statusCode := statusInfo[.. pred(pos(statusInfo, <span class="stri">" "</span>))];
      <span class="keywd">end if</span>;
    <span class="keywd">end if</span>;
</pre><p>
  The example above sends a HTTP request to a server and gets
  the status code from the response. The example above consists
  of code from the library <span class="stri">"gethttp.s7i"</span>.
</p><p>
  Server sockets are supported with the type <tt><!-- ' -->listener<!-- ' --></tt>.
  A listener is defined with:
</p><pre>
    <span class="keywd">var</span> <span class="type">listener</span>: myListener <span class="keywd">is</span> <span class="type">listener</span>.value;
</pre><p>
  The library <span class="stri">"listener.s7i"</span> defines the function <tt><!-- ' -->openInetListener<!-- ' --></tt>,
  which opens a <tt><!-- ' -->listener<!-- ' --></tt>:
</p><pre>
    aListener := openInetListener(1080);
</pre><p>
  The function <tt><!-- ' -->listen<!-- ' --></tt> is used to listen for incoming socket
  connections of a <tt><!-- ' -->listener<!-- ' --></tt>, and to
  limit the incoming queue:
</p><pre>
    listen(aListener, 10);
</pre><p>
  The function <tt><!-- ' -->accept<!-- ' --></tt> returns the first connected socked
  of the <tt><!-- ' -->listener<!-- ' --></tt>:
</p><pre>
    serverSocket := accept(aListener);
</pre><p>
  Together the functions above can be use to process requests without sessions:
</p><pre>
    aListener := openInetListener(1080);
    listen(aListener, 10);
    <span class="keywd">while</span> TRUE <span class="keywd">do</span>
      sock := accept(aListener);
      <span class="comment"># Read and process the request from sock.</span>
      close(sock);
    <span class="keywd">end while</span>;
</pre><p>
  A similar loop is used in the comanche webserver (see main function).
  The function <tt><!-- ' -->waitForRequest<!-- ' --></tt> can be used to process requests with session:
</p><pre>
    aListener := openInetListener(2021);
    listen(aListener, 10);
    <span class="keywd">while</span> TRUE <span class="keywd">do</span>
      waitForRequest(aListener, existingConnection, newConnection);
      <span class="keywd">if</span> existingConnection &lt;> STD_NULL <span class="keywd">then</span>
        <span class="comment"># Read and process the request from existingConnection.</span>
      <span class="keywd">end if</span>;
      <span class="keywd">if</span> newConnection &lt;> STD_NULL <span class="keywd">then</span>
        <span class="comment"># Send welcome message to newConnection.</span>
      <span class="keywd">end if</span>;
    <span class="keywd">end while</span>;
</pre><p>
  Similar code is used in the program <span class="stri">"ftpserv.sd7"</span>.
  The implementation of <tt><!-- ' -->waitForRequest<!-- ' --></tt> is based on <tt><!-- ' -->pollData<!-- ' --></tt>,
  which is defined in <span class="stri">"poll.s7i"</span>.
</p>

<a name="file_User_defined_file_types"><h3>8.10 User defined file types</h3></a>
<p>
    In addition to the predefined file types it is often
  necessary to define a new type of file. Such a new file
  has several possibilities:
</p><ul>
    <li><!-- -  -->It could store its contents in a string (not only to be
      faster but also to provide additional file operations)</li>

    <li><!-- -  -->The information can be processed (e.g. to upper case)
      and sent to another file.</li>

    <li><!-- -  -->It could work just like an Unix utility (Think of
      more, sort, tee, uniq ...)</li>

    <li><!-- -  -->It could provide a file-like interface for something
      with an other interface. (e.g. The contents of a
      directory, or random access I/O to the screen)</li>
</ul><p>
  With the following declaration we define a new file type:
</p><pre>
    <span class="keywd">const</span> <span class="type">type</span>: NEW_FILE <span class="keywd">is sub</span> <span class="type">null_file</span> <span class="keywd">struct</span>
        ...
        <span class="comment">(* Local data *)</span>
        ...
      <span class="keywd">end struct</span>;
</pre><p>
  It is not necessary to derive the NEW_FILE type directly from
  <tt><!-- ' -->null_file<!-- ' --></tt>. The NEW_FILE type may also be an indirect descendant
  of <tt><!-- ' -->null_file<!-- ' --></tt>. So it is possible to create file type hierarchies.
  The interface implemented by the new file needs also to be specified:
</p><pre>
    type_implements_interface(<span class="type">NEW_FILE</span>, <span class="type">file</span>);
</pre><p>
  The type <tt><!-- ' --><a class="type" href="#types_file">file</a><!-- ' --></tt> is not the only interface
  type which can be used. There is also the type <tt><!-- ' --><a class="type" href="#types_text">text</a><!-- ' --></tt> which
  is derived from <tt><!-- ' --><a class="type" href="#types_file">file</a><!-- ' --></tt>. The type <tt><!-- ' --><a class="type" href="#types_text">text</a><!-- ' --></tt>
  describes a line oriented file which allows <tt><!-- ' -->setPos<!-- ' --></tt> (which moves the
  current position to the line and column specified) and other functions.
  It is also possible to define new interface types which derive
  from <tt><!-- ' --><a class="type" href="#types_file">file</a><!-- ' --></tt> or <tt><!-- ' --><a class="type" href="#types_text">text</a><!-- ' --></tt>.
</p><p>
  As next an open function is needed to generate a new NEW_FILE:
</p><pre>
    <span class="keywd">const</span> <span class="type">func file</span>: open_new_file (  <span class="comment">(* Parameters *)</span> ) <span class="keywd">is func</span>
      <span class="keywd">result</span>
        <span class="keywd">var</span> <span class="type">file</span>: result <span class="keywd">is</span> STD_NULL;
      <span class="keywd">begin</span>
        ...
        <span class="comment">(* Initialization of the local data *)</span>
        result := malloc( ... );
        ...
      <span class="keywd">end func</span>;
</pre><p>
  Note the usage of the <tt>'malloc'</tt> function to generate a new data
  item. This data item is not freed automatically but if you
  do not open files to often this does not hurt. Now only the
  two basic I/O operations must be defined:
</p><pre>
    <span class="keywd">const</span> <span class="type">proc</span>: write (<span class="keywd">inout</span> <span class="type">NEW_FILE</span>: new_fil, <span class="keywd">in</span> <span class="type">string</span>: stri) <span class="keywd">is func</span>
      <span class="keywd">begin</span>
        ...
        <span class="comment">(* Statements that do the output *)</span>
        ...
      <span class="keywd">end func</span>;

    <span class="keywd">const</span> <span class="type">proc</span>: gets (<span class="keywd">inout</span> <span class="type">NEW_FILE</span>: new_fil, <span class="keywd">in</span> <span class="type">integer</span>: leng) <span class="keywd">is func</span>
      <span class="keywd">result</span>
        <span class="keywd">var</span> <span class="type">string</span>: stri <span class="keywd">is</span> "";
      <span class="keywd">begin</span>
        ...
        <span class="comment">(* Statements that do the input *)</span>
        ...
      <span class="keywd">end func</span>;
</pre><p></p>

<a name="file_Scanning_a_file"><h3>8.11 Scanning a file</h3></a>
<p>
    The I/O concept introduced in the previous chapters separates
  the input of data from its conversion. The <tt><!-- ' -->read<!-- ' --></tt>, <tt><!-- ' -->readln<!-- ' --></tt>,
  <tt><!-- ' -->getwd<!-- ' --></tt> and <tt><!-- ' -->getln<!-- ' --></tt> functions are designed to read whitespace
  separated data elements. When the data elements are not separated
  by whitespace characters this I/O concept is not possible.
  Instead the functions which read from the file need some
  knowledge about the type which they intend to read. Fortunately
  this is a well researched area. The lexical scanners used by
  compilers solve exactly this problem.
</p><p>
  Lexical scanners read symbols from a file and use the concept of
  a current character. A symbol can be a name, a number, a string,
  an operator, a parenthesis or something else. The current
  character is the first character to be processed when scanning a
  symbol. After a scanner has read a symbol the current character
  contains the character just after the symbol. This character
  could be the first character of the next symbol or some
  whitespace character. If the set of symbols is chosen wisely all
  decisions about the type of the symbol and when to stop reading
  characters for a symbol can be done based on the current
  character.
</p><p>
  Every <tt><!-- ' --><a class="type" href="#types_file">file</a><!-- ' --></tt> contains a <tt>'bufferChar'</tt> variable which is used as
  current character by the scanner functions defined in the
  <span class="stri">"scanfile.s7i"</span> library. The <span class="stri">"scanfile.s7i"</span> library contains
  skip... and get... functions. The skip... procedures return void
  and are used to skip input while the get... functions return the
  string of characters they have read. The following basic scanner
  functions are defined in the <span class="stri">"scanfile.s7i"</span> library:
</p><dl>
    <dt>skipComment</dt>
      <dd>Skips a possibly nested comment from a <tt><!-- ' --><a class="type" href="#types_file">file</a><!-- ' --></tt>.</dd>
    <dt>getComment</dt>
      <dd>Reads a possibly nested comment from a <tt><!-- ' --><a class="type" href="#types_file">file</a><!-- ' --></tt>.</dd>
    <dt>skipLineComment</dt>
      <dd>Skips a line comment from a <tt><!-- ' --><a class="type" href="#types_file">file</a><!-- ' --></tt>.</dd>
    <dt>getLineComment</dt>
      <dd>Reads a line comment from a <tt><!-- ' --><a class="type" href="#types_file">file</a><!-- ' --></tt>.</dd>
    <dt>getDigits</dt>
      <dd>Reads a sequence of digits from a <tt><!-- ' --><a class="type" href="#types_file">file</a><!-- ' --></tt>.</dd>
    <dt>getNumber</dt>
      <dd>Reads a numeric literal from a <tt><!-- ' --><a class="type" href="#types_file">file</a><!-- ' --></tt>.</dd>
    <dt>getNonDigits</dt>
      <dd>Reads a sequence of non digits from a <tt><!-- ' --><a class="type" href="#types_file">file</a><!-- ' --></tt>.</dd>
    <dt>getQuotedText</dt>
      <dd>Reads a text quoted with " or ' from a <tt><!-- ' --><a class="type" href="#types_file">file</a><!-- ' --></tt>.</dd>
    <dt>getCharLiteral</dt>
      <dd>Reads a character literal from a <tt><!-- ' --><a class="type" href="#types_file">file</a><!-- ' --></tt>.</dd>
    <dt>getStringLiteral</dt>
      <dd>Reads a string literal from a <tt><!-- ' --><a class="type" href="#types_file">file</a><!-- ' --></tt>.</dd>
    <dt>getName</dt>
      <dd>Reads an alphanumeric name from a <tt><!-- ' --><a class="type" href="#types_file">file</a><!-- ' --></tt>.</dd>
</dl><p>
  Contrary to <tt><!-- ' -->read<!-- ' --></tt> and <tt><!-- ' -->getwd<!-- ' --></tt> basic scanner functions
  do not skip leading whitespace characters. To skip whitespace
  characters one of the following functions can be used:
</p><dl>
    <dt>skipSpace</dt>
      <dd>Skips space characters from a <tt><!-- ' --><a class="type" href="#types_file">file</a><!-- ' --></tt>.</dd>
    <dt>skipWhiteSpace</dt>
      <dd>Skips whitespace characters from a <tt><!-- ' --><a class="type" href="#types_file">file</a><!-- ' --></tt>.</dd>
    <dt>getWhiteSpace</dt>
      <dd>Reads whitespace characters from a <tt><!-- ' --><a class="type" href="#types_file">file</a><!-- ' --></tt>.</dd>
    <dt>getWord</dt>
      <dd>Reads a white space delimited word from a <tt><!-- ' --><a class="type" href="#types_file">file</a><!-- ' --></tt>.</dd>
    <dt>skipLine</dt>
      <dd>Skips a line from a <tt><!-- ' --><a class="type" href="#types_file">file</a><!-- ' --></tt>.</dd>
    <dt>getLine</dt>
      <dd>Reads a line from a <tt><!-- ' --><a class="type" href="#types_file">file</a><!-- ' --></tt>.</dd>
</dl><p>
  The advanced scanner functions do skip whitespace characters
  before reading a symbol:
</p><dl>
    <dt>getSymbolOrComment</dt>
      <dd>Reads a symbol or a comment from a <tt><!-- ' --><a class="type" href="#types_file">file</a><!-- ' --></tt>.</dd>
    <dt>getSymbol</dt>
      <dd>Reads a symbol from a <tt><!-- ' --><a class="type" href="#types_file">file</a><!-- ' --></tt>.</dd>
    <dt>getSymbolWithHtmlEntities</dt>
      <dd>Reads a symbol, where html entities are allowed, from a <tt><!-- ' --><a class="type" href="#types_file">file</a><!-- ' --></tt>.</dd>
    <dt>getHtmlTagSymbolOrComment</dt>
      <dd>Reads a HTML tag, a symbol or a comment from a <tt><!-- ' --><a class="type" href="#types_file">file</a><!-- ' --></tt>.</dd>
    <dt>skipXmlComment</dt>
      <dd>Skips a XML comment from a <tt><!-- ' --><a class="type" href="#types_file">file</a><!-- ' --></tt>.</dd>
    <dt>getXmlTagOrContent</dt>
      <dd>Reads a XML/HTML tag or the XML/HTML content text from a <tt><!-- ' --><a class="type" href="#types_file">file</a><!-- ' --></tt>.</dd>
    <dt>getXmlCharacterReference</dt>
      <dd>Reads a predefined XML entity from a <tt><!-- ' --><a class="type" href="#types_file">file</a><!-- ' --></tt>.</dd>
    <dt>getXmlTagHeadOrContent</dt>
      <dd>Reads a XML/HTML tag head or a XML/HTML content from a <tt><!-- ' --><a class="type" href="#types_file">file</a><!-- ' --></tt>.</dd>
    <dt>getSymbolInXmlTag</dt>
      <dd>Reads a symbol which can appear inside a XML/HTML tag from a <tt><!-- ' --><a class="type" href="#types_file">file</a><!-- ' --></tt>.</dd>
    <dt>getNextXmlAttribute</dt>
      <dd>Reads name and value of an attribute inside a XML tag from <tt><!-- ' --><a class="type" href="#types_file">file</a><!-- ' --></tt>.</dd>
    <dt>getHtmlAttributeValue</dt>
      <dd>Reads a HTML tag attribute value from a <tt><!-- ' --><a class="type" href="#types_file">file</a><!-- ' --></tt>.</dd>
    <dt>getNextHtmlAttribute</dt>
      <dd>Reads name and value of an attribute inside a HTML tag from a <tt><!-- ' --><a class="type" href="#types_file">file</a><!-- ' --></tt>.</dd>
    <dt>getSimpleSymbol</dt>
      <dd>Reads a simple symbol from a <tt><!-- ' --><a class="type" href="#types_file">file</a><!-- ' --></tt>.</dd>
</dl><p>
  All scanner functions assume that the first character to be
  processed is in <tt>'bufferChar'</tt> and after they are finished the next
  character which should be processed is also in <tt>'bufferChar'</tt>.
  To use scanner functions for a new opened file it is necessary to
  assign the first character to the <tt>'bufferChar'</tt> with:
</p><pre>
    myFile.bufferChar := getc(myFile);
</pre><p>
  In most cases whole files are either processed with normal I/O
  functions or with scanner functions. When normal I/O functions
  need to be combined with scanner functions care has to be taken:
</p><ul>
    <li><!-- -  -->When the last function which read from a file was
      one of <tt><!-- ' -->read<!-- ' --></tt>, <tt><!-- ' -->readln<!-- ' --></tt>, <tt><!-- ' -->getwd<!-- ' --></tt> or <tt><!-- ' -->getln<!-- ' --></tt>
      the <tt>'bufferChar'</tt> already contains the character which
      should be processed next and therefore subsequent scanner
      functions can be used.</li>

    <li><!-- -  -->Other I/O functions like <tt><!-- ' -->getc<!-- ' --></tt> and <tt><!-- ' -->gets<!-- ' --></tt>
      do not assign something to <tt>'bufferChar'</tt>. In this
      case something should be assigned to <tt>'bufferChar'</tt>.</li>

    <li><!-- -  -->Switching back from scanner functions to
      normal I/O functions is best done when the content of
      <tt>'bufferChar'</tt> is known. For example at the end
      of the line.</li>
</ul><p>
  Scanner functions are helpful when it is necessary to read
  numeric input without failing when no digits are present:
</p><pre>
    skipWhiteSpace(IN);
    <span class="keywd">if</span> eoln(IN) <span class="keywd">then</span>
      writeln("empty input");
    <span class="keywd">elsif</span> IN.bufferChar <span class="keywd">in</span> {'0' .. '9'} <span class="keywd">then</span>
      number := <span class="type">integer</span> <span class="op">parse</span> getDigits(IN);
      skipLine(IN);
      writeln("number " &lt;&amp; number);
    <span class="keywd">else</span>
      stri := getLine(IN);
      writeln("command " &lt;&amp; literal(stri));
    <span class="keywd">end if</span>;
</pre><p>
  The function <tt><!-- ' -->getSymbol<!-- ' --></tt> is designed to read Seed7 symbols. When
  the end of the file is reached it returns <tt><span class="stri">""</span></tt>.
  With <tt><!-- ' -->getSymbol<!-- ' --></tt> name-value pairs can be read:
</p><pre>
    name := getSymbol(inFile);
    <span class="keywd">while</span> name &lt;> <span class="stri">""</span> <span class="keywd">do</span>
      <span class="keywd">if</span> name &lt;> <span class="stri">"#"</span> <span class="keywd">and</span> getSymbol(inFile) = nt color=maroon>"="/font> <span class="keywd">then</span>
        aValue = getSymbol(inFile);
        <span class="keywd">if</span> aValue &lt;> <span class="stri">""</span> <span class="keywd">then</span>
          <span class="keywd">if</span> aValue[1] = <span class="stri">'"'</span> <span class="keywd">then</span>
            keyValueHash @:= [name] aValue[2 ..];
          <span class="keywd">elsif</span> aValue[1] <span class="keywd">in</span> {<span class="stri">'0'</span> .. <span class="stri">'9'</span>} <span class="keywd">then</span>
            keyValueHash @:= [name] aValue;
          <span class="keywd">end if</span>;
        <span class="keywd">end if</span>;
      <span class="keywd">end if</span>;
    <span class="keywd">end while</span>;
</pre><p>
  The following loop can be used to process the symbols of a Seed7 program:
</p><pre>
    inFile.bufferChar := getc(inFile);
    currSymbol := getSymbol(inFile);
    <span class="keywd">while</span> currSymbol &lt;> <span class="stri">""</span> <span class="keywd">do</span>
      ... process currSymbol ...
      currSymbol := getSymbol(inFile);
    <span class="keywd">end while</span>;
</pre><p>
  Whitespace and comments are automatically skipped with the
  function <tt><!-- ' -->getSymbol<!-- ' --></tt>. When comments should also be returned the
  function <tt><!-- ' -->getSymbolOrComment<!-- ' --></tt> can be used. Together with the
  function <tt><!-- ' -->getWhiteSpace<!-- ' --></tt> it is even possible to get the
  whitespace between the symbols:
</p><pre>
    <span class="keywd">const</span> <span class="type">func string</span>: processFile (<span class="keywd">in</span> <span class="type">string</span>: fileName) <span class="keywd">is func</span>
      <span class="keywd">result</span>
        <span class="keywd">var</span> <span class="type">string</span>: result <span class="keywd">is</span> <span class="stri">""</span>;
      <span class="keywd">local</span>
        <span class="keywd">var</span> <span class="type">file</span>: inFile <span class="keywd">is</span> STD_NULL;
        <span class="keywd">var</span> <span class="type">string</span>: currSymbol <span class="keywd">is</span> <span class="stri">""</span>;
      <span class="keywd">begin</span>
        inFile := open(fileName, <span class="stri">"r"</span>);
        <span class="keywd">if</span> inFile &lt;> STD_NULL <span class="keywd">then</span>
          inFile.bufferChar := getc(inFile);
          result := getWhiteSpace(inFile);
          currSymbol := getSymbolOrComment(inFile);
          <span class="keywd">while</span> currSymbol &lt;> <span class="stri">""</span> <span class="keywd">do</span>
            result &amp;:= currSymbol;
            result &amp;:= getWhiteSpace(inFile);
            currSymbol := getSymbolOrComment(inFile);
          <span class="keywd">end while</span>;
        <span class="keywd">end if</span>;
      <span class="keywd">end func</span>;
</pre><p>
  In the example above the function <tt>'processFile'</tt> gathers all
  symbols, whitespace and comments in the string it returns. The
  string returned by <tt>'processFile'</tt> is equivalent to the one
  returned by the function <tt>'getf'</tt>. That way it is easy to test
  the scanner functionality.
</p><p>
  The logic with <tt><!-- ' -->getWhiteSpace<!-- ' --></tt> and <tt><!-- ' -->getSymbolOrComment<!-- ' --></tt> can be used
  to add HTML tags to comments and literals. The following function
  colors comments with green, string and char literals with maroon and
  numeric literals with purple:
</p><pre>
    <span class="keywd">const</span> <span class="type">proc</span>: sourceToHtml (<span class="keywd">inout</span> <span class="type">file</span>: inFile, <span class="keywd">inout</span> <span class="type">file</span>: outFile) <span class="keywd">is func</span>
      <span class="keywd">local</span>
        <span class="keywd">var</span> <span class="type">string</span>: currSymbol <span class="keywd">is</span> <span class="stri">""</span>;
      <span class="keywd">begin</span>
        inFile.bufferChar := getc(inFile);
        write(outFile, <span class="stri">"&lt;pre>\n"</span>);
        write(outFile, getWhiteSpace(inFile));
        currSymbol := getSymbolOrComment(inFile);
        <span class="keywd">while</span> currSymbol &lt;> <span class="stri">""</span> <span class="keywd">do</span>
          currSymbol := replace(currSymbol, <span class="stri">"&amp;"</span>, <span class="stri">"&amp;amp;"</span>);
          currSymbol := replace(currSymbol, <span class="stri">"&lt;"</span>, <span class="stri">"&amp;lt;"</span>);
          <span class="keywd">if</span> currSymbol[1] <span class="keywd">in</span> {<span class="stri">'"'</span>, <span class="stri">'''</span>} <span class="keywd">then</span>
            write(outFile, <span class="stri">"&lt;font color=\"maroon\">"</span>);
            write(outFile, currSymbol);
            write(outFile, <span class="stri">"&lt;/font>"</span>);
          <span class="keywd">elsif</span> currSymbol[1] = <span class="stri">'#'</span> <span class="keywd">or</span> startsWith(currSymbol, <span class="stri">"(*"</span>) <span class="keywd">then</span>
            write(outFile, <span class="stri">"&lt;font color=\"green\">"</span>);
            write(outFile, currSymbol);
            write(outFile, <span class="stri">"&lt;/font>"</span>);
          <span class="keywd">elsif</span> currSymbol[1] <span class="keywd">in</span> digit_char <span class="keywd">then</span>
            write(outFile, <span class="stri">"&lt;font color=\"purple\">"</span>);
            write(outFile, currSymbol);
            write(outFile, <span class="stri">"&lt;/font>"</span>);
          <span class="keywd">else</span>
            write(outFile, currSymbol);
          <span class="keywd">end if</span>;
          write(outFile, getWhiteSpace(inFile));
          currSymbol := getSymbolOrComment(inFile);
        <span class="keywd">end while</span>;
        write(outFile, <span class="stri">"&lt;/pre>\n"</span>);
      <span class="keywd">end func</span>;
</pre><p>
  The functions <tt><!-- ' -->skipSpace<!-- ' --></tt> and <tt><!-- ' -->skipWhiteSpace<!-- ' --></tt> are defined in
  the <span class="stri">"scanfile.s7i"</span> library as follows:
</p><pre>
    <span class="keywd">const</span> <span class="type">proc</span>: skipSpace (<span class="keywd">inout</span> <span class="type">file</span>: inFile) <span class="keywd">is func</span>
      <span class="keywd">local</span>
        <span class="keywd">var</span> <span class="type">char</span>: ch <span class="keywd">is</span> <span class="stri">' '</span>;
      <span class="keywd">begin</span>
        ch := inFile.bufferChar;
        <span class="keywd">while</span> ch = ' ' <span class="keywd">do</span>
          ch := getc(inFile);
        <span class="keywd">end while</span>;
        inFile.bufferChar := ch;
      <span class="keywd">end func</span>;

    <span class="keywd">const</span> <span class="type">proc</span>: skipWhiteSpace (<span class="keywd">inout</span> <span class="type">file</span>: inFile) <span class="keywd">is func</span>
      <span class="keywd">begin</span>
        <span class="keywd">while</span> inFile.bufferChar <span class="keywd">in</span> white_space_char <span class="keywd">do</span>
          inFile.bufferChar := getc(inFile);
        <span class="keywd">end while</span>;
      <span class="keywd">end func</span>;
</pre><p>
  The functions <tt><!-- ' -->skipComment<!-- ' --></tt> and <tt><!-- ' -->skipLineComment<!-- ' --></tt>, which can be
  used to skip Seed7 comments, are defined as follows:
</p><pre>
    <span class="keywd">const</span> <span class="type">proc</span>: skipComment (<span class="keywd">inout</span> <span class="type">file</span>: inFile) <span class="keywd">is</span> <span class="keywd">func</span>
      <span class="keywd">local</span>
        <span class="keywd">var</span> <span class="type">char</span>: character <span class="keywd">is</span> <span class="stri">' '</span>;
      <span class="keywd">begin</span>
        character := getc(inFile);
        <span class="keywd">repeat</span>
          <span class="keywd">repeat</span>
            <span class="keywd">while</span> character <span class="keywd">not</span> <span class="keywd">in</span> special_comment_char <span class="keywd">do</span>
              character := getc(inFile);
            <span class="keywd">end</span> <span class="keywd">while</span>;
            <span class="keywd">if</span> character = <span class="stri">'('</span> <span class="keywd">then</span>
              character := getc(inFile);
              <span class="keywd">if</span> character = <span class="stri">'*'</span> <span class="keywd">then</span>
                skipComment(inFile);
                character := getc(inFile);
              <span class="keywd">end</span> <span class="keywd">if</span>;
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">until</span> character = <span class="stri">'*'</span> <span class="keywd">or</span> character = EOF;
          <span class="keywd">if</span> character &lt;> EOF <span class="keywd">then</span>
            character := getc(inFile);
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">until</span> character = <span class="stri">')'</span> <span class="keywd">or</span> character = EOF;
        <span class="keywd">if</span> character = EOF <span class="keywd">then</span>
          inFile.bufferChar := EOF;
        <span class="keywd">else</span>
          inFile.bufferChar := getc(inFile);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment"># skipComment</span>

    <span class="keywd">const</span> <span class="type">proc</span>: skipLineComment (<span class="keywd">inout</span> <span class="type">file</span>: inFile) <span class="keywd">is</span> <span class="keywd">func</span>
      <span class="keywd">local</span>
        <span class="keywd">var</span> <span class="type">char</span>: character <span class="keywd">is</span> <span class="stri">' '</span>;
      <span class="keywd">begin</span>
        <span class="keywd">repeat</span>
          character := getc(inFile);
        <span class="keywd">until</span> character = <span class="stri">'\n'</span> <span class="keywd">or</span> character = EOF;
        inFile.bufferChar := character;
      <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment"># skipLineComment</span>
</pre><p>
</p>

<a name="syntax_file_start"></a><p></p>
<a name="syntax_STRUCTURED_SYNTAX_DEFINITION"><h2>9. STRUCTURED SYNTAX DEFINITION</h2></a>
<!-- =============================== -->
<p>
    Most programming languages have only predefined constructs like
  statements and operators. Seed7, on the other hand, additionally
  allows user defined constructs. This chapter introduces the Seed7
  Structured Syntax Description (S7SSD) which is used to define the
  syntax of new constructs. The syntax of predefined constructs is
  also defined with S7SSD.
</p><p>
    The syntax descriptions used in manuals of conventional
  programming languages have no relationship to the approach used by
  the syntax analysis of the corresponding interpreters/compilers.
  S7SSD is a simple syntax description that can be used by humans
  and compilers/interpreters. Although compiler-compilers follow the
  path of machine readable syntax descriptions, they use much more
  complicated syntax and semantic descriptions and do not allow
  users of the language to define new constructs.
</p><p>
    There are different existing notations to specify the syntax of
  programming languages. Backus-Naur Form (BNF) and its variants
  like Extended Backus-Naur Form (EBNF) are examples of such syntax
  specifications. Since it is easier to understand new concepts when
  they are compared to well known concepts, EBNF will be used as a
  base to explain S7SSD.
</p>

<a name="syntax_The_Extended_Backus-Naur_Form"><h3>9.1 The Extended Backus-Naur Form</h3></a>
<p>
    As the name says the Extended Backus-Naur Form is an extension
  of BNF. The extension allows the definition of repetitions and
  optional parts without the use of recursion. EBNF has the
  following elements:
</p><ul>
    <li><!-- -  -->Nonterminal symbols consist of lower case letters and
      underline characters.</li>

    <li><!-- -  -->Terminal symbols are quoted strings or names in upper case
      characters which describe unprintable characters (control
      characters).</li>

    <li><!-- -  -->The concatenation of nonterminal and/or terminal symbols is
      described by writing them in sequence.</li>

    <li><!-- -  -->With | two alternatives can be separated.</li>

    <li><!-- -  -->Expressions of the extended Backus-Naur form can be put within
      parentheses ( ... ) .</li>

    <li><!-- -  -->When an expression is optional it is enclosed in square
      brackets [ ... ] .</li>

    <li><!-- -  -->When an expression may be omitted or repeated it is
      enclosed in curly braces { ... } .</li>
</ul><p>
  The syntax of the extended Backus-Naur form can be described in
  extended Backus-Naur form:
</p><pre>
    syntax_description ::=
      { statement } .

    statement ::=
      identifier '::=' expression '.' .

    expression ::=
      term { '|' term } .

    term ::=
      factor { factor } .

    factor ::=
      identifier | string | '(' expression ')' |
      '[' expression ']' | '{' expression '}' .
</pre><p></p>

<a name="syntax_The_syntax_of_a_statement"><h3>9.2 The syntax of a statement</h3></a>
<p>
    To explain the Seed7 Structured Syntax Description we design a
  new statement, the <a class="link" href="#syntax_The_syntax_of_a_statement">loop-statement</a>. The <a class="link" href="#syntax_The_syntax_of_a_statement">loop-statement</a> should
  be similar to <a class="link" href="#stats_while-statement">while-</a> and <a class="link" href="#stats_repeat-statement">repeat-loops</a> but instead of having
  the conditional exit at the beginning or at the end, it should
  have a conditional exit in the middle of the loop. This middle
  conditional exit should be part of the <a class="link" href="#syntax_The_syntax_of_a_statement">loop-statement</a>. Note that
  the break-statement, which exists in some programming languages,
  is a statement on its own and is not part of the loop which it
  leaves. Therefore the middle conditional exit should not be
  confused with a break-statement. An example of the new <a class="link" href="#syntax_The_syntax_of_a_statement">loop-statement</a>
  is:
<p><pre>
    <font color=blue>loop</font>
      ch := getc(inFile);
    <font color=blue>until</font> ch = <font color=maroon>'\n'</font> <span class="keywd">do</span>
      stri &amp;:= str(ch);
    <font color=blue>end loop</font>;
</pre><p>
  The <tt>'<font color=blue>loop</font>'</tt> example above reads characters from a file and
  concatenates them to a string until the character <tt><font color=maroon>'\n'</font></tt> is read.
  The <tt><font color=maroon>'\n'</font></tt> ends the loop. Hence it is not added to the string.
  An equivalent solution without the usage of the <a class="link" href="#syntax_The_syntax_of_a_statement">loop-statement</a>
  would be:
<p><pre>
    <font color=blue>repeat</font>
      ch := getc(inFile);
      <span class="keywd">if</span> ch &lt;> <font color=maroon>'\n'</font> <span class="keywd">then</span>
        stri &amp;:= str(ch);
      <span class="keywd">end if</span>;
    <font color=blue>until</font> ch = <font color=maroon>'\n'</font>;
</pre><p>
  The S7SSD of the <a class="link" href="#syntax_The_syntax_of_a_statement">loop-statement</a> is:
</p><pre>
    $ <font color=blue>syntax</font> <a class="type" href="#types_expr">expr</a>: .loop.().until.().do.().end.loop   <font color=blue>is</font> -> 25;
</pre><p>
  The details of the S7SSD <tt>'<font color=blue>syntax</font>'</tt> definition will be explained
  later. For now we concentrate at the heart of the S7SSD, the
  expression:
</p><pre>
    .loop.().until.().do.().end.loop
</pre><p>
  For the purpose of the syntax description we can just remove the
  dots, which gives:
</p><pre>
     loop () until () do () end loop
</pre><p>
  This are the keywords used in a <a class="link" href="#syntax_The_syntax_of_a_statement">loop-statement</a>. The symbol <tt>()</tt>
  acts as placeholder for an expression.
  With EBNF the <a class="link" href="#syntax_The_syntax_of_a_statement">loop-statement</a> can be described as:
</p><pre>
    loop_statement ::=
      'loop'
        statement
      'until' expression 'do'
        statement
      'end' 'loop' .
</pre><p>
  An EBNF description may use many nonterminal symbols such as
  <tt>'statement'</tt> or <tt>'expression'</tt>. S7SSD does not distinguish
  between different nonterminal symbols. Instead S7SSD only
  knows one nonterminal symbol: <tt>()</tt>
</p><p>
  Therefore S7SSD cannot distinguish between <tt>'statement'</tt>,
  <tt>'expression'</tt> or something else. At the syntax level any kind of
  expression can by substituted for a S7SSD nonterminal symbol <tt>()</tt>.
  With EBNF it is possible to describe constraints such as the type
  of an expression. S7SSD relies on semantic checks to verify
  such constraints. Given the S7SSD of the <a class="link" href="#syntax_The_syntax_of_a_statement">loop-statement</a> an
  expression like
</p><pre>
    <font color=blue>loop</font>
      <font color=maroon>"X"</font>
    <font color=blue>until</font> 1+2 <span class="keywd">do</span>
      <a class="type" href="#types_integer">integer</a>
    <font color=blue>end loop</font>
</pre><p>
  would be legal as it contains the required keywords
</p><pre>
   <font color=blue>loop</font>  <font color=blue>until</font>  <span class="keywd">do</span>  <font color=blue>end</font>  <font color=blue>loop</font>
</pre><p>
  and the expressions
</p><pre>
    <font color=maroon>"X"</font>  1+2  <a class="type" href="#types_integer">integer</a>
</pre><p>
  at the places of the <tt>()</tt> symbols. This is exactly what the syntax
  definition specifies, but it would be not be considered correct
  given the description of the <a class="link" href="#syntax_The_syntax_of_a_statement">loop-statement</a> at the beginning of
  the chapter. To determine which types of expressions are allowed
  at the places of the <tt>()</tt> symbol, a semantic definition of the
  <a class="link" href="#syntax_The_syntax_of_a_statement">loop-statement</a> is necessary. A semantic definition is just a
  function definition which uses the keywords and parameters from
  the syntax definition. The definition of the <tt>'<font color=blue>loop</font>'</tt> function
  (semantic definition of the <a class="link" href="#syntax_The_syntax_of_a_statement">loop-statement</a>) is:
</p><pre>
    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: loop
                  (<span class="keywd">in</span> <a class="type" href="#types_proc">proc</a>: statements1)
                until (<font color=blue>ref</font> <font color=red>func boolean</font>: condition) do
                  (<span class="keywd">in</span> <a class="type" href="#types_proc">proc</a>: statements2)
                end loop <font color=blue>is func</font>
      <font color=blue>local</font>
        <span class="keywd">var</span> <a class="type" href="#types_boolean">boolean</a>: exitLoop <font color=blue>is</font> FALSE;
      <span class="keywd">begin</span>
        <font color=blue>repeat</font>
          statements1;
          <font color=blue>if not</font> condition <span class="keywd">then</span>
            statements2;
          <span class="keywd">else</span>
            exitLoop := TRUE;
          <span class="keywd">end if</span>;
        <font color=blue>until</font> exitLoop;
      <span class="keywd">end func</span>;
</pre><p>
  This definition determines the types of the expressions accepted
  between the keywords. Besides that the semantic definition of the
  <a class="link" href="#syntax_The_syntax_of_a_statement">loop-statement</a> is just a normal function definition. Note that
  the sequence of keywords and parameters in the header of this
  function definition is determined by the corresponding syntax
  definition.
</p><p>
  The parameters <tt>'statements1'</tt>, <tt>'condition'</tt> and <tt>'statements2'</tt> are
  call-by-name parameters. A call-by-name parameter is a function
  without parameters. Function types such as <tt><!-- ' --><a class="type" href="#types_proc">proc</a><!-- ' --></tt> or <tt><!-- ' --><font color=red>func boolean</font><!-- ' --></tt>
  are used as type of formal call-by-name parameters. An expression
  with the correct type is allowed as actual call-by-name parameter.
  This actual parameter expression is not evaluated when the
  function is called. Instead the expression is evaluated every time
  the formal call-by-name parameter is used. This way <tt>'statements1'</tt>,
  <tt>'condition'</tt> and <tt>'statements2'</tt> are not executed when the <tt>'<font color=blue>loop</font>'</tt>
  function is called. Inside the body of the <tt>'<font color=blue>loop</font>'</tt> function the
  call-by-name parameters are executed at some places.
</p><p>
  The <tt>'<font color=blue>loop</font>'</tt> function uses a <a class="link" href="#stats_repeat-statement">repeat-</a> and an <a class="link" href="#stats_if-statement">if-statement</a> to
  implement the desired behavior. When necessary the call-by-name
  parameters are executed several times.
</p><p>
  For the <tt>'<font color=blue>loop</font>'</tt> example with the semantic errors (see above) we
  would get an error message like:
</p><pre>
    *** chkloop.sd7(35):51: Match for {loop "X" until {1 + 2 } do integer end loop } failed
</pre><p></p>

<a name="syntax_Priority_and_associativity"><h3>9.3 Priority and associativity</h3></a>
<p>
    When a syntax construct has parameters before the first symbol
  or after the last symbol the priority and the associativity of the
  construct are significant. Constructs with stronger priority bind
  their parameters earlier than constructs with weaker priority. The
  priority is described by a natural number (inclusive 0). The
  strongest priority is 0. Weaker priorities are described by larger
  numbers. What bind means is can be explained with an example:
</p><pre>
                                      =
    A = B + C * D                    / \
                                    A   +
    * priority  6                      / \
    + priority  7                     B   *
    = priority 12                        / \
                                        C   D
</pre><p>
  The * operator has the strongest priority (6) of all operators
  involved. Therefore the * takes its parameters first. Then
  the + (with priority 7) and at last the = (with priority 12)
  follows. This leads to the the following interpretation of
  the expression:
</p><pre>
    A = (B + (C * D))
</pre><p>
  The associativity describes, in which order constructs with equal
  priority bind their parameters. For example
</p><pre>
    A - B - C
</pre><p>
  can be interpreted in two ways:
</p><pre>
    (A - B) - C    or   A - (B - C)
</pre><p>
  The first interpretation is usually preferred by mathematicians
  and is described with the associativity -> . Generally four
  associativities are possible:</p><pre>
                                                   Symbol

    Binding from left to right                       ->

    Binding from right to left                       &lt;-

    Neither the left nor the right parameter
    are allowed to have the same priority            &lt;->

    At the left side there is a binding from
    left to right and at the right side there
    is a binding from right to left                 ->&lt;-
</pre><p>
  The last two possibilities give no legal interpretation in the
  subtraction example. The third kind of associativity ( &lt;-> ) is
  used by the equal operator ( = ) of Pascal because there a
  expression like
</p><pre>
    A = B = C
</pre><p>
  is not legal.
</p><p>
  There is a second way to describe the associativity. The
  associativity describes if an operand must have a stronger
  priority than the priority of the operator. For example:
</p><pre>
                             -                     7
    A - B - C              /   \                 /   \
                          /     \           &lt;=7 /     \ &lt;7
    - priority 7 ->      /       \             /       \
                        -         C           7         0
                      /   \                 /   \
                     /     \           &lt;=7 /     \ &lt;7
                    /       \             /       \
                   A         B           0         0
</pre><p>
  The numbers in the nodes of the right tree show the priority of
  each sub expression (sub tree). With &lt; and &lt;= the required
  condition for the priority of an operand is described. An
  interpretation is legal if all this conditions are met. If there
  are more than one legal interpretations or no legal
  interpretation the expression is illegal.
</p><p>
  Table for the possibilities of associativity:
</p><dl><dd><table border="1" cellspacing="0" cellpadding="5">
    <!-- +---------------+----------------------------------------------+ -->
    <tr><!-- | --><th rowspan="2"> associativity </th><!-- | --><th align="center" colspan="2">             The priority of the              </th><!-- | --></tr>
    <!-- +               +----------------------+-----------------------+ -->
    <tr><!-- |               | --><th align="center"> left operand must be </th><!-- | --><th align="center"> right operand must be </th><!-- | --></tr>
    <!-- +---------------+----------------------+-----------------------+ -->
    <tr><!-- | --><td align="center">      ->       </td><!-- | --><td align="center">          &lt;=          </td><!-- | --><td align="center">          &lt;            </td><!-- | --></tr>
    <tr><!-- | --><td align="center">      &lt;-       </td><!-- | --><td align="center">          &lt;           </td><!-- | --><td align="center">          &lt;=           </td><!-- | --></tr>
    <tr><!-- | --><td align="center">      &lt;->      </td><!-- | --><td align="center">          &lt;           </td><!-- | --><td align="center">          &lt;            </td><!-- | --></tr>
    <tr><!-- | --><td align="center">     ->&lt;-      </td><!-- | --><td align="center">          &lt;=          </td><!-- | --><td align="center">          &lt;=           </td><!-- | --></tr>
    <!-- +---------------+----------------------+-----------------------+ -->
    <tr><!-- | --><td>&nbsp;              </td><!-- | --><td align="center" colspan="2">          than that of the operator           </td><!-- | --></tr>
    <!-- +---------------+----------------------------------------------+ -->
</table></dd></dl><p>
  The parameter before the operator symbol is called left operand.
  The parameter after the last symbol of a construct is called
  right operand. In case of normal operators the last symbol of a
  construct and the operator symbol are identical. If this is not
  the case there is a third kind of operand. Between the operator
  symbol and the last symbol of a construct are the middle operands.
  Middle operands can have any priority.
</p>

<a name="syntax_The_syntax_of_operators"><h3>9.4 The syntax of operators</h3></a>
<p>
    A syntax definition specifies the way a usage of a statement
  or operator must be written. For example a call of the
  <tt><!-- ' -->not<!-- ' --></tt> operator looks like:
</p><pre>
    <font color=blue>not</font> okay
</pre><p>
  To describe the syntax of the <tt><!-- ' -->not<!-- ' --></tt> operator we write:
</p><pre>
    $ <font color=blue>syntax</font> <a class="type" href="#types_expr">expr</a>: .not.() <font color=blue>is</font> &lt;- 13;
</pre><p>
  This means that a <tt><!-- ' -->not<!-- ' --></tt> expression is constructed with the
  symbol <tt><!-- ' -->not<!-- ' --></tt> followed by a parameter. The place of the
  parameter is marked with the () sign. The syntax description
  contains no information about the types of the parameters. At
  the syntax level a parameter may be anything. With <tt>'&lt;-'</tt> the
  associativity of the <tt><!-- ' -->not<!-- ' --></tt> operator is specified as right
  associative. This means that the right operand is allowed to
  have the same priority as the operator symbol. So the
  expression
</p><pre>
    <font color=blue>not not</font> okay
</pre><p>
  is legal and means
</p><pre>
    <font color=blue>not</font> (<font color=blue>not</font> okay)
</pre><p>
  When the associativity of the <tt><!-- ' -->not<!-- ' --></tt> operator is specified with
  <tt>'->'</tt> instead of <tt>'&lt;-'</tt> the <tt>'<font color=blue>not not</font>'</tt> expression above is not legal.
  With 13 the priority of the whole <tt><!-- ' -->not<!-- ' --></tt> operator is determined.
  As convention priorities from 1 to 20 are used by operators
  and priority 25 is used by statements. Arithmetic operators
  have priorities from 1 to 11 and comparisons have priority 12.
</p><p>
  To define the <tt><!-- ' -->not<!-- ' --></tt> operator completely there must be also
  a semantic definition which is as follows:
</p><pre>
    <span class="keywd">const</span> <font color=red>func boolean</font>: not (<span class="keywd">in</span> <a class="type" href="#types_boolean">boolean</a>: aBool) <font color=blue>is func</font>
      <font color=blue>result</font>
        <span class="keywd">var</span> <a class="type" href="#types_boolean">boolean</a>: result <font color=blue>is</font> FALSE;
      <span class="keywd">begin</span>
        <span class="keywd">if</span> aBool <span class="keywd">then</span>
          result := FALSE;
        <span class="keywd">else</span>
          result := TRUE;
        <span class="keywd">end if</span>;
      <span class="keywd">end func</span>;
</pre><p>
  In the declaration the <tt><!-- ' -->not<!-- ' --></tt> operator is written exactly
  in the same way it is written when it is called. The syntax
  definition is used at both places: declaration and call.
  The syntax and semantic declarations define precisely how
  the <tt><!-- ' -->not<!-- ' --></tt> operator works.
</p><p>
    As next example we try an infix operator like the <tt><!-- ' -->and<!-- ' --></tt> operator.
  A call of the <tt><!-- ' -->and<!-- ' --></tt> operator may look like:
</p><pre>
    okay <font color=blue>and not</font> error
</pre><p>
  To describe the syntax of the <tt><!-- ' -->and<!-- ' --></tt> operator we write:
</p><pre>
    $ <font color=blue>syntax</font> <a class="type" href="#types_expr">expr</a>: .().and.() <font color=blue>is</font>    -> 14;
</pre><p>
  This means that an <tt><!-- ' -->and<!-- ' --></tt> expression is constructed with the
  symbol <tt><!-- ' -->and<!-- ' --></tt> surrounded by parameters. The <tt>'->'</tt> defines the
  <tt><!-- ' -->and<!-- ' --></tt> operator as left associative. This means that an expression
  like
</p><pre>
    A <font color=blue>and</font> B <font color=blue>and</font> C
</pre><p>
  is interpreted as
</p><pre>
    (A <font color=blue>and</font> B) <font color=blue>and</font> C
</pre><p>
  With 14 the priority of the whole <tt><!-- ' -->and<!-- ' --></tt> operator is determined.
  Since priority 14 is weaker than the priority of the <tt><!-- ' -->not<!-- ' --></tt> operator
  which is 13 the example expression is evaluated as:
</p><pre>
    okay <font color=blue>and</font> (<font color=blue>not</font> error)
</pre><p>
  Note that the expression
</p><pre>
    okay <font color=blue>and not</font> error
</pre><p>
  makes no sense when the <tt><!-- ' -->and<!-- ' --></tt> operator has priority 12 instead of 14.
</p><p>
  S7SSD treats everything as operator description. Operators
  have priority and associativity. The priority and associativity
  determine in which succession S7SSD syntax rules get applied.
  To explain priority and associativity we use the basic arithmetic
  operations (+,-,*,/). To describe them with EBNF we can write:
</p><pre>
    factor :=
      number | name .

    expression_5 ::=
      factor |
      ( '+' expression_5 ) |
      ( '-' expression_5 ) .

    expression_6 ::=
      expression_5 |
      ( expression_6 '*' expression_7 ) |
      ( expression_6 '/' expression_7 ) .

    expression_7 ::=
      expression_6 |
      ( expression_7 '+' expression_6 ) |
      ( expression_7 '-' expression_6 ) .
</pre><p>
  This describes the following things:
</p><ul>
    <li><!-- -  -->The operators have different priorities:<ul>
      <li><!-- -  -->Plus and minus signs are executed first</li>
      <li><!-- -  -->Multiplication and division are executed second.</li>
      <li><!-- -  -->Addition and subtraction are executed last.</li></ul></li>

    <li><!-- -  -->These priorities are exactly what we expect from an
      arithmetic expression.</li>

    <li><!-- -  -->Additionally we see that ++2 is allowed and interpreted as
      +(+(2)) which means that the plus sign is a right-associative
      operator.</li>

    <li><!-- -  -->We can also see that a*b*c is allowed and interpreted as
      (a*b)*c which means that the multiplication is a
      left-associative operator.</li>
</ul><p>
  All this things can also be described with S7SSD:
</p><pre>
    $ <font color=blue>syntax</font> <a class="type" href="#types_expr">expr</a>: . + .()      is &lt;-  5;
    $ <font color=blue>syntax</font> <a class="type" href="#types_expr">expr</a>: . - .()      is &lt;-  5;
    $ <font color=blue>syntax</font> <a class="type" href="#types_expr">expr</a>: .(). * .()   is  -> 6;
    $ <font color=blue>syntax</font> <a class="type" href="#types_expr">expr</a>: .(). / .()   is  -> 6;
    $ <font color=blue>syntax</font> <a class="type" href="#types_expr">expr</a>: .(). + .()   is  -> 7;
    $ <font color=blue>syntax</font> <a class="type" href="#types_expr">expr</a>: .(). - .()   is  -> 7;
</pre><p>
  As we can see S7SSD is shorter as the description with EBNF.
  A syntax statement is explained as follows:
</p><ul>
    <li><!-- -  -->The $ is used to introduce all hard coded statements.</li>

    <li><!-- -  -->The keyword <tt>'<font color=blue>syntax</font>'</tt> introduces a structured syntax
      description.</li>

    <li><!-- -  -->The result of the recognized expression will have
      the type <tt><!-- ' --><a class="type" href="#types_expr">expr</a><!-- ' --></tt>. The type <tt><!-- ' --><a class="type" href="#types_expr">expr</a><!-- ' --></tt> is used between the syntax
      and the semantic analysis. The type <tt><!-- ' --><a class="type" href="#types_expr">expr</a><!-- ' --></tt> describes
      expressions which are syntactically analyzed but not
      semantically analyzed. After the semantic analysis (and
      during the runtime) the type <tt><!-- ' --><a class="type" href="#types_expr">expr</a><!-- ' --></tt> is not used.</li>

    <li><!-- -  -->The colon ':' is used as separator between type and syntax
      description.</li>

    <li><!-- -  -->A dot expression like <tt>'.(). * .()'</tt> is introduced (as can
      probably be guessed by the name) with a dot. For the purpose
      of the syntax description we can just remove the dots in
      our mind: <tt>'() * ()'</tt></li>

    <li><!-- -  -->The symbol <tt>'<font color=blue>is</font>'</tt> is used in all Seed7 declarations as
      separator between the name and the value.</li>

    <li><!-- -  -->The associativity is described with one of the symbols
      <tt>-></tt> (left-associative), <tt>&lt;-</tt> (right-associative),
      <tt>&lt;-></tt> (not associative) and <tt>->&lt;-</tt> (both associativities).
      When there are no left or right operands, as it is the case
      for the <a class="link" href="#syntax_The_syntax_of_a_statement">loop-statement</a>, the associativity is irrelevant.</li>

    <li><!-- -  -->Finally the priority of the syntax construct is defined with
      a integer literal like <tt>'6'</tt>. The priority <tt>'6'</tt> is used for the
      operators <tt>'*'</tt>, <tt>'/'</tt>, <tt><!-- ' -->div<!-- ' --></tt>, <tt><!-- ' -->rem<!-- ' --></tt>, <tt><!-- ' -->mdiv<!-- ' --></tt> and <tt><!-- ' -->mod<!-- ' --></tt>.</li>
</ul><p></p>

<a name="syntax_Syntax_of_predefined_statements"><h3>9.5 Syntax of predefined statements</h3></a>
<p>
    Predefined statements can also be defined with S7SSD.
  E.g.: The <a class="link" href="#stats_while-statement">while-statement</a>. A use of the <a class="link" href="#stats_while-statement">while-statement</a> is:
</p><pre>
    <span class="keywd">while</span> element_index > 0 <font color=blue>and</font> okay <span class="keywd">do</span>
      processElement;
      write(<font color=maroon>"."</font>);
    <span class="keywd">end while</span>;
</pre><p>
  To describe the syntax of the <a class="link" href="#stats_while-statement">while-statement</a> we write:
</p><pre>
    $ <font color=blue>syntax</font> <a class="type" href="#types_expr">expr</a>: .while.().do.().end.while <font color=blue>is</font> -> 25;
</pre><p>
  This means that the <a class="link" href="#stats_while-statement">while-statement</a> is an expression with the
  symbols <tt>'<span class="keywd">while</span>'</tt>, <tt>'<span class="keywd">do</span>'</tt>, <tt>'<font color=blue>end</font>'</tt> and <tt>'<span class="keywd">while</span>'</tt>. With <tt>'->'</tt> the
  associativity of the <a class="link" href="#stats_while-statement">while-statement</a> is specified as left
  associative. The associativity has no meaning for the
  <a class="link" href="#stats_while-statement">while-statement</a> since there is no parameter before the first
  symbol or after the last symbol. The priority of the whole
  <a class="link" href="#stats_while-statement">while-statement</a> is 25.
</p><p>
  The semantic definition of the <a class="link" href="#stats_while-statement">while-statement</a> is as follows:
</p><pre>
    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: while (<font color=blue>ref</font> func <a class="type" href="#types_boolean">boolean</a>: condition) do
        (<font color=blue>ref</font> <a class="type" href="#types_proc">proc</a>: statement) end while <font color=blue>is func</font>
      <span class="keywd">begin</span>
        <span class="keywd">if</span> condition <span class="keywd">then</span>
          statement;
          <span class="keywd">while</span> condition <span class="keywd">do</span>
            statement;
          <span class="keywd">end while</span>;
        <span class="keywd">end if</span>;
      <span class="keywd">end func</span>;
</pre><p>
  The syntax definition is used for the declaration and for the call.
  This declaration defines precisely how the <a class="link" href="#stats_while-statement">while-statement</a>
  works. It is based on the <a class="link" href="#stats_if-statement">if-statement</a> and uses recursion
  to emulate the repetition of the loop body.
  Another example for a syntax description is the
  <a class="link" href="#stats_repeat-statement">repeat-statement</a>
</p><pre>
    <font color=blue>repeat</font>
      processElement;
      write(<font color=maroon>"."</font>);
    <font color=blue>until</font> element_index = 0 <font color=blue>or not</font> okay;
</pre><p>
  which has the following syntax description:
</p><pre>
    $ <font color=blue>syntax</font> <a class="type" href="#types_expr">expr</a>: .repeat.().until.() <font color=blue>is</font> -> 25;
</pre><p>
  This means that the <a class="link" href="#stats_repeat-statement">repeat-statement</a> is an expression with
  the symbols <tt>'<font color=blue>repeat</font>'</tt> and <tt>'<font color=blue>until</font>'</tt> and a parameter between
  <tt>'<font color=blue>repeat</font>'</tt> and <tt>'<font color=blue>until</font>'</tt> and after <tt>'<font color=blue>until</font>'</tt>. With 25 the priority
  of the whole <a class="link" href="#stats_repeat-statement">repeat-statement</a> is determined. With <tt>'->'</tt> the
  associativity of the <a class="link" href="#stats_repeat-statement">repeat-statement</a> is specified as left
  associative. This allows priorities from 0 to 24 for the
  parameter after <tt>'<font color=blue>until</font>'</tt>. Since statements have priority 25
  it is not possible to write a statement direct behind <tt>'<font color=blue>until</font>'</tt>.
</p><p>
  A simple <a class="link" href="#stats_if-statement">if-statement</a>, without
  <tt>'<span class="keywd">elsif</span>'</tt> part, is the next example.
  A usage of this <a class="link" href="#stats_if-statement">if-statement</a> might be:
</p><pre>
    <span class="keywd">if</span> okay <span class="keywd">then</span>
      writeln(<font color=maroon>"okay"</font>);
    <span class="keywd">else</span>
      writeln(<font color=maroon>"not okay"</font>);
    <span class="keywd">end if</span>;
</pre><p>
  As syntax description we use
</p><pre>
    $ <font color=blue>syntax</font> <a class="type" href="#types_expr">expr</a>: .if.().then.().end.if <font color=blue>is</font>            -> 25;
    $ <font color=blue>syntax</font> <a class="type" href="#types_expr">expr</a>: .if.().then.().else.().end.if <font color=blue>is</font>    -> 25;
</pre><p>
  Note that this description allows <a class="link" href="#stats_if-statement">if-statements</a> with and
  without <tt>'<span class="keywd">else</span>'</tt> parts. As semantic description we use
</p><pre>
    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: if (<span class="keywd">in</span> <a class="type" href="#types_boolean">boolean</a>: condition) then
                  (<span class="keywd">in</span> <a class="type" href="#types_proc">proc</a>: statement)
                end if <font color=blue>is func</font>
      <span class="keywd">begin</span>
        <span class="keywd">case</span> condition <font color=blue>of</font>
          <span class="keywd">when</span> {TRUE}: statement;
        <span class="keywd">end case</span>;
      <span class="keywd">end func</span>;

    <span class="keywd">const</span> proc: if (<span class="keywd">in</span> <a class="type" href="#types_boolean">boolean</a>: condition) then
                  (<span class="keywd">in</span> <a class="type" href="#types_proc">proc</a>: statement1)
                else
                  (<span class="keywd">in</span> <a class="type" href="#types_proc">proc</a>: statement2)
                end if <font color=blue>is func</font>
      <span class="keywd">begin</span>
        <span class="keywd">case</span> condition of
          <span class="keywd">when</span> {TRUE}:  statement1;
          <span class="keywd">when</span> {FALSE}: statement2;
        <span class="keywd">end case</span>;
      <span class="keywd">end func</span>;
</pre><p>
  The two forms of the <a class="link" href="#stats_if-statement">if-statement</a> are based on the
  <a class="link" href="#stats_case-statement">case-statement</a>. A more complex <a class="link" href="#stats_if-statement">if-statement</a> with <tt>'<span class="keywd">elsif</span>'</tt>
  parts can be:
</p><pre>
    <span class="keywd">if</span> number &lt; 0 <span class="keywd">then</span>
      write(<font color=maroon>"less"</font>);
    <span class="keywd">elsif</span> number = 0 <span class="keywd">then</span>
      write(<font color=maroon>"equal"</font>);
    <span class="keywd">else</span>
      write(<font color=maroon>"greater"</font>);
    <span class="keywd">end if</span>;
</pre><p>
  How to define the syntax and the semantic for this statement
  is described in the next chapter.
</p>

<a name="syntax_Advanced_syntax_definitions"><h3>9.6 Advanced syntax definitions</h3></a>
<p>
  When we want to use some special syntax which should be only
  allowed at some place we do the following:
</p><ul>
    <li><!-- -  -->Define the special syntax with S7SSD in a way that does not
      contradict with the rest of the syntax definitions.</li>

    <li><!-- -  -->Use semantic definitions to make sure that this syntax
      construct can only be used at the place desired.</li>
</ul><p>
  The EBNF of the <a class="link" href="#stats_if-statement">if-statement</a> with <tt>'<span class="keywd">elsif</span>'</tt> parts is:
</p><pre>
    if_statement ::=
      'if' expression 'then'
        statement
      { 'elsif' expression 'then'
        statement }
      [ 'else'
        statement ]
      'end' 'if' .
</pre><p>
  The S7SSD of this <a class="link" href="#stats_if-statement">if-statement</a> is:
</p><pre>
    $ <font color=blue>syntax</font> <a class="type" href="#types_expr">expr</a> : .if.().then.().end.if           <font color=blue>is</font> -> 25;
    $ <font color=blue>syntax</font> <a class="type" href="#types_expr">expr</a> : .if.().then.().().end.if        <font color=blue>is</font> -> 25;

    $ <font color=blue>syntax</font> <a class="type" href="#types_expr">expr</a> : .elsif.().then.()               <font color=blue>is</font> <- 60;
    $ <font color=blue>syntax</font> <a class="type" href="#types_expr">expr</a> : .elsif.().then.().()            <font color=blue>is</font> <- 60;
    $ <font color=blue>syntax</font> <a class="type" href="#types_expr">expr</a> : .else.()                        <font color=blue>is</font> <- 60;
</pre><p>
  Instead of one rule (as EBNF does) the rule is broken into several
  S7SSD rules. This is necessary because S7SSD does not support the
  [ ] and { } notations. They are not supported for good reasons:
  They complicate the parameter lists and they are also not so easy
  to implement. On the other hand, the BNF like rules of S7SSD
  lead to semantic constructs which are easy to parse and easy to
  compile. The broken down S7SSD rules of the <a class="link" href="#stats_if-statement">if-statement</a>
  corresponds to the following EBNF description:
</p><pre>
    if_statement ::=
      'if' expression 'then'
        statement
      'end' 'if' .

    if_statement ::=
      'if' expression 'then'
        statement
        elseif_or_else_part
      'end' 'if' .

    elseif_or_else_part ::=
      'elsif' expression 'then'
        statement .

    elseif_or_else_part ::=
      'elsif' expression 'then'
        statement
        elseif_or_else_part .

    elseif_or_else_part ::=
      'else'
        statement .
</pre><p>
  Since S7SSD uses only one nonterminal symbol <tt>'()'</tt> it is the job
  of the semantic level to make sure that only the right nonterminal
  symbol can be used. This is done by introducing the type
  <tt>'<font color=red>ELSIF_PROC</font>'</tt> (which corresponds to the nonterminal symbol
  <tt>'elseif_or_else_part'</tt> of the EBNF) and the type
  <tt>'<font color=red>ELSIF_RESULT</font>'</tt> (which is the result
  of the <tt>'<font color=red>ELSIF_PROC</font>'</tt>).
</p><p>
  Normally a syntax declaration can be used in many semantic
  declarations. E.g.: The syntax of the <tt>'+'</tt> operator is defined
  once and the semantic of the <tt>'+'</tt> operator is defined for the types
  <tt><!-- ' --><a class="type" href="#types_integer">integer</a><!-- ' --></tt>, <tt><!-- ' --><a class="type" href="#types_bigInteger">bigInteger</a><!-- ' --></tt>, <tt><!-- ' --><a class="type" href="#types_float">float</a><!-- ' --></tt>, <tt><!-- ' --><a class="type" href="#types_integer">complex</a><!-- ' --></tt>, ... This possibility
  is not needed for the <a class="link" href="#stats_if-statement">if-statement</a>. For each of the five
  S7SSD syntax rules of the <a class="link" href="#stats_if-statement">if-statement</a> just one
  corresponding semantic declaration is done:
</p><pre>
    <font color=green># Semantic for the syntax: .if.().then.().end.if</font>
    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: if (<span class="keywd">in</span> <a class="type" href="#types_boolean">boolean</a>: condition) then
                  (<span class="keywd">in</span> <a class="type" href="#types_proc">proc</a>: statements)
                end if                                    <font color=blue>is func</font>
      <span class="keywd">begin</span>
        <span class="keywd">case</span> condition <font color=blue>of</font>
          <span class="keywd">when</span> {TRUE}: statements;
        <span class="keywd">end case</span>;
      <span class="keywd">end func</span>;

    <font color=green># Semantic for the syntax: .if.().then.().().end.if</font>
    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: if (<span class="keywd">in</span> <a class="type" href="#types_boolean">boolean</a>: condition) then
                  (<span class="keywd">in</span> <a class="type" href="#types_proc">proc</a>: statements)
                (<span class="keywd">in</span> <font color=red>ELSIF_PROC</font>: elsifPart)
                end if                                    <font color=blue>is func</font>
      <span class="keywd">begin</span>
        <span class="keywd">case</span> condition <font color=blue>of</font>
          <span class="keywd">when</span> {TRUE}: statements;
          <span class="keywd">when</span> {FALSE}: elsifPart;
        <span class="keywd">end case</span>;
      <span class="keywd">end func</span>;

    <font color=green># Semantic for the syntax: .elsif.().then.()</font>
    <span class="keywd">const</span> <font color=red>ELSIF_PROC</font>: elsif (<span class="keywd">in</span> <a class="type" href="#types_boolean">boolean</a>: condition) then
                        (<span class="keywd">in</span> <a class="type" href="#types_proc">proc</a>: statements)             <font color=blue>is func</font>
      <span class="keywd">begin</span>
        <span class="keywd">case</span> condition <font color=blue>of</font>
          <span class="keywd">when</span> {TRUE}: statements;
        <span class="keywd">end case</span>;
      <span class="keywd">end func</span>;

    <font color=green># Semantic for the syntax: .elsif.().then.().()</font>
    <span class="keywd">const</span> <font color=red>ELSIF_PROC</font>: elsif (<span class="keywd">in</span> <a class="type" href="#types_boolean">boolean</a>: condition) then
                        (<span class="keywd">in</span> <a class="type" href="#types_proc">proc</a>: statements)
                      (<span class="keywd">in</span> <font color=red>ELSIF_PROC</font>: elsifPart)          <font color=blue>is func</font>
      <span class="keywd">begin</span>
        <span class="keywd">case</span> condition <font color=blue>of</font>
          <span class="keywd">when</span> {TRUE}: statements;
          <span class="keywd">when</span> {FALSE}: elsifPart;
        <span class="keywd">end case</span>;
      <span class="keywd">end func</span>;

    <font color=green># Semantic for the syntax: .else.()</font>
    <span class="keywd">const</span> <font color=red>ELSIF_PROC</font>: else
                        (<font color=blue>ref</font> <font color=red>void</font>: voidValue)        <font color=blue>is</font> ELSIF_EMPTY;
</pre><p>
  Since no other functions of type <tt>'<font color=red>ELSIF_PROC</font>'</tt> are defined only
  legal <a class="link" href="#stats_if-statement">if-statements</a> can be written.
</p>

<a name="syntax_Comparison_of_EBNF_and_S7SSD"><h3>9.7 Comparison of EBNF and S7SSD</h3></a>
<p>
  In the S7SSD of the <a class="link" href="#syntax_The_syntax_of_a_statement">loop-statement</a>
</p><pre>
    $ <font color=blue>syntax</font> <a class="type" href="#types_expr">expr</a>: .loop.().until.().do.().end.loop <font color=blue>is</font> -> 25;
</pre><p>
  are no nonterminal expressions <tt>'()'</tt> before the first keyword or
  after the last keyword. Therefore the associativity does not play
  any role. The nonterminal expressions <tt>'()'</tt> of the <a class="link" href="#syntax_The_syntax_of_a_statement">loop-statement</a>
  are all surrounded by keywords and therefore they can have any
  priority. As priority of the <tt>'<font color=blue>loop</font>'</tt> 25 is chosen just because
  most other statements have also priority 25. The assignments
  (:= +:= *:= ...) have priority 20 and all operators used in
  arithmetic, boolean and string expressions have priorities less
  than 20. BTW: The semicolon operator (;) is defined with the
  priority 50. Operators with a priority of 0 get their parameters
  before operators with priority 1 and so on.
</p><p>
  The corresponding EBNF description of the <a class="link" href="#syntax_The_syntax_of_a_statement">loop-statement</a> would
  be:
</p><pre>
    expression_25 ::=
      'loop'
        expression_127
      'until' expression_127 'do'
        expression_127
      'end' 'loop' .
</pre><p>
  We must keep in mind that alternative rules for expression_25 are
  also possible and that for every priority level a rule like
</p><pre>
    expression_127 ::= expression_126 .
</pre><p>
  is defined. Additionally the following rules are defined:
</p><pre>
    expression_0 ::= token | parentheses_expression |
      call_expression | dot_expression .

    token ::=
      identifier | literal .

    parentheses_expression ::=
      '(' expression_127 ')' .

    call_expression ::=
      expression_127 [ '('
      [ expression_127 { ',' expression_127 } ]
      ')' ] .

    dot_expression ::=
      [ '.' ] call_expression { '.' call_expression } .
</pre><p>
  There are some things which are out of the scope of S7SSD.
  The syntax of tokens (whitespace, comments, identifiers and
  literals) and expressions (parentheses, function calls and dot
  expressions) is hard coded. The hard coded constructs are described
  in <a class="link" href="#tokens_file_start">chapter 10 (Tokens)</a> and <a class="link" href="#expr_file_start">chapter 11 (Expressions)</a>.
</p><p>
  For the reasons mentioned above it is not possible to transform
  every EBNF syntax description into S7SSD. Transforming S7SSD
  descriptions to EBNF is always possible.
</p><p>
  The advantage of S7SSD lies in its simplicity and that a fast
  automated syntax recognition algorithm can be easily implemented.
  It is exactly the combination of hard coded syntax recognition and
  flexible syntax rules that make it successful.
</p>

<a name="tokens_file_start"></a><p></p>
<a name="tokens_TOKENS"><h2>10. TOKENS</h2></a>
<!-- ========= -->
<p>
    A program consists of a sequence of tokens which may be delimited
  by white space. There are two types of tokens:
</p><pre>
    identifiers
    literals
</pre><p>
  Syntax:
</p><pre>
    program ::=
      { white_space | token } .

    token ::=
      identifier | literal .
</pre><p></p>

<a name="tokens_White_space"><h3>10.1 White space</h3></a>
<p>
    There are three types of white space
</p><pre>
    spaces
    comments
    line comments
</pre><p>
  White space always terminates a preceding token. Some white
  space is required to separate otherwise adjacent tokens.
</p><p>
  Syntax:
</p><pre>
    white_space ::=
      ( space | comment | line_comment )
      { space | comment | line_comment } .
</pre><p></p>

<a name="tokens_Spaces"><h4>10.1.1 Spaces</h4></a>
<p>
    There are several types of space characters which are ignored
  except as they separate tokens:
</p><pre>
    blanks, horizontal tabs, carriage returns and new lines.
</pre><p>
  Syntax:
</p><pre>
    space ::=
      ' ' | TAB | CR | NL .
</pre><p></p>

<a name="tokens_Comments"><h4>10.1.2 Comments</h4></a>
<p>
    Comments are introduced with the characters <font color=green>(* and are
  terminated with the characters *)</font> . For example:
</p><pre>
    <font color=green>(* This is a comment *)</font>
</pre><p>
  Comment nesting is allowed so it is possible to comment out
  larger sections of the program which can also include comments.
  Comments cannot occur within string or character literals.
</p><p>
  Syntax:
</p><pre>
    comment ::=
      '(*' { any_character } '*)' .
</pre><p></p>

<a name="tokens_Line_comments"><h4>10.1.3 Line comments</h4></a>
<p>
    Line comments are introduced with the character <font color=green># and are
  terminated with the end of the line.</font><br>
  For example:
</p><pre>
    <font color=green># This is a comment</font>
</pre><p>
  Comments cannot occur within string, character or numerical
  literals.
</p><p>
  Syntax:
</p><pre>
    line_comment ::=
      '#' { any_character } NL .
</pre><p></p>

<a name="tokens_Identifiers"><h3>10.2 Identifiers</h3></a>
<p>
    There are three types of identifiers
</p><pre>
    name identifiers
    special identifiers
    parenthesis
</pre><p>
  Identifiers can be written adjacent except that between two
  name identifiers and between two special identifiers white space
  must be used to separate them.
</p><p>
  Syntax:
</p><pre>
    identifier ::=
      name_identifier | special_identifier | parenthesis .
</pre><p></p>

<a name="tokens_Name_identifiers"><h4>10.2.1 Name identifiers</h4></a>
<p>
    A name identifier is a sequence of letters, digits and
  underscores ( _ ). The first character must be a letter or an
  underscore. Examples of name identifiers are:
</p><pre>
    NUMBER  integer  const  if  UPPER_LIMIT  LowerLimit  x5  _end
</pre><p>
  Upper and lower case letters are different. Name identifiers
  may have any length and all characters are significant. The
  name identifier is terminated with a character which is
  neither a letter (or _ ) nor a digit. The terminating
  character is not part of the name identifier.
</p><p>
  Syntax:
</p><pre>
    name_identifier ::=
      ( letter | underscore ) { letter | digit | underscore } .

    letter ::=
      upper_case_letter | lower_case_letter .

    upper_case_letter ::=
      'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' |
      'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' |
      'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' .

    lower_case_letter ::=
      'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' |
      'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' |
      'u' | 'v' | 'w' | 'x' | 'y' | 'z' .

    digit ::=
      '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' .

    underscore ::=
      '_' .
</pre><p></p>

<a name="tokens_Special_identifiers"><h4>10.2.2 Special identifiers</h4></a>
<p>
    A special identifier is a sequence of special characters.
  Examples of special identifiers are:
</p><pre>
    +  :=  &lt;=  *  ->  ,  &amp;
</pre><p>
  Here is a list of all special characters:
</p><pre>
    ! $ % &amp; * + , - . / : ; &lt; = > ? @ \ ^ ` | ~
</pre><p>
  Special identifiers may have any length and all characters are
  significant. The special identifier is terminated with a character
  which is not a special character. The terminating character is
  not part of the special identifier.
</p><p>
  Syntax:
</p><pre>
    special_identifier ::=
      special_character { special_character } .

    special_character ::=
      '!' | '$' | '%' | '&amp;' | '*' | '+' | ',' | '-' | '.' | '/' |
      ':' | ';' | '&lt;' | '=' | '>' | '?' | '@' | '\' | '^' | '`' |
      '|' | '~' .
</pre><p></p>

<a name="tokens_Parentheses"><h4>10.2.3 Parentheses</h4></a>
<p>
    A parenthesis is one of the following characters:
</p><pre>
    ( ) [ ] { }
</pre><p>
  Note that a parenthesis consists of only one character. Except
  for the character sequence (* (which introduces a comment)
  a parenthesis is terminated with the next character.
</p><p>
  Syntax:
</p><pre>
    parenthesis ::=
      '(' | ')' | '[' | ']' | '{' | '}' .
</pre><p></p>

<a name="tokens_Literals"><h3>10.3 Literals</h3></a>
<p>
    There are three types of literals
</p><pre>
    integer literals
    character literals
    string literals
</pre><p>
  Syntax:
</p><pre>
    literal ::=
      integer_literal | character_literal | string_literal .
</pre><p></p>

<a name="tokens_Integer_literals"><h4>10.3.1 Integer literals</h4></a>
<p>
    An integer literal is a sequence of digits which is taken to
  be decimal. The sequence of digits may be followed by the letter
  E or e an optional + sign and a decimal exponent. Based numbers
  can be specified when the sequence of digits is followed by
  the # character and a sequence of extended digits. The decimal
  number in front of the # character specifies the base of the
  number which follows the # character. As base a number between
  2 and 36 is allowed. As extended digits the letters A or a can
  be used for 10, B or b can be used for 11 and so on to Z or z
  which can be used as 35.
</p><p>
  Syntax:
</p><pre>
    integer_literal ::=
      decimal_integer [ exponent | based_integer ] .

    decimal_integer ::=
      digit { digit } .

    exponent ::=
      ( 'E' | 'e' ) [ '+' ] decimal_integer .

    based_integer ::=
      '#' extended_digit { extended_digit } .

    extended_digit ::=
      letter | digit .
</pre><p></p>

<a name="tokens_String_literals"><h4>10.3.2 String literals</h4></a>
<p>
    A string literal is a sequence of UTF-8 encoded Unicode
  characters surrounded by double quotes. For example:
</p><pre>
    <font color=maroon>""</font>   <font color=maroon>" "</font>   <font color=maroon>"\""</font>   <font color=maroon>"'"</font>   <font color=maroon>"\'"</font>   <font color=maroon>"String"</font>   <font color=maroon>"ch=\" "</font>   <font color=maroon>"\n\n"</font>
</pre><p>
  In order to represent non-printable characters and certain
  printable characters the following escape sequences may be
  used.
</p><pre>
    audible alert    BEL      \a    backslash    (\)   \\
    backspace        BS       \b    apostrophe   (')   \'   
    escape           ESC      \e    double quote (")   \"
    formfeed         FF       \f
    newline          NL (LF)  \n    control-A          \A
    carriage return  CR       \r      ...
    horizontal tab   HT       \t    control-Z          \Z
    vertical tab     VT       \v
</pre><p>
  Additionally there are the following possibilities:
</p><ul>
    <li><!-- -  -->Two backslashes with a sequence of blanks, horizontal tabs,
      carriage returns and new lines between them are completely
      ignored. The ignored characters are not part of the string.
      This can be used to continue a string in the following line.
      Note that in this case the leading spaces in the new line
      are not part of the string.</li>

    <li><!-- -  -->Two backslashes with an integer literal between them is
      interpreted as character with the specified ordinal number.
      Note that the integer literal is interpreted decimal unless
      it is written as based integer.</li>
</ul><p>
  Strings are implemented with length field and UTF-32 encoding.
  Strings are not '\0\' terminated and therefore can also contain
  binary data.
</p><p>
  Syntax:
</p><pre>
    string_literal ::=
      '"' { string_character } '"' .

    string_character ::=
      printable_character | escape_sequence .

    escape_sequence ::=
      '\a' | '\b' | '\e' | '\f' | '\n' | '\r' | '\t' | '\v' |
      '\\' | '\''' | '\"' | '\' upper_case_letter |
      '\' { space } '\' | '\' integer_literal '\' .
</pre><p></p>

<a name="tokens_Character_literals"><h4>10.3.3 Character literals</h4></a>
<p>
    A character literal is an UTF-8 encoded Unicode character
  enclosed in single quotes. For example:
</p><pre>
    <font color=maroon>'a'</font>   <font color=maroon>' '</font>   <font color=maroon>'\n'</font>   <font color=maroon>'!'</font>   <font color=maroon>'\\'</font>   <font color=maroon>'2'</font>   <font color=maroon>'"' </font>  <font color=maroon>'\"'</font>   <font color=maroon>'\''</font>
</pre><p>
  To represent control characters and certain other characters in
  character literals the same escape sequences as for string
  literals may be used.
</p><p>
  Syntax:
</p><pre>
    character_literal ::=
      ''' ( printable_character | escape_sequence ) ''' .

    escape_sequence ::=
      '\a' | '\b' | '\e' | '\f' | '\n' | '\r' | '\t' | '\v' |
      '\\' | '\''' | '\"' | '\' upper_case_letter |
      '\' { space } '\' | '\' integer_literal '\' .
</pre><p></p>

<a name="expr_file_start"></a><p></p>
<a name="expr_EXPRESSIONS"><h2>11. EXPRESSIONS</h2></a>
<!-- =============== -->
<p>
    There are two types of expressions. On one side there so
  called simple expressions which are constructed using fixed
  predefined syntax rules. On the other side there are expressions
  which are constructed according to syntax rules defined with
  syntax declarations. Here we describe only simple expressions.
  How syntax declarations work is described in <a class="link" href="#decls_Syntax_declarations">Chapter 3.2
  (Syntax declarations)</a> and <a class="link" href="#syntax_file_start">chapter 9 (Structured syntax
  definition)</a>. There are only few fixed predefined syntax rules:
</p>

<a name="expr_EXPRESSION_Parentheses"><h3>11.1 Parentheses</h3></a>
<p>
    Parentheses can be used to override any precedence
  rules of predefined and user defined syntax constructs.
  For example
</p><pre>
    2 * (3 + 4)
</pre><p>
  specifies that the + operator gets his parameters first.
</p><p>
  Syntax:
</p><pre>
    parentheses_expression ::=
      '(' expression ')' .
</pre><p></p>

<a name="expr_Call_expressions"><h3>11.2 Call expressions</h3></a>
<p>
    Call expressions can also be used to form a list.
  For example
</p><pre>
    writeln(<font color=maroon>"hello world"</font>)
</pre><p>
  forms a list expression with the elements
</p><pre>
    <font color=maroon>"hello world"</font>
    writeln
</pre><p>
  The meta object of this list is specified with the system
  declaration <font color=maroon>"system expr"</font> which is defined in the include
  file <font color=maroon>"syntax.s7i"</font> included from <font color=maroon>"seed7_05.s7i"</font> as
</p><pre>
    $ <font color=blue>system</font> <font color=maroon>"expr"</font> is expr;
</pre><p>
  A call expression with two parameters as
</p><pre>
    pos(<font color=maroon>"Scotty! Beam me up."</font>, <font color=maroon>"am"</font>)
</pre><p>
  forms a list expression with the elements
</p><pre>
    <font color=maroon>"Scotty! Beam me up."</font>
    <font color=maroon>"am"</font>
    pos
</pre><p>
  Syntax:
</p><pre>
    call_expression ::=
      primary_expression [ '(' comma_expression ')' ] .

    primary_expression ::=
      parentheses_expression | atom .
</pre><p></p>

<a name="expr_Dot_expressions"><h3>11.3 Dot expressions</h3></a>
<p>
    Dot expressions start with a dot and have dots as separator
  between the elements of the list. For example
</p><pre>
    .<font color=blue>not</font>.TRUE
</pre><p>
  and
</p><pre>
    .OKAY.<font color=blue>and</font>.GO_ON
</pre><p>
  form list expressions with the elements
</p><pre>
    <font color=blue>not</font>
    TRUE
</pre><p>
  and
</p><pre>
    OKAY
    <font color=blue>and</font>
    GO_ON
</pre><p>
  The meta object of this list is specified with the system
  declaration <font color=maroon>"system expr"</font> which is defined in the include
  file <font color=maroon>"syntax.s7i"</font> included from <font color=maroon>"seed7_05.s7i"</font> as
</p><pre>
    $ <font color=blue>system</font> <font color=maroon>"expr"</font> <font color=blue>is</font> <font color=red>expr</font>;
</pre><p>
  Dot expressions override the priority of the elements.
  Dot expressions are used in <tt>'<font color=blue>syntax</font>'</tt> declarations.
</p><p>
  Syntax:
</p><pre>
    dot_expression ::=
      [ '.' ] call_expression { '.' call_expression } .
</pre><p></p>

<a name="os_file_start"></a><p></p>
<a name="os_OPERATING_SYSTEM_ACCESS"><h2>12. OPERATING SYSTEM ACCESS</h2></a>
<!-- =========================== -->
<p>
    Seed7 provides a portable access to the services provided
  by an operating system. This interface is oriented towards
  Posix and Unix. The functions in this chapter are defined
  in the libraries <font color=maroon>"osfiles.s7i"</font> and <font color=maroon>"dir.s7i"</font>.
</p>

<a name="os_Standard_path_representation"><h3>12.1 Standard path representation</h3></a>
<p>
    A path specifies the location of a file in a file system.
  Operating systems have different concepts how a path should
  look like. Seed7 compensates this differences with a standard
  path representation. Standard paths are used by all Seed7
  functions dealing with paths. The standard path representation
  uses <tt><a class="type" href="#types_string">string</a>s</tt> with the following properties to describe paths:
</p><ul>
    <li><!-- -  -->The slash (<tt><font color=maroon>'/'</font></tt>) is used as path delimiter.</li>
    <li><!-- -  -->Drive letters are not allowed, but there is a solution
      to replace them.</li>
    <li><!-- -  -->Except for the path <tt><font color=maroon>"/"</font></tt> a standard path is not allowed
      to end with a slash.
</ul><p>
  When a function like <tt><!-- ' -->open<!-- ' --></tt> is called with a path that is not
  <tt><font color=maroon>"/"</font></tt>, but ends with a slash, the exception <tt>'RANGE_ERROR'</tt> is
  raised. Under Windows a standard path like <tt><font color=maroon>"/c"</font></tt> is mapped to
  the drive <tt><font color=maroon>"C:"</font></tt>. Reading the directory <tt><font color=maroon>"/"</font></tt> under Windows
  returns a list of available drives. A path with a backslash
  or with a drive letter may raise the exception <tt>'RANGE_ERROR'</tt>,
  when a function like <tt><!-- ' -->open<!-- ' --></tt> is called.  
</p><p>
  An absolute path specifies an unique location in the file
  system. Absolute paths always start with a slash. A relative
  path specifies a location relative to the current working
  directory of the program. Although standard paths are defined
  in a portable way, an absolute path will usually not be portable.
</p>

<a name="os_readDir"><h3>12.2 readDir</h3></a>
<p>
    The function <tt><!-- ' -->readDir<!-- ' --></tt> provides a portable access to the
  contents of directories in the file system. It reads the
  specified directory and the filenames are stored in the
  string-array result. The files <tt><font color=maroon>"."</font></tt> and <tt><font color=maroon>".."</font></tt> are left out from
  the result. Note that the strings contain only the filenames.
  Additional information must be obtained with other calls.
</p><pre>
    <span class="keywd">const</span> <font color=red>func array string</font>: readDir (<span class="keywd">in</span> <a class="type" href="#types_string">string</a>: dirPath) <span class="keywd">is</span> ...
</pre>
  <div><dl><dt><p>Returns:</p></dt><dd><p>
    An array of strings containing the names of all
    files in the specified directory, except <tt><font color=maroon>"."</font></tt> and <tt><font color=maroon>".."</font></tt>
    </p></dd></dl></div>
  <div><dl><dt><p>Possible exceptions:</p></dt><dd><dl>
    <dt>MEMORY_ERROR</dt>
        <dd>Not enough memory to convert <tt>'dirPath'</tt> to the system
        path type or not enough memory to represent the result
        <tt>'<font color=red>string array</font>'</tt>.</dd>
    <dt>RANGE_ERROR</dt>
        <dd><tt>'dirPath'</tt> is not representable in the system path type.</dd>
    <dt>FILE_ERROR</dt>
        <dd>A system function returns an error.</dd>
    </dl></dd></dl></div>
  <div><dl><dt><p>Examples:</p></dt><dd><p>
    After the declaration
    </p><pre>
      <span class="keywd">var</span> <font color=red>array string</font>: dir_array <font color=blue>is </font>0 <font color=blue>times</font> <font color=maroon>""</font>;
    </pre><p>
    the statement
    </p><pre>
      dir_array := readDir(<font color=maroon>"."</font>);
    </pre><p>
    reads the current working directory and stores it into the
    string-array <tt>'dir_array'</tt>. The components of the directory
    can now be accessed via indexing:
    </p><pre>
      <font color=blue>for</font> index <font color=blue>range</font> 1 <font color=blue>to</font> length(dir_array) <font color=blue>do</font>
        writeln(dir_array[index]);
      <font color=blue>end for</font>;
    </pre><p></p></dd></dl></div><p></p>

<a name="os_openDir"><h3>12.3 openDir</h3></a>
<p>
    The function <tt><!-- ' -->openDir<!-- ' --></tt> opens the specified
  directory as file. Each line in this directory file
  contains the filename of a file present in the the
  directory. The files <tt><font color=maroon>"."</font></tt> and <tt><font color=maroon>".."</font></tt> are left out from the
  directory file. Note that only filenames can be read
  from the directory file. Additional information must be
  obtained with other calls.
</p><pre>
    <span class="keywd">const</span> <font color=red>func file</font>: openDir (<span class="keywd">in</span> <a class="type" href="#types_string">string</a>: dirPath) <span class="keywd">is</span> ...
</pre>
  <div><dl><dt><p>Returns:</p></dt><dd><p>
    The directory file of the specified directory.
    </p></dd></dl></div>
  <div><dl><dt><p>Possible exceptions:</p></dt><dd><dl>
    <dt>MEMORY_ERROR</dt>
        <dd>Not enough memory to convert <tt>'dirPath'</tt> to the system
        path type or not enough memory to represent the result
        <tt>'<font color=red>string array</font>'</tt>.</dd>
    <dt>RANGE_ERROR</dt>
        <dd><tt>'dirPath'</tt> is not representable in the system path type.</dd>
    <dt>FILE_ERROR</dt>
        <dd>A system function returns an error.</dd>
    </dl></dd></dl></div>
  <div><dl><dt><p>Examples:</p></dt><dd><pre>
      ...

      <font color=blue>include</font> <font color=maroon>"dir.s7i"</font>;

      <span class="keywd">var</span> <a class="type" href="#types_file">file</a>: dir_file <span class="keywd">is</span> STD_NULL;
      <span class="keywd">var</span> <a class="type" href="#types_string">string</a>: file_name <span class="keywd">is</span> <font color=maroon>""</font>;

      ...

      dir_file := openDir(<font color=maroon>"."</font>);
      file_name := getln(dir_file);
      <font color=blue>while</font> file_name &lt;> <font color=maroon>""</font> <font color=blue>do</font>
        writeln(file_name);
        file_name := getln(dir_file);
      <font color=blue>end while</font>;
    </pre><p></p></dd></dl></div><p></p>

<a name="os_getcwd"><h3>12.4 getcwd</h3></a>
<p>
    The function <tt><!-- ' -->getcwd<!-- ' --></tt> returns the current working
  directory of the calling process as absolute path.
</p><pre>
    <span class="keywd">const</span> <font color=red>func string</font>: getcwd <span class="keywd">is</span> ...
</pre>
  <div><dl><dt><p>Returns:</p></dt><dd><p>
    The absolute path of the current working directory.
    </p></dd></dl></div>
  <div><dl><dt><p>Possible exceptions:</p></dt><dd><dl>
    <dt>MEMORY_ERROR</dt>
        <dd>Not enough memory to represent the result <tt><!-- ' --><a class="type" href="#types_string">string</a><!-- ' --></tt>.</dd>
    <dt>FILE_ERROR</dt>
        <dd>The system function returns an error.</dd>
    </dl></dd></dl></div>
  <div><dl><dt><p>Examples:</p></dt><dd><p>
    The statement
    </p><pre>
      my_dir := getcwd;
    </pre><p>
    assigns the full path of the current working directory to
    the <tt><!-- ' --><a class="type" href="#types_string">string</a><!-- ' --></tt> variable <tt>'my_dir'</tt>.
    </p></dd></dl></div><p></p>

<a name="os_chdir"><h3>12.5 chdir</h3></a>
<p>
    The function <tt><!-- ' -->chdir<!-- ' --></tt> changes the current working
  directory of the calling process to the specified directory.
</p><pre>
    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: chdir (<span class="keywd">in</span> <a class="type" href="#types_string">string</a>: name) <span class="keywd">is</span> ...
</pre>
  <div><dl><dt><p>Possible exceptions:</p></dt><dd><dl>
    <dt>MEMORY_ERROR</dt>
        <dd>Not enough memory to convert <tt>'name'</tt> to the system path type.</dd>
    <dt>RANGE_ERROR</dt>
        <dd><tt>'name'</tt> is not representable in the system path type.</dd>
    <dt>FILE_ERROR</dt>
        <dd>A system function returns an error.</dd>
    </dl></dd></dl></div>
  <div><dl><dt><p>Examples:</p></dt><dd><p>
    The statement
    </p><pre>
      chdir(<font color=maroon>"/usr/bin"</font>);
    </pre><p>
    changes the current working directory to <tt><font color=maroon>"/usr/bin"</font></tt>.
    </p></dd></dl></div><p></p>

<a name="os_mkdir"><h3>12.6 mkdir</h3></a>
<p>
    The function <tt><!-- ' -->mkdir<!-- ' --></tt> creates a new directory.
</p><pre>
    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: mkdir (<span class="keywd">in</span> <a class="type" href="#types_string">string</a>: name) <span class="keywd">is</span> ...
</pre>
  <div><dl><dt><p>Possible exceptions:</p></dt><dd><dl>
    <dt>MEMORY_ERROR</dt>
        <dd>Not enough memory to convert <tt>'name'</tt> to the system path type.</dd>
    <dt>RANGE_ERROR</dt>
        <dd><tt>'name'</tt> is not representable in the system path type.</dd>
    <dt>FILE_ERROR</dt>
        <dd>A system function returns an error.</dd>
    </dl></dd></dl></div>
  <div><dl><dt><p>Examples:</p></dt><dd><p>
    The statement
    </p><pre>
      mkdir(<font color=maroon>"my_dir"</font>);
    </pre><p>
    creates the directory <tt><font color=maroon>"my_dir"</font></tt>.
    </p></dd></dl></div><p></p>

<a name="os_fileType"><h3>12.7 fileType</h3></a>
<p>
    The type of a file can determined with <tt><!-- ' -->fileType<!-- ' --></tt> or
  <tt><!-- ' -->fileTypeSL<!-- ' --></tt>:
</p><pre>
    <span class="keywd">const</span> <font color=red>func integer</font>: fileType (<span class="keywd">in</span> <a class="type" href="#types_string">string</a>: filePath) <span class="keywd">is</span> ...
    <span class="keywd">const</span> <font color=red>func integer</font>: fileTypeSL (<span class="keywd">in</span> <a class="type" href="#types_string">string</a>: filePath) <span class="keywd">is</span> ...
</pre><p>
  The function <tt><!-- ' -->fileType<!-- ' --></tt> does follow symbolic links.
  Therefore <tt><!-- ' -->fileType<!-- ' --></tt> never returns <tt>'FILE_SYMLINK'</tt>.
  The function <tt><!-- ' -->fileTypeSL<!-- ' --></tt> does not follow symbolic
  links. Therefore <tt><!-- ' -->fileTypeSL<!-- ' --></tt> can also return
  <tt>'FILE_SYMLINK'</tt>. Most functions which use a file path
  except <tt><!-- ' -->fileTypeSL<!-- ' --></tt> and <tt><!-- ' -->readlink<!-- ' --></tt> follow symbolic links. 
</p>
  <div><dl><dt><p>Returns:</p></dt><dd><dl>
    <dt>FILE_ABSENT</dt>
        <dd>A component of path does not exist.</dd>
    <dt>FILE_UNKNOWN</dt>
        <dd>The file exists but has an unknown type.</dd>
    <dt>FILE_REGULAR</dt>
        <dd>The file is a regular file.</dd>
    <dt>FILE_DIR</dt>
        <dd>The file is a directory.</dd>
    <dt>FILE_CHAR</dt>
        <dd>The file is a character special file.</dd>
    <dt>FILE_BLOCK</dt>
        <dd>The file is a block special file.</dd>
    <dt>FILE_FIFO</dt>
        <dd>The file is a pipe or FIFO special file.</dd>
    <dt>FILE_SYMLINK</dt>
        <dd>The file is a symbolic link.</dd>
    <dt>FILE_SOCKET</dt>
        <dd>The file is a socket.</dd>
    </dl></dd></dl></div>
  <div><dl><dt><p>Possible exceptions:</p></dt><dd><dl>
    <dt>MEMORY_ERROR</dt>
        <dd>Not enough memory to convert <tt>'filePath'</tt> to the system path type.</dd>
    <dt>RANGE_ERROR</dt>
        <dd><tt>'filePath'</tt> is not representable in the system path type.</dd>
    <dt>FILE_ERROR</dt>
        <dd>The system function returns an error other than ENOENT or ENOTDIR.</dd>
    </dl></dd></dl></div><p></p>

<a name="os_fileMode"><h3>12.8 fileMode</h3></a>
<p>
    The permissions of a file can determined with <tt><!-- ' -->fileMode<!-- ' --></tt>:
</p><pre>
    <span class="keywd">const</span> <font color=red>func fileMode</font>: fileMode (<span class="keywd">in</span> <a class="type" href="#types_string">string</a>: filePath) <span class="keywd">is</span> ...
</pre>
  <div><dl><dt><p>Returns:</p></dt><dd><p>
    The <tt>'<font color=red>fileMode</font>'</tt> which is defined as <tt>'<font color=red>set of filePermission</font>'</tt>.
    </p></dd></dl></div>
  <div><dl><dt><p>The literal values of <tt>'<font color=red>filePermission</font>'</tt> are:</p></dt><dd><dl>
    <dt>EXEC_OTHER</dt>
        <dd>others have execute permission</dd>
    <dt>WRITE_OTHER</dt>
        <dd>others have write permission</dd>
    <dt>READ_OTHER</dt>
        <dd>others have read permission</dd>
    <dt>EXEC_GROUP</dt>
        <dd>group has execute permission</dd>
    <dt>WRITE_GROUP</dt>
        <dd>group has write permission</dd>
    <dt>READ_GROUP</dt>
        <dd>group has read permission</dd>
    <dt>EXEC_USER</dt>
        <dd>owner has execute permission</dd>
    <dt>WRITE_USER</dt>
        <dd>owner has write permission</dd>
    <dt>READ_USER</dt>
        <dd>owner has read permission</dd>
    </dl></dd></dl></div>
  <div><dl><dt><p>Possible exceptions:</p></dt><dd><dl>
    <dt>MEMORY_ERROR</dt>
        <dd>Not enough memory to convert <tt>'filePath'</tt> to the system path type.</dd>
    <dt>RANGE_ERROR</dt>
        <dd><tt>'filePath'</tt> is not representable in the system path type.</dd>
    <dt>FILE_ERROR</dt>
        <dd>A system function returns an error.</dd>
    </dl></dd></dl></div><p></p>

<a name="os_setFileMode"><h3>12.9 setFileMode</h3></a>
<p>
    The permissions of a file can changed with <tt><!-- ' -->setFileMode<!-- ' --></tt>:
</p><pre>
    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: setFileMode (<span class="keywd">in</span> <a class="type" href="#types_string">string</a>: filePath, <span class="keywd">in</span> <font color=red>fileMode</font>: newFileMode) <span class="keywd">is</span> ...
</pre><p>
  The type <tt>'<font color=red>fileMode</font>'</tt> is defined as <tt>'<font color=red>set of filePermission</font>'</tt>.
</p>
  <div><dl><dt><p>The literal values of <tt>'<font color=red>filePermission</font>'</tt> are:</p></dt><dd><dl>
    <dt>EXEC_OTHER</dt>
        <dd>others have execute permission</dd>
    <dt>WRITE_OTHER</dt>
        <dd>others have write permission</dd>
    <dt>READ_OTHER</dt>
        <dd>others have read permission</dd>
    <dt>EXEC_GROUP</dt>
        <dd>group has execute permission</dd>
    <dt>WRITE_GROUP</dt>
        <dd>group has write permission</dd>
    <dt>READ_GROUP</dt>
        <dd>group has read permission</dd>
    <dt>EXEC_USER</dt>
        <dd>owner has execute permission</dd>
    <dt>WRITE_USER</dt>
        <dd>owner has write permission</dd>
    <dt>READ_USER</dt>
        <dd>owner has read permission</dd>
    </dl></dd></dl></div>
  <div><dl><dt><p>Possible exceptions:</p></dt><dd><dl>
    <dt>MEMORY_ERROR</dt>
        <dd>Not enough memory to convert <tt>'filePath'</tt> to the system path type.</dd>
    <dt>RANGE_ERROR</dt>
        <dd><tt>'filePath'</tt> is not representable in the system path type.</dd>
    <dt>FILE_ERROR</dt>
        <dd>A system function returns an error.</dd>
    </dl></dd></dl></div><p></p>

<a name="os_fileSize"><h3>12.10 fileSize</h3></a>
<p>
    The size of a file can be determined with <tt><!-- ' -->fileSize<!-- ' --></tt> and <tt><!-- ' -->bigFileSize<!-- ' --></tt>:
</p><pre>
    <span class="keywd">const</span> <font color=red>func integer</font>: fileSize (<span class="keywd">in</span> <a class="type" href="#types_string">string</a>: filePath) <span class="keywd">is</span> ...
    <span class="keywd">const</span> <font color=red>func bigInteger</font>: bigFileSize (<span class="keywd">in</span> <a class="type" href="#types_string">string</a>: filePath) <span class="keywd">is</span> ...
</pre>
  <div><dl><dt><p>Returns:</p></dt><dd><p>
    For directories a size of 0 is returned. For other file types
    the operating system functions <tt>'stat()'</tt> and <tt>'seek()'</tt> are
    used to determine the size of a file. The functions <tt>'fileSize'</tt>
    and <tt>'bigFileSize'</tt> succeed when at least one strategy to determine
    the file size succeeds. 
    </p></dd></dl></div>
  <div><dl><dt><p>Possible exceptions:</p></dt><dd><dl>
    <dt>MEMORY_ERROR</dt>
        <dd>Not enough memory to convert <tt>'filePath'</tt> to the system path type.</dd>
    <dt>RANGE_ERROR</dt>
        <dd><tt>'filePath'</tt> is not representable in the system path type.</dd>
    <dt>RANGE_ERROR</dt>
        <dd>The file size is not representable as <tt><!-- ' --><a class="type" href="#types_integer">integer</a><!-- ' --></tt>
        (this exception is not raised by <tt>'bigFileSize'</tt>).</dd>
    <dt>FILE_ERROR</dt>
        <dd>It was not possible to determine the file size.</dd>
    </dl></dd></dl></div><p></p>

<a name="os_getATime"><h3>12.11 getATime</h3></a>
<p>
    The access time of a file is returned by the function <tt><!-- ' -->getATime<!-- ' --></tt>:
</p><pre>
    <span class="keywd">const</span> <font color=red>func time</font>: getATime (<span class="keywd">in</span> <a class="type" href="#types_string">string</a>: filePath) <span class="keywd">is</span> ...
</pre>
  <div><dl><dt><p>Possible exceptions:</p></dt><dd><dl>
    <dt>MEMORY_ERROR</dt>
        <dd>Not enough memory to convert <tt>'filePath'</tt> to the system path type.</dd>
    <dt>RANGE_ERROR</dt>
        <dd><tt>'filePath'</tt> is not representable in the system path type.</dd>
    <dt>FILE_ERROR</dt>
        <dd>A system function returns an error.</dd>
    </dl></dd></dl></div><p></p>

<a name="os_getCTime"><h3>12.12 getCTime</h3></a>
<p>
    The change time of a file is returned by the function <tt><!-- ' -->getCTime<!-- ' --></tt>:
</p><pre>
    <span class="keywd">const</span> <font color=red>func time</font>: getCTime (<span class="keywd">in</span> <a class="type" href="#types_string">string</a>: filePath) <span class="keywd">is</span> ...
</pre>
  <div><dl><dt><p>Possible exceptions:</p></dt><dd><dl>
    <dt>MEMORY_ERROR</dt>
        <dd>Not enough memory to convert <tt>'filePath'</tt> to the system path type.</dd>
    <dt>RANGE_ERROR</dt>
        <dd><tt>'filePath'</tt> is not representable in the system path type.</dd>
    <dt>FILE_ERROR</dt>
        <dd>A system function returns an error.</dd>
    </dl></dd></dl></div><p></p>

<a name="os_getMTime"><h3>12.13 getMTime</h3></a>
<p>
    The modification time of a file is returned by the function <tt><!-- ' -->getMTime<!-- ' --></tt>:
</p><pre>
    <span class="keywd">const</span> <font color=red>func time</font>: getMTime (<span class="keywd">in</span> <a class="type" href="#types_string">string</a>: filePath) <span class="keywd">is</span> ...
</pre>
  <div><dl><dt><p>Possible exceptions:</p></dt><dd><dl>
    <dt>MEMORY_ERROR</dt>
        <dd>Not enough memory to convert <tt>'filePath'</tt> to the system path type.</dd>
    <dt>RANGE_ERROR</dt>
        <dd><tt>'filePath'</tt> is not representable in the system path type.</dd>
    <dt>FILE_ERROR</dt>
        <dd>A system function returns an error.</dd>
    </dl></dd></dl></div><p></p>

<a name="os_setATime"><h3>12.14 setATime</h3></a>
<p>
    The function <tt><!-- ' -->setATime<!-- ' --></tt> sets the access time of a file:
</p><pre>
    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: setATime (<span class="keywd">in</span> <a class="type" href="#types_string">string</a>: filePath, <span class="keywd">in</span> <a class="type" href="#types_time">time</a>: aTime) <span class="keywd">is</span> ...
</pre>
  <div><dl><dt><p>Possible exceptions:</p></dt><dd><dl>
    <dt>MEMORY_ERROR</dt>
        <dd>Not enough memory to convert <tt>'filePath'</tt> to the system path type.</dd>
    <dt>RANGE_ERROR</dt>
        <dd><tt>'filePath'</tt> is not representable in the system path type or
        <tt>'aTime'</tt> is invalid or cannot be converted to the system file time.</dd>
    <dt>FILE_ERROR</dt>
        <dd>A system function returns an error.</dd>
    </dl></dd></dl></div><p></p>

<a name="os_setMTime"><h3>12.15 setMTime</h3></a>
<p>
    The function <tt><!-- ' -->setMTime<!-- ' --></tt> sets the modification time of a file:
</p><pre>
    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: setMTime (<span class="keywd">in</span> <a class="type" href="#types_string">string</a>: filePath, <span class="keywd">in</span> <a class="type" href="#types_time">time</a>: aTime) <span class="keywd">is</span> ...
</pre>
  <div><dl><dt><p>Possible exceptions:</p></dt><dd><dl>
    <dt>MEMORY_ERROR</dt>
        <dd>Not enough memory to convert <tt>'filePath'</tt> to the system path type.</dd>
    <dt>RANGE_ERROR</dt>
        <dd><tt>'filePath'</tt> is not representable in the system path type or
        <tt>'aTime'</tt> is invalid or cannot be converted to the system file time.</dd>
    <dt>FILE_ERROR</dt>
        <dd>A system function returns an error.</dd>
    </dl></dd></dl></div><p></p>

<a name="os_readlink"><h3>12.16 readlink</h3></a>
<p>
    The function <tt><!-- ' -->readlink<!-- ' --></tt> reads the destination of a symbolic link:
</p><pre>
    <span class="keywd">const</span> <font color=red>func string</font>: readlink (<span class="keywd">in</span> <a class="type" href="#types_string">string</a>: filePath) <span class="keywd">is</span> ...
</pre>
  <div><dl><dt><p>Returns:</p></dt><dd><p>
    The symbolic link refered by <tt>'filePath'</tt>. 
    </p></dd></dl></div>
  <div><dl><dt><p>Possible exceptions:</p></dt><dd><dl>
    <dt>MEMORY_ERROR</dt>
        <dd>Not enough memory to convert <tt>'filePath'</tt> to the system path type or not
        enough memory to represent the result <tt><!-- ' --><a class="type" href="#types_string">string</a><!-- ' --></tt>.</dd>
    <dt>RANGE_ERROR</dt>
        <dd><tt>'filePath'</tt> is not representable in the system path type.</dd>
    <dt>FILE_ERROR</dt>
        <dd>The file described with <tt>'filePath'</tt> does not exist or is not a symbolic link.</dd>
    </dl></dd></dl></div><p></p>

<a name="os_symlink"><h3>12.17 symlink</h3></a>
<p>
    The function <tt><!-- ' -->symlink<!-- ' --></tt> creates a symbolic link called
  <tt>'dest'</tt> that contains the string referred by <tt>'source'</tt>:
</p><pre>
    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: symlink (<span class="keywd">in</span> <a class="type" href="#types_string">string</a>: source, <span class="keywd">in</span> <a class="type" href="#types_string">string</a>: dest) <span class="keywd">is</span> ...
</pre>
  <div><dl><dt><p>Parameters:</p></dt><dd><dl>
    <dt>source</dt>
        <dd>String to be contained in the symbolic link.</dd>
    <dt>dest</dt>
        <dd>Name of the symbolic link to be created.</dd>
    </dl></dd></dl></div>
  <div><dl><dt><p>Possible exceptions:</p></dt><dd><dl>
    <dt>MEMORY_ERROR</dt>
        <dd>Not enough memory to convert <tt>'source'</tt> or <tt>'dest'</tt>
        to the system path type.</dd>
    <dt>RANGE_ERROR</dt>
        <dd><tt>'source'</tt> or <tt>'dest'</tt> is not representable in the
        system path type.</dd>
    <dt>FILE_ERROR</dt>
        <dd>A system function returns an error.</dd>
    </dl></dd></dl></div><p></p>

<a name="os_removeFile"><h3>12.18 removeFile</h3></a>
<p>
    The function <tt><!-- ' -->removeFile<!-- ' --></tt> removes a file or
  empty directory:
</p><pre>
    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: removeFile (<span class="keywd">in</span> <a class="type" href="#types_string">string</a>: filePath) <span class="keywd">is</span> ...
</pre>
  <div><dl><dt><p>Possible exceptions:</p></dt><dd><dl>
    <dt>MEMORY_ERROR</dt>
        <dd>Not enough memory to convert <tt>'filePath'</tt> to the system path type.</dd>
    <dt>RANGE_ERROR</dt>
        <dd><tt>'filePath'</tt> is not representable in the system path type.</dd>
    <dt>FILE_ERROR</dt>
        <dd>The file does not exist or a system function returns an error.</dd>
    </dl></dd></dl></div><p></p>

<a name="os_removeAnyFile"><h3>12.19 removeAnyFile</h3></a>
<p>
    The function <tt><!-- ' -->removeAnyFile<!-- ' --></tt> removes a file independent
  of its file type:
</p><pre>
    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: removeAnyFile (<span class="keywd">in</span> <a class="type" href="#types_string">string</a>: filePath) <span class="keywd">is</span> ...
</pre>
  <div><dl><dt><p>Possible exceptions:</p></dt><dd><dl>
    <dt>MEMORY_ERROR</dt>
        <dd>Not enough memory to convert <tt>'filePath'</tt> to the system path type.</dd>
    <dt>RANGE_ERROR</dt>
        <dd><tt>'filePath'</tt> is not representable in the system path type.</dd>
    <dt>FILE_ERROR</dt>
        <dd>The file does not exist or a system function returns an error.</dd>
    </dl></dd></dl></div>

<a name="os_copyFile"><h3>12.20 copyFile</h3></a>
<p>
    The function <tt><!-- ' -->copyFile<!-- ' --></tt> copies a file or directory
  tree:
</p><pre>
    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: copyFile (<span class="keywd">in</span> <a class="type" href="#types_string">string</a>: sourcePath, <span class="keywd">in</span> <a class="type" href="#types_string">string</a>: destPath) <span class="keywd">is</span> ...
</pre><p>
  Permissions/mode, ownership and timestamps of the destination file
  are determined independent of the corresponding source properties.
  The destination file gets the permissions/mode defined by umask.
  The user executing the program is the owner of the destination file.
  The timestamps of the destination file are set to the current time.
  Symbolic links in sourcePath are always followed.
  Therefore <tt>'copyFile'</tt> will never create a symbolic link.
  Note that <tt>'copyFile'</tt> does not preserve hard
  links (they are resolved to distinct files).
</p>
  <div><dl><dt><p>Possible exceptions:</p></dt><dd><dl>
    <dt>MEMORY_ERROR</dt>
        <dd>Not enough memory to convert <tt>'sourcePath'</tt> or <tt>'destPath'</tt>
        to the system path type.</dd>
    <dt>RANGE_ERROR</dt>
        <dd><tt>'sourcePath'</tt> or <tt>'destPath'</tt> is not representable in the
        system path type.</dd>
    <dt>FILE_ERROR</dt>
        <dd>Source file does not exist, destination file already exists or
        a system function returns an error.</dd>
    </dl></dd></dl></div><p></p>

<a name="os_cloneFile"><h3>12.21 cloneFile</h3></a>
<p>
    The function <tt><!-- ' -->cloneFile<!-- ' --></tt> clones a file or directory
  tree:
</p><pre>
    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: cloneFile (<span class="keywd">in</span> <a class="type" href="#types_string">string</a>: sourcePath, <span class="keywd">in</span> <a class="type" href="#types_string">string</a>: destPath) <span class="keywd">is</span> ...
</pre><p>
  Permissions/mode, ownership and timestamps of the original are
  preserved. Symlinks are not followed. Instead the symlink
  is copied. Note that <tt>'cloneFile'</tt> does not preserve hard
  links (they are resolved to distinct files).
</p>
  <div><dl><dt><p>Possible exceptions:</p></dt><dd><dl>
    <dt>MEMORY_ERROR</dt>
        <dd>Not enough memory to convert <tt>'sourcePath'</tt> or <tt>'destPath'</tt>
        to the system path type.</dd>
    <dt>RANGE_ERROR</dt>
        <dd><tt>'sourcePath'</tt> or <tt>'destPath'</tt> is not representable in the
        system path type.</dd>
    <dt>FILE_ERROR</dt>
        <dd>Source file does not exist, destination file already exists or
        a system function returns an error.</dd>
    </dl></dd></dl></div><p></p>

<a name="os_moveFile"><h3>12.22 moveFile</h3></a>
<p>
    The function <tt><!-- ' -->moveFile<!-- ' --></tt> moves and/or renames a
  file or directory tree:
</p><pre>
    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: moveFile (<span class="keywd">in</span> <a class="type" href="#types_string">string</a>: sourcePath, <span class="keywd">in</span> <a class="type" href="#types_string">string</a>: destPath) <span class="keywd">is</span> ...
</pre><p>
  The function uses the C <tt>'rename()'</tt> function.
  When <tt>'rename()'</tt> fails the file (or directory tree)
  is cloned with <tt>'cloneFile'</tt> (which preserves
  permissions/mode, ownership and timestamps) to the new place
  and with the new name. When <tt>'cloneFile'</tt> succeeds
  the original file is deleted. When <tt>'cloneFile'</tt> fails (no space on
  device or other reason) all remains of the failed clone are
  removed. Note that <tt>'cloneFile'</tt> works for
  symbolic links but does not preserve hard links (they are
  resolved to distinct files).
</p>
  <div><dl><dt><p>Possible exceptions:</p></dt><dd><dl>
    <dt>MEMORY_ERROR</dt>
        <dd>Not enough memory to convert <tt>'sourcePath'</tt> or <tt>'destPath'</tt>
        to the system path type.</dd>
    <dt>RANGE_ERROR</dt>
        <dd><tt>'sourcePath'</tt> or <tt>'destPath'</tt> is not representable in the
        system path type.</dd>
    <dt>FILE_ERROR</dt>
        <dd>Source file does not exist, destination file already exists or
        a system function returns an error.</dd>
    </dl></dd></dl></div><p></p>

<a name="os_argv_PROGRAM"><h3>12.23 argv(PROGRAM)</h3></a>
<p>
    The function <tt>'argv(PROGRAM)'</tt> returns the argument
  vector of the program as array of strings.
</p><pre>
    <span class="keywd">const</span> <font color=red>func array string</font>: argv (PROGRAM) <span class="keywd">is</span> ...
</pre>
  <div><dl><dt><p>Returns:</p></dt><dd><p>
    An array of strings containing the argument vector.
    </p></dd></dl></div><p></p>

<a name="os_path_PROGRAM"><h3>12.24 path(PROGRAM)</h3></a>
<p>
    The function <tt>'path(PROGRAM)'</tt> returns the absolute
  path of the program.
</p><pre>
    <span class="keywd">const</span> <font color=red>func string</font>: path (PROGRAM) <span class="keywd">is</span> ...
</pre>
  <div><dl><dt><p>Returns:</p></dt><dd><p>
    The absolute path of the program.
    </p></dd></dl></div><p></p>

<a name="os_dir_PROGRAM"><h3>12.25 dir(PROGRAM)</h3></a>
<p>
    The function <tt>'dir(PROGRAM)'</tt> returns the absolute
  path of the directory containing the program. The dir(PROGRAM)
  function allows placing configuration data in the directory
  of the program.
</p><pre>
      <span class="keywd">const</span> <font color=red>func string</font>: dir (PROGRAM) <span class="keywd">is</span> ...
</pre>
  <div><dl><dt><p>Returns:</p></dt><dd><p>
    The absolute path of the directory containing the program.
    </p></dd></dl></div><p></p>

<a name="os_getenv"><h3>12.26 getenv</h3></a>
<p>
    The function <tt>'getenv'</tt> determines the value of an
  environment variable.
</p><pre>
    <span class="keywd">const</span> <font color=red>func string</font>: getenv (<span class="keywd">in</span> <a class="type" href="#types_string">string</a>: name) <span class="keywd">is</span> ...
</pre><p>
  The <tt>'getenv'</tt> function searches the environment for an
  environment variable with the given <tt>'name'</tt>. When such
  an environment variable exists the corresponding <tt><!-- ' --><a class="type" href="#types_string">string</a><!-- ' --></tt>
  value is returned.
</p>
  <div><dl><dt><p>Returns:</p></dt><dd><p>
    The value of an environment variable or <font color=maroon>""</font>
    when the requested environment variable does not exist.
    </p></dd></dl></div>
  <div><dl><dt><p>Possible exceptions:</p></dt><dd><dl>
    <dt>MEMORY_ERROR</dt>
        <dd>Not enough memory to convert <tt>'name'</tt> to the system string type or not
        enough memory to represent the result <tt><!-- ' --><a class="type" href="#types_string">string</a><!-- ' --></tt>.</dd>
    </dl></dd></dl></div><p></p>

<a name="os_setenv"><h3>12.27 setenv</h3></a>
<p>
    The function <tt>'setenv'</tt> adds or changes an environment
  variable. 
</p><pre>
    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: setenv (<span class="keywd">in</span> <a class="type" href="#types_string">string</a>: name, <span class="keywd">in</span> <a class="type" href="#types_string">string</a>: value) <span class="keywd">is</span> ...
</pre><p>
  The <tt>'setenv'</tt> function searches the environment for an
  environment variable with the given <tt>'name'</tt>. When such
  an environment variable exists the corresponding value is
  changed to <tt>'value'</tt>. When no environment variable with
  the given <tt>'name'</tt> exists a new environment variable
  <tt>'name'</tt> with the value <tt>'value'</tt> is created.
</p>
  <div><dl><dt><p>Possible exceptions:</p></dt><dd><dl>
    <dt>MEMORY_ERROR</dt>
        <dd>Not enough memory to convert <tt>'name'</tt> or <tt>'value'</tt> to
        the system string type.</dd>
    <dt>RANGE_ERROR</dt>
        <dd>A system function returns an error.</dd>
    </dl></dd></dl></div><p></p>

<a name="actions_file_start"></a><p></p>
<a name="actions_PRIMITIVE_ACTIONS"><h2>13. PRIMITIVE ACTIONS</h2></a>
<!-- ===================== -->
<p>
    Not all functions can be described by calling other
  functions of the same language. For this reason and for
  performance reasons several functions are defined using a
  mechanism called action. For example: It is easy to define
  the <a class="link" href="#stats_while-statement">while-statement</a> by using recursion. But this would
  hurt performance and it would also use a huge amount of
  memory for the runtime stack. In practice an implementation
  of the <a class="link" href="#stats_while-statement">while-statement</a> can use a conditional jump
  instead of a subroutine call. Since Seed7 has no <tt><!-- ' --><span class="keywd">goto</span><!-- ' --></tt>
  statement, this is not an option. Instead the primitive
  action PRC_WHILE can be used. The <a class="link" href="#stats_while-statement">while-statement</a> is
  defined in the basic Seed7 library <tt>'seed7_05.s7i'</tt> with:
</p><pre>
    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: while (<span class="keywd">in</span> <a class="type" href="#types_func">func</a> <a class="type" href="#types_boolean">boolean</a> <span class="keywd">param</span>) do
        (<span class="keywd">in</span> <a class="type" href="#types_proc">proc</a> <span class="keywd">param</span>) end while <span class="keywd">is action</span> <span class="stri">"PRC_WHILE"</span>;
</pre><p>
  This declaration shows the types and the position of
  the parameters of a <a class="link" href="#stats_while-statement">while-statement</a>. Such an action
  declaration contains enough information to use the defined
  construct. The semantic of all primitive actions is
  hard coded in the interpreter and in the compiler. The
  parameters of the hard coded actions and the corresponding
  definitions in Seed7 must match. If you are interested in
  the Seed7 definitions of primitive actions just look into
  the file <tt>'seed7_05.s7i'</tt>.
</p><p>
    Currently there are several hundred primitive actions
  predefined in the interpreter. They all have names in upper
  case characters which have the form:
</p><pre>
    TYPE_ACTION
</pre><p>
  Which means that for example all <tt><!-- ' --><a class="type" href="#types_integer">integer</a><!-- ' --></tt> actions start
  with INT_ and all assignment actions end with _CPY .
  The following list shows actions which are used with more
  than one type:
</p><dl><dd><table border="0" cellspacing="0">
    <tr><td>_ABS      <td width="20"></td><td>Absolute value</td></tr>
    <tr><td>_ADD      <td width="20"></td><td>Addition</td></tr>
    <tr><td>_CAT      <td width="20"></td><td>Concatenation</td></tr>
    <tr><td>_CMP      <td width="20"></td><td>Compare</td></tr>
    <tr><td>_CPY      <td width="20"></td><td>Copy (Assignment)</td></tr>
    <tr><td>_CREATE   <td width="20"></td><td>Initialize (Construct)</td></tr>
    <tr><td>_DESTR    <td width="20"></td><td>Destroy (Destruct)</td></tr>
    <tr><td>_DECR     <td width="20"></td><td>Decrement</td></tr>
    <tr><td>_DIV      <td width="20"></td><td>Division</td></tr>
    <tr><td>_EQ       <td width="20"></td><td>Equal</td></tr>
    <tr><td>_GE       <td width="20"></td><td>Greater equal</td></tr>
    <tr><td>_GETC     <td width="20"></td><td>Get one character from a <span class="type">file</span></td></tr>
    <tr><td>_GETS     <td width="20"></td><td>Get <tt><!-- ' --><a class="type" href="#types_string">string</a><!-- ' --></tt> with maximum length from a <span class="type">file</span></td></tr>
    <tr><td>_GT       <td width="20"></td><td>Greater than</td></tr>
    <tr><td>_HASHCODE <td width="20"></td><td>Compute a hashCode</td></tr>
    <tr><td>_HEAD     <td width="20"></td><td>Head of <tt><!-- ' --><a class="type" href="#types_string">string</a><!-- ' --></tt>, <tt><!-- ' --><a class="type" href="#types_array">array</a><!-- ' --></tt> or <tt><!-- ' --><a class="type" href="#types_ref_list">ref_list</a><!-- ' --></tt></td></tr>
    <tr><td>_ICONV    <td width="20"></td><td>Conversion of <tt><!-- ' --><a class="type" href="#types_integer">integer</a><!-- ' --></tt> to another type</td></tr>
    <tr><td>_IDX      <td width="20"></td><td>Index (Element) of <tt><!-- ' --><a class="type" href="#types_string">string</a><!-- ' --></tt>, <tt><!-- ' --><a class="type" href="#types_array">array</a><!-- ' --></tt> or <tt><!-- ' --><a class="type" href="#types_ref_list">ref_list</a><!-- ' --></tt></td></tr>
    <tr><td>_INCR     <td width="20"></td><td>Increment</td></tr>
    <tr><td>_IPOW     <td width="20"></td><td>Power with <tt><!-- ' --><a class="type" href="#types_integer">integer</a><!-- ' --></tt> exponent</td></tr>
    <tr><td>_LE       <td width="20"></td><td>Less equal</td></tr>
    <tr><td>_LNG      <td width="20"></td><td>Length</td></tr>
    <tr><td>_LOG2     <td width="20"></td><td>Base 2 logarithm</td></tr>
    <tr><td>_LOWER    <td width="20"></td><td>Convert to lower case</td></tr>
    <tr><td>_LSHIFT   <td width="20"></td><td>Shift left</td></tr>
    <tr><td>_LT       <td width="20"></td><td>Less than</td></tr>
    <tr><td>_MDIV     <td width="20"></td><td>Modulo division (Integer division truncated towards negative infinity)</td></tr>
    <tr><td>_MINUS    <td width="20"></td><td>Change sign</td></tr>
    <tr><td>_MOD      <td width="20"></td><td>Modulo (Reminder of _MDIV integer division)</td></tr>
    <tr><td>_MULT     <td width="20"></td><td>Multiply</td></tr>
    <tr><td>_NE       <td width="20"></td><td>Not equal</td></tr>
    <tr><td>_ODD      <td width="20"></td><td>Odd number</td></tr>
    <tr><td>_ORD      <td width="20"></td><td>Ordinal number</td></tr>
    <tr><td>_PARSE    <td width="20"></td><td>Conversion of <tt><!-- ' --><a class="type" href="#types_string">string</a><!-- ' --></tt> to another type</td></tr>
    <tr><td>_PLUS     <td width="20"></td><td>Positive sign (noop)</td></tr>
    <tr><td>_POW      <td width="20"></td><td>Power</td></tr>
    <tr><td>_PRED     <td width="20"></td><td>Predecessor</td></tr>
    <tr><td>_RAND     <td width="20"></td><td>Random value</td></tr>
    <tr><td>_RANGE    <td width="20"></td><td>Range of <tt><!-- ' --><a class="type" href="#types_string">string</a><!-- ' --></tt>, <tt><!-- ' --><a class="type" href="#types_array">array</a><!-- ' --></tt> or <tt><!-- ' --><a class="type" href="#types_ref_list">ref_list</a><!-- ' --></tt></td></tr>
    <tr><td>_REM      <td width="20"></td><td>Remainder (Reminder of _DIV integer division)</td></tr>
    <tr><td>_RSHIFT   <td width="20"></td><td>Arithmetic shift right</td></tr>
    <tr><td>_SBTR     <td width="20"></td><td>Subtract</td></tr>
    <tr><td>_SCAN     <td width="20"></td><td>Convert from <tt><!-- ' --><a class="type" href="#types_string">string</a><!-- ' --></tt> to another type</td></tr>
    <tr><td>_SEEK     <td width="20"></td><td>Set actual file position of a <span class="type">file</span></td></tr>
    <tr><td>_SQRT     <td width="20"></td><td>Square root</td></tr>
    <tr><td>_STR      <td width="20"></td><td>Convert to <tt><!-- ' --><a class="type" href="#types_string">string</a><!-- ' --></tt></td></tr>
    <tr><td>_SUCC     <td width="20"></td><td>Successor</td></tr>
    <tr><td>_TAIL     <td width="20"></td><td>Tail of <tt><!-- ' --><a class="type" href="#types_string">string</a><!-- ' --></tt>, <tt><!-- ' --><a class="type" href="#types_array">array</a><!-- ' --></tt> or <tt><!-- ' --><a class="type" href="#types_ref_list">ref_list</a><!-- ' --></tt></td></tr>
    <tr><td>_TELL     <td width="20"></td><td>Return the actual <span class="type">file</span> position</td></tr>
    <tr><td>_UPPER    <td width="20"></td><td>Convert to upper case</td></tr>
    <tr><td>_VALUE    <td width="20"></td><td>Dereference a <tt><!-- ' --><a class="type" href="#types_reference">reference</a><!-- ' --></tt></td></tr>
    <tr><td>_WRITE    <td width="20"></td><td>Write <tt><!-- ' --><a class="type" href="#types_string">string</a><!-- ' --></tt> to <span class="type">file</span></td></tr>
</table></dd></dl><p>
  Primitive actions are defined for many types. The functions
  which implement the primitive actions are grouped together
  in *lib.c files. The following list contains the action
  prefix, the file containing the functions and a description:
</p><dl><dd><table border="0" cellspacing="0">
    <tr><td>ACT_  <td width="20"></td><td>actlib.c  <td width="20"></td><td><tt><!-- ' --><span class="type">ACTION</span><!-- ' --></tt> operations</td></tr>
    <tr><td>ARR_  <td width="20"></td><td>arrlib.c  <td width="20"></td><td><tt><!-- ' --><a class="type" href="#types_array">array</a><!-- ' --></tt> operations</td></tr>
    <tr><td>BIG_  <td width="20"></td><td>biglib.c  <td width="20"></td><td><tt><!-- ' --><a class="type" href="#types_bigInteger">bigInteger</a><!-- ' --></tt> operations</td></tr>
    <tr><td>BLN_  <td width="20"></td><td>blnlib.c  <td width="20"></td><td><tt><!-- ' --><a class="type" href="#types_boolean">boolean</a><!-- ' --></tt> operations</td></tr>
    <tr><td>BST_  <td width="20"></td><td>bstlib.c  <td width="20"></td><td>Operations for byte strings</td></tr>
    <tr><td>CHR_  <td width="20"></td><td>chrlib.c  <td width="20"></td><td><tt><!-- ' --><a class="type" href="#types_char">char</a><!-- ' --></tt> operations</td></tr>
    <tr><td>CMD_  <td width="20"></td><td>cmdlib.c  <td width="20"></td><td>Various directory, file and other commands</td></tr>
    <tr><td>DCL_  <td width="20"></td><td>dcllib.c  <td width="20"></td><td>Declaration operations</td></tr>
    <tr><td>DRW_  <td width="20"></td><td>drwlib.c  <td width="20"></td><td>Drawing operations</td></tr>
    <tr><td>ENU_  <td width="20"></td><td>enulib.c  <td width="20"></td><td>Enumeration operations</td></tr>
    <tr><td>FIL_  <td width="20"></td><td>fillib.c  <td width="20"></td><td><tt><!-- ' --><span class="type">clib_file</span><!-- ' --></tt> operations</td></tr>
    <tr><td>FLT_  <td width="20"></td><td>fltlib.c  <td width="20"></td><td><tt><!-- ' --><a class="type" href="#types_float">float</a><!-- ' --></tt> operations</td></tr>
    <tr><td>HSH_  <td width="20"></td><td>hshlib.c  <td width="20"></td><td><tt><!-- ' --><a class="type" href="#types_hash">hash</a><!-- ' --></tt> operations</td></tr>
    <tr><td>INT_  <td width="20"></td><td>intlib.c  <td width="20"></td><td><tt><!-- ' --><a class="type" href="#types_integer">integer</a><!-- ' --></tt> operations</td></tr>
    <tr><td>ITF_  <td width="20"></td><td>itflib.c  <td width="20"></td><td>Operations for interface types</td></tr>
    <tr><td>KBD_  <td width="20"></td><td>kbdlib.c  <td width="20"></td><td>Keyboard operations</td></tr>
    <tr><td>LST_  <td width="20"></td><td>lstlib.c  <td width="20"></td><td>List operations</td></tr>
    <tr><td>PRC_  <td width="20"></td><td>prclib.c  <td width="20"></td><td><tt><!-- ' --><a class="type" href="#types_proc">proc</a><!-- ' --></tt> operations and statements</td></tr>
    <tr><td>PRG_  <td width="20"></td><td>prglib.c  <td width="20"></td><td>Program operations</td></tr>
    <tr><td>REF_  <td width="20"></td><td>reflib.c  <td width="20"></td><td><tt><!-- ' --><a class="type" href="#types_reference">reference</a><!-- ' --></tt> operations</td></tr>
    <tr><td>RFL_  <td width="20"></td><td>rfllib.c  <td width="20"></td><td><tt><!-- ' --><a class="type" href="#types_ref_list">ref_list</a><!-- ' --></tt> operations</td></tr>
    <tr><td>SCR_  <td width="20"></td><td>scrlib.c  <td width="20"></td><td>Screen operations</td></tr>
    <tr><td>SCT_  <td width="20"></td><td>sctlib.c  <td width="20"></td><td><tt><!-- ' --><a class="type" href="#types_struct">struct</a><!-- ' --></tt> operations</td></tr>
    <tr><td>SET_  <td width="20"></td><td>setlib.c  <td width="20"></td><td><tt><!-- ' --><a class="type" href="#types_set">set</a><!-- ' --></tt> operations</td></tr>
    <tr><td>SOC_  <td width="20"></td><td>soclib.c  <td width="20"></td><td><tt><!-- ' --><span class="type">PRIMITIVE_SOCKET</span><!-- ' --></tt> operations</td></tr>
    <tr><td>STR_  <td width="20"></td><td>strlib.c  <td width="20"></td><td><tt><!-- ' --><a class="type" href="#types_string">string</a><!-- ' --></tt> operations</td></tr>
    <tr><td>TIM_  <td width="20"></td><td>timlib.c  <td width="20"></td><td><tt><!-- ' --><a class="type" href="#types_time">time</a><!-- ' --></tt> and <tt><!-- ' --><a class="type" href="#types_duration">duration</a><!-- ' --></tt> operations</td></tr>
    <tr><td>TYP_  <td width="20"></td><td>typlib.c  <td width="20"></td><td><tt><!-- ' --><a class="type" href="#types_type">type</a><!-- ' --></tt> operations</td></tr>
    <tr><td>UT8_  <td width="20"></td><td>ut8lib.c  <td width="20"></td><td><tt><!-- ' -->utf8_file<!-- ' --></tt> operations</td></tr>
</table></dd></dl><p>
  The C functions which implement primitive actions have
  lowercase names. E.g.: The action <tt>'PRC_WHILE'</tt> is implemented
  with the C function <tt>'prc_while()'</tt> in the file <tt>'prclib.c'</tt>.
  The parameter list for all C action functions is identical.
  Every *lib.c file has a corresponding *lib.h file which
  contains the prototypes for the action functions.
</p><p>
  In a Seed7 program the operator <tt><!-- ' -->+<!-- ' --></tt> is used to add two <tt><!-- ' --><a class="type" href="#types_integer">integer</a><!-- ' --></tt>
  values. The primitive action, which describes the addition of
  two integers, is <tt>'INT_ADD'</tt>. The connection between <tt><!-- ' -->+<!-- ' --></tt>
  and <tt>'INT_ADD'</tt> is done in the library <tt><span class="stri">"integer.s7i"</span></tt> with the definition:
</p><pre>
    <span class="keywd">const</span> <a class="type" href="#types_func">func</a> <a class="type" href="#types_integer">integer</a>: (<span class="keywd">in</span> <a class="type" href="#types_integer">integer</a>: summand1) + (<span class="keywd">in</span> <a class="type" href="#types_integer">integer</a>: summand2) <span class="keywd">is action</span> <span class="stri">"INT_ADD"</span>;
</pre><p>
  To execute an action a corresponding C function must
  be present in the hi interpreter. The function for the
  action <tt>'INT_ADD'</tt> is <tt>'int_add()'</tt>. The function <tt>'int_add()'</tt>
  is defined in the file <tt>'intlib.c'</tt> with:
</p><pre>
    #ifdef ANSI_C

    objecttype int_add (listtype arguments)
    #else

    objecttype int_add (arguments)
    listtype arguments;
    #endif

      { /* int_add */
        isit_int(arg_1(arguments));
        isit_int(arg_3(arguments));
        return(bld_int_temp(
            take_int(arg_1(arguments)) +
            take_int(arg_3(arguments))));
      } /* int_add */
</pre><p>
  The action functions use ANSI C prototypes and K&amp;R function headers.
  The function <tt>'int_add()'</tt> adds the first and the third argument (the
  second argument contains the + symbol. The file <tt>'objutl.h'</tt>
  contains several macros and functions which help to handle the
  arguments (parameter list) of a C primitive action function.
<ul>
    <li><!-- -  -->The macros <tt>'arg_1'</tt>, <tt>'arg_2'</tt>,
      <tt>'arg_3'</tt>, etc. can be used to get an individual argument
      (E.g.: <tt>'arg_3(arguments)'</tt> ).</li>

    <li><!-- -  -->The macros <tt>'isit_int'</tt>, <tt>'isit_stri'</tt>,
      <tt>'isit_file'</tt>, etc. can be used to check for the correct
      <tt><!-- ' --><a class="type" href="#types_category">category</a><!-- ' --></tt> of an argument
      (E.g.: <tt>'isit_int(arg_1(arguments))'</tt> ).</li>

    <li><!-- -  -->The macros <tt>'take_char'</tt>, <tt>'take_float'</tt>,
      <tt>'take_bigint'</tt>, etc. can be used to get the corresponding
      value of an argument (E.g.: <tt>'take_int(arg_1(arguments))'</tt> ).</li>

    <li><!-- -  -->The functions <tt>'bld_int_temp'</tt>, <tt>'bld_array_temp'</tt>,
      <tt>'bld_win_temp'</tt>, etc. can be used to create the (objecttype)
      result of a primitive action (E.g.: <tt>'return(bld_int_temp(0))'</tt> ).</li>
</ul><p>
  The file <tt>'intlib.h'</tt> contains the prototype for the <tt>'int_add()'</tt>
  function:
</p><pre>
    objecttype int_add (listtype);
</pre><p>
  and also a definition for the K&amp;R C language:
</p><pre>
    objecttype int_add ();
</pre><p>
  Additionally every primitive action is registered in the file
  <tt>'primitive.c'</tt>. The line which incorporates <tt>'INT_ADD'</tt> is:
</p><pre>
    { "INT_ADD",             int_add,             },
</pre><p>
  The entries of the primitive action in the file <tt>'primitive.c'</tt> are
  sorted alphabetically. With this definitions the hi interpreter
  understands a primitive action.
</p><p>
  To allow a primitive function in a compiled Seed7 program the
  Seed7 compiler (comp.sd7) needs to know the action also. The
  compiler function which creates code for the <tt>'INT_ADD'</tt> action is:
</p><pre>
    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: process_int_add (<span class="keywd">in</span> <a class="type" href="#types_ref_list">ref_list</a>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is func</span>

      <span class="keywd">begin</span>
        c_expr.expr &amp;:= <span class="stri">"("</span>;
        process_expr(params[1], c_expr);
        c_expr.expr &amp;:= <span class="stri">") + ("</span>;
        process_expr(params[3], c_expr);
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">end func</span>;
</pre><p>
  This function is called from the function <tt>'process_action'</tt> with:
</p><pre>
    <span class="keywd">elsif</span> action_name = <span class="stri">"INT_ADD"</span> <span class="keywd">then</span>
      process_int_add(params, c_expr);
</pre><p>
  Some primitive actions are more complicated and inline code would
  not be the best solution for it. In this case an additional helper
  function is used. The action <tt>'INT_LOG2'</tt> is such an action. The
  definition of the function <tt>'int_log2()'</tt> in the file <tt>'intlib.c'</tt> is:
</p><pre>
    #ifdef ANSI_C

    objecttype int_log2 (listtype arguments)
    #else

    objecttype int_log2 (arguments)
    listtype arguments;
    #endif

      { /* int_log2 */
        isit_int(arg_1(arguments));
        return bld_int_temp(
            intLog2(take_int(arg_1(arguments))));
      } /* int_log2 */
</pre><p>
  The main work for the primitive action <tt>'INT_LOG2'</tt> is done in
  the helper function <tt>'intLog2()'</tt>. The helper function <tt>'intLog2()'</tt>
  can be found in the file <tt>'int_rtl.c'</tt>:
</p><pre>
    /**
     *  Compute the truncated base 2 logarithm of an integer number.
     *  @return the truncated base 2 logarithm.
     *  @exception NUMERIC_ERROR The number is negative.
     */
    #ifdef ANSI_C

    inttype intLog2 (inttype number)
    #else

    inttype intLog2 (number)
    inttype number;
    #endif

      {
        int result;

      /* intLog2 */
        if (unlikely(number < 0)) {
          raise_error(NUMERIC_ERROR);
          result = 0;
        } else {
          result = uintMostSignificantBit((uinttype) number);
        } /* if */
        return result;
      } /* intLog2 */
</pre><p>
  The file <tt>'int_rtl.h'</tt> contains a prototype definition for the
  <tt>'intLog2()'</tt> helper function:
</p><pre>
    inttype intLog2 (inttype number);
</pre><p>
  and also a definition for the K&amp;R C language:
</p><pre>
    inttype intLog2 ();
</pre><p>
  The helper functions are also used in the code generated by
  the Seed7 compiler:
</p><pre>
    <span class="keywd">const</span> <a class="type" href="#types_proc">proc</a>: process_int_log2 (<span class="keywd">in</span> <a class="type" href="#types_ref_list">ref_list</a>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is func</span>

      <span class="keywd">begin</span>
        c_expr.expr &amp;:= <span class="stri">"intLog2("</span>;
        process_expr(params[1], c_expr);
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">end func</span>;
</pre><p>
  The compiler writes a prototype of <tt>'intLog2()'</tt> in the
  function <tt>'write_prototypes'</tt>:
</p><pre>
    declareExtern(<span class="stri">"inttype     intLog2 (inttype);"</span>);
</pre><p>
  Several Seed7 types correspond to simple C types, which are
  defined in <tt>'common.h'</tt>:
</p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Seed7 type</th>       <th>C type</th>     <th>Comment</th></tr>
    <tr><td><tt><a class="type" href="#types_boolean">boolean</a></tt></td>          <td>booltype</td>   <td>int</td></tr>
    <tr><td><tt><a class="type" href="#types_integer">integer</a></tt></td>          <td>inttype</td>    <td>32- or 64-bit signed int</td></tr>
    <tr><td><tt><a class="type" href="#types_float">float</a></tt></td>            <td>floattype</td>  <td>float (or double)</td></tr>
    <tr><td><tt><a class="type" href="#types_char">char</a></tt></td>             <td>chartype</td>   <td>32-bit unsigned int</td></tr>
    <tr><td><tt><span class="type">clib_file</span></tt></td>   <td>filetype</td>   <td>FILE *</td></tr>
    <tr><td><tt><span class="type">PRIMITIVE_SOCKET</span></tt></td> <td>sockettype</td> <td>int or unsigned int</td></tr>
</table><p>
  Other Seed7 types correspond to C pointers, which point to a struct.
  Some of this structs are used in all situations: In the interpreter
  and in the compiler and under different operation systems and with
  different runtime libraries. This invariant structs are defined
  in <tt>'common.h'</tt>:
</p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Seed7 type</th>       <th>C type</th>    <th>C struct</th>           <th>Comment</th></tr>
    <tr><td><tt><a class="type" href="#types_string">string</a></tt></td>           <td>stritype</td>  <td>struct stristruct</td>  <td>UTF-32 encoded, can contain null chars</td></tr>
    <tr><td><tt><a class="type" href="#types_set">set</a></tt></td>              <td>settype</td>   <td>struct setstruct</td>   <td>&nbsp;</td></tr>
    <tr><td><tt><span class="type">bstring</span></tt></td>          <td>bstritype</td> <td>struct bstristruct</td> <td>Byte sequence, can contain null bytes</td></tr>
</table><p>
  Other Seed7 types also correspond to struct pointers, but the structs
  are different in interpreted and compiled Seed7 programs. The
  structs for interpreted programs are defined in <tt>'data.h'</tt> and
  the structs for compiled programs are defined in <tt>'data_rtl.h'</tt>:
</p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Seed7 type</th>  <th>C type (interpreted)</th>  <th>C struct (interpreted)</th>  <th>C type (compiled)</th>  <th>C struct (compiled)</th></tr>
    <tr><td><tt><a class="type" href="#types_array">array</a></tt></td>       <td>arraytype</td>             <td>struct stristruct</td>       <td>rtlArraytype</td>       <td>struct rtlArraystruct</td></tr>
    <tr><td><tt><a class="type" href="#types_hash">hash</a></tt></td>        <td>hashtype</td>              <td>struct hashstruct</td>       <td>rtlHashtype</td>        <td>struct rtlHashstruct</td></tr>
    <tr><td><tt><a class="type" href="#types_struct">struct</a></tt></td>      <td>structtype</td>            <td>struct structstruct</td>     <td>rtlStructtype</td>      <td>struct rtlStructstruct</td></tr>
</table><p>
  Because interpreter and compiler use different structs the
  functions from e.g. <tt>'arrlib.c'</tt> cannot use functions
  from <tt>'arr_rtl.c'</tt>.
</p><p>
  Finally some Seed7 types depend on the operating system or runtime
  library used:
</p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Seed7 type</th>       <th>C type</th>      <th>Defined as</th>                        <th>Sourcefile</th>  <th>Comment</th></tr>
    <tr><td rowspan="2"><tt><a class="type" href="#types_bigInteger">bigInteger</a></tt></td>       <td>biginttype</td>  <td>struct bigintstruct *</td>             <td>big_rtl.c</td>   <td>The built-in bigInteger library</td></tr>
    <tr><!--                   --><td>biginttype</td>  <td>mpz_ptr</td>                           <td>big_gmp.c</td>   <td>The GNU Multiple Precision Arithmetic Library</td></tr>
    <tr><td rowspan="2"><tt>pollData</tt></td>         <td>polltype</td>    <td>struct select_based_pollstruct *</td>  <td>pol_sel.c</td>   <td>Functions cast it to implementation dependent struct</td></tr>
    <tr><!--                   --><td>polltype</td>    <td>struct poll_based_pollstruct *</td>    <td>pol_unx.c</td>   <td>Functions cast it to implementation dependent struct</td></tr>
    <tr><td rowspan="2"><tt><span class="type">PRIMITIVE_WINDOW</span></tt></td> <td>wintype</td>     <td>struct x11_winstruct *</td>            <td>drw_x11.c</td>   <td>Functions cast from winstruct * to x11_winstruct *</td></tr>
    <tr><!--                   --><td>wintype</td>     <td>struct win_winstruct *</td>            <td>drw_win.c</td>   <td>Functions cast from winstruct * to win_winstruct *</td></tr>
</table><p>
  Seed7 strings are UTF-32 encoded and C strings are zero
  terminated byte sequences. To convert between the different
  representations, <tt>'striutl.h'</tt> defines conversion functions
  like <tt>'cp_to_cstri'</tt>, <tt>'stri_to_bstri'</tt>, <tt>'stri_to_bstri8'</tt>,
  <tt>'cstri_to_stri'</tt>, <tt>'cstri8_to_stri'</tt> and <tt>'cstri8_or_cstri_to_stri'</tt>.
  Operating systems disagree in their Unicode encoding (UTF-8
  or UTF-16). To cope with this, <tt>'striutl.h'</tt> defines the
  type <tt>'os_stritype'</tt> and the functions <tt>'stri_to_os_stri'</tt>
  and <tt>'os_stri_to_stri'</tt>. The different concepts to
  represent a file path (path delimiter and drive letter) are
  handled with <tt>'cp_to_os_path'</tt> and <tt>'cp_from_os_path'</tt>.
</p><p>
  All the *lib.c files containing primitive actions and various
  other files with their functions are grouped together in the
  <tt>'s7_comp.a'</tt> library (Licensed under GPL). Furthermore the C
  primitive action functions (E.g.: int_parse) of the *lib.c
  files may use corresponding functions (E.g.: intParse) which
  can be found in *_rtl.c files (E.g.: <tt>'int_rtl.c'</tt>). The *_rtl.c
  files are grouped together in the <tt>'seed7_05.a'</tt> library
  (Licensed under LGPL). When a Seed7 program is compiled with
  the Seed7 compiler (comp.sd7) inline code is generated for
  many primitive actions. To implement the remaining primitive
  actions the functions of the <tt>'seed7_05.a'</tt> library are used.
</p>
<a name="actions_ACTION"><h3>13.1 Actions for the type ACTION</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>actlib.c function</th>   <th>act_comp.c function</th></tr>
    <tr><td>ACT_ILLEGAL</td>         <td>act_illegal</td>         <td>&nbsp;</td></tr>
    <tr><td>ACT_CPY</td>             <td>act_cpy</td>             <td>=</td></tr>
    <tr><td>ACT_CREATE</td>          <td>act_create</td>          <td>&nbsp;</td></tr>
    <tr><td>ACT_GEN</td>             <td>act_gen</td>             <td>&nbsp;</td></tr>
    <tr><td>ACT_STR</td>             <td>act_str</td>             <td>actStr</td></tr>
    <tr><td>ACT_VALUE</td>           <td>act_value</td>           <td>actValue</td></tr>
</table><p></p>
<a name="actions_array"><h3>13.2 Actions for array types</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>arrlib.c function</th>   <th>arr_rtl.c function</th></tr>
    <tr><td>ARR_APPEND</td>          <td>arr_append</td>          <td>arrAppend</td></tr>
    <tr><td>ARR_ARRLIT</td>          <td>arr_arrlit</td>          <td>arrArrlit</td></tr>
    <tr><td>ARR_ARRLIT2</td>         <td>arr_arrlit2</td>         <td>arrArrlit2</td></tr>
    <tr><td>ARR_BASELIT</td>         <td>arr_baselit</td>         <td>arrBaselit</td></tr>
    <tr><td>ARR_BASELIT2</td>        <td>arr_baselit2</td>        <td>arrBaselit2</td></tr>
    <tr><td>ARR_CAT</td>             <td>arr_cat</td>             <td>arrCat</td></tr>
    <tr><td>ARR_CONV</td>            <td>arr_conv</td>            <td>(noop)</td></tr>
    <tr><td>ARR_CPY</td>             <td>arr_cpy</td>             <td>cpy_ ...</td></tr>
    <tr><td>ARR_CREATE</td>          <td>arr_create</td>          <td>create_ ...</td></tr>
    <tr><td>ARR_DESTR</td>           <td>arr_destr</td>           <td>destr_ ...</td></tr>
    <tr><td>ARR_EMPTY</td>           <td>arr_empty</td>           <td>&nbsp;</td></tr>
    <tr><td>ARR_EXTEND</td>          <td>arr_extend</td>          <td>arrExtend</td></tr>
    <tr><td>ARR_GEN</td>             <td>arr_gen</td>             <td>arrGen</td></tr>
    <tr><td>ARR_HEAD</td>            <td>arr_head</td>            <td>arrHead</td></tr>
    <tr><td>ARR_IDX</td>             <td>arr_idx</td>             <td>a-&gt;arr[b-a-&gt;min_position]</td></tr>
    <tr><td>ARR_LNG</td>             <td>arr_lng</td>             <td>a->max_position-a->min_position + 1</td></tr>
    <tr><td>ARR_MAXIDX</td>          <td>arr_maxidx</td>          <td>a->max_position</td></tr>
    <tr><td>ARR_MINIDX</td>          <td>arr_minidx</td>          <td>a->min_position</td></tr>
    <tr><td>ARR_PUSH</td>            <td>arr_push</td>            <td>arrPush</td></tr>
    <tr><td>ARR_RANGE</td>           <td>arr_range</td>           <td>arrRange</td></tr>
    <tr><td>ARR_REMOVE</td>          <td>arr_remove</td>          <td>arrRemove</td></tr>
    <tr><td>ARR_SORT</td>            <td>arr_sort</td>            <td>arrSort</td></tr>
    <tr><td>ARR_TAIL</td>            <td>arr_tail</td>            <td>arrTail</td></tr>
    <tr><td>ARR_TIMES</td>           <td>arr_times</td>           <td>times_ ...</td></tr>
</table><p></p>
<a name="actions_bigInteger"><h3>13.3 Actions for the type bigInteger</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>biglib.c function</th>   <th>big_rtl.c function</th></tr>
    <tr><td>BIG_ABS</td>             <td>big_abs</td>             <td>bigAbs</td></tr>
    <tr><td>BIG_ADD</td>             <td>big_add</td>             <td>bigAdd, bigAddTemp</td></tr>
    <tr><td>BIG_BIT_LENGTH</td>      <td>big_bit_length</td>      <td>bigBitLength</td></tr>
    <tr><td>BIG_CLIT</td>            <td>big_clit</td>            <td>bigCLit</td></tr>
    <tr><td>BIG_CMP</td>             <td>big_cmp</td>             <td>bigCmp</td></tr>
    <tr><td>BIG_CPY</td>             <td>big_cpy</td>             <td>bigCpy</td></tr>
    <tr><td>BIG_CREATE</td>          <td>big_create</td>          <td>bigCreate</td></tr>
    <tr><td>BIG_DECR</td>            <td>big_decr</td>            <td>bigDecr</td></tr>
    <tr><td>BIG_DESTR</td>           <td>big_destr</td>           <td>bigDestr</td></tr>
    <tr><td>BIG_DIV</td>             <td>big_div</td>             <td>bigDiv</td></tr>
    <tr><td>BIG_EQ</td>              <td>big_eq</td>              <td>bigEq</td></tr>
    <tr><td>BIG_GCD</td>             <td>big_gcd</td>             <td>bigGcd</td></tr>
    <tr><td>BIG_GE</td>              <td>big_ge</td>              <td>bigCmp >= 0</td></tr>
    <tr><td>BIG_GROW</td>            <td>big_grow</td>            <td>bigGrow</td></tr>
    <tr><td>BIG_GT</td>              <td>big_gt</td>              <td>bigCmp > 0</td></tr>
    <tr><td>BIG_HASHCODE</td>        <td>big_hashcode</td>        <td>bigHashCode</td></tr>
    <tr><td>BIG_ICONV</td>           <td>big_iconv</td>           <td>bigIConv</td></tr>
    <tr><td>BIG_INCR</td>            <td>big_incr</td>            <td>bigIncr</td></tr>
    <tr><td>BIG_IPOW</td>            <td>big_ipow</td>            <td>bigIPow</td></tr>
    <tr><td>BIG_LE</td>              <td>big_le</td>              <td>bigCmp &lt;= 0</td></tr>
    <tr><td>BIG_LOG2</td>            <td>big_log2</td>            <td>bigLog2</td></tr>
    <tr><td>BIG_LOWEST_SET_BIT</td>  <td>big_lowest_set_bit</td>  <td>bigLowestSetBit</td></tr>
    <tr><td>BIG_LSHIFT</td>          <td>big_lshift</td>          <td>bigLShift</td></tr>
    <tr><td>BIG_LSHIFT_ASSIGN</td>   <td>big_lshift_assign</td>   <td>bigLShiftAssign</td></tr>
    <tr><td>BIG_LT</td>              <td>big_lt</td>              <td>bigCmp < 0</td></tr>
    <tr><td>BIG_MDIV</td>            <td>big_mdiv</td>            <td>bigMDiv</td></tr>
    <tr><td>BIG_MINUS</td>           <td>big_minus</td>           <td>bigMinus</td></tr>
    <tr><td>BIG_MOD</td>             <td>big_mod</td>             <td>bigMod</td></tr>
    <tr><td>BIG_MULT</td>            <td>big_mult</td>            <td>bigMult</td></tr>
    <tr><td>BIG_MULT_ASSIGN</td>     <td>big_mult_assign</td>     <td>bigMultAssign</td></tr>
    <tr><td>BIG_NE</td>              <td>big_ne</td>              <td>bigNe</td></tr>
    <tr><td>BIG_ODD</td>             <td>big_odd</td>             <td>bigOdd</td></tr>
    <tr><td>BIG_ORD</td>             <td>big_ord</td>             <td>bigOrd</td></tr>
    <tr><td>BIG_PARSE</td>           <td>big_parse</td>           <td>bigParse</td></tr>
    <tr><td>BIG_PLUS</td>            <td>big_plus</td>            <td>(noop)</td></tr>
    <tr><td>BIG_PRED</td>            <td>big_pred</td>            <td>bigPred</td></tr>
    <tr><td>BIG_RAND</td>            <td>big_rand</td>            <td>bigRand</td></tr>
    <tr><td>BIG_REM</td>             <td>big_rem</td>             <td>bigRem</td></tr>
    <tr><td>BIG_RSHIFT</td>          <td>big_rshift</td>          <td>bigRShift</td></tr>
    <tr><td>BIG_RSHIFT_ASSIGN</td>   <td>big_rshift_assign</td>   <td>bigRShiftAssign</td></tr>
    <tr><td>BIG_SBTR</td>            <td>big_sbtr</td>            <td>bigSbtr, bigSbtrTemp</td></tr>
    <tr><td>BIG_SHRINK</td>          <td>big_shrink</td>          <td>bigShrink</td></tr>
    <tr><td>BIG_STR</td>             <td>big_str</td>             <td>bigStr</td></tr>
    <tr><td>BIG_SUCC</td>            <td>big_succ</td>            <td>bigSucc</td></tr>
    <tr><td>BIG_VALUE</td>           <td>big_value</td>           <td>bigValue</td></tr>
</table><p></p>
<a name="actions_boolean"><h3>13.4 Actions for the type boolean</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>blnlib.c function</th>   <th>bln_rtl.c function</th></tr>
    <tr><td>BLN_AND</td>             <td>bln_and</td>             <td>&amp;&amp;</td></tr>
    <tr><td>BLN_CPY</td>             <td>bln_cpy</td>             <td>blnCpy</td></tr>
    <tr><td>BLN_CREATE</td>          <td>bln_create</td>          <td>blnCreate</td></tr>
    <tr><td>BLN_GE</td>              <td>bln_ge</td>              <td>&gt;=</td></tr>
    <tr><td>BLN_GT</td>              <td>bln_gt</td>              <td>&gt;</td></tr>
    <tr><td>BLN_ICONV</td>           <td>bln_iconv</td>           <td>&amp; 1</td></tr>
    <tr><td>BLN_LE</td>              <td>bln_le</td>              <td>&lt;=</td></tr>
    <tr><td>BLN_LT</td>              <td>bln_lt</td>              <td>&lt;</td></tr>
    <tr><td>BLN_NOT</td>             <td>bln_not</td>             <td>!</td></tr>
    <tr><td>BLN_OR</td>              <td>bln_or</td>              <td>||</td></tr>
    <tr><td>BLN_ORD</td>             <td>bln_ord</td>             <td>(inttype)</td></tr>
</table><p></p>
<a name="actions_bstring"><h3>13.5 Actions for byte strings</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>bstlib.c function</th>   <th>bst_rtl.c function</th></tr>
    <tr><td>BST_APPEND</td>          <td>bst_append</td>          <td>bstAppend</td></tr>
    <tr><td>BST_CAT</td>             <td>bst_cat</td>             <td>bstCat</td></tr>
    <tr><td>BST_CMP</td>             <td>bst_cmp</td>             <td>bstCmp</td></tr>
    <tr><td>BST_CPY</td>             <td>bst_cpy</td>             <td>bstCpy</td></tr>
    <tr><td>BST_CREATE</td>          <td>bst_create</td>          <td>bstCreate</td></tr>
    <tr><td>BST_DESTR</td>           <td>bst_destr</td>           <td>bstDestr</td></tr>
    <tr><td>BST_EMPTY</td>           <td>bst_empty</td>           <td>&nbsp;</td></tr>
    <tr><td>BST_EQ</td>              <td>bst_eq</td>              <td>a->size==b->size &amp;&amp; memcmp(a,b,a->size*sizeof(unsigned char))==0</td></tr>
    <tr><td>BST_HASHCODE</td>        <td>bst_hashcode</td>        <td>bstHashCode</td></tr>
    <tr><td>BST_IDX</td>             <td>bst_idx</td>             <td>a-&gt;mem[b-1]</td></tr>
    <tr><td>BST_LNG</td>             <td>bst_lng</td>             <td>a->size</td></tr>
    <tr><td>BST_NE</td>              <td>bst_ne</td>              <td>a->size!=b->size || memcmp(a,b,a->size*sizeof(unsigned char))!=0</td></tr>
    <tr><td>BST_PARSE</td>           <td>bst_parse</td>           <td>bstParse</td></tr>
    <tr><td>BST_STR</td>             <td>bst_str</td>             <td>bstStr</td></tr>
    <tr><td>BST_VALUE</td>           <td>bst_value</td>           <td>bstValue</td></tr>
</table><p></p>
<a name="actions_char"><h3>13.6 Actions for the type char</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>chrlib.c function</th>   <th>chr_rtl.c function</th></tr>
    <tr><td>CHR_CHR</td>             <td>chr_chr</td>             <td>(chartype)</td></tr>
    <tr><td>CHR_CLIT</td>            <td>chr_clit</td>            <td>chrCLit</td></tr>
    <tr><td>CHR_CMP</td>             <td>chr_cmp</td>             <td>chrCmp</td></tr>
    <tr><td>CHR_CONV</td>            <td>chr_conv</td>            <td>(noop)</td></tr>
    <tr><td>CHR_CPY</td>             <td>chr_cpy</td>             <td>chrCpy</td></tr>
    <tr><td>CHR_CREATE</td>          <td>chr_create</td>          <td>chrCreate</td></tr>
    <tr><td>CHR_DECR</td>            <td>chr_decr</td>            <td>--</td></tr>
    <tr><td>CHR_EQ</td>              <td>chr_eq</td>              <td>==</td></tr>
    <tr><td>CHR_GE</td>              <td>chr_ge</td>              <td>&gt;=</td></tr>
    <tr><td>CHR_GT</td>              <td>chr_gt</td>              <td>&gt;</td></tr>
    <tr><td>CHR_HASHCODE</td>        <td>chr_hashcode</td>        <td>(inttype)((schartype)a)</td></tr>
    <tr><td>CHR_ICONV</td>           <td>chr_iconv</td>           <td>(chartype)</td></tr>
    <tr><td>CHR_INCR</td>            <td>chr_incr</td>            <td>++</td></tr>
    <tr><td>CHR_LE</td>              <td>chr_le</td>              <td>&lt;=</td></tr>
    <tr><td>CHR_LOW</td>             <td>chr_low</td>             <td>chrLow</td></tr>
    <tr><td>CHR_LT</td>              <td>chr_lt</td>              <td>&lt;</td></tr>
    <tr><td>CHR_NE</td>              <td>chr_ne</td>              <td>!=</td></tr>
    <tr><td>CHR_ORD</td>             <td>chr_ord</td>             <td>(inttype)</td></tr>
    <tr><td>CHR_PRED</td>            <td>chr_pred</td>            <td>-1</td></tr>
    <tr><td>CHR_STR</td>             <td>chr_str</td>             <td>chrStr</td></tr>
    <tr><td>CHR_SUCC</td>            <td>chr_succ</td>            <td>+1</td></tr>
    <tr><td>CHR_UP</td>              <td>chr_up</td>              <td>chrUp</td></tr>
    <tr><td>CHR_VALUE</td>           <td>chr_value</td>           <td>chrValue</td></tr>
</table><p></p>
<a name="actions_commands"><h3>13.7 Actions for various directory, file and other commands</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>cmdlib.c function</th>   <th>cmd_rtl.c function</th></tr>
    <tr><td>CMD_BIG_FILESIZE</td>    <td>cmd_big_filesize</td>    <td>cmdBigFileSize</td></tr>
    <tr><td>CMD_CHDIR</td>           <td>cmd_chdir</td>           <td>cmdChdir</td></tr>
    <tr><td>CMD_CLONE_FILE</td>      <td>cmd_clone_file</td>      <td>cmdCloneFile</td></tr>
    <tr><td>CMD_CONFIG_VALUE</td>    <td>cmd_config_value</td>    <td>cmdConfigValue</td></tr>
    <tr><td>CMD_COPY_FILE</td>       <td>cmd_copy_file</td>       <td>cmdCopyFile</td></tr>
    <tr><td>CMD_FILEMODE</td>        <td>cmd_filemode</td>        <td>cmdFileMode</td></tr>
    <tr><td>CMD_FILESIZE</td>        <td>cmd_filesize</td>        <td>cmdFileSize</td></tr>
    <tr><td>CMD_FILETYPE</td>        <td>cmd_filetype</td>        <td>cmdFileType</td></tr>
    <tr><td>CMD_FILETYPE_SL</td>     <td>cmd_filetype_sl</td>     <td>cmdFileTypeSL</td></tr>
    <tr><td>CMD_GETCWD</td>          <td>cmd_getcwd</td>          <td>cmdGetcwd</td></tr>
    <tr><td>CMD_GETENV</td>          <td>cmd_getenv</td>          <td>cmdGetenv</td></tr>
    <tr><td>CMD_GET_ATIME</td>       <td>cmd_get_atime</td>       <td>cmdGetATime</td></tr>
    <tr><td>CMD_GET_CTIME</td>       <td>cmd_get_ctime</td>       <td>cmdGetCTime</td></tr>
    <tr><td>CMD_GET_MTIME</td>       <td>cmd_get_mtime</td>       <td>cmdGetMTime</td></tr>
    <tr><td>CMD_LS</td>              <td>cmd_ls</td>              <td>cmdLs</td></tr>
    <tr><td>CMD_MKDIR</td>           <td>cmd_mkdir</td>           <td>cmdMkdir</td></tr>
    <tr><td>CMD_MOVE</td>            <td>cmd_move</td>            <td>cmdMove</td></tr>
    <tr><td>CMD_PIPE2</td>           <td>cmd_pipe2</td>           <td>cmdPipe2</td></tr>
    <tr><td>CMD_PTY</td>             <td>cmd_pty</td>             <td>cmdPty</td></tr>
    <tr><td>CMD_READLINK</td>        <td>cmd_readlink</td>        <td>cmdReadlink</td></tr>
    <tr><td>CMD_REMOVE</td>          <td>cmd_remove</td>          <td>cmdRemove</td></tr>
    <tr><td>CMD_REMOVE_ANY_FILE</td> <td>cmd_remove_any_file</td> <td>cmdRemoveAnyFile</td></tr>
    <tr><td>CMD_SETENV</td>          <td>cmd_setenv</td>          <td>cmdSetenv</td></tr>
    <tr><td>CMD_SET_ATIME</td>       <td>cmd_set_atime</td>       <td>cmdSetATime</td></tr>
    <tr><td>CMD_SET_FILEMODE</td>    <td>cmd_set_filemode</td>    <td>cmdSetFileMode</td></tr>
    <tr><td>CMD_SET_MTIME</td>       <td>cmd_set_mtime</td>       <td>cmdSetMTime</td></tr>
    <tr><td>CMD_SHELL</td>           <td>cmd_shell</td>           <td>cmdShell</td></tr>
    <tr><td>CMD_SHELL_ESCAPE</td>    <td>cmd_shell_escape</td>    <td>cmdShellEscape</td></tr>
    <tr><td>CMD_START_PROCESS</td>   <td>cmd_start_process</td>   <td>cmdStartProcess</td></tr>
    <tr><td>CMD_SYMLINK</td>         <td>cmd_symlink</td>         <td>cmdSymlink</td></tr>
    <tr><td>CMD_TO_OS_PATH</td>      <td>cmd_to_os_path</td>      <td>cmdToOsPath</td></tr>
</table><p></p>
<a name="actions_console_output"><h3>13.8 Actions for text (console) screen output</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>scrlib.c function</th>   <th>con_inf.c/con_rtl.c/con_win.c function</th></tr>
    <tr><td>CON_CLEAR</td>           <td>con_clear</td>           <td>conClear</td></tr>
    <tr><td>CON_CURSOR</td>          <td>con_cursor</td>          <td>conCursor</td></tr>
    <tr><td>CON_FLUSH</td>           <td>con_flush</td>           <td>conFlush</td></tr>
    <tr><td>CON_HEIGHT</td>          <td>con_height</td>          <td>conHeight</td></tr>
    <tr><td>CON_H_SCL</td>           <td>con_h_scl</td>           <td>conHScroll</td></tr>
    <tr><td>CON_OPEN</td>            <td>con_open</td>            <td>conOpen</td></tr>
    <tr><td>CON_SETPOS</td>          <td>con_setpos</td>          <td>conSetpos</td></tr>
    <tr><td>CON_V_SCL</td>           <td>con_v_scl</td>           <td>conVScroll</td></tr>
    <tr><td>CON_WIDTH</td>           <td>con_width</td>           <td>conWidth</td></tr>
    <tr><td>CON_WRITE</td>           <td>con_write</td>           <td>conWrite</td></tr>
</table><p></p>
<a name="actions_declarations"><h3>13.9 Actions for declarations</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>dcllib.c function</th></tr>
    <tr><td>DCL_ATTR</td>            <td>dcl_attr</td></tr>
    <tr><td>DCL_CONST</td>           <td>dcl_const</td></tr>
    <tr><td>DCL_ELEMENTS</td>        <td>dcl_elements</td></tr>
    <tr><td>DCL_FWD</td>             <td>dcl_fwd</td></tr>
    <tr><td>DCL_FWDVAR</td>          <td>dcl_fwdvar</td></tr>
    <tr><td>DCL_GETFUNC</td>         <td>dcl_getfunc</td></tr>
    <tr><td>DCL_GETOBJ</td>          <td>dcl_getobj</td></tr>
    <tr><td>DCL_GLOBAL</td>          <td>dcl_global</td></tr>
    <tr><td>DCL_IN1VAR</td>          <td>dcl_in1var</td></tr>
    <tr><td>DCL_IN2VAR</td>          <td>dcl_in2var</td></tr>
    <tr><td>DCL_INOUT1</td>          <td>dcl_inout1</td></tr>
    <tr><td>DCL_INOUT2</td>          <td>dcl_inout2</td></tr>
    <tr><td>DCL_PARAM_ATTR</td>      <td>dcl_param_attr</td></tr>
    <tr><td>DCL_REF1</td>            <td>dcl_ref1</td></tr>
    <tr><td>DCL_REF2</td>            <td>dcl_ref2</td></tr>
    <tr><td>DCL_SYMB</td>            <td>dcl_symb</td></tr>
    <tr><td>DCL_VAL1</td>            <td>dcl_val1</td></tr>
    <tr><td>DCL_VAL2</td>            <td>dcl_val2</td></tr>
    <tr><td>DCL_VAR</td>             <td>dcl_var</td></tr>
</table><p></p>
<a name="actions_graphic_output"><h3>13.10 Actions to do graphic output</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>drwlib.c function</th>   <th>drw_rtl.c/drw_x11.c/drw_win.c function</th></tr>
    <tr><td>DRW_ARC</td>             <td>drw_arc</td>             <td>drwArc</td></tr>
    <tr><td>DRW_ARC2</td>            <td>drw_arc2</td>            <td>drwArc2</td></tr>
    <tr><td>DRW_BACKGROUND</td>      <td>drw_background</td>      <td>drwBackground</td></tr>
    <tr><td>DRW_CIRCLE</td>          <td>drw_circle</td>          <td>drwCircle</td></tr>
    <tr><td>DRW_CLEAR</td>           <td>drw_clear</td>           <td>drwClear</td></tr>
    <tr><td>DRW_CMP</td>             <td>drw_cmp</td>             <td>uintCmpGeneric((generictype)(a))</td></tr>
    <tr><td>DRW_COLOR</td>           <td>drw_color</td>           <td>drwColor</td></tr>
    <tr><td>DRW_COPYAREA</td>        <td>drw_copyarea</td>        <td>drwCopyArea</td></tr>
    <tr><td>DRW_CPY</td>             <td>drw_cpy</td>             <td>drwCpy</td></tr>
    <tr><td>DRW_CREATE</td>          <td>drw_create</td>          <td>drwCreate</td></tr>
    <tr><td>DRW_DESTR</td>           <td>drw_destr</td>           <td>drwDestr</td></tr>
    <tr><td>DRW_EMPTY</td>           <td>drw_empty</td>           <td>&nbsp;</td></tr>
    <tr><td>DRW_EQ</td>              <td>drw_eq</td>              <td>==</td></tr>
    <tr><td>DRW_FARCCHORD</td>       <td>drw_farcchord</td>       <td>drwFArcChord</td></tr>
    <tr><td>DRW_FARCPIESLICE</td>    <td>drw_farcpieslice</td>    <td>drwFArcPieSlice</td></tr>
    <tr><td>DRW_FCIRCLE</td>         <td>drw_fcircle</td>         <td>drwFCircle</td></tr>
    <tr><td>DRW_FELLIPSE</td>        <td>drw_fellipse</td>        <td>drwFEllipse</td></tr>
    <tr><td>DRW_FLUSH</td>           <td>drw_flush</td>           <td>drwFlush</td></tr>
    <tr><td>DRW_FPOLYLINE</td>       <td>drw_fpolyLine</td>       <td>drwFPolyLine</td></tr>
    <tr><td>DRW_GENPOINTLIST</td>    <td>drw_genPointList</td>    <td>drwGenPointList</td></tr>
    <tr><td>DRW_GET</td>             <td>drw_get</td>             <td>drwGet</td></tr>
    <tr><td>DRW_GETPIXEL</td>        <td>drw_getPixel</td>        <td>drwGetPixel</td></tr>
    <tr><td>DRW_HASHCODE</td>        <td>drw_hashcode</td>        <td>(inttype)(((memsizetype)a)&gt;&gt;6)</td></tr>
    <tr><td>DRW_HEIGHT</td>          <td>drw_height</td>          <td>drwHeight</td></tr>
    <tr><td>DRW_IMAGE</td>           <td>drw_image</td>           <td>drwImage</td></tr>
    <tr><td>DRW_LINE</td>            <td>drw_line</td>            <td>drwLine</td></tr>
    <tr><td>DRW_NE</td>              <td>drw_ne</td>              <td>!=</td></tr>
    <tr><td>DRW_NEW_PIXMAP</td>      <td>drw_new_pixmap</td>      <td>drwNewPixmap</td></tr>
    <tr><td>DRW_OPEN</td>            <td>drw_open</td>            <td>drwOpen</td></tr>
    <tr><td>DRW_OPEN_SUB_WINDOW</td> <td>drw_open_sub_window</td> <td>drwOpenSubWindow</td></tr>
    <tr><td>DRW_PARC</td>            <td>drw_parc</td>            <td>drwPArc</td></tr>
    <tr><td>DRW_PCIRCLE</td>         <td>drw_pcircle</td>         <td>drwPCircle</td></tr>
    <tr><td>DRW_PFARCCHORD</td>      <td>drw_pfarcchord</td>      <td>drwPFArcChord</td></tr>
    <tr><td>DRW_PFARCPIESLICE</td>   <td>drw_pfarcpieslice</td>   <td>drwFArcPieSlice</td></tr>
    <tr><td>DRW_PFCIRCLE</td>        <td>drw_pfcircle</td>        <td>drwPFCircle</td></tr>
    <tr><td>DRW_PFELLIPSE</td>       <td>drw_pfellipse</td>       <td>drwPFEllipse</td></tr>
    <tr><td>DRW_PIXELTORGB</td>      <td>drw_pixelToRgb</td>      <td>drwPixelToRgb</td></tr>
    <tr><td>DRW_PLINE</td>           <td>drw_pline</td>           <td>drwPLine</td></tr>
    <tr><td>DRW_POINT</td>           <td>drw_point</td>           <td>drwPoint</td></tr>
    <tr><td>DRW_POINTER_XPOS</td>    <td>drw_pointer_xpos</td>    <td>drwPointerXpos</td></tr>
    <tr><td>DRW_POINTER_YPOS</td>    <td>drw_pointer_ypos</td>    <td>drwPointerYpos</td></tr>
    <tr><td>DRW_POLYLINE</td>        <td>drw_polyLine</td>        <td>drwPolyLine</td></tr>
    <tr><td>DRW_PPOINT</td>          <td>drw_ppoint</td>          <td>drwPPoint</td></tr>
    <tr><td>DRW_PRECT</td>           <td>drw_prect</td>           <td>drwPRect</td></tr>
    <tr><td>DRW_PUT</td>             <td>drw_put</td>             <td>drwPut</td></tr>
    <tr><td>DRW_RECT</td>            <td>drw_rect</td>            <td>drwRect</td></tr>
    <tr><td>DRW_RGBCOL</td>          <td>drw_rgbcol</td>          <td>drwRgbColor</td></tr>
    <tr><td>DRW_SETCONTENT</td>      <td>drw_setContent</td>      <td>drwSetContent</td></tr>
    <tr><td>DRW_SETPOS</td>          <td>drw_setPos</td>          <td>drwSetPos</td></tr>
    <tr><td>DRW_SETTRANSPARENTCOLOR</td> <td>drw_setTransparentColor</td> <td>drwSetTransparentColor</td></tr>
    <tr><td>DRW_TEXT</td>            <td>drw_text</td>            <td>drwText</td></tr>
    <tr><td>DRW_TOBOTTOM</td>        <td>drw_toBottom</td>        <td>drwToBottom</td></tr>
    <tr><td>DRW_TOTOP</td>           <td>drw_toTop</td>           <td>drwToTop</td></tr>
    <tr><td>DRW_WIDTH</td>           <td>drw_width</td>           <td>drwWidth</td></tr>
    <tr><td>DRW_XPOS</td>            <td>drw_xpos</td>            <td>drwXPos</td></tr>
    <tr><td>DRW_YPOS</td>            <td>drw_ypos</td>            <td>drwYPos</td></tr>
</table><p></p>
<a name="actions_enumeration"><h3>13.11 Actions for enumeration types</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>enulib.c function</th>   <th>&nbsp;</th></tr>
    <tr><td>ENU_CONV</td>            <td>enu_conv</td>            <td>(noop)</td></tr>
    <tr><td>ENU_CPY</td>             <td>enu_cpy</td>             <td>=</td></tr>
    <tr><td>ENU_CREATE</td>          <td>enu_create</td>          <td>&nbsp;</td></tr>
    <tr><td>ENU_EQ</td>              <td>enu_eq</td>              <td>==</td></tr>
    <tr><td>ENU_GENLIT</td>          <td>enu_genlit</td>          <td>&nbsp;</td></tr>
    <tr><td>ENU_ICONV2</td>          <td>enu_iconv2</td>          <td>(noop)</td></tr>
    <tr><td>ENU_NE</td>              <td>enu_ne</td>              <td>!=</td></tr>
    <tr><td>ENU_ORD2</td>            <td>enu_ord2</td>            <td>(noop)</td></tr>
    <tr><td>ENU_VALUE</td>           <td>enu_value</td>           <td>enuValue</td></tr>
</table><p></p>
<a name="actions_clib_file"><h3>13.12 Actions for the type clib_file</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>fillib.c function</th>   <th>fil_rtl.c function</th></tr>
    <tr><td>FIL_BIG_LNG</td>         <td>fil_big_lng</td>         <td>filBigLng</td></tr>
    <tr><td>FIL_BIG_SEEK</td>        <td>fil_big_seek</td>        <td>filBigSeek</td></tr>
    <tr><td>FIL_BIG_TELL</td>        <td>fil_big_tell</td>        <td>filBigTell</td></tr>
    <tr><td>FIL_CLOSE</td>           <td>fil_close</td>           <td>fclose</td></tr>
    <tr><td>FIL_CPY</td>             <td>fil_cpy</td>             <td>fltCpy</td></tr>
    <tr><td>FIL_CREATE</td>          <td>fil_create</td>          <td>fltCreate</td></tr>
    <tr><td>FIL_EMPTY</td>           <td>fil_empty</td>           <td>&nbsp;</td></tr>
    <tr><td>FIL_EOF</td>             <td>fil_eof</td>             <td>feof</td></tr>
    <tr><td>FIL_EQ</td>              <td>fil_eq</td>              <td>==</td></tr>
    <tr><td>FIL_ERR</td>             <td>fil_err</td>             <td>stderr</td></tr>
    <tr><td>FIL_FLUSH</td>           <td>fil_flush</td>           <td>fflush</td></tr>
    <tr><td>FIL_GETC</td>            <td>fil_getc</td>            <td>fgetc</td></tr>
    <tr><td>FIL_GETS</td>            <td>fil_gets</td>            <td>filGets</td></tr>
    <tr><td>FIL_HAS_NEXT</td>        <td>fil_has_next</td>        <td>filHasNext</td></tr>
    <tr><td>FIL_IN</td>              <td>fil_in</td>              <td>stdin</td></tr>
    <tr><td>FIL_INPUT_READY</td>     <td>fil_input_ready</td>     <td>filInputReady</td></tr>
    <tr><td>FIL_LINE_READ</td>       <td>fil_line_read</td>       <td>filLineRead</td></tr>
    <tr><td>FIL_LIT</td>             <td>fil_lit</td>             <td>filLit</td></tr>
    <tr><td>FIL_LNG</td>             <td>fil_lng</td>             <td>filLng</td></tr>
    <tr><td>FIL_NE</td>              <td>fil_ne</td>              <td>!=</td></tr>
    <tr><td>FIL_OPEN</td>            <td>fil_open</td>            <td>filOpen</td></tr>
    <tr><td>FIL_OUT</td>             <td>fil_out</td>             <td>stdout</td></tr>
    <tr><td>FIL_PCLOSE</td>          <td>fil_pclose</td>          <td>filPclose</td></tr>
    <tr><td>FIL_POPEN</td>           <td>fil_popen</td>           <td>filPopen</td></tr>
    <tr><td>FIL_PRINT</td>           <td>fil_print</td>           <td>filPrint</td></tr>
    <tr><td>FIL_SEEK</td>            <td>fil_seek</td>            <td>filSeek</td></tr>
    <tr><td>FIL_SETBUF</td>          <td>fil_setbuf</td>          <td>filSetbuf</td></tr>
    <tr><td>FIL_TELL</td>            <td>fil_tell</td>            <td>filTell</td></tr>
    <tr><td>FIL_VALUE</td>           <td>fil_value</td>           <td>filValue</td></tr>
    <tr><td>FIL_WORD_READ</td>       <td>fil_word_read</td>       <td>filWordRead</td></tr>
    <tr><td>FIL_WRITE</td>           <td>fil_write</td>           <td>filWrite</td></tr>
</table><p></p>
<a name="actions_float"><h3>13.13 Actions for the type float</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>fltlib.c function</th>   <th>flt_rtl.c function</th></tr>
    <tr><td>FLT_A2TAN</td>           <td>flt_a2tan</td>           <td>atan2</td></tr>
    <tr><td>FLT_ABS</td>             <td>flt_abs</td>             <td>fabs</td></tr>
    <tr><td>FLT_ACOS</td>            <td>flt_acos</td>            <td>acos</td></tr>
    <tr><td>FLT_ADD</td>             <td>flt_add</td>             <td>+</td></tr>
    <tr><td>FLT_ASIN</td>            <td>flt_asin</td>            <td>asin</td></tr>
    <tr><td>FLT_ATAN</td>            <td>flt_atan</td>            <td>atan</td></tr>
    <tr><td>FLT_CAST</td>            <td>flt_cast</td>            <td>(x.floatvalue=a, x.intvalue)</td></tr>
    <tr><td>FLT_CEIL</td>            <td>flt_ceil</td>            <td>ceil</td></tr>
    <tr><td>FLT_CMP</td>             <td>flt_cmp</td>             <td>fltCmp</td></tr>
    <tr><td>FLT_COS</td>             <td>flt_cos</td>             <td>cos</td></tr>
    <tr><td>FLT_COSH</td>            <td>flt_cosh</td>            <td>cosh</td></tr>
    <tr><td>FLT_CPY</td>             <td>flt_cpy</td>             <td>fltCpy</td></tr>
    <tr><td>FLT_CREATE</td>          <td>flt_create</td>          <td>fltCreate</td></tr>
    <tr><td>FLT_DGTS</td>            <td>flt_dgts</td>            <td>fltDgts</td></tr>
    <tr><td>FLT_DIV</td>             <td>flt_div</td>             <td>/</td></tr>
    <tr><td>FLT_DIV_ASSIGN</td>      <td>flt_div_assign</td>      <td>/=</td></tr>
    <tr><td>FLT_EQ</td>              <td>flt_eq</td>              <td>==</td></tr>
    <tr><td>FLT_EXP</td>             <td>flt_exp</td>             <td>exp</td></tr>
    <tr><td>FLT_FLOOR</td>           <td>flt_floor</td>           <td>floor</td></tr>
    <tr><td>FLT_GE</td>              <td>flt_ge</td>              <td>&gt;=</td></tr>
    <tr><td>FLT_GROW</td>            <td>flt_grow</td>            <td>+=</td></tr>
    <tr><td>FLT_GT</td>              <td>flt_gt</td>              <td>&gt;</td></tr>
    <tr><td>FLT_HASHCODE</td>        <td>flt_hashcode</td>        <td>(x.floatvalue=a, x.intvalue)</td></tr>
    <tr><td>FLT_ICAST</td>           <td>flt_icast</td>           <td>(x.intvalue=a, x.floatvalue)</td></tr>
    <tr><td>FLT_ICONV</td>           <td>flt_iconv</td>           <td>(float)</td></tr>
    <tr><td>FLT_IFLT</td>            <td>flt_iflt</td>            <td>(float)</td></tr>
    <tr><td>FLT_IPOW</td>            <td>flt_ipow</td>            <td>fltIPow</td></tr>
    <tr><td>FLT_ISNAN</td>           <td>flt_isnan</td>           <td>isnan</td></tr>
    <tr><td>FLT_ISNEGATIVEZERO</td>  <td>flt_isnegativezero</td>  <td>fltIsNegativeZero</td></tr>
    <tr><td>FLT_LE</td>              <td>flt_le</td>              <td>&lt;=</td></tr>
    <tr><td>FLT_LOG</td>             <td>flt_log</td>             <td>log</td></tr>
    <tr><td>FLT_LOG10</td>           <td>flt_log10</td>           <td>log10</td></tr>
    <tr><td>FLT_LT</td>              <td>flt_lt</td>              <td>&lt;</td></tr>
    <tr><td>FLT_MINUS</td>           <td>flt_minus</td>           <td>-</td></tr>
    <tr><td>FLT_MULT</td>            <td>flt_mult</td>            <td>*</td></tr>
    <tr><td>FLT_MULT_ASSIGN</td>     <td>flt_mult_assign</td>     <td>*=</td></tr>
    <tr><td>FLT_NE</td>              <td>flt_ne</td>              <td>!=</td></tr>
    <tr><td>FLT_PARSE</td>           <td>flt_parse</td>           <td>fltParse</td></tr>
    <tr><td>FLT_PLUS</td>            <td>flt_plus</td>            <td>(noop)</td></tr>
    <tr><td>FLT_POW</td>             <td>flt_pow</td>             <td>pow</td></tr>
    <tr><td>FLT_RAND</td>            <td>flt_rand</td>            <td>fltRand</td></tr>
    <tr><td>FLT_ROUND</td>           <td>flt_round</td>           <td>a&lt;0.0?-((inttype)(0.5-a)):(inttype)(0.5+a)</td></tr>
    <tr><td>FLT_SBTR</td>            <td>flt_sbtr</td>            <td>-</td></tr>
    <tr><td>FLT_SCI</td>             <td>flt_sci</td>             <td>fltSci</td></tr>
    <tr><td>FLT_SHRINK</td>          <td>flt_shrink</td>          <td>-=</td></tr>
    <tr><td>FLT_SIN</td>             <td>flt_sin</td>             <td>sin</td></tr>
    <tr><td>FLT_SINH</td>            <td>flt_sinh</td>            <td>sinh</td></tr>
    <tr><td>FLT_SQRT</td>            <td>flt_sqrt</td>            <td>sqrt</td></tr>
    <tr><td>FLT_STR</td>             <td>flt_str</td>             <td>fltStr</td></tr>
    <tr><td>FLT_TAN</td>             <td>flt_tan</td>             <td>tan</td></tr>
    <tr><td>FLT_TANH</td>            <td>flt_tanh</td>            <td>tanh</td></tr>
    <tr><td>FLT_TRUNC</td>           <td>flt_trunc</td>           <td>(inttype)</td></tr>
    <tr><td>FLT_VALUE</td>           <td>flt_value</td>           <td>fltValue</td></tr>
</table><p></p>
<a name="actions_graphic_keyboard"><h3>13.14 Actions to support the graphic keyboard</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>drwlib.c function</th>   <th>kbd_rtl.c/drw_x11.c/drw_win.c function</th></tr>
    <tr><td>GKB_BUSY_GETC</td>       <td>gkb_busy_getc</td>       <td>gkbKeyPressed() ? gkbGetc() : 512</td></tr>
    <tr><td>GKB_BUTTON_PRESSED</td>  <td>gkb_button_pressed</td>  <td>gkbButtonPressed</td></tr>
    <tr><td>GKB_BUTTON_XPOS</td>     <td>gkb_button_xpos</td>     <td>gkbButtonXpos</td></tr>
    <tr><td>GKB_BUTTON_YPOS</td>     <td>gkb_button_ypos</td>     <td>gkbButtonYpos</td></tr>
    <tr><td>GKB_GETC</td>            <td>gkb_getc</td>            <td>gkbGetc</td></tr>
    <tr><td>GKB_GETS</td>            <td>gkb_gets</td>            <td>gkbGets</td></tr>
    <tr><td>GKB_KEYPRESSED</td>      <td>gkb_keypressed</td>      <td>gkbKeyPressed</td></tr>
    <tr><td>GKB_LINE_READ</td>       <td>gkb_line_read</td>       <td>gkbLineRead</td></tr>
    <tr><td>GKB_RAW_GETC</td>        <td>gkb_raw_getc</td>        <td>gkbRawGetc</td></tr>
    <tr><td>GKB_WINDOW</td>          <td>gkb_window</td>          <td>gkbWindow</td></tr>
    <tr><td>GKB_WORD_READ</td>       <td>gkb_word_read</td>       <td>gkbWordRead</td></tr>
</table><p></p>
<a name="actions_hash"><h3>13.15 Actions for hash types</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>hshlib.c function</th>   <th>hsh_rtl.c function</th></tr>
    <tr><td>HSH_CONTAINS</td>        <td>hsh_contains</td>        <td>hshContains</td></tr>
    <tr><td>HSH_CPY</td>             <td>hsh_cpy</td>             <td>hshCpy</td></tr>
    <tr><td>HSH_CREATE</td>          <td>hsh_create</td>          <td>hshCreate</td></tr>
    <tr><td>HSH_DESTR</td>           <td>hsh_destr</td>           <td>hshDestr</td></tr>
    <tr><td>HSH_EMPTY</td>           <td>hsh_empty</td>           <td>hshEmpty</td></tr>
    <tr><td>HSH_EXCL</td>            <td>hsh_excl</td>            <td>hshExcl</td></tr>
    <tr><td>HSH_FOR</td>             <td>hsh_for</td>             <td>for</td></tr>
    <tr><td>HSH_FOR_DATA_KEY</td>    <td>hsh_for_data_key</td>    <td>for</td></tr>
    <tr><td>HSH_FOR_KEY</td>         <td>hsh_for_key</td>         <td>for</td></tr>
    <tr><td>HSH_IDX</td>             <td>hsh_idx</td>             <td>hshIdx, hshIdxAddr</td></tr>
    <tr><td>HSH_IDX2</td>            <td>hsh_idx2</td>            <td>&nbsp;</td></tr>
    <tr><td>HSH_INCL</td>            <td>hsh_incl</td>            <td>hshIncl</td></tr>
    <tr><td>HSH_KEYS</td>            <td>hsh_keys</td>            <td>hshKeys</td></tr>
    <tr><td>HSH_LNG</td>             <td>hsh_lng</td>             <td>a->size</td></tr>
    <tr><td>HSH_REFIDX</td>          <td>hsh_refidx</td>          <td>&nbsp;</td></tr>
    <tr><td>HSH_VALUES</td>          <td>hsh_values</td>          <td>hshValues</td></tr>
</table><p></p>
<a name="actions_integer"><h3>13.16 Actions for the type integer</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>intlib.c function</th>   <th>int_rtl.c function</th></tr>
    <tr><td>INT_ABS</td>             <td>int_abs</td>             <td>labs</td></tr>
    <tr><td>INT_ADD</td>             <td>int_add</td>             <td>+</td></tr>
    <tr><td>INT_BINOM</td>           <td>int_binom</td>           <td>intBinom</td></tr>
    <tr><td>INT_BIT_LENGTH</td>      <td>int_bit_length</td>      <td>intBitLength</td></tr>
    <tr><td>INT_CMP</td>             <td>int_cmp</td>             <td>intCmp</td></tr>
    <tr><td>INT_CONV</td>            <td>int_conv</td>            <td>(noop)</td></tr>
    <tr><td>INT_CPY</td>             <td>int_cpy</td>             <td>intCpy</td></tr>
    <tr><td>INT_CREATE</td>          <td>int_create</td>          <td>intCreate</td></tr>
    <tr><td>INT_DECR</td>            <td>int_decr</td>            <td>--</td></tr>
    <tr><td>INT_DIV</td>             <td>int_div</td>             <td>/</td></tr>
    <tr><td>INT_EQ</td>              <td>int_eq</td>              <td>==</td></tr>
    <tr><td>INT_FACT</td>            <td>int_fact</td>            <td>fact[a]</td></tr>
    <tr><td>INT_GE</td>              <td>int_ge</td>              <td>&gt;=</td></tr>
    <tr><td>INT_GROW</td>            <td>int_grow</td>            <td>+=</td></tr>
    <tr><td>INT_GT</td>              <td>int_gt</td>              <td>&gt;</td></tr>
    <tr><td>INT_HASHCODE</td>        <td>int_hashcode</td>        <td>(noop)</td></tr>
    <tr><td>INT_INCR</td>            <td>int_incr</td>            <td>++</td></tr>
    <tr><td>INT_LE</td>              <td>int_le</td>              <td>&lt;=</td></tr>
    <tr><td>INT_LOG2</td>            <td>int_log2</td>            <td>intLog2</td></tr>
    <tr><td>INT_LOWEST_SET_BIT</td>  <td>int_lowest_set_bit</td>  <td>intLowestSetBit</td></tr>
    <tr><td>INT_LPAD0</td>           <td>int_lpad0</td>           <td>intLpad0</td></tr>
    <tr><td>INT_LSHIFT</td>          <td>int_lshift</td>          <td>&lt;&lt;</td></tr>
    <tr><td>INT_LSHIFT_ASSIGN</td>   <td>int_lshift_assign</td>   <td>&lt;&lt;=</td></tr>
    <tr><td>INT_LT</td>              <td>int_lt</td>              <td>&lt;</td></tr>
    <tr><td>INT_MDIV</td>            <td>int_mdiv</td>            <td>a&gt;0&amp;&amp;b&lt;0 ? (a-1)/b-1 : a&lt;0&amp;&amp;b&gt;0 ? (a+1)/b-1 : a/b</td></tr>
    <tr><td>INT_MINUS</td>           <td>int_minus</td>           <td>-</td></tr>
    <tr><td>INT_MOD</td>             <td>int_mod</td>             <td>c=a%b, ((a&gt;0&amp;&amp;b&lt;0) || (a&lt;0&amp;&amp;b&gt;0)) &amp;&amp; c!=0 ? c+b : c</td></tr>
    <tr><td>INT_MULT</td>            <td>int_mult</td>            <td>*</td></tr>
    <tr><td>INT_MULT_ASSIGN</td>     <td>int_mult_assign</td>     <td>*=</td></tr>
    <tr><td>INT_NE</td>              <td>int_ne</td>              <td>!=</td></tr>
    <tr><td>INT_ODD</td>             <td>int_odd</td>             <td>&amp;1</td></tr>
    <tr><td>INT_ORD</td>             <td>int_ord</td>             <td>(noop)</td></tr>
    <tr><td>INT_PARSE</td>           <td>int_parse</td>           <td>intParse</td></tr>
    <tr><td>INT_PLUS</td>            <td>int_plus</td>            <td>(noop)</td></tr>
    <tr><td>INT_POW</td>             <td>int_pow</td>             <td>intPow</td></tr>
    <tr><td>INT_PRED</td>            <td>int_pred</td>            <td>--</td></tr>
    <tr><td>INT_RAND</td>            <td>int_rand</td>            <td>intRand</td></tr>
    <tr><td>INT_REM</td>             <td>int_rem</td>             <td>%</td></tr>
    <tr><td>INT_RSHIFT</td>          <td>int_rshift</td>          <td>a&gt;&gt;b<br />a&lt;0?~(~a&gt;&gt;b):a&gt;&gt;b</td></tr>
    <tr><td>INT_RSHIFT_ASSIGN</td>   <td>int_rshift_assign</td>   <td>a&gt;&gt;=b<br />if (a<0) a= ~(~a&gt;&gt;b); else a&gt;&gt;=b;</td></tr>
    <tr><td>INT_SBTR</td>            <td>int_sbtr</td>            <td>-</td></tr>
    <tr><td>INT_SHRINK</td>          <td>int_shrink</td>          <td>-=</td></tr>
    <tr><td>INT_SQRT</td>            <td>int_sqrt</td>            <td>intSqrt</td></tr>
    <tr><td>INT_STR</td>             <td>int_str</td>             <td>intStr</td></tr>
    <tr><td>INT_STR_BASED</td>       <td>int_str_based</td>       <td>intStrBased</td></tr>
    <tr><td>INT_SUCC</td>            <td>int_succ</td>            <td>+1</td></tr>
    <tr><td>INT_VALUE</td>           <td>int_value</td>           <td>intValue</td></tr>
</table><p></p>
<a name="actions_interface"><h3>13.17 Actions for interface types</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>itflib.c function</th>   <th>&nbsp;</th></tr>
    <tr><td>ITF_CMP</td>             <td>itf_cmp</td>             <td>uintCmpGeneric</td></tr>
    <tr><td>ITF_CONV2</td>           <td>itf_conv2</td>           <td>(noop)</td></tr>
    <tr><td>ITF_CPY</td>             <td>itf_cpy</td>             <td>=</td></tr>
    <tr><td>ITF_CPY2</td>            <td>itf_cpy2</td>            <td>=</td></tr>
    <tr><td>ITF_CREATE</td>          <td>itf_create</td>          <td>&nbsp;</td></tr>
    <tr><td>ITF_CREATE2</td>         <td>itf_create2</td>         <td>&nbsp;</td></tr>
    <tr><td>ITF_EQ</td>              <td>itf_eq</td>              <td>==</td></tr>
    <tr><td>ITF_HASHCODE</td>        <td>itf_hashcode</td>        <td>(inttype)(((memsizetype)a)&gt;&gt;6)</td></tr>
    <tr><td>ITF_NE</td>              <td>itf_ne</td>              <td>!=</td></tr>
    <tr><td>ITF_TO_HEAP</td>         <td>itf_to_heap</td>         <td>&nbsp;</td></tr>
    <tr><td>ITF_TO_INTERFACE</td>    <td>itf_to_interface</td>    <td>&nbsp;</td></tr>
</table><p></p>
<a name="actions_console_keyboard"><h3>13.18 Actions to support the text (console) screen keyboard</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>kbdlib.c function</th>   <th>kbd_rtl.c/kbd_inf.c function</th></tr>
    <tr><td>KBD_BUSY_GETC</td>       <td>kbd_busy_getc</td>       <td>kbdKeyPressed() ? kbdGetc() : 512</td></tr>
    <tr><td>KBD_GETC</td>            <td>kbd_getc</td>            <td>kbdGetc</td></tr>
    <tr><td>KBD_GETS</td>            <td>kbd_gets</td>            <td>kbdGets</td></tr>
    <tr><td>KBD_KEYPRESSED</td>      <td>kbd_keypressed</td>      <td>kbdKeyPressed</td></tr>
    <tr><td>KBD_LINE_READ</td>       <td>kbd_line_read</td>       <td>kbdLineRead</td></tr>
    <tr><td>KBD_RAW_GETC</td>        <td>kbd_raw_getc</td>        <td>kbdRawGetc</td></tr>
    <tr><td>KBD_WORD_READ</td>       <td>kbd_word_read</td>       <td>kbdWordRead</td></tr>
</table><p></p>
<a name="actions_list"><h3>13.19 Actions for the list type</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>lstlib.c function</th></tr>
    <tr><td>LST_CAT</td>             <td>lst_cat</td></tr>
    <tr><td>LST_CPY</td>             <td>lst_cpy</td></tr>
    <tr><td>LST_CREATE</td>          <td>lst_create</td></tr>
    <tr><td>LST_DESTR</td>           <td>lst_destr</td></tr>
    <tr><td>LST_ELEM</td>            <td>lst_elem</td></tr>
    <tr><td>LST_EMPTY</td>           <td>lst_empty</td></tr>
    <tr><td>LST_EXCL</td>            <td>lst_excl</td></tr>
    <tr><td>LST_HEAD</td>            <td>lst_head</td></tr>
    <tr><td>LST_IDX</td>             <td>lst_idx</td></tr>
    <tr><td>LST_INCL</td>            <td>lst_incl</td></tr>
    <tr><td>LST_LNG</td>             <td>lst_lng</td></tr>
    <tr><td>LST_RANGE</td>           <td>lst_range</td></tr>
    <tr><td>LST_TAIL</td>            <td>lst_tail</td></tr>
</table><p></p>
<a name="actions_pollData"><h3>13.20 Actions for the type pollData</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>pollib.c function</th>   <th>pol_unx.c/pol_sel.c function</th></tr>
    <tr><td>POL_ADD_CHECK</td>       <td>pol_addCheck</td>        <td>polAddCheck</td></tr>
    <tr><td>POL_CLEAR</td>           <td>pol_clear</td>           <td>polClear</td></tr>
    <tr><td>POL_CPY</td>             <td>pol_cpy</td>             <td>polCpy</td></tr>
    <tr><td>POL_CREATE</td>          <td>pol_create</td>          <td>polCreate</td></tr>
    <tr><td>POL_DESTR</td>           <td>pol_destr</td>           <td>polDestr</td></tr>
    <tr><td>POL_EMPTY</td>           <td>pol_empty</td>           <td>polEmpty</td></tr>
    <tr><td>POL_GET_CHECK</td>       <td>pol_getCheck</td>        <td>polGetCheck</td></tr>
    <tr><td>POL_GET_FINDING</td>     <td>pol_getFinding</td>      <td>polGetFinding</td></tr>
    <tr><td>POL_HAS_NEXT</td>        <td>pol_hasNext</td>         <td>polHasNext</td></tr>
    <tr><td>POL_ITER_CHECKS</td>     <td>pol_iterChecks</td>      <td>polIterChecks</td></tr>
    <tr><td>POL_ITER_FINDINGS</td>   <td>pol_iterFindings</td>    <td>polIterFindings</td></tr>
    <tr><td>POL_NEXT_FILE</td>       <td>pol_nextFile</td>        <td>polNextFile</td></tr>
    <tr><td>POL_POLL</td>            <td>pol_poll</td>            <td>polPoll</td></tr>
    <tr><td>POL_REMOVE_CHECK</td>    <td>pol_removeCheck</td>     <td>polRemoveCheck</td></tr>
    <tr><td>POL_VALUE</td>           <td>pol_value</td>           <td>polValue</td></tr>
</table><p></p>
<a name="actions_proc"><h3>13.21 Actions for proc operations and statements</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>prclib.c function</th>   <th>&nbsp;</th></tr>
    <tr><td>PRC_ARGS</td>            <td>prc_args</td>            <td>&nbsp;</td></tr>
    <tr><td>PRC_BEGIN</td>           <td>prc_begin</td>           <td>&nbsp;</td></tr>
    <tr><td>PRC_BLOCK</td>           <td>prc_block</td>           <td>&nbsp;</td></tr>
    <tr><td>PRC_BLOCK_DEF</td>       <td>prc_block_def</td>       <td>&nbsp;</td></tr>
    <tr><td>PRC_CASE</td>            <td>prc_case</td>            <td>switch</td></tr>
    <tr><td>PRC_CASE_DEF</td>        <td>prc_case_def</td>        <td>switch</td></tr>
    <tr><td>PRC_CPY</td>             <td>prc_cpy</td>             <td>&nbsp;</td></tr>
    <tr><td>PRC_CREATE</td>          <td>prc_create</td>          <td>&nbsp;</td></tr>
    <tr><td>PRC_DECLS</td>           <td>prc_decls</td>           <td>&nbsp;</td></tr>
    <tr><td>PRC_DYNAMIC</td>         <td>prc_dynamic</td>         <td>&nbsp;</td></tr>
    <tr><td>PRC_EXIT</td>            <td>prc_exit</td>            <td>exit</td></tr>
    <tr><td>PRC_FOR_DOWNTO</td>      <td>prc_for_downto</td>      <td>for</td></tr>
    <tr><td>PRC_FOR_TO</td>          <td>prc_for_to</td>          <td>for</td></tr>
    <tr><td>PRC_HEAPSTAT</td>        <td>prc_heapstat</td>        <td>&nbsp;</td></tr>
    <tr><td>PRC_HSIZE</td>           <td>prc_hsize</td>           <td>heapsize</td></tr>
    <tr><td>PRC_IF</td>              <td>prc_if</td>              <td>if</td></tr>
    <tr><td>PRC_IF_ELSIF</td>        <td>prc_if_elsif</td>        <td>if</td></tr>
    <tr><td>PRC_INCLUDE</td>         <td>prc_include</td>         <td>&nbsp;</td></tr>
    <tr><td>PRC_LOCAL</td>           <td>prc_local</td>           <td>&nbsp;</td></tr>
    <tr><td>PRC_NOOP</td>            <td>prc_noop</td>            <td>prcNoop</td></tr>
    <tr><td>PRC_RAISE</td>           <td>prc_raise</td>           <td>raise_error</td></tr>
    <tr><td>PRC_REPEAT</td>          <td>prc_repeat</td>          <td>do</td></tr>
    <tr><td>PRC_RES_BEGIN</td>       <td>prc_res_begin</td>       <td>&nbsp;</td></tr>
    <tr><td>PRC_RES_LOCAL</td>       <td>prc_res_local</td>       <td>&nbsp;</td></tr>
    <tr><td>PRC_RETURN</td>          <td>prc_return</td>          <td>&nbsp;</td></tr>
    <tr><td>PRC_RETURN2</td>         <td>prc_return2</td>         <td>&nbsp;</td></tr>
    <tr><td>PRC_SETTRACE</td>        <td>prc_settrace</td>        <td>&nbsp;</td></tr>
    <tr><td>PRC_TRACE</td>           <td>prc_trace</td>           <td>&nbsp;</td></tr>
    <tr><td>PRC_VARFUNC</td>         <td>prc_varfunc</td>         <td>&nbsp;</td></tr>
    <tr><td>PRC_VARFUNC2</td>        <td>prc_varfunc2</td>        <td>&nbsp;</td></tr>
    <tr><td>PRC_WHILE</td>           <td>prc_while</td>           <td>while</td></tr>
</table><p></p>
<a name="actions_program"><h3>13.22 Actions for the type program</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>prglib.c function</th>   <th>prg_comp.c function</th></tr>
    <tr><td>PRG_CPY</td>             <td>prg_cpy</td>             <td>prgCpy</td></tr>
    <tr><td>PRG_CREATE</td>          <td>prg_create</td>          <td>&nbsp;</td></tr>
    <tr><td>PRG_DECL_OBJECTS</td>    <td>prg_decl_objects</td>    <td>prgDeclObjects</td></tr>
    <tr><td>PRG_DESTR</td>           <td>prg_destr</td>           <td>&nbsp;</td></tr>
    <tr><td>PRG_EMPTY</td>           <td>prg_empty</td>           <td>&nbsp;</td></tr>
    <tr><td>PRG_EQ</td>              <td>prg_eq</td>              <td>==</td></tr>
    <tr><td>PRG_ERROR_COUNT</td>     <td>prg_error_count</td>     <td>prgErrorCount</td></tr>
    <tr><td>PRG_EVAL</td>            <td>prg_eval</td>            <td>prgEval</td></tr>
    <tr><td>PRG_EXEC</td>            <td>prg_exec</td>            <td>prgExec</td></tr>
    <tr><td>PRG_FIL_PARSE</td>       <td>prg_fil_parse</td>       <td>prgFilParse</td></tr>
    <tr><td>PRG_FIND</td>            <td>prg_find</td>            <td>&nbsp;</td></tr>
    <tr><td>PRG_INTERPRETER</td>     <td>prg_interpreter</td>     <td>interpreterPath</td></tr>
    <tr><td>PRG_MATCH</td>           <td>prg_match</td>           <td>prgMatch</td></tr>
    <tr><td>PRG_MATCH_EXPR</td>      <td>prg_match_expr</td>      <td>prgMatchExpr</td></tr>
    <tr><td>PRG_NAME</td>            <td>prg_name</td>            <td>arg_0</td></tr>
    <tr><td>PRG_NE</td>              <td>prg_ne</td>              <td>!=</td></tr>
    <tr><td>PRG_PATH</td>            <td>prg_path</td>            <td>programPath</td></tr>
    <tr><td>PRG_PROG</td>            <td>prg_prog</td>            <td>&nbsp;</td></tr>
    <tr><td>PRG_STR_PARSE</td>       <td>prg_str_parse</td>       <td>prgStrParse</td></tr>
    <tr><td>PRG_SYOBJECT</td>        <td>prg_syobject</td>        <td>prgSyobject</td></tr>
    <tr><td>PRG_SYSVAR</td>          <td>prg_sysvar</td>          <td>prgSysvar</td></tr>
    <tr><td>PRG_VALUE</td>           <td>prg_value</td>           <td>prgValue</td></tr>
</table><p></p>
<a name="actions_reference"><h3>13.23 Actions for the type reference</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>reflib.c function</th>   <th>ref_data.c function</th></tr>
    <tr><td>REF_ADDR</td>            <td>ref_addr</td>            <td>&</td></tr>
    <tr><td>REF_ALLOC</td>           <td>ref_alloc</td>           <td>refAlloc</td></tr>
    <tr><td>REF_ARRMAXIDX</td>       <td>ref_arrmaxidx</td>       <td>refArrmaxidx</td></tr>
    <tr><td>REF_ARRMINIDX</td>       <td>ref_arrminidx</td>       <td>refArrminidx</td></tr>
    <tr><td>REF_ARRTOLIST</td>       <td>ref_arrtolist</td>       <td>refArrtolist</td></tr>
    <tr><td>REF_BODY</td>            <td>ref_body</td>            <td>refBody</td></tr>
    <tr><td>REF_BUILD</td>           <td>ref_build</td>           <td>&nbsp;</td></tr>
    <tr><td>REF_CAST</td>            <td>ref_cast</td>            <td>&nbsp;</td></tr>
    <tr><td>REF_CATEGORY</td>        <td>ref_category</td>        <td>refCategory</td></tr>
    <tr><td>REF_CAT_PARSE</td>       <td>ref_cat_parse</td>       <td>refCatParse</td></tr>
    <tr><td>REF_CAT_STR</td>         <td>ref_cat_str</td>         <td>refCatStr</td></tr>
    <tr><td>REF_CMP</td>             <td>ref_cmp</td>             <td>refCmp</td></tr>
    <tr><td>REF_CONTENT</td>         <td>ref_content</td>         <td>&nbsp;</td></tr>
    <tr><td>REF_CONV</td>            <td>ref_conv</td>            <td>(noop)</td></tr>
    <tr><td>REF_CPY</td>             <td>ref_cpy</td>             <td>refCpy</td></tr>
    <tr><td>REF_CREATE</td>          <td>ref_create</td>          <td>refCreate</td></tr>
    <tr><td>REF_DEREF</td>           <td>ref_deref</td>           <td>&nbsp;</td></tr>
    <tr><td>REF_EQ</td>              <td>ref_eq</td>              <td>==</td></tr>
    <tr><td>REF_FILE</td>            <td>ref_file</td>            <td>refFile</td></tr>
    <tr><td>REF_FIND</td>            <td>ref_find</td>            <td>&nbsp;</td></tr>
    <tr><td>REF_HASHCODE</td>        <td>ref_hashcode</td>        <td>(inttype)(((memsizetype)a)&gt;&gt;6)</td></tr>
    <tr><td>REF_HSHDATATOLIST</td>   <td>ref_hshdatatolist</td>   <td>refHshDataToList</td></tr>
    <tr><td>REF_HSHKEYTOLIST</td>    <td>ref_hshkeytolist</td>    <td>refHshKeyToList</td></tr>
    <tr><td>REF_ISSYMB</td>          <td>ref_issymb</td>          <td>&nbsp;</td></tr>
    <tr><td>REF_ISVAR</td>           <td>ref_isvar</td>           <td>refIsvar</td></tr>
    <tr><td>REF_ITFTOSCT</td>        <td>ref_itftosct</td>        <td>refItftosct</td></tr>
    <tr><td>REF_LINE</td>            <td>ref_line</td>            <td>refLine</td></tr>
    <tr><td>REF_LOCAL_CONSTS</td>    <td>ref_local_consts</td>    <td>refLocalConsts</td></tr>
    <tr><td>REF_LOCAL_VARS</td>      <td>ref_local_vars</td>      <td>refLocalVars</td></tr>
    <tr><td>REF_MKREF</td>           <td>ref_mkref</td>           <td>&nbsp;</td></tr>
    <tr><td>REF_NAME</td>            <td>ref_name</td>            <td>&nbsp;</td></tr>
    <tr><td>REF_NE</td>              <td>ref_ne</td>              <td>!=</td></tr>
    <tr><td>REF_NIL</td>             <td>ref_nil</td>             <td>&nbsp;</td></tr>
    <tr><td>REF_NUM</td>             <td>ref_num</td>             <td>refNum</td></tr>
    <tr><td>REF_PARAMS</td>          <td>ref_params</td>          <td>refParams</td></tr>
    <tr><td>REF_PROG</td>            <td>ref_prog</td>            <td>&nbsp;</td></tr>
    <tr><td>REF_RESINI</td>          <td>ref_resini</td>          <td>refResini</td></tr>
    <tr><td>REF_RESULT</td>          <td>ref_result</td>          <td>refResult</td></tr>
    <tr><td>REF_SCAN</td>            <td>ref_scan</td>            <td>&nbsp;</td></tr>
    <tr><td>REF_SCTTOLIST</td>       <td>ref_scttolist</td>       <td>refScttolist</td></tr>
    <tr><td>REF_SELECT</td>          <td>ref_select</td>          <td>a->stru[b]</td></tr>
    <tr><td>REF_SETCATEGORY</td>     <td>ref_setcategory</td>     <td>refSetCategory</td></tr>
    <tr><td>REF_SETPARAMS</td>       <td>ref_setparams</td>       <td>refSetParams</td></tr>
    <tr><td>REF_SETTYPE</td>         <td>ref_settype</td>         <td>refSetType</td></tr>
    <tr><td>REF_STR</td>             <td>ref_str</td>             <td>refStr</td></tr>
    <tr><td>REF_SYMB</td>            <td>ref_symb</td>            <td>&nbsp;</td></tr>
    <tr><td>REF_TRACE</td>           <td>ref_trace</td>           <td>printf</td></tr>
    <tr><td>REF_TYPE</td>            <td>ref_type</td>            <td>refType</td></tr>
    <tr><td>REF_VALUE</td>           <td>ref_value</td>           <td>refValue</td></tr>
</table><p></p>
<a name="actions_ref_list"><h3>13.24 Actions for the type ref_list</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>rfllib.c function</th>   <th>rfl_data.c function</th></tr>
    <tr><td>RFL_APPEND</td>          <td>rfl_append</td>          <td>rflAppend</td></tr>
    <tr><td>RFL_CAT</td>             <td>rfl_cat</td>             <td>rflCat</td></tr>
    <tr><td>RFL_CPY</td>             <td>rfl_cpy</td>             <td>rflCpy</td></tr>
    <tr><td>RFL_CREATE</td>          <td>rfl_create</td>          <td>rflCreate</td></tr>
    <tr><td>RFL_DESTR</td>           <td>rfl_destr</td>           <td>rflDestr</td></tr>
    <tr><td>RFL_ELEM</td>            <td>rfl_elem</td>            <td>rflElem</td></tr>
    <tr><td>RFL_ELEMCPY</td>         <td>rfl_elemcpy</td>         <td>rflElemcpy</td></tr>
    <tr><td>RFL_EMPTY</td>           <td>rfl_empty</td>           <td>&nbsp;</td></tr>
    <tr><td>RFL_EQ</td>              <td>rfl_eq</td>              <td>rflEq</td></tr>
    <tr><td>RFL_EXCL</td>            <td>rfl_excl</td>            <td>&nbsp;</td></tr>
    <tr><td>RFL_EXPR</td>            <td>rfl_expr</td>            <td>&nbsp;</td></tr>
    <tr><td>RFL_FOR</td>             <td>rfl_for</td>             <td>for</td></tr>
    <tr><td>RFL_FOR_UNTIL</td>       <td>rfl_for_until</td>       <td>for</td></tr>
    <tr><td>RFL_HEAD</td>            <td>rfl_head</td>            <td>rflHead</td></tr>
    <tr><td>RFL_IDX</td>             <td>rfl_idx</td>             <td>rflIdx</td></tr>
    <tr><td>RFL_INCL</td>            <td>rfl_incl</td>            <td>rflIncl</td></tr>
    <tr><td>RFL_IPOS</td>            <td>rfl_ipos</td>            <td>rflIpos</td></tr>
    <tr><td>RFL_LNG</td>             <td>rfl_lng</td>             <td>rflLng</td></tr>
    <tr><td>RFL_MKLIST</td>          <td>rfl_mklist</td>          <td>rflMklist</td></tr>
    <tr><td>RFL_NE</td>              <td>rfl_ne</td>              <td>rflNe</td></tr>
    <tr><td>RFL_NOT_ELEM</td>        <td>rfl_not_elem</td>        <td>!rflElem</td></tr>
    <tr><td>RFL_POS</td>             <td>rfl_pos</td>             <td>rflPos</td></tr>
    <tr><td>RFL_RANGE</td>           <td>rfl_range</td>           <td>rflRange</td></tr>
    <tr><td>RFL_SETVALUE</td>        <td>rfl_setvalue</td>        <td>rflSetvalue</td></tr>
    <tr><td>RFL_TAIL</td>            <td>rfl_tail</td>            <td>rflTail</td></tr>
    <tr><td>RFL_TRACE</td>           <td>rfl_trace</td>           <td>&nbsp;</td></tr>
    <tr><td>RFL_VALUE</td>           <td>rfl_value</td>           <td>rflValue</td></tr>
</table><p></p>
<a name="actions_struct"><h3>13.25 Actions for struct types</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>sctlib.c function</th>   <th>&nbsp;</th></tr>
    <tr><td>SCT_ALLOC</td>           <td>sct_alloc</td>           <td>&nbsp;</td></tr>
    <tr><td>SCT_CAT</td>             <td>sct_cat</td>             <td>&nbsp;</td></tr>
    <tr><td>SCT_CONV</td>            <td>sct_conv</td>            <td>&nbsp;</td></tr>
    <tr><td>SCT_CPY</td>             <td>sct_cpy</td>             <td>cpy_ ...</td></tr>
    <tr><td>SCT_CREATE</td>          <td>sct_create</td>          <td>create_ ...</td></tr>
    <tr><td>SCT_DESTR</td>           <td>sct_destr</td>           <td>destr_ ...</td></tr>
    <tr><td>SCT_ELEM</td>            <td>sct_elem</td>            <td>&nbsp;</td></tr>
    <tr><td>SCT_EMPTY</td>           <td>sct_empty</td>           <td>&nbsp;</td></tr>
    <tr><td>SCT_INCL</td>            <td>sct_incl</td>            <td>&nbsp;</td></tr>
    <tr><td>SCT_LNG</td>             <td>sct_lng</td>             <td>&nbsp;</td></tr>
    <tr><td>SCT_REFIDX</td>          <td>sct_refidx</td>          <td>&nbsp;</td></tr>
    <tr><td>SCT_SELECT</td>          <td>sct_select</td>          <td>a->stru[b]</td></tr>
</table><p></p>
<a name="actions_set"><h3>13.26 Actions for set types</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>setlib.c function</th>   <th>set_rtl.c function</th></tr>
    <tr><td>SET_ARRLIT</td>          <td>set_arrlit</td>          <td>setArrlit</td></tr>
    <tr><td>SET_BASELIT</td>         <td>set_baselit</td>         <td>setBaselit</td></tr>
    <tr><td>SET_CARD</td>            <td>set_card</td>            <td>setCard</td></tr>
    <tr><td>SET_CMP</td>             <td>set_cmp</td>             <td>setCmp</td></tr>
    <tr><td>SET_CONV</td>            <td>set_conv</td>            <td>(noop)</td></tr>
    <tr><td>SET_CPY</td>             <td>set_cpy</td>             <td>setCpy</td></tr>
    <tr><td>SET_CREATE</td>          <td>set_create</td>          <td>setCreate</td></tr>
    <tr><td>SET_DESTR</td>           <td>set_destr</td>           <td>setDestr</td></tr>
    <tr><td>SET_DIFF</td>            <td>set_diff</td>            <td>setDiff</td></tr>
    <tr><td>SET_ELEM</td>            <td>set_elem</td>            <td>setElem</td></tr>
    <tr><td>SET_EMPTY</td>           <td>set_empty</td>           <td>&nbsp;</td></tr>
    <tr><td>SET_EQ</td>              <td>set_eq</td>              <td>setEq</td></tr>
    <tr><td>SET_EXCL</td>            <td>set_excl</td>            <td>setExcl</td></tr>
    <tr><td>SET_GE</td>              <td>set_ge</td>              <td>setIsSubset(b, a)</td></tr>
    <tr><td>SET_GT</td>              <td>set_gt</td>              <td>setIsProperSubset(b, a)</td></tr>
    <tr><td>SET_HASHCODE</td>        <td>set_hashcode</td>        <td>setHashCode</td></tr>
    <tr><td>SET_ICONV</td>           <td>set_iconv</td>           <td>setIConv</td></tr>
    <tr><td>SET_INCL</td>            <td>set_incl</td>            <td>setIncl</td></tr>
    <tr><td>SET_INTERSECT</td>       <td>set_intersect</td>       <td>setIntersect</td></tr>
    <tr><td>SET_LE</td>              <td>set_le</td>              <td>setIsSubset</td></tr>
    <tr><td>SET_LT</td>              <td>set_lt</td>              <td>setIsProperSubset</td></tr>
    <tr><td>SET_MAX</td>             <td>set_max</td>             <td>setMax</td></tr>
    <tr><td>SET_MIN</td>             <td>set_min</td>             <td>setMin</td></tr>
    <tr><td>SET_NE</td>              <td>set_ne</td>              <td>setNe</td></tr>
    <tr><td>SET_NEXT</td>            <td>set_next</td>            <td>setNext</td></tr>
    <tr><td>SET_NOT_ELEM</td>        <td>set_not_elem</td>        <td>!setElem</td></tr>
    <tr><td>SET_RAND</td>            <td>set_rand</td>            <td>setRand</td></tr>
    <tr><td>SET_RANGELIT</td>        <td>set_rangelit</td>        <td>setRangelit</td></tr>
    <tr><td>SET_SCONV</td>           <td>set_sconv</td>           <td>setSConv</td></tr>
    <tr><td>SET_SYMDIFF</td>         <td>set_symdiff</td>         <td>setSymdiff</td></tr>
    <tr><td>SET_UNION</td>           <td>set_union</td>           <td>setUnion</td></tr>
    <tr><td>SET_VALUE</td>           <td>set_value</td>           <td>setValue</td></tr>
</table><p></p>
<a name="actions_PRIMITIVE_SOCKET"><h3>13.27 Actions for the type PRIMITIVE_SOCKET</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>strlib.c function</th>   <th>str_rtl.c function</th></tr>
    <tr><td>SOC_ACCEPT</td>          <td>soc_accept</td>          <td>socAccept</td></tr>
    <tr><td>SOC_ADDR_FAMILY</td>     <td>soc_addr_family</td>     <td>socAddrFamily</td></tr>
    <tr><td>SOC_ADDR_NUMERIC</td>    <td>soc_addr_numeric</td>    <td>socAddrNumeric</td></tr>
    <tr><td>SOC_ADDR_SERVICE</td>    <td>soc_addr_service</td>    <td>socAddrService</td></tr>
    <tr><td>SOC_BIND</td>            <td>soc_bind</td>            <td>socBind</td></tr>
    <tr><td>SOC_CLOSE</td>           <td>soc_close</td>           <td>socClose</td></tr>
    <tr><td>SOC_CONNECT</td>         <td>soc_connect</td>         <td>socConnect</td></tr>
    <tr><td>SOC_CPY</td>             <td>soc_cpy</td>             <td>=</td></tr>
    <tr><td>SOC_CREATE</td>          <td>soc_create</td>          <td>&nbsp;</td></tr>
    <tr><td>SOC_EMPTY</td>           <td>soc_empty</td>           <td>&nbsp;</td></tr>
    <tr><td>SOC_EQ</td>              <td>soc_eq</td>              <td>==</td></tr>
    <tr><td>SOC_GETC</td>            <td>soc_getc</td>            <td>socGetc</td></tr>
    <tr><td>SOC_GETS</td>            <td>soc_gets</td>            <td>socGets</td></tr>
    <tr><td>SOC_GET_ADDR</td>        <td>soc_get_addr</td>        <td>socGetAddr</td></tr>
    <tr><td>SOC_GET_HOSTNAME</td>    <td>soc_get_hostname</td>    <td>socGetHostname</td></tr>
    <tr><td>SOC_HAS_NEXT</td>        <td>soc_has_next</td>        <td>socHasNext</td></tr>
    <tr><td>SOC_INET_ADDR</td>       <td>soc_inet_addr</td>       <td>socInetAddr</td></tr>
    <tr><td>SOC_INET_LOCAL_ADDR</td> <td>soc_inet_local_addr</td> <td>socInetLocalAddr</td></tr>
    <tr><td>SOC_INET_SERV_ADDR</td>  <td>soc_inet_serv_addr</td>  <td>socInetServAddr</td></tr>
    <tr><td>SOC_INPUT_READY</td>     <td>soc_input_ready</td>     <td>socInputReady</td></tr>
    <tr><td>SOC_LINE_READ</td>       <td>soc_line_read</td>       <td>socLineRead</td></tr>
    <tr><td>SOC_LISTEN</td>          <td>soc_listen</td>          <td>socListen</td></tr>
    <tr><td>SOC_NE</td>              <td>soc_ne</td>              <td>!=</td></tr>
    <tr><td>SOC_RECV</td>            <td>soc_recv</td>            <td>socRecv</td></tr>
    <tr><td>SOC_RECVFROM</td>        <td>soc_recvfrom</td>        <td>socRecvfrom</td></tr>
    <tr><td>SOC_SEND</td>            <td>soc_send</td>            <td>socSend</td></tr>
    <tr><td>SOC_SENDTO</td>          <td>soc_sendto</td>          <td>socSendto</td></tr>
    <tr><td>SOC_SOCKET</td>          <td>soc_socket</td>          <td>socSocket</td></tr>
    <tr><td>SOC_WORD_READ</td>       <td>soc_word_read</td>       <td>socWordRead</td></tr>
    <tr><td>SOC_WRITE</td>           <td>soc_write</td>           <td>socWrite</td></tr>
</table><p></p>
<a name="actions_string"><h3>13.28 Actions for the type string</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>strlib.c function</th>   <th>str_rtl.c function</th></tr>
    <tr><td>STR_APPEND</td>          <td>str_append</td>          <td>strAppend</td></tr>
    <tr><td>STR_CAT</td>             <td>str_cat</td>             <td>strConcat, strConcatTemp</td></tr>
    <tr><td>STR_CHIPOS</td>          <td>str_chipos</td>          <td>strChIpos</td></tr>
    <tr><td>STR_CHPOS</td>           <td>str_chpos</td>           <td>strChPos</td></tr>
    <tr><td>STR_CHSPLIT</td>         <td>str_chsplit</td>         <td>strChSplit</td></tr>
    <tr><td>STR_CLIT</td>            <td>str_clit</td>            <td>strCLit</td></tr>
    <tr><td>STR_CMP</td>             <td>str_cmp</td>             <td>strCompare</td></tr>
    <tr><td>STR_CPY</td>             <td>str_cpy</td>             <td>strCopy</td></tr>
    <tr><td>STR_CREATE</td>          <td>str_create</td>          <td>strCreate</td></tr>
    <tr><td>STR_DESTR</td>           <td>str_destr</td>           <td>strDestr</td></tr>
    <tr><td>STR_ELEMCPY</td>         <td>str_elemcpy</td>         <td>a-&gt;mem[b-1]=c</td></tr>
    <tr><td>STR_EQ</td>              <td>str_eq</td>              <td>a->size==b->size &amp;&amp; memcmp(a,b,a->size*sizeof(strelemtype))==0</td></tr>
    <tr><td>STR_GE</td>              <td>str_ge</td>              <td>strGe</td></tr>
    <tr><td>STR_GT</td>              <td>str_gt</td>              <td>strGt</td></tr>
    <tr><td>STR_HASHCODE</td>        <td>str_hashcode</td>        <td>strHashCode</td></tr>
    <tr><td>STR_HEAD</td>            <td>str_head</td>            <td>strHead</td></tr>
    <tr><td>STR_IDX</td>             <td>str_idx</td>             <td>a-&gt;mem[b-1]</td></tr>
    <tr><td>STR_IPOS</td>            <td>str_ipos</td>            <td>strIpos</td></tr>
    <tr><td>STR_LE</td>              <td>str_le</td>              <td>strLe</td></tr>
    <tr><td>STR_LIT</td>             <td>str_lit</td>             <td>strLit</td></tr>
    <tr><td>STR_LNG</td>             <td>str_lng</td>             <td>a->size</td></tr>
    <tr><td>STR_LOW</td>             <td>str_low</td>             <td>strLow, strLowTemp</td></tr>
    <tr><td>STR_LPAD</td>            <td>str_lpad</td>            <td>strLpad</td></tr>
    <tr><td>STR_LPAD0</td>           <td>str_lpad0</td>           <td>strLpad0, strLpad0Temp</td></tr>
    <tr><td>STR_LT</td>              <td>str_lt</td>              <td>strLt</td></tr>
    <tr><td>STR_MULT</td>            <td>str_mult</td>            <td>strMult</td></tr>
    <tr><td>STR_NE</td>              <td>str_ne</td>              <td>a->size!=b->size || memcmp(a,b,a->size*sizeof(strelemtype))!=0</td></tr>
    <tr><td>STR_POS</td>             <td>str_pos</td>             <td>strPos</td></tr>
    <tr><td>STR_POSCPY</td>          <td>str_poscpy</td>          <td>memcpy</td></tr>
    <tr><td>STR_PUSH</td>            <td>str_push</td>            <td>strPush</td></tr>
    <tr><td>STR_RANGE</td>           <td>str_range</td>           <td>strRange</td></tr>
    <tr><td>STR_RCHIPOS</td>         <td>str_rchipos</td>         <td>strRChIpos</td></tr>
    <tr><td>STR_RCHPOS</td>          <td>str_rchpos</td>          <td>strRChPos</td></tr>
    <tr><td>STR_REPL</td>            <td>str_repl</td>            <td>strRepl</td></tr>
    <tr><td>STR_RIPOS</td>           <td>str_ripos</td>           <td>strRIPos</td></tr>
    <tr><td>STR_RPAD</td>            <td>str_rpad</td>            <td>strRpad</td></tr>
    <tr><td>STR_RPOS</td>            <td>str_rpos</td>            <td>strRpos</td></tr>
    <tr><td>STR_SPLIT</td>           <td>str_split</td>           <td>strSplit</td></tr>
    <tr><td>STR_STR</td>             <td>str_str</td>             <td>(noop)</td></tr>
    <tr><td>STR_SUBSTR</td>          <td>str_substr</td>          <td>strSubstr</td></tr>
    <tr><td>STR_TAIL</td>            <td>str_tail</td>            <td>strTail</td></tr>
    <tr><td>STR_TOUTF8</td>          <td>str_toutf8</td>          <td>strToUtf8</td></tr>
    <tr><td>STR_TRIM</td>            <td>str_trim</td>            <td>strTrim</td></tr>
    <tr><td>STR_UP</td>              <td>str_up</td>              <td>strUp, strUpTemp</td></tr>
    <tr><td>STR_UTF8TOSTRI</td>      <td>str_utf8tostri</td>      <td>strUtf8ToStri</td></tr>
    <tr><td>STR_VALUE</td>           <td>str_value</td>           <td>strValue</td></tr>
</table><p></p>
<a name="actions_time"><h3>13.29 Actions for the type time</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>timlib.c function</th>   <th>tim_unx.c/tim_win.c function</th></tr>
    <tr><td>TIM_AWAIT</td>           <td>tim_await</td>           <td>timAwait</td></tr>
    <tr><td>TIM_FROM_TIMESTAMP</td>  <td>tim_from_timestamp</td>  <td>timFromTimestamp</td></tr>
    <tr><td>TIM_NOW</td>             <td>tim_now</td>             <td>timNow</td></tr>
    <tr><td>TIM_SET_LOCAL_TZ</td>    <td>tim_set_local_tz</td>    <td>timSetLocalTZ</td></tr>
</table><p></p>
<a name="actions_type"><h3>13.30 Actions for the type type</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>typlib.c function</th>   <th>typ_data.c function</th></tr>
    <tr><td>TYP_ADDINTERFACE</td>    <td>typ_addinterface</td>    <td>&nbsp;</td></tr>
    <tr><td>TYP_CMP</td>             <td>typ_cmp</td>             <td>typCmp</td></tr>
    <tr><td>TYP_CPY</td>             <td>typ_cpy</td>             <td>typCpy</td></tr>
    <tr><td>TYP_CREATE</td>          <td>typ_create</td>          <td>typCreate</td></tr>
    <tr><td>TYP_DESTR</td>           <td>typ_destr</td>           <td>typDestr</td></tr>
    <tr><td>TYP_EQ</td>              <td>typ_eq</td>              <td>==</td></tr>
    <tr><td>TYP_FUNC</td>            <td>typ_func</td>            <td>typFunc</td></tr>
    <tr><td>TYP_GENSUB</td>          <td>typ_gensub</td>          <td>&nbsp;</td></tr>
    <tr><td>TYP_GENTYPE</td>         <td>typ_gentype</td>         <td>&nbsp;</td></tr>
    <tr><td>TYP_HASHCODE</td>        <td>typ_hashcode</td>        <td>(inttype)(((memsizetype)a)&gt;&gt;6)</td></tr>
    <tr><td>TYP_ISDECLARED</td>      <td>typ_isdeclared</td>      <td>&nbsp;</td></tr>
    <tr><td>TYP_ISDERIVED</td>       <td>typ_isderived</td>       <td>typIsDerived</td></tr>
    <tr><td>TYP_ISFORWARD</td>       <td>typ_isforward</td>       <td>&nbsp;</td></tr>
    <tr><td>TYP_ISFUNC</td>          <td>typ_isfunc</td>          <td>typIsFunc</td></tr>
    <tr><td>TYP_ISVARFUNC</td>       <td>typ_isvarfunc</td>       <td>typIsVarfunc</td></tr>
    <tr><td>TYP_MATCHOBJ</td>        <td>typ_matchobj</td>        <td>typMatchobj</td></tr>
    <tr><td>TYP_META</td>            <td>typ_meta</td>            <td>typMeta</td></tr>
    <tr><td>TYP_NE</td>              <td>typ_ne</td>              <td>!=</td></tr>
    <tr><td>TYP_NUM</td>             <td>typ_num</td>             <td>typNum</td></tr>
    <tr><td>TYP_RESULT</td>          <td>typ_result</td>          <td>typResult</td></tr>
    <tr><td>TYP_STR</td>             <td>typ_str</td>             <td>typStr</td></tr>
    <tr><td>TYP_VALUE</td>           <td>typ_value</td>           <td>typValue</td></tr>
    <tr><td>TYP_VARCONV</td>         <td>typ_varconv</td>         <td>&nbsp;</td></tr>
    <tr><td>TYP_VARFUNC</td>         <td>typ_varfunc</td>         <td>typVarfunc</td></tr>
</table><p></p>
<a name="actions_utf8_file"><h3>13.31 Actions for the type utf8_file</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>ut8lib.c function</th>   <th>ut8_rtl.c function</th></tr>
    <tr><td>UT8_GETC</td>            <td>ut8_getc</td>            <td>ut8Getc</td></tr>
    <tr><td>UT8_GETS</td>            <td>ut8_gets</td>            <td>ut8Gets</td></tr>
    <tr><td>UT8_LINE_READ</td>       <td>ut8_line_read</td>       <td>ut8LineRead</td></tr>
    <tr><td>UT8_SEEK</td>            <td>ut8_seek</td>            <td>ut8Seek</td></tr>
    <tr><td>UT8_WORD_READ</td>       <td>ut8_word_read</td>       <td>ut8WordRead</td></tr>
    <tr><td>UT8_WRITE</td>           <td>ut8_write</td>           <td>ut8Write</td></tr>
</table><p></p>

<a name="errors_file_start"></a><p></p>
<a name="errors_ERRORS"><h2>14. ERRORS</h2></a>
<!-- ========== -->
<p></p>
<a name="errors_Compile_time_errors"><h3>14.1 Compile time errors</h3></a>
<p>
  The compile time errors are not fatal (the program can
  execute) except for the error 1 (Out of heap space) which
  terminates the compilation process and no execution occurs.
  The following compile time errors exist:
</p><dl><dd><table border="0" cellspacing="0">
    <tr><td align="right"> 1:</td> <td width="10"></td><td>Fatal Error: Out of heap space</td></tr>
    <tr><td align="right"> 2:</td> <td width="10"></td><td>File "%s" not found</td></tr>
    <tr><td align="right"> 3:</td> <td width="10"></td><td>Include file "%s" not found</td></tr>
    <tr><td align="right"> 4:</td> <td width="10"></td><td>"END OF FILE" encountered</td></tr>
    <tr><td align="right"> 5:</td> <td width="10"></td><td>Illegal character in text "%s"</td></tr>
    <tr><td align="right"> 6:</td> <td width="10"></td><td>Unclosed comment</td></tr>
    <tr><td align="right"> 7:</td> <td width="10"></td><td>Illegal pragma "%s"</td></tr>
    <tr><td align="right"> 8:</td> <td width="10"></td><td>Illegal action "%s"</td></tr>
    <tr><td align="right"> 9:</td> <td width="10"></td><td>Illegal system declaration "%s"</td></tr>
    <tr><td align="right">10:</td> <td width="10"></td><td>Integer "%s" too big</td></tr>
    <tr><td align="right">11:</td> <td width="10"></td><td>Negative exponent in integer literal</td></tr>
    <tr><td align="right">12:</td> <td width="10"></td><td>Digit expected found "%s"</td></tr>
    <tr><td align="right">13:</td> <td width="10"></td><td>Integer "%dE%s" too big</td></tr>
    <tr><td align="right">14:</td> <td width="10"></td><td>Integer base "%ld" not between 2 and 36</td></tr>
    <tr><td align="right">15:</td> <td width="10"></td><td>Extended digit expected found "%s"</td></tr>
    <tr><td align="right">16:</td> <td width="10"></td><td>Illegal digit "%c" in based integer "%d#%s"</td></tr>
    <tr><td align="right">17:</td> <td width="10"></td><td>Based integer "%d#%s" too big</td></tr>
    <tr><td align="right">18:</td> <td width="10"></td><td>"'" expected found "%s"</td></tr>
    <tr><td align="right">19:</td> <td width="10"></td><td>Character literal exceeds source line</td></tr>
    <tr><td align="right">20:</td> <td width="10"></td><td>Use \" instead of "" to represent " in a string</td></tr>
    <tr><td align="right">21:</td> <td width="10"></td><td>Use / instead of \\ as path delimiter</td></tr>
    <tr><td align="right">22:</td> <td width="10"></td><td>Illegal string escape "\%s"</td></tr>
    <tr><td align="right">23:</td> <td width="10"></td><td>Numerical escape sequences should end with "\" not "%s");</td></tr>
    <tr><td align="right">24:</td> <td width="10"></td><td>String continuations should end with "\" not "%s");</td></tr>
    <tr><td align="right">25:</td> <td width="10"></td><td>String literal exceeds source line</td></tr>
    <tr><td align="right">26:</td> <td width="10"></td><td>Name expected found "%s"</td></tr>
    <tr><td align="right">27:</td> <td width="10"></td><td>Integer literal expected found "%s"</td></tr>
    <tr><td align="right">28:</td> <td width="10"></td><td>String literal expected found "%s"</td></tr>
    <tr><td align="right">29:</td> <td width="10"></td><td>Identifier expected found "%s"</td></tr>
    <tr><td align="right">30:</td> <td width="10"></td><td>Expression expected found "%s"</td></tr>
    <tr><td align="right">31:</td> <td width="10"></td><td>Declaration of parameter %s failed</td></tr>
    <tr><td align="right">32:</td> <td width="10"></td><td>Declaration of "%s" failed</td></tr>
    <tr><td align="right">33:</td> <td width="10"></td><td>Exception "%s" raised</td></tr>
    <tr><td align="right">34:</td> <td width="10"></td><td>"%s" declared twice</td></tr>
    <tr><td align="right">35:</td> <td width="10"></td><td>"%s" not declared</td></tr>
    <tr><td align="right">36:</td> <td width="10"></td><td>Associativity expected found "%s"</td></tr>
    <tr><td align="right">37:</td> <td width="10"></td><td>Statement priority "%s" too big</td></tr>
    <tr><td align="right">38:</td> <td width="10"></td><td>Syntax with two parameters before operator is illegal</td></tr>
    <tr><td align="right">39:</td> <td width="10"></td><td>Empty syntax declaration</td></tr>
    <tr><td align="right">40:</td> <td width="10"></td><td>Dot expression requested as syntax description</td></tr>
    <tr><td align="right">41:</td> <td width="10"></td><td>"%s" redeclared with infix priority %d not %d</td></tr>
    <tr><td align="right">42:</td> <td width="10"></td><td>"%s" redeclared with prefix priority %d not %d</td></tr>
    <tr><td align="right">43:</td> <td width="10"></td><td>Priority %d required for parameter after "%s" not %d</td></tr>
    <tr><td align="right">44:</td> <td width="10"></td><td>Priority &lt;= %d expected found "%s" with priority %d</td></tr>
    <tr><td align="right">45:</td> <td width="10"></td><td>"%s" must have priority %d not %d for dot expression</td></tr>
    <tr><td align="right">46:</td> <td width="10"></td><td>"%s" expected found "%s"</td></tr>
    <tr><td align="right">47:</td> <td width="10"></td><td>"%s" expected found "%s"</td></tr>
    <tr><td align="right">48:</td> <td width="10"></td><td>Undefined type for literal "%s"</td></tr>
    <tr><td align="right">49:</td> <td width="10"></td><td>"newtype", "subtype", "func", "enumlit" or "action" expected found "%s"</td></tr>
    <tr><td align="right">50:</td> <td width="10"></td><td>"func" or "type" expected found "%s"</td></tr>
    <tr><td align="right">51:</td> <td width="10"></td><td>Match for %s failed</td></tr>
    <tr><td align="right">52:</td> <td width="10"></td><td>Variable expected in %s found %s</td></tr>
    <tr><td align="right">53:</td> <td width="10"></td><td>Type expected found %s</td></tr>
    <tr><td align="right">54:</td> <td width="10"></td><td>Procedure expected found %s expression</td></tr>
    <tr><td align="right">55:</td> <td width="10"></td><td>Parameter specifier expected found "%s"</td></tr>
    <tr><td align="right">56:</td> <td width="10"></td><td>Evaluate type expression %s failed</td></tr>
    <tr><td align="right">   </td> <td width="10"></td><td>Undefined error</td></tr>
</table></dd></dl><p></p>

<a name="errors_Exceptions"><h3>14.2 Exceptions</h3></a>
<p>
  There are various exceptions which can be raised during
  program execution:
</p><dl><dt>
    MEMORY_ERROR:</dt><dd><dl><dt>
      May be raised by various operations of the following types:</dt><dd>
          <tt><!-- ' --><a class="type" href="#types_array">array</a><!-- ' --></tt>, <tt><!-- ' --><a class="type" href="#types_struct">struct</a><!-- ' --></tt>, <tt><!-- ' --><a class="type" href="#types_hash">hash</a><!-- ' --></tt>, <tt><!-- ' --><a class="type" href="#types_file">file</a><!-- ' --></tt>, <tt><!-- ' --><a class="type" href="#types_func">func</a><!-- ' --></tt>, <tt><!-- ' --><a class="type" href="#types_proc">proc</a><!-- ' --></tt>, <tt><!-- ' --><a class="type" href="#types_reference">reference</a><!-- ' --></tt>, <tt><!-- ' --><a class="type" href="#types_string">string</a><!-- ' --></tt>.</dd><dt>
      Additionally the interpreter kernel may raise this exception also.</dt></dl></dd><dt>
    NUMERIC_ERROR:</dt><dd><dl><dt>
      May be raised from the following <tt><!-- ' --><a class="type" href="#types_integer">integer</a><!-- ' --></tt> operations:</dt><dd>
          !, **, div, rem, mdiv, mod, sqrt, log2.</dd><dt>
      May be raised from the following <tt><!-- ' --><a class="type" href="#types_bigInteger">bigInteger</a><!-- ' --></tt> operations:</dt><dd>
          !, **, div, rem, mdiv, mod, sqrt, log2.</dd><dt></dl></dd><dt>
    RANGE_ERROR:</dt><dd><dl><dt>
      May be raised from the following <tt><!-- ' --><a class="type" href="#types_integer">integer</a><!-- ' --></tt> operations:</dt><dd>
          parse, str, rand.</dd><dt>
      May be raised from the following <tt><!-- ' --><a class="type" href="#types_bigInteger">bigInteger</a><!-- ' --></tt> operations:</dt><dd>
          parse, str, rand, ord, bitLength.</dd><dt>
      May be raised from the following <tt><!-- ' --><a class="type" href="#types_float">float</a><!-- ' --></tt> operations:</dt><dd>
          parse, rand.</dd><dt>
      May be raised from the following <tt><!-- ' --><a class="type" href="#types_char">char</a><!-- ' --></tt> operations:</dt><dd>
          chr, rand.</dd><dt>
      May be raised from the following <tt><!-- ' --><a class="type" href="#types_string">string</a><!-- ' --></tt> operations:</dt><dd>
          [, @:=, <span class="op">mult</span>, pos, rpos.</dd><dt>
      May be raised from the following <tt><!-- ' --><a class="type" href="#types_set">bitset</a><!-- ' --></tt> operations:</dt><dd>
          conv, parse, min, max, rand.</dd><dt>
      May be raised from the following <tt><!-- ' --><a class="type" href="#types_array">array</a><!-- ' --></tt> operations:</dt><dd>
          [, times, remove, rand.</dd><dt>
      May be raised from the following <tt><!-- ' --><a class="type" href="#types_hash">hash</a><!-- ' --></tt> operations:</dt><dd>
          [.</dd><dt>
      May be raised from the following <tt><!-- ' --><a class="type" href="#types_file">file</a><!-- ' --></tt> operations:</dt><dd>
          open, write, gets, length, seek, tell.</dd><dt></dl></dd><dt>
    FILE_ERROR:</dt><dd><dl><dt>
      May be raised by the following functions:</dt><dd>
          fileSize, bigFileSize, fileType, fileTypeSL, fileMode, setFileMode,
          readDir, remove, removeAnyFile, rename, cloneFile, copyFile,
          readlink, symlink, hasNext, seek, tell, bigTell, setbuf, write,
          inetSocketAddress, openInetSocket, openInetListener</dd><dt></dl></dd><dt>
    ILLEGAL_ACTION:</dt><dd>
      May be raised by the interpreter kernel when a primitive action
      does not point to any legal action. This check is only done when
      the hi interpreter is compiled with <tt>'#define WITH_ACTION_CHECK'</tt>.
      The ILLEGAL_ACTION exception is also raised when the primitive
      action ACT_ILLEGAL is executed.</dd><dt>
</dl><p>
  A program can raise an exception with the <tt><!-- ' --><span class="keywd">raise</span><!-- ' --></tt> statement. For example:
</p><pre>
    <span class="keywd">raise</span> RANGE_ERROR;
</pre><p></p>

<a name="errors_Handlers"><h3>14.3 Handlers</h3></a>
<p>
  To catch an EXCEPTION the following handler construct can be used:
</p><pre>
    <span class="keywd">block</span>
      number := 1 div 0;
    <span class="keywd">exception</span>
      <span class="keywd">catch</span> NUMERIC_ERROR:
        number := 1;
    <span class="keywd">end block</span>;
</pre><p>
  It is also possible to catch several EXCEPTIONS:
</p><pre>
    <span class="keywd">block</span>
      doSomething(someValue);
    <span class="keywd">exception</span>
      <span class="keywd">catch</span> MEMORY_ERROR:  writeln(<span class="stri">"MEMORY_ERROR"</span>);
      <span class="keywd">catch</span> NUMERIC_ERROR: writeln(<span class="stri">"NUMERIC_ERROR"</span>);
    <span class="keywd">end block</span>;
</pre><p></p>

<a name="errors_Stack_trace"><h3>14.4 Stack trace</h3></a>
<p>
  When an EXCEPTION is not caught the program is terminated and the hi
  interpreter writes a stack trace:
</p><pre>
    *** Uncaught EXCEPTION NUMERIC_ERROR raised with
    {integer: &lt;SYMBOLOBJECT> *NULL_ENTITY_OBJECT* div fuel_max }

    Stack:
    in {(val integer param) div (val integer param) } at integer.s7i(95)
    in init_display at lander.sd7(840)
    in setup at lander.sd7(909)
    in main at lander.sd7(1541)
</pre><p>
  The stack trace shows that a <tt>'NUMERIC_ERROR'</tt> was raised by the <tt><!-- ' -->div<!-- ' --></tt> operation.
  This operation is defined in line 95 of <tt><!-- " -->integer.s7i<!-- " --></tt>. More interesting is that
  <tt><!-- ' -->div<!-- ' --></tt> was called from the function <tt>'init_display'</tt> in
  line 840 of <tt><!-- " -->lander.sd7<!-- " --></tt>. A <tt>'NUMERIC_ERROR'</tt> with <tt><!-- ' -->div<!-- ' --></tt> is
  probably caused by a zero division. A short examination in <tt><!-- " -->lander.sd7<!-- " --></tt> shows that an assignment to
  <tt>'fuel_max'</tt> was commented out to show how stack traces work.
</p><p>
  A compiled program creates a much shorter crash message:
</p><pre>
    *** Uncaught EXCEPTION NUMERIC_ERROR raised at tmp_lander.c(764)
</pre><p>
  To get more information there are two possibilities:
</p><ul>
    <li><!--  -  -->Start the program in the interpreter instead.</li>
    <li><!--  -  -->Compile the program with the options <tt><b>-g</b></tt> <tt><b>-e</b></tt> and start it
       from a debugger.</li>
</ul><p>
  The option <tt><b>-g</b></tt> instructs the C compiler to include
  debugging information. This way a debugger like gdb can
  run the program and provide information. The option <tt><b>-e</b></tt>
  tells the compiler to generate code which sends a signal
  when an uncaught exception occurs. This option allows
  debuggers to handle uncaught Seed7 exceptions. Note that
  <tt><b>-e</b></tt> sends the signal SIGFPE. This is done even when the
  exception is not related to floating point operations.
</p><pre>
    ./hi comp -g -e lander
    gdb ./lander
</pre><p>
  Then the debugger should be able to run the program and to
  write a backtrace when a crash occurs:
</p><pre>
    (gdb) run
    Starting program: /home/tm/seed7_5/prg/lander 

    Program received signal SIGFPE, Arithmetic exception.
    0x08068518 in o_2541_init_display () at lander.sd7:840
    840	    fuel_gauge := 40 * rocket.fuel div fuel_max;
    (gdb) bt
    #0  0x08068518 in o_2541_init_display () at lander.sd7:840
    #1  0x08068c21 in o_2546_setup () at lander.sd7:909
    #2  0x0806c304 in main (argc=1, argv=0xbffff324) at lander.sd7:1541
</pre><p>
  Sometimes it is helpful to debug the generated C program instead of
  the Seed7 source. The option <tt><b>-g-debug_c</b></tt> creates debug
  information, which refers to the C program generated by the Seed7 compiler:
</p><pre>
    ./hi comp -g-debug_c -e lander
    gdb ./lander
</pre><p>
  Now the debugger refers to the temporary file <tt><!-- " --><span class="stri">tmp_lander.c</span><!-- " --></tt>:  
</p><pre>
    (gdb) run
    Starting program: /home/tm/seed7_5/prg/lander 

    Program received signal SIGFPE, Arithmetic exception.
    0x08068518 in o_2541_init_display () at tmp_lander.c:19727
    19727	o_2428_fuel_gauge=((40) * (((structtype)(o_2338_rocket))->stru[10].value.intvalue/*->o_2336_fuel*/)) / (o_2431_fuel_max);
    (gdb) bt
    #0  0x08068518 in o_2541_init_display () at tmp_lander.c:19727
    #1  0x08068c21 in o_2546_setup () at tmp_lander.c:19864
    #2  0x0806c304 in main (argc=1, argv=0xbffff324) at tmp_lander.c:21188
</pre><p>
  Some Seed7 exceptions do not send signals. This hinders the debugger
  to recognize that an uncaught exception occurred. The compiler option <tt><b>-e</b></tt>
  can help in this situation. It instructs the compiler to generate
  code which sends a signal when an uncaught exception occurs. This
  allows the debugger to show a backtrace for uncaught Seed7 exceptions.
</p>

<a name="errors_Other_errors_and_warnings"><h3>14.5 Other errors and warnings</h3></a>
<p><dl><dt>
  No more memory. Program terminated.</dt><dd>
    This error message is displayed after the compile time error 1
    (Out of heap space) . The file name and line number of the
    analyzer source code where this happens is displayed together
    with internal heap information. If this happens the -m option
    can be used to make more memory available. Perhaps this slows
    the compilation phase down.</dd><dt>

  System declaration for main missing</dt><dd>
    Each program must contain a system declaration that describes
    which procedure to start as first one.</dd><dt>

  EXCEPTION %s raised with</dt><dd>
    If your trace level specifies exception tracing exceptions
    and handlers are displayed with this messages and the user
    must type the ENTER-key to accept.</dd><dt>

  ACTION $%s REQUIRES %s NOT %s</dt><dd>
    This error can happen when an action tries to do something
    with the wrong primitive value. For example adding an
    integer to a string with INT_ADD. Since the analyze phase
    checks for the right types this error can only happen when the
    basic libraries are defined wrong.</dd><dt>

  ACTION $%s REQUIRES VARIABLE %s NOT %s</dt><dd>
    This error can happen with actions which assign a value to
    a constant. Since the analyze phase checks for variable objects
    this error can only happen when the basic libraries are defined
    wrong. Principally this error is possible with the following
    operations: :=, incr, decr, wrd_rd, lin_rd</dd><dt>
</dl><p></p>
</body>
</html>
