<!-- (********************************************************************)
(*                                                                  *)
(*  manual.txt                                                      *)
(*                                                                  *)
(*  Copyright (C) 1989 - 2005  Thomas Mertes                        *)
(*  All rights reserved.                                            *)
(*                                                                  *)
(*  Documentation:  --><p></p><hr><p align="center"><big><b>Manual for the Seed7 programming language</b></big></p><hr><!--         *)
(*                                                                  *)
(*  This file is distributed "AS IS" in the hope that it will be    *)
(*  useful, but WITHOUT ANY WARRANTY; without even the implied      *)
(*  warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.*)
(*                                                                  *)
(********************************************************************) -->


<p></p>
<big><b>CONTENTS</b></big>
<!-- ======== -->
<p><ol>
<li><!--   1.     --><a href="#INTRODUCTION"><big><b>INTRODUCTION</b></big></a></li><ol>
<li><!--   1.1      --><a href="#What_is_Seed7"><b>What is Seed7?</b></a></li>
<li><!--   1.2      --><a href="#Why_a_new_programming_language"><b>Why a new programming language?</b></a></li>
<li><!--   1.3      --><a href="#Features_of_Seed7"><b>Features of Seed7</b></a></li>
<li><!--   1.4      --><a href="#How_to_read_the_manual"><b>How to read the manual</b></a></li></ol>
<li><!--   2.     --><a href="#TUTORIAL"><big><b>TUTORIAL</b></big></a></li><ol>
<li><!--   2.1      --><a href="#Hello_world"><b>Hello world</b></a></li>
<li><!--   2.2      --><a href="#Local_declarations_and_expressions"><b>Local declarations and expressions</b></a></li>
<li><!--   2.3      --><a href="#For_loop_and_float_expressions"><b>For loop and float expressions</b></a></li>
<li><!--   2.4      --><a href="#Parameters"><b>Parameters</b></a></li>
<li><!--   2.5      --><a href="#Declare_a_statement"><b>Declare a statement</b></a></li>
<li><!--   2.6      --><a href="#Template_declaring_a_statement"><b>Template declaring a statement</b></a></li></ol>
<li><!--   3.     --><a href="#SYNTAX"><big><b>SYNTAX</b></big></a></li>
<li><!--   4.     --><a href="#PREDEFINED_STATEMENTS"><big><b>PREDEFINED STATEMENTS</b></big></a></li><ol>
<li><!--   4.1      --><a href="#Assignment"><b>Assignment</b></a></li>
<li><!--   4.2      --><a href="#while-statement"><b>while-statement</b></a></li>
<li><!--   4.3      --><a href="#repeat-statement"><b>repeat-statement</b></a></li>
<li><!--   4.4      --><a href="#for-statement"><b>for-statement</b></a></li>
<li><!--   4.5      --><a href="#for-iterator-statement"><b>for-iterator-statement</b></a></li>
<li><!--   4.6      --><a href="#if-statement"><b>if-statement</b></a></li>
<li><!--   4.7      --><a href="#case-statement"><b>case-statement</b></a></li></ol>
<li><!--   5.     --><a href="#PREDEFINED_TYPES"><big><b>PREDEFINED TYPES</b></big></a></li><ol>
<li><!--   5.1      --><a href="#boolean"><b>boolean</b></a></li>
<li><!--   5.2      --><a href="#integer"><b>integer</b></a></li>
<li><!--   5.3      --><a href="#rational"><b>rational</b></a></li>
<li><!--   5.4      --><a href="#float"><b>float</b></a></li>
<li><!--   5.5      --><a href="#char"><b>char</b></a></li>
<li><!--   5.6      --><a href="#string"><b>string</b></a></li>
<li><!--   5.7      --><a href="#array"><b>array</b></a></li>
<li><!--   5.8      --><a href="#hash"><b>hash</b></a></li>
<li><!--   5.9      --><a href="#set"><b>set</b></a></li>
<li><!--   5.10     --><a href="#struct"><b>struct</b></a></li>
<li><!--   5.11     --><a href="#reference"><b>reference</b></a></li>
<li><!--   5.12     --><a href="#ref_list"><b>ref_list</b></a></li>
<li><!--   5.13     --><a href="#ptr"><b>ptr</b></a></li>
<li><!--   5.14     --><a href="#ENUMERATION"><b>ENUMERATION</b></a></li>
<li><!--   5.15     --><a href="#color"><b>color</b></a></li>
<li><!--   5.16     --><a href="#time"><b>time</b></a></li>
<li><!--   5.17     --><a href="#duration"><b>duration</b></a></li>
<li><!--   5.18     --><a href="#file"><b>file</b></a></li>
<li><!--   5.19     --><a href="#text"><b>text</b></a></li>
<li><!--   5.20     --><a href="#func"><b>func</b></a></li>
<li><!--   5.21     --><a href="#varfunc"><b>varfunc</b></a></li>
<li><!--   5.22     --><a href="#void"><b>void</b></a></li>
<li><!--   5.23     --><a href="#proc"><b>proc</b></a></li>
<li><!--   5.24     --><a href="#type"><b>type</b></a></li>
<li><!--   5.25     --><a href="#object"><b>object</b></a></li>
<li><!--   5.26     --><a href="#expr"><b>expr</b></a></li></ol>
<li><!--   6.     --><a href="#PARAMETERS"><big><b>PARAMETERS</b></big></a></li><ol>
<li><!--   6.1      --><a href="#val_parameter"><b>'val' parameter</b></a></li>
<li><!--   6.2      --><a href="#ref_parameter"><b>'ref' parameter</b></a></li>
<li><!--   6.3      --><a href="#in_parameter"><b>'in' parameter</b></a></li>
<li><!--   6.4      --><a href="#in_var_parameter"><b>'in var' parameter</b></a></li>
<li><!--   6.5      --><a href="#inout_parameter"><b>'inout' parameter</b></a></li>
<li><!--   6.6      --><a href="#Symbol_parameter"><b>Symbol parameter</b></a></li>
<li><!--   6.7      --><a href="#attr_parameter"><b>'attr' parameter</b></a></li></ol>
<li><!--   7.     --><a href="#THE_FILE_SYSTEM"><big><b>THE FILE SYSTEM</b></big></a></li><ol>
<li><!--   7.1      --><a href="#Conversion_to_strings_and_back"><b>Conversion to strings and back</b></a></li>
<li><!--   7.2      --><a href="#Basic_input_and_output_operations"><b>Basic input and output operations</b></a></li>
<li><!--   7.3      --><a href="#Input_and_output_with_conversion"><b>Input and output with conversion</b></a></li>
<li><!--   7.4      --><a href="#Simple_read_and_write_statements"><b>Simple read and write statements</b></a></li>
<li><!--   7.5      --><a href="#Standard_input_and_output_files"><b>Standard input and output files</b></a></li>
<li><!--   7.6      --><a href="#Access_to_operating_system_files"><b>Access to operating system files</b></a></li>
<li><!--   7.7      --><a href="#User_defined_file_types"><b>User defined file types</b></a></li></ol>
<li><!--   8.     --><a href="#DECLARATIONS"><big><b>DECLARATIONS</b></big></a></li><ol>
<li><!--   8.1      --><a href="#System_declarations"><b>System declarations</b></a></li>
<li><!--   8.2      --><a href="#Syntax_declarations"><b>Syntax declarations</b></a></li>
<li><!--   8.3      --><a href="#Semantic_declarations"><b>Semantic declarations</b></a></li></ol>
<li><!--   9.     --><a href="#TOKENS"><big><b>TOKENS</b></big></a></li><ol>
<li><!--   9.1      --><a href="#White_space"><b>White space</b></a></li><ol>
<li><!--   9.1.1      --><a href="#Spaces"><b><i>Spaces</i></b></a></li>
<li><!--   9.1.2      --><a href="#Comments"><b><i>Comments</i></b></a></li>
<li><!--   9.1.3      --><a href="#Line comments"><b><i>Line comments</i></b></a></li></ol>
<li><!--   9.2      --><a href="#Identifiers"><b>Identifiers</b></a></li><ol>
<li><!--   9.2.1      --><a href="#Name identifiers"><b><i>Name identifiers</i></b></a></li>
<li><!--   9.2.2      --><a href="#Special identifiers"><b><i>Special identifiers</i></b></a></li>
<li><!--   9.2.3      --><a href="#Parentheses"><b><i>Parentheses</i></b></a></li></ol>
<li><!--   9.3      --><a href="#Literals"><b>Literals</b></a></li><ol>
<li><!--   9.3.1      --><a href="#Integer literals"><b><i>Integer literals</i></b></a></li>
<li><!--   9.3.2      --><a href="#String literals"><b><i>String literals</i></b></a></li>
<li><!--   9.3.3      --><a href="#Character literals"><b><i>Character literals</i></b></a></li></ol></ol>
<li><!--   10.    --><a href="#EXPRESSIONS"><big><b>EXPRESSIONS</b></big></a></li><ol>
<li><!--   10.1     --><a href="#EXPRESSION_Parentheses"><b>Parentheses</b></a></li>
<li><!--   10.2     --><a href="#Call_expressions"><b>Call expressions</b></a></li>
<li><!--   10.3     --><a href="#Dot_expressions"><b>Dot expressions</b></a></li></ol>
<li><!--   11.    --><a href="#OPERATING_SYSTEM_ACCESS"><big><b>OPERATING SYSTEM ACCESS</b></big></a></li><ol>
<li><!--   11.1     --><a href="#Directory_access"><b>Directory access</b></a></li>
<li><!--   11.2     --><a href="#Other_directory_operations"><b>Other directory operations</b></a></li>
<li><!--   11.3     --><a href="#File_operations"><b>File operations</b></a></li></ol>
<li><!--   12.    --><a href="#PRIMITIVE_ACTIONS"><big><b>PRIMITIVE ACTIONS</b></big></a></li>
<li><!--   13.    --><a href="#ERRORS"><big><b>ERRORS</b></big></a></li><ol>
<li><!--   13.1     --><a href="#Compile_time_errors"><b>Compile time errors</b></a></li>
<li><!--   13.2     --><a href="#Exceptions"><b>Exceptions</b></a></li>
<li><!--   13.3     --><a href="#Handlers"><b>Handlers</b></a></li>
<li><!--   13.4     --><a href="#Stack_trace"><b>Stack trace</b></a></li>
<li><!--   13.5     --><a href="#Other_errors_and_warnings"><b>Other errors and warnings</b></a></li></ol>
</ol></p><hr>

<p></p>
<a name="INTRODUCTION"><big><b>1. INTRODUCTION</b></big></a>
<!-- =============== -->
<p></p>

<a name="What_is_Seed7"><b>1.1 What is Seed7?</b></a>
<p>
    Seed7 is a general-purpose programming language. It is a
  higher level language compared to Ada, C++ and Java. In Seed7
  new statements and operators can be declared easily. Functions
  with type results and type parameters are more elegant than
  the usual template or generics concept. Object orientation is
  used when it brings advantages and not in places when other
  solutions are more obvious. Although Seed7 contains several
  concepts of other programming languages it is generally not
  considered as a direct descendant of any other programming
  language.
</p><p>
  The programmer should concentrate on problem solving instead
  of administration or the fulfilment of some paradigm.
  Therefore Seed7 allows programming in the "problem space"
  instead of bending everything into a small syntactic or
  semantic concept. The predefined constructs of Seed7 are
  defined in a way to be easy readable and understandable. This
  practical approach can be subsumed as:
</p><pre>
    "Programming should be fun"
</pre><p>
  Seed7 programs can be interpreted or compiled. Therefore Seed7
  can be used for scripting and for "real" programs.
</p>

<a name="Why_a_new_programming_language"><b>1.2 Why a new programming language?</b></a>
<p>
    Conventional programming languages have a firmly given
  syntactic structure. The form of the statements, operators,
  declarations, procedures and functions is fixed in the
  language definition and cannot be changed by the user. It is
  only possible to declare new procedures, functions and in
  some languages also new operators. However the syntax of
  procedure-, function and operator calls cannot be changed.
  Although this rigid pattern is favorable for the portability
  of programs, the improvement of a programming language is
  almost impossible. Extensions are however desirable, in order
  to repair existing weaknesses, to introduce new more obvious
  constructs and to adapt the programming language to different
  application areas. E.g.: In the area of mathematics the
  readability of a program can be substantially increased by
  the introduction of matrix and vector operators. After
  declaring an inner product and an outer (or cross) product for
  vectors it is possible to write e.g.
</p><pre>
    v1: = v2 <font color=blue>cross</font> v3;   write(v1 * v2);
</pre><p>
  Programs searching some data can become more understandable
  by using a search statement instead of a search procedure. A
  call of a new declared search statement could be:
</p><pre>
    <font color=blue>search</font> person1.age = person2.age <font color=blue>and</font>
       person1.mother = person2.mother <font color=blue>and</font>
       person1 &lt;> person2
    <font color=blue>when found</font>
       write(<font color=maroon>"Twins: "</font> <& person1.name <& <font color=maroon>" and "</font> <& person2.name);
    <font color=blue>else</font>
       write(<font color=maroon>"No twins found."</font>);
    <font color=blue>end search</font>;
</pre><p>
  Such extensions make understanding, changing and debugging of
  a program easier.
</p>

<a name="Features_of_Seed7"><b>1.3 Features of Seed7</b></a>
<p>
  Seed7 has the following features
</p><ul>
    <li><!-- -  -->User defined statements and operators.</li>

    <li><!-- -  -->Types are first class objects and therefore templates and
      generics can be defined easily without special syntax.</li>

    <li><!-- -  -->Predefined constructs like arrays or for-loops are
      declared in the language itself.</li>

    <li><!-- -  -->Object orientation is used where it brings advantages and
      not in places where other solutions are more obvious.</li>

    <li><!-- -  -->Strong typing</li>

    <li><!-- -  -->exception handling</li>

    <li><!-- -  -->overloading of procedures/functions/operators/statements</li>

    <li><!-- -  -->Various predefined types like resizable arrays, hashes,
      bitsets, structs, etc.</li>
</ul><p>
  But a new programming language differs not only from existing
  ones by new features. The real advantage comes from omitting
  features which are outdated.
</p><p>
  Several concepts in use by other languages are not present
</p><ul>
    <li><!-- -  -->There is no goto statement.
      Hidden goto's like break- and continue-statements are
      also omitted.</li>

    <li><!-- -  -->There is no return statement. Instead a result variable
      can be declared to which the result of a function can
      be assigned.</li>

    <li><!-- -  -->There are no automatic type conversions.
      When a subprogram should be used for different types
      it must be overloaded.</li>

    <li><!-- -  -->There are no variable length parameter lists.
      Instead it is possible to use arrays as parameters.</li>

    <li><!-- -  -->There are no default parameters.
      But it is easy to define two subprograms: One with and
      one without an additional parameter.</li>

    <li><!-- -  -->There is no special "parameter" called "self" or "this".
      In a procedure the receiving object is declared as
      formal parameter with a user-defined name.</li>

    <li><!-- -  -->There is no macro feature since this mechanism is too
      similar to the subprogram feature. Instead subprograms
      can be used in a more flexible way than in other languages.</li>

    <li><!-- -  -->There are no reserved words.</li>

    <li><!-- -  -->There is no conceptual distinction between functions,
      operators, procedures and statements.</li>

    <li><!-- -  -->The procedure calling mechanism is not based on a concept
      with an object-message pair (An object receives a message).
      Instead a match is done over a list of objects. This more
      general (and powerful) mechanism is called multimatch and
      it includes the simple object-message mechanism as special
      case.</li>
</ul><p>
  There are several concepts which are also used by other languages:
</p><ul>
    <li><!-- -  -->Comments start with <font color=green>(* and end with *)</font> and may be nested.</li>

    <li><!-- -  -->Comments start with <font color=green># and are terminated with the end of the line.</font></li>
</ul><p>
  There are several concepts which are new
</p><ul>
    <li><!-- -  -->Variables and constants must be initialized when they are
      declared.</li>

    <li><!-- -  -->Every expression has exactly one type.
      That means that overloaded functions are resolved with
      their actual parameters and not with the context of their
      call. (This is different to the overloading mechanism
      used by ADA)</li>

    <li><!-- -  -->With a syntax declaration new operators and statements
      can be defined.</li>

    <li><!-- -  -->Not only the predefined operator symbols can be
      overloaded. Additionally it is possible to invent
      completely new operator symbols.</li>
</ul><p>
  Several restrictions of other languages are released
</p><ul>
    <li><!-- -  -->There is no limitation in the length of an identifier and
      all characters of an identifier are significant.</li>

    <li><!-- -  -->Statements and parentheses can be nested without limitation
      in depth.</li>

    <li><!-- -  -->The number of parameters and local variables is not
      limited.</li>

    <li><!-- -  -->Strings can contain any characters (also the NUL character)
      This allows holding binary information in strings.</li>

    <li><!-- -  -->Although strings are not NUL terminated they have
      no size limitation. (Except there is no more memory)</li>

    <li><!-- -  -->String literals can have any length.</li>

    <li><!-- -  -->There is no limitation in the length of a source line.</li>

    <li><!-- -  -->There is no level limitation for nesting includes.</li>
</ul>

<a name="How_to_read_the_manual"><b>1.4 How to read the manual</b></a>
<p>
    You can have several views of the Seed7 programming language.
  Dependent on the view you can concentrate on specific
  chapters.
</p><p>
  For example Seed7 can be used as conventional programming language.
  In this case you are interested in how the statements look like,
  which types are available, which operators are predefined, how
  to declare variables and procedures and other things like these.
  The statements and the predefined types are described in chapter
  4 and 5 and the declaration mechanism is described in chapter 8.
</p><p>
  But Seed7 is also an object oriented programming language.
  In this case you are interested in how to define new classes,
  how instances are generated, the method calling mechanism,
  the predefined class hierarchy and other things like these.
  A good example for classes and instances are the Files which are
  described in chapter 7.
</p><p>
  And Seed7 is also an extensible programming language.
  In this case you are interested in how to declare new
  statements, how to define new operators, assigning a priority
  and an associativity to operators and other things like these.
  How syntax declarations are done is described in chapter 3
  and chapter 4 contains various examples of syntax and semantic
  declarations. The primary parts of the syntax are described in
  the chapters 9 and 10.
</p><hr>

<p></p>
<a name="TUTORIAL"><big><b>2. TUTORIAL</b></big></a>
<!-- =========== -->
<p>
    We begin with a tutorial introduction to Seed7. In
  this chapter we want to show the principal ideas that
  make Seed7 work. At this point, we are not trying to be
  complete or precise. We just want to give a clear view
  to the primary philosophic ideas of Seed7. When the
  primary ideas are understood a complete and precise
  reference can be learned easier.
</p>

<a name="Hello_world"><b>2.1 Hello world</b></a>
<p>
    A Seed7 program consists of a sequence of declarations.
  With each declaration a type and a name is attached to the
  new object. In addition every new declared object gets an
  initial value. 
</p><p>
  Here is an example of an object declaration:
</p><pre>
    <font color=blue>const</font> <font color=red>proc</font>: main <font color=blue>is func</font>
      <font color=blue>begin</font>
        writeln(<font color=maroon>"hello world"</font>);
      <font color=blue>end func</font>;
</pre><p>
  The object <tt>'main'</tt> is declared as constant and the object
  <tt>'<font color=red>proc</font>'</tt> is the type of <tt>'main'</tt>. Declaring <tt>'main'</tt> with the type
  <tt>'<font color=red>proc</font>'</tt> makes a procedure out of it. The object <tt>'main'</tt> gets a
</p><pre>
    <font color=blue>func</font> ... <font color=blue>end func</font>
</pre><p>
  construct as value. The <tt>'<font color=blue>func</font>'</tt> construct is similar to
  <tt><font color=blue>begin</font> ... <font color=blue>end</font></tt> in PASCAL and <tt>{ ... }</tt> in C. Inside the <tt>'<font color=blue>func</font>'</tt> is a
  <tt>'writeln'</tt> statement with the <tt><font color=maroon>"hello world"</font></tt> string. The
  <tt>'writeln'</tt> statement is used to write a string followed by a
  newline character. To use this declaration as the standard
  hello world example program, we have to add a few things:
</p><pre>
    $ <font color=blue>include</font> <font color=maroon>"seed7_05.s7i"</font>;

    <font color=blue>const</font> <font color=red>proc</font>: main <font color=blue>is func</font>
      <font color=blue>begin</font>
        writeln(<font color=maroon>"hello world"</font>);
      <font color=blue>end func</font>;
</pre><p>
  The first line includes all definitions of the standard
  library. In contrast to other standard libraries the seed7_05.s7i
  library contains not only function declarations but also
  declarations of statements and operators.
  Additionally the seed7_05.s7i library defines the '<tt>main</tt>' function
  as entry point for a Seed7 program.
</p><p>
  If you write this program in a file called hello.sd7
  and execute the command
</p><pre>
    hi hello
</pre><p>
  The Seed7 interpreter writes something like
</p><pre>
    HI INTERPRETER Version 4.5.79  Copyright (c) 1990-2005 Thomas Mertes
       245 syntax.s7i
      2635 seed7_05.s7i
        33 hello.sd7
      2913 lines total
     29130 lines per second
    1184171 bytes
    hello world
</pre><p>
  You get information about the Seed7 interpreter, a list of
  libraries included and how many lines they contain, the
  number of bytes used by the hello.sd7 program and finally
  the output of the hello.sd7 program itself:
</p><pre>
    hello world
</pre><p></p>

<a name="Local_declarations_and_expressions"><b>2.2 Local declarations and expressions</b></a>
<p>
    To write a Fahrenheit to Celsius conversion table we use
  the following program:
</p><pre>
    <font color=green>(* Print a Fahrenheit-Celsius table
       for Fahrenheit values between 0 and 300 *)</font>

    $ <font color=blue>include</font> <font color=maroon>"seed7_05.s7i"</font>;

    <font color=blue>const</font> <font color=red>proc</font>: main <font color=blue>is func</font>
      <font color=blue>local</font>
        <font color=blue>const</font> <font color=red>integer</font>: lower <font color=blue>is</font> 0;
        <font color=blue>const</font> <font color=red>integer</font>: upper <font color=blue>is</font> 300;
        <font color=blue>const</font> <font color=red>integer</font>: increment <font color=blue>is</font> 20;
        <font color=blue>var</font> <font color=red>integer</font>: fahr <font color=blue>is</font> 0;
        <font color=blue>var</font> <font color=red>integer</font>: celsius <font color=blue>is</font> 0;
      <font color=blue>begin</font>
        fahr := lower;
        <font color=blue>while</font> fahr &lt;= upper <font color=blue>do</font>
          celsius := 5 * (fahr - 32) <font color=blue>div</font> 9;
          write(fahr);
          write(<font color=maroon>" "</font>);
          writeln(celsius);
          fahr := fahr + increment;
        <font color=blue>end while</font>;
      <font color=blue>end func</font>;
</pre><p>
  Everything between <font color=green>(* and *)</font> is a comment which is ignored.
  This program contains local constants and variables of the
  type <tt>'<font color=red>integer</font>'</tt>. The constants and variables must be
  initialized when they are declared. This program contains
  also an assignment, a while loop and the expression to
  compute the <tt>'celsius'</tt> value. Note that the statements inside
  the <tt>'<font color=blue>while</font>'</tt> loop are between <tt>'<font color=blue>do</font>'</tt> and <tt>'<font color=blue>end while</font>'</tt>. The
  expression to compute the <tt>'celsius'</tt> value uses an integer
  division (<tt>'<font color=blue>div</font>'</tt>). The <tt>'write'</tt> statement can be used to write
  strings and integers without a newline character. The output
  produced by this program is
</p><pre>
    0 -17
    20 -6
    40 4
    60 15
    80 26
    100 37
    120 48
    140 60
    160 71
    180 82
    200 93
    220 104
    240 115
    260 126
    280 137
    300 148
</pre><p></p>

<a name="For_loop_and_float_expressions"><b>2.3 For loop and float expressions</b></a>
<p>
    An improved version of the program to write the Fahrenheit
  to Celsius conversion table is:
</p><pre>
    $ <font color=blue>include</font> <font color=maroon>"seed7_05.s7i"</font>;
      <font color=blue>include</font> <font color=maroon>"float.s7i"</font>;

    <font color=blue>const</font> <font color=red>proc</font>: main <font color=blue>is func</font>
      <font color=blue>local</font>
        <font color=blue>const</font> <font color=red>integer</font>: lower <font color=blue>is</font> 0;
        <font color=blue>const</font> <font color=red>integer</font>: upper <font color=blue>is</font> 300;
        <font color=blue>const</font> <font color=red>integer</font>: increment <font color=blue>is</font> 20;
        <font color=blue>var</font> <font color=red>integer</font>: fahr <font color=blue>is</font> 0;
        <font color=blue>var</font> <font color=red>float</font>: celsius <font color=blue>is</font> 0.0;
      <font color=blue>begin</font>
        <font color=blue>for</font> fahr <font color=blue>range</font> lower <font color=blue>to</font> upper <font color=blue>step</font> increment <font color=blue>do</font>
          celsius := flt(5 * (fahr - 32)) / 9.0;
          writeln(fahr <font color=blue>lpad</font> 3 <& <font color=maroon>" "</font> <& celsius <font color=blue>digits</font> 2 <font color=blue>lpad</font> 6);
        <font color=blue>end for</font>;
      <font color=blue>end func</font>;
</pre><p>
  To use the type <tt>'<font color=red>float</font>'</tt> it is necessary to include
  <tt><font color=maroon>"float.s7i"</font></tt>. The <tt>'<font color=red>float</font>'</tt> variable <tt>'celsius'</tt> must be
  initialized with 0.0 (instead of 0). The <tt>'for'</tt> loop is
  written as:
</p><pre>
    <font color=blue>for</font> ... <font color=blue>range</font> ... <font color=blue>to </font>... <font color=blue>step</font> ... <font color=blue>do</font>
      ...
    <font color=blue>end for</font>
</pre><p>
  To specify a lower and an upper limit together with a step
  value. For a step value of 1 the for loop it is written as:
</p><pre>
    <font color=blue>for</font> ... <font color=blue>range</font> ... <font color=blue>to</font> ... <font color=blue>do</font>
      ...
    <font color=blue>end for</font>
</pre><p>
  And for a step value of -1 it can be written as:
</p><pre>
    <font color=blue>for</font> ... <font color=blue>range</font> ... <font color=blue>downto</font> ... <font color=blue>do</font>
      ...
    <font color=blue>end for</font>
</pre><p>
  Since Seed7 is strong typed <tt>'<font color=red>integer</font>'</tt> and <tt>'<font color=red>float</font>'</tt> values
  cannot be mixed in expressions. Therefore the <tt>'<font color=red>integer</font>'</tt>
  expression <tt>'5 * (fahr - 32)'</tt> is converted to <tt>'<font color=red>float</font>'</tt> with
  the <tt>'flt'</tt> function. For the same reason a <tt>'/'</tt> division and
  the value <tt>'9.0'</tt> must be used. The <tt>'<&'</tt> operator is used to
  concatenate elements before writing. If the right operand of
  the <tt>'<&'</tt> operator has not the type <tt>'<font color=red>string</font>'</tt> it is converted to
  a <tt>'<font color=red>string</font>'</tt> using the <tt>'str'</tt> function. The <tt>'<font color=blue>lpad</font>'</tt> operator
  converts the value of <tt>'fahr'</tt> to a string and pads spaces to
  the left until the string has length 3. The <tt>'<font color=blue>digits</font>'</tt> operator
  converts the value of <tt>'celsius'</tt> to a string with 2 decimal
  digits. The resulting string is padded left up to a length
  of 6.
</p>

<a name="Parameters"><b>2.4 Parameters</b></a>
<p>
    Most parameters are not changed inside a function. To
  express this explicit Seed7 uses the <tt>'<font color=blue>in</font>'</tt> parameter as in the
  following examples:
</p><pre>
    <font color=blue>const</font> <font color=red>func integer</font>: negate (<font color=blue>in</font> <font color=red>integer</font>: num1) <font color=blue>is</font>
      <font color=blue>return</font> -num1;

    <font color=blue>const</font> <font color=red>func integer</font>: fib (<font color=blue>in</font> <font color=red>integer</font>: num1) <font color=blue>is func</font>
      <font color=blue>result</font>
        <font color=blue>var</font> <font color=red>integer</font>: result <font color=blue>is</font> 1;
      <font color=blue>begin</font>
        <font color=blue>if</font> num1 &lt;> 1 <font color=blue>and</font> num1 &lt;> 2 <font color=blue>then</font>
          result := fib(pred(num1)) + fib(num1 - 2);
        <font color=blue>end if</font>;
      <font color=blue>end func</font>;
</pre><p>
  In both cases the formal parameter <tt>'num1'</tt> is used in the
  function but no assignment is done to <tt>'num1'</tt>. Inside the
  functions the parameter <tt>'num1'</tt> behaves like a constant.
</p><p>
  When a function should change the value of the actual
  parameter we can use the <tt>'<font color=blue>inout</font>'</tt> parameter as in the
  following example:
</p><pre>
    <font color=blue>const</font> <font color=red>proc</font>: reset (<font color=blue>inout</font> <font color=red>integer</font>: num2) <font color=blue>is func</font>
      <font color=blue>begin</font>
        num2 := 0;
      <font color=blue>end func</font>;
</pre><p>
  If you call this function with
</p><pre>
    reset(number)
</pre><p>
  the variable <tt>'number'</tt> has the value 0 afterwards. By the way,
  writing <tt>'<font color=blue>in</font>'</tt> instead of <tt>'<font color=blue>inout</font>'</tt> would have been illegal in
  the example above.
</p><p>
  Sometimes an <tt>'<font color=blue>in</font>'</tt> parameter is needed, but you need to change
  the formal parameter in the function without affecting the
  actual parameter. In this case we use the <tt>'<font color=blue>in var</font>'</tt> parameter:
</p><pre>
    <font color=blue>const</font> <font color=red>func string</font>: oct_str (<font color=blue>in var</font> <font color=red>integer</font>: number) <font color=blue>is func</font>
      <font color=blue>result</font>
        <font color=blue>var</font> <font color=red>string</font>: result <font color=blue>is</font> <font color=maroon>""</font>;
      <font color=blue>begin</font>
        <font color=blue>while</font> number >= 0 <font color=blue>do</font>
          result := str(number <font color=blue>rem</font> 8) & result;
          number := number <font color=blue>div</font> 8;
        <font color=blue>end while</font>;
      <font color=blue>end func</font>;
</pre><p>
  As you can see this works like a combination of an <tt>'<font color=blue>in</font>'</tt>
  parameter with a local <tt>'<font color=blue>var</font>'</tt>.
</p><p>
  Conventionally there are two kinds of parameters:
  <tt>'call by value'</tt> and <tt>'call by reference'</tt>. When taking the
  access right (constant or variable) into account we get
  the following table:
</p><pre>
    +-----------+-----------+--------------+
    | parameter |  call by  | access right |
    +-----------+-----------+--------------+
    | val       |   value   | const        |
    | ref       | reference | const        |
    | in        | val / ref | const        |
    | in var    |   value   | var          |
    | inout     | reference | var          |
    +-----------+-----------+--------------+
</pre><p>
  Additionally to the parameters we already know this table
  describes also <tt>'<font color=blue>val</font>'</tt> and <tt>'<font color=blue>ref</font>'</tt> parameters which use
  'call by value' and 'call by reference' and have a constant
  formal parameter. The <tt>'<font color=blue>in</font>'</tt> parameter is called by
  <tt>'val / ref'</tt> in this table which is easily explained:
</p><pre>
    An <tt>'<font color=blue>in</font>'</tt> parameter is either a <tt>'<font color=blue>val</font>'</tt> or a <tt>'<font color=blue>ref</font>'</tt> parameter
    depending on the type of the parameter.
</pre><p>
  The parameter
</p><pre>
    <font color=blue>in</font> <font color=red>integer</font>: number
</pre><p>
  is a 'val' parameter which could also be declared as
</p><pre>
    <font color=blue>val</font> <font color=red>integer</font>: number
</pre><p>
  while the parameter
</p><pre>
    <font color=blue>in</font> <font color=red>string</font>: stri
</pre><p>
  is a 'ref' parameter which could also be declared as
</p><pre>
    <font color=blue>ref</font> <font color=red>string</font>: stri
</pre><p>
  The meaning of the <tt>'<font color=blue>in</font>'</tt> parameter is predefined for most
  types. Usually types with small amounts of data use <tt>'<font color=blue>val</font>'</tt>
  as <tt>'<font color=blue>in</font>'</tt> parameter while types with bigger data amounts use
  <tt>'<font color=blue>ref</font>'</tt>. Most of the time it is not necessary to care if an
  <tt>'<font color=blue>in</font>'</tt> parameter is really a <tt>'<font color=blue>val</font>'</tt> or <tt>'<font color=blue>ref</font>'</tt> parameter. 
</p><p>
  In rare cases a <tt>'<font color=blue>ref</font>'</tt> parameter would have undesired side
  effects with global variables or other <tt>'<font color=blue>ref</font>'</tt> parameters.
  In this cases an explicit <tt>'<font color=blue>val</font>'</tt> parameter instead of an
  <tt>'<font color=blue>in</font>'</tt> parameter makes sense.
</p><p>
  In all normal cases an <tt>'<font color=blue>in</font>'</tt> parameter should be preferred
  over an explicit <tt>'<font color=blue>val</font>'</tt> and <tt>'<font color=blue>ref</font>'</tt> parameter.
</p>

<a name="Declare_a_statement"><b>2.5 Declare a statement</b></a>
<p>
    This example program writes it's arguments
</p><pre>
    $ <font color=blue>include</font> <font color=maroon>"seed7_05.s7i"</font>;       <font color=green># Standard Seed7 library</font>

    <font color=blue>const</font> <font color=red>proc</font>: main <font color=blue>is func</font>
      <font color=blue>local</font>
        <font color=blue>var</font> <font color=red>string</font>: stri <font color=blue>is</font> <font color=maroon>""</font>;
      <font color=blue>begin</font>
        <font color=blue>for</font> stri <font color=blue>range</font> argv(PROGRAM) <font color=blue>do</font>
          write(stri &lt;& <font color=maroon>" "</font>);
        <font color=blue>end for</font>;
        writeln;
      <font color=blue>end func</font>;
</pre><p>
  The <tt>'<font color=blue>for</font>'</tt> statement iterates over <tt>'argv(PROGRAM)'</tt>.
  The <tt>'argv(PROGRAM)'</tt> function returns an <tt>'<font color=red>array string</font>'</tt>
  (=<font color=red>array</font> of <font color=red>string</font> elements). The <tt>'<font color=blue>for</font>'</tt> statement is overloaded
  for various collection types. In the standard Seed7 library
  <font color=maroon>"seed7_05.s7i"</font> the <tt>'<font color=blue>for</font>'</tt> statement for <font color=red>array</font>s is declared as
  follows:
</p><pre>
    <font color=blue>const</font> <font color=red>proc</font>: for (<font color=blue>inout</font> <font color=red>baseType</font>: variable) range (<font color=blue>in</font> <font color=red>arrayType</font>: arr_obj) do
                  (<font color=blue>in</font> <font color=red>proc</font>: statements)
                end for <font color=blue>is func</font>
      <font color=blue>local</font>
        <font color=blue>var</font> <font color=red>integer</font>: number <font color=blue>is</font> 0;
      <font color=blue>begin</font>
        <font color=blue>for</font> number <font color=blue>range</font> 1 <font color=blue>to</font> length(arr_obj) <font color=blue>do</font>
          variable := arr_obj[number];
          statements;
        <font color=blue>end for</font>;
      <font color=blue>end func</font>;
</pre><p>
  The syntax of this <tt>'<font color=blue>for</font>'</tt> statement is declared as:
</p><pre>
    $ <font color=blue>syntax</font> <font color=red>expr</font>: .for.().range.().to.().do.().end.for <font color=blue>is</font>              -> 25;
</pre><p>
  Additionally everybody can overload the <tt>'<font color=blue>for</font>'</tt> statement also.
  Because of this powerful features Seed7 does not need Iterators.
</p>

<a name="Template_declaring_a_statement"><b>2.6 Template declaring a statement</b></a>
<p>
  Templates are just normal functions with <font color=red>type</font>s as parameters.
  The following template function declares <tt>'<font color=blue>for</font>'</tt> statements:
</p><pre>
    <font color=blue>const</font> <font color=red>proc</font>: FOR_DECLS (<font color=blue>in</font> <font color=red>type</font>: aType) <font color=blue>is func</font>
      <font color=blue>begin</font>

        <font color=blue>const</font> <font color=red>proc</font>: for (<font color=blue>inout</font> <font color=red>aType</font>: variable) range (<font color=blue>in</font> <font color=red>aType</font>: low) to (<font color=blue>in</font> <font color=red>aType</font>: high) do
            (<font color=blue>in</font> <font color=red>proc</font>: statements) end for <font color=blue>is func</font>
          <font color=blue>begin</font>
            variable := low;
            <font color=blue>if</font> variable <= high <font color=blue>then</font>
              statements;
              <font color=blue>while</font> variable < high <font color=blue>do</font>
                incr(variable);
                statements;
              <font color=blue>end while</font>;
            <font color=blue>end if</font>;
          <font color=blue>end func</font>;

      <font color=blue>end func</font>;
 
    FOR_DECLS(<font color=red>char</font>);
    FOR_DECLS(<font color=red>boolean</font>);
</pre><p>
  The body of the 'FOR_DECLS' function contains a declaration of
  the <tt>'<font color=blue>for</font>'</tt> statement for the type <font color=red>aType</font>. Calling 'FOR_DECLS' with
  <font color=red>char</font> and <font color=red>boolean</font> as parameter creates corresponding declarations
  of <tt>'<font color=blue>for</font>'</tt> statements. The example above is a simplified part of
  the standard Seed7 library <font color=maroon>"seed7_05.s7i"</font>.
</p><hr>

<p></p>
<a name="SYNTAX"><big><b>3. SYNTAX</b></big></a>
<!-- ========= -->
<p>
    A syntax declaration defines the way a usage of a statement
  or operator must be written. For example a call of the
  <tt>'<font color=blue>not</font>'</tt> operator looks like:
</p><pre>
    <font color=blue>not</font> okay
</pre><p>
  To describe the syntax of the <tt>'<font color=blue>not</font>'</tt> operator we write:
</p><pre>
    $ <font color=blue>syntax</font> <font color=red>expr</font>: .not.() <font color=blue>is</font> &lt;- 13;
</pre><p>
  This means that a <tt>'<font color=blue>not</font>'</tt> expression is constructed with the
  symbol <tt>'<font color=blue>not</font>'</tt> followed by a parameter. The place of the
  parameter is marked with the () sign. The syntax description
  contains no information about the types of the parameters. At
  the syntax level a parameter may be anything. With <tt>'&lt;-'</tt> the
  associativity of the <tt>'<font color=blue>not</font>'</tt> operator is specified as right
  associative. This means that the right operand is allowed to
  have the same priority as the operator symbol. So the
  expression
</p><pre>
    <font color=blue>not not</font> okay
</pre><p>
  is legal and means
</p><pre>
    <font color=blue>not</font> (<font color=blue>not</font> okay)
</pre><p>
  When the associativity of the <tt>'<font color=blue>not</font>'</tt> operator is specified with
  <tt>'->'</tt> instead of <tt>'&lt;-'</tt> the <tt>'<font color=blue>not not</font>'</tt> expression above is not legal.
  With 13 the priority of the whole <tt>'<font color=blue>not</font>'</tt> operator is determined.
  As convention priorities from 1 to 20 are used by operators
  and priority 25 is used by statements. Arithmetic operators
  have priorities from 1 to 11 and comparisons have priority 12.
</p><p>
  To define the <tt>'<font color=blue>not</font>'</tt> operator completely there must be also
  a semantic definition which is as follows:
</p><pre>
    <font color=blue>const</font> <font color=red>func boolean</font>: not (<font color=blue>in</font> <font color=red>boolean</font>: aBool) <font color=blue>is func</font>
      <font color=blue>result</font>
        <font color=blue>var</font> <font color=red>boolean</font>: result <font color=blue>is</font> FALSE;
      <font color=blue>begin</font>
        <font color=blue>if</font> aBool <font color=blue>then</font>
          result := FALSE;
        <font color=blue>else</font>
          result := TRUE;
        <font color=blue>end if</font>;
      <font color=blue>end func</font>;
</pre><p>
  In the declaration the <tt>'<font color=blue>not</font>'</tt> operator is written exactly
  in the same way it is written when it is called. The syntax
  definition is used at both places: declaration and call.
  The syntax and semantic declarations define precisely how
  the <tt>'<font color=blue>not</font>'</tt> operator works.
</p><p>
    As next example we try an infix operator like the <tt>'<font color=blue>and</font>'</tt> operator.
  A call of the <tt>'<font color=blue>and</font>'</tt> operator may look like:
</p><pre>
    okay <font color=blue>and not</font> error
</pre><p>
  To describe the syntax of the <tt>'<font color=blue>and</font>'</tt> operator we write:
</p><pre>
    $ <font color=blue>syntax</font> <font color=red>expr</font>: ().and.() <font color=blue>is</font>     -> 14;
</pre><p>
  This means that an <tt>'<font color=blue>and</font>'</tt> expression is constructed with the
  symbol <tt>'<font color=blue>and</font>'</tt> surrounded by parameters. The <tt>'->'</tt> defines the
  <tt>'<font color=blue>and</font>'</tt> operator as left associative. This means that an expression
  like
</p><pre>
    A <font color=blue>and</font> B <font color=blue>and</font> C
</pre><p>
  is interpreted as
</p><pre>
    (A <font color=blue>and</font> B) <font color=blue>and</font></font> C
</pre><p>
  With 14 the priority of the whole <tt>'<font color=blue>and</font>'</tt> operator is determined.
  Since priority 14 is weaker than the priority of the <tt>'<font color=blue>not</font>'</tt> operator
  which is 13 the example expression is evaluated as:
</p><pre>
    okay <font color=blue>and</font> (<font color=blue>not</font> error)
</pre><p>
  Note that the expression
</p><pre>
    okay <font color=blue>and not</font> error
</pre><p>
  makes no sense when the <tt>'<font color=blue>and</font>'</tt> operator has priority 12 instead of 14.
</p><p>
    As next let's try the syntax declaration of a statement.
  For example a call of the while-statement looks like:
</p><pre>
    <font color=blue>while</font> element_index > 0 <font color=blue>and</font> okay <font color=blue>do</font>
      processElement;
      write(<font color=maroon>"."</font>);
    <font color=blue>end while</font>;
</pre><p>
  To describe the syntax of the while-statement we write:
</p><pre>
    $ <font color=blue>syntax</font> <font color=red>expr</font>: while.().do.().end.while <font color=blue>is</font> -> 25;
</pre><p>
  This means that the while-statement is an expression with the
  symbols <tt>'<font color=blue>while</font>'</tt>, <tt>'<font color=blue>do</font>'</tt>, <tt>'<font color=blue>end</font>'</tt> and <tt>'<font color=blue>while</font>'</tt>. With <tt>'->'</tt> the
  associativity of the while-statement is specified as left
  associative. The associativity has no meaning for the
  while-statement since there is no parameter before the first
  symbol or after the last symbol. With 25 the priority of the
  whole while-statement is determined.
</p><p>
  The semantic definition of the while-statement is as follows:
</p><pre>
    <font color=blue>const</font> <font color=red>proc</font>: while (<font color=blue>ref</font> func <font color=red>boolean</font>: condition) do
        (<font color=blue>ref</font> <font color=red>proc</font>: statement) end while <font color=blue>is func</font>
      <font color=blue>begin</font>
        <font color=blue>if</font> condition <font color=blue>then</font>
          statement;
          <font color=blue>while</font> condition <font color=blue>do</font>
            statement;
          <font color=blue>end while</font>;
        <font color=blue>end if</font>;
      <font color=blue>end func</font>;
</pre><p>
  The syntax definition is used at the declaration and at the call.
  This declaration defines precisely how the while-statement
  works. It is based on the if-statement and uses recursion
  to emulate the repetition of the loop body.
  Another example for a syntax description is the
  repeat-statement
</p><pre>
    <font color=blue>repeat</font>
      processElement;
      write(<font color=maroon>"."</font>);
    <font color=blue>until</font> element_index = 0 <font color=blue>or not</font> okay;
</pre><p>
  which has the following syntax description:
</p><pre>
    $ <font color=blue>syntax</font> <font color=red>expr</font>: repeat.().until.() <font color=blue>is</font> -> 25;
</pre><p>
  This means that the repeat-statement is an expression with
  the symbols <tt>'<font color=blue>repeat</font>'</tt> and <tt>'<font color=blue>until</font>'</tt> and a parameter between
  <tt>'<font color=blue>repeat</font>'</tt> and <tt>'<font color=blue>until</font>'</tt> and after <tt>'<font color=blue>until</font>'</tt>. With 25 the priority
  of the whole repeat-statement is determined. With <tt>'->'</tt> the
  associativity of the repeat-statement is specified as left
  associative. This allows priorities from 0 to 24 for the
  parameter after <tt>'<font color=blue>until</font>'</tt>. Since statements have priority 25
  it is not possible to write a statement direct behind <tt>'<font color=blue>until</font>'</tt>.
</p><p>
  As next let's take a more complex statement: The if-statement.
  A usage of the if-statement might be:
</p><pre>
    <font color=blue>if</font> okay <font color=blue>then</font>
      writeln(<font color=maroon>"okay"</font>);
    <font color=blue>else</font>
      writeln(<font color=maroon>"not okay"</font>);
    <font color=blue>end if</font>;
</pre><p>
  As syntax description we use
</p><pre>
    $ <font color=blue>syntax</font> <font color=red>expr</font>: .if.().then.().end.if <font color=blue>is</font>            -> 25;
    $ <font color=blue>syntax</font> <font color=red>expr</font>: .if.().then.().else.().end.if <font color=blue>is</font>    -> 25;
</pre><p>
  Note that this description allows if-statements with and
  without else-parts. As semantic description we use
</p><pre>
    <font color=blue>const</font> <font color=red>proc</font>: if (<font color=blue>in</font> <font color=red>boolean</font>: condition) then
                  (<font color=blue>in</font> <font color=red>proc</font>: statement)
                end if <font color=blue>is func</font>
      <font color=blue>begin</font>
        <font color=blue>case</font> condition <font color=blue>of</font>
          <font color=blue>when</font> {TRUE}: statement;
        <font color=blue>end case</font>;
      <font color=blue>end func</font>;

    <font color=blue>const</font> proc: if (<font color=blue>in</font> <font color=red>boolean</font>: condition) then
                  (<font color=blue>in</font> <font color=red>proc</font>: statement1)
                else
                  (<font color=blue>in</font> <font color=red>proc</font>: statement2)
                end if <font color=blue>is func</font>
      <font color=blue>begin</font>
        <font color=blue>case</font> condition of
          <font color=blue>when</font> {TRUE}:  statement1;
          <font color=blue>when</font> {FALSE}: statement2;
        <font color=blue>end case</font>;
      <font color=blue>end func</font>;
</pre><p>
  We define the two forms of the if statement based on the
  case statement. A more complex if-statement can be:
</p><pre>
    <font color=blue>if</font> number &lt; 0 <font color=blue>then</font>
      write(<font color=maroon>"less"</font>);
    <font color=blue>elsif</font> number = 0 <font color=blue>then</font>
      write(<font color=maroon>"equal"</font>);
    <font color=blue>else</font>
      write(<font color=maroon>"greater"</font>);
    <font color=blue>end if</font>;
</pre><p>
  Here we use a more complex syntax description:
</p><pre>
    $ <font color=blue>syntax</font> <font color=red>expr</font>: .if.().then.().end.if <font color=blue>is</font>            -> 25;
    $ <font color=blue>syntax</font> <font color=red>expr</font>: .if.().then.().().end.if <font color=blue>is</font>         -> 25;
    $ <font color=blue>syntax</font> <font color=red>expr</font>: .elsif.().then.() <font color=blue>is</font>                &lt;- 60;
    $ <font color=blue>syntax</font> <font color=red>expr</font>: .elsif.().then.().() <font color=blue>is</font>             &lt;- 60;
    $ <font color=blue>syntax</font> <font color=red>expr</font>: .else.() <font color=blue>is</font>                         &lt;- 60;
</pre><p>
  Note that the second line of syntax description is different
  to the syntax description of the previous example. The 'else'
  is taken out to form an expression of its own.
</p><hr>

<p></p>
<a name="PREDEFINED_STATEMENTS"><big><b>4. PREDEFINED STATEMENTS</b></big></a>
<!-- ======================== -->
<p>
    The library contains several predefined statements:
  assignment, while-statement, repeat-statement, for-statement,
  if-statement, case-statement and procedure call.

</p><p>
  Syntax:
</p><pre>
    statement ::=
      single_statement [ ';' [ statement ] ] .

    single_statement ::=
      assignment_statement | while_statement | repeat_statement |
      for_statement | if_statement | case_statement |
      procedure_call | empty_statement .

    empty_statement ::=
      'noop' .
</pre><p>
  Everywhere where one statement can be written a sequence of
  statements can also be used. The semicolon-operator concatenates
  two statements giving a new statement. The semicolon operator
  can also be used behind the last statement of a statement
  sequence. In this case the semicolon is just ignored.

</p><p>
  Declaration:
</p><pre>
    $ <font color=blue>syntax</font> <font color=red>expr</font>: (). ; .() <font color=blue>is</font>             &lt;- 50;
    $ <font color=blue>syntax</font> <font color=red>expr</font>: (). ; <font color=blue>is</font>                 &lt;- 50 [1];

    <font color=blue>const</font> <font color=red>proc</font>: (<font color=blue>ref</font> <font color=red>void</font> <font color=blue>param</font>) ; (<font color=blue>ref</font> <font color=red>void</font> <font color=blue>param</font>) <font color=blue>is</font> noop;
</pre><p></p>

<a name="Assignment"><b>4.1 Assignment</b></a>
<p>
  For example:
</p><pre>
    minimum := maximum <font color=blue>div</font> 2;
</pre><p></p><dl><dt>
  Semantics:</dt><dd>
    The expression at the right side of the assignment symbol is
    evaluated and assigned to the variable at the left side.
</dd></dl><p>

  Syntax:
</p><pre>
    assignment_statement ::=
      designator ':=' expression .
</pre><p>
  The assignment statement is defined for every standard type.
</p><p>
  If an assignment for a new user defined type is needed it
  must be defined additionally.

</p><p>
  Declaration:
</p><pre>
    $ <font color=blue>syntax</font> <font color=red>expr</font>: (). := .() <font color=blue>is</font>                      &lt;-> 20;

    <font color=blue>const</font> <font color=red>proc</font>: (<font color=blue>inout</font> <font color=red>type</font> <font color=blue>param</font>) := (<font color=blue>ref</font> <font color=red>type</font> <font color=blue>param</font>) <font color=blue>is</font>           action <font color=maroon>"TYP_CPY"</font>;
    <font color=blue>const</font> <font color=red>proc</font>: (<font color=blue>inout</font> <font color=red>proc</font> <font color=blue>param</font>) := (<font color=blue>ref</font> <font color=red>proc</font> <font color=blue>param</font>) <font color=blue>is</font>           action <font color=maroon>"PRC_CPY"</font>;
    <font color=blue>const</font> <font color=red>proc</font>: (<font color=blue>inout</font> <font color=red>func aType</font> <font color=blue>param</font>) := (<font color=blue>ref</font> <font color=red>func aType</font> <font color=blue>param</font>) <font color=blue>is</font> action <font color=maroon>"PRC_CPY"</font>;
    <font color=blue>const</font> <font color=red>proc</font>: (<font color=blue>inout</font> <font color=red>varfunc aType</font> <font color=blue>param</font>) := (<font color=blue>ref</font> <font color=red>varfunc aType</font> <font color=blue>param</font>) <font color=blue>is</font> action <font color=maroon>"PRC_CPY"</font>;
    <font color=blue>const</font> <font color=red>proc</font>: (<font color=blue>inout</font> <font color=red>ACTION</font> <font color=blue>param</font>) := (<font color=blue>in</font> <font color=red>ACTION</font> <font color=blue>param</font>) <font color=blue>is</font>        action <font color=maroon>"ACT_CPY"</font>;
    <font color=blue>const</font> <font color=red>proc</font>: (<font color=blue>inout</font> <font color=red>boolean</font> <font color=blue>param</font>) := (<font color=blue>in</font> <font color=red>boolean</font> <font color=blue>param</font>) <font color=blue>is</font>      action <font color=maroon>"BLN_CPY"</font>;
    <font color=blue>const</font> <font color=red>proc</font>: (<font color=blue>inout</font> <font color=red>integer</font> <font color=blue>param</font>) := (<font color=blue>in</font> <font color=red>integer</font> <font color=blue>param</font>) <font color=blue>is</font>      action <font color=maroon>"INT_CPY"</font>;
    <font color=blue>const</font> <font color=red>proc</font>: (<font color=blue>inout</font> <font color=red>char</font> <font color=blue>param</font>) := (<font color=blue>ref</font> <font color=red>char</font> <font color=blue>param</font>) <font color=blue>is</font>           action <font color=maroon>"CHR_CPY"</font>;
    <font color=blue>const</font> <font color=red>proc</font>: (<font color=blue>inout</font> <font color=red>string</font> <font color=blue>param</font>) := (<font color=blue>ref</font> <font color=red>string</font> <font color=blue>param</font>) <font color=blue>is</font>       action <font color=maroon>"STR_CPY"</font>;
    <font color=blue>const</font> <font color=red>proc</font>: (<font color=blue>inout</font> <font color=red>reference</font> <font color=blue>param</font>) := (<font color=blue>ref</font> <font color=red>reference</font> <font color=blue>param</font>) <font color=blue>is</font> action <font color=maroon>"REF_CPY"</font>;
    <font color=blue>const</font> <font color=red>proc</font>: (<font color=blue>inout</font> <font color=red>ref_list</font> <font color=blue>param</font>) := (<font color=blue>in</font> <font color=red>ref_list</font> <font color=blue>param</font>) <font color=blue>is</font>    action <font color=maroon>"RFL_CPY"</font>;
    <font color=blue>const</font> <font color=red>proc</font>: (<font color=blue>inout</font> <font color=red>ptrType</font> <font color=blue>param</font>) := (<font color=blue>in</font> <font color=red>ptrType</font> <font color=blue>param</font>) <font color=blue>is</font>      action <font color=maroon>"REF_CPY"</font>;
    <font color=blue>const</font> <font color=red>proc</font>: (<font color=blue>inout</font> <font color=red>varptrType</font> <font color=blue>param</font>) := (<font color=blue>in</font> <font color=red>varptrType</font> <font color=blue>param</font>) <font color=blue>is</font> action <font color=maroon>"REF_CPY"</font>;
    <font color=blue>const</font> <font color=red>proc</font>: (<font color=blue>inout</font> <font color=red>arrayType</font> <font color=blue>param</font>) := (<font color=blue>in</font> <font color=red>arrayType</font> <font color=blue>param</font>) <font color=blue>is</font>  action <font color=maroon>"ARR_CPY"</font>;
    <font color=blue>const</font> <font color=red>proc</font>: (<font color=blue>inout</font> <font color=red>bitset</font> <font color=blue>param</font>) := (<font color=blue>in</font> <font color=red>bitset</font> <font color=blue>param</font>) <font color=blue>is</font>        action <font color=maroon>"SET_CPY"</font>;
    <font color=blue>const</font> <font color=red>proc</font>: (<font color=blue>inout</font> <font color=red>structType</font> <font color=blue>param</font>) := (<font color=blue>in</font> <font color=red>structType</font> <font color=blue>param</font>) <font color=blue>is</font> action <font color=maroon>"SCT_CPY"</font>;
    <font color=blue>const</font> <font color=red>proc</font>: (<font color=blue>inout</font> <font color=red>enumType</font> <font color=blue>param</font>) := (<font color=blue>in</font> <font color=red>enumType</font></font> <font color=blue>param</font>) <font color=blue>is</font>    action <font color=maroon>"ENU_CPY"</font>;
    <font color=blue>const</font> <font color=red>proc</font>: (<font color=blue>inout</font> <font color=red>PRIMITIVE_FILE</font> <font color=blue>param</font>) := (<font color=blue>ref</font> <font color=red>PRIMITIVE_FILE</font> <font color=blue>param</font>) <font color=blue>is</font> action <font color=maroon>"FIL_CPY"</font>;
    <font color=blue>const</font> <font color=red>proc</font>: (<font color=blue>inout</font> <font color=red>file</font> <font color=blue>param</font>) := (<font color=blue>ref</font> <font color=red>file</font> <font color=blue>param</font>) <font color=blue>is</font>           action <font color=maroon>"CLS_CPY"</font>;
    <font color=blue>const</font> <font color=red>proc</font>: (<font color=blue>inout</font> <font color=red>file</font> <font color=blue>param</font>) := (<font color=blue>ref</font> <font color=red>NULL_FILE</font> <font color=blue>param</font>) <font color=blue>is</font>      action <font color=maroon>"CLS_CPY2"</font>;
    <font color=blue>const</font> <font color=red>proc</font>: (<font color=blue>inout</font> <font color=red>file</font> <font color=blue>param</font>) := (<font color=blue>ref</font> <font color=red>external_file</font> <font color=blue>param</font>) <font color=blue>is</font>  action <font color=maroon>"CLS_CPY2"</font>;
</pre><p></p>

<a name="while-statement"><b>4.2 while-statement</b></a>
<p>
  For example:
</p><pre>
    <font color=blue>while</font> maximum > minimum <font color=blue>do</font>
      minimum := 2 * minimum + stepValue;
      decr(stepValue);
    <font color=blue>end while</font>;
</pre><p></p><dl><dt>
  Semantics:</dt><dd>
    First the condition between <tt>'<font color=blue>while</font>'</tt> and <tt>'<font color=blue>do</font>'</tt> is evaluated.
    When this evaluation yields <tt>'FALSE'</tt>, the while-statement is
    finished. When the evaluation yields '<tt>TRUE'</tt>, the statement
    between <tt>'<font color=blue>do</font>'</tt> and <tt>'<font color=blue>end</font>'</tt> is executed and the whole while-statement
    is executed again.
</dd></dl><p>

  Syntax:
</p><pre>
    while_statement ::=
      '<font color=blue>while</font>' expression '<font color=blue>do</font>'
        statement
      '<font color=blue>end</font>' '<font color=blue>while</font>' .
</pre><p>
  The expression must be of type <tt>'<font color=blue>boolean</font>'</tt>.

</p><p>
  Declaration:
</p><pre>
    $ <font color=blue>syntax</font> <font color=red>expr</font>: while.().do.().end.while <font color=blue>is</font>        -> 25;

    <font color=blue>const</font> <font color=red>proc</font>: while (<font color=blue>ref</font> <font color=red>func boolean</font> <font color=blue>param</font>) do (<font color=blue>ref</font> <font color=red>proc</font> <font color=blue>param</font>) end while <font color=blue>is action</font> <font color=maroon>"PRC_WHILE"</font>;
    <font color=blue>const</font> <font color=red>proc</font>: while (<font color=blue>ref</font> <font color=red>boolean</font> <font color=blue>param</font>)  do (<font color=blue>ref</font> <font color=red>proc</font> <font color=blue>param</font>) end while <font color=blue>is     action</font> <font color=maroon>"PRC_WHILE"</font>;
</pre><p>
  Alternate declaration:
</p><pre>
    <font color=blue>const</font> <font color=red>proc</font>: while (<font color=blue>ref</font> <font color=red>func boolean</font>: condition) do (<font color=blue>ref</font> <font color=red>proc</font>: statement) end while <font color=blue>is func</font>
      <font color=blue>begin</font>
        <font color=blue>if</font> condition <font color=blue>then</font>
          statement;
          <font color=blue>while</font> condition <font color=blue>do</font>
            statement;
          <font color=blue>end while</font>;
        <font color=blue>end if</font>;
      <font color=blue>end func</font>;
</pre><p></p>

<a name="repeat-statement"><b>4.3 repeat-statement</b></a>
<p>
  For example:
</p><pre>
    <font color=blue>repeat</font>
      incr(minimum);
      maximum := maximum - stepValue;
    <font color=blue>until</font> 2 * minimum > maximum;
</pre><p></p><dl><dt>
  Semantics:</dt><dd>
    The statement between <tt>'<font color=blue>repeat</font>'</tt> and <tt>'<font color=blue>until</font>'</tt> is executed.
    Then the condition after <tt>'<font color=blue>until</font>'</tt> is evaluated. When this
    evaluation yields <tt>'TRUE'</tt>, the repeat-statement is finished.
    When the evaluation yields <tt>'FALSE'</tt> the repeat-statement is
    executed again.
</dd></dl><p>

  Syntax:
</p><pre>
    repeat_statement ::=
      '<font color=blue>repeat</font>'
        statement
      '<font color=blue>until</font>' expression .
</pre><p>
  The expression must be of type <tt>'<font color=blue>boolean</font>'</tt>.

</p><p>
  Declaration:
</p><pre>
    $ <font color=blue>syntax</font> <font color=red>expr</font>: repeat.().until.() <font color=blue>is</font>              -> 25;

    <font color=blue>const</font> <font color=red>proc</font>: repeat (<font color=blue>ref</font> <font color=red>proc</font> <font color=blue>param</font>) until (<font color=blue>ref</font> <font color=red>func boolean</font> <font color=blue>param</font>) <font color=blue>is action</font> <font color=maroon>"PRC_REPEAT"</font>;
    <font color=blue>const</font> <font color=red>proc</font>: repeat (<font color=blue>ref</font> <font color=red>proc</font> <font color=blue>param</font>) until (<font color=blue>ref</font> <font color=red>boolean</font> <font color=blue>param</font>) <font color=blue>is      action</font> <font color=maroon>"PRC_REPEAT"</font>;
</pre><p>
  Alternate declaration:
</p><pre>
    <font color=blue>const</font> <font color=red>proc</font>: repeat (<font color=blue>ref</font> <font color=red>proc</font>: statement) until (<font color=blue>ref</font> <font color=red>func boolean</font>: condition) <font color=blue>is func</font>
      <font color=blue>begin</font>
        statement;
        <font color=blue>if not</font> condition <font color=blue>then</font>
          <font color=blue>repeat</font>
            statement;
          <font color=blue>until</font> condition;
        <font color=blue>end if</font>;
      <font color=blue>end func</font>;
</pre><p></p>

<a name="for-statement"><b>4.4 for-statement</b></a>
<p>
  For example:
</p><pre>
    <font color=blue>for</font> index <font color=blue>range</font> min_index <font color=blue>to</font> max_index <font color=blue>do</font>
      sumValue +:= field[index];
    <font color=blue>end for</font>;
</pre><p></p><dl><dt>
  Semantics:</dt><dd><dl><dt>
    When the <tt>'<font color=blue>to</font>'</tt> symbol is used the for-statement is defined as
    follows:</dt><dd>
      First the lower limit and the upper limit which stand behind
      <tt>'<font color=blue>range</font>'</tt> and <tt>'<font color=blue>to</font>'</tt> are evaluated. Then the lower limit is assigned
      to the control variable which stands behind <tt>'<font color=blue>for</font>'</tt>. If the value
      of the control variable is less than or equal the upper limit
      the statements behind <tt>'<font color=blue>do</font>'</tt> are executed. After that the control
      variable is incremented and compared with the upper limit
      again. This compare - execute - increment cycle is repeated
      until the control variable is greater than the upper limit.</dd><dt>
    When the <tt>'<font color=blue>downto</font>'</tt> symbol is used the for-statement is defined as
    follows:</dt><dd>
      First the upper limit and the lower limit which stand behind
      <tt>'<font color=blue>range</font>'</tt> and <tt>'<font color=blue>downto</font>'</tt> are evaluated. Then the upper limit is
      assigned to the control variable which stands behind <tt>'<font color=blue>for</font>'</tt>. If
      the value of the control variable is greater than or equal the
      lower limit the statements behind <tt>'<font color=blue>do</font>'</tt> are executed. After that
      the control variable is decremented and compared with the lower
      limit again. This compare - execute - increment cycle is
      repeated until the control variable is less than the lower limit.</dd></dl>
</dd></dl><p>

  Syntax:
</p><pre>
    for_statement ::=
      '<font color=blue>for</font>' identifier '<font color=blue>range</font>' expression [ '<font color=blue>to</font>' | '<font color=blue>downto</font>' ] expression '<font color=blue>do</font>'
        statement
      '<font color=blue>end</font>' '<font color=blue>for</font>' .
</pre><p>

  Declaration:
</p><pre>
    $ <font color=blue>syntax</font> <font color=red>expr</font>: for.().range.().to.().do.().end.for <font color=blue>is</font>     -> 25;
    $ <font color=blue>syntax</font> <font color=red>expr</font>: for.().range.().downto.().do.().end.for <font color=blue>is</font> -> 25;

    <font color=blue>const</font> <font color=red>proc</font>: FOR_DECLS (<font color=blue>in</font> <font color=red>type</font>: aType) <font color=blue>is func</font>
      <font color=blue>begin</font>
        <font color=blue>const</font> <font color=red>proc</font>: for (<font color=blue>inout</font> <font color=red>aType</font>: variable) range
            (<font color=blue>in</font> <font color=red>aType</font>: lower_limit) to (<font color=blue>in</font> <font color=red>aType</font>: upper_limit) do
            (<font color=blue>in</font> <font color=red>proc</font>: statements) end for <font color=blue>is func</font>
          <font color=blue>begin</font>
            variable := lower_limit;
            <font color=blue>if</font> variable &lt;= upper_limit <font color=blue>then</font>
              statements;
              <font color=blue>while</font> variable &lt; upper_limit <font color=blue>do</font>
                incr(variable);
                statements;
              <font color=blue>end while</font>;
            <font color=blue>end if</font>;
          <font color=blue>end func</font>;

        <font color=blue>const</font> <font color=red>proc</font>: for (<font color=blue>inout</font> <font color=red>aType</font>: variable) range
            (<font color=blue>in</font> <font color=red>aType</font>: upper_limit) downto (<font color=blue>in</font> <font color=red>aType</font>: lower_limit) do
            (<font color=blue>in</font> <font color=red>proc</font>: statements) end for <font color=blue>is func</font>
          <font color=blue>begin</font>
            variable := upper_limit;
            <font color=blue>if</font> variable >= lower_limit <font color=blue>then</font>
              statements;
              <font color=blue>while</font> variable > lower_limit <font color=blue>do</font>
                decr(variable);
                statements;
              <font color=blue>end while</font>;
            end if;
          <font color=blue>end func</font>;
      <font color=blue>end func</font>;

    FOR_DECLS(<font color=red>integer</font>);
    FOR_DECLS(<font color=red>char</font>);
    FOR_DECLS(<font color=red>boolean</font>);
</pre><p></p>

<a name="for-iterator-statement"><b>4.5 for-iterator-statement</b></a>
<p>
  For example:
</p><pre>
    <font color=blue>for</font> currObject <font color=blue>range</font> element_list <font color=blue>do</font>
      result &:= " " & str(currObject);
    <font color=blue>end for</font>;
</pre><p></p><dl><dt>
  Semantics:</dt><dd>
    First the element list which stands behind <tt>'<font color=blue>range</font>'</tt> is evaluated.
    If the element list is empty the for-list-statement is finished.
    Otherwise the first element of the element list is assigned
    to the control variable which stands behind <tt>'<font color=blue>for</font>'</tt>. Then the
    statements behind <tt>'<font color=blue>do</font>'</tt> are executed. If there is no next element
    in the element the for-list-statement is finished. Otherwise
    the next element of the element list is assigned to the control
    variable. This check for next element - execute cycle is repeated
    until there is no next element in the element list.
</dd></dl><p>

  Syntax:
</p><pre>
    for_statement ::=
      '<font color=blue>for</font>' identifier '<font color=blue>range</font>' expression '<font color=blue>do</font>'
        statement
      '<font color=blue>end</font>' '<font color=blue>for</font>' .
</pre><p>

  Declaration:
</p><pre>
    $ <font color=blue>syntax</font> <font color=red>expr</font>: .for.().range.().do.().end.for <font color=blue>is</font>          -> 25;

    <font color=blue>const</font> <font color=red>proc</font>: for (<font color=blue>ref</font> <font color=red>reference</font> <font color=blue>param</font>) range (<font color=blue>ref</font> <font color=red>ref_list</font> <font color=blue>param</font>) do
                  (<font color=blue>ref</font> <font color=red>proc</font> <font color=blue>param</font>)
                end for <font color=blue>is action</font> <font color=maroon>"RFL_FOR"</font>;

    <font color=blue>const</font> <font color=red>proc</font>: for (<font color=blue>inout</font> <font color=red>baseType</font>: variable) range (<font color=blue>in</font> <font color=red>arrayType</font>: arr_obj) do
                  (<font color=blue>in</font> <font color=red>proc</font>: statements)
                end for <font color=blue>is func</font>
      <font color=blue>local</font>
        <font color=blue>var</font> <font color=red>integer</font>: number <font color=blue>is</font> 0;
      <font color=blue>begin</font>
        <font color=blue>for</font> number <font color=blue>range</font> 1 <font color=blue>to</font> length(arr_obj) <font color=blue>do</font>
          variable := arr_obj[number];
          statements;
        <font color=blue>end for</font>;
      <font color=blue>end func</font>;

    <font color=blue>const</font> <font color=red>proc</font>: for (<font color=blue>inout</font> <font color=red>baseType</font>: variable) range (<font color=blue>in</font> <font color=red>setType</font>: a_set) do
                  (<font color=blue>in</font> <font color=red>proc</font>: statements)
                end for <font color=blue>is func</font>
      <font color=blue>begin</font>
        <font color=blue>for</font> variable <font color=blue>range</font> min(a_set) <font color=blue>to</font> max(a_set) <font color=blue>do</font>
          <font color=blue>if</font> variable <font color=blue>in</font> a_set <font color=blue>then</font>
            statements;
          <font color=blue>end if</font>;
        <font color=blue>end for</font>;
      <font color=blue>end func</font>;
</pre><p></p>

<a name="if-statement"><b>4.6 if-statement</b></a>
<p>
  For example:
</p><pre>
    <font color=blue>if</font> sumValue &lt; minimum <font color=blue>then</font>
      factor := sumValue;
      sumValue := minimum;
    <font color=blue>elsif</font> sumValue > maximum <font color=blue>then</font>
      factor := -sumValue;
      sumValue := maximum;
    <font color=blue>else</font>
      factor := 0;
    <font color=blue>end if</font>;
</pre><p></p><dl><dt>
  Semantics:</dt><dd>
    The expressions before <tt>'<font color=blue>then</font>'</tt> are evaluated in row.
    When such an expression evaluates to 'TRUE' the statements
    behind <tt>'<font color=blue>then</font>'</tt> are executed and the if-statement is finished.
    If all expressions before <tt>'<font color=blue>then</font>'</tt> evaluate to 'FALSE' and an
    else-part is present the statements behind <tt>'<font color=blue>else</font>'</tt> are executed
    and the if-statement is finished.
    If all expressions before <tt>'<font color=blue>then</font>'</tt> evaluate to 'FALSE' and no
    else-part is present the if-statement is finished.
</dd></dl><p>

  Syntax:
</p><pre>
    if_statement ::=
      '<font color=blue>if</font>' expression '<font color=blue>then</font>'
        statement
      { '<font color=blue>elsif</font>' expression '<font color=blue>then</font>'
        statement }
      [ '<font color=blue>else</font>'
        statement ]
      '<font color=blue>end</font>' '<font color=blue>if</font>' .
</pre><p>
  The expression must be of type <tt>'<font color=blue>boolean</font>'</tt>.

</p><p>
  Declaration:
</p><pre>
    $ <font color=blue>syntax</font> <font color=red>expr</font>: .if.().then.().end.if <font color=blue>is</font>           -> 25;
    $ <font color=blue>syntax</font> <font color=red>expr</font>: .if.().then.().().end.if <font color=blue>is</font>        -> 25;

    $ <font color=blue>syntax</font> <font color=red>expr</font>: .elsif.().then.() <font color=blue>is</font>               &lt;- 60;
    $ <font color=blue>syntax</font> <font color=red>expr</font>: .elsif.().then.().() <font color=blue>is</font>            &lt;- 60;
    $ <font color=blue>syntax</font> <font color=red>expr</font>: .else.() <font color=blue>is</font>                        &lt;- 60;

    <font color=blue>const</font> <font color=red>type</font>: ELSIF_RESULT <font color=blue>is</font> newtype;
    <font color=blue>const</font> <font color=red>proc</font>: (ref ELSIF_RESULT <font color=blue>param</font>) ::= enumlit <font color=blue>is  action</font> <font color=maroon>"ENU_GENLIT"</font>;
    <font color=blue>const</font> <font color=red>ELSIF_RESULT</font>: ELSIF_EMPTY <font color=blue>is</font> enumlit;
    <font color=blue>const</font> <font color=red>type</font>: ELSIF_PROC <font color=blue>is</font>                        (func ELSIF_RESULT);
    <font color=blue>const</font> <font color=red>proc</font>: (ref ELSIF_PROC <font color=blue>param</font>) ::= (ref ELSIF_RESULT <font color=blue>param</font>) <font color=blue>is action</font> <font color=maroon>"ENU_CREATE"</font>;

    <font color=blue>const</font> <font color=red>proc</font>:       if (<font color=blue>in</font> <font color=red>boolean</font> <font color=blue>param</font>) then
                        (<font color=blue>in</font> <font color=red>proc</font> <font color=blue>param</font>)
                      end if <font color=blue>is                        action</font> <font color=maroon>"PRC_IF"</font>;

    <font color=blue>const</font> <font color=red>proc</font>:       if (<font color=blue>in</font> <font color=red>boolean</font> <font color=blue>param</font>) then
                        (<font color=blue>in</font> <font color=red>proc</font> <font color=blue>param</font>)
                      (<font color=blue>in</font> <font color=red>ELSIF_PROC</font> <font color=blue>param</font>)
                      end if <font color=blue>is                        action</font> <font color=maroon>"PRC_IF_ELSIF"</font>;

    <font color=blue>const</font> <font color=red>ELSIF_PROC</font>: elsif (<font color=blue>in</font> <font color=red>boolean</font> <font color=blue>param</font>) then
                        (<font color=blue>in</font> <font color=red>proc</font> <font color=blue>param</font>) <font color=blue>is             action</font> <font color=maroon>"PRC_IF"</font>;

    <font color=blue>const</font> <font color=red>ELSIF_PROC</font>: elsif (<font color=blue>in</font> <font color=red>boolean</font> <font color=blue>param</font>) then
                        (<font color=blue>in</font> <font color=red>proc</font> <font color=blue>param</font>)
                      (<font color=blue>in</font> <font color=red>ELSIF_PROC</font> <font color=blue>param</font>) <font color=blue>is         action</font> <font color=maroon>"PRC_IF_ELSIF"</font>;

    <font color=blue>const</font> <font color=red>ELSIF_PROC</font>: else
                        (<font color=blue>in</font> <font color=red>void</font> <font color=blue>param</font>) <font color=blue>is</font>             ELSIF_EMPTY;


    <font color=blue>const</font> <font color=red>proc</font>: if TRUE  then (<font color=blue>in</font> <font color=red>void</font> <font color=blue>param</font>) end if <font color=blue>is</font>                           noop;
    <font color=blue>const</font> <font color=red>proc</font>: if TRUE  then (<font color=blue>in</font> <font color=red>void</font> <font color=blue>param</font>) (<font color=blue>in</font> <font color=red>ELSIF_PROC</font> <font color=blue>param</font>) end if <font color=blue>is</font>     noop;
    <font color=blue>const</font> <font color=red>proc</font>: if FALSE then (<font color=blue>in</font> <font color=red>proc</font> <font color=blue>param</font>) end if <font color=blue>is</font>                           noop;
    <font color=blue>const</font> <font color=red>proc</font>: if FALSE then (<font color=blue>in</font> <font color=red>proc</font> <font color=blue>param</font>) (<font color=blue>in</font> <font color=red>ELSIF_RESULT</font> <font color=blue>param</font>) end if <font color=blue>is</font>   noop;
    <font color=blue>const</font> <font color=red>ELSIF_PROC</font>: elsif TRUE  then (<font color=blue>in</font> <font color=red>void</font> <font color=blue>param</font>) <font color=blue>is</font>                         ELSIF_EMPTY;
    <font color=blue>const</font> <font color=red>ELSIF_PROC</font>: elsif TRUE then (<font color=blue>in</font> <font color=red>void</font> <font color=blue>param</font>) (<font color=blue>in</font> <font color=red>ELSIF_PROC</font> <font color=blue>param</font>)   <font color=blue>is</font>  ELSIF_EMPTY;
    <font color=blue>const</font> <font color=red>ELSIF_PROC</font>: elsif FALSE then (<font color=blue>in</font> <font color=red>proc</font> <font color=blue>param</font>) <font color=blue>is</font>                         ELSIF_EMPTY;
    <font color=blue>const</font> <font color=red>ELSIF_PROC</font>: elsif FALSE then (<font color=blue>in</font> <font color=red>proc</font> <font color=blue>param</font>) (<font color=blue>in</font> <font color=red>ELSIF_RESULT</font> <font color=blue>param</font>) <font color=blue>is</font> ELSIF_EMPTY;
</pre><p></p>

<a name="case-statement"><b>4.7 case-statement</b></a>
<p>
  For example:
</p><pre>
    <font color=blue>case</font> currChar <font color=blue>of</font>
      <font color=blue>when</font> {<font color=maroon>'A'</font>, <font color=maroon>'B'</font>, <font color=maroon>'C'</font>, <font color=maroon>'D'</font>, <font color=maroon>'E'</font>, <font color=maroon>'F'</font>, <font color=maroon>'G'</font>, <font color=maroon>'H'</font>, <font color=maroon>'I'</font>, <font color=maroon>'J',
          'K'</font>, <font color=maroon>'L'</font>, <font color=maroon>'M'</font>, <font color=maroon>'N'</font>, <font color=maroon>'O'</font>, <font color=maroon>'P'</font>, <font color=maroon>'Q'</font>, <font color=maroon>'R'</font>, <font color=maroon>'S'</font>, <font color=maroon>'T',
          'U'</font>, <font color=maroon>'V'</font>, <font color=maroon>'W'</font>, <font color=maroon>'X'</font>, <font color=maroon>'Y'</font>, <font color=maroon>'Z'</font>}:
        characterClass := LETTER;
      <font color=blue>when</font> {<font color=maroon>'0'</font>, <font color=maroon>'1'</font>, <font color=maroon>'2'</font>, <font color=maroon>'3'</font>, <font color=maroon>'4'</font>, <font color=maroon>'5'</font>, <font color=maroon>'6'</font>, <font color=maroon>'7'</font>, <font color=maroon>'8'</font>, <font color=maroon>'9'</font>}:
        characterClass := DIGIT;
      <font color=blue>when</font> {<font color=maroon>'!'</font>, <font color=maroon>'$'</font>, <font color=maroon>'%'</font>, <font color=maroon>'&'</font>, <font color=maroon>'*'</font>, <font color=maroon>'+'</font>, <font color=maroon>','</font>, <font color=maroon>'-'</font>, <font color=maroon>'.'</font>, <font color=maroon>'/',
          ':'</font>, <font color=maroon>';'</font>, <font color=maroon>'&lt;'</font>, <font color=maroon>'='</font>, <font color=maroon>'>'</font>, <font color=maroon>'?'</font>, <font color=maroon>'@'</font>, <font color=maroon>'\'</font>, <font color=maroon>'^'</font>, <font color=maroon>'`',
          '|'</font>, <font color=maroon>'~'</font>}:
        characterClass := SPECIAL;
      <font color=blue>when</font> {<font color=maroon>'('</font>, <font color=maroon>')'</font>, <font color=maroon>'['</font>, <font color=maroon>']'</font>, <font color=maroon>'{'</font>, <font color=maroon>'}'</font>}:
        characterClass := PAREN;
      <font color=blue>when</font> {<font color=maroon>'"'</font>}:  <font color=green># Also possible '\"'</font>
        characterClass := APPOSTROPHE;
      <font color=blue>when</font> {<font color=maroon>'''</font>}:  <font color=green># Also possible '\''</font>
        characterClass := QUOTE;
      <font color=blue>otherwise</font>:
        characterClass := ILLEGAL;
    <font color=blue>end case</font>;
</pre><p></p><dl><dt>
  Semantics:</dt><dd>
    The expression between <tt>'<font color=blue>case</font>'</tt> and <tt>'<font color=blue>of</font>'</tt> is evaluated. When the
    resulting value is element of a set behind a <tt>'<font color=blue>when</font>'</tt> the
    statements behind the corresponding colon are executed and
    the case-statement is finished. If the value is not element of
    a set behind a <tt>'<font color=blue>when</font>'</tt> and an <tt>'<font color=blue>otherwise</font>'</tt> part is present the
    statements behind the colon of the <tt>'<font color=blue>otherwise</font>'</tt> are executed
    and the case-statement is finished. If the value is not element
    of a set behind a <tt>'<font color=blue>when</font>'</tt> and no <tt>'<font color=blue>otherwise</font>'</tt> part is present
    the case-statement is finished.
</dd></dl><p>

  Syntax:
</p><pre>
    case_statement ::=
      '<font color=blue>case</font>' expression '<font color=blue>of</font>'
        { '<font color=blue>when</font>' set_expression ':'
          statement }
        [ '<font color=blue>otherwise</font>' ':'
          statement ]
      '<font color=blue>end</font>' '<font color=blue>case</font>' .
</pre><p>

  Declaration:
</p><pre>
    $ <font color=blue>syntax</font> <font color=red>expr</font>: .case.().of.().end.case <font color=blue>is</font>                      -> 25;
    $ <font color=blue>syntax</font> <font color=red>expr</font>: .case.().of.().otherwise. : .().end.case <font color=blue>is</font>     -> 25;
    $ <font color=blue>syntax</font> <font color=red>expr</font>: .case.().of.end.case <font color=blue>is</font>                         -> 25;

    $ <font color=blue>syntax</font> <font color=red>expr</font>: .when.(). : .().() <font color=blue>is</font>              &lt;- 60;
    $ <font color=blue>syntax</font> <font color=red>expr</font>: .when.(). : .() <font color=blue>is</font>                 &lt;- 60;

    <font color=blue>const</font> <font color=red>proc</font>: CASE_DECLS (<font color=blue>in</font> <font color=red>type</font>: aType) <font color=blue>is func</font>
      <font color=blue>local</font>
        <font color=blue>var</font> <font color=red>type</font>: WHEN_RESULT <font color=blue>is</font> <font color=red>void</font>;
        <font color=blue>var</font> <font color=red>type</font>: WHEN_PROC <font color=blue>is</font> <font color=red>void</font>;
        <font color=blue>var</font> <font color=red>type</font>: SELECTOR_TYPE <font color=blue>is</font> <font color=red>void</font>;
      <font color=blue>begin</font>
        <font color=red>WHEN_RESULT</font> := newtype;
        <font color=red>WHEN_PROC</font> := (<font color=red>func WHEN_RESULT</font>);
        <font color=red>SELECTOR_TYPE</font> := <font color=red>set of aType</font>;
        <font color=blue>const</font> <font color=red>proc</font>: case (<font color=blue>ref</font> <font color=red>aType</font> <font color=blue>param</font>) of end case                       <font color=blue>is</font> noop;
        <font color=blue>const</font> <font color=red>proc</font>: case (<font color=blue>ref</font> <font color=red>aType</font> <font color=blue>param</font>) of
                      (<font color=blue>ref</font> <font color=red>WHEN_PROC</font> <font color=blue>param</font>)
                    end case                                                 <font color=blue>is action</font> <font color=maroon>"PRC_CASE"</font>;
        <font color=blue>const</font> <font color=red>proc</font>: case (<font color=blue>ref</font> <font color=red>aType</font> <font color=blue>param</font>) of
                      (<font color=blue>ref</font> <font color=red>WHEN_PROC</font> <font color=blue>param</font>)
                      otherwise : (<font color=blue>ref</font> <font color=red>proc</font> <font color=blue>param</font>)
                    end case                                                 <font color=blue>is action</font> <font color=maroon>"PRC_CASE_DEF"</font>;
        <font color=blue>const</font> <font color=red>proc</font>: (<font color=blue>ref</font> <font color=red>WHEN_RESULT</font> <font color=blue>param</font>) ::= enumlit                      <font color=blue>is action</font> <font color=maroon>"ENU_GENLIT"</font>;
        <font color=blue>const</font> <font color=red>WHEN_RESULT</font>: WHEN_EMPTY (<font color=blue>attr</font> <font color=red>aType</font>) is enumlit;
        <font color=blue>const</font> <font color=red>proc</font>: (<font color=blue>ref</font> <font color=red>WHEN_PROC</font> <font color=blue>param</font>) ::= (<font color=blue>ref</font> <font color=red>WHEN_RESULT</font> <font color=blue>param</font>)        <font color=blue>is action</font> <font color=maroon>"ENU_CREATE"</font>;
        <font color=blue>const</font> <font color=red>WHEN_PROC</font>: when (<font color=blue>ref</font> <font color=red>SELECTOR_TYPE</font> <font color=blue>param</font>) : (<font color=blue>ref</font> <font color=red>proc</font> <font color=blue>param</font>)   <font color=blue>is</font> WHEN_EMPTY(<font color=red>aType</font>);
        <font color=blue>const</font> <font color=red>WHEN_PROC</font>: when (<font color=blue>ref</font> <font color=red>SELECTOR_TYPE</font> <font color=blue>param</font>) : (<font color=blue>ref</font> <font color=red>proc</font> <font color=blue>param</font>)
                           (<font color=blue>ref</font> <font color=red>WHEN_PROC</font> <font color=blue>param</font>)                             <font color=blue>is</font> WHEN_EMPTY(<font color=red>aType</font>);
      <font color=blue>end func</font>;

    CASE_DECLS(<font color=red>integer</font>);
    CASE_DECLS(<font color=red>char</font>);
</pre><p></p><hr>

<p></p>
<a name="PREDEFINED_TYPES"><big><b>5. PREDEFINED TYPES</b></big></a>
<!-- =================== -->
<p>
    In the following subchapters the predefined types of the
  standard library are introduced. The operators have, when not
  stated otherwise, the type described in the subchapter as
  parameter type and result type. The relations have also the
  type described in the subchapter as parameter type and
  a result of type <tt>'<font color=red>boolean</font>'</tt>. In the descriptions <tt>=></tt> is used
  to show an equivalent expression.
</p>

<a name="boolean"><b>5.1 boolean</b></a>
<p>
    The type <tt>'<font color=red>boolean</font>'</tt> consists of the two truth values
  TRUE and FALSE.
</p><pre>
    Prefix operators:
      <font color=blue>not</font>       Negation
                  ( <font color=blue>not</font> TRUE => FALSE,
                    <font color=blue>not</font> FALSE => TRUE )
    Infix operators:
      <font color=blue>and</font>       Logical and
                  ( TRUE <font color=blue>and</font> TRUE => TRUE,
                    A <font color=blue>and</font> B => FALSE else )
      <font color=blue>or</font>        Inclusive logical or
                  ( FALSE <font color=blue>or</font> FALSE => FALSE,
                    A <font color=blue>or</font> B => TRUE else )
      <font color=red>boolean</font> <font color=blue>conv</font> A   Conversion to <font color=red>boolean</font>
                  ( Type of argument A: <font color=red>integer</font>,
                    <font color=red>boolean</font> <font color=blue>conv</font> 0 => FALSE,
                    <font color=red>boolean</font> <font color=blue>conv</font> 1 => TRUE )
      <font color=red>boolean</font> <font color=blue>parse</font> A   Conversion of <font color=red>string</font> to <font color=red>boolean</font>
                  ( Type of argument A: <font color=red>string</font>,
                    <font color=red>boolean</font> <font color=blue>parse</font> <font color=maroon>"FALSE"</font> => FALSE,
                    <font color=red>boolean</font> <font color=blue>parse</font> <font color=maroon>"TRUE"</font> => TRUE,
                    <font color=red>boolean</font> <font color=blue>parse</font> <font color=maroon>"TRUE "</font> => EXCEPTION RANGE_ERROR,
                    <font color=red>boolean</font> <font color=blue>parse</font> <font color=maroon>"ASDF"</font> => EXCEPTION RANGE_ERROR )
    Relations:
      =, &lt;>, >, >=, &lt;, &lt;=
                  ( A relation B =>
                    ord(A) relation ord(B) )
    Functions:
      ord(A)    Ordinal number
                  ( Type of result: <font color=red>integer</font>,
                    ord(FALSE) => 0, ord(TRUE) => 1 )
      succ(A)   Successor
                  ( succ(FALSE) => TRUE,
                    succ(TRUE) => EXCEPTION RANGE_ERROR )
      pred(A)   Predecessor
                  ( pred(FALSE) => EXCEPTION RANGE_ERROR )
                    pred(TRUE) => FALSE )
      str(A)    Conversion to <font color=red>string</font>
                  ( Type of result: <font color=red>string</font>,
                    str(FALSE) => <font color=maroon>"FALSE"</font>,
                    str(TRUE) => <font color=maroon>"TRUE"</font> )
      rand(A, B) Random value in the range [A, B]
                  ( rand(A, B) returns a random value such that
                    A &lt;= rand(A, B) <font color=blue>and</font> rand(A, B) &lt;= B holds.
                    rand(A, A) => A,
                    rand(TRUE, FALSE) => EXCEPTION RANGE_ERROR )
</pre><p>

    The logical operators <tt>'<font color=blue>and</font>'</tt> and <tt>'<font color=blue>or</font>'</tt> work strictly left to
  right. First they evaluate the left operand and then the
  right operand. When the result of the operation can be
  determined after evaluation of the left operand the right
  operand is not evaluated. This can be used to check for
  a boundary in a boolean expression. Note that the <tt>'<font color=blue>and</font>'</tt>
  and <tt>'<font color=blue>or</font>'</tt> operators do not work correct when side effects
  appear in the right operand.

</p><p>
  Table for the behaviour of different boolean expressions:
</p><pre>
                               Result when the    Result when the
    Expression                  first operand      first operand
                             evaluates to FALSE  evaluates to TRUE

    <font color=blue>not</font> A                           TRUE               FALSE
    A <font color=blue>and</font> B  respectively
      <font color=blue>not</font>((<font color=blue>not</font> A)<font color=blue>or</font>(<font color=blue>not</font> B))         FALSE                B
    A <font color=blue>or</font>  B  respectively
      <font color=blue>not</font>((<font color=blue>not</font> A)<font color=blue>and</font>(<font color=blue>not</font> B))          B                TRUE
    A >  B  respectively
      A <font color=blue>and</font>(<font color=blue>not</font> B)                  FALSE              <font color=blue>not</font> B
    A >= B  respectively
      A <font color=blue>or</font>(<font color=blue>not</font> B)                   <font color=blue>not</font> B              TRUE
    A &lt;  B  respectively
      (<font color=blue>not</font> A)<font color=blue>and</font> B                    B                FALSE
    A &lt;= B  respectively
      (<font color=blue>not</font> A)<font color=blue>or</font> B                   TRUE                 B
    <font color=blue>not</font> (A <font color=blue>and</font> B)  respectively
      (<font color=blue>not</font> A)<font color=blue>or</font>(<font color=blue>not</font> B)              TRUE               <font color=blue>not</font> B
    <font color=blue>not</font> (A <font color=blue>or</font> B)  respectively
      (<font color=blue>not</font> A)<font color=blue>and</font>(<font color=blue>not</font> B)             <font color=blue>not</font> B              FALSE
</pre><p>

  Optimizing boolean expressions:
</p><p>
    When the result of a boolean expression can be
  determined at compile time, the expression can be
  replaced by a constant. Boolean relations ( =, &lt;>, >, >=,
  &lt;, &lt;= ) may also skip the evaluation of the right operand
  when the result of the operation can be determined
  after evaluation of the left operand. But this behaviour
  is not enforced. The boolean relations may also evaluate
  the right operand always. To be on the safe side it must
  always be possible to evaluate the right side of a
  boolean relation and there must be no side effects in
  the right operand. Additionally the following equations
  can be used:
</p><pre>
    (A <font color=blue>or</font>  B) <font color=blue>and</font> (A <font color=blue>or</font>  C)  =  A <font color=blue>or</font>  (B <font color=blue>and</font> C)
    (A <font color=blue>and</font> B) <font color=blue>or</font>  (A <font color=blue>and</font> C)  =  A <font color=blue>and</font> (B <font color=blue>or</font>  C)
</pre><p></p>

<a name="integer"><b>5.2 integer</b></a>
<p>
    The type <tt>'<font color=red>integer</font>'</tt> consists of all integer numbers. The
  literals of the type <tt>'<font color=red>integer</font>'</tt> are sequences of digits.
</p><pre>
    Prefix operators:
      +         Identity
      -         Change sign
      !         Faktorial
    Infix operators:
      +         Addition
      -         Subtraction
      *         Multiplication
      <font color=blue>div</font>       Integer division truncated towards zero
                  ( A <font color=blue>div</font> B => trunc(flt(A) / flt(B)),
                    A <font color=blue>div</font> 0 => EXCEPTION NUMERIC_ERROR )
      <font color=blue>rem</font>       Reminder of integer division <font color=blue>div</font>
                  ( A <font color=blue>rem</font> B => A - (A <font color=blue>div</font> B) * B,
                    A <font color=blue>rem</font> 0 => EXCEPTION NUMERIC_ERROR )
      <font color=blue>mdiv</font>      Integer division truncated towards negative infinity
                  ( A <font color=blue>mdiv</font> B => round(floor(flt(A) / flt(B))),
                    A <font color=blue>mdiv</font> 0 => EXCEPTION NUMERIC_ERROR )
      <font color=blue>mod</font>       Reminder of integer division <font color=blue>mdiv</font>
                  ( A <font color=blue>mod</font> B => A - (A <font color=blue>mdiv</font> B) * B,
                    A <font color=blue>mod</font> 0 => EXCEPTION NUMERIC_ERROR )
      **        Power
                  ( A ** B is okay for B > 0,
                    A ** 0 => 1,
                    A ** -1 => EXCEPTION NUMERIC_ERROR )
      !         Binomial coefficient
                  ( A ! B => !A <font color=blue>div</font> (!B * !(A - B)) )
      <font color=red>integer</font> <font color=blue>conv</font> A   Identity
                  ( <font color=red>integer</font> <font color=blue>conv</font> A => A )
      <font color=red>integer</font> <font color=blue>parse</font> A   Conversion of <font color=red>string</font> to <font color=red>integer</font>
                  ( Type of argument A: <font color=red>string</font>,
                    <font color=red>integer</font> <font color=blue>parse</font> <font color=maroon>"123"</font> => 123,
                    <font color=red>integer</font> <font color=blue>parse</font> <font color=maroon>"-123"</font> => -123,
                    <font color=red>integer</font> <font color=blue>parse</font> <font color=maroon>" 1"</font> => EXCEPTION RANGE_ERROR,
                    <font color=red>integer</font> <font color=blue>parse</font> <font color=maroon>"+5"</font> => EXCEPTION RANGE_ERROR,
                    <font color=red>integer</font> <font color=blue>parse</font> <font color=maroon>"10 "</font> => EXCEPTION RANGE_ERROR,
                    <font color=red>integer</font> <font color=blue>parse</font> <font color=maroon>"ASDF"</font> => EXCEPTION RANGE_ERROR )
    Relations:
      =, &lt;>, &lt;, &lt;=, >, >=
    Functions:
      ord(A)    Identity
      succ(A)   Successor
                  ( succ(A) => A+1 )
      pred(A)   Predecessor
                  ( pred(A) => A-1 )
      abs(A)    Absolute value
      odd(A)    Odd value
                  ( Type of result: <font color=red>boolean</font> )
      str(A)    Conversion to <font color=red>string</font>
                  ( Type of result: <font color=red>string</font> )
      literal(A) Conversion to a literal
                  ( Type of result: <font color=red>string</font>,
                    literal(A) => str(A) )
      sqrt(A)   Integer square root
                  ( sqrt(A) is okay for A >= 0
                    sqrt(A) => trunc(sqrt(flt(A))),
                    sqrt(-1.0) => EXCEPTION NUMERIC_ERROR )
      rand(A, B) Random number in the range [A, B]
                  ( rand(A, B) returns a random number such that
                    A &lt;= rand(A, B) <font color=blue>and</font> rand(A, B) &lt;= B holds.
                    rand(A, A) => A,
                    rand(1, 0) => EXCEPTION RANGE_ERROR )
      compare(A, B) Compare function
                  ( compare(1, 2) => -1,
                    compare(5, 5) => 0,
                    compare(8, 7) => 1 )
      hashCode(A) Hash function
    Statements:
      A +:= B   Increment A by B
                  ( A +:= B => A := A + B )
      A -:= B   Decrement A by B
                  ( A -:= B => A := A - B )
      incr(A)   Increment with 1
                  ( incr(A) => A +:= 1 )
      decr(A)   Decrement with 1
                  ( decr(A) => A -:= 1 )
</pre><p>
  For the operations <tt>'<font color=blue>div</font>'</tt> and <tt>'<font color=blue>rem</font>'</tt> holds for all A:</p><pre>
    (A <font color=blue>div</font> B) * B + A <font color=blue>rem</font> B = A         when B &lt;> 0
    -A <font color=blue>div</font> B = -(A <font color=blue>div</font> B)               when B &lt;> 0
</pre><p>
  For the operations <tt>'<font color=blue>mdiv</font>'</tt> and <tt>'<font color=blue>mod</font>'</tt> holds for all A:</p><pre>
    (A <font color=blue>mdiv</font> B) * B + A <font color=blue>mod</font> B = A        when B &lt;> 0
    (A <font color=blue>mod</font> B) >= 0 <font color=blue>and</font> (A <font color=blue>mod</font> B) &lt; B    when B > 0
    (A <font color=blue>mod</font> B) &lt;= 0 <font color=blue>and</font> (A <font color=blue>mod</font> B) > B    when B &lt; 0
</pre><p>
  For the operation <tt>'<font color=blue>mdiv</font>'</tt> holds:</p><pre>
    A <font color=blue>mdiv</font> B = A <font color=blue>div</font> B - 1   When A and B have different
                             signs and A <font color=blue>rem</font> B &lt;> 0 holds.
    A <font color=blue>mdiv</font> B = A <font color=blue>div</font> B       When A and B have the same
                             sign or A <font color=blue>rem</font> B = 0 holds.
</pre><p>
  For the operation <tt>'<font color=blue>mod</font>'</tt> holds:</p><pre>
    A <font color=blue>mod</font> B = A <font color=blue>rem</font> B + B    When A and B have different
                             signs and A <font color=blue>rem</font> B &lt;> 0 holds.
    A <font color=blue>mod</font> B = A <font color=blue>rem</font> B        When A and B have the same
                             sign or A <font color=blue>rem</font> B = 0 holds.
</pre><p>

  Tables for the behaviour of <tt>'<font color=blue>div</font>'</tt>, <tt>'<font color=blue>rem</font>'</tt>, <tt>'<font color=blue>mdiv</font>'</tt> and <tt>'<font color=blue>mod</font>'</tt>:
</p><pre>
     A    B   A <font color=blue>div</font> B   A <font color=blue>rem</font> B   A <font color=blue>mdiv</font> B  A <font color=blue>mod</font> B

     5    3      1         2         1         2
     4    3      1         1         1         1
     3    3      1         0         1         0
     2    3      0         2         0         2
     1    3      0         1         0         1
     0    3      0         0         0         0
    -1    3      0        -1        -1         2
    -2    3      0        -2        -1         1
    -3    3     -1         0        -1         0
    -4    3     -1        -1        -2         2
    -5    3     -1        -2        -2         1

     A    B   A <font color=blue>div</font> B   A <font color=blue>rem</font> B   A <font color=blue>mdiv</font> B  A <font color=blue>mod</font> B

     5   -3     -1         2        -2        -1
     4   -3     -1         1        -2        -2
     3   -3     -1         0        -1         0
     2   -3      0         2        -1        -1
     1   -3      0         1        -1        -2
     0   -3      0         0         0         0
    -1   -3      0        -1         0        -1
    -2   -3      0        -2         0        -2
    -3   -3      1         0         1         0
    -4   -3      1        -1         1        -1
    -5   -3      1        -2         1        -2
</pre><p>

  For the 'sqrt' function holds (when A >= 0):</p><pre>
    sqrt(A) * sqrt(A) &lt;= A <font color=blue>and</font>
    (sqrt(A) + 1) * (sqrt(A) + 1) > A
</pre><p></p>


<a name="rational"><b>5.3 rational</b></a>
<p>
    The type <tt>'<font color=red>rational</font>'</tt> consists of rational numbers. The
  literals of the type <tt>'<font color=red>rational</font>'</tt> are finite and periodical
  decimal numbers. (The period of a periodical number is
  separated with an apostrophe (') from the rest of the
  number. E.g.: 3.'3 or 123.45'678)
</p><pre>
    Prefix operators:
      +         Identity
      -         Change sign
    Infix operators:
      +         Addition
      -         Subtraction
      *         Multiplication
      /         Division
      **        Power
                  ( <font color=red>rational</font> ** <font color=red>integer</font> )
      <font color=red>rational</font> <font color=blue>parse</font> A   Conversion of <font color=red>string</font> to <font color=red>rational</font>
                  ( Type of argument A: <font color=red>string</font> )
    Relations:
      =, &lt;>, &lt;, &lt;=, >, >=
    Functions:
      abs(A)    Absolute value
      rat(A)    Conversion to <font color=red>rational</font>
                  ( Type of argument A: <font color=red>integer</font>,
                    rat(1) => 1.0 )
      floor(A)  Truncation towards negative infinity
                  ( Type of result: <font color=red>integer</font>,
                    floor( 1.8)=> 1, floor( 1.0)=> 1,
                    floor(-1.0)=>-1, floor(-1.8)=>-2 )
      ceil(A)   Rounding up towards positive infinity
                  ( Type of result: <font color=red>integer</font>,
                    ceil( 1.2)=> 2, ceil( 1.0)=> 1,
                    ceil(-1.0)=>-1, ceil(-1.2)=>-1 )
      trunc(A)  Truncation towards zero
                  ( Type of result: <font color=red>integer</font>,
                    trunc( 1.8)=> 1, trunc( 1.0)=> 1,
                    trunc(-1.0)=>-1, trunc(-1.8)=>-1 )
      round(A)  Round towards zero
                  ( Type of result: <font color=red>integer</font>,
                    round(0.5)=>1, round(-0.5)=>-1,
                    round(0.4)=>0, round(-0.4)=>0 )
      str(A)    Conversion to <font color=red>string</font>
                  ( Type of result: <font color=red>string</font> )
      compare(A, B) Compare function
                  ( Type of result: <font color=red>integer</font>,
                    compare(1.9, 2.0) => -1,
                    compare(5.2, 5.2) => 0,
                    compare(8.0, 7.9) => 1 )
      hashCode(A) Hash function
                  ( Type of result: <font color=red>integer</font> )
    Statements:
      A +:= B   Increment A by B
                  ( A +:= B => A := A + B )
      A -:= B   Decrement A by B
                  ( A -:= B => A := A - B )
</pre><p>
  All calculations with <tt>'<font color=red>rational</font>'</tt> numbers are done exact.
  (Without any rounding)
</p>

<a name="float"><b>5.4 float</b></a>
<p>
    The type <tt>'<font color=red>float</font>'</tt> consists of floating point numbers.
</p><pre>
    Constants:
      Infinity  Positive infinity
      NaN       Not-a-Number
    Prefix operators:
      +         Identity
      -         Change sign
    Infix operators:
      +         Addition
      -         Subtraction
      *         Multiplication
      /         Division
                  ( A / 0.0 =>  Infinity for A > 0.0,
                    A / 0.0 => -Infinity for A &lt; 0.0,
                    0.0 / 0.0 => NaN )
      **        Power
                  ( A ** B is okay for A > 0.0,
                    A ** B => okay for A &lt; 0.0 and B is integer,
                    A ** B => NaN for A &lt; 0.0 and B is not integer,
                    A ** 0.0 => 1.0,
                    0.0 ** B => 0.0 for B > 0.0,
                    0.0 ** 0.0 => 1.0,
                    0.0 ** B => Infinity for B &lt; 0.0 )
      **        Power
                  ( Type of right operand: <font color=red>integer</font>
                    A ** B is okay for A > 0.0,
                    A ** B is okay for A &lt; 0.0,
                    A ** 0 => 1.0,
                    0.0 ** B => 0.0 for B > 0,
                    0.0 ** 0 => 1.0,
                    0.0 ** B => Infinity for B &lt; 0 )
      <font color=blue>digits</font>    Conversion to <font color=red>string</font> with specified precision
                  ( Type of right operand: <font color=red>integer</font>,
                    Type of result: <font color=red>string</font>,
                    3.1415 <font color=blue>digits</font> 2 => <font color=maroon>"3.14"</font>,
                    Infinity <font color=blue>digits</font> A => <font color=maroon>"Infinity"</font>,
                    -Infinity <font color=blue>digits</font> A => <font color=maroon>"-Infinity"</font>,
                    NaN <font color=blue>digits</font> A => <font color=maroon>"NaN"</font> )
      <font color=red>float</font> <font color=blue>parse</font> A   Conversion of <font color=red>string</font> to <font color=red>float</font>
                  ( Type of argument A: <font color=red>string</font> )
    Relations:
      =, &lt;>, &lt;, &lt;=, >, >=
    Functions:
      abs(A)    Absolute value
      flt(A)    Conversion to <font color=red>float</font>
                  ( Type of argument A: <font color=red>integer</font>,
                    flt(1) => 1.0 )
      floor(A)  Truncation towards negative infinity
                  ( floor( 1.8)=> 1.0, floor( 1.0)=> 1.0,
                    floor(-1.0)=>-1.0, floor(-1.2)=>-2.0,
                    floor( 0.9)=> 0.0, floor(-0.1)=>-1.0 )
      ceil(A)   Rounding up towards positive infinity
                  ( ceil( 1.2)=> 2.0, ceil( 1.0)=> 1.0,
                    ceil(-1.8)=>-1.0, ceil(-1.0)=>-1.0,
                    ceil( 0.1)=> 1.0, ceil(-0.9)=> 0.0 )
      trunc(A)  Truncation towards zero
                  ( Type of result: <font color=red>integer</font>,
                    trunc( 1.8)=> 1, trunc( 1.0)=> 1,
                    trunc(-1.8)=>-1, trunc(-1.0)=>-1,
                    trunc( 0.9)=> 0, trunc(-0.9)=> 0 )
      round(A)  Round towards zero
                  ( Type of result: <font color=red>integer</font>,
                    round(1.5)=>2, round(-1.5)=>-2,
                    round(0.5)=>1, round(-0.5)=>-1,
                    round(0.4)=>0, round(-0.4)=>0 )
      str(A)    Conversion to <font color=red>string</font>
                  ( Type of result: <font color=red>string</font>,
                    str(Infinity) => <font color=maroon>"Infinity"</font>,
                    str(-Infinity) => <font color=maroon>"-Infinity"</font>,
                    str(NaN) => <font color=maroon>"NaN"</font> )
      isnan(A)  Check if A is Not-a-Number
      sin(A)    Sine
      cos(A)    Cosine
      tan(A)    Tangent
      exp(A)    Exponential function
      log(A)    Natural logarithm
                  ( log(A) is okay for A > 0.0,
                    log(0.0)  => -Infinity,
                    log(-1.0) =>  NaN )
      log10(A)  Base 10 logarithm
                  ( log10(A) is okay for A > 0.0,
                    log10(0.0)  => -Infinity,
                    log10(-1.0) =>  NaN )
      sqrt(A)   Square root
                  ( sqrt(A) is okay for A >= 0.0,
                    sqrt(-1.0) => NaN )
      asin(A)   Inverse sine
                  ( asin(A) is okay for A >= -1.0 and A &lt;= 1.0,
                    asin(2.0) => NaN )
      acos(A)   Inverse cosine
                  ( acos(A) is okay for A >= -1.0 and A &lt;= 1.0,
                    acos(2.0) => NaN )
      atan(A)   Inverse tangent
      atan2(A, B) Inverse tangent of A / B
      sinh(A)   Hyperbolic sine
      cosh(A)   Hyperbolic cosine
      tanh(A)   Hyperbolic tangent
      rand(A, B) Random number in the range [A, B]
                  ( rand(A, B) returns a random number such that
                    A &lt;= rand(A, B) <font color=blue>and</font> rand(A, B) &lt;= B holds.
                    rand(A, A) => A,
                    rand(1.0, 0.0) => EXCEPTION RANGE_ERROR )
      compare(A, B) Compare function
                  ( Type of result: <font color=red>integer</font>,
                    compare(1.9, 2.1) => -1,
                    compare(5.3, 5.3) => 0,
                    compare(7.8, 7.7) => 1 )
      hashCode(A) Hash function
                  ( Type of result: <font color=red>integer</font> )
    Statements:
      A +:= B   Increment A by B
                  ( A +:= B => A := A + B )
      A -:= B   Decrement A by B
                  ( A -:= B => A := A - B )
</pre><p></p>

<a name="char"><b>5.5 char</b></a>
<p>
    A character literal is a character enclosed in single
  quotes. For example:
</p><pre>
    <font color=maroon>'a'</font>   <font color=maroon>' '</font>   <font color=maroon>'\n'</font>   <font color=maroon>'!'</font>   <font color=maroon>'\\'</font>   <font color=maroon>'2'</font>   <font color=maroon>'"'</font>   <font color=maroon>'\"'</font>   <font color=maroon>'\''</font>
</pre><p>
  In order to represent nonprintable characters and certain
  printable characters the following escape sequences may be
  used.
</p><pre>
    audible alert    BEL      \a    backslash    (\)   \\
    backspace        BS       \b    apostrophe   (')   \'   
    escape           ESC      \e    double quote (")   \"
    formfeed         FF       \f
    newline          NL (LF)  \n    control-A          \A
    carriage return  CR       \r      ...
    horizontal tab   HT       \t    control-Z          \Z
    vertical tab     VT       \v


    Infix operators:
      <font color=red>char</font> <font color=blue>conv</font> A   Conversion to <font color=red>char</font>
                  ( <font color=red>char</font> <font color=blue>conv</font> 65 => 'A' )
      <font color=red>char</font> <font color=blue>parse</font> A   Conversion of <font color=red>string</font> to <font color=red>char</font>
                  ( Type of argument A: <font color=red>string</font> )
    Relations:
      =, &lt;>, &lt;, &lt;=, >, >=
    Functions:
      ord(A)    Ordinal number
                  ( Type of result: <font color=red>integer</font> )
      chr(A)    Conversion to <font color=red>char</font>
                  ( Type of argument: <font color=red>integer</font> )
      succ(A)   Successor
                  ( succ(A)=>chr(succ(ord(A))) )
      pred(A)   Predecessor
                  ( pred(A)=>chr(pred(ord(A))) )
      str(A)    Conversion to <font color=red>string</font>
                  ( Type of result: <font color=red>string</font>,
                    str(<font color=maroon>'A'</font>) => <font color=maroon>"A"</font> )
      literal(A) Conversion to a literal
                  ( Type of result: <font color=red>string</font>,
                    literal(<font color=maroon>'A'</font>) => <font color=maroon>"'A'"</font> )
      upper(A)  Conversion to upper case character
                  ( upper(<font color=maroon>'A'</font>) => <font color=maroon>'A'</font> )
                  ( upper(<font color=maroon>'z'</font>) => <font color=maroon>'Z'</font> )
      lower(A)  Conversion to lower case character
                  ( lower(<font color=maroon>'A'</font>) => <font color=maroon>'a'</font> )
                  ( lower(<font color=maroon>'z'</font>) => <font color=maroon>'z'</font> )
      rand(A, B) Random character in the range [A, B]
                  ( rand(A, B) returns a random character such that
                    A &lt;= rand(A, B) <font color=blue>and</font> rand(A, B) &lt;= B holds.
                    rand(A, A) => A,
                    rand('B', <font color=maroon>'A'</font>) => EXCEPTION RANGE_ERROR )
      compare(A, B) Compare function
                  ( Type of result: <font color=red>integer</font>,
                    compare(<font color=maroon>'A'</font>, <font color=maroon>'B'</font>) => -1,
                    compare(<font color=maroon>'A'</font>, <font color=maroon>'A'</font>) => 0,
                    compare(<font color=maroon>'B'</font>, <font color=maroon>'A'</font>) => 1 )
      hashCode(A) Hash function
                  ( Type of result: <font color=red>integer</font> )
    Statements:
      incr(A)   Increment
                  ( incr(A) => A := succ(A) )
      decr(A)   Decrement
                  ( decr(A) => A := pred(A) )
</pre><p></p>

<a name="string"><b>5.6 string</b></a>
<p>
    The type <tt>'<font color=red>string</font>'</tt> describes sequences of ASCII-characters
  (including the empty string). A string literal is a
  sequence of ASCII-characters surrounded by double quotes.</p><pre>
  For example: <font color=maroon>""</font>   <font color=maroon>" "</font>   <font color=maroon>"\""</font>   <font color=maroon>"'"</font>   <font color=maroon>"String"</font>   <font color=maroon>"CAN\"T !"</font></pre><p>
  To represent control characters and certain other
  characters in strings the same escape sequences as for
  character literals may be used. Additionally quotation
  characters (") inside strings can be represented by
  preceding them with a backslash ( \" ).
</p><pre>
    Infix operators:
      &         String concatenation
                  ( <font color=maroon>"All "</font> & <font color=maroon>"OK"</font> => <font color=maroon>"All OK"</font> )
      &lt;&        String concatenation with weak priority
                Overloaded for various types with 'enable_io'
                  ( write(<font color=maroon>"i="</font> &lt;& i <font color=blue>digits</font> 2 <font color=blue>len</font> 6 &lt;& <font color=maroon>" $"</font>); )
      <font color=blue>mult</font>      String multiplication
                  ( Type of right operand: <font color=red>integer</font>,
                    <font color=maroon>"LA"</font> <font color=blue>mult</font> 3 => <font color=maroon>"LALALA"</font>,
                    <font color=maroon>"WORD"</font> <font color=blue>mult</font> 0 => <font color=maroon>""</font>,
                    <font color=maroon>"ANY"</font> <font color=blue>mult</font> -1 => EXCEPTION RANGE_ERROR )
      <font color=blue>lpad</font>      Left padding with spaces
                  ( Type of right operand: <font color=red>integer</font>,
                    <font color=maroon>"HELLO"</font> <font color=blue>lpad</font>  8 => <font color=maroon>"   HELLO"</font>,
                    <font color=maroon>"HELLO"</font> <font color=blue>lpad</font>  6 => <font color=maroon>" HELLO"</font>,
                    <font color=maroon>"HELLO"</font> <font color=blue>lpad</font>  5 => <font color=maroon>"HELLO"</font>,
                    <font color=maroon>"HELLO"</font> <font color=blue>lpad</font>  4 => <font color=maroon>"HELLO"</font>,
                    <font color=maroon>"HELLO"</font> <font color=blue>lpad</font>  0 => <font color=maroon>"HELLO"</font>,
                    <font color=maroon>"HELLO"</font> <font color=blue>lpad</font> -8 => <font color=maroon>"HELLO"</font> )
      <font color=blue>rpad</font>      Left padding with spaces
                  ( Type of right operand: <font color=red>integer</font>,
                    <font color=maroon>"HELLO"</font> <font color=blue>rpad</font>  8 => <font color=maroon>"HELLO   "</font>,
                    <font color=maroon>"HELLO"</font> <font color=blue>rpad</font>  6 => <font color=maroon>"HELLO "</font>,
                    <font color=maroon>"HELLO"</font> <font color=blue>rpad</font>  5 => <font color=maroon>"HELLO"</font>,
                    <font color=maroon>"HELLO"</font> <font color=blue>rpad</font>  4 => <font color=maroon>"HELLO"</font>,
                    <font color=maroon>"HELLO"</font> <font color=blue>rpad</font>  0 => <font color=maroon>"HELLO"</font>,
                    <font color=maroon>"HELLO"</font> <font color=blue>rpad</font> -8 => <font color=maroon>"HELLO"</font> )
      <font color=red>string</font> <font color=blue>parse</font> A   Identity
    Indices:
      [ A ]     Access one character
                  ( Type of argument A: <font color=red>integer</font>,
                    Type of result: <font color=red>char</font>,
                    A[1]=>First character,
                    A[length(A)]=>Last character )
      [ A .. B ] Access a substring from position A to B
                  ( Type of arguments A and B: <font color=red>integer</font> )
      [ A <font color=blue>len</font> B ] Access a substring from position A with length B
                  ( Type of arguments A and B: <font color=red>integer</font> )
      [ A .. ]  Access a substring beginning at position A
                  ( Type of argument A: <font color=red>integer</font> )
      [ .. A ]  Access a substring ending at position A
                  ( Type of argument A: <font color=red>integer</font> )
    Relations:
      =, &lt;>, &lt;, &lt;=, >, >=
    Functions:
      length(A) Length of <font color=red>string</font>
                  ( Type of result: <font color=red>integer</font>,
                    length(<font color=maroon>""</font>) => 0 )
      pos(A,B)  First position of <font color=red>string</font> B in <font color=red>string</font> A
                  ( Type of result: <font color=red>integer</font>,
                    pos(<font color=maroon>"ABCDE ABCDE"</font>,<font color=maroon>"BC"</font>)=>2,
                    pos(<font color=maroon>"XYZXYZ"</font>,<font color=maroon>"ZYX"</font>)=>0,
                    pos(<font color=maroon>"123456789"</font>,<font color=maroon>""</font>)=>0 )
      pos(A,B,C) First position of <font color=red>string</font> B in <font color=red>string</font> A
                 The search starts at position C of <font color=red>string</font> A
                  ( Type of argument C: <font color=red>integer</font>,
                    Type of result: <font color=red>integer</font>,
                    pos(<font color=maroon>"ABCDE ABCDE"</font> color=maroon>"BC"</font>, 3)=>8,
                    pos(<font color=maroon>"XYZXYZ"</font> color=maroon>"ZXY"</font>, 4)=>0,
                    pos(<font color=maroon>"123456789"</font> color=maroon>""</font>, 2)=>0 )
      rpos(A,B) Last position of <font color=red>string</font> B in <font color=red>string</font> A
                  ( Type of result: <font color=red>integer</font>,
                    rpos(<font color=maroon>"ABCDE ABCDE"</font>,<font color=maroon>"BC"</font>)=>8,
                    rpos(<font color=maroon>"XYZXYZ"</font>,<font color=maroon>"ZYX"</font>)=>0,
                    rpos(<font color=maroon>"123456789"</font>,<font color=maroon>""</font>)=>0 )
      replace(A,B,C) Replace all occurrences of <font color=red>string</font> B in
                <font color=red>string</font> A by <font color=red>string</font> C
                  ( replace(<font color=maroon>"old gold"</font>, <font color=maroon>"old"</font>, <font color=maroon>"one"</font>)=>
                    <font color=maroon>"one gone"</font> )
      trim(A)   Removes leading and trailing spaces and control chars
                  ( trim(<font color=maroon>" /n xyz /r"</font>) = <font color=maroon>"xyz"</font> )
      str(A)    Conversion to <font color=red>string</font>
                  ( Type of result: <font color=red>string</font>,
                    str(A) => A )
      literal(A) Conversion to a literal
                  ( Type of result: <font color=red>string</font>,
                    literal(<font color=maroon>"ABC"</font>) => <font color=maroon>"\"ABC\""</font>,
                    literal(<font color=maroon>"O' \"X\""</font>) => <font color=maroon>"\"O\' \\\"X\\\"\""</font> )
      upper(A)  Conversion to upper case characters
                  ( upper(<font color=maroon>"Upper"</font>)=><font color=maroon>"UPPER"</font> )
      lower(A)  Conversion to lower case characters
                  ( lower(<font color=maroon>"Lower"</font>)=><font color=maroon>"lower"</font> )
      compare(A, B) Compare function
                  ( Type of result: <font color=red>integer</font>,
                    compare(<font color=maroon>"ABC"</font>, <font color=maroon>"ABCD"</font>)=>-1,
                    compare(<font color=maroon>"ABC"</font>, <font color=maroon>"ABC"</font>)=>0,
                    compare(<font color=maroon>"ABCD"</font>, <font color=maroon>"ABCC"</font>)=>1 )
      hashCode(A) Hash function
                  ( Type of result: <font color=red>integer</font> )
    Statements:
      A &:= B   Append B to A
                  ( A &:= B => A := A & B )
      A @:= [B] C  Assign C to element B of <font color=red>string</font> A
                  ( Type of argument B: <font color=red>integer</font>,
                    Type of argument C: <font color=red>char</font>,
                    A @:= [B] C =>
                      A := A[..pred(B)] & str(C) & A[succ(B)..] )
</pre><p></p>

<a name="array"><b>5.7 array</b></a>
<p>
    The type <tt>'<font color=red>array baseType</font>'</tt> describes sequences of identical
  elements of a <tt>'<font color=red>baseType</font>'</tt>. (including the empty sequence).
  For example: <tt>'<font color=red>array integer</font>'</tt> describes array of integer elements.
</p><pre>
    Literal:
      [](elem1, elem2)  Create an array with the given elements
    Infix operators:
      &         Array concatenation
      <font color=blue>times</font>     Array generation
                  ( Left operand: <font color=red>integer</font>,
                    Right operand: <font color=red>baseType</font>,
                    A <font color=blue>times</font> B Generates an '<font color=red>array baseType</font>'
                    with A elements of B,
                    -1 <font color=blue>times</font> B => EXCEPTION RANGE_ERROR )
    Indices:
      [ A ]     Access one array element
                  ( Type of argument A: <font color=red>integer</font>,
                    Type of result: <font color=red>baseType</font>,
                    A[1]=>First element,
                    A[length(A)]=>Last element,
                    A[0] => EXCEPTION RANGE_ERROR,
                    A[succ(length(A))] => EXCEPTION RANGE_ERROR )
      [ A .. B ] Access a sub array
                  ( Type of arguments A and B: <font color=red>integer</font> )
      [ A .. ]  Access a sub array beginning at position A
                  ( Type of argument A: <font color=red>integer</font> )
      [ .. A ]  Access a sub array ending at position A
                  ( Type of argument A: <font color=red>integer</font> )
    Relations:
      =, &lt;>
    Functions:
      length(A) Length of array
                  ( Type of result: <font color=red>integer</font>,
                    length(0 <font color=blue>times</font> TRUE) => 0 )
      sort(A)   Sort array using the compare(<font color=red>array baseType</font>) function
    Statements:
      A &:= B   Append B to A
                  ( A &:= B => A := A & B )
      <font color=blue>for</font> A <font color=blue>range</font> B <font color=blue>do</font>
        C
      <font color=blue>end for</font>   Loop over all elements of an array
                  ( Type of argument A: <font color=red>baseType</font>,
                    Type of argument C: <font color=red>proc</font> )
</pre><p></p>

<a name="hash"><b>5.8 hash</b></a>
<p>
    The type <tt>'<font color=red>hash [keyType] baseType</font>'</tt> describes hash tables with
  elements of <tt>'<font color=red>baseType</font>'</tt> which can be accessed using an index of
  <tt>'<font color=red>keyType</font>'</tt>.
  For example: <tt>'<font color=red>hash [string] integer</font>'</tt> describes hash table of
  integer elements with a <tt>'<font color=red>string</font>'</tt> key.
</p><pre>
    Constants:
      <font color=red>hashType</font>.EMPTY_HASH  Empty hashtable
    Infix operators:
      <font color=blue>in</font>        Element
                  ( Left argument: <font color=red>baseType</font>,
                    Type of result: <font color=red>boolean</font> )
      <font color=blue>not in</font>    Is not Element
                  ( Left argument: <font color=red>baseType</font>,
                    Type of result: <font color=red>boolean</font> )
    Indices:
      [ A ]     Access one hashtable element
                  ( Type of argument A: <font color=red>keyType</font>,
                    Type of result: <font color=red>baseType</font> )
    Functions:
      length(A) Number of elements in hashtable A
                  ( Type of result: <font color=red>integer</font>,
                    length(hashType.EMPTY_HASH) => 0 )
      keys(A)   Unsorted array of keys of the hashtable A
                  ( Type of result: <font color=red>array keyType</font> )
      values(A) Unsorted array of valuess of the hashtable A
                  ( Type of result: <font color=red>array baseType</font> )
      flip(A)   Deliver a hash with keys and values flipped
                  ( Type of result: <font color=red>hash [baseType] array keyType</font> )
    Statements:
      incl(A,B,C) Include element B to hashtable A
                  ( Type of argument B: <font color=red>keyType</font>,
                    Type of argument C: <font color=red>baseType</font> )
      excl(A,B) Exclude element B from hashtable A
                  ( Type of argument B: <font color=red>keyType</font> )
      A @:= [B] C  Assign C to element B of hashtable A
                  ( Type of argument B: <font color=red>keyType</font>,
                    Type of argument C: <font color=red>baseType</font> )
      <font color=blue>for</font> A <font color=blue>range</font> B <font color=blue>do</font>
        C
      <font color=blue>end for</font>   Unsorted loop over all values of a hash
                  ( Type of argument A: <font color=red>baseType</font>,
                    Type of argument C: <font color=red>proc</font> )
      <font color=blue>for key</font> A <font color=blue>range</font> B <font color=blue>do</font>
        C
      <font color=blue>end for</font>   Unsorted loop over all keys of a hash
                  ( Type of argument A: <font color=red>keyType</font>,
                    Type of argument C: <font color=red>proc</font> )
      <font color=blue>for</font> A <font color=blue>key</font> B <font color=blue>range</font> C <font color=blue>do</font>
        D
      <font color=blue>end for</font>   Unsorted loop over all values and keys of a hash
                  ( Type of argument A: <font color=red>baseType</font>,
                    Type of argument B: <font color=red>keyType</font>,
                    Type of argument D: <font color=red>proc</font> )
</pre><p></p>

<a name="set"><b>5.9 set</b></a>
<p>
    The type <tt>'<font color=red>set of baseType</font>'</tt> describes a set of elements of a
  <tt>'<font color=red>baseType</font>'</tt>. (including the empty set).
</p><pre>
    Constants:
      <font color=red>setType</font>.EMPTY_SET  Empty set
    Infix operators:
      |         Union 
      &         Intersection
      -         Difference
      >&lt;        Symmetric Difference
      <font color=blue>in</font>        Element
                  ( Left argument: <font color=red>baseType</font>,
                    Type of result: <font color=red>boolean</font> )
      <font color=blue>not in</font>    Is not Element
                  ( Left argument: <font color=red>baseType</font>,
                    Type of result: <font color=red>boolean</font> )
    Relations:
      =, &lt;>, &lt;, &lt;=, >, >=
    Functions:
      card      Cardinality of a set
                  ( Type of result: <font color=red>integer</font>,
                    card(<font color=red>setType</font>.EMPTY_SET) = 0  )
      min       Minimal element
                  ( Type of result: <font color=red>baseType</font>,
                    Delivers the element from the set for
                    which the following condition holds:
                       Element &lt;= X
                    for all X which are in the set.
                    min(<font color=red>setType</font>.EMPTY_SET) => ERROR )
      max       Maximum element
                  ( Type of result: <font color=red>baseType</font></font>,
                    Delivers the element from the set for
                    which the following condition holds:
                       Element >= X
                    for all X which are in the set.
                    min(<font color=red>setType</font>.EMPTY_SET) => ERROR )
      compare(A, B) Compare function
                  ( Type of result: <font color=red>integer</font> )
      hashCode(A) Hash function
                  ( Type of result: <font color=red>integer</font> )
    Statements:
      incl(A,B) Include element B to set A
                  ( Type of argument B: <font color=red>baseType</font> )
      excl(A,B) Exclude element B from set A
                  ( Type of argument B: <font color=red>baseType</font> )
      <font color=blue>for</font> A <font color=blue>range</font> B <font color=blue>do</font>
        C
      <font color=blue>end for</font>   Loop over all elements of a set
                  ( Type of argument A: <font color=red>baseType</font>,
                    Type of argument C: <font color=red>proc</font> )
</pre><p></p>

<a name="struct"><b>5.10 struct</b></a>
<p>
    The type <tt>'<font color=red>struct</font>'</tt> describes all structured types.
</p><pre>
    Type generators:
      <font color=blue>new struct</font>
        <font color=blue>var</font> <font color=red>aType</font>: name <font color=blue>is</font> value;
        ...
      <font color=blue>end struct</font>
                Create new structure type

      <font color=blue>new</font> <font color=red>metaType</font> <font color=blue>struct</font>
        <font color=blue>var</font> <font color=red>aType</font>: name <font color=blue>is</font> value;
        ...
      <font color=blue>end struct</font>
                Create new structure type as subtype of <tt>'<font color=red>metaType</font>'</tt>,
                which is not a structure

      <font color=blue>sub</font> <font color=red>metaType</font> <font color=blue>struct</font>
        <font color=blue>var</font> <font color=red>aType</font>: name <font color=blue>is</font> value;
        ...
      <font color=blue>end struct</font>
                Create new structure type as subtype of <tt>'<font color=red>metaType</font>'</tt>,
                which is a structure type. The new stucture type inherits all
		elements of the structure type <tt>'<font color=red>metaType</font>'</tt>.

      <font color=blue>var</font> <font color=red>aType</font>: name <font color=blue>is</font> value
                Declare structure element 'name' with 'value'

    Infixoperators:
      .         Access Element of STRUCT
                  ( example.element )
      ->        Access Element of ptr STRUCT
                  ( example->element )
    Relations:
      =, &lt;>
    Funktions:
      incl(A, B) Include element in MODULE
                  ( Type of argument B: <font color=red>reference</font> )
      excl(A, B) Exclude element from MODULE
                  ( Type of argument B: <font color=red>reference</font> )
</pre><p></p>

<a name="reference"><b>5.11 reference</b></a>
<p>
    The type <tt>'<font color=red>reference</font>'</tt> describes a reference to any
  object.
</p><pre>
    Constants:
      NIL       Reference to no element.
    Infix operators:
      <font color=red>reference</font> <font color=blue>value</font> A  Dereference as <font color=red>reference</font>
                  ( Type of result: <font color=red>reference</font> )
      <font color=red>ref_list</font> <font color=blue>value</font> A   Dereference as <font color=red>ref_list</font>
                  ( Type of result: <font color=red>ref_list</font> )
      <font color=red>integer</font> <font color=blue>value</font> A    Dereference as <font color=red>integer</font>
                  ( Type of result: <font color=red>integer</font> )
      <font color=red>float</font> <font color=blue>value</font> A      Dereference as <font color=red>float</font>
                  ( Type of result: <font color=red>float</font> )
      <font color=red>char</font> <font color=blue>value</font> A       Dereference as <font color=red>char</font>
                  ( Type of result: <font color=red>char</font> )
      <font color=red>string</font> <font color=blue>value</font> A     Dereference as <font color=red>string</font>
                  ( Type of result: <font color=red>string</font> )
      <font color=red>bitset</font> <font color=blue>value</font> A     Dereference as <font color=red>bitset</font>
                  ( Type of result: <font color=red>bitset</font> )
      <font color=red>program</font> <font color=blue>value</font> A    Dereference as <font color=red>program</font>
                  ( Type of result: <font color=red>program</font> )
      <font color=red>ACTION</font> <font color=blue>value</font> A     Dereference as <font color=red>ACTION</font>
                  ( Type of result: <font color=red>ACTION</font> )
      <font color=red>type</font> <font color=blue>value</font> A       Dereference as <font color=red>type</font>
                  ( Type of result: <font color=red>type</font> )
      <font color=red>reference</font> <font color=blue>parse</font> A  Conversion of <font color=red>string</font> to <font color=red>reference</font>
                  ( Type of argument A: <font color=red>string</font> )
    Relations:
      =, &lt;>
    Functions:
      str(A)             Conversion to <font color=red>string</font>
                  ( Type of result: <font color=red>string</font> )
      getType(A)         Delivers the type of an object
                  ( Type of result: <font color=red>type</font> )
      obj_number(A)      Delivers an unique number for each object
                  ( Type of result: <font color=red>integer</font> )
      is_var(A)          Reference to a variable object
                  ( Type of result: <font color=red>boolean</font> )
      obj_class(A)       Gets the class of an object
                  ( Type of result: <font color=red>string</font> )
      params(A)          Gets the formal params of a function
                  ( Type of result: <font color=red>ref_list</font> )
      locals(A)          Gets the local variables of a function
                  ( Type of result: <font color=red>ref_list</font> )
      body(A)            Gets the body of a function
      func_result(A)     Gets the result object of a function
      func_res_init(A)   Gets the init value of the result
                         object of a function
      compare(A, B) Compare function
                  ( Type of result: <font color=red>integer</font> )
      hashCode(A) Hash function
                  ( Type of result: <font color=red>integer</font> )
</pre><p></p>

<a name="ref_list"><b>5.12 ref_list</b></a>
<p>
    The type <tt>'<font color=red>ref_list</font>'</tt> describes a list of <tt>'<font color=red>reference</font>'</tt> objects.
</p><pre>
    Constants:
      <font color=red>ref_list</font>.EMPTY  Empty reference list.
    Infix operators:
      &         Ref_list list concatenation
    Indices:
      [ A ]     Access one ref_list element
                  ( Type of argument A: <font color=red>integer</font>,
                    Type of result: <font color=red>reference</font>,
                    A[1]=>First element,
                    A[length(A)]=>Last element,
                    A[0] => EXCEPTION RANGE_ERROR,
                    A[succ(length(A))] => EXCEPTION RANGE_ERROR )
      [ A .. B ]  Access a sub list
                  ( Type of arguments A and B: <font color=red>integer</font> )
      [ A .. ]  Access a sub list beginning at position A
                  ( Type of argument A: <font color=red>integer</font> )
      [ .. A ]  Access a sub list ending at position A
                  ( Type of argument A: <font color=red>integer</font> )
    Relations:
      =, &lt;>
    Funktions:
      length(A) Length of ref_list
                  ( Type of result: <font color=red>integer</font>,
                    length(<font color=red>ref_list</font>.EMPTY) => 0 )
      incl(A, B) Include element in list
                  ( Type of argument B: <font color=red>reference</font> )
      excl(A, B) Exclude element from list
                  ( Type of argument B: <font color=red>reference</font> )
    Statements:
      for A range B do
        C
      end for   Loop over all elements of a ref_list
                  ( Type of argument A: <font color=red>reference</font>,
                    Type of argument C: <font color=red>proc</font> )
</pre><p></p>

<a name="ptr"><b>5.13 ptr</b></a>
<p>
    The type <tt>'<font color=red>ptr baseType</font>'</tt> describes a pointer to an object
  of a <tt>'<font color=red>baseType</font>'</tt>. With
</p><pre>
    <font color=blue>const</font> <font color=red>type</font>: ptrType <font color=blue>is</font> <font color=red>ptr baseType</font>;
</pre><p>
  a new pointer type <tt>'<font color=red>ptrType</font>'</tt> is declared.
</p><pre>
    Constants:
      <font color=red>ptrType</font>.NIL   Reference to no element
    Prefix operators:
      &         Address of
                  ( Type of operand: <font color=red>baseType</font> )
    Postfix operators:
      ^         Dereference
                  ( Type of result: <font color=red>baseType</font> )
    Infix operators:
      <font color=red>ptrType</font> <font color=blue>conv</font> A  Conversion from <font color=red>reference</font> A to <font color=red>ptrType</font>
      <font color=red>reference</font> <font color=blue>conv</font> A  Conversion from <font color=red>ptrType</font> A to <font color=red>reference</font>
    Relations:
      =, &lt;>
    Functions:
      base_type(<font color=red>ptrType</font>)  Gets the <font color=red>baseType</font> of a <font color=red>ptrType</font>
                  ( Type of argument <font color=red>ptrType</font>: <font color=red>type</font> )
</pre><p></p>

<a name="ENUMERATION"><b>5.14 ENUMERATION</b></a>
<p>
    With
</p><pre>
    <font color=blue>const</font> <font color=red>type</font>: enumType <font color=blue>is new enum</font>
        enum_literal1, enum_literal2
      <font color=blue>end enum</font>;
</pre><p>
  a new enumeration type is declared. The values of this type are:
</p><pre>
    enum_literal1 and enum_literal2
</pre><p>
  For a enumeration type only few operations are predefined.
  Additional operations must be defined separately. So it is
  necessary to define the <tt>'str'</tt> and <tt>'<font color=blue>parse</font>'</tt> functions in order to
  do i/o for a new enumeration type.
</p><pre>
    Infix operators:
      <font color=red>enumType</font> <font color=blue>conv</font> A  Conversion from <font color=red>integer</font> A to <font color=red>enumType</font>
                  ( Type of argument A: <font color=red>integer</font>,
                    <font color=red>enumType</font> <font color=blue>conv</font> 0 => enum_literal1 )
      <font color=red>integer</font> <font color=blue>conv</font> A   Conversion from <font color=red>enumType</font> A to <font color=red>integer</font>
                  ( Type of result: <font color=red>integer</font>,
                    <font color=red>integer</font> <font color=blue>conv</font> enum_literal1 => 0 )
    Relations:
      =, &lt;>, &lt;, &lt;=, >, >=
    Funktions:
      ord(A)    Ordinal number
                  ( Type of result: <font color=red>integer</font> )
      succ(A)   Successor
                  ( succ(A)=>enumType <font color=blue>conv</font>(succ(ord(A))) )
      pred(A)   Predecessor
                  ( pred(A)=>enumType <font color=blue>conv</font>(pred(ord(A))) )
    Statements:
      incr(A)   Increment
                  ( incr(A) => A:=succ(A) )
      decr(A)   Decrement
                  ( decr(A) => A:=pred(A) )
</pre><p></p>

<a name="color"><b>5.15 color</b></a>
<p>
    The type <tt>'<font color=red>color</font>'</tt> describes colors.
</p><pre>
    Constants:
      black         is color(0, 0, 0);
      dark_red      is color(32768, 0, 0);
      dark_green    is color(0, 32768, 0);
      brown         is color(32768, 16384, 0);
      dark_blue     is color(0, 0, 32768);
      dark_magenta  is color(32768, 0, 32768);
      dark_cyan     is color(0, 65535, 65535);
      light_gray    is color(49152, 49152, 49152);
      dark_gray     is color(16384, 16384, 16384);
      light_red     is color(65535, 0, 0);
      light_green   is color(0, 65535, 0);
      yellow        is color(65535, 65535, 0);
      light_blue    is color(0, 0, 65535);
      light_magenta is color(65535, 0, 65535);
      light_cyan    is color(32768, 65535, 65535);
      white         is color(65535, 65535, 65535);
      orange        is color(65535, 32768, 0);
      amber         is color(49152, 32768, 16384);
      pink          is color(65535, 32768, 32768);
    Infix operators:
      +         Add two colors in an additive color system
    Relations:
      =, &lt;>
    Functions:
      color(R,G,B) Creates a color from Red, Green and Blue 
                  ( Type of argument R: <font color=red>integer</font>,
                    Type of argument G: <font color=red>integer</font>,
                    Type of argument B: <font color=red>integer</font> )
</pre><p></p>

<a name="time"><b>5.16 time</b></a>
<p>
    The type <tt>'<font color=red>time</font>'</tt> describes times and dates.
</p><pre>
    Infix operators:
      +         Add a duration to a time
                  ( Type of right operand: <font color=red>duration</font> )
      -         Subtract a duration from a time
                  ( Type of right operand: <font color=red>duration</font> )
      -         Subtract two times
                  ( Type of result: <font color=red>duration</font> )
      <font color=red>time</font> <font color=blue>parse</font> A   Conversion of <font color=red>string</font> to <font color=red>time</font>
                  ( Type of argument A: <font color=red>string</font>,
                    <font color=red>time</font> <font color=blue>parse</font> <font color=maroon>"2005-02-28 12:00:01"</font> => 2005-02-28 12:00:01,
                    <font color=red>time</font> <font color=blue>parse</font> <font color=maroon>"2005-02-29 12:00:01"</font> => EXCEPTION RANGE_ERROR )
    Relations:
      =, &lt;>, &lt;, &lt;=, >, >=
    Functions:
      time(NOW) Gets the current time
      str(A)    Conversion to <font color=red>string</font>
                  ( Type of result: <font color=red>string</font> )
      str_date(A) Conversion of the date to <font color=red>string</font>
                  ( Type of result: <font color=red>string</font> )
      str_time(A) Conversion of the daytime to <font color=red>string</font>
                  ( Type of result: <font color=red>string</font> )
      truncToSecond(A) Trunc a time to a second
      truncToMinute(A) Trunc a time to a minute
      truncToHour(A) Trunc a time to a hour
      truncToDay(A) Trunc a time to a day
      truncToMonth(A) Trunc a time to a month
      truncToYear(A) Trunc a time to a year
      dayOfWeek(A)  Day of the week with Monday as 1
                  ( Type of result: <font color=red>integer</font> )
      dayOfYear(A)  Day of the year with 1 January as 1
                  ( Type of result: <font color=red>integer</font> )
      toGMT(A)  Conversion to Greenwich Mean Time
      julianDayNumber(A)  Number of days that have elapsed since
                January 1, 4713 BC in the proleptic Julian calendar
                  ( Type of result: <font color=red>integer</font> )
      julianDayNumToTime(A)  Convert julian day number to time
                  ( Type of argument A: <font color=red>integer</font> )
      compare(A, B) Compare function
                  ( Type of result: <font color=red>integer</font> )
      hashCode(A) Hash function
                  ( Type of result: <font color=red>integer</font> )
    Statements:
      A +:= B   Increment A by B
                  ( Type of argument B: <font color=red>duration</font>,
                    A +:= B => A := A + B )
      A -:= B   Decrement A by B
                  ( Type of argument B: <font color=red>duration</font>,
                    A -:= B => A := A - B )
      await(A)  Wait until the given time
</pre><p></p>

<a name="duration"><b>5.17 duration</b></a>
<p>
    The type <tt>'<font color=red>duration</font>'</tt> describes time and date durations.
</p><pre>
    Prefix operators:
      +         Identity
      -         Change sign
    Infix operators:
      +         Add two durations
      -         Subtract two durations
      *         Multiply a duration by an <font color=red>integer</font>
                  ( Type of left operand: <font color=red>integer</font> )
      *         Multiply a duration by an <font color=red>integer</font>
                  ( Type of right operand: <font color=red>integer</font> )
      <font color=red>duration</font> <font color=blue>parse</font> A   Conversion of <font color=red>string</font> to <font color=red>duration</font>
                  ( Type of argument A: <font color=red>string</font>,
                    <font color=red>duration</font> <font color=blue>parse</font> <font color=maroon>"0-02-28 12:00:01"</font> => 0-02-28 12:00:01,
                    <font color=red>duration</font> <font color=blue>parse</font> <font color=maroon>"0-13-29 12:00:01"</font> => EXCEPTION RANGE_ERROR )
    Relations:
      =, &lt;>, &lt;, &lt;=, >, >=
    Functions:
      years(A)  Years of the <font color=red>duration</font>
                  ( Type of result: <font color=red>integer</font> )
      months(A) Months of the <font color=red>duration</font>
                  ( Type of result: <font color=red>integer</font> )
      days(A)   Days of the <font color=red>duration</font>
                  ( Type of result: <font color=red>integer</font> )
      hours(A)  Hours of the <font color=red>duration</font>
                  ( Type of result: <font color=red>integer</font> )
      minutes(A) Minutes of the <font color=red>duration</font>
                  ( Type of result: <font color=red>integer</font> )
      seconds(A) Seconds of the <font color=red>duration</font>
                  ( Type of result: <font color=red>integer</font> )
      mycro_seconds(A)  Mycro seconds of the <font color=red>duration</font>
                  ( Type of result: <font color=red>integer</font> )
      str(A)    Conversion to <font color=red>string</font>
                  ( Type of result: <font color=red>string</font> )
      compare(A, B) Compare function
                  ( Type of result: <font color=red>integer</font> )
      hashCode(A) Hash function
                  ( Type of result: <font color=red>integer</font> )
    Statements:
      wait(A)   Wait for given duration
</pre><p></p>

<a name="file"><b>5.18 file</b></a>
<p>
    The type <tt>'<font color=red>file</font>'</tt> describes sequential files.
</p><pre>
    Constants:
      STD_NULL  Standard null file
      STD_IN    Standard input of the operating system
      STD_OUT   Standard output of the operating system
      STD_ERR   Standard error output of the operating system
    Variables:
      IN        Standard input file used for file input
                  operations when no file is specified
                  ( IN is initialized with STD_IN )
      OUT       Standard output file used for file output
                  operations when no file is specified
                  ( OUT is initialized with STD_OUT )
    Infix statements:
      &lt;&lt;        Write <font color=red>string</font> to file
                  ( Type of right operand: <font color=red>string</font>,
                    file &lt;&lt; <font color=red>string</font> )
      >>        Read <font color=red>string</font> from file
                  ( Type of right operand: <font color=red>string</font>,
                    file >> <font color=red>string</font> )
    Relations:
      =, &lt;>
    Functions:
      open(A, B) Open external file
                  ( Type of argument A: <font color=red>string</font>,
                    Type of argument B: <font color=red>string</font>,
                    Type of result: <font color=red>file</font>,
                    Returns STD_NULL if open was not
                    possible )
      open_utf8(A, B) Open external UTF-8 file
                  ( Type of argument A: <font color=red>string</font>,
                    Type of argument B: <font color=red>string</font>,
                    Type of result: <font color=red>file</font>,
                    Returns STD_NULL if open was not
                    possible )
      length(A) Length of file A
                  ( Type of result: <font color=red>integer</font> )
      tell(A)   Return the actual file position
                  ( Type of argument: <font color=red>file</font>,
                    The first position in the file is 1 )
      getc(A)   Get one character from file A
                  ( Type of result: <font color=red>char</font> )
      gets(A, B) Get <font color=red>string</font> with maximum length B from file A
                  ( Type of argument A: <font color=red>integer</font>,
                    Type of argument B: <font color=red>file</font>,
                    Type of result: <font color=red>string</font>,
                    gets(A, -1) => EXCEPTION RANGE_ERROR )
      getwd(A)  Get one word from file A
                  ( Type of result: <font color=red>string</font> )
      getln(A)  Get one line from file A
                  ( Type of result: <font color=red>string</font> )
      eoln(A)   End of line
                  ( Type of result: <font color=red>boolean</font> )
      eof(A)    End of file
                  ( Type of result: <font color=red>boolean</font> )
    Statements:
      write(A, B) Write <font color=red>string</font> B to file A
                  ( Type of argument B: <font color=red>string</font> )
      writeln(A) Write a new line to file A
      writeln(A, B) Write <font color=red>string</font> B and new line to file A
                  ( Type of argument B: <font color=red>string</font> )
      backSpace(A) Write backspace to file A
      close(A)  Close file A
      flush(A)  Flush file A
      seek(A, B) Set actual file position of file A to B
                  ( Type of argument B: <font color=red>integer</font>,
                    seek(A, 1) => Set to file begin,
                    seek(A, length(A)) => Set to last position,
                    seek(A, length(A) + 1) => Set to end of file,
                    seek(A, -1) => EXCEPTION RANGE_ERROR )
</pre><p></p>

<a name="text"><b>5.19 text</b></a>
<p>
    The type <tt>'<font color=red>text</font>'</tt> describes two dimensional files.
</p><pre>
    Infix statements:
      &lt;&lt;        Write <font color=red>string</font> to text
                  ( Type of right operand: <font color=red>string</font>,
                    text &lt;&lt; <font color=red>string</font> )
      >>        Read <font color=red>string</font> from text
                  ( Type of right operand: <font color=red>string</font>,
                    file >> <font color=red>string</font> )
    Relations:
      =, &lt;>
    Functions:
      open_window(F, A, B, C, D) Open a text
                  ( Type of argument A: <font color=red>integer</font>,
                    Type of argument B: <font color=red>integer</font>,
                    Type of argument C: <font color=red>integer</font>,
                    Type of argument D: <font color=red>integer</font> )
      height(A) Height of the text
                  ( Type of result: <font color=red>integer</font> )
      width(A)  Width of the text
                  ( Type of result: <font color=red>integer</font> )
      line(A)   Current line of the text
                  ( Type of result: <font color=red>integer</font> )
      column(A) Current column of the text
                  ( Type of result: <font color=red>integer</font> )
    Statements:
      write(A, B) Write <font color=red>string</font> B to text A
                  ( Type of argument B: <font color=red>string</font> )
      writeln(A) Write a new line to file A
      writeln(A, B) Write <font color=red>string</font> B and new line to text A
                  ( Type of argument B: <font color=red>string</font> )
      backSpace(A) Write backspace to text A
      close(A)  Close text A
      flush(A)  Flush text A
      clear(A)  Clear the window
      v_scroll(A) Scroll the window vertical
      h_scroll(A) Scroll the window horizontal
      color(A, B) Set foreground color of the text
                  ( Type of argument B: <font color=red>color</font> )
      color(A, B, C) Set foreground and background color of the text
                  ( Type of argument B: <font color=red>color</font>,
                    Type of argument C: <font color=red>color</font> )
      setPos(A, B, C) Set the current position of the text
                  ( Type of argument B: <font color=red>integer</font>
                    Type of argument C: <font color=red>integer</font> )
      setLine(A, B) Set the current line of the text
                  ( Type of argument B: <font color=red>integer</font> )
      setColumn(A, B) Set the current column of the text
                  ( Type of argument B: <font color=red>integer</font> )
      box(A)    Write a box around the window
      clear_box(A) Clear the box around the window
      cursor_on(A) Make the cursor visible
      cursor_off(A) Make the cursor invisible
</pre><p></p>

<a name="func"><b>5.20 func</b></a>
<p>
    The type <tt>'<font color=red>func baseType</font>'</tt> describes functions which return
  a <tt>'<font color=red>baseType</font>'</tt>. For example: <tt>'<font color=red>func integer</font>'</tt> describes an <tt>'<font color=red>integer</font>'</tt>
  function.
</p><pre>
    Values:
      ord, str, abs, sqrt, rand, A + B, A * B, A ** B,
      trunc, round, sin, cos, compare, hashCode, pos,
      replace, trim, length, keys, color, dayOfWeek,
      ...
                Every function declared with <font color=blue>const</font> <font color=red>func</font> ... is a value

    Prefix operators:
      <font color=blue>func</font>
      <font color=blue>result</font>
        <font color=blue>var</font> <font color=red>baseType</font>: result <font color=blue>is</font> <font color=red>baseType</font>.value;
      <font color=blue>begin</font>
        statements
      <font color=blue>end func</font>
                Create a <font color=red>baseType</font> function
                  ( Type of <tt>'statements'</tt>: <font color=red>proc</font>,
                    Type of result: <font color=red>func baseType</font> )

      <font color=blue>func</font>
      <font color=blue>result</font>
        <font color=blue>var</font> <font color=red>baseType</font>: result <font color=blue>is</font> <font color=red>baseType</font>.value;
      <font color=blue>local</font>
        declarations
      <font color=blue>begin</font>
        statements
      <font color=blue>end func</font>
                Create a <font color=red>baseType</font> function with local variables
                  ( Type of <tt>'declarations'</tt>: <font color=red>proc</font>,
                    Type of <tt>'statements'</tt>: <font color=red>proc</font>,
                    Type of result: <font color=red>func baseType</font> )

      <font color=blue>return</font> value
                Create a function with the result type of value
                  ( Type of value: <font color=red>anyType</font> - which means: any type,
                    Type of result: <font color=red>func anyType</font> )
</pre><p>
  Functions are declared as constants with a <tt>'<font color=red>func</font>'</tt> type and
  are initialized with a <tt>'<font color=blue>func result</font> ...'</tt> or <tt>'<font color=blue>return</font> ...'</tt> operator.
  For example:
</p><pre>
    <font color=blue>const</font> <font color=red>func integer</font>: tak (<font color=blue>in</font> <font color=red>integer</font>: x, <font color=blue>in</font> <font color=red>integer</font>: y, <font color=blue>in</font> <font color=red>integer</font>: z) <font color=blue>is func</font>
      <font color=blue>result</font>
        <font color=blue>var</font> <font color=red>integer</font>: result <font color=blue>is</font> 0;
      <font color=blue>begin</font>
        <font color=blue>if</font> y >= x <font color=blue>then</font>
          result := z;
        <font color=blue>else</font>
          result := tak(tak(pred(x), y, z),
                        tak(pred(y), z, x),
                        tak(pred(z), x, y));
        <font color=blue>end if</font>;
      <font color=blue>end func</font>
</pre><p>
  Another example using the <tt>'<font color=blue>return</font>'</tt> function:
</p><pre>
    <font color=blue>const</font> <font color=red>func float</font>: convertRadianToDegree (<font color=blue>in</font> <font color=red>float</font>: x) <font color=blue>is</font>
      <font color=blue>return</font> x * 57.295779513082320876798154814114;
</pre><p>
  This <tt>'<font color=blue>return</font>'</tt> function should not be confused with a <tt>'<font color=blue>return</font>'</tt>
  statement. It is important to note that no <tt>'<font color=blue>return</font>'</tt> statement
  exists. The declaration for the <tt>'<font color=blue>return</font>'</tt> function is as follows:
</p><pre>
    <font color=blue>const</font> <font color=red>func func aType</font>: return (<font color=blue>ref</font> <font color=red>func aType</font> <font color=blue>param</font>)  <font color=blue>is action</font> <font color=maroon>"PRC_RETURN"</font>;
    <font color=blue>const</font> <font color=red>func func aType</font>: return (<font color=blue>ref</font> <font color=red>aType</font> <font color=blue>param</font>)       <font color=blue>is action</font> <font color=maroon>"PRC_RETURN"</font>;
</pre><p>
  The <tt>'<font color=red>func</font>'</tt> types can also be used for parameters.
  Functions which use a <tt>'<font color=red>func</font>'</tt> parameter do not evaluate this
  parameter before the function call. Instead this parameter can
  be evaluated zero or more times inside the function. For example:
</p><pre>
    <font color=blue>const</font> <font color=red>func boolean</font>: (<font color=blue>in</font> <font color=red>boolean</font>: first) and (<font color=blue>in</font> <font color=red>func boolean</font>: second) <font color=blue>is func</font>
      <font color=blue>result</font>
        <font color=blue>var</font> <font color=red>boolean</font>: result <font color=blue>is</font> FALSE;
      <font color=blue>begin</font>
        <font color=blue>if</font> first <font color=blue>then</font>
          result := second;
        <font color=blue>end if</font>;
      <font color=blue>end func</font>;
</pre><p>
  Here the second parameter is only evaluated when the first
  parameter is <tt>'TRUE'</tt>.
</p>

<a name="varfunc"><b>5.21 varfunc</b></a>
<p>
    The type <tt>'<font color=red>varfunc baseType</font>'</tt> describes functions which return
  a <tt>'<font color=red>baseType</font>'</tt> variable. For example: A function which returns an
  <tt>'<font color=red>integer</font>'</tt> variable is described with <tt>'<font color=red>varfunc integer</font>'</tt>. A call 
  of a <tt>'<font color=red>varfunc</font>'</tt> can be used at the left side of an assignment.
  Generally a <tt>'<font color=red>varfunc</font>'</tt> can be used at places where an <tt>'<font color=blue>inout</font>'</tt>
  parameter requests a variable.
</p><pre>
    Prefix operators:
      <font color=blue>return var</font> value;
                Create a varfunc which returns the variable <tt>'value'</tt>
                  ( Type of value: <font color=red>anyType</font> - which means: any type,
                    Accessright of value: <font color=blue>var</font> = A variable, an <tt>'<font color=blue>inout</font>'</tt> parameter or a <tt>'<font color=red>varfunc</font>'</tt>
                    Type of result: <font color=red>varfunc anyType</font> )
</pre><p>
    Varfunctions are used to express <tt>'<font color=red>array</font>'</tt>, <tt>'<font color=red>hash</font>'</tt> and <tt>'<font color=red>struct</font>'</tt>
  accesses which can be used at the left and right side of an
  assignment. The access function for a <tt>'<font color=red>hash</font>'</tt> is defined as:
</p><pre>
    <font color=blue>const</font> <font color=red>func baseType</font>: (<font color=blue>in</font> <font color=red>hashType</font>: aHash) [ (<font color=blue>in</font> <font color=red>keyType</font>: aKey) ] <font color=blue>is</font>
      <font color=blue>return</font> INDEX(aHash, aKey, hashCode(aKey), <font color=red>hashType</font>.keyCompare);

    <font color=blue>const</font> <font color=red>varfunc baseType</font>: (<font color=blue>inout</font> <font color=red>hashType</font>: aHash) [ (<font color=blue>in</font> <font color=red>keyType</font>: aKey) ] <font color=blue>is</font>
      <font color=blue>return var</font> INDEX(aHash, aKey, hashCode(aKey), <font color=red>hashType</font>.keyCompare);
</pre><p>
  The example above shows that functions with <tt>'<font color=blue>in</font>'</tt> and <tt>'<font color=blue>inout</font>'</tt>
  parameters can be overloaded. At the right side of an assignment
  the <tt>'<font color=red>func</font>'</tt> is called, while at the left side the <tt>'<font color=red>varfunc</font>'</tt>
  is called. That way the access functions of <font color=red>array</font>s, <font color=red>hash</font>s
  and <font color=red>struct</font>s can be used in the usual way. 
</p>

<a name="void"><b>5.22 void</b></a>
<p>
    The type <tt>'<font color=red>void</font>'</tt> describes the empty type.
</p><pre>
    Value:
      empty     This is the only value of the type <tt>'<font color=red>void</font>'</tt>.
</pre><p></p>

<a name="proc"><b>5.23 proc</b></a>
<p>
    The type <tt>'<font color=red>proc</font>'</tt> describes procedures. The type <tt>'<font color=red>proc</font>'</tt>
  is defined as <tt>'<font color=red>func void</font>'</tt>.
</p><pre>
    Values:
      noop;
      <font color=blue>while</font> ... <font color=blue>do</font> ... <font color=blue>end while</font>;
      <font color=blue>repeat</font> ... <font color=blue>until</font> ... ;
      writeln( ... );
      A := B;
      incr(A);
      ...
                Every procedure declared with <font color=blue>const</font> <font color=red>proc</font>: ... is a value
                The procedure <tt>'noop'</tt> does nothing and is used as empty procedure.

    Prefix operators:
      <font color=blue>func</font>
      <font color=blue>begin</font>
        statements
      <font color=blue>end func</font>
                Create a procedure
                  ( Type of <tt>'statements'</tt>: <font color=red>proc</font>,
                    Type of result: <font color=red>proc</font> )

      <font color=blue>func</font>
      <font color=blue>local</font>
        declarations
      <font color=blue>begin</font>
        statements
      <font color=blue>end func</font>
                Create a procedure with local variables
                  ( Type of <tt>'declarations'</tt>: <font color=red>proc</font>,
                    Type of <tt>'statements'</tt>: <font color=red>proc</font>,
                    Type of result: <font color=red>proc</font> )
</pre><p></p>

<a name="type"><b>5.24 type</b></a>
<p>
    The type <tt>'<font color=red>type</font>'</tt> describes all types.
</p><pre>
    Values:
      <font color=red>void</font>, <font color=red>boolean</font>, <font color=red>integer</font>, <font color=red>rational</font>, <font color=red>float</font>, <font color=red>char</font>,
      <font color=red>string</font>, <font color=red>reference</font>, <font color=red>ref_list</font>, <font color=red>color</font>, <font color=red>time</font>, <font color=red>duration</font>
      <font color=red>file</font>, <font color=red>proc</font>, <font color=red>type</font>, ...
                Every type declared with <font color=blue>const</font> <font color=red>type</font>: ... is a value
                The type <tt>'<font color=red>void</font>'</tt> is used as empty type.
    Prefix operators:
      func      Function type
                  ( <font color=red>func char</font> => Function which returns a <font color=red>char</font> )
      varfunc   Varfunc type
                  ( <font color=red>varfunc char</font> => Function which returns a <font color=red>char</font> variable )
      ptr       Pointer type
                  ( <font color=red>ptr bitset</font> => Pointer to <font color=red>bitset</font> )
      array     Array type
                  ( <font color=red>array string</font> => Array of <font color=red>string</font>s )
      set of    Set type
                  ( <font color=red>set of integer</font> => Set of <font color=red>integer</font> )
      subtype   Create subtype of existing type
                  ( <font color=red>subtype char</font> => Subtype of <font color=red>char</font> )
    Relations:
      =, &lt;>
    Functions:
      str(A)    Conversion to <font color=red>string</font>
                  ( Type of result: <font color=red>string</font> )
      newtype   Create a new type
      gentype   Generate a type
      gensub(A) Generate a subtype
      typeof(A) Get the type of an expression
                  ( Type of argument A: Defined for all types,
                    typeof(1) => <font color=red>integer</font>,
                    typeof(<font color=maroon>"asdf"</font>) => <font color=red>string</font> )
      result_type(A)  Get the result type of a function type
                  ( result_type(func char) => <font color=red>char</font> )
      base_type(A)  Get the base type of an array, pointer or
                    set type
                  ( base_type(array char) => <font color=red>char</font>,
                    base_type(ptr string) => <font color=red>string</font>,
                    base_type(set of <font color=red>integer</font>) => <font color=red>integer</font> )                    
      type_number(A)  Get an unique number for a type
                  ( Type of result: <font color=red>integer</font> )
      match_obj(A)  Get the match object of a type
                  ( Type of result: <font color=red>reference</font> )
      compare(A, B) Compare function
                  ( Type of result: <font color=red>integer</font> )
      hashCode(A) Hash function
                  ( Type of result: <font color=red>integer</font> )
    Statements:
      <font color=blue>const</font> <font color=red>aType</font>: name <font color=blue>is</font> value
                Declare constant 'name' with 'value'
      <font color=blue>var</font> <font color=red>aType</font>: name <font color=blue>is</font> value
                Declare variable 'name' with 'value'
</pre><p></p>

<a name="object"><b>5.25 object</b></a>
<p>
    The type <tt>'<font color=red>object</font>'</tt> is used as meta type for various types.
  This allows to define common operations for all this types.
  The type <tt>'<font color=red>object</font>'</tt> is not used as element type for container
  classes since this can be done much better and type save
  with abstract data types like <tt>'<font color=red>array</font>'</tt>, <tt>'<font color=red>set</font>'</tt>, <tt>'<font color=red>hash</font>'</tt> and
  others.
</p><pre>
    Functions:
      TRACE_OBJ(A)  Write internal information
</pre><p></p>

<a name="expr"><b>5.26 expr</b></a>
<p>
    The type <tt>'<font color=red>expr</font>'</tt> is used to describe unmatched expressions.
  This are expressions where the recognizing of the functions
  and the type check is not done yet. This is used for example
  in the definition of function bodies.
</p><pre>
    Functions:
      WRITE_EXPR(A)
                Write expr A to FILE OUT
</pre><p></p><hr>

<p></p>
<a name="PARAMETERS"><big><b>6. PARAMETERS</b></big></a>
<!-- ============= -->
<p>
    The following subchapters introduce the parameter types of
  Seed7.
</p>

<a name="val_parameter"><b>6.1 'val' parameter</b></a>
<p>
  This function appends a comma and a string to the globalStri
  variable:
</p><pre>
    <font color=blue>const</font> <font color=red>proc</font>: appendStri (<font color=blue>val</font> <font color=red>string</font>: stri) <font color=blue>is func</font>
      <font color=blue>begin</font>
        globalStri &:= <font color=maroon>","</font>;
        globalStri &:= stri;
      <font color=blue>end func</font>;
</pre><p>
  After doing
</p><pre>
    globalStri &:= <font color=maroon>"a"</font>;
    appendStri(globalStri);
</pre><p>
  the globalStri variable contains the value <tt><font color=maroon>"a,a"</font></tt>. If the function
  header would be
</p><pre>
    <font color=blue>const</font> <font color=red>proc</font>: appendStri (<font color=blue>in</font> <font color=red>string</font>: stri) <font color=blue>is func</font>
</pre><p>
  the globalStri variable would contain the value <tt><font color=maroon>"a,a,"</font></tt>. This
  difference is because of the following reasons:
</p><p>
  For arrays <tt>'<font color=blue>in</font>'</tt> parameters are equal to <tt>'<font color=blue>ref</font>'</tt> parameters.
  When appendStri called with globalStri as parameter an unwanted
  side effect takes place: Every change of globalStri changes also
  the <tt>'<font color=blue>ref</font>'</tt> parameter stri. Changes to the <tt>'<font color=blue>ref</font>'</tt> parameter would
  also change the global variable. Such unwanted side effects can
  also take place between parameters (when at least one parameter
  is an <tt>'<font color=blue>inout</font>'</tt> parameter).
</pre><p>
  In most cases such unwanted side effects are impossible or can
  be avoided easily. When possible <tt>'<font color=blue>in</font>'</tt> parameters should be
  preferred over <tt>'<font color=blue>val</font>'</tt> parameters.
</p><dl><dt>
  Semantics:</dt><dd>
    When calling a function a formal <tt>'<font color=blue>val</font>'</tt> parameter gets its
    value from the corresponding actual parameter. This is done
    with a create procedure ( ::= ). In the function it is only
    possible to read a formal <tt>'<font color=blue>val</font>'</tt> parameter. Changing a formal
    <tt>'<font color=blue>val</font>'</tt> parameter is not possible. When a function is left a
    <tt>'destr'</tt> procedure is called for every <tt>'<font color=blue>val</font>'</tt> parameter. Formal
    <tt>'<font color=blue>val</font>'</tt> parameters have the access right <tt>'<font color=blue>const</font>'</tt>.
</dd></dl><p>

  Syntax:
</p><pre>
    val_parameter ::=
      '<font color=blue>val</font>' type_expression ':' identifier_declaration |
      '<font color=blue>val</font>' type_expression '<font color=blue>param</font>' .
</pre><p>

  Declaration:
</p><pre>
    $ <font color=blue>syntax</font> <font color=red>expr</font>: .val.().param <font color=blue>is</font>                   -> 40;
    $ <font color=blue>syntax</font> <font color=red>expr</font>: .val.(). : .(<font color=red>expr</font>) <font color=blue>is</font>              -> 40;

    <font color=blue>const</font> <font color=red>func f_param</font>: val (<font color=blue>ref</font> <font color=red>type</font> <font color=blue>param</font>) param <font color=blue>is               action</font> <font color=maroon>"DCL_VAL1"</font>;
    <font color=blue>const</font> <font color=red>func f_param</font>: val (<font color=blue>ref</font> <font color=red>type</font> <font color=blue>param</font>) : (<font color=blue>ref</font> <font color=red>expr</font> <font color=blue>param</font>) <font color=blue>is  action</font> <font color=maroon>"DCL_VAL2"</font>;
</pre><p></p>

<a name="ref_parameter"><b>6.2 'ref' parameter</b></a>
<p>
  The following function defines the primitive action for the
  semicolon operator:
</p><pre>
    <font color=blue>const</font> <font color=red>proc</font>: (ref <font color=red>void</font> <font color=blue>param</font>) ; (ref <font color=red>void</font> <font color=blue>param</font>) <font color=blue>is</font> noop;
</pre><p>
  In this definition and other definitions of primitive actions
  <tt>'<font color=blue>ref</font>'</tt> parameters are used. For normal functions usually 
  <tt>'<font color=blue>in</font>'</tt> parameters are used instead of <tt>'<font color=blue>ref</font>'</tt> parameters:
</p><pre>
    <font color=blue>const</font> <font color=red>func integer</font>: total_length (<font color=blue>in</font> <font color=red>array string</font>: arr) <font color=blue>is func</font>
      <font color=blue>result</font>
        <font color=blue>var</font> <font color=red>integer</font>: result <font color=blue>is</font> 0;
      <font color=blue>local</font>
        <font color=blue>var</font> <font color=red>integer</font>: index <font color=blue>is</font> 0;
      <font color=blue>begin</font>
        <font color=blue>for</font> index <font color=blue>range</font> 1 <font color=blue>to</font> length(arr) <font color=blue>do</font>
          result +:= length(arr[index]);
        <font color=blue>end for</font>;
      <font color=blue>end func</font>;
</pre><p>
  Above function could also be defined with the following
  function head:
</p><pre>
    <font color=blue>const</font> <font color=red>func integer</font>: total_length (<font color=blue>ref</font> <font color=red>array string</font>: arr) <font color=blue>is func</font>
</pre><p>
  Since for array types <tt>'<font color=blue>in</font>'</tt> parameters are defined to act as
  <tt>'<font color=blue>ref</font>'</tt> parameters both definitions are equal. When possible
  <tt>'<font color=blue>in</font>'</tt> parameters should be preferred over <tt>'<font color=blue>ref</font>'</tt> parameters.
</p><dl><dt>
  Semantics:</dt><dd>
    When calling a function a formal <tt>'<font color=blue>ref</font>'</tt> parameter is set to
    refer to the corresponding actual parameter. In the function
    it is only possible to read a formal <tt>'<font color=blue>ref</font>'</tt> parameter.
    Changing a formal <tt>'<font color=blue>ref</font>'</tt> parameter is not possible. Formal
    <tt>'<font color=blue>ref</font>'</tt> parameters have the access right <tt>'<font color=blue>const</font>'</tt>.
</dd></dl><p>

  Syntax:
</p><pre>
    ref_parameter ::=
      '<font color=blue>ref</font>' type_expression ':' identifier_declaration |
      '<font color=blue>ref</font>' type_expression '<font color=blue>param</font>' .
</pre><p>

  Declaration:
</p><pre>
    $ <font color=blue>syntax</font> <font color=red>expr</font>: .ref.().param <font color=blue>is</font>                   -> 40;
    $ <font color=blue>syntax</font> <font color=red>expr</font>: .ref.(). : .(<font color=red>expr</font>) <font color=blue>is</font>              -> 40;

    <font color=blue>const</font> <font color=red>func f_param</font>: ref (<font color=blue>ref</font> <font color=red>type</font> <font color=blue>param</font>) param <font color=blue>is               action</font> <font color=maroon>"DCL_REF1"</font>;
    <font color=blue>const</font> <font color=red>func f_param</font>: ref (<font color=blue>ref</font> <font color=red>type</font> <font color=blue>param</font>) : (<font color=blue>ref</font> <font color=red>expr</font> <font color=blue>param</font>) <font color=blue>is  action</font> <font color=maroon>"DCL_REF2"</font>;
</pre><p></p>

<a name="in_parameter"><b>6.3 'in' parameter</b></a>
<p>
  This function checks if a given number is a prime number:
</p><pre>
    <font color=blue>const</font> <font color=red>func boolean</font>: is_prime (<font color=blue>in</font> <font color=red>integer</font>: number) <font color=blue>is func</font>
      <font color=blue>result</font>
        <font color=blue>var</font> <font color=red>boolean</font>: result <font color=blue>is</font> FALSE;
      <font color=blue>local</font>
        <font color=blue>var</font> <font color=red>integer</font>: count <font color=blue>is</font> 2;
      <font color=blue>begin</font>
        <font color=blue>if</font> number = 2 <font color=blue>then</font>
          result := TRUE;
        <font color=blue>elsif</font> number >= 3 <font color=blue>then</font>
          <font color=blue>while</font> number <font color=blue>rem</font> count &lt;> 0 <font color=blue>and</font> count * count &lt;= number <font color=blue>do</font>
            incr(count);
          <font color=blue>end while</font>;
          result := number <font color=blue>rem</font> count &lt;> 0;
        <font color=blue>end if</font>;
      <font color=blue>end func</font>;
</pre><p>
  The following function defines the ex (outer) product:
</p><pre>
    <font color=blue>const</font> <font color=red>func array array integer</font>:
        (<font color=blue>in</font> <font color=red>array integer</font>: a) ex (<font color=blue>in</font> <font color=red>array integer</font>: b) <font color=blue>is func</font>
      <font color=blue>return</font>
        <font color=blue>var</font> <font color=red>array array integer</font>: result <font color=blue>is</font> 0 times 0 times 0;
      <font color=blue>local</font>
        <font color=blue>var</font> <font color=red>integer</font>: index1 <font color=blue>is</font> 1;
      <font color=blue>begin</font>
        result := length(a) <font color=blue>times</font> length(b) <font color=blue>times</font> 0;
        <font color=blue>for</font> index1 <font color=blue>range</font> 1 <font color=blue>to</font> length(a) <font color=blue>do</font>
          <font color=blue>for</font> index2 <font color=blue>range</font> 1 <font color=blue>to</font> length(b) <font color=blue>do</font>
            result[index1][index2] := a[index1] * b[index2];
          <font color=blue>end for</font>;
        <font color=blue>end for</font>;
      <font color=blue>end func</font>;
</pre><p>
  Although both examples use <tt>'<font color=blue>in</font>'</tt> parameters the parameter in the
  first example is actually a <tt>'<font color=blue>val</font>'</tt> parameter while the parameters
  in the second example are actually <tt>'<font color=blue>ref</font>'</tt> parameters. When a new
  type is created with the <tt>'newtype'</tt> function it is necessary to
  specify the meaning of the <tt>'<font color=blue>in</font>'</tt> parameter. This is done with a
  call of the IN_PARAM_IS_VALUE or the IN_PARAM_IS_REFERENCE function
  with the new generated type as parameter. If a new type is created
  with the <tt>'subtype'</tt> function this specification is optional since
  the base type has already a specification of the <tt>'<font color=blue>in</font>'</tt> parameter.
</p><dl><dt>
  Semantics:</dt><dd>
    Depending on the type an <tt>'<font color=blue>in</font>'</tt> parameter is equivalent to an
    <tt>'<font color=blue>val</font>'</tt> (call by value) parameter or to an <tt>'<font color=blue>ref</font>'</tt> (call by reference)
    parameter. Formal <tt>'<font color=blue>in</font>'</tt> parameters have the access right <tt>'<font color=blue>const</font>'</tt>.
</dd></dl><p>

  Syntax:
</p><pre>
    in_parameter ::=
      '<font color=blue>in</font>' type_expression ':' identifier_declaration .
</pre><p>

  Declaration:
</p><pre>
    $ <font color=blue>syntax</font> <font color=red>expr</font>: .in.().param <font color=blue>is</font>                    -> 40;
    $ <font color=blue>syntax</font> <font color=red>expr</font>: .in.(). : .(<font color=red>expr</font>) <font color=blue>is</font>               -> 40;

    <font color=blue>const</font> <font color=red>func f_param</font>: in (<font color=blue>ref</font> <font color=red>type</font> <font color=blue>param</font>) param <font color=blue>is                action</font> <font color=maroon>"DCL_REF1"</font>;

    <font color=blue>const</font> <font color=red>proc</font>: IN_PARAM_IS_VALUE (<font color=blue>ref</font> <font color=red>type</font>: aType) <font color=blue>is func</font>
      <font color=blue>begin</font>
        <font color=blue>const</font> <font color=red>func f_param</font>: in (<font color=blue>attr</font> <font color=red>aType</font>) : (<font color=blue>ref</font> <font color=red>expr</font> <font color=blue>param</font>) <font color=blue>is   action</font> <font color=maroon>"DCL_VAL2"</font>;
      <font color=blue>end func</font>;

    <font color=blue>const</font> <font color=red>proc</font>: IN_PARAM_IS_REFERENCE (<font color=blue>ref</font> <font color=red>type</font>: aType) <font color=blue>is func</font>
      <font color=blue>begin</font>
        <font color=blue>const</font> <font color=red>func f_param</font>: in (<font color=blue>attr</font> <font color=red>aType</font>) : (<font color=blue>ref</font> <font color=red>expr</font> <font color=blue>param</font>) <font color=blue>is   action</font> <font color=maroon>"DCL_REF2"</font>;
      <font color=blue>end func</font>;
</pre><p></p>

<a name="in_var_parameter"><b>6.4 'in var' parameter</b></a>
<p>
  This function computes the greatest common divisor:
</p><pre>
    <font color=blue>const</font> <font color=red>func integer</font>: gcd (<font color=blue>in var</font> <font color=red>integer</font>: a, <font color=blue>in var</font> <font color=red>integer</font>: b) <font color=blue>is func</font>
      <font color=blue>result</font>
        <font color=blue>var</font> <font color=red>integer</font>: result <font color=blue>is</font> 0;
      <font color=blue>local</font>
        <font color=blue>var</font> <font color=red>integer</font>: help <font color=blue>is</font> 0;
      <font color=blue>begin</font>
        <font color=blue>while</font> a &lt;> 0 <font color=blue>do</font>
          help := b <font color=blue>rem</font> a;
          b := a;
          a := help;
        <font color=blue>end while</font>;
        result := b;
      <font color=blue>end func</font>;
</pre><p></p><dl><dt>
  Semantics:</dt><dd>
    When calling a function a formal <tt>'<font color=blue>in var</font>'</tt> parameter gets its
    value from the corresponding actual parameter. This is done
    with a create procedure ( ::= ). In the function it is
    possible to read and change a formal <tt>'<font color=blue>in var</font>'</tt> parameter.
    Changing a formal <tt>'<font color=blue>in var</font>'</tt> parameter has no effect on the
    actual parameter. When a function is left a <tt>'destr'</tt> procedure
    is called for every <tt>'<font color=blue>in var</font>'</tt> parameter. Formal <tt>'<font color=blue>in var</font>'</tt>
    parameters have the access right <tt>'<font color=blue>var</font>'</tt>.
</dd></dl><p>

  Syntax:
</p><pre>
    in_var_parameter ::=
      '<font color=blue>in var</font>' type-expression ':' identifier_declaration .
</pre><p>

  Declaration:
</p><pre>
    $ <font color=blue>syntax</font> <font color=red>expr</font>: .in.var.().param <font color=blue>is</font>                -> 40;
    $ <font color=blue>syntax</font> <font color=red>expr</font>: .in.var.(). : .(<font color=red>expr</font>) <font color=blue>is</font>           -> 40;

    <font color=blue>const</font> <font color=red>func f_param</font>: in var (<font color=blue>ref</font> <font color=red>type</font> <font color=blue>param</font>) <font color=blue>param</font> <font color=blue>is               action</font> <font color=maroon>"DCL_IN1VAR"</font>;
    <font color=blue>const</font> <font color=red>func f_param</font>: in var (<font color=blue>ref</font> <font color=red>type</font> <font color=blue>param</font>) : (<font color=blue>ref</font> <font color=red>expr</font> <font color=blue>param</font>) <font color=blue>is  action</font> <font color=maroon>"DCL_IN2VAR"</font>;
</pre><p></p>

<a name="inout_parameter"><b>6.5 'inout' parameter</b></a>
<p>
  This procedure doubles the given parameter 'number':
</p><pre>
    <font color=blue>const</font> <font color=red>proc</font>: double (<font color=blue>inout</font> <font color=red>integer</font>: number) <font color=blue>is func</font>
      <font color=blue>begin</font>
        number := 2 * number;
      <font color=blue>end func</font>;
</pre><p></p><dl><dt>
  Semantics:</dt><dd>
    When calling a function a formal <tt>'<font color=blue>inout</font>'</tt> parameter is set to 
    refer to the corresponding actual parameter. In the function
    it is possible to read and change a formal <tt>'<font color=blue>inout</font>'</tt> parameter.
    Changing a formal <tt>'<font color=blue>inout</font>'</tt> parameter changes the actual
    parameter as well. Formal <tt>'<font color=blue>inout</font>'</tt> parameters have the
    access right <tt>'<font color=blue>var</font>'</tt>.
</dd></dl><p>

  Syntax:
</p><pre>
    inout_parameter ::=
      '<font color=blue>inout</font>' type_expression ':' identifier_declaration .
</pre><p>

  Declaration:
</p><pre>
    $ <font color=blue>syntax</font> <font color=red>expr</font>: .inout.().param <font color=blue>is</font>                 -> 40;
    $ <font color=blue>syntax</font> <font color=red>expr</font>: .inout.(). : .(expr) <font color=blue>is</font>            -> 40;

    <font color=blue>const</font> <font color=red>func f_param</font>: inout (<font color=blue>ref</font> <font color=red>type</font> <font color=blue>param</font>) param <font color=blue>is                action</font> <font color=maroon>"DCL_INOUT1"</font>;
    <font color=blue>const</font> <font color=red>func f_param</font>: inout (<font color=blue>ref</font> <font color=red>type</font> <font color=blue>param</font>) : (<font color=blue>ref</font> <font color=red>expr</font> <font color=blue>param</font>) <font color=blue>is   action</font> <font color=maroon>"DCL_INOUT2"</font>;
</pre><p></p>

<a name="Symbol_parameter"><b>6.6 Symbol parameter</b></a>
<p>
  Some functions need symbols at fixed places in the parameter
  list. The following IF-statement requests the keywords <tt>'<font color=blue>THEN</font>'</tt>,
  <tt>'<font color=blue>END</font>'</tt> and <tt>'<font color=blue>IF</font>'</tt> at specific places:
</p><pre>
    <font color=blue>IF</font> condition <font color=blue>THEN</font>
      statement
    <font color=blue>END IF</font>;
</pre><p>
  After defining the syntax of this IF-statement with
</p><pre>
    $ <font color=blue>syntax</font> <font color=red>expr</font>: .IF.().THEN.().END.IF <font color=blue>is</font> -> 25;
</pre><p>
  the semantic can be defined with:
</p><pre>
    <font color=blue>const</font> <font color=red>proc</font>: IF (<font color=blue>in</font> <font color=red>boolean</font>: condition) THEN
                  (<font color=blue>in</font> <font color=red>proc</font>: statement)
                END IF <font color=blue>is func</font>

                  <font color=blue>begin</font>
                    <font color=blue>case</font> condition <font color=blue>of</font>
                      <font color=blue>when</font> {TRUE}: statement;
                    <font color=blue>end case</font>;
                  <font color=blue>end func</font>;
</pre><p>
  The symbol parameters are just written outside the parentheses.
  A call of this statement could be:
</p><pre>
    <font color=blue>IF</font> value &lt; maximum <font color=blue>THEN</font>
      write(value)
    <font color=blue>END IF</font>;
</pre><p></p><dl><dt>
  Semantics:</dt><dd>
  Symbol parameters must be defined in a syntax definition and in
  a corresponding semantic definition. In the semantic definition
  symbol parameters are written outside of the parentheses.
  In the actual parameter list the corresponding symbol of the
  formal parameter list must be written.
</dd></dl><p>

  Syntax:
</p><pre>
    symbol_parameter ::=
      name_identifier | special_identifier .
</pre><p></p>

<a name="attr_parameter"><b>6.7 'attr' parameter</b></a>
<p>
  This declaration associates a name to the type <tt>'<font color=red>char</font>'</tt>:
</p><pre>
    <font color=blue>const</font> <font color=red>string</font>: name (<font color=blue>attr</font> <font color=red>char</font>) <font color=blue>is</font> <font color=maroon>"char"</font>;
</pre><p>
  This <tt>'name'</tt> can be used as follows:
</p><pre>
    writeln(name(<font color=red>char</font>));
</pre><p>
  It is possible to overload such declarations:
</p><pre>
    <font color=blue>const</font> <font color=red>string</font>: name (<font color=blue>attr</font> <font color=red>boolean</font>) <font color=blue>is</font> <font color=maroon>"boolean"</font>;
    <font color=blue>const</font> <font color=red>string</font>: name (<font color=blue>attr</font> <font color=red>float</font>) <font color=blue>is</font> <font color=maroon>"float"</font>;
</pre><p>
  An <tt>'<font color=blue>attr</font>'</tt> parameter can be used in a function also:
</p><pre>
    <font color=blue>const</font> <font color=red>func char</font>: (<font color=blue>attr</font> <font color=red>char</font>) parse (<font color=blue>in</font> string</font>: <font color=red>stri</font>) <font color=blue>is func</font>
      <font color=blue>result</font>
        <font color=blue>var</font> <font color=red>char</font>: result <font color=blue>is</font> <font color=maroon>' '</font>;
      <font color=blue>begin</font>
        <font color=blue>if</font> length(stri) >= 1 <font color=blue>then</font>
          result := stri[1];
        <font color=blue>else</font>
          <font color=blue>raise</font> RANGE_ERROR;
        <font color=blue>end if</font>;
      <font color=blue>end func</font>;
</pre><p></p><dl><dt>
  Semantics:</dt><dd>
  The actual parameter which corresponds to an <tt>'<font color=blue>attr</font>'</tt> parameter
  must be the type mentioned in the declaration of the <tt>'<font color=blue>attr</font>'</tt> parameter.
  An <tt>'<font color=blue>attr</font>'</tt> parameter does not declare a formal parameter
  variable which could be used inside a function.
</dd></dl><p>

  Syntax:
</p><pre>
    attr_parameter ::=
      '<font color=blue>attr</font>' type_expression .
</pre><p></p><hr>

<p></p>
<a name="THE_FILE_SYSTEM"><big><b>7. THE FILE SYSTEM</b></big></a>
<!-- ================== -->
<p>
    The file system is used for communication in various ways.
  For example: To write strings on the screen we use the
  following statements:
</p><pre>
    write(<font color=maroon>"hello world"</font>);
    writeln;
</pre><p>
  <tt>'writeln'</tt> means write newline. We can also write data of
  various types with <tt>'write'</tt>:
</p><pre>
    write(<font color=maroon>"result = "</font>);
    write(number <font color=blue>div</font> 5);
    write(<font color=maroon>" "</font>);
    writeln(<font color=blue>not</font> error);
</pre><p>
  The <tt>'writeln'</tt> above writes data and then terminates the line.
  This is equal to a <tt>'write'</tt> followed by a writeln. Instead of
  multiple write statements the <tt>'<&'</tt> operator can be used to
  concatenate the elements to be written:
</p><pre>
    writeln(<font color=maroon>"result = "</font> <& number <font color=blue>div</font> 5 <& <font color=maroon>" "</font> <& <font color=blue>not</font> error);
</pre><p>
  The <tt>'<&'</tt> operator needs a <tt>'<font color=blue>string</font>'</tt> as left operand and
  is overloaded for various types as right operand. To allow things like
</p><pre>
    write(next_time <& <font color=maroon>" \r"</font>);
</pre><p>
  the <tt>'<&'</tt> operator is also overloaded for various types as
  left operand and a <tt>'<font color=blue>string</font>'</tt> as right operand.
  This allows you to concatenate several objects with <tt>'<&'</tt> when
  at least the first or the second object is a <tt>'<font color=blue>string</font>'</tt>.
  We can also read data from the keyboard:
</p><pre>
    write(<font color=maroon>"Amount? "</font>);
    read(amount);
</pre><p>
  The user is allowed to use backspace and sends the input
  to the program with the RETURN-key. To let the user respond
  with the RETURN-key we can write:
</p><pre>
    writeln(<font color=maroon>"Type RETURN"</font>);
    readln;
</pre><p>
  To read a line of data we can use <tt>'readln'</tt>:
</p><pre>
    write(<font color=maroon>"Your comment? "</font>);
    readln(user_comment_string);
</pre><p>
  In the previous examples all <tt>'read'</tt> statements read from the
  file IN and all <tt>'write'</tt> statements write to the file OUT. The
  files IN and OUT are initialized with STD_IN and STD_OUT
  which are the stdin and stdout files of the operating system.
  (Usually the keyboard and the screen). When we want to write
  to other files we use write statements with the file as first
  parameter. To write a line of text to the file <font color=maroon>"info.fil"</font> we
  use the following statements:
</p><pre>
    info_file := open(<font color=maroon>"info.fil"</font>, <font color=maroon>"w"</font>);
    writeln(info_file, <font color=maroon>"This is the first line of the info file."</font>);
    close(info_file);
</pre><p>
  First the external file is opened for writing and then it is
  used. To read the file back in the string <tt>'stri'</tt> we write:
</p><pre>
    info_file := open(<font color=maroon>"info.fil"</font>, <font color=maroon>"r"</font>);
    readln(info_file, stri);
    close(info_file);
</pre><p>
  It is also possible to write values of other types to
  <tt>'info_file'</tt>:
</p><pre>
    writeln(info_file, number);
</pre><p>
  Here the <tt>'number'</tt> is converted to a string which is written
  to the file. A <tt>'number'</tt> is read back with:
</p><pre>
    readln(info_file, number);
</pre><p>
  There are also C++ like i/o statements. When using the <tt>'&lt;&lt;'</tt>
  and the <tt>'>>'</tt> statements the last four examples look like:
</p><pre>
    info_file := open(<font color=maroon>"info.fil"</font>, <font color=maroon>"w"</font>);
    info_file &lt;&lt; <font color=maroon>"This is the first line of the info file."</font>;
    info_file &lt;&lt; NL;  <font color=green>(* New line *)</font>
    close(info_file);

    info_file := open(<font color=maroon>"info.fil"</font>, <font color=maroon>"r"</font>);
    info_file >> stri;
    close(info_file);

    info_file &lt;&lt; number;

    info_file >> number;
</pre><p>
  For doing i/o to a window on the screen we write:
</p><pre>
    window1 := open_window(SCREEN, 10, 10, 5, 60);
    box(window1);
    setPos(window1, 3, 1);
    window1 &lt;&lt; <font color=maroon>"hello there"</font>;
</pre><p>
  This opens the window 'window1' on the SCREEN at the position
  10, 10. This window has 5 lines and 60 columns. A box (of
  characters: - | + ) is written to surround the 'window1' and
  finally the string <tt><font color=maroon>"hello there"</font></tt> is written in the window
  <tt>'window1'</tt> at Position 3, 1. If we want to clear the 'window1'
  we write:
</p><pre>
    clear(window1);
</pre><p>
  Files can be used for much more things. Here is a list of
  goals for a file system:
</p><ul>
    <li><!-- -  -->A concept which provides conversions from arbitrary
      types to strings and back.</li>

    <li><!-- -  -->Basic input and output operations to process a file
      character wise, word wise or line wise.</li>

    <li><!-- -  -->Input and output statements which combine input with
      conversion respectively conversion with output.</li>

    <li><!-- -  -->Simple read and write statements for standard
      input and output for arbitrary types.</li>

    <li><!-- -  -->Standard input and output files and the possibility
      to route the standard i/o to any file.</li>

    <li><!-- -  -->Access to operating system files and devices.</li>

    <li><!-- -  -->An interface which allows the user to define
      his own file types.</li>
</ul><p>
  In the following subchapters we discuss each of this goals.
</p>

<a name="Conversion_to_strings_and_back"><b>7.1 Conversion to strings and back</b></a>
<p>
    We archive the goal of doing i/o for arbitrary types with
  two conversion functions. In order to do i/o with a type
  the <tt>'str'</tt> and <tt>'<font color=blue>parse</font>'</tt> functions must be defined for that
  type. As an example we show the conversion functions for the
  type boolean:
</p><pre>
    <font color=blue>const</font> <font color=red>func string</font>: str (<font color=blue>in</font> <font color=red>boolean</font>: aBool) <font color=blue>is func</font>
      <font color=blue>result</font>
        <font color=blue>var</font> <font color=red>string</font>: result <font color=blue>is</font> <font color=maroon>""</font>;
      <font color=blue>begin</font>
        <font color=blue>if</font> aBool <font color=blue>then</font>
          result := <font color=maroon>"TRUE"</font>;
        <font color=blue>else</font>
          result := <font color=maroon>"FALSE"</font>;
        <font color=blue>end if</font>;
      <font color=blue>end func</font>;

    <font color=blue>const</font> <font color=red>func boolean</font>: (<font color=blue>attr</font> <font color=red>boolean</font>) parse (<font color=blue>in</font> <font color=red>string</font>: stri) <font color=blue>is func</font>
      <font color=blue>result</font>
        <font color=blue>var</font> <font color=red>boolean</font>: result <font color=blue>is</font> FALSE;
      <font color=blue>begin</font>
        <font color=blue>if</font> stri = <font color=maroon>"TRUE"</font> <font color=blue>then</font>
          result := TRUE;
        <font color=blue>elsif</font> stri = <font color=maroon>"FALSE"</font> <font color=blue>then</font>
          result := FALSE;
        <font color=blue>else</font>
          raise RANGE_ERROR;
        <font color=blue>end if</font>;
      <font color=blue>end func</font>;
</pre><p>
  The <tt>'str'</tt> function must deliver a corresponding string for
  every value of the type. The <tt>'<font color=blue>parse</font>'</tt> function parses a string
  and delivers the converted value as result. If the conversion
  is not successful the exception RANGE_ERROR is raised. The
  attribute used with <tt>'<font color=blue>parse</font>'</tt> allows that it is overloaded for
  different types.
</p><p>
  After defining the <tt>'str'</tt> and <tt>'<font color=blue>parse</font>'</tt> functions for a type the
  enable_io function can be called for this type as in:
</p><pre>
    enable_io(<font color=red>boolean</font>);
</pre><p>
  The enable_io package declares various io functions like
  <tt>'read'</tt>, <tt>'write'</tt> and others for the provided type (in this
  example <tt>'<font color=blue>boolean</font>'</tt>). If only output (or only input) is needed
  for a type it is possible to define just <tt>'str'</tt> (or <tt>'<font color=blue>parse</font>'</tt>)
  and activate just enable_output (or enable_input).
</p><p>
  There is also a formatting operator called <tt>'<font color=blue>lpad</font>'</tt> which is based
  on the <tt>'str'</tt> function. The statements
</p><pre>
    write(12 <font color=blue>lpad</font> 6);
    write(3 <font color=blue>lpad</font> 6);
    writeln(45 <font color=blue>lpad</font> 6);
    write(678 <font color=blue>lpad</font> 6);
    write(98765 <font color=blue>lpad</font> 6);
    writeln(4321 <font color=blue>lpad</font> 6);
</pre><p>
  produce the following output:
</p><pre>
        12     3    45
       678 98765  4321
</pre><p>
  As we see the <tt>'<font color=blue>lpad</font>'</tt> operator can be used to produce right
  justified output. There is also a <tt>'<font color=blue>rpad</font>'</tt> operator to produce
  left justified output. The basic definitions of the <tt>'<font color=blue>lpad</font>'</tt>
  and <tt>'<font color=blue>rpad</font>'</tt> operators work on strings and are as follows:
</p><pre>
    <font color=blue>const</font> <font color=red>func string</font>: (<font color=blue>ref</font> <font color=red>string</font>: stri) lpad (<font color=blue>in</font> <font color=red>integer</font>: leng) <font color=blue>is func</font>
      <font color=blue>result</font>
        <font color=blue>var</font> <font color=red>string</font>: result <font color=blue>is</font> <font color=maroon>""</font>;
      <font color=blue>begin</font>
        <font color=blue>if</font> leng > length(stri) <font color=blue>then</font>
          result := <font color=maroon>" "</font> <font color=blue>mult</font> leng - length(stri) & stri;
        <font color=blue>else</font>
          result := stri;
        <font color=blue>end if</font>;
      <font color=blue>end func</font>;

    <font color=blue>const</font> <font color=red>func string</font>: (<font color=blue>ref</font> <font color=red>string</font>: stri) rpad (<font color=blue>in</font> <font color=red>integer</font>: leng) <font color=blue>is func</font>
      <font color=blue>result</font>
        <font color=blue>var</font> <font color=red>string</font>: result <font color=blue>is</font> <font color=maroon>""</font>;
      <font color=blue>begin</font>
        <font color=blue>if</font> leng > length(stri) <font color=blue>then</font>
          result := stri & <font color=maroon>" "</font> <font color=blue>mult</font> leng - length(stri);
        <font color=blue>else</font>
          result := stri;
        <font color=blue>end if</font>;
      <font color=blue>end func</font>;
</pre><p>
  The enable_io package contains definitions of <tt>'<font color=blue>lpad</font>'</tt> and <tt>'<font color=blue>rpad</font>'</tt>
  to work on the type specified with enable_io:
</p><pre>
    <font color=blue>const</font> <font color=red>func string</font>: (<font color=blue>in</font> <font color=red>aType</font>: aValue) lpad (<font color=blue>in</font> <font color=red>integer</font>: leng) <font color=blue>is func</font>
      <font color=blue>result</font>
        <font color=blue>var</font> <font color=red>string</font>: stri <font color=blue>is</font> <font color=maroon>""</font>;
      <font color=blue>begin</font>
        stri := str(aValue) <font color=blue>lpad</font> leng;
      <font color=blue>end func</font>;

    <font color=blue>const</font> <font color=red>func string</font>: (<font color=blue>in</font> <font color=red>aType</font>: aValue) rpad (<font color=blue>in</font> <font color=red>integer</font>: leng) <font color=blue>is func</font>
      <font color=blue>result</font>
        <font color=blue>var</font> <font color=red>string</font>: stri <font color=blue>is</font> <font color=maroon>""</font>;
      <font color=blue>begin</font>
        stri := str(aValue) <font color=blue>rpad</font> leng;
      <font color=blue>end func</font>;
</pre><p>
  For <tt>'<font color=red>float</font>'</tt> values exists an additional way to convert them to
  strings. The <tt>'<font color=blue>digits</font>'</tt> operator allows the specification of a
  precision. For example the statements
</p><pre>
    writeln(3.1415 <font color=blue>digits</font> 2);
    writeln(4.0 <font color=blue>digits</font> 2);
</pre><p>
  produce the following output:
</p><pre>
    3.14
    4.00
</pre><p>
  A combination with the <tt>'<font color=blue>lpad</font>'</tt> operator as in
</p><pre>
    writeln(3.1415 <font color=blue>digits</font> 2 <font color=blue>lpad</font> 6);
    writeln(99.9 <font color=blue>digits</font> 2 <font color=blue>lpad</font> 6);
</pre><p>
  is also possible and produces the following output:
</p><pre>
      3.14
     99.90
</pre><p></p>

<a name="Basic_input_and_output_operations"><b>7.2 Basic input and output operations</b></a>
<p>
    To allow arbitrary user defined file-types beside the
  operating system files we chose a model in which the
  i/o methods are assigned to the type of the file-value and
  not to the type of the file-variable. This allows a file
  variable to point to any file-value. The file-variables
  have the type <tt>'<font color=red>file</font>'</tt> which has only the assignment method
  defined. For the operating system files and for each user
  defined file a file-type must be declared which has the
  i/o methods defined. These file-types are derived (direct
  or indirect) from the type NULL_FILE for which all i/o
  methods are defined upon a base of basic string i/o
  methods. So for a new user defined file-type only the
  basic string i/o methods must be defined.
</p><p>
  The two basic i/o methods defined for the NULL_FILE are
</p><pre>
    <font color=blue>const</font> <font color=red>proc</font>: write (<font color=blue>ref</font> <font color=red>NULL_FILE</font> <font color=blue>param</font>, <font color=blue>in</font> <font color=red>string</font> <font color=blue>param</font>) <font color=blue>is</font> noop;
    <font color=blue>const</font> <font color=red>string</font>: gets (<font color=blue>ref</font> <font color=red>NULL_FILE</font> <font color=blue>param</font>, <font color=blue>ref</font> <font color=red>integer</font> <font color=blue>param</font>) <font color=blue>is</font> <font color=maroon>""</font>;
</pre><p>
  This means that writing any string to the NULL_FILE has
  no effect and reading any number of characters from the
  NULL_FILE delivers the empty string. When a user defined
  file type is declared these are the two methods that must
  be redefined for the new file-type. Based upon these
  two methods three more methods are defined for the
  NULL_FILE named 'getc', 'getwd' and 'getln'.
  This methods get a character, a word and a line
  respectively. A word is terminated by a space, a tab
  or a linefeed. A line is terminated by a linefeed.
  This methods need not to be redefined for an user defined
  file type but for performance reasons they can also be
  redefined. The definitions for 'getc', 'getwd' and 'getln' for
  the NULL_FILE are
</p><pre>
    <font color=blue>const</font> <font color=red>func char</font>: getc (<font color=blue>ref</font> <font color=red>NULL_FILE</font>: aFile) <font color=blue>is func</font>
      <font color=blue>result</font>
        <font color=blue>var</font> char: ch <font color=blue>is</font> <font color=maroon>' '</font>;
      <font color=blue>begin</font>
        ch := gets(aFile, 1)[1];
      <font color=blue>end func</font>;

    <font color=blue>const</font> <font color=red>func string</font>: getwd (<font color=blue>inout</font> <font color=red>NULL_FILE</font>: aFile) <font color=blue>is func</font>
      <font color=blue>result</font>
        <font color=blue>var</font> <font color=red>string</font>: stri <font color=blue>is</font> <font color=maroon>""</font>;
      <font color=blue>local</font>
        <font color=blue>var</font> <font color=red>string</font>: buffer <font color=blue>is</font> <font color=maroon>""</font>;
      <font color=blue>begin</font>
        <font color=blue>repeat</font>
          buffer := gets(file <font color=blue>conv</font> aFile, 1);
        <font color=blue>until</font> buffer &lt;> <font color=maroon>" "</font> <font color=blue>and</font> buffer &lt;> <font color=maroon>"\t"</font>;
        <font color=blue>while</font> buffer &lt;> <font color=maroon>" "</font> <font color=blue>and</font> buffer &lt;> <font color=maroon>"\t"</font> <font color=blue>and</font>
            buffer &lt;> <font color=maroon>"\n"</font> <font color=blue>and</font> buffer &lt;> <font color=maroon>""</font> <font color=blue>do</font>
          stri &:= buffer;
          buffer := gets(file <font color=blue>conv</font> aFile, 1);
        <font color=blue>end while</font>;
        aFile.bufferChar := buffer[1];
      <font color=blue>end func</font>;

    <font color=blue>const</font> <font color=red>func string</font>: getln (<font color=blue>inout</font> <font color=red>NULL_FILE</font>: aFile) <font color=blue>is func</font>
      <font color=blue>result</font>
        <font color=blue>var</font> <font color=red>string</font>: stri <font color=blue>is</font> <font color=maroon>""</font>;
      <font color=blue>local</font>
        <font color=blue>var</font> <font color=red>string</font>: buffer <font color=blue>is</font> <font color=maroon>""</font>;
      <font color=blue>begin</font>
        buffer := gets(file <font color=blue>conv</font> aFile, 1);
        <font color=blue>while</font> buffer &lt;> <font color=maroon>"\n"</font> <font color=blue>and</font> buffer &lt;> <font color=maroon>""</font> <font color=blue>do</font>
          stri &:= buffer;
          buffer := gets(file <font color=blue>conv</font> aFile, 1);
        <font color=blue>end while</font>;
        aFile.bufferChar := buffer[1];
      <font color=blue>end func</font>;
</pre><p>
  Note that <tt>'getwd'</tt> skips leading spaces and tabs while <tt>'getc'</tt> and
  <tt>'getln'</tt> do not.
  When <tt>'getc'</tt>, <tt>'getwd'</tt> or <tt>'getln'</tt> is not defined for a new user defined
  file type the declarations from the NULL_FILE are used instead.
  This declarations are based on the method <tt>'gets'</tt> which must be
  defined for every new user defined file-type.
</p><p>
  Note that there is an assignment to the variable <tt>'bufferChar'</tt>.
  This variable is a component of NULL_FILE and therefore also
  a component of all derived file types. This allows an
  eoln-function to test if the last <tt>'getwd'</tt> or <tt>'getln'</tt> reach the end
  of a line. Here is a definition of the eoln-function:
</p><pre>
    <font color=blue>const</font> <font color=red>func boolean</font>: eoln (<font color=blue>ref</font> <font color=red>NULL_FILE</font>: aFile) <font color=blue>is func</font>
      <font color=blue>result</font>
        <font color=blue>var</font> <font color=red>boolean</font>: result <font color=blue>is</font> TRUE;
      <font color=blue>begin</font>
        result := aFile.bufferChar = '\n';
      <font color=blue>end func</font>;
</pre><p>
  The next declarations allows various i/o operations for strings:
</p><pre>
    <font color=blue>const</font> <font color=red>proc</font>: writeln (<font color=blue>in</font> <font color=red>file</font>: aFile, <font color=blue>in</font> <font color=red>string</font>: stri) <font color=blue>is func</font>
      <font color=blue>begin</font>
        write(aFile, stri);
        writeln(aFile);
      <font color=blue>end func</font>;

    <font color=blue>const</font> <font color=red>proc</font>: read (<font color=blue>inout</font> <font color=red>file</font>: aFile, <font color=blue>inout</font> <font color=red>string</font>: stri) <font color=blue>is func</font>
      <font color=blue>begin</font>
        stri := getwd(aFile);
        aFile.io_empty := stri = <font color=maroon>""</font>;
        aFile.io_ok := TRUE;
      <font color=blue>end func</font>;

    <font color=blue>const</font> <font color=red>proc</font>: readln (<font color=blue>inout</font> <font color=red>file</font>: aFile, <font color=blue>inout</font> <font color=red>string</font>: stri) <font color=blue>is func</font>
      <font color=blue>begin</font>
        stri := getln(aFile);
        aFile.io_empty := stri = <font color=maroon>""</font>;
        aFile.io_ok := TRUE;
      <font color=blue>end func</font>;

    <font color=blue>const</font> <font color=red>proc</font>: (<font color=blue>inout</font> <font color=red>file</font>: aFile) >> (<font color=blue>inout</font> <font color=red>string</font>: stri) <font color=blue>is func</font>
      <font color=blue>begin</font>
        stri := getwd(aFile);
        aFile.io_empty := stri = <font color=maroon>""</font>;
        aFile.io_ok := TRUE;
      <font color=blue>end func</font>;

    <font color=blue>const</font> <font color=red>proc</font>: (<font color=blue>in</font> <font color=red>file</font>: aFile) &lt;&lt (<font color=blue>in</font> <font color=red>string</font>: stri) <font color=blue>is func</font>
      <font color=blue>begin</font>
        write(aFile , stri);
      <font color=blue>end func</font>;
</pre><p></p>

<a name="Input_and_output_with_conversion"><b>7.3 Input and output with conversion</b></a>
<p>
    Normally we need a combination of an i/o operation with
  a conversion operation. There are several functions which are
  based on the <tt>'str'</tt> and <tt>'<font color=blue>parse</font>'</tt> conversions and on the basic
  i/o-functions. The following declarations allow the <tt>'&lt;&lt;'</tt> operator
  and the <tt>'write'</tt> function to be used for all types which define <tt>'enable_io'</tt>:
</p><pre>
    <font color=blue>const</font> <font color=red>proc</font>: (<font color=blue>in</font> <font color=red>file</font>: aFile) &lt;&lt; (<font color=blue>in</font> <font color=red>aType</font>: aValue) <font color=blue>is func</font>
      <font color=blue>begin</font>
        write(aFile, str(aValue));
      <font color=blue>end func</font>;

    <font color=blue>const</font> <font color=red>proc</font>: write (<font color=blue>in</font> <font color=red>file</font>: aFile, <font color=blue>in</font> <font color=red>aType</font>: aValue) <font color=blue>is func</font>
      <font color=blue>begin</font>
        write(aFile, str(aValue));
      <font color=blue>end func</font>;
</pre><p>
  For types which define <tt>'enable_io'</tt> the <tt>'>>'</tt> operator is declared as:
</p><pre>
    <font color=blue>const</font> <font color=red>proc</font>: (<font color=blue>inout</font> <font color=red>file</font>: aFile) >> (<font color=blue>inout</font> <font color=red>aType</font>: aValue) <font color=blue>is func</font>
      <font color=blue>local</font>
        <font color=blue>var</font> <font color=red>string</font>: stri <font color=blue>is</font> <font color=maroon>""</font>;
      <font color=blue>begin</font>
        stri := getwd(aFile);
        aFile.io_empty := stri = <font color=maroon>""</font>;
        <font color=blue>block</font>
          aValue := <font color=red>aType</font> <font color=blue>parse</font> stri;
          aFile.io_ok := TRUE;
        <font color=blue>exception</font>
          <font color=blue>catch</font> RANGE_ERROR:
            aFile.io_ok := FALSE;
        <font color=blue>end block</font>;
      <font color=blue>end func</font>;
</pre><p>
  To allow the use of <tt>'read'</tt> and <tt>'readln'</tt> functions the following
  declarations are made with <tt>'enable_io'</tt>:
</p><pre>
    <font color=blue>const</font> <font color=red>proc</font>: read (<font color=blue>inout</font> <font color=red>file</font>: aFile, <font color=blue>inout</font> <font color=red>aType</font>: aValue) <font color=blue>is func</font>
      <font color=blue>local</font>
        <font color=blue>var</font> <font color=red>string</font>: stri <font color=blue>is</font> <font color=maroon>""</font>;
      <font color=blue>begin</font>
        stri := getwd(aFile);
        aFile.io_empty := stri = <font color=maroon>""</font>;
        <font color=blue>block</font>
          aValue := <font color=red>aType</font> <font color=blue>parse</font> stri;
          aFile.io_ok := TRUE;
        <font color=blue>exception</font>
          <font color=blue>catch</font> RANGE_ERROR:
            aFile.io_ok := FALSE;
        <font color=blue>end block</font>;
      <font color=blue>end func</font>;

    <font color=blue>const</font> <font color=red>proc</font>: readln (<font color=blue>inout</font> <font color=red>file</font>: aFile, <font color=blue>inout</font> <font color=red>aType</font>: aValue) <font color=blue>is func</font>
      <font color=blue>local</font>
        <font color=blue>var</font> <font color=red>string</font>: stri <font color=blue>is</font> <font color=maroon>""</font>;
      <font color=blue>begin</font>
        stri := getln(aFile);
        aFile.io_empty := stri = <font color=maroon>""</font>;
        <font color=blue>block</font>
          aValue := <font color=red>aType</font> <font color=blue>parse</font> stri;
          aFile.io_ok := TRUE;
        <font color=blue>exception</font>
          <font color=blue>catch</font> RANGE_ERROR:
            aFile.io_ok := FALSE;
        <font color=blue>end block</font>;
      <font color=blue>end func</font>;
</pre><p>
  The next two declarations define <tt>'writeln'</tt> and <tt>'backSpace'</tt>:
</p><pre>
    <font color=blue>const</font> <font color=red>proc</font>: writeln (<font color=blue>ref</font> <font color=red>external_file</font>: aFile) <font color=blue>is func</font>
      <font color=blue>begin</font>
        write(aFile, <font color=maroon>"\n"</font>);
      <font color=blue>end func</font>;

    <font color=blue>const</font> <font color=red>proc</font>: backSpace (<font color=blue>ref</font> <font color=red>external_file</font>: aFile) <font color=blue>is func</font>
      <font color=blue>begin</font>
        write(aFile, <font color=maroon>"\b \b"</font>);
      <font color=blue>end func</font>;
</pre><p></p>

<a name="Simple_read_and_write_statements"><b>7.4 Simple read and write statements</b></a>
<p>
    The simple input/output for the standard i/o-files are
  <tt>'read'</tt> and <tt>'write'</tt> which are defined with <tt>'enable_io'</tt>. Simple
  i/o may look like:
</p><pre>
    write(<font color=maroon>"Amount? "</font>);
    read(amount);
</pre><p>
  <tt>'read'</tt> and <tt>'write'</tt> use the files IN and OUT which are described
  in the next chapter.  Here is the definition of the <tt>'read'</tt> and
  <tt>'write'</tt> procedures done with <tt>'enable_io'</tt>:
</p><pre>
    <font color=blue>const</font> <font color=red>proc</font>: read (<font color=blue>inout</font> <font color=red>aType</font>: aValue) <font color=blue>is func</font>
      <font color=blue>begin</font>
        read(IN, aValue);
      <font color=blue>end func</font>;

    <font color=blue>const</font> <font color=red>proc</font>: readln (<font color=blue>inout</font> <font color=red>aType</font>: aValue) <font color=blue>is func</font>
      <font color=blue>begin</font>
        readln(IN, aValue);
      <font color=blue>end func</font>;

    <font color=blue>const</font> <font color=red>proc</font>: write (<font color=blue>in</font> <font color=red>aType</font>: aValue) <font color=blue>is func</font>
      <font color=blue>begin</font>
        write(OUT, aValue);
      <font color=blue>end func</font>;

    <font color=blue>const</font> <font color=red>proc</font>: writeln (<font color=blue>in</font> <font color=red>aType</font>: aValue) <font color=blue>is func</font>
      <font color=blue>begin</font>
        write(OUT, aValue);
        writeln(OUT);
      <font color=blue>end func</font>;
</pre><p>
  Additional procedures defined outside of 'enable_io' are:
</p><pre>
    <font color=blue>const</font> <font color=red>proc</font>: readln <font color=blue>is func</font>
      <font color=blue>local</font>
        <font color=blue>var</font> <font color=red>string</font>: stri <font color=blue>is</font> <font color=maroon>""</font>;
      <font color=blue>begin</font>
        stri := getln(IN);
        IN.io_empty := stri = <font color=maroon>""</font>;
        IN.io_ok := TRUE;
      <font color=blue>end func</font>;

    <font color=blue>const</font> <font color=red>proc</font>: read (NL) <font color=blue>is func</font>
      <font color=blue>begin</font>
        readln;
      <font color=blue>end func</font>;

    <font color=blue>const</font> <font color=red>proc</font>: writeln <font color=blue>is func</font>
      <font color=blue>begin</font>
        writeln(OUT);
      <font color=blue>end func</font>;

    <font color=blue>const</font> <font color=red>proc</font>: write (NL) <font color=blue>is func</font>
      <font color=blue>begin</font>
        writeln(OUT);
      <font color=blue>end func</font>;
</pre><p>
  As an example when you call
</p><pre>
    readln(number);
</pre><p>
  the readln(integer) procedure calls
</p><pre>
    readln(IN, number);
</pre><p>
  if the file IN has not redeclared readln(IN, integer) this
  procedure calls
</p><pre>
    stri := getln(IN);
</pre><p>
  and <tt>'getln'</tt> may call gets(IN, 1) in a loop or may be defined
  for the file IN. Finally the <tt>'<font color=blue>parse</font>'</tt> function converts the
  string read into an <tt>'<font color=red>integer</font>'</tt> and assigns it to 'number'
</p><pre>
    number := <font color=red>integer</font> <font color=blue>parse</font> stri;
</pre><p></p>

<a name="Standard_input_and_output_files"><b>7.5 Standard input and output files</b></a>
<p>
    The standard i/o files are OUT for output and IN for input.
  This TWO are file-variables which are declared as follows:
</p><pre>
    <font color=blue>var</font> <font color=red>file</font>: IN <font color=blue>is</font> STD_IN;
    <font color=blue>var</font> <font color=red>file</font>: OUT <font color=blue>is</font> STD_OUT;
</pre><p>
  STD_IN and STD_OUT are the standard input and output files of
  the operating system (Usually the keyboard and the screen).
  Because IN and OUT are variables redirection of standard input
  or standard output can be done easily by assigning a new value
  to them:
</p><pre>
    IN := OTHER_FILE;
</pre><p>
  After that all <tt>'read'</tt> statements refer to OTHER_FILE.
  Most operating systems have also a stderr file which
  can be accessed via the name STD_ERR. If you want to
  write error messages to the screen even when stdout
  is redirected elsewhere you can write:
</p><pre>
    STD_ERR &lt;&lt; <font color=maroon>"ERROR MESSAGE"</font>;
    STD_ERR &lt;&lt; NL;
</pre><p>
  To redirect the standard output to STD_ERR you can write:
</p><pre>
    OUT := STD_ERR;
</pre><p>
  There is also a file STD_NULL defined. Anything written to
  it is ignored. Reading from it does deliver empty strings.
  This file can be used to initialize file variables as in:
</p><pre>
    <font color=blue>var</font> <font color=red>file</font>: MY_FILE <font color=blue>is</font> STD_NULL;
</pre><p>
  It is also used to represent an illegal file value when for
  example an <tt>'open'</tt> procedure fails.
</p>

<a name="Access_to_operating_system_files"><b>7.6 Access to operating system files</b></a>
<p>
    The access to operating system files is done via files of
  the types <tt>'<font color=red>external_file</font>'</tt>, KEYBOARD_FILE and SCREEN_FILE.
  The type <tt>'<font color=red>external_file</font>'</tt> is defined as:
</p><pre>
    <font color=blue>const</font> <font color=red>type</font>: external_file <font color=blue>is sub</font> <font color=red>NULL_FILE</font> <font color=blue>struct</font>
        <font color=blue>var</font> <font color=red>PRIMITIVE_FILE</font>: ext_file <font color=blue>is</font> PRIMITIVE_NULL_FILE;
        <font color=blue>var</font> <font color=red>string</font>: name <font color=blue>is</font> <font color=maroon>""</font>;
      <font color=blue>end struct</font>;
</pre><p>
  This means that every data item of the type <tt>'external_file'</tt>
  has the components from NULL_FILE and additionally the
  components ext_file and name. Note the type PRIMITIVE_FILE
  which points directly to an operating system file. Objects
  of type PRIMITIVE_FILE can only have operating system
  files as values while objects of type <tt>'<font color=red>file</font>'</tt> can also have
  other files as values. To allow the implementation of the
  type <tt>'<font color=red>external_file</font>'</tt> several operations for the type
  <tt>'<font color=red>PRIMITIVE_FILE</font>'</tt> are defined. But outside <tt>'<font color=red>external_file</font>'</tt> the
  type <tt>'<font color=red>PRIMITIVE_FILE</font>'</tt> and its operations should not be used.
</p><p>
  There are three predefined external files STD_IN, STD_OUT
  and STD_ERR which have the following declarations:
</p><pre>
    <font color=blue>const</font> <font color=red>func external_file</font>: INIT_STD_FILE (<font color=blue>ref</font> <font color=red>PRIMITIVE_FILE</font>: primitive_file,
        <font color=blue>in</font> <font color=red>string</font>: file_name) <font color=blue>is func</font>
      <font color=blue>result</font>
        <font color=blue>var</font> <font color=red>external_file</font>: result <font color=blue>is</font> <font color=red>external_file</font>.value;
      <font color=blue>begin</font>
        result.ext_file := primitive_file;
        result.name := file_name;
      <font color=blue>end func</font>;

    <font color=blue>var</font> <font color=red>external_file</font>: STD_IN <font color=blue>is</font>  INIT_STD_FILE(PRIMITIVE_INPUT,  <font color=maroon>"STD_IN"</font>);
    <font color=blue>var</font> <font color=red>external_file</font>: STD_OUT <font color=blue>is</font> INIT_STD_FILE(PRIMITIVE_OUTPUT, <font color=maroon>"STD_OUT"</font>);
    <font color=blue>var</font> <font color=red>external_file</font>: STD_ERR <font color=blue>is</font> INIT_STD_FILE(PRIMITIVE_ERROR,  <font color=maroon>"STD_ERR"</font>);
</pre><p>
  It is possible to do i/o directly with them, but it is more wisely
  to use them only to initialize user defined file variables as in:
</p><pre>
    <font color=blue>var</font> <font color=red>file</font>: ERR <font color=blue>is</font> STD_ERR;
</pre><p>
  In the rest of the program references to such a variable can be
  used:
</p><pre>
    ERR &lt;&lt; <font color=maroon>"Some error occurred"</font>;
    ERR &lt;&lt; NL;
</pre><p>
  In this case redirection of the ERR file can be done very easy.
  The second way to access external_files is to use the <tt>'open'</tt>
  function. Usually a file variable is declared
</p><pre>
    <font color=blue>var</font> <font color=red>file</font>: MY_OUT <font color=blue>is</font> STD_NULL;
</pre><p>
  and the result of the <tt>'open'</tt> function is assigned to this file
  variable
</p><pre>
    MY_OUT := open(<font color=maroon>"my_file"</font>, <font color=maroon>"w"</font>);
</pre><p>
  If the <tt>'open'</tt> has failed it returns STD_NULL so we must check the
  file variable to be on the save side
</p><pre>
    <font color=blue>if</font> MY_OUT &lt;> STD_NULL <font color=blue>then</font>
</pre><p>
  After that output to MY_OUT is possible with
</p><pre>
    MY_OUT &lt;&lt; <font color=maroon>"hi there"</font>;
    MY_OUT &lt;&lt; NL;
</pre><p>
  As stated earlier STD_IN provides an interface to the keyboard
  which is line buffered and echoed on STD_OUT. This means that
  you can see everything you typed in and correct it with BACKSPACE
  until you press RETURN. But sometimes an unbuffered and unechoed
  input is needed. This is provided with the file KEYBOARD.
  This are the declaration of the type KEYBOARD_FILE and the file
  KEYBOARD itself:
</p><pre>
    <font color=blue>const</font> <font color=red>type</font>: KEYBOARD_FILE <font color=blue>is</font> <font color=red>subtype file</font>;

    <font color=blue>var</font> <font color=red>KEYBOARD_FILE</font>: KEYBOARD <font color=blue>is</font> SCREEN_KEYBOARD;
</pre><p>
  Reading from KEYBOARD may deliver simple ascii characters or
  special codes for function keys. This special codes can also
  be copied to a character variables because the type <tt>'<font color=red>char</font>'</tt> is
  not limited to 8 bits. For each function key exists a
  predefined constant that can be used to test which key is
  pressed.
</p><p>
  Additionally to the operations possible with other files there
  are two functions that are applicable only for the file KEYBOARD.
  The busy_getc(KEYBOARD) function delivers the next character
  from the keyboard or the character KEY_NONE if no key has been
  pressed. The busy_gets(KEYBOARD, integer) function delivers a
  string consisting of the characters in the keyboard buffer but
  with the maximum length which is specified in the second
  parameter.
</p><p>
  To allow random access output to a text screen (or text window)
  the type SCREEN_FILE is defined. The function
</p><pre>
    open(SCREEN_FILE)
</pre><p>
  returns a SCREEN_FILE.
</p>

<a name="User_defined_file_types"><b>7.7 User defined file types</b></a>
<p>
    In addition to the predefined file types it is often
  necessary to define a new type of file. Such a new file
  has several possibilities:
</p><ul>
    <li><!-- -  -->It could store its contents in a string (not only to be
      faster but also to provide additional file operations)</li>

    <li><!-- -  -->The information can be processed (e.g To upper case)
      and sent to another file.</li>

    <li><!-- -  -->It could work just like an unix utility (Think of
      more, sort, tee, uniq ...)</li>

    <li><!-- -  -->It could provide a file-like interface for something
      with an other interface. (e.g. The contents of a
      directory, or random access i/o to the screen)</li>
</ul><p>
  With the following declaration we define a new file type:
</p><pre>
    <font color=blue>const</font> <font color=red>type</font>: NEW_FILE <font color=blue>is sub</font> <font color=red>NULL_FILE</font> <font color=blue>struct</font>
        ...
        <font color=green>(* Local data *)</font>
        ...
      <font color=blue>end struct</font>;
</pre><p>
  It is not necessary to derive the NEW_FILE type direct from
  NULL_FILE. The NEW_FILE type may also be an indirect descendant
  of NULL_FILE. So it is possible to create file type hierarchies.
</p><p>
  As next an open function is needed to generate a new NEW_FILE:
</p><pre>
    <font color=blue>const</font> <font color=red>func file</font>: open_new_file (  <font color=green>(* Parameters *)</font> ) <font color=blue>is func</font>
      <font color=blue>result</font>
        <font color=blue>var</font> <font color=red>file</font>: result <font color=blue>is</font> STD_NULL;
      <font color=blue>begin</font>
        ...
        <font color=green>(* Initialisation of the local data *)</font>
        result := malloc( ... );
        ...
      <font color=blue>end func</font>;
</pre><p>
  Note the usage of the ALLOC function to generate a new data
  item. This data item is not freed automatically but if you
  do not open files to often this does not hurt. Now only the
  two basic i/o operations must be defined:
</p><pre>
    <font color=blue>const</font> <font color=red>proc</font>: (<font color=blue>inout</font> <font color=red>NEW_FILE</font>: new_fil) &lt;&lt; (<font color=blue>in</font> <font color=red>string</font>: stri) <font color=blue>is func</font>
      <font color=blue>begin</font>
        ...
        <font color=green>(* Statements that do the output *)</font>
        ...
      <font color=blue>end func</font>;

    <font color=blue>const</font> <font color=red>proc</font>: gets (<font color=blue>inout</font> <font color=red>NEW_FILE</font>: new_fil, <font color=blue>in</font> <font color=red>integer</font>: leng) <font color=blue>is func</font>
      <font color=blue>result</font>
        <font color=blue>var</font> <font color=red>string</font>: stri <font color=blue>is</font> "";
      <font color=blue>begin</font>
        ...
        <font color=green>(* Statements that do the input *)</font>
        ...
      <font color=blue>end func</font>;
</pre><p></p><hr>

<p></p>
<a name="DECLARATIONS"><big><b>8. DECLARATIONS</b></big></a>
<!-- =============== -->
<p>
  Seed7 has three kinds of declarations:
</p><ul>
    <li><!-- -  -->System declarations</li>
    <li><!-- -  -->Syntax declarations</li>
    <li><!-- -  -->Semantic declarations</li>
</ul><p>
  which are described in detail in the following subchapters.
</p>

<a name="System_declarations"><b>8.1 System declarations</b></a>
<p>
    With system declarations the analyzer and the interpreter
  are informed about which objects should be used for various system
  internal purposes. An example of a system declaration is
</p><pre>
    $ <font color=blue>system</font> <font color=maroon>"integer"</font> <font color=blue>is </font><font color=red>integer</font>;
</pre><p>
  This defines that the type of all integer literals is <tt>'<font color=red>integer</font>'</tt>.
  Additionally <tt>'<font color=red>integer</font>'</tt> is used as type for all integers generated
  by primitive actions.
  There are different objects which are defined by a
  system declaration
</p><ul>
    <li><!-- -  -->The types of literals and simple expressions for example:
        <tt>'<font color=red>string</font>'</tt> for strings and <tt>'<font color=red>integer</font>'</tt> for integers</li>

    <li><!-- -  -->Which objects should be used as result values for
      primitive actions for example:<pre>
        TRUE, FALSE and empty</pre></li>

    <li><!-- -  -->The EXCEPTIONS which are to be raised by
      primitive actions for example:<pre>
        NUMERIC_ERROR and MEMORY_ERROR</pre></li>

    <li><!-- -  -->Which objects should be used for several implicit
      actions for example:<pre>
        := ::= destroy &lt;&lt; and flush</pre></li>
</ul><p>
  The following system declarations exist
</p><pre>
    $ <font color=blue>system</font> <font color=maroon>"type"</font> <font color=blue>is</font> <font color=red>type</font>;
    $ <font color=blue>system</font> <font color=maroon>"expr"</font> <font color=blue>is</font> <font color=red>expr</font>;
    $ <font color=blue>system</font> <font color=maroon>"integer"</font> <font color=blue>is</font> <font color=red>integer</font>;
    $ <font color=blue>system</font> <font color=maroon>"char"</font> <font color=blue>is</font> <font color=red>char</font>;
    $ <font color=blue>system</font> <font color=maroon>"string"</font> <font color=blue>is</font> <font color=red>string</font>;
    $ <font color=blue>system</font> <font color=maroon>"proc"</font> <font color=blue>is</font> <font color=red>proc</font>;
    $ <font color=blue>system</font> <font color=maroon>"float"</font> <font color=blue>is</font> <font color=red>float</font>;

    $ <font color=blue>system</font> <font color=maroon>"true"</font> <font color=blue>is</font> TRUE;
    $ <font color=blue>system</font> <font color=maroon>"false"</font> <font color=blue>is</font> FALSE;
    $ <font color=blue>system</font> <font color=maroon>"empty"</font> <font color=blue>is</font> empty;

    $ <font color=blue>system</font> <font color=maroon>"memory_error"</font> <font color=blue>is</font> MEMORY_ERROR;
    $ <font color=blue>system</font> <font color=maroon>"numeric_error"</font> <font color=blue>is</font> NUMERIC_ERROR;
    $ <font color=blue>system</font> <font color=maroon>"range_error"</font> <font color=blue>is</font> RANGE_ERROR;
    $ <font color=blue>system</font> <font color=maroon>"io_error"</font> <font color=blue>is</font> IO_ERROR;
    $ <font color=blue>system</font> <font color=maroon>"illegal_action"</font> <font color=blue>is</font> ILLEGAL_ACTION;

    $ <font color=blue>system</font> <font color=maroon>"assign"</font> <font color=blue>is</font> := ;
    $ <font color=blue>system</font> <font color=maroon>"create"</font> <font color=blue>is</font> ::= ;
    $ <font color=blue>system</font> <font color=maroon>"destroy"</font> <font color=blue>is</font> destroy;
    $ <font color=blue>system</font> <font color=maroon>"ord"</font> <font color=blue>is</font> ord;
    $ <font color=blue>system</font> <font color=maroon>"in"</font> <font color=blue>is</font> <font color=blue>in</font>;
    $ <font color=blue>system</font> <font color=maroon>"prot_outfile"</font> <font color=blue>is</font> PROT_OUTFILE;
    $ <font color=blue>system</font> <font color=maroon>"flush"</font> <font color=blue>is</font> flush;
    $ <font color=blue>system</font> <font color=maroon>"write"</font> <font color=blue>is</font> write;
    $ <font color=blue>system</font> <font color=maroon>"writeln"</font> <font color=blue>is</font> writeln;
    $ <font color=blue>system</font> <font color=maroon>"main"</font> <font color=blue>is</font> main;
</pre><p></p>

<a name="Syntax_declarations"><b>8.2 Syntax declarations</b></a>
<p>
    In many languages exist predefined constructs like statements
  and operators. This constructs have fixed syntax and semantics
  defined in a natural language or in some meta language. Further
  more no programmer is allowed to define new such constructs.
  But sometimes a full description of the syntax and semantics
  of a construct written in the programming language itself is
  helpful. This avoids the need to use ambiguous natural language
  descriptions and to learn an additional meta language. Also
  this gives the opportunity to define new constructs. Note that
  a compiler-compiler does not offer this opportunity and has
  also a meta language.
</p><p>
    When a syntax construct has parameters before the first
  symbol or after the last symbol the priority and the
  associativity of the construct are significant. Constructs
  with stronger priority bind their parameters earlier than
  constructs with weaker priority. The priority is described
  by a natural number (inclusive 0). The strongest priority
  is 0. Weaker priorities are described by larger numbers.
  What bind means is can be declared with an example:
</p><pre>
                                       =
    A + B = C * D                    /   \
                                    /     \
    * priority 4                   +       *
    + priority 5                 /   \   /   \
    = priority 8                A     B C     D
</pre><p>
  First the * takes its parameters, then the + and at last
  the = follows.
</p><p>
  The associativity describes, in which order constructs
  with equal priority bind their parameters. For example
</p><pre>
    A - B - C
</pre><p>
  can be interpreted in two ways:
</p><pre>
    (A - B) - C    or   A - (B - C)
</pre><p>
  There are four associativities possible:</p><pre>
                                                   Symbol

    Binding from left to right                       ->

    Binding from right to left                       &lt;-

    Neither the left nor the right parameter
    are allowed to have the same priority            &lt;->

    At the left side there is a binding from
    left to right and at the right side there
    is a binding from right to left                 ->&lt;-
</pre><p>
  The last two possibilities give no legal interpretation
  in the subtraction example.
  The third kind of assiciativity ( &lt;-> ) is used by the
  equal operator ( = ) of Pascal because there a expression
  like
</p><pre>
    A = B = C
</pre><p>
  is not legal.
</p><p>
  There is a second way to describe the associativity.
  The associativity describes if an operand must have a stronger
  priority than the priority of the operator. For example:
</p><pre>
                             -                     3
    A - B - C              /   \                 /   \
                          /     \           &lt;=3 /     \ &lt;3
    - priority 3 ->      /       \             /       \
                        -         C           3         0
                      /   \                 /   \
                     /     \           &lt;=3 /     \ &lt;3
                    /       \             /       \
                   A         B           0         0
</pre><p>
  The numbers in the nodes of the right tree show the priority
  of each sub expression (sub tree). With &lt; and &lt;= the required
  condition for the priority of an operand is described. An
  interpretation is legal if all this conditions are met.
  If there are more than one legal interpretations or no legal
  interpretation the expression is illegal.
</p><p>
  Table for the possibilities of associativity:
</p><pre>
    +---------------+------------------------------+
    | associativity |     The priority of the      |
    +---------------+--------------+---------------+
    |               | left operand | right operand |
    |               |    must be   |    must be    |
    +---------------+--------------+---------------+
    |      ->       |      &lt;=      |      &lt;        |
    |      &lt;-       |      &lt;       |      &lt;=       |
    |      &lt;->      |      &lt;       |      &lt;        |
    |     ->&lt;-      |      &lt;=      |      &lt;=       |
    +---------------+--------------+---------------+
    |               |  than that of the operator   |
    +---------------+------------------------------+
</pre><p>
  The parameter before the operator symbol is called left operand.
  The parameter after the last symbol of a construct is called
  right operand. In case of normal operators the last symbol of a
  construct and the operator symbol are identical. If this is not
  the case there is a third kind of operand. Between the operator
  symbol and the last symbol of a construct are the middle operands.
  Middle operands can have any priority.
</p>

<a name="Semantic_declarations"><b>8.3 Semantic declarations</b></a>
<p>
    A semantic declaration declares an object in the database.
  For example
</p><pre>
    <font color=blue>const</font> <font color=red>integer</font>: ONE <font color=blue>is</font> 1;
</pre><p>
  declares the <tt>'<font color=red>integer</font>'</tt> constant ONE which is initialized with the
  value 1. Variable declarations are also possible. For example
</p><pre>
    <font color=blue>var</font> <font color=red>integer</font>: NUMBER <font color=blue>is</font> 0;
</pre><p>
  declares the <tt>'<font color=red>integer</font>'</tt> variable NUMBER which is initialized with
  the value 0. With each declaration the new declared object
  obtains an initial value. Note that it is not possible to declare
  an object without an initial value. Declarations with initialisation
  expressions are also possible. For example
</p><pre>
    <font color=blue>var</font> <font color=red>string</font>: FILE_NAME <font color=blue>is</font> NAME & <font color=maroon>".txt"</font>;
</pre><p>
  The expression is evaluated and the result is assigned to the
  new object using the creation operation ( ::= ). For example
  the expression
</p><pre>
    ONE . ::= . 1
</pre><p>
  is executed to assign 1 to the object ONE. There are two
  reasons to use ::= instead of := to assign the initialisation
  value.
</p><ol><li>
  <!-- 1.  -->The assignment ( := ) can only be used to assign a value
    to a variable and initialisation is also needed for
    constants.
</li><li>
  <!-- 2.  -->Sometimes some initialisations are needed for the new
    object in addition to the pure assignment.
</li></ol><p>
  For all predefined types the creation operator ( ::= )
  is already defined. To allow the declaration of objects of a
  new user defined type the constructor operation for this type
  must be defined.
</p><hr>

<p></p>
<a name="TOKENS"><big><b>9. TOKENS</b></big></a>
<!-- ========= -->
<p>
    A program consists of a sequence of tokens which may be delimited
  by white space. There are two types of tokens:
</p><pre>
    identifiers
    literals
</pre><p>
  Syntax:
</p><pre>
    program ::=
      { white_space | token } .

    token ::=
      identifier | literal .
</pre><p></p>

<a name="White_space"><b>9.1 White space</b></a>
<p>
    There are three types of white space
</p><pre>
    spaces
    comments
    line comments
</pre><p>
  White space always terminates a preceding token. Some white
  space is required to separate otherwise adjacent tokens.
</p><p>
  Syntax:
</p><pre>
    white_space ::=
      ( space | comment | line_comment )
      { space | comment | line_comment } .
</pre><p></p>

<a name="Spaces"><b><i>9.1.1 Spaces</i></b></a>
<p>
    There are several types of space characters which are ignored
  except as they separate tokens:
</p><pre>
    blanks, horizontal tabs, carriage returns and new lines.
</pre><p>
  Syntax:
</p><pre>
    space ::=
      ' ' | TAB | CR | NL .
</pre><p></p>

<a name="Comments"><b><i>9.1.2 Comments</i></b></a>
<p>
    Comments are introduced with the characters <font color=green>(* and are
  terminated with the characters *)</font> . For example:
</p><pre>
    <font color=green>(* This is a comment *)</font>
</pre><p>
  Comment nesting is allowed so it is possible to comment out
  larger sections of the program which can also include comments.
  Comments cannot occur within string or character literals.
</p><p>
  Syntax:
</p><pre>
    comment ::=
      '(*' { any_character } '*)' .
</pre><p></p>

<a name="Line comments"><b><i>9.1.3 Line comments</i></b></a>
<p>
    Line comments are introduced with the character <font color=green># and are
  terminated with the end of the line.</font><br>
  For example:
</p><pre>
    <font color=green># This is a comment</font>
</pre><p>
  Comments cannot occur within string, character or numerical
  literals.
</p><p>
  Syntax:
</p><pre>
    line_comment ::=
      '#' { any_character } NL .
</pre><p></p>

<a name="Identifiers"><b>9.2 Identifiers</b></a>
<p>
    There are three types of identifiers
</p><pre>
    name identifiers
    special identifiers
    parenthesis
</pre><p>
  Identifiers can be written adjacent except that between two
  name identifiers and between two special identifiers white space
  must be used to separate them.
</p><p>
  Syntax:
</p><pre>
    identifier ::=
      name_identifier | special_identifier | parenthesis .
</pre><p></p>

<a name="Name identifiers"><b><i>9.2.1 Name identifiers</i></b></a>
<p>
    A name identifier is a sequence of letters, digits and
  underscores ( _ ). The first character must be a letter or an
  underscore. Examples of name identifiers are:
</p><pre>
    NUMBER  integer  const  if  UPPER_LIMIT  LowerLimit  x5  _end
</pre><p>
  Upper and lower case letters are different. Name identifiers
  may have any length and all characters are significant. The
  name identifier is terminated with a character which is
  neither a letter (or _ ) nor a digit. The terminating
  character is not part of the name identifier.
</p><p>
  Syntax:
</p><pre>
    name_identifier ::=
      ( letter | underscore ) { letter | digit | underscore } .

    letter ::=
      upper_case_letter | lower_case_letter .

    upper_case_letter ::=
      'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' |
      'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' |
      'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' .

    lower_case_letter ::=
      'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' |
      'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' |
      'u' | 'v' | 'w' | 'x' | 'y' | 'z' .

    digit ::=
      '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' .

    underscore ::=
      '_' .
</pre><p></p>

<a name="Special identifiers"><b><i>9.2.2 Special identifiers</i></b></a>
<p>
    A special identifier is a sequence of special characters.
  Examples of special identifiers are:
</p><pre>
    +  :=  &lt;=  *  ->  ,  &
</pre><p>
  Here is a list of all special characters:
</p><pre>
    ! $ % & * + , - . / : ; &lt; = > ? @ \ ^ ` | ~
</pre><p>
  Special identifiers may have any length and all characters are
  significant. The special identifier is terminated with a character
  which is not a special character. The terminating character is
  not part of the special identifier.
</p><p>
  Syntax:
</p><pre>
    special_identifier ::=
      special_character { special_character } .

    special_character ::=
      '!' | '$' | '%' | '&' | '*' | '+' | ',' | '-' | '.' | '/' |
      ':' | ';' | '&lt;' | '=' | '>' | '?' | '@' | '\' | '^' | '`' |
      '|' | '~' .
</pre><p></p>

<a name="Parentheses"><b><i>9.2.3 Parentheses</i></b></a>
<p>
    A parenthesis is one of the following characters:
</p><pre>
    ( ) [ ] { }
</pre><p>
  Note that a parenthesis consists of only one character. Except
  for the character sequence (* (which introduces a comment)
  a parenthesis is terminated with the next character.
</p><p>
  Syntax:
</p><pre>
    parenthesis ::=
      '(' | ')' | '[' | ']' | '{' | '}' .
</pre><p></p>

<a name="Literals"><b>9.3 Literals</b></a>
<p>
    There are three types of literals
</p><pre>
    integer literals
    character literals
    string literals
</pre><p>
  Syntax:
</p><pre>
    literal ::=
      integer_literal | character_literal | string_literal .
</pre><p></p>

<a name="Integer literals"><b><i>9.3.1 Integer literals</i></b></a>
<p>
    An integer literal is a sequence of digits which is taken to
  be decimal. The sequence of digits may be followed by the letter
  E or e an optional + sign and a decimal exponent. Based numbers
  can be specified when the sequence of digits is followed by
  the # character and a sequence of extended digits. The decimal
  number in front of the # character specifies the base of the
  number which follows the # character. As base a number between
  2 and 36 is allowed. As extended digits the letters A or a can
  be used for 10, B or b can be used for 11 and so on to Z or z
  which can be used as 35.
</p><p>
  Syntax:
</p><pre>
    integer_literal ::=
      decimal_integer [ exponent | based_integer ] .

    decimal_integer ::=
      digit { digit } .

    exponent ::=
      ( 'E' | 'e' ) [ '+' ] decimal_integer .

    based_integer ::=
      '#' extended_digit { extended_digit } .

    extended_digit ::=
      letter | digit .
</pre><p></p>

<a name="String literals"><b><i>9.3.2 String literals</i></b></a>
<p>
    A string literal is a sequence of characters surrounded by
  double quotes. For example:
</p><pre>
    <font color=maroon>""</font>   <font color=maroon>" "</font>   <font color=maroon>"\""</font>   <font color=maroon>"'"</font>   <font color=maroon>"\'"</font>   <font color=maroon>"String"</font>   <font color=maroon>"ch=\" "</font>   <font color=maroon>"\n\n"</font>
</pre><p>
  In order to represent nonprintable characters and certain
  printable characters the following escape sequences may be
  used.
</p><pre>
    audible alert    BEL      \a    backslash    (\)   \\
    backspace        BS       \b    apostrophe   (')   \'   
    escape           ESC      \e    double quote (")   \"
    formfeed         FF       \f
    newline          NL (LF)  \n    control-A          \A
    carriage return  CR       \r      ...
    horizontal tab   HT       \t    control-Z          \Z
    vertical tab     VT       \v
</pre><p>
  Additionally there are the following possibilities:
</p><ul>
    <li><!-- -  -->Two backslashes with a sequence of blanks, horizontal tabs,
      carriage returns and new lines between them are completely
      ignored. The ignored characters are not part of the string.
      This can be used to continue a string in the following line.
      Note that in this case the leading spaces in the new line
      are not part of the string.</li>

    <li><!-- -  -->Two backslashes with an integer literal between them is
      interpreted as character with the specified ordinal number.
      Note that the integer literal is interpreted decimal unless
      it is written as based integer.</li>
</ul><p>
  Syntax:
</p><pre>
    string_literal ::=
      '"' { string_character } '"' .

    string_character ::=
      printable_character | escape_sequence .

    escape_sequence ::=
      '\a' | '\b' | '\e' | '\f' | '\n' | '\r' | '\t' | '\v' |
      '\\' | '\''' | '\"' | '\' upper_case_letter |
      '\' { space } '\' | '\' integer_literal '\' .
</pre><p></p>

<a name="Character literals"><b><i>9.3.3 Character literals</i></b></a>
<p>
    A character literal is a character enclosed in single
  quotes. For example:
</p><pre>
    <font color=maroon>'a'</font>   <font color=maroon>' '</font>   <font color=maroon>'\n'</font>   <font color=maroon>'!'</font>   <font color=maroon>'\\'</font>   <font color=maroon>'2'</font>   <font color=maroon>'"' </font>  <font color=maroon>'\"'</font>   <font color=maroon>'\''</font>
</pre><p>
  To represent control characters and certain other characters in
  character literals the same escape sequences as for string
  literals may be used.
</p><p>
  Syntax:
</p><pre>
    character_literal ::=
      ''' ( printable_character | escape_sequence ) ''' .

    escape_sequence ::=
      '\a' | '\b' | '\e' | '\f' | '\n' | '\r' | '\t' | '\v' |
      '\\' | '\''' | '\"' | '\' upper_case_letter |
      '\' { space } '\' | '\' integer_literal '\' .
</pre><p></p><hr>

<p></p>
<a name="EXPRESSIONS"><big><b>10. EXPRESSIONS</b></big></a>
<!-- =============== -->
<p>
    There are two types of expressions. On one side there so
  called simple expressions which are constructed using fixed
  predefined syntax rules. On the other side there are expressions
  which are constructed according to syntax rules defined with
  syntax declarations. Here we describe only simple expressions.
  How syntax declarations work is described in the Chapters 3 and
  8.2. There are only few fixed predefined syntax rules:
</p>

<a name="EXPRESSION_Parentheses"><b>10.1 Parentheses</b></a>
<p>
    Parentheses can be used to override any precedence
  rules of predefined and user defined syntax constructs.
  For example
</p><pre>
    2 * (3 + 4)
</pre><p>
  specifies that the + operator gets his parameters first.
</p><p>
  Syntax:
</p><pre>
    parentheses_expression ::=
      '(' expression ')' .
</pre><p></p>

<a name="Call_expressions"><b>10.2 Call expressions</b></a>
<p>
    Call expressions can also be used to form a list.
  For example
</p><pre>
    writeln(<font color=maroon>"hello world"</font>)
</pre><p>
  forms a list expression with the elements
</p><pre>
    <font color=maroon>"hello world"</font>
    writeln
</pre><p>
  The meta object of this list is specified with the system
  declaration <font color=maroon>"system expr"</font> which is defined in the include
  file <font color=maroon>"syntax.s7i"</font> included from <font color=maroon>"seed7_05.s7i"</font> as
</p><pre>
    $ <font color=blue>system</font> <font color=maroon>"expr"</font> is expr;
</pre><p>
  A call expression with two parameters as
</p><pre>
    pos(<font color=maroon>"Scotty! Beam me up."</font>, <font color=maroon>"am"</font>)
</pre><p>
  forms a list expression with the elements
</p><pre>
    <font color=maroon>"Scotty! Beam me up."</font>
    <font color=maroon>"am"</font>
    pos
</pre><p>
  Syntax:
</p><pre>
    call_expression ::=
      primary_expression [ '(' comma_expression ')' ] .

    primary_expression ::=
      parentheses_expression | atom .
</pre><p></p>

<a name="Dot_expressions"><b>10.3 Dot expressions</b></a>
<p>
    Dot expressions start with a dot and have dots as separator
  between the elements of the list. For example
</p><pre>
    .<font color=blue>not</font>.TRUE
</pre><p>
  and
</p><pre>
    .OKAY.<font color=blue>and</font>.GO_ON
</pre><p>
  form list expressions with the elements
</p><pre>
    <font color=blue>not</font>
    TRUE
</pre><p>
  and
</p><pre>
    OKAY
    <font color=blue>and</font>
    GO_ON
</pre><p>
  The meta object of this list is specified with the system
  declaration <font color=maroon>"system expr"</font> which is defined in the include
  file <font color=maroon>"syntax.s7i"</font> included from <font color=maroon>"seed7_05.s7i"</font> as
</p><pre>
    $ <font color=blue>system</font> <font color=maroon>"expr"</font> <font color=blue>is</font> <font color=red>expr</font>;
</pre><p>
  Dot expressions override the priority of the elements.
  Dot expressions are used in <tt>'<font color=blue>syntax</font>'</tt> declarations.
</p><p>
  Syntax:
</p><pre>
    dot_expression ::=
      [ '.' ] call_expression { '.' call_expression } .
</pre><p></p><hr>

<p></p>
<a name="OPERATING_SYSTEM_ACCESS"><big><b>11. OPERATING SYSTEM ACCESS</b></big></a>
<!-- =========================== -->
<p>
    Seed7 provides a portable access to the services provided
  by an operating system. This interface is oriented towards
  POSIX and UNIX.
</p>

<a name="Directory_access"><b>11.1 Directory access</b></a>
<p>
    A portable access to the contents of directories in the file
  system is provided. For example: After the declaration
</p><pre>
    <font color=blue>var</font> <font color=red>array string</font>: dir_array <font color=blue>is </font>0 <font color=blue>times</font> <font color=maroon>""</font>;
</pre><p>
  the following statement
</p><pre>
    dir_array := read_dir(<font color=maroon>"."</font>);
</pre><p>
  reads the current working directory and stores it into the
  string-array <tt>'dir_array'</tt>. The components of the directory
  can now be accessed via indexing:
</p><pre>
    <font color=blue>for</font> index <font color=blue>range</font> 1 <font color=blue>to</font> length(dir_array) <font color=blue>do</font>
      writeln(dir_array[index]);
    <font color=blue>end for</font>;
</pre><p>
  Note that the strings contain only the name of the file.
  Additional information must be obtained by other calls.
  Other directories can be read by using their name in the
  <tt>'read_dir'</tt> call.
  Basing on this mechanism another mechanism is constructed
  to read the contents of a directory as file. This is shown
  in the following example
</p><pre>
    ...

    <font color=blue>include</font> <font color=maroon>"dir.s7i"</font>;

    <font color=blue>var</font> <font color=red>file</font>: dir_file <font color=blue>is</font> STD_NULL;
    <font color=blue>var</font> <font color=red>string</font>: file_name <font color=blue>is</font> <font color=maroon>""</font>;

    ...

    dir_file := open_dir(<font color=maroon>"."</font>);
    file_name := getln(dir_file);
    <font color=blue>while</font> file_name &lt;> <font color=maroon>""</font> <font color=blue>do</font>
      writeln(file_name);
      file_name := getln(dir_file);
    <font color=blue>end while</font>;
</pre><p>
  This is useful in programs that accept a list of filenames
  as input. Using the <tt>'open_dir'</tt> mechanism it is possible to
  read the filenames directly from a directory without large
  changes in the program.
</p>

<a name="Other_directory_operations"><b>11.2 Other directory operations</b></a>
<p>
    In most operating systems each process has a current working
  directory. With the following statement
</p><pre>
    my_dir := getcwd();
</pre><p>
  the full path of the current working directory is assigned to
  the string variable 'my_dir'. To change the current working
  directory the next statement can be used
</p><pre>
    chdir(<font color=maroon>"/usr/bin"</font>);
</pre><p>
  A new directory can be created with
</p><pre>
    mkdir(<font color=maroon>"my_dir"</font>);
</pre><p></p>

<a name="File_operations"><b>11.3 File operations</b></a>
<p>
    There are the following file operations accessible
</p><pre>
    remove(<font color=maroon>"file"</font>);
    rename(<font color=maroon>"old_name"</font>, <font color=maroon>"new_name"</font>);
    copy(<font color=maroon>"from"</font>, <font color=maroon>"to"</font>);
</pre><p></p><hr>

<p></p>
<a name="PRIMITIVE_ACTIONS"><big><b>12. PRIMITIVE ACTIONS</b></big></a>
<!-- ===================== -->
<p>
    Not all functions can be described by calling other
  functions of the same language. For this reason and for
  performance reasons several functions are defined using a
  mechanism called action. For example the while statement can
  easy be defined using recursion. But this would hurt
  performance and use a huge amount of memory for the runtime
  stack. In practise an implementation of the while statement
  can use a goto instead of a subroutine call. Since we have
  no goto-statement the primitive action PRC_WHILE can be used.
  The declaration of the while statement follows:
</p><pre>
    <font color=blue>const</font> <font color=red>proc</font>: while (<font color=blue>in</font> <font color=red>func boolean</font> <font color=blue>param</font>) do
        (<font color=blue>in</font> <font color=red>proc</font> <font color=blue>param</font>) end while <font color=blue>is action</font> <font color=maroon>"PRC_WHILE"</font>;
</pre><p>
  This declaration shows the types and the position of the
  parameters of the while-statement. This gives you enough
  information to use this statement. But it is not possible
  to change the position or the type of the parameters because
  they are hard coded in the interpreter.
</p><p>
    Currently there are several hundred primitive actions
  predefined in the interpreter. They all have names in upper
  case characters which have the form:
</p><pre>
    TYPE_ACTION
</pre><p>
  Which means that for example all <tt>'<font color=red>integer</font>'</tt> actions start with
  INT_ and all assignment actions end with _CPY . For the
  following types exist primitive actions (which are grouped
  together in the *lib.c files mentioned):
</p><pre>
    ACT_  actlib.c  <font color=red>ACTION</font> operations
    ARR_  arrlib.c  <font color=red>array</font> operations
    BIG_  biglib.c  <font color=red>bigInteger</font> operations
    BLN_  blnlib.c  <font color=red>boolean</font> operations
    CHR_  chrlib.c  <font color=red>char</font> operations
    CMD_  cmdlib.c  Various directory, file and other commands
    DCL_  dcllib.c  Declaration operations
    DRW_  drwlib.c  Drawing operations
    ENU_  enulib.c  Enumeration operations
    FIL_  fillib.c  <font color=red>external_file</font> operations
    FLT_  fltlib.c  <font color=red>float</font> operations
    HSH_  hshlib.c  <font color=red>hash</font> operations
    INT_  intlib.c  <font color=red>integer</font> operations
    KBD_  kbdlib.c  Keyboard operations
    LST_  lstlib.c  List operations
    PRC_  prclib.c  <font color=red>proc</font> operations and statements
    PRG_  prglib.c  Program operations
    REF_  reflib.c  <font color=red>reference</font> operations
    RFL_  rfllib.c  <font color=red>ref_list</font> operations
    SCR_  scrlib.c  Screen operations
    SCT_  sctlib.c  <font color=red>struct</font> operations
    SET_  setlib.c  <font color=red>set</font> operations
    STR_  strlib.c  <font color=red>string</font> operations
    TIM_  timlib.c  <font color=red>time</font> and <font color=red>duration</font> operations
    TYP_  typlib.c  <font color=red>type</font> operations
    UT8_  ut8lib.c  <font color=red>utf8_file</font> operations
</pre><p>
  The C functions in the *lib.c files have lowercase names.
  Therefore the <tt>'PRC_WHILE'</tt> action is implemented
  as the C function <tt>'prc_while'</tt> in the file <tt>'prclib.c'</tt>.
  The prototype for all C primitiv action functions is identical.
  The  <tt>'prc_while'</tt> function has the following prototype:
</p><pre>
    objecttype prc_while (listtype);
</pre><p>
  All the *lib.c files containing primitive actions are grouped
  together in the Seed7 runtime library (Licensed under LGPL).
  Every *lib.c file has a corresonding *lib.h file.
  The following list shows actions which are used with more than
  one type:
</p><pre>
    _ABS     Absolute value
    _ADD     Addition
    _CAT     Concatenation
    _CMP     Compare
    _CPY     Copy (Assignment)
    _CREATE  Initialize (Construct)
    _DESTR   Destroy (Destruct)
    _DECR    Decrement
    _DIV     Division
    _EQ      Equal
    _GE      Greater equal
    _GT      Greater than
    _HEAD    Head of <font color=red>ref_list</font>, <font color=red>array</font>, <font color=red>string</font>
    _IDX     Index (Element) of <font color=red>ref_list</font>, <font color=red>array</font>, <font color=red>string</font>
    _INCR    Increment
    _LE      Less equal
    _LNG     Length
    _LOWER   Convert to lower case
    _LT      Less than
    _MINUS   Change sign
    _MULT    Multiply
    _NE      Not equal
    _PLUS    Positive sign (noop)
    _POW     Power
    _PRED    Predecessor
    _RAND    Random value
    _RANGE   Range of <font color=red>ref_list</font>, <font color=red>array</font>, <font color=red>string</font>
    _SBTR    Subtract
    _SCAN    Convert from <font color=red>string</font> to another type
    _SQRT    Square root
    _STR     Convert to <font color=red>string</font>
    _SUCC    Successor
    _TAIL    Tail of <font color=red>ref_list</font>, <font color=red>array</font>, <font color=red>string</font>
    _UPPER   Convert to upper case
</pre><p>
  If you are interested in the primitive actions just look into
  the file seed7_05.s7i .
</p><hr>

<p></p>
<a name="ERRORS"><big><b>13. ERRORS</b></big></a>
<!-- ========== -->
<p></p>
<a name="Compile_time_errors"><b>13.1 Compile time errors</b></a>
<p>
  The compile time errors are not fatal (the program can
  execute) except for the error 1 (Out of heap space) which
  terminates the compilation process and no execution occurs.
</p><pre>
   1: Fatal Error: Out of heap space
   2: File "%s" not found
   3: Include file "%s" not found
   4: "END OF FILE" encountered
   5: Illegal character in text "%s"
   6: Unclosed comment
   7: Illegal pragma "%s"
   8: Illegal action "%s"
   9: Illegal system declaration "%s"
  10: Integer "%s" too big
  11: Negative exponent in integer literal
  12: Digit expected found "%s"
  13: Integer "%dE%s" too big
  14: Integer base "%ld" not between 2 and 36
  15: Extended digit expected found "%s"
  16: Illegal digit "%c" in based integer "%d#%s"
  17: Based integer "%d#%s" too big
  18: "'" expected found "%s"
  19: Character literal exceeds source line
  20: Use \" instead of "" to represent " in a string
  21: Use / instead of \\ as path delimiter
  22: Illegal string escape "\%s"
  23: Numerical escape sequences should end with "\" not "%s");
  24: String continuations should end with "\" not "%s");
  25: String literal exceeds source line
  26: Name expected found "%s"
  27: Integer literal expected found "%s"
  28: String literal expected found "%s"
  29: Identifier expected found "%s"
  30: Expression expected found "%s"
  31: Expression expected after "begin"
  32: Declaration expected found "%s"
  33: Initialisation of "%s" failed
  34: "%s" declared twice
  35: "%s" not declared
  36: Associativity expected found "%s"
  37: Statement priority "%s" too big
  38: Syntax with two parameters before operator is illegal
  39: Empty syntax declaration
  40: "%s" redeclared with infix priority %d not %d
  41: "%s" redeclared with prefix priority %d not %d
  42: Priority %d required for parameter after "%s" not %d
  43: Priority &lt;= %d expected found "%s" with priority %d
  44: Priority <= %d expected found "%s" with priority %d
  45: "%s" must have priority %d not %d for dot expression
  46: "%s" expected found "%s"
  47: "%s" expected found "%s"
  48: Undefined type for literal "%s"
  49: "newtype", "subtype", "func", "enumlit" or "action" expected found "%s"
  50: "func" or "type" expected found "%s"
  51: Match for %s failed
  52: Variable expected in %s found %s
  53: Type expected found %s
  54: Procedure expected found %s expression
  55: Parameter specifier expected found "%s"
  56: Evaluate type expression %s failed
      Undefined error
</pre><p></p>

<a name="Exceptions"><b>13.2 Exceptions</b></a>
<p>
  There are various exceptions which can be raised during
  program execution:
</p><dl><dt>
    MEMORY_ERROR:</dt><dd>
      May be raised by various operations of the following types:
          <font color=red>array</font>, <font color=red>struct</font>, <font color=red>hash</font>, <font color=red>file</font>, <font color=red>func</font>, <font color=red>proc</font>, <font color=red>reference</font>, <font color=red>string</font>
      Additionally the interpreter kernel may raise this exception also.</dd><dt>
    NUMERIC_ERROR:</dt><dd>
      May be raised from the following <tt>'<font color=red>integer</font>'</tt> operations:
          !, **, <font color=blue>div</font>, <font color=blue>rem</font>, <font color=blue>mdiv</font>, <font color=blue>mod</font>, ld
      May be raised from the following <tt>'<font color=red>bigInteger</font>'</tt> operations:
          **, <font color=blue>div</font>, <font color=blue>rem</font>, <font color=blue>mdiv</font>, <font color=blue>mod</font></dd><dt>
    RANGE_ERROR:</dt><dd>
      May be raised from the following <tt>'<font color=red>integer</font>'</tt> operation:
          <font color=blue>parse</font>, rand
      May be raised from the following <tt>'<font color=red>bigInteger</font>'</tt> operation:
          <font color=blue>parse</font>, rand
      May be raised from the following <tt>'<font color=red>float</font>'</tt> operation:
          <font color=blue>parse</font>, rand
      May be raised from the following <tt>'<font color=red>char</font>'</tt> operation:
          str
      May be raised from the following <tt>'<font color=red>string</font>'</tt> operation:
          @:=, <font color=blue>mult</font>, pos
      May be raised from the following <tt>'<font color=red>bitset</font>'</tt> operation:
          min, max, rand
      May be raised from the following <tt>'<font color=red>array</font>'</tt> operation:
          [ ]
      May be raised from the following <tt>'<font color=red>hash</font>'</tt> operation:
          [ ]
      May be raised from the following <tt>'<font color=red>file</font>'</tt> operation:
          open, gets, write, seek</dd><dt>
    IO_ERROR:</dt><dd>
      May be raised with the following statement:
          cp</dd><dt>
    ILLEGAL_ACTION:</dt><dd>
      May be raised by the interpreter kernel when a primitive action
      does not point to any legal action. This check is only done when
      the hi interpreter is compiled with <tt>'#define WITH_ACTION_CHECK'</tt>.
      The ILLEGAL_ACTION exception is also raised when the primitive
      action ACT_ILLEGAL is executed.</dd><dt>
</dl><p></p>

<a name="Handlers"><b>13.3 Handlers</b></a>
<p>
  To catch an EXCEPTION the following handler construct can be used:
</p><pre>
    <font color=blue>block</font>
      number := 1 <font color=blue>div</font> 0;
    <font color=blue>exception</font>
      <font color=blue>catch</font> NUMERIC_ERROR:
        number := 1;
    <font color=blue>end block</font>;
</pre><p></p>

<a name="Stack_trace"><b>13.4 Stack trace</b></a>
<p>
  When an EXCEPTION is not catched at any level the program is
  terminated and the hi interpreter generates a stack trace.
  For example:
</p><pre>
    *** Uncaught EXCEPTION NUMERIC_ERROR raised with
    {integer <80b2e64>: <SYMBOLOBJECT> 0 div integer <80b2e64>: <SYMBOLOBJECT> 0 }

    {(in integer <80b2e64> param) div (in integer <80b2e64> param) } at lander.sd7(1028)
    drawLogo {} at lander.sd7(1080)
    advanced_lander {} at lander.sd7(873)
    setup {} at lander.sd7(1441)
    main {} no POSINFO
</pre><p></p>

<a name="Other_errors_and_warnings"><b>13.5 Other errors and warnings</b></a>
<p><dl><dt>
  No more memory. Program terminated.</dt><dd>
    This error message is displayed after the compile time error 1
    (Out of heap space) . The file name and line number of the
    analyzer source code where this happens is displayed together
    with internal heap information. If this happens the -m option
    can be used to make more memory available. Perhaps this slows
    the compilation phase down.</dd><dt>

  System declaration for main missing</dt><dd>
    Each program must contain a system declaration that describes
    which procedure to start as first one.</dd><dt>

  EXCEPTION %s raised with</dt><dd>
    If your trace level specifies exception tracing exceptions
    and handlers are displayed with this messages and the user
    must type the ENTER-key to accept.</dd><dt>

  ACTION $%s REQUIRES %s NOT %s</dt><dd>
    This error can happen when an action tries to do something
    with the wrong primitive value. For example adding an
    integer to a string with INT_ADD. Since the analyze phase
    checks for the right types this error can only happen when the
    basic libraries are defined wrong.</dd><dt>

  ACTION $%s REQUIRES VARIABLE %s NOT %s</dt><dd>
    This error can happen with actions which assign a value to
    a constant. Since the analyze phase checks for variable objects
    this error can only happen when the basic libraries are defined
    wrong. Principally this error is possible with the following
    operations: :=, incr, decr, wrd_rd, lin_rd</dd><dt>
</dl></p><hr>
