20110102:
- The function convDosPath was added to the "seed7_05.s7i" library. It
  converts a path with backslashes and drive letters to the standard path
  representation. E.g.: "C:\seed7" is converted to "/c/seed7". When a path
  is already in the standard path representation it is left unchanged.
- Functions with path parameters or path result were improved to accept
  and return file paths with the standard path representation. The standard
  path representation uses a slash as path separator. Under Windows a
  standard path like "/c" is mapped to the drive letter "C:". Reading the
  directory "/" unter Windows returns a list of available drives.
- The function path(PROGRAM), which returns the absolute path of the program,
  was added to the "seed7_05.s7i" library.
- The function dir(PROGRAM), which returns the directory containing the
  program, was added to the "seed7_05.s7i" library. The dir(PROGRAM) function
  allows placing configuration data in the directory of the program.
- The function getenv was improved to work with Unicode environment
  variables.
- The "bas7.sd7" Basic interpreter was improved to interpret RND() as RND
  and MID statements as equivalent to MID$ statements.

20101219:
- The handling of closures in the compiler ("comp.sd7") was improved. When
  possible closures are implemented with code inlining. When this is not
  possible closures are implemented with C functions and a corresponding
  data structure to hold the environment data.
- A new example program (make7.sd7), a make utility which can be used to
  manage the compilation process, was added. Make7 is capable to compile
  the Seed7 release with every mk_*.mak makefile released with Seed7.
- Code was moved from the "tar7.sd7" example program to the new library
  "tar.s7i". The "tar.s7i" library allows programs to deal with tar files
  without the need to call external programs.
- The directory seed7/bin was introduced as place for executables and
  runtime libraries. This should allow installing Seed7 by adding the
  seed7/bin directory to the PATH. Additionally the environment variable
  SEED7_LIBRARY can be defined to contain a path the the seed7/lib directory.
- The performance of the str function (conversion to string), for integer and
  bigInteger values, was improved.
- The standard bitmap fonts were improved to reduce the spacing between
  characters.
- The FAQ answers explaining portability and debugging were improved.
- The chapters explaining string functions and stack traces in the manual
  were improved.
- Tests for the 'lpad0' operator were added to the "chkint.sd7" program.
- Compiler and interpreter were improved to support the action BST_STR, which
  converts a byte string to an UTF-32 string.

20101205:
- The chapter explaining the file open function in the manual was improved.
- The file open function was improved to return STD_NULL on an attempt to
  open a directory.
- Interpreter and compiler were improved to support Unicode program arguments
  under Windows.
- The file "chkccomp.c" was added. It is used during the make process to
  determine properties of the C compiler and the C runtime library.
- The makefiles were improved to use the new generic file "chkccomp.c",
  instead of creating their own versions of "chkccomp.c".
- The time/duration field 'mycro_second' and the functions 'getMycroSeconds',
  'toMycroSeconds' and 'MYCRO_SECONDS' were renamed to 'micro_second',
  'getMicroSeconds', 'toMicroSeconds' and 'MICRO_SECONDS' respectively. This
  changes were done in the example programs and in the "time.s7i" library.
- The functions 'setATime' and 'setMTime' in 'time.s7i' were improved to raise
  RANGE_ERROR when the specified time is illegal or outside the allowed range.
- The carddemo.sd7 example program was improved to allow moving, raising and
  lowering cards with the mouse and mouse buttons.
- The function 'getHttp' in the "gethttp.s7i" library was improved to handle
  the status codes 301, 302, 303 and 307.
- The functions 'hashCode', 'compare', 'setContent', 'toBottom' and 'toTop'
  were added to the "graph.s7i" library and the compiler was improved to
  support them.
- Bitmap fonts were improved to allow scaling.
- The function 'skipSpaceOrTab' was added to the "scanfile.s7i" library.
- The "chkhsh.sd7" example program was improved.
- The compiler was improved to generate code, which defines functions for
  'hsh_create' and 'hsh_destr' before they are used.
- The compiler was improved to generate code with parenthesis around C comma
  operator expressions. This is necessary to allow using such an expression as
  argument of a C macro.
- The handling of the action 'bst_idx' in the compiler was fixed to use
  'bstritype' instead of 'stritype'.
- The compiler was improved to use the function 'generic_sct_cpy'. This
  function was introduced to allow changing an element of a hash, when the
  hash has struct elements.
- The "tar7.sd7" example program was improved to check if a file already
  exists.
- The function 'bst_cpy' in "bstlib.c" was fixed to use 'take_bstri' instead
  of 'take_stri'.
- The function 'cmdFileType' in "cmd_rtl.c" was improved to return FILE_ABSENT
  when one element in the path is not a directory.
- The "drw_x11.c" driver was improved: Expose events now draw only the exposed
  area. The exposed area is not cleared before the expose event is delivered.
  Expose events for the whole window are avoided, when a window is resized.
- The function 'drwFlush' in "drw_x11.c" now proceeds until no expose events
  are present.
- The function 'find_window' in "drw_x11.c" now manages the windows with a
  hash table instead of a linked list.
- The new function 'processEvents' in "drw_x11.c" looks for expose events and
  processes them.
- Documentation comments were added to the function 'filOpen' in the file
  "fil_rtl.c".
- The files "kbd_inf.c" and "kbd_poll.c" were improved to use utf8_mode also
  when the LANG environment variable contains the substring "utf8".

20101121:
- The chapters explaining integer and bigInteger in the manual were improved.
- Several improvements and a bugfix were done in the "gzip.s7i" library.
- The function openGunzipFile and other functions to support a gunzipFile
  were added to the "gzip.s7i" library.
- The "tar7.sd7" (tar archiving utility) example program was improved.
- The function getCStringLiteralText was added to the "scanstri.s7i" library.
- The function timeInTimeZone was added to the "time.s7i" library.
- Several tests of the integer power operator (**) were added to the
  "chkexc.sd7" program.
- The function check_power in the "chkint.sd7" program was improved.
- The compiler (comp.sd7) was improved to generate better code for the
  actions INT_POW and BIG_IPOW.
- The compiler was improved to use string slices for the actions STR_HEAD,
  STR_RANGE, STR_SUBSTR and STR_TAIL.
- The compiler and the files "seed7_05.s7i", "arrlib.c" and "arr_rtl.c" were
  improved to allow appending an element to an array with the &:= operator.
- String and array indexing functions in the compiler were improved.
- The file "seed7/read_me" was renamed to "seed7/read_me.txt".
- The function cmdConfigValue in "cmd_rtl.c" was improved to support the config
  values ALLOW_STRITYPE_SLICES and CC_SOURCE_UTF8.
- Several makefiles were changed such that #undef commands are not written
  to the file "version.h".
- Alternate versions of strAppend and strCopy, which support string slices,
  were added to the file "str_rtl.c".
- The functions strHeadSlice, strRangeSlice, strSubstrSlice and strTailSlice
  were added to the file "str_rtl.c".
- The memory management of strings in the files "heaputl.c" and "heaputl.h" was
  improved to support string slices.
- The files "ref_data.c", "reflib.c", "infile.c", "infile.h", "error.h",
  "info.c", "info.h", "match.c" and "runerr.c" were changed to improve the
  action REF_FILE.
- Parameter names were added to the prototypes in the *lib.h files.
- The function strLpadTemp was added to the file "str_rtl.c" and used in the
  compiler.

20101107:
- The chapter explaining exception handling in the manual was improved.
- The support for bitmap fonts was improved to use fontProperties as base type.
- The '-' function, which computes the differance of two 'time' values (with a
  'duration' result) in "time.s7i", was improved.
- The function cmdConfigValue in "cmd_rtl.c" was improved to support the config
  values C_COMPILER_VERSION and GET_CC_VERSION_INFO.
- In the file "fil_rtl.c" the functions myLseek, myFseek and myFtell were
  renamed to os_lseek, os_fseek and os_ftell respectively.
- The makefiles were changed to define os_fseek, os_ftell, C_COMPILER_VERSION
  and GET_CC_VERSION_INFO.
- Documentation comments were added to the function alternate_utime in the file
  "tim_win.c".

20101024:
- The FAQ answers explaining extensible programming and object orientation,
  were improved.
- The chapters explaining UTF-16 files and exception handling in the manual,
  were improved.
- The standard bitmap font was improved to define more characters.
- Documentation comments were added to the library "utf16.s7i".
- The "bas7.sd7" (Basic interpreter) example program was improved to avoid an
  endless loop when the label or line number of a goto does not exist.
- Several changes were done to improve the configuration of the Seed7
  interpreter.

20101010:
- The first steps towards support of bitmap fonts were done.
- The standard bitmap font was defined for the sizes 10, 12, 14, 16, 18 and 24.
- A new example program (testfont.sd7), which writes with the standard font
  in various sizes, was added.
- The initialisation of the random number generator in the function
  uint_rand in "int_rtl.c" was improved.
- The function timMycroSec was defined in "tim_unx.c" and "tim_win.c".

20100919:
- The chapter explaining string indexing in the manual was improved.
- The compiler (comp.sd7) and the hi interpreter were improved to support the
  actions "ITF_CMP" and "ITF_HASHCODE".
- The parameter names of the functions arc, chord and pieslice in the
  "draw.s7i" library were changed to startAngle and sweepAngle.
- The compiler was improved such that compiled programs which use SIGALARM
  (the functions 'wait' and 'await' from the "time.s7i" library may use
  SIGALARM) can be terminated with ctrl-c followed by * and enter.
- Parameter names were added to the prototypes in the file "drw_drv.h".
- The function drwPFArcPieSlice in "drw_win.c" was implemented.
- The functions drwFCircle and drwPFCircle in "drw_x11.c were improved.

20100905:
- The chapter explaining the type 'time' in the manual was improved.
- The support for source level debugging in the compiler (comp.sd7) was
  improved. Now the option -g generates better #line directives and the 'main'
  function is arranged such that the current line shown by a debugger is
  correct when the program is started.
- In the "seed7_05.s7i" library the function "rpos" was overloaded to do a
  reverse search for a character in a string starting from a given position.
- The files "str_rtl.c", "strlib.c", "primitiv.c" and the compiler were
  improved to support the primitive action STR_RCHIPOS (which implements the
  new overloaded 'rpos' function).

20100822:
- A new example program (dragon.sd7), which draws a dragon curve, was added.
- A new example program (fractree.sd7), which draws a fractal tree, was added.
- The chapters explaining the types 'time' and 'duration' in the manual were
  improved.
- The '-' function, which computes the differance of two 'time' values (with a
  'duration' result) in "time.s7i", was improved.
- The functions 'daysInYear', 'getYears', 'getMonths', 'getDays', 'getHours',
  'getMinutes', 'getSeconds' and 'getMycroSeconds' were added to the "time.s7i"
  library.
- The "time.s7i" functions 'years', 'months', 'days', 'hours', 'minutes',
  'seconds' and 'mycro_seconds' were renamed to 'toYears', 'toMonths', 'toDays',
  'toHours', 'toMinutes', 'toSeconds' and 'toMycroSeconds' respectively.
- The "bas7.sd7" example program was improved to use the new "time.s7i"
  functions.
- The makefiles were improved to determine the size and the signedness
  (regarding the function 'localtime') of time_t values.
- The functions 'timToTimestamp' and 'timSetLocalTZ' in "tim_rtl.c" were
  improved to take the size and signedness of time_t into account.

20100801:
- The FAQ was improved to contain three main sections.
- Instructions to verify the correctness of the interpreter were added to the
  FAQ and to the file "src/read_me.txt".
- Instructions how to use the Seed7 interpreter were added to the FAQ.
- An explanation how static type checking works, when types are first-class
  objects, was added to the FAQ.
- The FAQ answers explaining the compilation of the Seed7 interpreter and how
  to compile Seed7 programs, were improved.
- References to the manual were added to several FAQ answers.
- The chapters explaining string literals, character literals, exceptions and
  stack traces in the manual were improved.
- Tests for the 'str' function, where the base of the number system is provided
  as parameter, were added to "chkint.sd7".
- The compiler (comp.sd7) was improved to generate better code for interface
  (dynamic) functions. Now a runtime exception is raised when no adequate
  implementation function is found.
- A definition of 'ACTION_ERROR' was added to "common.h" and "comp.sd7".
- The interpreters stack traces with function call notation, were improved.

20100718:
- The first steps towards support of variable functions and closures in the
  compiler ("comp.sd7") were done.
- The generation of code for 'for' loops and the 'div' operator in the compiler
  was improved.
- The compiler function 'getTemporaryToResultExpr' was improved to generate
  code without casts from 'floattype' to 'generictype'.
- The function 'rand_32' in "int_rtl.c" was renamed to 'uint_rand' and improved
  to work better for 64-bit integers.
- A bug that could occur when loading a saved game was fixed in the example
  program "castle.sd7".
- Tests for conversions from integer to float were added to the "chkflt.sd7"
  example program.

20100704:
- The Seed7 interpreter (hi) was improved to support stack traces with
  function call notation.
- The "progs.s7i" library was improved to support indexing and 'for' loops
  for 'bstring' values.
- Indexing tests for constant arrays were added to the "chkexc.sd7" program.
- The compiler was improved to generate code for array and string indexing with
  temporary values of type 'uinttype' instead of 'memsizetype'.
- The compiler was improved to generate code with the type 'rtlValueunion'
  instead of 'valueunion' (this is the same type as in the file "data_rtl.h").
- The compiler was improved to create dynamic dispatcher functions which copy
  a struct value when necessary (in function 'process_dynamic_action_call').
- The compiler ("comp.sd7") was improved to initialize constant 'bstring'
  values correctly.
- The compiler option -e was improved to create an executable which sends a
  signal when an uncaught exception occurs (A caught exception does not send
  a signal).
- The files "bstlib.c", "primitiv.c" and the compiler ("comp.sd7") were
  improved to support the primitive action BST_IDX (which allows indexing of
  'bstring' values).
- A definition of the type 'rtlStructtype' was added to "data_rtl.h".
- The files "traceutl.c" and "runerr.c" were improved to define and use the
  functions 'printformparam' and 'prot_name'.
- Variables were renamed in the files "strlib.c", "bstlib.c" and "ref_data.c".
- Checks for negative line and column values and casts to 'size_t' were
  added to the files "scr_inf.c", "scr_cap.c" and "scr_tcp.c".

20100620:
- Documentation comments were added to the libraries "graph.s7i", "keybd.s7i"
  and "time.s7i".
- The compiler (comp.sd7) was improved to support the option -te which enables
  tracing of exceptions in the generated executeble.
- Some types generated by the compiler were renamed to make them unique (This
  helps a debugger to distinguish types when values are displayed).
- The declaration of 'flush' in "seed7_05.s7i" was improved (This way the
  compiled example program "sl.sd7" works with the correct cursor position).
- The functions 'prc_for_to' and 'prc_for_downto' in "prclib.c" were changed
  to terminate the loop when an exception was raised (This way the loop
  variable has the correct value when an exception occurs).
- The performance of the functions 'strAppend', 'strAppendTemp',
  'strConcatTemp', 'strHeadTemp' and 'strPush' in "str_rtl.c" was improved.
- Several functions in "big_rtl.c" were improved to avoid a MEMORY_ERROR in
  the strange case when a 'realloc' which shrinks memory fails.
- The function alloc_positive_copy_of_negative_big and its calls in "big_rtl.c"
  were improved to avoid memory leaks in out of memory situations.
- The functions 'bigIncr' and 'bigDecr' in "big_rtl.c" were improved to work
  as transactions in out of memory situations.
- The functions 'bigSuccTemp' and 'bigPredTemp' were improved to work without
  calling 'bigIncr' and 'bigDecr' respectively.
- The handling of constant expressions for values with the categories
  ARRAYOBJECT, STRUCTOBJECT, HASHOBJECT and INTERFACEOBJECT in the compiler
  was improved.
- The support for the actions "CMD_SHELL" and "REF_TRACE" in the compiler was
  improved.
- Code in the compiler was moved from the function 'generate_main' to
  'init_array_constants', 'init_struct_constants', 'init_hash_constants' and
  'init_interface_constants'.
- The creation of array constants in the compiler was improved to use a 'for'
  loop over a 'ref_list' instead of an 'integer' 'for' loop and an index
  access to an element of the (possible long) 'ref_list' (This speeds up
  compilation of programs with huge array constants).
- The function 'addTypeCategoryForLocalVars' was added to the compiler.
- The macro 'unlikely' was added to if statements which check for error
  conditions in the files "str_rtl.c", "big_rtl.c" and "heaputl.c".
- The macros 'likely' and 'unlikely' were defined in the file "common.h" and
  in several makefiles.
- Several functions in "flistutl.c" and "heaputl.c" were improved to produce
  a correct heap statistic.
- The const qualifier was added to function prototypes in "prg_comp.c" and
  "prg_comp.h".
- The functions 'prg_decl_objects', 'prg_error_count', 'prg_match',
  'prg_match_expr', 'prg_syobject' and 'prg_sysvar' in "prglib.c" were changed
  to call the corresponding functions from "prg_comp.c".
- The functions 'scr_setpos' and 'scr_write' in "scrlib.c" were changed to
  call the corresponding functions from "scr_rtl.c".
- The function 'printparam' was added to "traceutl.c".

20100606:
- An explaination of the difference between overloading and object orientation,
  was added to the FAQ.
- The function 'popen8', which opens an UTF-8 pipe, was added to the
  "shell.s7i" library.
- Checks for 'log2' were added to the "chkbig.sd7" program.
- Checks for file exceptions were added to the "chkexc.sd7" program.
- A check for the 'keys' function for hash tables was added to "chkhsh.sd7".
- A definition of voidHtmlElements, a set containing HTML element names which
  possibly have no closing tags, was added to the "html.s7i" library.
- The experimental function 'readHtml' was added to the "xmldom.s7i" library.
- Calls of 'rflNe' in the compiler "comp.sd7" were replaced with '!rflEq'.
- Checks with MAX_UTF8_EXPANSION_FACTOR were added to functions in "actutl.c",
  "cmd_rtl.c", "flt_rtl.c", "striutl.c", "str_rtl.c" and "syvarutl.c".
- The function "parseFile" was improved to work with Unicode file names and to
  raise FILE_ERROR when the file is not found or RANGE_ERROR when a backslash
  is used as path delimiter.
- The files arrutl.c and arrutl.h were removed and the function "qsort_array"
  was moved to "arrlib.c".
- Macros with name endings _SIZE_OK and _CHECK_SIZE were introduced in
  "heaputl.h" and used in various files.
- Comparisons with MAX_STRI_LEN and MAX_BSTRI_LEN were added in various files
  to make sure that there are no overflows when the size of a string or
  bstring is computed.
- Macros with name endings _SIZE_OK and _CHECK_SIZE were introduced and used
  in "big_rtl.c".
- The type 'offsettype' was renamed to 'os_off_t' in "fil_rtl.c" and the
  makefiles were improved to write a definition of 'os_off_t' to "version.h".
- When FTELL_WRONG_FOR_PIPE is defined it is assumed that fseek does also
  not work correctly for pipes.
- File read and write functions in "fil_rtl.c" and "ut8_rtl.c" are checked
  for error conditions and FILE_ERROR is raised when an error happens.
- The functions 'find_include_file' and 'init_lib_path' were improved and the
  function 'free_lib_path' was introduced in the file "infile.h".
- A comment was added to 'genPointList' in "graph.s7i" and the implementation
  of 'drwGenPointList' in "drw_x11.c" and "drw_win.c" was fixed.
- In several makefiles functionality was moved from the help program
  'chkftell.c' to 'chkccomp.c'.
- Parameter names were added to the prototypes in several header files.
- Declarations of a variable named 'cmp' were changed from 'int' to 'inttype'
  in the files "arrlib.c", "arr_rtl.c", "hshlib.c" and "hsh_rtl.c".
- The function 'rflNe' was removed from the file "rfl_data.c".

20100516:
- Seed7 now supports the 64-bit versions of Linux and Mac OS X. Many thanks
  to "Mensanator" for his help to reach this goal.
- The compiler (comp.sd7) was improved to generate C programs with fewer
  casts and with no parentheses around the right hand side of assignments.
- The compiler was improved to use the hash 'typeCategory' and 'category'
  values instead of various hashes like 'bigint_types'.
- The functions 'compare' and 'hashCode' were added to the "complex.s7i"
  library to allow complex numbers as keys for hash tables.
- The "progs.s7i" library was improved to allow 'case' statements for
  'category' values.
- The FAQ, explaining function and operator overloading, was improved.
- The "chk_all.sd7" example program was improved to remove an old executable
  before calling the compiler.
- The 'gets' function for UTF-8 files was improved to work correctly when
  reading from a pipe (see functions 'ut8Gets', 'read_and_alloc_utf8_stri'
  and 'read_utf8_string' in "ut8_rtl.c").
- The functions 'remainingBytesInFile', 'read_string', 'read_and_alloc_stri'
  and 'filGets' in "fil_rtl.c" were added or improved.
- The macros 'ALLOC_STRI' and 'REALLOC_STRI' and the functions 'growStri',
  'strMult', 'filGets', 'ut8Gets' and 'socGets' were improved to avoid
  overflows when the size of a memory request is computed.

20100502:
- The "chk_all.sd7" example program was improved to write detailed information
  when tests fail.
- The "shell.s7i" library was improved such that 'popen' behaves correctly
  when the created pipe is closed with 'close'.
- The compiler and the runtime library were improved to use the correct
  exeption handling function in compiled and interpreded code (When the
  compiled compiler analyzes a source program the interpreter will execute
  some expressions).
- The macro processing of the compiler was improved to work better for
  function macros.
- The functions seekFileLength, offsetTell, offsetSeek, remainingBytesInFile,
  getFileLengthUsingSeek, getBigFileLengthUsingSeek, filBigLng, filBigSeek,
  filBigTell, filClose, filGets, filPclose, filSeek and filTell in
  "fil_rtl.c" were added or improved. This way the types integer and
  offsettype both can have a size of 32- or 64-bit in any combination.
- The function ut8Gets in "ut8_rtl.c" was improved to use remainingBytesInFile.
- The makefiles "mk_osx.mak", "mk_linux.mak", "mk_cygw.mak" and "makefile"
  were improved to define USE_FSEEKO. This causes the use of 'fseeko' and
  'ftello' as seek and tell functions in "fil_rtl.c".
- Support for the actions BST_CMP, BST_HASHCODE and FIL_PCLOSE was added to
  the interpreter and the compiler.
- The handling of types in the compiler was improved such that subtypes of
  'boolean', 'enum', 'integer', 'bigInteger', 'float', 'char', 'string' and
  'bstring' are supported better.
- A definition of the type 'bstring' was added to the "progs.s7i" library.
- The compiler and the interpreter were improved to support 'bstring' as key
  and value for hash tables and 'ref_list' as value for hash tables.
- A definition of an assignment statement for exceptions was added to the
  "seed7_05.s7i" library.
- Tests for the integer parse function were added to "chkint.sd7".
- The config value LITTLE_ENDIAN was renamed to LITTLE_ENDIAN_INTTYPE in
  several files.
- The compiler was improved to use the functions bstriLiteral and typeLiteral
  to write occurrences of 'bstring' and 'type' literals to the generated C
  program.
- The compiler was improved to create prototypes for the functions bstCmp,
  bstCmpGeneric, bstCreateGeneric, bstHashCode, bstValue, drwGenPointList,
  filClose, filPclose, rflCreateGeneric and typStr.
- The function rflCmp was added to "rfl_data.c".
- The handling of the flag FTELL_WRONG_FOR_PIPE was moved from "cmd_rtl.c"
  to "fil_rtl.c".
- Usages of the constant ULONG_MAX were replaced by UINTTYPE_MAX in the
  files "flt_rtl.c", "int_rtl.c" and "int_rtl.h".
- The function drwGenPointList was changed to use an array parameter in
  "drwlib.c", "drw_drv.h", "drw_win.c", "drw_x11.c" and "comp.sd7".
- The processing of bstParse, bstValue, drwPFArcPieSlice, setSConv, typStr
  and array cpy_* in the compiler was improved.
- The const qualifier was added to function prototypes in "rfl_data.c" and
  "rfl_data.h".

20100418:
- Many thanks to "Mensanator" for his help to debug some 64-bit / Mac OS X
  problems.
- The chapters explaining operating system files, primitive actions and the
  types 'float' and 'type' in the manual were improved.
- A free list memory management for small 'biginttype' (bigInteger) values
  was introduced in "big_rtl.c". This improves the performance of some
  programs by up to 40 percent.
- The macro definition of REALLOC_BIG in "big_rtl.c" was changed to cooperate
  with the free list memory management.
- The file common.h was improved to add a capacity to the struct bigintstruct.
- The graph.s7i library was improved.
- The chk_all.sd7 example program was improved to close the pipe files.
- The compiler (comp.sd7) was improved to handle empty structs correctly.
- The compiler was improved to produce better code when local functions use
  variables from surrounding functions.
- Some changes in the compiler were done to make sure that always the same
  C program is generated.
- The compiler was changed to create a typedef before a type is used.
- The compiler was improved to create data structure definitions which are
  helpful for a debugger.
- The compiler was improved to produce better code for the copy actions arr_cpy,
  big_cpy, bst_cpy, drw_cpy, prg_cpy, rfl_cpy, sct_cpy, set_cpy and str_cpy.
- The compiler was improved to produce better code for the actions prc_for_to,
  prc_for_downto, hsh_for, hsh_for_data_key, hsh_for_key.
- Casts were added to compiler generated function calls of bstCreate,
  bstDestr, bstCpy, arrBaselit, arrBaselit2, arrExtend, arrGen, drwFPolyLine,
  drwPolyLine, prgExec, rflHead, setSConv, prgDestr and to various other
  places.
- The compiler was improved to create prototypes for the functions bigGcd,
  bigOdd, bigPredTemp, bigSuccTemp, cmdChdir, cmdConfigValue, cmdMkdir,
  drwBackground, drwGenPointList, drwNewPixmap, drwPolyLine, drwFPolyLine,
  drwSetTransparentColor, prgDestr, prgExec, refType, rflHead, setIConv,
  setSConv, strGetenv, strToUtf8, strUtf8ToStri and setupFloat.
- The function ref_type in "reflib.c" was improved to reliably raise an
  exception when the type is NULL.
- Unused variables were removed in the files cards.s7i, draw.s7i, gzip.s7i,
  seed7_05.s7i, addup.sd7, bas7.sd7, carddemo.sd7, chk_all.sd7, comanche.sd7,
  comp.sd7, lander.sd7, mahjong.sd7, mandelbr.sd7, panic.sd7, sl.sd7,
  snake.sd7, sokoban.sd7, sudoku7.sd7 and tar7.sd7 .
- Return statements were changed to omit parentheses in the files actutl.c,
  analyze.c, bst_rtl.c, dir_dos.c, dir_rtl.c, dir_win.c, drw_rtl.c, fil_rtl.c,
  flt_rtl.c, hsh_rtl.c, kbd_inf.c, kbd_poll.c, kbd_rtl.c, reflib.c, rfl_data.c,
  soc_rtl.c, tim_rtl.c and ut8_rtl.c .

20100404:
- Many thanks to "Mensanator" for his help to investigate 64-bit and Mac OS X
  problems.
- The chk_all.sd7 check program was improved to check that the interpreted
  compiler and the compiled compiler generate the same C programs.
- Checks for 'set of char' were added to the "chkset.sd7" program.
- The compiler (comp.sd7) and the interpreter (hi) were improved to support the
  actions BST_EQ, BST_NE and BST_PARSE.
- The compiler (comp.sd7) was improved to support the actions BST_APPEND and
  CHR_CMP.
- The compiler (comp.sd7) was improved to make sure that the same types are used
  in generated C programs and in the runtime library.
- The generation of string constants in the compiler was improved to work
  correctly when the string size is stored as 64-bit unsigned value.
- The generation of set constants in the compiler was improved to work correctly
  when bitsettype elements have a size of 64-bit.
- The compiler was improved to use the union type 'valueunion' instead of
  'float2int'.
- The functions arrBaselit, arrBaselit2, arrExtend and arrGen in "arr_rtl.c"
  were changed to use parameters of type rtlGenerictype instead of rtlObjecttype.
- The functions bigCmpGeneric, chrCmpGeneric, fltCmpGeneric, intCmpGeneric,
  refCmpGeneric, setCmpGeneric, strCmpGeneric and typCmpGeneric were introduced
  as compare functions with parameters of type rtlGenerictype.
- The functions bst_append, bst_cpy, bstAppend and bstCpy (defined in "bstlib.c"
  and "bst_rtl.c") were improved to work correctly when source and destination
  are identical.
- The function cmdConfigValue in "cmd_rtl.c" was improved to support the config
  values INTTYPE_SIZE, FLOATTYPE_SIZE and LITTLE_ENDIAN.
- Several makefiles were changed to define FLOAT_SIZE, DOUBLE_SIZE and
  LITTLE_ENDIAN.
- The functions bigCreateGeneric, intCreateGeneric, drwCreateGeneric,
  setCreateGeneric and strCreateGeneric were introduced as create functions with
  a parameter and a result of type rtlGenerictype.
- The function intDestrGeneric was introduced as destroy function with a
  parameter of type rtlGenerictype.

20100321:
- Many thanks to "Mensanator" for his help to investigate the problems Seed7
  had on his 64-bit Mac OS computer. Many of the improvements towards support
  of 64-bit systems and Mac OS X result from his help (see below). Note that this
  release does not support 64-bit systems out of the box, but it certainly is a
  milestone to reach this goal.
- The FAQ, how to compile the interpreter, was improved.
- The file "read_me" was improved to explain compilation under Linux and to
  refer to "src/read_me.txt" for other operating systems.
- An explanation how to compile under Mac OS X was added to "src/read_me.txt".
- An explanation how to correct a make error and a linker error was added to
  "src/read_me.txt".
- The compiler (comp.sd7) was improved to use the function "integerLiteral" and to
  produce C code with more casts and an improved helemlist type.
- The prototype definitions for gkbKeyPressed, kbdKeyPressed, prgSysvar,
  refItftosct and typValue generated by "comp.sd7" were improved.
- All usages of '8 * sizeof(bigdigittype)' as shift count in "big_rtl.c" were
  replaced by 'BIGDIGIT_SIZE'.
- The makefiles and common.h were changed to make sure that int32type, uint32type,
  int64type and uint64type have the size implied by their name.
- The files big_gmp.c, big_rtl.c, drw_x11.c, error.c, fatal.c, match.c, stat.c,
  str_rtl.c and traceutl.c were improved to use better formats in printf() calls.
- Errors in bigToInt32 and bigToInt64 (file "big_rtl.c"), triggered by negative
  numbers when BIGDIGIT_SIZE is less than 32 and 64 respectively, were fixed.
- The function cmdConfigValue in "cmd_rtl.c" was improved to make sure
  that the same types are used in the interpreter and in the compiler (by
  providing an interface to INT32TYPE, UINT32TYPE, INT64TYPE, UINT64TYPE,
  INT32TYPE_LITERAL_SUFFIX, INT64TYPE_LITERAL_SUFFIX and POINTER_SIZE).
- The chkbig.sd7 program was improved with checks for the functions 'ord' and
  'bigInteger conv'.
- The chkint.sd7 program was improved with checks for powers of 2 and with more
  checks for the functions 'str' and 'integer conv'.
- The file "common.h" was improved to define several types and constants for
  integers of different sizes.
- The system to define the (text) screen and keybord driver was improved to
  work without the file "inf_conf.h".
- The keyboard driver "kbd_inf.c" was improved to define the functions
  return_char_if_present(), consume_chars_present() (which both encapsulate calls
  of "tcsetattr") and key_table_init().
- A new keyboard driver "kbd_poll.c", which can be used when "tcsetattr" does not
  work correctly (e.g. under Mac OS X and Cygwin), was added.
- The makefiles "mk_osx.mak" and "mk_cygw.mak" were improved to use "kbd_poll.c".
- The interpreter option -v was improved to write the line numbers of all lines
  processed (changes in "option.h").
- Changes in "arrlib.c" were done to reduce the number of warnings generated by the
  C compiler.

20100307:
- The functions in the gethttp.s7i library were improved to allow the specification
  of a port number as part of the location (e.g.: localhost:1080/index.htm).
- The tarx.sd7 (tar archiving utility) example program was renamed to tar7.sd7 .
- The codepage 8859_11 was added to the charsets.s7i library.
- The bas7.sd7 (basic interpreter) example program was improved.
- The toutf8.sd7 example program was improved to write an explanation and to
  support several IANA/MIME charset names.
- An explanation what to do, when the path of the bcc32 C compiler contains a space,
  was added to 'src/read_me.txt'.
- Documentation comments were added to the charsets.s7i library.

20100221:
- The generation of '#line' directives in the compiler (comp.sd7) was improved.
  This allows better references to Seed7 source lines during debugging sessions.
- The makefile mk_bccv5.mak was added to support compilation with version 5.5 of
  the bcc32 C compiler.
- Several makefiles were changed to define LINKER_OPT_OUTPUT_FILE (the linker
  option which is used to specify the output file).
- A description of the C source files in the Seed7 package was added to the file
  'src/read_me.txt'.
- Several changes in the interpreter and the runtime library were done to reduce the
  number of warnings generated by the C compiler.

20100207:
- The compiler (comp.sd7) was improved to support source level debugging with the
  option '-g' (comp.sd7 generates C programs with '#line' directives and the C
  compiler is called with a corresponding debugging option).
- An explaination what happens when an exception is not catched, was added to the
  FAQ.
- The chapter in the manual, which explains a stack trace, was improved.
- The flag 'mayRaiseRangeError' was added to the "bigint.s7i" library to describe
  that 'ord(bigInteger)' may raise RANGE_ERROR.
- The 'set of' type in "seed7_05.s7i" was improved to use 'HASHSET_OF' instead of
  'BITSET_OF' when 'mayRaiseRangeError' is defined for 'ord'.
- The function 'getBits' was renamed to 'getBitsLe' in "gzip.s7i" ('Le' describes
  that the bits are read in little endian order).
- A '=' operator was defined for 'HASHSET_OF' in "seed7_05.s7i".
- The 'strifile' functions 'getwd' and 'getln' were added to "strifile.s7i".
- The bas7.sd7 (basic interpreter) example program was improved.
- The compiler was improved to create executables where the message about an
  uncaught exception uses the file and line of the raise statement.
- Several improvements in the compiler were done to call special case functions
  for bigInteger operations.
- The experimental compiler option -e was introduced to send a signal when an
  exception occurs.
- The compiler was improved to write a message when it cannot remove the old
  executable.
- Several makefiles and the function 'cmdConfigValue' in "cmd_rtl.c" were improved
  to define CC_OPT_DEBUG_INFO and LINKER_OPT_DEBUG_INFO and to rename
  INHIBIT_C_WARNINGS to CC_OPT_NO_WARNINGS.
- The function 'bigZero', which initializes bigInteger variables with zero, was
  added to "big_rtl.c" and "big_gmp.c".
- The function 'bigNe' was removed from "big_rtl.c" and "big_gmp.c" (compiler
  and interpreter were changed to use a negation of "bigEq" instead).
- The function 'bigMultSignedDigit' was added to "big_rtl.c" and "big_gmp.c".
- A call of 'mpz_init' was added to the function 'bigImport' in "big_gmp.c".
- The 'normalize' function in "big_rtl.c" was improved to avoid resizing
  bigInteger values.
- The interpreter was improved such that the appearance of a stack trace is more
  like the one produced by a debugger.

20100117:
- The seed7_05.s7i library was improved to support union (|), intersection (&),
  difference (-) and symmetric difference (><) for sets implemented with hashes
  like 'set of string'.
- The "tarx.sd7" example program was improved to create archives correctly, even
  when the file names are longer than 100 chars.
- The bas7.sd7 (basic interpreter) example program was improved.

20100103:
- The chapter explaining operating system access in the manual was improved.
- The "tarx.sd7" example program was improved to uncompress files when the z option
  is used and to read file names with more than 100 chars correctly.
- Several changes in the interpreter and the runtime library were done to reduce the
  number of warnings generated by the C compiler.

20091220:
- The chapter explaining parameters in the tutorial of the manual was improved.
- The chapter explaining priority and associativity in the manual was improved.
- The function copy_file in "cmd_rtl.c" was improved to use mmap() only up to a
  maximum size and to use munmap() to delete the mapped area.
- The function cmdRemove in "cmd_rtl.c" was improved to work correctly when
  remove() is not able to remove empty directories.
- The function write_object in "error.c" was improved to write literals correctly.
- The function cp_to_os_path in "striutl.c" was improved to forbid paths
  ending with slash except for the root path ("/") and a device root ("C:/").

20091206:
- The chapters explaining operating system access, primitive actions and exceptions
  in the manual were improved.
- The codepages 708, 862, 864 and 874 were added to the charsets.s7i library.
- The functions 'remove' and 'rename' were renamed to 'removeFile' and 'moveFile'
  in various files.
- The functionality of 'removeFile' was changed such that removing a nonexisting file
  raises an exception.
- The functionality of 'moveFile' was changed such that moving to an existing file
  raises an exception.
- The compiler was improved to use the function floatLiteral to write occurrences
  of float literals to the generated C program.
- The functions actStr, act_str, filLit, fltDgts, refCatStr, refStr, typStr and
  typ_str were changed to use cstri_to_stri() instead of cstri_expand().
- The compiler (comp.sd7) and the interpreter (hi) were improved to support the
  actions BST_LNG and BST_VALUE.
- The toutf8.sd7 example program was improved to support more codepages.

20091115:
- The Unicode support for the functions shell, cmd_sh and popen was improved to
  use wide char (UTF-16) functions under Windows and normal (UTF-8) functions under
  Unix/Linux/BSD.
- The compiler (comp.sd7) was improved to support the actions CMD_FILEMODE,
  CMD_SET_FILEMODE, DRW_OPEN_SUB_WINDOW, DRW_SETPOS, DRW_XPOS and DRW_YPOS.
- The compiler was improved to make sure that generated C programs always define
  the create_... and destr_... functions.
- The handling of the HSH_IDX action in the compiler was improved.
- An error in the compiler concerning forwad declarations of function pointers was
  fixed.
- The function bigCpy in "big_rtl.c" was improved to work correctly when source and
  destination are identical.
- Comments were added to the functions bigGrow and bigShrink in "big_rtl.c" to explain
  that this functions work when source and destination are identical.
- Checks for the bigInteger assignment and the functions +:= and -:= were added to
  the file "chkbig.sd7".
- The types os_path_stri and os_path_char were renamed to os_stritype and os_chartype
  respectively in various files.
- The os_path_... macros were renamed to corresponding os_stri_... macros in various
  files.
- The bas7.sd7 (basic interpreter) example program was improved.
- The functions gkbButtonPressed, drwOpen, drwOpenSubWindow, drwSetPos, drwHeight and
  drwWidth in "drw_win.c" were improved to work correctly for subwindows.
- The function drwSetPos in "drw_x11.c" was improved to work correctly for subwindows.
- The functions prc_args, prc_repeat and prc_while in "prclib.c" were improved.
- The functions copyArgv and getArgv were added to "str_rtl.c".

20091101:
- The interpreter (hi) and the compiler (comp.sd7) were improved such that the actions
  STR_CPY, STR_APPEND, ARR_CPY, ARR_APPEND and SET_CPY work correctly when source and
  destination are identical.
- The compiler was improved to use the functions stringLiteral, bigIntegerLiteral and
  bitsetLiteral to write occurrences of string, bigInteger and bitset literals to
  the generated C program.
- The functions arrHead, arrHeadTemp, arrRange, arrRangeTemp, arrTail and arrTailTemp
  in the file "arr_rtl.c" were added or improved to avoid unnecessary copies of arrays
  in compiled programs.
- The functions free_helem, free_hash, create_helem, create_hash and copy_hash in the
  files "hshlib.c" and "hsh_rtl.c" were improved to increase the speed of the actions
  HSH_CPY and HSH_CREATE in interpreted and compiled programs.
- The function chrCLit was added to the file "chr_rtl.c" to support the action CHR_CLIT
  in the interpreter and in the compiler.
- The function chkPower in the file "chkbig.sd7" was improved.
- The function check_assign was added to the file "chkset.sd7".
- The functions check_string_append and check_string_assign in the file "chkstr.sd7"
  were added or improved.
- Several improvements were done to avoid that old memory areas were accessed after
  realloc() was called.
- The function bigLShiftOne was added to "big_rtl.c" and "big_gmp.c" to allow faster
  computation of powers of two in compiled and interpreted programs.
- The functions bigIPowN, bigIPow1 and bigIPow in "big_rtl.c" were added or improved.
- The function drwOpenSubWindow in "drw_x11.c" was changed to omit the creation of a
  graphic context.
- The function filWrite in "fil_rtl.c" was improved.
- The functions strAppend, strAppendTemp, strHead and strHeadTemp in "str_rtl.c" were
  added or improved.
- A possible memory leak in 'while' and 'repeat' loops of compiled programs, which
  can occur when the conditional expression produces temporary values in the heap,
  was closed.
- The handling of the action STR_APPEND in the compiler was improved to use strPush
  when possible.
- The handling of bigInteger expressions with constants in the compiler was improved.
- The compiler was improved to support the actions CHR_CLIT, CMD_FILETYPE_SL and
  CMD_SYMLINK.

20091018:
- The compiler (comp.sd7) was improved to support the primitive actions CMD_GET_CTIME
  and TIM_FROM_TIMESTAMP.
- The handling of the action ARR_ARRLIT in the compiler was improved to work without
  calling the function arrArrlit.
- The handling of the action ARR_IDX in the compiler was improved to use the function
  arrIdxTemp when the array is a temporary value.
- The handling of the action DRW_OPEN in the compiler was improved.
- The interpreter (hi) and the compiler were improved to support the primitive actions
  STR_PUSH, TIM_SET_LOCAL_TZ, DRW_OPEN_SUB_WINDOW, DRW_SETPOS, DRW_XPOS and DRW_YPOS.
- The bas7.sd7 (basic interpreter) example program was improved.
- The functions drwPointerXpos, drwPointerYpos, drwHeight and drwWidth in the file
  drw_win.c were improved.
- The function arrArrlit was removed and the function arrIdxTemp was added in the file
  arr_rtl.c .
- Parameter names were added to the function prototypes of the header file str_rtl.h .
- The functions closedir and wclosedir in dir_win.c were improved to call FindClose.

20091004:
- The function isDigitString in the seed7_05.s7i library was improved.
- The bas7.sd7 (basic interpreter) example program was improved.
- The functions fltIPow and fltRand in the file flt_rtl.c were improved.

20090920:
- A FAQ about extensible programming languages and the portability of Seed7 programs,
  was added.
- The bas7.sd7 (basic interpreter) example program was improved.
- The function gkbButtonPressed in the file drw_win.c was improved.

20090906:
- Various syntax descriptions in the manual were improved.
- The functions get_uint16_le, get_uint32_le, get_uint16_be and get_uint32_be in the
  binary.s7i library were added or improved.
- The functions pointerXPos and pointerYPos were added to the graph.s7i library.
- The function buttonPressed was added to the keybd.s7i library.
- A default 'value' was added to the 'set of' types in the seed7_05.s7i library.
- The types filePermission and fileMode and the functions fileMode and setFileMode
  were added to the seed7_05.s7i library.
- The carddemo.sd7 example program was improved to demonstrate taking and moving
  a card with the mouse.
- Set membership tests were added to the chkset.sd7 program.
- The comanche.sd7 webserver was improved to use a "Content-Type" of "text/html" for
  all files with extension ".htm" or ".html".
- The comanche.sd7 webserver was changed to catch the exception FILE_ERROR (which
  is raised when a browser aborts a connection).
- The compiler (comp.sd7) was improved to do some optimisations for set membership
  tests.
- Some spelling corrections were done in the startrek.sd7 example program.
- The tarx.sd7 example program was improved to read and write file modes.
- Several changes in the interpreter and the runtime library were done to reduce the
  number of warnings generated by the C compiler.
- The functions arrAppend, arrCat and arrExtend in "arr_rtl.c" were improved to contain
  checks for MEMORY_ERROR when the maximum index is not representable as integer.
- The function copy_any_file in "cmd_rtl.c" was improved to change the
  ownership of a file after the timestamps and the file mode have been changed.
- The functions cmdFileMode and cmdSetFileMode were added to "cmd_rtl.c".
- The functions gkbButtonPressed, drwPointerXpos and drwPointerYpos were added to the
  files "drw_x11.c" and "drw_win.c".
- The interpreter (hi) and the compiler (comp.sd7) were improved to support the primitive
  actions CMD_FILEMODE, CMD_SET_FILEMODE, DRW_POINTER_XPOS, DRW_POINTER_YPOS and
  GKB_BUTTON_PRESSED.
- The function alternate_utime was improved to correct buggy behaviour of bcc32
  (Bcc32 sets the modification time of a file on a FAT filesystem wrong).

20090816:
- The chapters explaining external files, the KEYBOARD file, files with line structure
  and sockets in the manual were added or improved.
- The function timestamp1970ToTime was added to the 'time.s7i' library.
- The tarx.sd7 example program was improved.
- Documentation comments in the libraries rational.s7i, bigrat.s7i, keybd.s7i,
  socket.s7i and time.s7i were improved.
- The function alternate_utime was introduced to allow changing the access and
  modification times of directories under Windows.
- The makefiles mk_bcc32.mak, mk_mingw.mak, mk_msvc.mak, mk_msys.mak and mk_nmake.mak
  were improved to support alternate_utime.
- The type 'screen_keybd_file' was renamed to 'console_keybd_file' and the keyboard file
  'SCREEN_KEYBOARD' was renamed to 'CONSOLE_KEYBOARD' in the file 'keybd.s7i'.

20090802:
- The FAQ about static type checking was improved.
- The chapters explaining the for-each statement and the types integer, hash and set in
  the manual were improved.
- The chapters explaining the file types external_file, utf8_file, keyboard_file and
  socket in the manual were added or improved.
- The chapters explaining file scanning and the function argv(PROGRAM) were improved.
- Documentation comments were added to the functions flush, writeln, eof, hasNext,
  length, listen and accept in socket.s7i .
- The functions gets(utf16le_file, integer) and gets(utf16be_file, integer) in the
  utf16.s7i library were improved.

20090719:
- The charsets.s7i library was improved to support the character sets armscii_8, geostd8,
  ns_4551_1, utf-16be, utf-16le and utf-7.
- The functions utf16beToStri, utf16leToStri, removeUtf16SurrogatePairs and utf7ToStri
  were added to the charsets.s7i library.
- The functions getWord, getNonDigits and getQuotedText were added to the scanfile.s7i
  library.
- The functions skipLine and getLine were added to the scanstri.s7i library.
- Several changes in the interpreter and the runtime library were done to reduce the
  number of warnings generated by the C compiler.
- The file src/read_me.txt was improved to explain C compiler warnings because of unused
  parameter 'arguments'.

20090705:
- The chapter explaining the function 'getenv' in the manual was improved.
- The dom.s7i library was renamed to xmldom.s7i and its functionality was improved.
- A new library named inifile.s7i, which allows reading key value pairs from an INI file,
  was added.
- The functions getLineComment, getLine, skipXmlComment, getXmlTagHeadOrContent
  skipXmlTag, getNextXmlAttribute and getNextHtmlAttribute in scanfile.s7i were added
  or improved.
- The functions getSymbol, skipXmlComment, getXmlTagHeadOrContent skipXmlTag,
  getNextXmlAttribute and getNextHtmlAttribute in scanstri.s7i were added or improved.
- The function isDigitString was added to the seed7_05.s7i library.
- The functions open_utf16le and open_utf16be in the utf16.s7i library were improved.
- A new library named xml_ent.s7i, which supports XML entity handling, was added.
- The compiler comp.sd7 was improved to create more prototype definitions of extern
  library functions.
- The interpreter (hi) and the compiler (comp.sd7) were improved to accept a UTF-8
  byte order mark at the beginning of a source or include/library file.
- The types gmpBiginttype and rtlBiginttype in the files big_gmp.c and big_rtl.c were
  replaced with biginttype (defined in common.h).
- The function bigLowestSetBit in big_rtl.c was improved to raise RANGE_ERROR when
  the result does not fit in an integer.
- The function move_any_file in cmd_rtl.c was improved to raise FILE_ERROR when the
  file cannot be renamed.
- The function hsh_idx in hshlib.c was improved to work correctly when the hash is
  destroyed after indexing.
- The const qualifier was added in many *.c and *.h files.
- Several makefiles were changed to use BIGINT_LIB_DEFINE and BIGINT_LIB to decide about
  the big integer library (big_rtl.c or big_gmp.c).

20090621:
- The chapters explaining set types and primitive actions in the manual were improved.
- The codepages 720, 1125, 1255, 1256, 1258, 8859_6 and 8859_8 were added to the
  charsets.s7i library.
- A new library named dom.s7i, which contains a simple dom parser, was added.
- Several changes in the interpreter and the runtime library were done to reduce the
  number of warnings generated by the C compiler.
- The makefile mk_cygw.mak was improved to better support compilation with cygwin.
- The file src/read_me.txt was improved to explain compiling under Windows with cygwin.
- The function 'exit' was introduced to terminate a program with a return code.
- The functions setIsSubset and setIsProperSubset were introduced in set_rtl.c and used
  in setlib.c and comp.sd7 to replace the functions setGe, setLe, setGt and setLt.
- The functions setCmp, setEq, setIsSubset and setIsProperSubset in set_rtl.c were
  improved to avoid accessing memory beyond the set data structure.
- The function setDiff in set_rtl.c was improved.
- The chkset.sd7 program was improved with additional checks for the 'compare' function
  and the set relations.
- The chk_all.sd7 check program was improved to take the changes in chkset.sd7 into
  account.
- The compiler comp.sd7 was improved to support the compilation of the primitive action
  SET_CMP.
- The compiler comp.sd7 was improved to compile programs with sets as parameters in
  user defined functions also correctly with the bcc32 C compiler.

20090607:
- The chkint.sd7 program was improved with additional checks for the binomial coefficient
  (for values of k greater than n and for negative values of n) and 'bitLength'.
- The chkstr.sd7 program was improved with additional checks for string subranges
  ([ A .. B ] and [ A len B ]).
- An error concerning array subranges was fixed in the function arr_range (arrlib.c).
- Several changes in the interpreter and the runtime library were done to reduce the
  number of warnings generated by the C compiler.
- Occurrences of 'float' in the compiler (comp.sd7) were replaced with 'floattype'.
- Functions to compute the most and least significant bit of unsigned integers with
  a width of 8, 16, 32 and 64 bits were added to the file int_rtl.c.
- The new functions ***MostSignificantBit and ***LeastSignificantBit were used in the
  following functions: intBitLength, intLog2, bigBitLength, bigDiv, bigLog2,
  bigLowestSetBit, bigMDiv, bigMod, bigRand, bigRem, setCmp, setMax, setMin and setRand.

20090524:
- Prevention against a Mac OS X malloc() error was added to the function filGets
  (in fil_rtl.c). When malloc() is not able to allocate memory it should return NULL.
  The Mac OS X malloc() function additionally writes a message to stderr. This
  behaviour is not according to K&R C, ANSI C, POSIX or SUS. Thanks to
  John B. Matthews and Frank Goenninger for their help.
- The FAQ and the file src/read_me.txt were improved to explain what happens when
  someone forgot to run 'make depend' before running 'make'.
- The compiler (comp.sd7) was improved to generate better C code to copy arrays and
  hashes. Now the C code is accepted by gcc again and therefore panic.sd7 can again
  be compiled under Linux.
- Several changes in the interpreter and the runtime library were done to reduce the
  number of warnings generated by the C compiler.
- A new library named binary.s7i, which contains functions to read binary data from
  a string or file, was added.
- A new library named zip.s7i, which contains a zip uncompression function, was added.
- The type 'SIZE_TYPE' was replaced by 'size_t' in various *.c and *.h files.

20090510:
- A new example program, the Comanche webserver (comanche.sd7), was added.
- The function getNonDigits was added to the scanstri.s7i library.
- Experimental support for new attribute parameters was added.
- Memory leaks in the functions hsh_excl (hshlib.c) and hshExcl (hsh_rtl.c) were fixed.

20090426:
- The function 'inflate' was added to the gzip.s7i library.
- The function getNextHtmlAttribute was added to the scanfile.s7i library.
- The functions getNextXmlAttribute and getNextHtmlAttribute were added to the
  scanstri.s7i library.
- A sokoban puzzle game example program (sokoban.sd7) was added.
- A new library sokoban1.s7i, which contains the 90 classic sokoban levels, was added.
- Parameter names were added to the function prototypes of the header files actutl.h,
  analyze.h, error.h and findid.h .
- The function cp_to_wpath was changed to raise RANGE_ERROR when a path contains a
  backslash.

20090413:
- A description of data struct elements was added to the chapters rational, bigRational,
  complex, color and time in the manual.
- A description of the functions fileTypeSL, getATime, getCTime, getMTime, setATime,
  setMTime and removeAnyFile was added to the chapter 'OS access' in the manual.
- The compiler (comp.sd7) was improved to correctly handle hashtables as elements of
  structs.
- The compiler (comp.sd7) was improved to generate dispatcher functions which copy a
  reference to a value when the interface needs the value itself (the value is used and
  possibly freed afterwards by the caller).
- The functions getXmlTagHeadOrContent in the scanfile.s7i and scanstri.s7i libraries were
  improved to correctly read the head of empty element tags when they have no attributes
  (E.g: The tag head of "<aTag/>" is "<aTag" ).
- The functions getXmlCharacterReference and skipXmlTag were added to the scanfile.s7i
  library.
- The ENABLE_SORT template function, which allows the generation of a sort function, was
  added to the seed7_05.s7i library.
- The functions fileTypeSL, cloneFile and copyFile were added to the seed7_05.s7i library.
- The functions str_dd_mm_yyyy, str_hh_mm, timestamp1970, time and getCTime were added to
  the time.s7i library.
- The function alternate_localtime_r in the file tim_win.c was improved to correctly
  handle daylight saving time.
- The tarx.sd7 example program was improved to use the function timestamp1970.

20090329:
- The chapters explaining exponentiation and operating system functions in the manual
  were improved.
- The function getSymbolInXmlTag in scanfile.s7i was fixed to really return "" when EOF
  was reached.
- A documentation comment was added to the function getNextXmlAttribute in scanfile.s7i
  and the function was improved to correctly handle tags ending with > and /> .
- The functions cmd_sh and popen were moved from progs.s7i and seed7_05.s7i to the new
  library shell.s7i .
- The function 'shell' was introduced execute shell commands and to return the exit
  code of the shell.
- The chkbig.sd7 program was improved to contain checks for the exponentiation of -1.
- The chkexc.sd7 program was improved to contain more checks for exceptions raised by
  integer exponentiation.
- The compiler (comp.sd7) was improved to generate better code for some bigInteger
  operations and to support the actions cmd_readlink and cmd_remove_any_file.
- Parameter names were added to the function prototypes of the header file big_drv.h .
- The functions bigSuccTemp and bigPredTemp were added to the files big_rtl.c and
  big_gmp.c .
- A documentation comment was added to the function cp_to_command in the file striutl.c .

20090309:
- The chapters about boolean, complex, char, string and time in the manual were improved.
- A new library named utf16.s7i, which contains support to read and write UTF-16 files,
  was added.
- The functions removeAnyFile, readlink and symlink were added to the seed7_05.s7i
  library.
- The seed7_05.s7i function fileType was improved to return the values FILE_ABSENT,
  FILE_UNKNOWN, FILE_REGULAR, FILE_DIR, FILE_CHAR, FILE_BLOCK, FILE_FIFO, FILE_SYMLINK
  and FILE_SOCKET.
- The functions strTimeZone, getATime, setATime, getMTime and setMTime were added to the
  time.s7i library.
- The time.s7i functions str_date, str_time and toGMT were renamed to strDate, strTime
  and getUTC respectively.
- The time.s7i function 'str' for the type 'time' was improved to include also a time
  zone description.
- The K&R function headers in several files were corrected.
- The files tim_rtl.c and tim_rtl.h were introduced to support conversion between 'time'
  and Unix timestamps with the functions mkutc, timFromTimestamp and timToTimestamp.
- The driver functions timAwait and timNow were improved in the files tim_dos.c,
  tim_unx.c and tim_win.c .
- The functions remove_dir, remove_any_file, copy_dir, copy_any_file, cmdBigFileSize,
  cmdFileType, cmdGetcwd and cmdSymlink in the file cmd_rtl.c were improved.
- The functions cmdGetATime, cmdGetMTime, cmdReadlink, cmdRemoveAnyFile, cmdSetATime
  and cmdSetMTime were added to the file cmd_rtl.c .
- The feature test macro WCHAR_OS_PATH was renamed to OS_PATH_WCHAR in several files.
- Several makefiles were improved to create defines for HAS_SYMLINKS, USE_LOCALTIME_R,
  INT64TYPE_SUFFIX_LL, OS_PATH_UTF8, OS_PATH_WCHAR, os_getcwd, os_opendir, os_readdir,
  os_closedir, os_DIR, os_dirent_struct and os_lstat in the file version.h .
- The interpreter and the compiler (comp.sd7) were improved to support the new
  primitive actions CMD_GET_ATIME, CMD_GET_MTIME, CMD_READLINK, CMD_REMOVE_ANY_FILE,
  CMD_SET_ATIME and CMD_SET_MTIME.
- An explanation of the defines OS_PATH_WCHAR, OS_PATH_UTF8, os_getcwd, os_opendir,
  os_readdir, os_closedir, os_DIR, os_dirent_struct and os_lstat was added to the file
  'src/read_me.txt'.
- The function alternate_localtime_r was introduced to be used with bcc32 (which has
  strange ideas about when daylight saving time begins).
- The files bas7.sd7 and planets.sd7 were adjusted to use the improved time functions.
- Spelling errors in the FAQ and in src/read_me.txt were fixed.

20090222:
- A new example program (chkhsh.sd7), which checks hash table operations, was added.
- The logic to link to librarys in the compiler (comp.sd7) was improved.
- A compare function was added for the type 'boolean'.
- The file big_rtl.c was improved to avoid unnecessary shifts wider than the size of
  the type (the result of this shifts was not used anyway).
- The functions remove_dir, remove_any_file, copy_file, copy_dir, copy_any_file and
  move_any_file in the file cmd_rtl.c were improved to use 'os_path_stri' instead of
  'char *'.
- The driver functions cmdCopy, cmdMove and cmdRemove were improved to use wide char
  (UTF-16) functions under Windows and normal (UTF-8) functions under Unix/Linux/BSD.
- The file common.h was improved to contain default defines for os_rmdir, os_chown,
  os_chmod, os_utime, os_utimbuf_struct, os_remove and os_rename.
- The functions dirOpen, dirRead and dirClose in the file dir_rtl.c were improved
  to use os_opendir, os_readdir and os_closedir (defined in dir_rtl.h).
- Commands to create defines for MKDIR_WITH_ONE_PARAMETER, CHOWN_MISSING and
  CHMOD_MISSING in the file version.h were removed from the makefiles.
- The K&R function headers in several files were corrected.
- An explanation of the defines WCHAR_OS_PATH, os_chdir, os_mkdir, os_rmdir, os_fstat,
  os_stat, os_stat_struct, os_chown, os_chmod, os_utime, os_utimbuf_struct, os_remove
  and os_rename was added to the file 'src/read_me.txt'.

20090201:
- A new saving phase was added to the savehd7.sd7 example program. Savehd7 can be used
  to save a potentially damaged harddisk partition to an image file.
- A new chapter about class methods was added to the manual.
- The chapter about the type 'type' in the manual, was improved.
- A check for NULL pointers was added to the function raise_with_arguments.

20090118:
- The savehd7.sd7 example program, which can be used to save a potentially damaged
  harddisk partition to an image file, was improved.
- A FAQ about compiling the Seed7 interpreter was added.
- The function bigFileSize was added to the bigfile.s7i library.
- The functions file_size and file_type were renamed to fileSize and fileType in the
  seed7_05.s7i library.
- The driver functions cmdBigFileSize, cmdChdir, cmdFileType cmdFileSize, cmdMkdir were
  improved to use wide char (UTF-16) functions under Windows and normal (UTF-8) functions
  under Unix/Linux/BSD.
- In the files big_rtl.c and big_gmp.c the function bigFromInt32 was added and the
  functions bigIConv and bigOrd were removed.
- In the file big_drv.h the macros bigIConv and bigOrd were added.
- In the file big_rtl.c the functions bigFromUInt32 and bigFromUInt64 were fixed.
- The feature test makro WIDE_CHAR_STRINGS was renamed to UTF32_STRINGS in various files.
- The primitive action CMD_LNG was renamed to CMD_FILESIZE.
- Several makefiles were improved to create defines for os_chdir, os_mkdir, os_fstat,
  os_stat and os_stat_struct in the file version.h .

20090104:
- A new example program (savehd7.sd7), which can be used to save a partially damaged
  harddisk partition to an image file, was added.
- Several spelling errors in the FAQ and in the manual were fixed.
- The library line.s7i was improved to be useable as file which flushes every line.
- The bas7.sd7 (basic interpreter) example program was improved.
- The preprocessor macros HAS_INT64TYPE and INT64TYPE_IS_INT64 were replaced
  by INT64TYPE in various files.
- The makefiles were improved to create defines for INT64TYPE and UINT64TYPE in the
  file version.h .
- A makefile mk_osx.mak was added to support compilation under Mac OS X with Xcode.
- The type PRIMITIVE_FILE was improved to support the 'setbuf' function.
- Errors in the functions setIConv, prot_set and bigToInt64 were fixed.

20081221:
- The chapter about the Seed7 structured syntax definition in the manual was improved
  (thanks to James Harris for the suggestions and the proofreading).
- A new library named gethttp.s7i, which contains support to get data with the
  HTTP protocol, was added.
- A new library named html.s7i, which contains support functions for HTML, was added.
- The bas7.sd7 (basic interpreter) example program was improved.
- The compiler (comp.sd7) was improved to support the addresses of ITF_CPY and
  ITF_CREATE. That way hash tables with interface values are supported.

20081208:
- A new chapter about the Seed7 structured syntax definition was added to the manual.
- The chapter about declarations in the manual was improved.
- The function getValueOfHeaderAttribute was added to the scanstri.s7i library.
- The seed7_05.s7i library was improved to support case statements for the type boolean.
- The wiz.sd7 example program was improved.

20081116:
- The support for compilation with the bcc32 C compiler from BDS was improved such that
  the chk_all.sd7 check program succeeds.
- The FAQ about the operating systems supported by Seed7, was improved.
- A chapter describing how to replace pointers with interface types was added to the
  manual.
- The obsolete use of the operator >> and << for file input and output was removed
  from the seed7_05.s7i library.
- The general check program chk_all.sd7 was improved to check also for the successful
  compilation of the compiler.
- The compiler (comp.sd7) was improved to generate C programs which are acceptable for
  the bcc32 C compiler.
- The compiler was improved to check that a temporary tmp_*.c file is marked with a
  temp_marker.
- The documentation file src/read_me.txt was improved to explain the #define value
  CHECK_INT_DIV_BY_ZERO.

20081102:
- A new gzip.s7i library, which contains a gzip uncompression function, was added.
- The functions getXmlTagHeadOrContent, getSymbolInXmlTag, getHtmlAttributeValue and
  getNextXmlAttribute were added to the scanfile.s7i library.
- In the library scanstri.s7i the function getXmlTagHeadOrContent was added and the
  function getSymbolInHtmlTag was renamed to getSymbolInXmlTag.
- The call stack written by the (hi) interpreter, when an uncatched exception occurs, was
  improved.
- The compiler (comp.sd7) was improved to write a file name and a line when an uncatched
  exception occurs.
- The handling of sockets in the compiler was improved to support them also for the
  cl C compiler from msvc.
- The makefiles were improved to define 'make clean' additionally to 'make clear' to
  remove the object files and libraries which were created during the compilation process.
- The documentation file src/read_me.txt was improved to explain more #define values used
  in the file version.h .

20081019:
- The support for compilation with the cl C compiler from msvc was improved such that
  the chk_all.sd7 check program succeeds.
- The chkexc.sd7 and chkflt.sd7 example programs were improved to check for more cases
  of division by zero.
- The compiler (comp.sd7) was improved to take the config values ISNAN_WITH_UNDERLINE,
  CHECK_INT_DIV_BY_ZERO and LINKER_FLAGS into account.
- The compiler was improved to avoid boolean expressions with too much parenthesis levels.
- The functions opendir and readdir in the files dir_dos.c and dir_win.c were improved to
  make buffer overflows impossible.
- The files dir_rtl.c and dir_rtl.h were introduced to support reading directories based
  on opendir(), readdir() and closedir() and optionally on the wide char functions
  wopendir(), wreaddir() and wclosedir().
- An implementation of the functions wopendir(), wreaddir() and wclosedir() based on
  the functions FindFirstFile() and FindNextFile() was added to dir_win.c .
- The documentation file src/read_me.txt was improved to explain compilation with bcc32.
- The makefiles mk_mingw.mak, mk_msys.mak, mk_nmake.mak, mk_msvc.mak and mk_bcc32.mak
  were improved to support the new wide character directory read functions.
- The demo mode of the mahjong.sd7 example program was improved.
- The file scr_win.c was improved to support the keypad cursor keys better.
- The functions wstri_expand and wstri_to_stri were added to the file striutl.c .

20081005:
- The chapter about primitive actions in the manual was improved.
- The definition of STD_NULL in the seed7_05.s7i library was improved to support
  read and write operations with STD_NULL.
- The bas7.sd7 (basic interpreter) example program was improved to support file numbers
  outside the range of 1 to 256 and to convert arrays to images when necessary.
- The compiler (comp.sd7) was improved to support local interface declarations and
  dynamic functions which refer to constant values.
- Several improvements were done in the compiler to support generating C programs
  acceptable for the cl compiler from msvc and for the bcc32 compiler.
- A check for double function pointers was added to the function get_primact() in the
  file actutl.c .
- A boss mode was added to the lander.sd7 and sudoku7.sd7 example programs.
- The file common.h was improved to introduce the types int64type, uint64type,
  int32type, uint32type, int16type, uint16type, int8type and uint8type.
- The functions bigULConv and bigLOrd were renamed to bigFromUInt64 and bigToInt64
  respectively.
- The function bigCLit() was improved to avoid C code that the cl C compiler from msvc
  miscompiles to the wrong machine code.
- The functions setupFloat and _matherr and the makefile mk_bcc32.mak were added
  to support compilation with bcc32.
- The feature test macro HAS_LONGTYPE_64 was renamed to HAS_INT64TYPE in various files.
- The feature macros INHIBIT_C_WARNINGS and NO_EMPTY_STRUCTS were added or improved.
- The makefiles mk_mingw.mak, mk_msvc.mak and mk_nmake.mak were changed to create and
  use the file setpaths.c instead of several other files.

20080921:
- The chapters about object orientation and primitive actions in the manual,
  were improved.
- The primitive actions BIG_MCPY, FLT_HSIN, FLT_HCOS and FLT_HTAN were renamed to
  BIG_MULT_ASSIGN, FLT_SINH, FLT_COSH and FLT_TANH respectively.
- The bas7.sd7 (basic interpreter) example program was improved.
- The compiler (comp.sd7) was improved to support the primitive actions CHR_CONV,
  FLT_PLUS, PRG_MATCH_EXPR, REF_CAT_PARSE, REF_CONV and REF_SETVAR.
- The compiler (comp.sd7) was improved to support HASHOBJECT constants.
- A binary gcd function (binaryGcd) was added to the gcd.sd7 example program.
- The X11 keyboard driver was improved to support the num-lock functionality.
- The functions hash_data_to_list and hash_key_to_list were added to the file listutl.c
- The is_var function defined in progs.s7i library was renamed to isVar.
- The functions matchExpr, setVar, hash_data_to_list and hash_key_to_list were added
  to the progs.s7i library.

20080902:
- The FAQ about development speed and type checking was improved.
- The chapters about boolean, bigInteger, rational, bigRational, float, char, complex,
  string, reference, ref_list and program in the manual, were improved.
- The functions rflTail and rflRange were improved to raise MEMORY_ERROR instead of
  RANGE_ERROR in out of memory situations.
- The 'conv' operator was improved to convert an integer to a float, rational, complex
  or bigRational, to convert a float to a complex and to convert a bigInteger to
  bigRational.
- The function getSymbolWithHtmlEntities was added to the scanfile.s7i library.
- The getc function for the type null_file was improved.
- The 'conj' operator was added for the type complex.
- The compiler (comp.sd7) was improved to support the primitive action FLT_ICONV.
- Several changes were done to support compilation when DO_HEAP_STATISTIC is defined.
- The documentation file src/read_me.txt was improved.
- The 'reference' functions category, getType, is_var, local_vars, local_consts, body,
  array_to_list, array_min_index, array_min_index, struct_to_list, interface_to_struct,
  getValue, setCategory, setType were improved to raise the exception RANGE_ERROR
  when a reference is NIL or does not have the required category.

20080817:
- The FAQ about static type checking was improved and an FAQ about development speed
  and type checking was added.
- A chapter about the type 'category' was added to the manual.
- The chapters about boolean, string, set and reference in the manual, were improved.
- The functions toUuencoded and fromUuencoded were added to the encoding.s7i library.
- The html entity 'ang' and several comments were added to the html_ent.s7i library.
- The error management of the chkint.sd7 program was improved.
- The 'configValue' function was improved to support values for TWOS_COMPLEMENT_INTTYPE,
  INTTYPE_64BIT and INTTYPE_LITERAL_SUFFIX.
- The function growStri was improved to work correctly in out of memory situations.
- The makefiles makefile, mk_cygw.mak, mk_linux.mak, mk_mingw.mak, mk_msvc.mak,
  mk_msys.mak and mk_nmake.mak were improved to define TWOS_COMPLEMENT_INTTYPE when
  appropriate.
- The file setlib.c was improved to work correctly with bitsettype's of different sizes.

20080803:
- The charsets.s7i library was renamed to chartype.s7i .
- A new charsets.s7i library, which contains 44 codepages and the functions conv2unicode
  and conv2unicodeByName, was added.
- The encoding.s7i library, which contains encoding and decoding functions for Base64
  and Quoted-printable, was added.
- The functions 'ord' and 'conv' and a 'for' loop were added to the type 'category'
  defined in the progs.s7i library.
- The functions getWord, getQuotedText and getHttpSymbol were added to the scanstri.s7i
  library.
- The functions getSymbolOrComment, getSymbol and getSymbolInHtmlTag of the scanstri.s7i
  library were improved to return symbols without leading whitespace.
- The function getHtmlTagOrContent was renamed to getXmlTagOrContent in the scanfile.s7i
  library.
- A 'for key' loop for arrays, a 'for' loop for HASHSETs, a 'str' function to convert
  integers to strings with base, a 'lpad0' operator for strings and the functions
  striToUtf8, utf8ToStri and toInt were added to the seed7_05.s7i library.
- The files cgi.s7i and bas7.sd7 were improved to use the new toInt function.
- The interpreter and the compiler (comp.sd7) were improved to support the new
  primitive actions INT_STR_BASED, STR_LPAD0, STR_TOUTF8 and STR_UTF8TOSTRI.
- The compiler (comp.sd7) was improved to generate better code for the primitive actions
  ARR_IDX, STR_ELEMCPY and STR_IDX.
- The toutf8.sd7 example program was modified to use the new charsets.s7i library.
- The files heaputl.c, heaputl.h, str_rtl.c and strlib.c were improved to use strings
  with capacity for the primitive actions STR_APPEND, STR_CAT and STR_HEAD.
- The makefiles were changed to use the $(CFLAGS) always when $(CC) is invoked.
- The socClose function in the file soc_rtl.c was improved to call close() or
  closesocket() depending on the operation system.
- The functions socGetc, socLineRead and socWordRead of the file soc_rtl.c were improved
  to interpret characters >= '\128\' as unsigned.

20080720:
- The FAQs about reserved words and templates were improved.
- The chapters about boolean, integer, bigInteger, rational, float, complex, char
  and array in the manual, were improved.
- A subrange type was added for the types integer, char and the enumeration types.
- The makefiles were improved to set the USE_SIGSETJMP macro in the version.h file.
- The flag USE_SIGSETJMP is now taken into account in the floating point exception
  handling generated by the compiler.
- Support for the action ENU_CONV was added to the (hi) interpreter and the compiler.
- A subrange type is used now in the dnafight.sd7 example program.
- The function update_owner in the file match.c was improved to copy values instead
  of just referring to them.
- The function getSymbolInHtmlTag was added to the scanstri.s7i library.
- The interpreter and the compiler (comp.sd7) were improved to support the function
  /:= for the types float and complex.
- The file seed7/prg/files was replaced with seed7/prg/files.txt which contains
  also a list of include files.
- The function strUtf8ToStri was added to the file str_rtl.c .

20080707:
- Various FAQs about reserved words, user defined statements, static type checking,
  garbage collection, container classes, primitive types and the difference between
  object and primitive types were added or improved.
- The chapters about boolean, integer, bigInteger, rational, bigRational, float,
  complex, char, string and program in the manual, were added or improved.
- A contour was added to a building in the lander.sd7 example program.
- Some debugging output was removed from the mahjong.sd7 example program.
- The function analyze and analyze_stri were renamed to parseFile and parseStri
  respectively in the files progs.s7i, calc.sd7, comp.sd7 .
- The primitive actions PRG_ANALYZE and PRG_STR_ANALYZE were renamed to PRG_FIL_PARSE
  and PRG_STR_PARSE respectively.
- The functions prgAnalyze and prgStrAnalyze were renamed to prgFilParse and prgStrParse
  respectively.

20080622:
- A new example program (cellauto.sd7), which simulates cellular automata, was added.
- Testcases for the @:= statement were added to the chkstr.sd7 program.
- The compiler (comp.sd7) was improved such that the generated code raises MEMORY_ERROR
  when the 'malloc' function fails.
- Support for the actions SET_ICONV and SET_SCONV was added to the (hi) interpreter
  and the compiler.
- The compiler was improved to optionally generate code without range checks for the
  STR_ELEMCPY action.
- The handling of functions returning references to existing objects in the compiler
  was improved.
- Parameter names were added to the function prototypes of the header files bln_rtl.h,
  chr_rtl.h, cmd_rtl.h, flt_rtl.h and ut8_rtl.h.
- The compiletime flag RSHIFT_DOES_SIGN_EXTEND is now taken into account for the
  right shift in the macro 'bitset_pos' defined in the file set_rtl.h.

20080608:
- The chapter about symbol scanning from a file in the manual, was improved.
- A new include file (cgi.s7i) to support the Common Gateway Interface, was added.
- A bug in the getLine function of the scanfile.s7i library was fixed.
- The functions fileExists was added to the seed7_05.s7i library.
- The handling of closures in the compiler (comp.sd7) was improved.
- A new example program (lander.sd7), which simulates a lunar landing, was added.

20080525:
- A new chapter about complex numbers was added to the manual.
- A new chapter about symbol scanning from a file, was added to the manual.
- The makefile for Linux/BSD/Unix and the file mk_linux.mak were improved to be usable
  for shells where a \n in the echo command leads to errors in the make process (thanks to
  Wolfgang Raith, Jens Thoms Toerring and Arnold Hendriks for helping with this issue).
- The function cp_to_wstri was protected with 'ifdef USE_WFOPEN' in the files striutl.c and
  striutl.h (thanks to Wolfgang Raith for pointing out compilation problems).
- The functions = and <> were added to the complex.s7i library.
- The documentation comments of the libraries scanfile.s7i and scanstri.s7i were improved.
- The functions skipLine and getLine were added to the scanfile.s7i library.
- The strifile.s7i library, which supports string based files, was added.
- The documentation comment of the get_symbol function in the file bas7.sd7 was improved.
- The function processFile which checks the functions getWhiteSpace and getSymbolOrComment
  was added to the program chkscan.sd7 .
- The functions filWrite and ut8Write were improved to raise FILE_ERROR when the
  call of fwrite() was not able to write the whole string.
- Support for the primitive action flt_cast was added to the interpreter and compiler.
- The function setToInt which can convert parts of a set to an integer was added to
  set_rtl.c .

20080508:
- The FAQ "Why a new programming language?" was improved.
- The descriptions of the functions 'rem', 'mod', '[ A .. B ] times C', minIdx, maxIdx,
  rand(array), insert(array), category, local_vars, local_consts, setCategory, setParams,
  'in'(ref_list), 'not in'(ref_list), make_list, pos(ref_list), '&:='(ref_list),
  '@:='(ref_list) and the bufferChar variable in the manual were added or improved.
- The functions float cast, float varCast, boolean varConv, char varConv
  TRACE_REF, pos(ref_list), [minIdx .. maxIdx], minIdx, maxIdx (+ useage of them),
  minIntIdx, maxIntIdx, card(hashSet), xalloc, ord(enum), getwd(null_file) and
  getln(null_file) in the seed7_05.s7i library were added or improved.
- The compiler (comp.sd7) support for the primitive actions arr_maxidx, arr_minidx,
  flt_icast, int_pow, rfl_ipos and sct_alloc was added or improved.
- The compiler handling of INTERFACEOBJECTs and the generation of prototypes was improved.
- The compiler was improved to generate static dispatcher functions.
- The functions arr_maxidx and arr_minidx were added to the file arrlib.c.
- The function bigUIConv was added to the file big_gmp.c.
- The function rflIpos was added to the file rfl_data.c.
- The function flt_icast was added to the file fltlib.c.
- The functions refArrmaxpos, refArrminpos, ref_arrmaxpos and ref_arrminpos were renamed to
  refArrmaxidx, refArrminidx, ref_arrmaxidx ref_arrminidx.

20080420:
- An explatation how to uncompress the Seed7 package was added to the FAQ.
- The descriptions of the functions log2, gcd, lowestSetBit, 'rem', 'mdiv' and
  'mod' in the manual were added or improved.
- The functions gcd and modInverse were added to the bigint.s7i library.
- The bigrat.s7i library was changed to use the gcd function from the bigint.s7i library.
- The chkbig.sd7 program was improved with additional checks for the monadic plus, 'div',
  'rem', 'mdiv', 'mod' and bigInteger constants.
- The chkexc.sd7 program was improved with additional checks for bigInteger functions.
- The chk_all.sd7 program was improved to take the new checks into account.
- The compiler (comp.sd7) was improved to work also with GMP's bigInteger's.
- The compiler was improved to support big_plus and big_gcd.
- The handling of +:=, -:=, *:=, <<:= and >>:= in the compiler was improved to
  avoid memory leaks.
- The handling of the bigInteger 'mdiv' and * in the compiler was improved to do some
  optimisations like using shift operations instead.
- Three example programs printpi1.sd7, printpi2.sd7 and printpi3.sd7 were added.
- The big_gmp.c interface library was added to allow bigInteger computations based
  on the mpz_ functions of the GMP library.
- The file big_rtl.h was renamed to big_drv.h.
- The file biglib.c was change to allow working with big_rtl.c or big_gmp.c .
- The file big_rtl.c was improved to work with a BIGDIGIT_SIZE of 32.
- The functions bigHexCStri, uBigMultSub, uBigSqare, bigClit, bigCmpSignedDigit, bigDiv,
  bigGcd, bigGrow, bigImport, bigLShift, bigLShiftAssign, bigMDiv, bigMod, bigOdd, bigRem,
  bigRShift, bigShrink and bigToBStri of the file big_rtl.c were added or improved.
- An error message about "match value failed" was suppressed in dcllib.c .
- The int_mdiv action (defined in intlib.c) was improved for speed.
- The function prot_bigint (defined in traceutl.c) was changed to use bigHexCStri.
- The function printtype (defined in traceutl.c) was changed to avoid writing a pointer value.
- A bug in the function typHashCode (defined in typ_data.c) was fixed.
- The file read_me.txt was improved to contain a chapter about warnings and a chapter
  which explains how use the GMP library.

20080406:
- The interpreter and the compiler (comp.sd7) were improved to support the functions
  bitLength, lowestSetBit, <<, <<:=, >> and >>:= for the types integer and bigInteger
  (inspired by Mensanator for a program which explores the Collatz Conjecture).
- The priority of the << and >> operators was changed from 19 to 9 in the file syntax.s7i.
- Uses of the obsolete file output operator << where replaced with write statements in
  bas7.sd7, comp.sd7, ms.sd7, pac.sd7, sl.sd7, snake.sd7, tarx.sd7, tetg.sd7 and tet.sd7.
- Descriptions about the new integer/bigInteger functions <<, <<:=, >>, >>:=, bitLength and
  lowestSetBit were added to the manual.
- The chkint.sd7 program was improved with additional checks in chkint for 'div', 'rem',
  'mdiv', 'mod', <<, <<:=, >> and >>:= .
- The chkbig.sd7 program was improved with additional checks for **, compare, lowestSetBit,
  <<, <<:=, >> and >>:= .
- The compiler (comp.sd7) was improved to create optimized/improved versions for the bigInteger
  functions odd, compare, <, <=, >, >=, ** and for the integer functions 'mdiv' and 'mod'.
- A description about the type bigRational was added to the manual.
- An explatation about type inference was added to the FAQ.
- A new constructor for complex numbers from a float was added to the complex.s7i library.
- A boss mode was added to the panic.sd7 and mahjong.sd7 example programs.
- The bas7.sd7 (basic interpreter) example program was improved.
- The makefiles were improved to set the RSHIFT_DOES_SIGN_EXTEND macro in the version.h file.
- A bug in the primitive action flt_mcpy was fixed.
- The primitive action flt_str was improved to support denormal float numbers better.

20080319:
- The functions getEscapeSequence, getCharLiteral, getStringLiteral, getSymbolOrComment and
  getSymbol were added to the scanstri.s7i library.
- The file read_me.txt, which explains the compilation of the interpreter, was added to
  the src directory.
- The actions act_value, big_value, chr_value, fil_value, flt_value, int_value, prg_value,
  rfl_value, set_value, str_value and typ_value were improved to raise an exception for
  references which are NIL or refer to an object with the wrong category.
- The support for the primitive actions itf_eq and itf_ne in the compiler (comp.sd7) was
  improved.
- The handling of bitsets with negative elements in the compiler (comp.sd7) was improved.
- The bas7.sd7 (basic interpreter) example program was improved to support the -p
  option which asks for a prompt at the end of the program.
- Support for the actions bst_append and bst_cat was added to the interpreter.

20080302:
- A new chapter about compile errors was added to faq and to the read_me.
- The functions skipComment, getComment, skipLineComment, getLineComment and getNumber were
  added to the scanstri.s7i library.
- A new example program (chk_all.sd7), which runs interpreted and compiled checks, was added.
- Support for the primitive action CMD_CHDIR was added to the compiler (comp.sd7).
- Several memory leaks, which happen in the handling of MEMORY_ERROR exceptions, were removed.
- All primitive actions which start with CLS_ were renamed such that the name starts with ITF_ .
- The files clslib.c and clslib.h were replaced by itflib.c and itflib.h .
- The objectcategory CLASSOBJECT was replaced with the objectcategory INTERFACEOBJECT.
- The functions popen and cmd_sh were improved to be consistent on all platforms. Now they
  use always '/' as path delimiter and '\\ ' to describe spaces in the command path.
- The gets function for external_files was improved to work correctly when pipe files are
  read as a whole.
- A workaround was added for a wrong behaviour of the ftell() function under MinGW for pipes.
- The -q option of the 'hi' interpreter was improved to suppress all interpreter messages.
- Several changes to remove C compiler warnings were done.

20080217:
- A new chapter about object orientation was added to the manual
  (Many thanks for the feedback to Leonardo Cecchi, Malcolm McLean and Reinder Verlinde).
- The manual was changed to mention that the 'in' parameter of arrays and structs
  is a reference ('ref') parameter.
- The faq was improved to contain a paragraph about static type checking.
- The implementation type NULL_FILE was renamed to null_file.
- The struct copy of the compiler (comp.sd7) was changed to leave the dynamic type unchanged.
- The following primitive actions were added or improved in the compiler (comp.sd7):
  FIL_ERR, FIL_IN, FIL_OUT, FLT_GROW, FLT_MCPY, HSH_INCL, HSH_LNG, INT_PLUS, PRG_EXEC,
  PRG_STR_ANALYZE, SCR_CURSOR and STR_GETENV.
- The primitive action CLS_CREATE2 was changed to call the CLEAR_TEMP_FLAG macro
  (This is a fix for a bug found by Leonardo Cecchi).
- The function match_subexpr_type was changed to allow normal (not DYNAMIC) interface
  functions to be used for implementation values.
- The primitive action PRC_GETENV was renamed to STR_GETENV.
- The bas7.sd7 (basic interpreter) example program was improved.
- A bug in the primitive action RFL_NOT_ELEM was fixed.
- The functions copy_list, array_to_list and struct_to_list were change to return the
  created list.

20080203:
- The compiler (comp.sd7) was improved to allow the compilation of itself.
- The compiler now compiles the programs rever.sd7 and sl.sd7.
- The scanner.s7i library was renamed to scanfile.s7i and the getName function was
  added to it.
- Three libraries dialog.s7i, scanstri.s7i and charsets.s7i were added.
- The functions str, digits and parse of complex.s7i were changed to use the
  -0.5000+0.8660i format.
- The hasNext function, which allows an iterator like handling of files, was added to
  the file interface.
- Two new object librarys s7_comp and s7_data were added to support the compiler.
- The following files were added: act_comp.c, act_comp.h prg_comp.c, prg_comp.h,
  ref_data.c, ref_data.h, rfl_data.c, rfl_data.h typ_data.c, typ_data.h, datautl.c and
  datautl.h .
- The following primitive actions were added or improved: CMD_FILETYPE, FIL_HAS_NEXT,
  FIL_PRINT, FIL_VALUE, REF_ARRMAXPOS, REF_CAT_PARSE, REF_CAT_STR, RFL_NOT_ELEM
- The prototypes of several *.h files were improved to contain parameter names.
- The category of an object returned by refCategory is now an integer/enumeration like
  type instead of a string.
- The bigAddTemp and bigSbtrTemp functions were added to allow optimized bigInteger
  operations in the compiler.
- The bas7.sd7 (basic interpreter) example program was improved.
- The Exit function of the castle.sd7 example program was improved.

20080120:
- Optimisations for the string functions =, <>, stri[num], &, upper, lower, pos, rpos, split
  and for the array indexing were added to the compiler (comp.sd7).
- Documentation comments were added to bigint.s7i, draw.s7i, bas7.sd7 and mahjong.sd7.
- The bas.sd7 (basic interpreter) example program was improved and renamed to bas7.sd7.
- The functions polar, parse, str and digits were added or improved in complex.s7i.
- The read_dir, chdir, mkdir functions were improved to raise FILE_ERROR on failure.
- The functions open_dir and open_dir_path of the dir.s7i library were changed to return
  STD_NULL when the directory does not exist.
- The functions getDigits, skipSpace, skipWhiteSpace were added to the scanner.s7i library.
- The digits function for the type float was improved to never return -0 .
- The new lpad0 operator was added to convert integers to strings with leading zeros.
- The time conversion functions str_yyyy_mm_dd, str_mm_dd_yy, str_mm_dd_yyyy, str_d_m_yy and
  str_d_m_yyyy were added to the time.s7i library.
- Checks were added to the chkint.sd7 and chkstr.sd7 example programs.
- The code to handle a failing realloc for arrays was improved.
- Bugs in the compiler, with str_append and with val or ref parameters as result in the
  return statement, were fixed.

20080106:
- Documentation comments were added to the functions of the librarys bigint.s7i,
  bigrat.s7i, complex.s7i, float.s7i, getf.s7i, keybd.s7i, rational.s7i, scanner.s7i,
  socket.s7i, stritext.s7i, time.s7i and dna_base.s7i.
- The bas.sd7 (basic interpreter) example program was improved.
- The include mechanism was improved to avoid multiple includes.
- Part of the float.s7i library was moved to the new math.s7i library.
- The library html_ent.s7i, which contains functions to replace HTML entities by
  characters and vice versa, was added.
- A new example program (chkhent.sd7) to check the new HTML functions was added.
- The compiler (comp.sd7) was improved to support the new 'rpos' function.
- The getHtmlTagOrContent function was added to the scanner.s7i library.

20071227:
- The library cards.s7i which contains the card pictures of a french deck was added.
- The documentation of the draw.s7i library was improved.
- Some pictures were moved from castle.sd7 to pic16.s7i and pic32.s7i.
- The function rpos (reverse search for a character in a string) was added to the
  seed7_05.s7i library.
- The bas.sd7 (basic interpreter) example program was improved.
- A new example program (carddemo.sd7), which demonstrates the playing cards of the
  french deck, was added.
- Testcases for the rpos function were added to the chkstr.sd7 program.

20071210:
- The interpreter was improved to flag match errors only once instead of multiple times.
- The graph.s7i library was improved to define the type pointList and the function
  genPointList (to create a pointList from an integer array of x and y coordinates).
- The functions polyLine and fpolyLine (to draw polygons and filled polygons) were
  added to the draw.s7i library .
- The functions pos (search for a character in a string) and isDigitString were added
  to the seed7_05.s7i library.
- Several testcases were added to the chkint.sd7 and chkstr.sd7 programs.
- The drwSetTransparentColor function was added to the drw_x11.c driver.
- An analog clock program (clock3.sd7) provided by Volker Schuller was added.
- The compiler was improved to support the new graphic and string functions.

20071125:
- The interpreter was improved to store the filename and the line of the definition of
  an object.
- The line stored for an expression was improved to be identical with the line of the
  operator symbol or function name.
- The stritext.s7i include file, which supports string array based text files, was added.
- The mahjong.sd7 example program was improved to draw darker vertical surfaces.
- The mahjong tiles of the mahjng32.s7i include file were improved to contain bigger digits.
- Several new functions like getHtmlSymbolOrComment, gray, file and line were added.
- The compiler was improved to support functions with 'in var' parameter called by DYNAMIC
  dispatch functions with a corresponding 'val' parameter.
- The compiler was improved to support the ref_line and ref_file actions.
- An error was fixed in the strIpos function and testcases were added to the chkstr.sd7
  program.

20071110:
- The functions getSymbol, getWhiteSpace, getSymbolOrComment and getSimpleSymbol
  of the scanner.s7i library were created or improved.
- A new example program (chkscan.sd7) to check the new scanner functions was added.
- A bug in the planets.sd7 example program was fixed.
- The manual was corrected to explain that the types 'char' and 'string' support Unicode.
- The actions cmd_ls and scr_write were improved to use utf-8 characters when available.
- The filOpen function was improved to use _wfopen under Windows.
- The timezone handling to get the Greenwich Mean Time was improved.
- A string in shisen.sd7 was enlarged to avoid a RANGE_ERROR exception
  when accessing it.

20071025:
- A new example program (mahjong.sd7) was added.
- An include file (mahjng32.s7i) which contains mahjong tiles was added.
- The interpreter and the compiler were improved to support the gkb_window action.
- The close interface function was changed to work for the type graphFile.

20071010:
- The compiler (comp.sd7) was improved to support the 'remove(array, index)' function.
- The functions isLeapYear, daysInMonth, weekOfYear, weekDateYear and weekDateWeek
  were added to the time.s7i library
- The exception checking program chkexc.sd7 was improved to check for exceptions
  raised with arrays.
- Documentation for the bigInteger type was added to the manual.
- Some strings in pic32.s7i and pairs.sd7 were enlarged to avoid a RANGE_ERROR exception
  when accessing them.

20070925:
- The compiler support for fil_tell, hsh_contains, hsh_excl and str_idx was improved.
- The string indexing (str_idx) was changed to raise RANGE_ERROR for indices outside of
  the string.
- Various spelling errors in faq.htm, faq.txt, manual.htm and manual.txt where fixed.
- The functions filBigLng, filBigSeek, filBigTell and filLng were improved to use _fseeki64
  when available.
- The mandelbr.sd7, chkstr.sd7, chkexc.sd7 and wiz.sd7 example programs were improved.
- A protection aggainst a buffer overflow in scrWrite was added.
- Several function prototypes were changed to use 'const' types.

20070909:
- A gtk-server connection library (gtkserver.s7i), a test program (gtksvtst.sd7) and
  documentation (see doc/gtksvdoc.txt) were added (Patch from Leonardo Cecchi).
- Some spelling corrections for read_me and a draft for a cygwin makefile (mk_cygw.mak)
  were added (Patches from Terrence Brannon).
- A Seed7 mailing list has been created under seed7-NOSPAMusers@lists.sourceforge.net
  (Remove NOSPAM to get the email address).
- The planets.sd7 program was improved to show the name of a star when clicking on it.
- The stack trace of the hi interpreter for uncaught exceptions was improved.

20070823:
- The compiler was improved to support nested exceptions.
- The planets.sd7 example program was improved to contain a panorama with stars and planets.
- An include file (stars.s7i) which contains the names and coordinates of stars was added.
- The intParse function was improved to accepts a plus (+) sign.
- The memory management of the socRecv function was improved.
- Some exception tests were added to chkexc.sd7
- A test for check_atan2 was added to the chkflt.sd7 program.

20070807:
- The handling of local functions in the compiler (comp.sd7) was improved.
- The function 'option' (to get compile time defines) was renamed to 'configValue'.
- The compiler was improved to support the 'configValue' function.
- The 'ord' function for enumerations was changed to work without DYNAMIC.
- The changelog was reversed (sorted now from newest to oldest), and old entrys were added.
- The address of the FSF was changed in various files.

20070723:
- The compiler (comp.sd7) was improved to allow local functions.
- The compiler now supports arrays with indices of any type (not just integer indices).
- A new example program (mandelbr.sd7), to display fractals, was added.
- The -O2 option was added to the compiler (advantageous when compiling mandelbr.sd7).
- The compiler now generates static functions to allow more optimizations.
- A *:= operator and the sqrAbs function were added for the type 'complex'.
- The reflection was changed to use the 'getValue' function instead of the 'value' operator.
- The compiler was improved to support the conversion of integers to an enumeration type.
- The compiler now compiles the programs panic.sd7 and castle.sd7.

20070710:
- The compiler (comp.sd7) support for different C compilers was improved.
- A support for socket send and recv was added to the compiler.
- A description of openInetSocket was added to the documentation.
- A pos function and the 'not in' operator was added for the type ref_list.
- The var_conv operator was renamed to varConv.
- Some setters (setCategory, setValue, setParams) were added to the reflection.
- The classtype of the interpreter was renamed to categorytype since it has
  nothing to do with classes.

20070624:
- As suggested by several users a socket library (socket.s7i) was added.
- Two example programs tst_srv.sd7 and tst_cli.sd7 to test socket functionality were added.
- The popen function was added (suggested by Leonardo Cecchi).
- The compiler was improved to support hash tables with floats, various for loops over
  hash tables and the new socket library.
- The compiler now compiles the programs bas.sd7 and wordcnt.sd7.
- The wator.sd7 example program was improved.
- The heap management and the heap statistic was improved.
- Several function prototypes were changed to use 'const' types.

20070607:
- An explanation of multiple dispatch was added to the FAQ.
- A bug in the 'str' function for 'complex' was fixed (found by Leejun).
- The interpreter was improved to support startsWith, endsWith, array_min_position, heapstat
  and @:= (for ref_lists).
- The compiler suport for drw_cpy, ref_trace, arr_head, arr_tail, arr_idx, varfunc, wintype,
  array literals and dynamic functions (for enumerations) was improved.
- The compiler now writes a message when an uncaught exception was raised.
- The compiler was changed such that destr functions accept also NULL.
- The compiler now compiles the programs snake.sd7 and toutf8.sd7.
- The concentration game was renamed to pairs.sd7
- The functions drwCpy, drwCreate and drwDestr where moved to drw_rtl.c.
- The heap management and the heap statistic was improved.

20070524:
- The file version.h was removed to force the creation of it with the "make depend" command.
- The read_me was changed such that a "rm version.h" is not necessary to compile.
- Several constant types were defined in data_rtl.h.
- The files str_rtl.c, str_rtl.h, set_rtl.c and set_rtl.h were changed to use constant types.
- A bug with compare functions for array sorts and hash tables was fixed.
- The makefile mk_linux.mak was added as copy of 'makefile'.
- The makefile mk_msvc.mak was added to allow experimental compilation with nmake and cl.

20070507:
- As suggested by several users the include files were moved to the 'lib' directory.
- The search for include files was improved to work with an internal search path array.
- The 'hi' interpreter now contains a hardcoded include directory path defined in version.h.
- The makefiles mk_mingw.mak, mk_msys.mak and mk_nmake.mak were added for compilation under MinGW.
- The bigInteger multiplication was changed to use Karatsuba multiplication for bigger integers.
- Several constant types were defined in common.h.

20070419:
- The compiler support for result variables, which are initialized with expressions, was improved.
- The bas (basic interpreter) example program was improved.
- The bigrat.s7i, rational.s7i librarys were improved.
- Some multiplication testcases were added to the chkbig.sd7 example program.
- The compiler was changed to mark its temporary *.c files with a temp_marker.
- Several performance improvements for uBigMultSub, uBigAddTo, uBigDiv, uBigMult,
  uBigMultIntoHelp, bigGrow, bigMult and bigShrink were done.

20070404:
- The support and documentation for the functions split, join, log2, bitLength and
  the operator *:= were improved.
- The compiler support for the functions raise, log2 and split was improved.
- The bas (basic interpreter) example program was improved to support print using statements.
- The support of the for-step loop in the seed7_05.s7i include file was improved.
- Some improvements for the bigRational and bigInteger library were done.
- A bug in uBigAddTo which could cause an error in bigDiv, bigRem, bigMDiv, bigMod was fixed.
- The chkbig.sd7 program was improved to check the log2 function for bigInteger.
- The chkstr.sd7 program was improved to have more checks for the split function.

20070319:
- The interpreter was changed to execute programs only when they have no errors.
- The option -x to execute programs, even when they have errors, was added to the interpreter.
- The *:= operator for the types integer, float, bigInteger and bigRational was added.
- The chkbig.sd7 program was improved to check the *:= operator for big integers.
- The compiler was improved to support the *:= operator and the arr_cat action.
- Several improvements for compile time error messages were done.
- The err.sd7 example program, which checks compile time error messages, was improved.

20070305:
- The support for float was changed to use IEEE 754 NaN and Infinity instead of exceptions.
- The exception checking program chkexc.sd7 was improved and the chkflt.sd7 program was added.
- All exponentiation operators were improved to evaluate 0 ** 0 to 1.
- The associativity of the ** operator was changed to work right to left.
- A declaration for an = and <> operator was added for interface types.
- Basic support for exceptions in compiled programs was added.
- Parts of the manual describing float operations and exponentiation were improved.
- The performance of the flt_ipow action was improved.
- The compiler was improved to produce better code for the primitive actions
  arr_sort, arr_times, cls_eq, cls_ne, flt_isnan, flt_log10, int_fact,
  rfl_append, rfl_cpy, rfl_for, rfl_mklist, rfl_ne, rfl_tail and str_str.

20070219:
- The support for hash tables, sets and console output in compiled programs was improved.
- Support for multiple dispatch of interface (DYNAMIC) functions was added to the compiler.
- The handling of parameters in the dispatch functions generated by the compiler was improved.
- Variable global arrays and structs in compiled programs are now initialized
  with a copy of the initialisation value.
- The compiler was improved to produce better code for the primitive actions
  arr_idx, chr_ge, chr_gt, chr_le, chr_lt, fil_seek, set_cpy, str_cpy,
  prc_option, prg_match, ref_itftosct, typ_isderived and typ_meta.
- A compare and a hashCode function was added for the type 'color'.
- A check for curr_hash != NULL was removed at various places since isit_hash takes care of it.

20070204:
- An abstract data type to create interface types was added.
- The matching of functions was changed such that interface functions are
  preferred over non interface functions.
- The error message which flags wrong access rights of actual parameters was improved.
- The sorting of directory entrys for cmd_ls was improved.
- The Unicode support for prc_getenv and prc_option was improved.
- The -v (verbose) option was added to the interpreter.
- A small bug in the startrek.sd7 example program was fixed.
- The handling of interface (DYNAMIC) functions in the compiler was improved.
- The compiler was improved to support the actions arr_cpy, drw_create, drw_destr,
  drw_pfarcchord and drw_pfarcpieslice.
- The handling of enumeration types in the compiler was improved.
- Several accessright changes for file functions in seed7_05.s7i and other libraries
  allow the compiler to produce working code for more file functions.

20070118:
- The compiler was improved to support interfaces (DYNAMIC functions).
  With this improvement several example programs can be compiled now.
- The support for the actions gkb_busy_getc, gkb_xpos, gkb_ypos, kbd_busy_getc,
  drw_pfellipse and arr_arrlit2 was added to the compiler.
- The X11 keyboard driver was improved.

20070104:
- The hashtype was changend to maintain the size of the hash instead of computing it.
- The &:= statement for the type ref_list was added.
- The compiler was improved to support 'in var' parameters.
- A new include file (complex.s7i) to support complex numbers was added.
- The support for the bigIConv, bigOrd, cmdMkdir, drwPArc, drwPCircle, drwPFEllipse,
  filBigLng, filBigSeek and filBigTell functions was added to the compiler.

20061219:
- Support for local constant declarations was added to the compiler.
- The compiler was improved to support the actions big_abs, big_clit, big_hashcode,
  big_value, cmd_ls, flt_grow, flt_shrink, gkb_gets, kbd_gets, set_arrlit and str_chsplit.
- The heap statistic was improved to work for bigInteger objects.
- The array compare functions = and <> have been improved.
- The support for arrays in the compiler was improved.
- The trace level 'h' was added to trace the heapsize.
- The exception handling was corrected to work with hash objects.
- A bug in the in_file handling of the analyzer was fixed.
- The 'hi' interpreter was improved to support the actions rfl_trace and str_split.

20061204:
- The functions bigLength, seek, bigTell were added to support files with 64 bit offsets.
- The file functions getwd, getln, read and readln were changed to remove '\r' before '\n'.
- Parameters of type bigInteger were changed to use call by reference.
- The functions ord and conv for the bigInteger type were added.
- The putf function (to copy a string to a file) was changed and a writef function was added.
- Functions to split and join strings and a check for that functions were added.
- Comparisons = and <> for arrays were added.
- An implementation for 'set of string' based on the 'hash' type was added.
- Keyboard functionality was moved into the new file kbd_rtl.c.
- A new makefile makefile.msy for MinGW MSYS compilation was added.

20061120:
- The rand function and the +:= and -:= operators were added to
  the bigInteger library.
- The checks for bigInteger addition and subtraction in chkbig.sd7
  were improved and checks for the +:= and -:= operators
  were added.
- The compiler support for bigInteger was improved.
- The documentation (manual and faq) was improved.

20061106:
- The hi interpreter was improved to support bigInteger literals.
- Changes have been done to allow a configurable bigdigit size
  (Bigdigits are the building elements of a bigInteger).
- The mdiv function was added to the bigInteger library and the
  chkbig.sd7 program.
- The chkbig.sd7 program was changed to use bigInteger literals.
- Several bigInteger functions have been improved.
- A bigrat.s7i include file to support bigRational numbers has been added.
- The compiler support for bigInteger, setBaselit and strTrim has
  been improved.

20061023:
- The bigInteger library was improved to support modulo, power and
  several comparisons (<, >, <=, >=).
- Testcases for incr, decr, modulo, power and compare were added to
  the chkbig.sd7 program.
- The compiler was improved to support the new bigInteger functionality.

20061008:
- The bigInteger library was improved to support division and remainder.
- Testcases for division and remainder were added to the chkbig.sd7 program.
- The compiler was improved to support bigInteger division and remainder.

20060926:
- The bigInteger library was improved to support addition, subtraction,
  multiplication, negation, absolute value, string conversions and more.
- A lot of testcases have been added to the chkbig.sd7 program.
- The compiler was improved to support more bigInteger functionality.
- The makefile was changed to work on BSD (suggested by Dave Bodenstab).

20060910:
- A new include file (bigint.s7i) and a new example program (chkbig.sd7) were added.
- Changes in the compiler to support some bigInteger functionality were done.
- Support for the str_elemcpy action was added to the compiler.

20060826:
- A description of the 'attr' parameter was added to the manual.
- The first steps towards bigInteger support were done.
- The graphic and keyboard drivers for Windows have been improved.
- A check for the maximum of fish and sharks was added to the wator example program.

20060808:
- A description of the 'func', 'varfunc' and 'proc' types was added to the manual.
- The 'parse' operator for the type 'time' was improved.
- The operators '<=', '>' and '<' were added for the type 'duration'.
- The Windows graphic driver was improved to use the SetPixel function.
- The filOpen function was changed to open files in binary mode.

20060724:
- A new example program (bifurcation) was added.
- A trim function to remove leading and trailing spaces from strings was added.
- The Windows graphic driver was improved to support Windows 98.
- A changelog (chlog) was added.

20060707:
- A little improvement of the castle example program was done.
- The drwText function of the Windows graphic driver
  was changed to support Unicode characters.
- A new example program (planets) was added.

20060622:
- A new example program (castle) was added.
  Castle was inspired by the castle adventure from 1984.
- The graphic driver for Windows has been improved for
  circle, arc, chord, pieslice, fellipse.

20060606:
- The bas (basic interpreter) example program was improved to
  support exit statements.
- A tiny bug in the panic example program was fixed.
- The hi interpreter was improved to write a stack trace when
  an exception is not catched.

20060520:
- The performance of the interpreter was raised by circa 8% with
  an improved free list management.
- The graphic and keyborad drivers for Windows have been improved.
- A new primitive action (set_arrlit) was defined to create sets from
  integer arrays.
- The bas (basic interpreter) example program was improved to support do loops.
- A sudoku example program (sudoku7) was added.

20060506:
- The reporting of semantic errors was improved (now the
  line number and the line itself is shown).
- A checkmark picture was added to pic16.s7i and pic32.s7i .
- A tiny inaccuracy in the heap statistic was fixed.
- The source and include file management of the interpreter
  was simplified.

20060420:
- The driver function tim_await (using seconds since 1970)
  was replaced by timAwait (using the Gregorian calendar).
- The driver function timNow was changed to deliver a
  timezone which includes the daylight saving time.
- Various pictures where added in pic16.s7i and pic32.s7i .
- The parse function for bitsets was fixed to work for
  empty sets.
- A new example program toutf8 to convert files to utf-8
  was added.
- The Windows driver function drwPRect was fixed.

20060404:
- Function to close a graph_file
- Write graphic text under Windows
- Parse operator and reading for bitsets
- Allow hashtables for sets
- Date format according to ISO 8601
- New time functions dayOfWeek, julianDayNumber and
  julianDayNumToTime

20060314:
- Improvements for arrays and structs in the compiler
- Function strLit to support the compiler
- Improvements in bas example program.
- Subrange and for-loop for bitset
- Allow line comments in string literals
- Empty line count removed

20060223:
- Some compiler improvements for sets and structs.
- New graphic function: copyArea
- Hashes for sets and types
- New time functions: dayOfYear, toGMT, -:=
- Utf-8 characters in string and char literals
- New standard files: STD_UTF8_IN, STD_UTF8_OUT, STD_UTF8_ERR
- Function file_type to get the type of a file

20060205:
- The compiler (comp.sd7) can handle strings now.
- New example program wator.sd7 (Simulation with fish and sharks).
- Improved example program dnafight.sd7 .
- New rand function to select a random element from a set.

20060126:
- Improvements in the compiler (comp.sd7)
- Changed wrinum.s7i to write roman, english and german numbers.
- Moved some pictures to pic16.s7i and pic32.s7i.
- Renamed NO_ERROR to OKAY_NO_ERROR (NO_ERROR is used in Windows).
- Defined compare and hashCode for the type 'reference'.
- In drw_win.c: Map characters 128 to 159 to Unicode chars.
- In scr_win.c: Map console characters to Unicode chars.
- Add #include "string.h" in files that use memcmp.
- Add functions to support compilation:
  filLit, drwCpy, strHead, strRange, strTail and others.
- In kbd_inf.c: Add support for UTF-8 keys for KEYBOARD.

20060118:
- Some improvements of the Windows support
- Console mode programs work
- Windows time driver works
- GDI Keyboard driver works
- Graphic programs work to some degree
  The Windows port uses MinGW and the makefile "makefile.win".
- Changes in the time driver interface tim_drv.h to support compilation.
- Test program gkbd.sd7 for tests of the keyboard with x11/gdi - Windows.

20060111:
- The beginning of Windows support
  (Textmode programs work, Graphic programs work to some degree)
  The Windows port uses MinGW and the makefile "makefile.win".
- The definition of
  $ system "main" main;
  has been moved to the seed7_05.s7i library.
  Therefore it is not necessary to specify 'system "main"' in every program.

20051203:
- Function to get the unsorted keys of a hash
  (for sorted keys use the sort array function: sort(keys(aHash)) )
- Function to get the unsorted values of a hash
  (for sorted values use the sort array function: sort(values(aHash)) )
- flip function for hashes to flip keys and values
  (the result has the type: hash [baseType] array keyType )
- for loop to loop over the unsorted values of a hash
- for loop to loop over the unsorted keys of a hash
- for loop to loop over the unsorted values and keys of a hash

20051124:
- Function to get the keys of a hash
- Sort function for arrays

20051112:
- Now the Seed7 manual (in the package) uses color.
- Implement seek for UTF-8 files
- Fix and improve the gets funktion for UTF-8 files
- The Seed7 project page contains also screenshots, a manual
  and an FAQ file. See http://sourceforge.net/projects/seed7
- Rename 'NL' system variable to 'writeln' and change the
  corresponding logic

20051104:
- Now Seed7 supports reading and writing UTF-8 files
- The Seed7 project page contains also screenshots, a manual
  and an FAQ file. See http://sourceforge.net/projects/seed7
- A new pos function to search a string from a given position has
  been added.

20051025:
- Initial release.
