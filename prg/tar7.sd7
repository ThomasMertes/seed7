
(********************************************************************)
(*                                                                  *)
(*  tar7.sd7      Tar archiving utility                             *)
(*  Copyright (C) 1994, 2004, 2005, 2010  Thomas Mertes             *)
(*                                                                  *)
(*  This program is free software; you can redistribute it and/or   *)
(*  modify it under the terms of the GNU General Public License as  *)
(*  published by the Free Software Foundation; either version 2 of  *)
(*  the License, or (at your option) any later version.             *)
(*                                                                  *)
(*  This program is distributed in the hope that it will be useful, *)
(*  but WITHOUT ANY WARRANTY; without even the implied warranty of  *)
(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   *)
(*  GNU General Public License for more details.                    *)
(*                                                                  *)
(*  You should have received a copy of the GNU General Public       *)
(*  License along with this program; if not, write to the           *)
(*  Free Software Foundation, Inc., 51 Franklin Street,             *)
(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)
(*                                                                  *)
(********************************************************************)


$ include "seed7_05.s7i";
  include "time.s7i";
  include "getf.s7i";
  include "gzip.s7i";
  include "strifile.s7i";


const string: TMAGIC is "ustar";

const char: REGTYPE      is '0';   # Regular file (preferred code)
const char: AREGTYPE     is '\0\'; # Regular file (alternate code)
const char: LNKTYPE      is '1';   # Hard link.
const char: SYMTYPE      is '2';   # Symbolic link
const char: CHRTYPE      is '3';   # Character special
const char: BLKTYPE      is '4';   # Block special
const char: DIRTYPE      is '5';   # Directory
const char: FIFOTYPE     is '6';   # Named pipe
const char: CONTTYPE     is '7';   # Contiguous file
const char: LONGNAMETYPE is 'L';   # Long (untruncated) filename of the next file

const type: header is new struct
    var string: name is "";
    var fileMode: mode is fileMode.value;
    var integer: uid is 0;
    var integer: gid is 0;
    var integer: size is 0;
    var integer: mtime is 0;
    var integer: chksum is 0;
    var char: typeflag is REGTYPE;
    var string: linkname is "";
    var string: magic is "";
    var string: version is "";
    var string: uname is "";
    var string: gname is "";
    var integer: devmajor is 0;
    var integer: devminor is 0;
    var string: prefix is "";
  end struct;


const proc: check (ref file: out_file, ref header: head) is func
  local
    var string: stri is "";
  begin
    write("name: ");
    writeln(head.name);
    write("mode: ");
    writeln(head.mode);
    write("uid: ");
    writeln(head.uid);
    write("gid: ");
    writeln(head.gid);
    write("size: ");
    writeln(head.size);
    write("mtime: ");
    writeln(head.mtime);
    write("chksum: ");
    writeln(head.chksum);
    write("typeflag: ");
    writeln(literal(head.typeflag));
    write("linkname: ");
    writeln(head.linkname);
    write("magic: ");
    writeln(head.magic);
    write("version: ");
    writeln(literal(head.version));
    write("uname: ");
    writeln(head.uname);
    write("gname: ");
    writeln(head.gname);
    write("devmajor: ");
    writeln(head.devmajor);
    write("devminor: ");
    writeln(head.devminor);
    write("prefix: ");
    writeln(head.prefix);
  end func;


const func string: gets0 (inout file: in_file, in integer: leng) is func
  result
    var string: stri is "";
  local
    var integer: zeroBytePos is 0;
  begin
    stri := gets(in_file, leng);
    zeroBytePos := pos(stri, "\0\");
    if zeroBytePos <> 0 then
      stri := stri[ .. pred(zeroBytePos)];
    end if;
  end func;


const func string: gets0spc (inout file: in_file, in integer: leng) is func
  result
    var string: stri is "";
  local
    var integer: zeroBytePos is 0;
    var integer: spacePos is 0;
  begin
    stri := gets(in_file, leng);
    zeroBytePos := pos(stri, "\0\");
    if zeroBytePos <> 0 then
      stri := stri[ .. pred(zeroBytePos)];
    end if;
    spacePos := pos(stri, " ");
    if spacePos <> 0 then
      stri := stri[ .. pred(spacePos)];
    end if;
  end func;


const func integer: getoct (inout file: in_file, in integer: leng) is func
  result
    var integer: result is 0;
  local
    var string: stri is "";
  begin
    stri := gets(in_file, leng);
    while stri[1 .. 1] = " " do
      stri := stri[2 .. ];
    end while;
    if stri <> "" and stri[1] >= '0' and stri[1] <= '9' then
      result := ord(stri[1]) - ord('0');
      stri := stri[2 .. ];
      while stri <> "" and stri[1] >= '0' and stri[1] <= '9' do
        result := 8 * result + ord(stri[1]) - ord('0');
        stri := stri[2 .. ];
      end while;
    end if;
  end func;


const proc: puts0 (inout string: out_stri, in string: stri, in integer: leng) is func
  begin
    out_stri &:= stri[ .. leng];
    if length(stri) < leng then
      out_stri &:= "\0\" mult leng - length(stri);
    end if;
  end func;


const proc: putspc (inout string: out_stri, in string: stri, in integer: leng) is func
  begin
    out_stri &:= stri[ .. leng];
    if length(stri) < leng then
      out_stri &:= " " mult leng - length(stri);
    end if;
  end func;


const proc: putoct (inout string: out_stri, in var integer: number, in integer: leng) is func
  local
    var string: stri is "";
  begin
    while number <> 0 do
      stri := str(number rem 8) & stri;
      number := number div 8;
    end while;
    out_stri &:= "0" mult pred(leng - length(stri)) <& stri <& "\0\";
  end func;


const func integer: chksum (in string: stri) is func
  result
    var integer: result is 0;
  local
    var char: ch is ' ';
  begin
    for ch range stri do
      result +:= ord(ch);
    end for;
    result := result rem 2 ** 16;
  end func;


const proc: readHeadBlock (inout file: in_file, inout header: head) is func
  local
    var string: stri is "";
  begin
    head := header.value;
    head.name :=        gets0(in_file,  100);
    head.mode := fileMode conv getoct(in_file,    8);
    head.uid :=        getoct(in_file,    8);
    head.gid :=        getoct(in_file,    8);
    head.size :=       getoct(in_file,   12);
    head.mtime :=      getoct(in_file,   12);
    head.chksum :=     getoct(in_file,    8);
    head.typeflag :=     getc(in_file);
    head.linkname :=    gets0(in_file,  100);
    head.magic :=    gets0spc(in_file,    6);
    head.version :=      gets(in_file,    2);
    head.uname :=       gets0(in_file,   32);
    head.gname :=       gets0(in_file,   32);
    head.devmajor :=   getoct(in_file,    8);
    head.devminor :=   getoct(in_file,    8);
    head.prefix :=      gets0(in_file,  155);
    stri :=              gets(in_file,   12);
  end func;


const proc: readHead (inout file: in_file, inout header: head) is func
  local
    var string: fileName is "";
  begin
    readHeadBlock(in_file, head);
    # check(STD_OUT, head);
    if head.name <> "" and head.magic = TMAGIC and
        head.typeflag = LONGNAMETYPE and head.size <> 0 then
      fileName := gets0(in_file, head.size);
      seek(in_file, tell(in_file) - head.size + succ(pred(head.size) div 512) * 512);
      readHeadBlock(in_file, head);
      # check(STD_OUT, head);
      head.name := fileName;
    end if;
  end func;


const proc: writeHeadBlock (inout file: out_file, ref header: head) is func
  local
    var string: out_stri is "";
    var string: chksum is "";
  begin
    puts0  (out_stri, head.name,      100);
    putoct (out_stri, integer conv (head.mode), 8);
    putoct (out_stri, head.uid,         8);
    putoct (out_stri, head.gid,         8);
    putoct (out_stri, head.size,       12);
    putoct (out_stri, head.mtime,      12);
    putspc (out_stri, "",               8);
    out_stri &:= str(head.typeflag); (* 1*)
    puts0  (out_stri, head.linkname,  100);
    puts0  (out_stri, head.magic,       6);
    putspc (out_stri, head.version,     2);
    puts0  (out_stri, head.uname,      32);
    puts0  (out_stri, head.gname,      32);
    putoct (out_stri, head.devmajor,    8);
    putoct (out_stri, head.devminor,    8);
    puts0  (out_stri, head.prefix,    155);
    puts0  (out_stri, "",              12);
    putoct (chksum,   chksum(out_stri), 8);
    out_stri := out_stri[ .. 148] & chksum & out_stri[157 .. ];
    write(out_file, out_stri);
  end func;


const proc: writeHead (inout file: out_file, ref header: head) is func
  local
    var header: longNameHead is header.value;
  begin
    if length(head.name) > 100 then
      longNameHead.name     := "././@LongLink";
      longNameHead.mode     := fileMode.value;
      longNameHead.uid      := 0;
      longNameHead.gid      := 0;
      longNameHead.size     := length(head.name);
      longNameHead.mtime    := 0;
      longNameHead.typeflag := LONGNAMETYPE;
      longNameHead.linkname := "";
      longNameHead.magic    := TMAGIC;
      longNameHead.version  := "  ";
      longNameHead.uname    := "root";
      longNameHead.gname    := "root";
      longNameHead.devmajor := 0;
      longNameHead.devminor := 0;
      longNameHead.prefix   := "";
      writeHeadBlock(out_file, longNameHead);
      write(out_file, head.name);
      write(out_file, "\0\" mult succ(pred(longNameHead.size) div 512) * 512 - longNameHead.size);
    end if;
    writeHeadBlock(out_file, head);
  end func;


const proc: status (in string: basePath, in string: name,
    in string: fileTypeMarker, inout header: head) is func
  begin
    head.name     := name & fileTypeMarker;
    head.mode     := fileMode(basePath & name);
    head.uid      := 100;
    head.gid      := 100;
    head.size     := fileSize(basePath & name);
    head.mtime    := timestamp1970(getMTime(basePath & name));
    head.chksum   := 0;
    head.typeflag := REGTYPE;
    head.linkname := "";
    head.magic    := TMAGIC;
    head.version  := "  ";
    head.uname    := "";
    head.gname    := "";
    head.devmajor := 0;
    head.devminor := 0;
    head.prefix   := "";
  end func;


const func file: openZipFile (in string: fileName) is func
  result
    var file: result is STD_NULL;
  local
    var string: stri is "";
  begin
    stri := getf(fileName);
    if stri <> "" then
      stri := gunzip(stri);
      if stri <> "" then
        result := openStrifile(stri);
      end if;
    end if;
  end func;


const proc: tar_tell (inout file: in_file, in boolean: do_view,
    in array string: arg_list) is func
  local
    var header: head is header.value;
    var time: modTime is time.value;
  begin
    readHead(in_file, head);
    while head.name <> "" and head.magic = TMAGIC do
      if do_view then
        if head.typeflag = DIRTYPE then
          write("d");
        else
          write("-");
        end if;
        write(head.mode);
        write(" ");
        if head.uname <> "" then
          write(head.uname);
        else
          write(head.uid);
        end if;
        write("/");
        if head.gname <> "" then
          write(head.gname);
        else
          write(head.gid);
        end if;
        write(head.size lpad 14);
        write(" ");
        modTime := timestamp1970ToTime(head.mtime);
        write(strDate(modTime));
        write(" ");
        write(str_hh_mm(modTime, ":"));
        write(" ");
        # write(strTimeZone(modTime) rpad 12);
      end if;
      writeln(head.name);
      if head.size <> 0 then
        seek(in_file, tell(in_file) + succ(pred(head.size) div 512) * 512);
      end if;
      readHead(in_file, head);
    end while;
  end func;


const proc: tar_tell (in string: in_file_name, in boolean: do_view,
    in boolean: do_unzip, in array string: arg_list) is func
  local
    var file: in_file is STD_NULL;
  begin
    if do_unzip then
      in_file := openZipFile(in_file_name);
    else
      in_file := open(in_file_name, "r");
    end if;
    if in_file <> STD_NULL then
      tar_tell(in_file, do_view, arg_list);
    else
      write("tar7: Cannot open \"");
      write(in_file_name);
      writeln("\".");
    end if;
  end func;


const proc: tar_xtract (inout file: in_file, in boolean: do_view,
    in array string: arg_list) is func
  local
    var string: stri is "";
    var header: head is header.value;
    var time: modTime is time.value;
  begin
    readHead(in_file, head);
    while head.name <> "" and head.magic = TMAGIC do
      if do_view then
        write("x ");
        writeln(head.name);
      end if;
      if endsWith(head.name, "/") then
        head.name := head.name[.. pred(length(head.name))];
      end if;
      if head.typeflag = DIRTYPE then
        mkdir(head.name);
        modTime := timestamp1970ToTime(head.mtime);
        # writeln(modTime);
        setMTime(head.name, modTime);
        # writeln(getCTime(head.name));
        # writeln(getATime(head.name));
        # writeln(getMTime(head.name));
      elsif head.typeflag = REGTYPE or head.typeflag = AREGTYPE then
        if head.size <> 0 then
          stri := gets(in_file, succ(pred(head.size) div 512) * 512);
          putf(head.name, stri[ .. head.size]);
          modTime := timestamp1970ToTime(head.mtime);
          setMTime(head.name, modTime);
        end if;
      end if;
      readHead(in_file, head);
    end while;
  end func;


const proc: tar_xtract (in string: in_file_name, in boolean: do_view,
    in boolean: do_unzip, in array string: arg_list) is func
  local
    var file: in_file is STD_NULL;
  begin
    if do_unzip then
      in_file := openZipFile(in_file_name);
    else
      in_file := open(in_file_name, "r");
    end if;
    if in_file <> STD_NULL then
      tar_xtract(in_file, do_view, arg_list);
    else
      write("tar7: Cannot open \"");
      write(in_file_name);
      writeln("\".");
    end if;
  end func;


const proc: tar_create (inout file: out_file, in boolean: do_view,
    in string: basePath, in string: path, in array string: arg_list) is func
  local
    var string: name is "";
    var array string: dir_content is 0 times "";
    var string: stri is "";
    var header: head is header.value;
  begin
    for name range arg_list do
      name := path & name;
      if do_view then
        write("c ");
        writeln(name);
      end if;
      if fileType(basePath & name) = FILE_DIR then
        dir_content := read_dir(basePath & name);
        status(basePath, name, "/", head);
        head.typeflag := DIRTYPE;
        head.size :=     0;
        writeHead(out_file, head);
        tar_create(out_file, do_view, basePath, name & "/", dir_content);
      else
        stri := getf(name);
        status(basePath, name, "", head);
        writeHead(out_file, head);
        write(out_file, stri);
        if (succ(pred(head.size) div 512) * 512) - length(stri) >= 0 then
          write(out_file, "\0\" mult (succ(pred(head.size) div 512) * 512) - length(stri));
        end if;
      end if;
    end for;
  end func;


const proc: tar_create (in string: out_file_name, in boolean: do_view,
    in array string: arg_list) is func
  local
    var file: out_file is STD_NULL;
    var string: name is "";
    var integer: lastSlashPos is 0;
  begin
    out_file := open(out_file_name, "w");
    if out_file <> STD_NULL then
      for name range arg_list do
        lastSlashPos := rpos(name, "/");
        if lastSlashPos = 0 then
          tar_create(out_file, do_view, "", "", [] name);
        else
          tar_create(out_file, do_view, name[ .. lastSlashPos],
              "", [] (name[succ(lastSlashPos) ..]));
        end if;
      end for;
    end if;
  end func;


const proc: main is func
  local
    var string: option is "";
    var char: command is ' ';
    var string: file_name is "";
    var boolean: do_view is FALSE;
    var boolean: do_zip_unzip is FALSE;
    var boolean: file_arg is FALSE;
    var array string: arg_list is 0 times "";
    var integer: number is 0;
    var integer: mtime is 0;
  begin
    if length(argv(PROGRAM)) >= 1 then
      option := argv(PROGRAM)[1];
      if option[1] = '-' then
        option := option [2 .. ];
      end if;
      command := option[1];
      if command in {'t', 'x', 'c'} then
        option := option [2 .. ];
        while option <> "" do
          if option[1] = 'v' then
            do_view := TRUE;
          end if;
          if option[1] = 'z' then
            do_zip_unzip := TRUE;
          end if;
          if option[1] = 'f' then
            file_arg := TRUE;
          end if;
          option := option [2 .. ];
        end while;
        if file_arg then
          if length(argv(PROGRAM)) >= 2 then
            file_name := argv(PROGRAM)[2];
            arg_list := argv(PROGRAM)[3 .. ];
          else
            writeln("tar7: The option 'f' needs a file name.");
            command := ' ';
          end if;
        else
          file_name := "/dev/flp";
          arg_list := argv(PROGRAM)[2 .. ];
        end if;
        case command of
          when {'t'}:
            tar_tell(file_name, do_view, do_zip_unzip, arg_list);
          when {'x'}:
            tar_xtract(file_name, do_view, do_zip_unzip, arg_list);
          when {'c'}:
            tar_create(file_name, do_view, arg_list);
        end case;
      else
        write("tar7: Illegal option '");
        write(command);
        writeln("'. Legal options are 't', 'x' or 'c'.");
      end if;
    else
      writeln("Tar7 Version 1.0 - Tar archiving utility");
      writeln("Copyright (C) 1994, 2004, 2005, 2010 Thomas Mertes");
      writeln("This is free software; see the source for copying conditions.  There is NO");
      writeln("warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.");
      writeln("Comanche is written in the Seed7 programming language");
      writeln("Homepage: http://seed7.sourceforge.net");
      writeln;
      writeln("tar7: One of the options 't', 'x' or 'c' must be specified.");
    end if;
  end func;
