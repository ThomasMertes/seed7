
(********************************************************************)
(*                                                                  *)
(*  pac.sd7       Pacman game                                       *)
(*  Copyright (C) 1993, 1994, 2004, 2008, 2013, 2022  Thomas Mertes *)
(*                                                                  *)
(*  This program is free software; you can redistribute it and/or   *)
(*  modify it under the terms of the GNU General Public License as  *)
(*  published by the Free Software Foundation; either version 2 of  *)
(*  the License, or (at your option) any later version.             *)
(*                                                                  *)
(*  This program is distributed in the hope that it will be useful, *)
(*  but WITHOUT ANY WARRANTY; without even the implied warranty of  *)
(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   *)
(*  GNU General Public License for more details.                    *)
(*                                                                  *)
(*  You should have received a copy of the GNU General Public       *)
(*  License along with this program; if not, write to the           *)
(*  Free Software Foundation, Inc., 51 Franklin Street,             *)
(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)
(*                                                                  *)
(********************************************************************)


$ include "seed7_05.s7i";
  include "console.s7i";
  include "window.s7i";
  include "keybd.s7i";
  include "float.s7i";
  include "time.s7i";
  include "duration.s7i";


var text: scr is STD_NULL;
var text: labyrinth is STD_NULL;
var text: infoSheet is STD_NULL;

const type: placeType is new enum
    FREE_PLACE, DOT_PLACE, WALL_PLACE, POWER_PLACE
  end enum;

const func string: str (in placeType: aPlace) is
  return [] (" ", ".", "#", "*")[succ(ord(aPlace))];

enable_output(placeType);

const type: directType is new enum
    NOWHERE, RIGHTWARD, LEFTWARD, UPWARD, DOWNWARD
  end enum;

const type: pacmanType is new object struct
    var integer: line is 0;
    var integer: column is 0;
    var integer: lineMove is 0;
    var integer: columnMove is 0;
  end struct;

const string: str (in pacmanType: pacman) is "P";

enable_output(pacmanType);

const type: ghostType is new object struct
    var integer: ghostNumber is 0;
    var integer: line is 0;
    var integer: column is 0;
    var integer: lineMove is 0;
    var integer: columnMove is 0;
    var boolean: atHome is TRUE;
  end struct;

const string: str (in ghostType: ghost) is "G";

enable_output(ghostType);

var array ghostType: ghostList is 4 times ghostType.value;

var char: nextCommand is KEY_NONE;

var boolean: quit is FALSE;
var boolean: playing is TRUE;
var integer: pointsConsumed is 0;
var integer: score is 0;
var integer: highScore is 0;
var array array placeType: labyrinthMap is 23 times 40 times FREE_PLACE;
var array array placeType: map is 0 times 0 times FREE_PLACE;
var integer: numberOfLifes is 0;
var integer: ghostsFlee is 0;
var integer: numberOfPoints is 351;
const array string: field is [](
    "#######################################",
    "#..................#..................#",
    "#*#####.##########.#.##########.#####*#",
    "#.#####.##########.#.##########.#####.#",
    "#.....................................#",
    "#.#####.##########.#.##########.#####.#",
    "#.#   #............#............#   #.#",
    "#.#####.###.###############.###.#####.#",
    "#.......# #.................# #.......#",
    "#######.###.###############.###.#######",
    " ...........#             #........... ",
    "#######.###.###############.###.#######",
    "#.......# #.................# #.......#",
    "#.#####.# ########.#.######## #.#####.#",
    "#.#   #.# #........#........# #.#   #.#",
    "#.#####.###.###############.###.#####.#",
    "#.....#.........................#.....#",
    "#####.#.##########.#.##########.#.#####",
    "#.......# #........#........# #.......#",
    "#*#########.###############.#########*#",
    "#.....................................#",
    "#######################################");


const proc: setColor (in integer: foreground, in integer: background) is noop;


const proc: sound (in integer: frequency, in float: duration) is noop;


const proc: showLifes (in pacmanType: pacman) is func

  local
    var integer: life is 0;

  begin
    setColor(0, 0);
    setPos(infoSheet, 3, 1);
    write(infoSheet, "          ");
    setColor(14, 0);
    setPos(infoSheet, 3, 1);
    for life range 1 to pred(numberOfLifes) do
      write(infoSheet, pacman);
    end for;
  end func; # showLifes


const proc: left (inout pacmanType: pacman) is func

  begin
    if map[pacman.line][pred(pacman.column)] <> WALL_PLACE then
      pacman.lineMove := 0;
      pacman.columnMove := -1;
      nextCommand := KEY_NONE;
    else
      nextCommand := KEY_LEFT;
    end if;
  end func; # left


const proc: right (inout pacmanType: pacman) is func

  begin
    if map[pacman.line][succ(pacman.column)] <> WALL_PLACE then
      pacman.lineMove := 0;
      pacman.columnMove := 1;
      nextCommand := KEY_NONE;
    else
      nextCommand := KEY_RIGHT;
    end if;
  end func; # right


const proc: up (inout pacmanType: pacman) is func

  begin
    if map[pred(pacman.line)][pacman.column] <> WALL_PLACE then
      pacman.lineMove := -1;
      pacman.columnMove := 0;
      nextCommand := KEY_NONE;
    else
      nextCommand := KEY_UP;
    end if;
  end func; # up


const proc: down (inout pacmanType: pacman) is func

  begin
    if map[succ(pacman.line)][pacman.column] <> WALL_PLACE then
      pacman.lineMove := 1;
      pacman.columnMove := 0;
      nextCommand := KEY_NONE;
    else
      nextCommand := KEY_DOWN;
    end if;
  end func; # down


const proc: sendHome (inout ghostType: ghost) is func
  begin
    ghost.line := 11;
    ghost.column := 16 + rand(1, 8);
    ghost.lineMove := 0;
    if rand(FALSE, TRUE) then
      ghost.columnMove := 1;
    else
      ghost.columnMove := -1;
    end if;
    ghost.atHome := TRUE;
  end func; # sendHome


const proc: readCommand (inout pacmanType: pacman) is func

  local
    var char: inp is ' ';

  begin
    inp := busy_getc(KEYBOARD);
    if inp = KEY_NONE then
      inp := nextCommand;
      nextCommand := KEY_NONE;
    end if;
    if inp <> KEY_NONE then
      repeat
        case inp of
          when {KEY_LEFT,  '4'}: left(pacman);
          when {KEY_RIGHT, '6'}: right(pacman);
          when {KEY_UP,    '8'}: up(pacman);
          when {KEY_DOWN,  '2'}: down(pacman);
          when {'q', 'Q'}:
            playing := FALSE;
            quit := TRUE;
        end case;
        inp := busy_getc(KEYBOARD);
      until inp = KEY_NONE;
    end if;
  end func; # readCommand


const proc: writeMapPosition (in integer: line, in integer: column) is func

  begin
    setPos(labyrinth, line, column);
    write(labyrinth, map[line][column]);
  end func; # writeMapPosition


const proc: pacmanCought (inout pacmanType: pacman) is func

  local
    var integer: frequency is 0;
    var integer: index is 0;

  begin
    for frequency range 1000 downto 200 do
      sound(frequency, 0.001);
    end for;
    decr(numberOfLifes);
    showLifes(pacman);
    if numberOfLifes = 0 then
      playing := FALSE;
    end if;
    pacman.line := 17;
    pacman.column := 20;
    pacman.lineMove := 0;
    pacman.columnMove := 0;
    for key index range ghostList do
      writeMapPosition(ghostList[index].line, ghostList[index].column);
    end for;
    for key index range ghostList do
      sendHome(ghostList[index]);
    end for;
  end func; # pacmanCought


const proc: ghostCought (inout ghostType: ghost) is func

  local
    var integer: frequency is 0;

  begin
    frequency := 200;
    while frequency <= 900 do
       sound(frequency, 0.001);
       sound(succ(frequency), 0.001);
       frequency := frequency + 3;
    end while;
    sendHome(ghost);
  end func; # ghostCought


const proc: someoneCought (inout pacmanType: pacman, inout ghostType: ghost) is func

  begin
    if ghostsFlee > 0 then
      ghostCought(ghost);
    else
      pacmanCought(pacman);
    end if;
  end func; # someoneCought


const proc: eat (in pacmanType: pacman, in placeType: aPlace) is DYNAMIC;


const proc: eat (in pacmanType: pacman, FREE_PLACE) is noop;


const proc: eat (in pacmanType: pacman, DOT_PLACE) is func

  begin
    map[pacman.line][pacman.column] := FREE_PLACE;
    incr(pointsConsumed);
    incr(score);
    setColor(15, 0);
    setPos(infoSheet, 2, 8);
    write(infoSheet, score);
  end func; # eat (DOT_PLACE)


const proc: eat (in pacmanType: pacman, POWER_PLACE) is func
  local
    var integer: frequency is 0;

  begin
    map[pacman.line][pacman.column] := FREE_PLACE;
    incr(pointsConsumed);
    incr(score);
    setColor(15, 0);
    setPos(infoSheet, 2, 8);
    write(infoSheet, score);
    frequency := 300;
    while frequency <= 700 do
      sound(frequency, 0.001);
      frequency := frequency + 2;
    end while;
    ghostsFlee := 80;
  end func; # eat (POWER_PLACE)


const proc: checkGhost (inout pacmanType: pacman, inout ghostType: ghost) is func
  begin
    if pacman.line = ghost.line and
        pacman.column = ghost.column then
      someoneCought(pacman, ghost);
    end if;
  end func; # checkGhost


const proc: checkAllGhosts (inout pacmanType: pacman) is func
  local
    var integer: index is 0;

  begin
    for key index range ghostList do
      checkGhost(pacman, ghostList[index]);
    end for;
  end func; # checkAllGhosts


const proc: movePacman (inout pacmanType: pacman) is func

  begin
    if map[pacman.line + pacman.lineMove]
        [pacman.column + pacman.columnMove] = WALL_PLACE then
      pacman.columnMove := 0;
      pacman.lineMove := 0;
    end if;
    setColor(14, 0);
    setPos(labyrinth, pacman.line, pacman.column);
    write(labyrinth, str(FREE_PLACE));
    pacman.line := pacman.line + pacman.lineMove;
    pacman.column := pacman.column + pacman.columnMove;
    if pacman.column = 1 then
      (* left tunnel *)
      pacman.column := 38;
    elsif pacman.column = 39 then
      (* right tunnel *)
      pacman.column := 2;
    end if;
    eat(pacman, map[pacman.line][pacman.column]);
    if ghostsFlee > 0 then
      decr(ghostsFlee);
    end if;
    setPos(labyrinth, pacman.line, pacman.column);
    write(labyrinth, pacman);
    checkAllGhosts(pacman);
  end func; # movePacman


const func directType: selectDirection (
    in boolean: rightwardPossible,
    in boolean: leftwardPossible,
    in boolean: upwardPossible,
    in boolean: downwardPossible) is func
  result
    var directType: direction is NOWHERE;
  local
    var array directType: possible is 5 times NOWHERE;
    var integer: numDirections is 0;

  begin
    numDirections := 0;
    if rightwardPossible then
      incr(numDirections);
      possible[numDirections] := RIGHTWARD;
    end if;
    if leftwardPossible then
      incr(numDirections);
      possible[numDirections] := LEFTWARD;
    end if;
    if upwardPossible then
      incr(numDirections);
      possible[numDirections] := UPWARD;
    end if;
    if downwardPossible then
      incr(numDirections);
      possible[numDirections] := DOWNWARD
    end if;
    if numDirections <> 0 then
      direction := possible[rand(1, numDirections)];
    end if;
  end func; # selectDirection


const proc: turn (inout ghostType: ghost, in directType: direction) is DYNAMIC;


const proc: turn (inout ghostType: ghost, RIGHTWARD) is func

  begin
    ghost.columnMove := 1;
    ghost.lineMove := 0;
  end func; # turn (ghostType, RIGHTWARD)


const proc: turn (inout ghostType: ghost, LEFTWARD) is func

  begin
    ghost.columnMove := -1;
    ghost.lineMove := 0;
  end func; # turn (ghostType, LEFTWARD)


const proc: turn (inout ghostType: ghost, UPWARD) is func

  begin
    ghost.columnMove := 0;
    ghost.lineMove := -1;
  end func; # turn (ghostType, UPWARD)


const proc: turn (inout ghostType: ghost, DOWNWARD) is func

  begin
    ghost.columnMove := 0;
    ghost.lineMove := 1;
  end func; # turn (ghostType, DOWNWARD)


const proc: move (inout pacmanType: pacman, inout ghostType: ghost) is func
  local
    var boolean: rightwardPossible is FALSE;
    var boolean: leftwardPossible is FALSE;
    var boolean: upwardPossible is FALSE;
    var boolean: downwardPossible is FALSE;
    var directType: direction is NOWHERE;

  begin
    if ghost.atHome and ghostsFlee = 0 then
      ghost.lineMove := 0;
      if ghost.ghostNumber = 1 or ghost.ghostNumber = 2 then
        (* Leave home to the left *)
        ghost.columnMove := -1;
      else
        (* Leave home to the right *)
        ghost.columnMove := 1;
      end if;
      if ghost.column <= 13 or ghost.column >= 27 then
        ghost.atHome := FALSE;
      end if;
    else
      if ghost.lineMove = 0 then
        downwardPossible :=
            map[succ(ghost.line)][ghost.column] <> WALL_PLACE;
        upwardPossible :=
            map[pred(ghost.line)][ghost.column] <> WALL_PLACE;
      elsif ghost.lineMove = 1 then
        if map[succ(ghost.line)][ghost.column] <> WALL_PLACE then
          downwardPossible := TRUE;
        else
          upwardPossible :=
              map[pred(ghost.line)][ghost.column] <> WALL_PLACE;
        end if;
      elsif ghost.lineMove = -1 then
        if map[pred(ghost.line)][ghost.column] <> WALL_PLACE then
          upwardPossible := TRUE;
        else
          downwardPossible :=
              map[succ(ghost.line)][ghost.column] <> WALL_PLACE;
        end if;
      end if;
      if ghost.columnMove = 0 then
        rightwardPossible :=
            map[ghost.line][succ(ghost.column)] <> WALL_PLACE;
        leftwardPossible :=
            map[ghost.line][pred(ghost.column)] <> WALL_PLACE;
      elsif ghost.columnMove = 1 then
        if map[ghost.line][succ(ghost.column)] <> WALL_PLACE then
          rightwardPossible := TRUE;
        else
          leftwardPossible :=
              map[ghost.line][pred(ghost.column)] <> WALL_PLACE
        end if;
      elsif ghost.columnMove = -1 then
        if map[ghost.line][pred(ghost.column)] <> WALL_PLACE then
          leftwardPossible := TRUE;
        else
          rightwardPossible :=
              map[ghost.line][succ(ghost.column)] <> WALL_PLACE
        end if;
      end if;
      if ghostsFlee = 0 then
        if rand(1, 100) <= 20 then
          direction := selectDirection(rightwardPossible,
              leftwardPossible, upwardPossible, downwardPossible);
        else
          direction := selectDirection(
              rightwardPossible and ghost.column < pacman.column,
              leftwardPossible  and ghost.column > pacman.column,
              upwardPossible    and ghost.line > pacman.line,
              downwardPossible  and ghost.line < pacman.line);
          if direction = NOWHERE then
            direction := selectDirection(rightwardPossible,
                leftwardPossible, upwardPossible, downwardPossible);
          end if;
        end if;
      else
        direction := selectDirection(
            rightwardPossible and ghost.column > pacman.column,
            leftwardPossible  and ghost.column < pacman.column,
            upwardPossible    and ghost.line < pacman.line,
            downwardPossible  and ghost.line > pacman.line);
        if direction = NOWHERE then
          direction := selectDirection(rightwardPossible,
              leftwardPossible, upwardPossible, downwardPossible);
        end if;
      end if;
      turn(ghost, direction);
    end if;
    writeMapPosition(ghost.line, ghost.column);
    ghost.line +:= ghost.lineMove;
    ghost.column +:= ghost.columnMove;
    if ghost.column = 1 then
      (* left tunnel *)
      ghost.column := 38;
    elsif ghost.column = 39 then
      (* right tunnel *)
      ghost.column := 2;
    end if;
    if ghostsFlee > 0 then
      if ghostsFlee < 20 then
        if odd(ghostsFlee) then
          setColor(9, 0);
        else
          setColor(15, 0);
        end if;
      else
        setColor(9, 0);
      end if;
    else
      setColor(13, 0);
    end if;
    setPos(labyrinth, ghost.line, ghost.column);
    write(labyrinth, ghost);
    if ghost.line = pacman.line and
        ghost.column = pacman.column then
      someoneCought(pacman, ghost);
    end if;
  end func; # move (ghostType)


const proc: moveGhosts (inout pacmanType: pacman) is func

  local
    var integer: index is 0;

  begin
    for key index range ghostList do
      move(pacman, ghostList[index]);
    end for;
  end func; # moveGhosts


const proc: readMap is func

  local
    var integer: line is 0;
    var integer: column is 0;
    var string: fieldLine is "";

  begin
    numberOfPoints := 0;
    for line range 1 to 22 do
      fieldLine := field[line];
      for column range 1 to 39 do
        case fieldLine[column] of
          when {' '}: labyrinthMap[line][column] := FREE_PLACE;
          when {'.'}: labyrinthMap[line][column] := DOT_PLACE;
                      incr(numberOfPoints);
          when {'#'}: labyrinthMap[line][column] := WALL_PLACE;
          when {'*'}: labyrinthMap[line][column] := POWER_PLACE;
                      incr(numberOfPoints);
        end case;
      end for;
    end for;
  end func; # readMap


const proc: showMap is func

  local
    var integer: line is 0;
    var integer: column is 0;

  begin
    setColor(1, 1);
    for line range 1 to 22 do
      setPos(labyrinth, line, 1);
      write(labyrinth, field[line]);
(*
      for column range 1 to 39 do
        writeMapPosition(line, column);
      end for;
*)
    end for;
  end func; # showMap


const proc: mainControl (inout pacmanType: pacman) is func

  local
    var integer: frequency is 0;
    var time: startTime is time.value;

  begin
    while playing do
      startTime := time(NOW);
      readCommand(pacman);
      movePacman(pacman);
      if pointsConsumed = numberOfPoints then
        (* Round finished *)
        playing := FALSE;
      else
        moveGhosts(pacman);
(*      frequency := 50;
        while frequency <= 200 do
          sound(frequency, 0.001);
          frequency := frequency + 2;
        end while; *)
      end if;
      await(startTime + 150000 . MICRO_SECONDS);
    end while;
  end func; # mainControl


const proc: main is func

  local
    var integer: index is 0;
    var char: command is ' ';
    var pacmanType: pacman is pacmanType.value;

  begin
    quit := FALSE;
    highScore := 0;
    scr := open(CONSOLE);
    labyrinth := openWindow(scr, 2, 2, 22, 39);
    infoSheet := openWindow(scr, 2, 44, 22, 20);
    box(labyrinth);
    box(infoSheet);
    clear(labyrinth);
    readMap();
    ghostList[1].ghostNumber := 1;
    ghostList[2].ghostNumber := 2;
    ghostList[3].ghostNumber := 3;
    ghostList[4].ghostNumber := 4;
    while not quit do
      playing := TRUE;
      map := labyrinthMap;
      pointsConsumed := 0;
      score := 0;
      pacman.line := 17;
      pacman.column := 20;
      pacman.lineMove := 0;
      pacman.columnMove := 0;
      for key index range ghostList do
        sendHome(ghostList[index]);
      end for;
      numberOfLifes := 3;
      showMap();
      showLifes(pacman);
      setColor(15, 0);
      setPos(infoSheet, 2, 1);
      write(infoSheet, "Score:     ");
      setColor(14, 0);
      setPos(labyrinth, pacman.line, pacman.column);
      write(labyrinth, pacman);
      for key index range ghostList do
        setColor(9, 0);
        setPos(labyrinth, ghostList[index].line, ghostList[index].column);
        write(labyrinth, ghostList[index]);
      end for;
      mainControl(pacman);
      if not quit then
        if score > highScore then
          highScore := score;
          setColor(15, 0);
          setPos(infoSheet, 1, 1);
          write(infoSheet, "Highscore:");
          setColor(15, 0);
          setPos(infoSheet, 1, 12);
          write(infoSheet, score);
        end if;
        setColor(15, 0);
        setPos(labyrinth, 11, 14);
        write(labyrinth, "  GAME OVER  ");
        command := getc(KEYBOARD);
        if command = 'Q' or command = 'q' then
          quit := TRUE;
        end if;
      end if;
    end while;
  end func; # main
