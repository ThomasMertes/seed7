
(********************************************************************)
(*                                                                  *)
(*  echo.s7i      Filter file which generates an echo of the input  *)
(*  Copyright (C) 1992, 1993, 1994, 2005  Thomas Mertes             *)
(*                                                                  *)
(*  This file is part of the Seed7 Runtime Library.                 *)
(*                                                                  *)
(*  The Seed7 Runtime Library is free software; you can             *)
(*  redistribute it and/or modify it under the terms of the GNU     *)
(*  Lesser General Public License as published by the Free Software *)
(*  Foundation; either version 2.1 of the License, or (at your      *)
(*  option) any later version.                                      *)
(*                                                                  *)
(*  The Seed7 Runtime Library is distributed in the hope that it    *)
(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)
(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)
(*  PURPOSE.  See the GNU Lesser General Public License for more    *)
(*  details.                                                        *)
(*                                                                  *)
(*  You should have received a copy of the GNU Lesser General       *)
(*  Public License along with this program; if not, write to the    *)
(*  Free Software Foundation, Inc., 59 Temple Place, Suite 330,     *)
(*  Boston, MA 02111-1307 USA                                       *)
(*                                                                  *)
(********************************************************************)


const type: ECHO_FILE is sub NULL_FILE struct
    var file: in_file is STD_NULL;
    var file: out_file is STD_NULL;
    var integer: in_pos is 0;
  end struct;


const func ECHO_FILE: open_echo (ref file: in_fil, ref file: out_fil) is func
  result
    var ECHO_FILE: echo_fil is ECHO_FILE.value;
  begin
    echo_fil := ECHO_FILE.value;
    echo_fil.in_file := in_fil;
    echo_fil.out_file := out_fil;
    echo_fil.in_pos := 0;
  end func;


const func char: getc (inout ECHO_FILE: echo_fil) is func
  result
    var char: ch is ' ';
  local
    var integer: number is 0;
  begin
    repeat
      flush(echo_fil.out_file);
(*    cursor_on(echo_fil.out_file); *)
      ch := getc(echo_fil.in_file);
(*    cursor_off(echo_fil.out_file); *)
      if ch >= ' ' and ch <= '~' then
        incr(echo_fil.in_pos);
        echo_fil.out_file << ch;
      elsif ch = '\n' then
        echo_fil.in_pos := 0;
        echo_fil.out_file << NL;
      elsif ch = '\b' then
        if echo_fil.in_pos > 0 then
          decr(echo_fil.in_pos);
          echo_fil.out_file << BS;
        end if;
      elsif ch = '\C' or ch = '\T' then
        echo_fil.out_file << " terminate (y/n)? ";
        flush(echo_fil.out_file);
        if lower(getc(echo_fil.in_file)) = 'y' then
          echo_fil.out_file << "yes";
          echo_fil.out_file << NL;
          echo_fil.out_file << NL;
          echo_fil.out_file << "*** PROGRAM TERMINATED BY USER";
          echo_fil.out_file << NL;
          exit(PROGRAM);
        else
          for number range 1 to 18 do
            echo_fil.out_file << BS;
          end for;
        end if;
      else
        incr(echo_fil.in_pos);
        ch := '?';
        echo_fil.out_file << ch;
      end if;
    until ch <> '\C' and ch <> '\T';
  end func;


const func string: gets (inout ECHO_FILE: echo_fil, ref integer: length) is func
  result
    var string: stri is "";
  local
    var integer: number is 0;
  begin
    stri := "";
    for number range 1 to length do
      stri &:= str(getc(echo_fil));
    end for;
  end func;

