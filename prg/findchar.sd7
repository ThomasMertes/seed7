
(********************************************************************)
(*                                                                  *)
(*  findchar.sd7  Utility to search for specific chars in files.    *)
(*  Copyright (C) 2010 - 2019, 2022, 2023  Thomas Mertes            *)
(*                                                                  *)
(*  This program is free software; you can redistribute it and/or   *)
(*  modify it under the terms of the GNU General Public License as  *)
(*  published by the Free Software Foundation; either version 2 of  *)
(*  the License, or (at your option) any later version.             *)
(*                                                                  *)
(*  This program is distributed in the hope that it will be useful, *)
(*  but WITHOUT ANY WARRANTY; without even the implied warranty of  *)
(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   *)
(*  GNU General Public License for more details.                    *)
(*                                                                  *)
(*  You should have received a copy of the GNU General Public       *)
(*  License along with this program; if not, write to the           *)
(*  Free Software Foundation, Inc., 51 Franklin Street,             *)
(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)
(*                                                                  *)
(********************************************************************)


$ include "seed7_05.s7i";
  include "osfiles.s7i";
  include "getf.s7i";
  include "console.s7i";

var bigInteger: totalCount is 0_;


const proc: doFind (in string: fileName, in string: fileContent, in string: searchedChar) is func
  local
    var integer: position is 0;
    var integer: startPos is 0;
    var integer: count is 0;
    var integer: max is 0;
    var integer: maxLine is 1;
  begin
    if searchedChar = "" then
      count := length(fileContent);
      writeln(fileName <& " " <& count <& " chars");
    else
      position := pos(fileContent, searchedChar);
      if position <> 0 then
        write(fileName <& " " <& literal(searchedChar) <& " at " <& position);
        max := pred(position);
        repeat
          incr(count);
          startPos := succ(position);
          position := pos(fileContent, searchedChar, startPos);
          if position <> 0 and position - startPos > max then
            max := position - startPos;
            maxLine := succ(count);
          end if;
        until position = 0;
        if count > 1 then
          write(" found " <& count <& " times");
        end if;
        if searchedChar = "\n" then
          write(", maximum line (" <& maxLine <& ") length: " <& max);
        end if;
        writeln;
      end if;
    end if;
    totalCount +:= bigInteger(count);
  end func;


const proc: doFindRecursive (in string: fileName, in string: extension,
    in string: searchedChar) is func
  local
    var string: dirName is "";
    var array string: dir is 0 times "";
    var string: fileNameInDir is "";
    var string: fileContent is "";
  begin
    if fileType(fileName) = FILE_DIR then
      dirName := fileName;
      dir := readDir(dirName);
      for fileNameInDir range dir do
        doFindRecursive(dirName & "/" & fileNameInDir, extension, searchedChar);
      end for;
    elsif extension = "" or endsWith(fileName, extension) then
      fileContent := getf(fileName);
      doFind(fileName, fileContent, searchedChar);
    end if;
  end func;


const proc: main is func
  local
    var array string: arg_v is 0 times "";
    var integer: argNumber is 1;
    var string: extension is "";
    var string: searchedChar is "\r";
    var string: fileName is "";
  begin
    OUT := STD_CONSOLE;
    arg_v := argv(PROGRAM);
    if length(arg_v) = 0 then
      writeln("Findchar Version 1.0 - Utility to search for specific characters in files.");
      writeln("Copyright (C) 2010 - 2019 Thomas Mertes");
      writeln("This is free software; see the source for copying conditions.  There is NO");
      writeln("warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.");
      writeln("Findchar is written in the Seed7 programming language");
      writeln("Homepage: https://seed7.net");
      writeln;
      writeln("usage: findchar [ -e extension ] [ r | t | f | n | c | s ] { file_name }");
      writeln;
      writeln("The character to search for is specified with a single letter:");
      writeln("r=Return, t=Tab, f=Formfeed, n=Newline, c=any Char, s=Space at end of line");
      writeln("The contents of directories are searched recursively.");
      writeln("The option -e restricts the search to files with the given extension.");
    else
      if arg_v[argNumber] = "-e" then
        incr(argNumber);
        if argNumber <= length(arg_v) then
          extension := arg_v[argNumber];
          incr(argNumber);
        end if;
      end if;
      if argNumber <= length(arg_v) then
        case arg_v[argNumber] of
          when {"r"}: searchedChar := "\r";
          when {"t"}: searchedChar := "\t";
          when {"f"}: searchedChar := "\f";
          when {"n"}: searchedChar := "\n";
          when {"c"}: searchedChar := "";
          when {"s"}: searchedChar := " \n";
          otherwise: searchedChar := arg_v[argNumber];
        end case;
        incr(argNumber);
      end if;
      while argNumber <= length(arg_v) do
        fileName := convDosPath(arg_v[argNumber]);
        if fileName[length(fileName)] = '/' then
          fileName := fileName[..pred(length(fileName))];
        end if;
        doFindRecursive(fileName, extension, searchedChar);
        incr(argNumber);
      end while;
    end if;
    if totalCount <> 0_ then
      writeln("totally found " <& totalCount <& " times");
    end if;
  end func;
