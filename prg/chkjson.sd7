
(********************************************************************)
(*                                                                  *)
(*  chkjson.sd7   Checks the JSON scanner and DOM functions         *)
(*  Copyright (C) 2024  Thomas Mertes                               *)
(*                                                                  *)
(*  This program is free software; you can redistribute it and/or   *)
(*  modify it under the terms of the GNU General Public License as  *)
(*  published by the Free Software Foundation; either version 2 of  *)
(*  the License, or (at your option) any later version.             *)
(*                                                                  *)
(*  This program is distributed in the hope that it will be useful, *)
(*  but WITHOUT ANY WARRANTY; without even the implied warranty of  *)
(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   *)
(*  GNU General Public License for more details.                    *)
(*                                                                  *)
(*  You should have received a copy of the GNU General Public       *)
(*  License along with this program; if not, write to the           *)
(*  Free Software Foundation, Inc., 51 Franklin Street,             *)
(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)
(*                                                                  *)
(********************************************************************)


$ include "seed7_05.s7i";
  include "strifile.s7i";
  include "scanjson.s7i";
  include "json.s7i";
  include "json_serde.s7i";
  include "rational.s7i";
  include "bigrat.s7i";
  include "complex.s7i";


const type: directionType is new enum
    STAY, UP, DOWN, LEFT, RIGHT
  end enum;

declare_json_serde(directionType);

declare_json_serde(array string);
declare_json_serde(array integer);
declare_json_serde(array float);
declare_json_serde(array boolean);

const type: stringArray2   is array array string;
const type: integerArray2  is array array integer;
const type: floatArray2    is array array float;

declare_json_serde(stringArray2);
declare_json_serde(integerArray2);
declare_json_serde(floatArray2);

const type: stringStringHash      is hash [string] string;
const type: stringCharHash        is hash [string] char;
const type: stringIntegerHash     is hash [string] integer;
const type: stringFloatHash       is hash [string] float;

declare_json_serde(stringStringHash);
declare_json_serde(stringCharHash);
declare_json_serde(stringIntegerHash);
declare_json_serde(stringFloatHash);

const type: arrayOfStringStringHash  is array stringStringHash;
const type: arrayOfStringIntegerHash is array stringIntegerHash;
const type: arrayOfStringFloatHash   is array stringFloatHash;

declare_json_serde(arrayOfStringStringHash);
declare_json_serde(arrayOfStringIntegerHash);
declare_json_serde(arrayOfStringFloatHash);

declare_json_serde(bitset);
declare_json_serde(set of string);

declare_json_serde(rational);
declare_json_serde(bigRational);
declare_json_serde(complex);

declare_json_serde(array rational);
declare_json_serde(array complex);

const type: stringIntegerStruct2 is new struct
    var string: name is "";
    var integer: number is 0;
  end struct;

const func string: mapJsonElementName (attr stringIntegerStruct2,
    in string: jsonName) is
  return jsonName = "for" ? "name" : jsonName;

const func string: mapStructElementName (attr stringIntegerStruct2,
    in string: structName) is
  return structName = "name" ? "for" : structName;

declare_json_serde(stringIntegerStruct2);


const proc: DECLARE_RAISES_RANGE_ERROR (in type: aType) is func
  begin

    const func boolean: raisesRangeError (in func aType: expression) is func
      result
        var boolean: raisesRangeError is FALSE;
      local
        var aType: exprResult is aType.value;
      begin
        block
          exprResult := expression;
        exception
          catch RANGE_ERROR:
            raisesRangeError := TRUE;
        end block;
      end func;

  end func;


DECLARE_RAISES_RANGE_ERROR(string);
DECLARE_RAISES_RANGE_ERROR(integer);
DECLARE_RAISES_RANGE_ERROR(float);
DECLARE_RAISES_RANGE_ERROR(boolean);
DECLARE_RAISES_RANGE_ERROR(directionType);
DECLARE_RAISES_RANGE_ERROR(type);


const func boolean: raisesRangeError (in proc: statement) is func
  result
    var boolean: raisesRangeError is FALSE;
  begin
    block
      statement;
    exception
      catch RANGE_ERROR:
        raisesRangeError := TRUE;
    end block;
  end func;


const proc: DECLARE_RAISES_ILLEGAL_ACTION (in type: aType) is func
  begin

    const func boolean: raisesIllegalAction (in func aType: expression) is func
      result
        var boolean: raisesIllegalAction is FALSE;
      local
        var aType: exprResult is aType.value;
      begin
        block
          exprResult := expression;
        exception
          catch ILLEGAL_ACTION:
            raisesIllegalAction := TRUE;
        end block;
      end func;

  end func;


DECLARE_RAISES_ILLEGAL_ACTION(string);
DECLARE_RAISES_ILLEGAL_ACTION(integer);
DECLARE_RAISES_ILLEGAL_ACTION(bigInteger);
DECLARE_RAISES_ILLEGAL_ACTION(float);
DECLARE_RAISES_ILLEGAL_ACTION(structElementArray);


const func file: initScan (in string: content) is func
  result
    var file: scanFile is STD_NULL;
  begin
    scanFile := openStriFile(content);
    scanFile.bufferChar := getc(scanFile);
  end func;


const func boolean: getJsonStringOkay (in string: initialStri,
    in string: expectedSymbol, in string: finalStri) is func
  result
    var boolean: okay is TRUE;
  local
    var string: stri is "";
    var string: symbol is "";
    var file: aFile is STD_NULL;
    var char: expectedBuffer is ' ';
  begin
    stri := initialStri;
    symbol := getJsonString(stri);
    if symbol <> expectedSymbol then
      writeln(" ***** getJsonString(stri) with " <&
              literal(initialStri) <& " returns "
              <& literal(symbol) <& " instead of " <&
              literal(expectedSymbol) <& ".");
      okay := FALSE;
    elsif stri <> finalStri then
      writeln(" ***** After getJsonString(stri) with " <&
              literal(initialStri) <& " stri is " <&
              literal(stri) <& " instead of " <& literal(finalStri) <&
              ".");
      okay := FALSE;
    else
      if finalStri = "" then
        expectedBuffer := EOF;
      else
        expectedBuffer := finalStri[1];
      end if;
      aFile := initScan(initialStri);
      symbol := getJsonString(aFile);
      if symbol <> expectedSymbol then
        writeln(" ***** getJsonString(file) with " <&
                literal(initialStri) <& " returns " <&
                literal(symbol) <& " instead of " <&
                literal(expectedSymbol) <& ".");
        okay := FALSE;
      elsif aFile.bufferChar <> expectedBuffer then
        writeln(" ***** After getJsonString(file) with " <&
                literal(initialStri) <& " bufferChar is " <&
                literal(aFile.bufferChar) <& " instead of " <&
                literal(expectedBuffer) <& ".");
        okay := FALSE;
      elsif expectedBuffer = EOF and not eof(aFile) then
        writeln(" ***** After getJsonString(file) with " <&
                literal(initialStri) <& " bufferChar is \
                \EOF but eof() returns FALSE.");
        okay := FALSE;
      end if;
    end if;
  end func;


const func boolean: getJsonStringRaisesRangeError (in string: initialStri) is func
  result
    var boolean: okay is TRUE;
  local
    var string: stri is "";
    var file: aFile is STD_NULL;
  begin
    stri := initialStri;
    if not raisesRangeError(getJsonString(stri)) then
      writeln(" ***** getJsonString(stri) with " <&
              literal(initialStri) <& " does not raise RANGE_ERROR.");
      okay := FALSE;
    else
      aFile := initScan(initialStri);
      if not raisesRangeError(getJsonString(aFile)) then
        writeln(" ***** getJsonString(file) with " <&
                literal(initialStri) <& " does not raise RANGE_ERROR.");
        okay := FALSE;
      end if;
    end if;
  end func;


const func boolean: checkGetJsonString1 is func
  result
    var boolean: okay is TRUE;
  begin
    if  not getJsonStringOkay("\"\"",         "\"\"",     "") or
        not getJsonStringOkay("\"x\"&ab",     "\"x\"",    "&ab") or
        not getJsonStringOkay("\"\\\\\"+",    "\"\\\"",   "+") or
        not getJsonStringOkay("\"\\\"\"/",    "\"\"\"",   "/") or
        not getJsonStringOkay("\"\\/\"*",     "\"/\"",    "*") or
        not getJsonStringOkay("\"\\b\\f\"",   "\"\b\f\"", "") or
        not getJsonStringOkay("\"\\n\\r\"",   "\"\n\r\"", "") or
        not getJsonStringOkay("\"\\t$\"-",    "\"\t$\"",  "-") or
        not getJsonStringOkay("\"\\u20ac\"",  "\"€\"",    "") or
        not getJsonStringOkay("\"\\u20ac0\"", "\"€0\"",   "") then
      writeln(" ***** getJsonString() does not work as expected. (1)");
      okay := FALSE;
    end if;

    if  not getJsonStringOkay("\"\"",        "\"\"",        "") or
        not getJsonStringOkay("\"\\\"\"",    "\"\"\"",      "") or
        not getJsonStringOkay("\"\\\\\"",    "\"\\\"",      "") or
        not getJsonStringOkay("\"\\/\"",     "\"/\"",       "") or
        not getJsonStringOkay("\"\\b\"",     "\"\b\"",      "") or
        not getJsonStringOkay("\"\\f\"",     "\"\f\"",      "") or
        not getJsonStringOkay("\"\\n\"",     "\"\n\"",      "") or
        not getJsonStringOkay("\"\\r\"",     "\"\r\"",      "") or
        not getJsonStringOkay("\"\\t\"",     "\"\t\"",      "") or
        not getJsonStringOkay("\"\\u0000\"", "\"\0;\"",     "") or
        not getJsonStringOkay("\"\\u001f\"", "\"\31;\"",    "") or
        not getJsonStringOkay("\"\\u007f\"", "\"\127;\"",   "") or
        not getJsonStringOkay("\"\\u0080\"", "\"\128;\"",   "") or
        not getJsonStringOkay("\"\\u009f\"", "\"\159;\"",   "") or
        not getJsonStringOkay("\"\\uffff\"", "\"\65535;\"", "") or
        not getJsonStringOkay("\" \"",       "\" \"",       "") or
        not getJsonStringOkay("\"!\"",       "\"!\"",       "") or
        not getJsonStringOkay("\"0\"",       "\"0\"",       "") or
        not getJsonStringOkay("\"A\"",       "\"A\"",       "") or
        not getJsonStringOkay("\"a\"",       "\"a\"",       "") or
        not getJsonStringOkay("\"~\"",       "\"~\"",       "") or
        not getJsonStringOkay("\"\160;\"",   "\"\160;\"",   "") or
        not getJsonStringOkay("\"ÿ\"",       "\"ÿ\"",       "") or
        not getJsonStringOkay("\"€\"",       "\"€\"",       "") then
      writeln(" ***** getJsonString() does not work as expected. (2)");
      okay := FALSE;
    end if;

    if  not getJsonStringOkay("\"\" ",        "\"\"",        " ") or
        not getJsonStringOkay("\"\\\"\" ",    "\"\"\"",      " ") or
        not getJsonStringOkay("\"\\\\\" ",    "\"\\\"",      " ") or
        not getJsonStringOkay("\"\\/\" ",     "\"/\"",       " ") or
        not getJsonStringOkay("\"\\b\" ",     "\"\b\"",      " ") or
        not getJsonStringOkay("\"\\f\" ",     "\"\f\"",      " ") or
        not getJsonStringOkay("\"\\n\" ",     "\"\n\"",      " ") or
        not getJsonStringOkay("\"\\r\" ",     "\"\r\"",      " ") or
        not getJsonStringOkay("\"\\t\" ",     "\"\t\"",      " ") or
        not getJsonStringOkay("\"\\u0000\" ", "\"\0;\"",     " ") or
        not getJsonStringOkay("\"\\u001f\" ", "\"\31;\"",    " ") or
        not getJsonStringOkay("\"\\u007f\" ", "\"\127;\"",   " ") or
        not getJsonStringOkay("\"\\u0080\" ", "\"\128;\"",   " ") or
        not getJsonStringOkay("\"\\u009f\" ", "\"\159;\"",   " ") or
        not getJsonStringOkay("\"\\uffff\" ", "\"\65535;\"", " ") or
        not getJsonStringOkay("\" \" ",       "\" \"",       " ") or
        not getJsonStringOkay("\"!\" ",       "\"!\"",       " ") or
        not getJsonStringOkay("\"0\" ",       "\"0\"",       " ") or
        not getJsonStringOkay("\"A\" ",       "\"A\"",       " ") or
        not getJsonStringOkay("\"a\" ",       "\"a\"",       " ") or
        not getJsonStringOkay("\"~\" ",       "\"~\"",       " ") or
        not getJsonStringOkay("\"\160;\" ",   "\"\160;\"",   " ") or
        not getJsonStringOkay("\"ÿ\" ",       "\"ÿ\"",       " ") or
        not getJsonStringOkay("\"€\" ",       "\"€\"",       " ") then
      writeln(" ***** getJsonString() does not work as expected. (3)");
      okay := FALSE;
    end if;

    if  not getJsonStringOkay("\"\"\"",        "\"\"",        "\"") or
        not getJsonStringOkay("\"\\\"\"\"",    "\"\"\"",      "\"") or
        not getJsonStringOkay("\"\\\\\"\"",    "\"\\\"",      "\"") or
        not getJsonStringOkay("\"\\/\"\"",     "\"/\"",       "\"") or
        not getJsonStringOkay("\"\\b\"\"",     "\"\b\"",      "\"") or
        not getJsonStringOkay("\"\\f\"\"",     "\"\f\"",      "\"") or
        not getJsonStringOkay("\"\\n\"\"",     "\"\n\"",      "\"") or
        not getJsonStringOkay("\"\\r\"\"",     "\"\r\"",      "\"") or
        not getJsonStringOkay("\"\\t\"\"",     "\"\t\"",      "\"") or
        not getJsonStringOkay("\"\\u0000\"\"", "\"\0;\"",     "\"") or
        not getJsonStringOkay("\"\\u001f\"\"", "\"\31;\"",    "\"") or
        not getJsonStringOkay("\"\\u007f\"\"", "\"\127;\"",   "\"") or
        not getJsonStringOkay("\"\\u0080\"\"", "\"\128;\"",   "\"") or
        not getJsonStringOkay("\"\\u009f\"\"", "\"\159;\"",   "\"") or
        not getJsonStringOkay("\"\\uffff\"\"", "\"\65535;\"", "\"") or
        not getJsonStringOkay("\" \"\"",       "\" \"",       "\"") or
        not getJsonStringOkay("\"!\"\"",       "\"!\"",       "\"") or
        not getJsonStringOkay("\"0\"\"",       "\"0\"",       "\"") or
        not getJsonStringOkay("\"A\"\"",       "\"A\"",       "\"") or
        not getJsonStringOkay("\"a\"\"",       "\"a\"",       "\"") or
        not getJsonStringOkay("\"~\"\"",       "\"~\"",       "\"") or
        not getJsonStringOkay("\"\160;\"\"",   "\"\160;\"",   "\"") or
        not getJsonStringOkay("\"ÿ\"\"",       "\"ÿ\"",       "\"") or
        not getJsonStringOkay("\"€\"\"",       "\"€\"",       "\"") then
      writeln(" ***** getJsonString() does not work as expected. (4)");
      okay := FALSE;
    end if;

    if  not getJsonStringOkay("\"0123456789\"", "\"0123456789\"", "") or
        not getJsonStringOkay("\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"", "\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"", "") or
        not getJsonStringOkay("\"abcdefghijklmnopqrstuvwxyz\"", "\"abcdefghijklmnopqrstuvwxyz\"", "") or
        not getJsonStringOkay("\" !\\\"#$%&'()*+,-.\\/:;<=>?@[\\\\]^_`{|}~\"",
                              "\" !\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~\"", "") or
        not getJsonStringOkay("\"¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿\"",
                              "\"¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿\"", "") or
        not getJsonStringOkay("\"ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞß\"",
                              "\"ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞß\"", "") or
        not getJsonStringOkay("\"àáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ\"",
                              "\"àáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ\"", "") or
        not getJsonStringOkay("\"\\\"\\\\\\/\\b\\f\\n\\r\\t\\u0000\\u001f\\u007f\\u0080\\u009f !0Aa~\160;ÿ€\"",
                              "\"\"\\/\b\f\n\r\t\0;\31;\127;\128;\159; !0Aa~\160;ÿ€\"", "") then
      writeln(" ***** getJsonString() does not work as expected. (5)");
      okay := FALSE;
    end if;

    if  not getJsonStringRaisesRangeError(""           ) or
        not getJsonStringRaisesRangeError("\""         ) or
        not getJsonStringRaisesRangeError("\"\0;\""    ) or
        not getJsonStringRaisesRangeError("\"\b\""     ) or
        not getJsonStringRaisesRangeError("\"\f\""     ) or
        not getJsonStringRaisesRangeError("\"\n\""     ) or
        not getJsonStringRaisesRangeError("\"\r\""     ) or
        not getJsonStringRaisesRangeError("\"\t\""     ) or
        not getJsonStringRaisesRangeError("\"\31;\""   ) or
        not getJsonStringRaisesRangeError("\"\127;\""  ) or
        not getJsonStringRaisesRangeError("\"\128;\""  ) or
        not getJsonStringRaisesRangeError("\"\159;\""  ) or
        not getJsonStringRaisesRangeError("\"\\"       ) or
        not getJsonStringRaisesRangeError("\"\\a\""    ) or
        not getJsonStringRaisesRangeError("\"\\u"      ) or
        not getJsonStringRaisesRangeError("\"\\u1"     ) or
        not getJsonStringRaisesRangeError("\"\\u12"    ) or
        not getJsonStringRaisesRangeError("\"\\u123"   ) or
        not getJsonStringRaisesRangeError("\"\\u1234"  ) or
        not getJsonStringRaisesRangeError("\"\\ug234"  ) or
        not getJsonStringRaisesRangeError("\"\\u1g34"  ) or
        not getJsonStringRaisesRangeError("\"\\u12g4"  ) or
        not getJsonStringRaisesRangeError("\"\\u123g"  ) or
        not getJsonStringRaisesRangeError("\"\\u\""    ) or
        not getJsonStringRaisesRangeError("\"\\u1\""   ) or
        not getJsonStringRaisesRangeError("\"\\u12\""  ) or
        not getJsonStringRaisesRangeError("\"\\u123\"" ) or
        not getJsonStringRaisesRangeError("\"\\ug234\"") or
        not getJsonStringRaisesRangeError("\"\\u1g34\"") or
        not getJsonStringRaisesRangeError("\"\\u12g4\"") or
        not getJsonStringRaisesRangeError("\"\\u123g\"") then
      writeln(" ***** getJsonString() does not raise RANGE_ERROR.");
      okay := FALSE;
    end if;
  end func;


const proc: checkGetJsonString is func
  local
    var boolean: okay is TRUE;
  begin
    if not checkGetJsonString1 then
      okay := FALSE;
    end if;

    if okay then
      writeln("The function getJsonString works correctly.");
    end if;
  end func;


const func boolean: getJsonNumberOkay (in string: initialStri,
    in string: expectedSymbol, in string: finalStri) is func
  result
    var boolean: okay is TRUE;
  local
    var string: stri is "";
    var string: symbol is "";
    var file: aFile is STD_NULL;
    var char: expectedBuffer is ' ';
  begin
    stri := initialStri;
    symbol := getJsonNumber(stri);
    if symbol <> expectedSymbol then
      writeln(" ***** getJsonNumber(stri) with " <&
              literal(initialStri) <& " returns " <&
              literal(symbol) <& " instead of " <&
              literal(expectedSymbol) <& ".");
      okay := FALSE;
    elsif stri <> finalStri then
      writeln(" ***** After getJsonNumber(stri) with " <&
              literal(initialStri) <& " stri is " <&
              literal(stri) <& " instead of " <& literal(finalStri) <&
              ".");
      okay := FALSE;
    else
      if finalStri = "" then
        expectedBuffer := EOF;
      else
        expectedBuffer := finalStri[1];
      end if;
      aFile := initScan(initialStri);
      symbol := getJsonNumber(aFile);
      if symbol <> expectedSymbol then
        writeln(" ***** getJsonNumber(file) with " <&
                literal(initialStri) <& " returns " <&
                literal(symbol) <& " instead of " <&
                literal(expectedSymbol) <& ".");
        okay := FALSE;
      elsif aFile.bufferChar <> expectedBuffer then
        writeln(" ***** After getJsonNumber(file) with " <&
                literal(initialStri) <& " bufferChar is " <&
                literal(aFile.bufferChar) <& " instead of " <&
                literal(expectedBuffer) <& ".");
        okay := FALSE;
      elsif expectedBuffer = EOF and not eof(aFile) then
        writeln(" ***** After getJsonNumber(file) with " <&
                literal(initialStri) <& " bufferChar is \
                \EOF but eof() returns FALSE.");
        okay := FALSE;
      end if;
    end if;
  end func;


const func boolean: getJsonNumberRaisesRangeError (in string: initialStri) is func
  result
    var boolean: okay is TRUE;
  local
    var string: stri is "";
    var file: aFile is STD_NULL;
  begin
    stri := initialStri;
    if not raisesRangeError(getJsonNumber(stri)) then
      writeln(" ***** getJsonNumber(stri) with " <&
              literal(initialStri) <& " does not raise RANGE_ERROR.");
      okay := FALSE;
    else
      aFile := initScan(initialStri);
      if not raisesRangeError(getJsonNumber(aFile)) then
        writeln(" ***** getJsonNumber(file) with " <&
                literal(initialStri) <& " does not raise RANGE_ERROR.");
        okay := FALSE;
      end if;
    end if;
  end func;


const func boolean: checkGetJsonNumber1 is func
  result
    var boolean: okay is TRUE;
  begin
    if  not getJsonNumberOkay("12",     "12",     "") or
        not getJsonNumberOkay("123*2",  "123",    "*2") or
        not getJsonNumberOkay("-2+3",   "-2",     "+3") or
        not getJsonNumberOkay("00",     "0",      "0") or
        not getJsonNumberOkay("-00",    "-0",     "0") or
        not getJsonNumberOkay("-01",    "-0",     "1") or
        not getJsonNumberOkay("1x",     "1",      "x") or
        not getJsonNumberOkay("1.0+",   "1.0",    "+") or
        not getJsonNumberOkay("1.0E1-", "1.0E1",  "-") or
        not getJsonNumberOkay("1.0e-1", "1.0e-1", "") or
        not getJsonNumberOkay("1e2y",   "1e2",    "y") or
        not getJsonNumberOkay("1E+3z",  "1E+3",   "z") or
        not getJsonNumberOkay("1234_/", "1234",   "_/") then
      writeln(" ***** getJsonNumber() does not work as expected. (1)");
      okay := FALSE;
    end if;

    if  not getJsonNumberOkay("0",       "0",       "") or
        not getJsonNumberOkay("0.0",     "0.0",     "") or
        not getJsonNumberOkay("0.0e1",   "0.0e1",   "") or
        not getJsonNumberOkay("0.0e+1",  "0.0e+1",  "") or
        not getJsonNumberOkay("0.0e-1",  "0.0e-1",  "") or
        not getJsonNumberOkay("0.0E1",   "0.0E1",   "") or
        not getJsonNumberOkay("0.0E+1",  "0.0E+1",  "") or
        not getJsonNumberOkay("0.0E-1",  "0.0E-1",  "") or
        not getJsonNumberOkay("0e1",     "0e1",     "") or
        not getJsonNumberOkay("0e+1",    "0e+1",    "") or
        not getJsonNumberOkay("0e-1",    "0e-1",    "") or
        not getJsonNumberOkay("0E1",     "0E1",     "") or
        not getJsonNumberOkay("0E+1",    "0E+1",    "") or
        not getJsonNumberOkay("0E-1",    "0E-1",    "") or
        not getJsonNumberOkay("1",       "1",       "") or
        not getJsonNumberOkay("1.0",     "1.0",     "") or
        not getJsonNumberOkay("1.0e1",   "1.0e1",   "") or
        not getJsonNumberOkay("1.0e+1",  "1.0e+1",  "") or
        not getJsonNumberOkay("1.0e-1",  "1.0e-1",  "") or
        not getJsonNumberOkay("1.0E1",   "1.0E1",   "") or
        not getJsonNumberOkay("1.0E+1",  "1.0E+1",  "") or
        not getJsonNumberOkay("1.0E-1",  "1.0E-1",  "") or
        not getJsonNumberOkay("1e1",     "1e1",     "") or
        not getJsonNumberOkay("1e+1",    "1e+1",    "") or
        not getJsonNumberOkay("1e-1",    "1e-1",    "") or
        not getJsonNumberOkay("1E1",     "1E1",     "") or
        not getJsonNumberOkay("1E+1",    "1E+1",    "") or
        not getJsonNumberOkay("1E-1",    "1E-1",    "") or
        not getJsonNumberOkay("9",       "9",       "") or
        not getJsonNumberOkay("9.0",     "9.0",     "") or
        not getJsonNumberOkay("9.0e1",   "9.0e1",   "") or
        not getJsonNumberOkay("9.0e+1",  "9.0e+1",  "") or
        not getJsonNumberOkay("9.0e-1",  "9.0e-1",  "") or
        not getJsonNumberOkay("9.0E1",   "9.0E1",   "") or
        not getJsonNumberOkay("9.0E+1",  "9.0E+1",  "") or
        not getJsonNumberOkay("9.0E-1",  "9.0E-1",  "") or
        not getJsonNumberOkay("9e1",     "9e1",     "") or
        not getJsonNumberOkay("9e+1",    "9e+1",    "") or
        not getJsonNumberOkay("9e-1",    "9e-1",    "") or
        not getJsonNumberOkay("9E1",     "9E1",     "") or
        not getJsonNumberOkay("9E+1",    "9E+1",    "") or
        not getJsonNumberOkay("9E-1",    "9E-1",    "") or
        not getJsonNumberOkay("-0",      "-0",      "") or
        not getJsonNumberOkay("-0.0",    "-0.0",    "") or
        not getJsonNumberOkay("-0.0e1",  "-0.0e1",  "") or
        not getJsonNumberOkay("-0.0e+1", "-0.0e+1", "") or
        not getJsonNumberOkay("-0.0e-1", "-0.0e-1", "") or
        not getJsonNumberOkay("-0.0E1",  "-0.0E1",  "") or
        not getJsonNumberOkay("-0.0E+1", "-0.0E+1", "") or
        not getJsonNumberOkay("-0.0E-1", "-0.0E-1", "") or
        not getJsonNumberOkay("-0e1",    "-0e1",    "") or
        not getJsonNumberOkay("-0e+1",   "-0e+1",   "") or
        not getJsonNumberOkay("-0e-1",   "-0e-1",   "") or
        not getJsonNumberOkay("-0E1",    "-0E1",    "") or
        not getJsonNumberOkay("-0E+1",   "-0E+1",   "") or
        not getJsonNumberOkay("-0E-1",   "-0E-1",   "") or
        not getJsonNumberOkay("-1",      "-1",      "") or
        not getJsonNumberOkay("-1.0",    "-1.0",    "") or
        not getJsonNumberOkay("-1.0e1",  "-1.0e1",  "") or
        not getJsonNumberOkay("-1.0e+1", "-1.0e+1", "") or
        not getJsonNumberOkay("-1.0e-1", "-1.0e-1", "") or
        not getJsonNumberOkay("-1.0E1",  "-1.0E1",  "") or
        not getJsonNumberOkay("-1.0E+1", "-1.0E+1", "") or
        not getJsonNumberOkay("-1.0E-1", "-1.0E-1", "") or
        not getJsonNumberOkay("-1e1",    "-1e1",    "") or
        not getJsonNumberOkay("-1e+1",   "-1e+1",   "") or
        not getJsonNumberOkay("-1e-1",   "-1e-1",   "") or
        not getJsonNumberOkay("-1E1",    "-1E1",    "") or
        not getJsonNumberOkay("-1E+1",   "-1E+1",   "") or
        not getJsonNumberOkay("-1E-1",   "-1E-1",   "") or
        not getJsonNumberOkay("-9",      "-9",      "") or
        not getJsonNumberOkay("-9.0",    "-9.0",    "") or
        not getJsonNumberOkay("-9.0e1",  "-9.0e1",  "") or
        not getJsonNumberOkay("-9.0e+1", "-9.0e+1", "") or
        not getJsonNumberOkay("-9.0e-1", "-9.0e-1", "") or
        not getJsonNumberOkay("-9.0E1",  "-9.0E1",  "") or
        not getJsonNumberOkay("-9.0E+1", "-9.0E+1", "") or
        not getJsonNumberOkay("-9.0E-1", "-9.0E-1", "") or
        not getJsonNumberOkay("-9e1",    "-9e1",    "") or
        not getJsonNumberOkay("-9e+1",   "-9e+1",   "") or
        not getJsonNumberOkay("-9e-1",   "-9e-1",   "") or
        not getJsonNumberOkay("-9E1",    "-9E1",    "") or
        not getJsonNumberOkay("-9E+1",   "-9E+1",   "") or
        not getJsonNumberOkay("-9E-1",   "-9E-1",   "") then
      writeln(" ***** getJsonNumber() does not work as expected. (2)");
      okay := FALSE;
    end if;

    if  not getJsonNumberOkay("0 ",       "0",       " ") or
        not getJsonNumberOkay("0.0 ",     "0.0",     " ") or
        not getJsonNumberOkay("0.0e1 ",   "0.0e1",   " ") or
        not getJsonNumberOkay("0.0e+1 ",  "0.0e+1",  " ") or
        not getJsonNumberOkay("0.0e-1 ",  "0.0e-1",  " ") or
        not getJsonNumberOkay("0.0E1 ",   "0.0E1",   " ") or
        not getJsonNumberOkay("0.0E+1 ",  "0.0E+1",  " ") or
        not getJsonNumberOkay("0.0E-1 ",  "0.0E-1",  " ") or
        not getJsonNumberOkay("0e1 ",     "0e1",     " ") or
        not getJsonNumberOkay("0e+1 ",    "0e+1",    " ") or
        not getJsonNumberOkay("0e-1 ",    "0e-1",    " ") or
        not getJsonNumberOkay("0E1 ",     "0E1",     " ") or
        not getJsonNumberOkay("0E+1 ",    "0E+1",    " ") or
        not getJsonNumberOkay("0E-1 ",    "0E-1",    " ") or
        not getJsonNumberOkay("1 ",       "1",       " ") or
        not getJsonNumberOkay("1.0 ",     "1.0",     " ") or
        not getJsonNumberOkay("1.0e1 ",   "1.0e1",   " ") or
        not getJsonNumberOkay("1.0e+1 ",  "1.0e+1",  " ") or
        not getJsonNumberOkay("1.0e-1 ",  "1.0e-1",  " ") or
        not getJsonNumberOkay("1.0E1 ",   "1.0E1",   " ") or
        not getJsonNumberOkay("1.0E+1 ",  "1.0E+1",  " ") or
        not getJsonNumberOkay("1.0E-1 ",  "1.0E-1",  " ") or
        not getJsonNumberOkay("1e1 ",     "1e1",     " ") or
        not getJsonNumberOkay("1e+1 ",    "1e+1",    " ") or
        not getJsonNumberOkay("1e-1 ",    "1e-1",    " ") or
        not getJsonNumberOkay("1E1 ",     "1E1",     " ") or
        not getJsonNumberOkay("1E+1 ",    "1E+1",    " ") or
        not getJsonNumberOkay("1E-1 ",    "1E-1",    " ") or
        not getJsonNumberOkay("9 ",       "9",       " ") or
        not getJsonNumberOkay("9.0 ",     "9.0",     " ") or
        not getJsonNumberOkay("9.0e1 ",   "9.0e1",   " ") or
        not getJsonNumberOkay("9.0e+1 ",  "9.0e+1",  " ") or
        not getJsonNumberOkay("9.0e-1 ",  "9.0e-1",  " ") or
        not getJsonNumberOkay("9.0E1 ",   "9.0E1",   " ") or
        not getJsonNumberOkay("9.0E+1 ",  "9.0E+1",  " ") or
        not getJsonNumberOkay("9.0E-1 ",  "9.0E-1",  " ") or
        not getJsonNumberOkay("9e1 ",     "9e1",     " ") or
        not getJsonNumberOkay("9e+1 ",    "9e+1",    " ") or
        not getJsonNumberOkay("9e-1 ",    "9e-1",    " ") or
        not getJsonNumberOkay("9E1 ",     "9E1",     " ") or
        not getJsonNumberOkay("9E+1 ",    "9E+1",    " ") or
        not getJsonNumberOkay("9E-1 ",    "9E-1",    " ") or
        not getJsonNumberOkay("-0 ",      "-0",      " ") or
        not getJsonNumberOkay("-0.0 ",    "-0.0",    " ") or
        not getJsonNumberOkay("-0.0e1 ",  "-0.0e1",  " ") or
        not getJsonNumberOkay("-0.0e+1 ", "-0.0e+1", " ") or
        not getJsonNumberOkay("-0.0e-1 ", "-0.0e-1", " ") or
        not getJsonNumberOkay("-0.0E1 ",  "-0.0E1",  " ") or
        not getJsonNumberOkay("-0.0E+1 ", "-0.0E+1", " ") or
        not getJsonNumberOkay("-0.0E-1 ", "-0.0E-1", " ") or
        not getJsonNumberOkay("-0e1 ",    "-0e1",    " ") or
        not getJsonNumberOkay("-0e+1 ",   "-0e+1",   " ") or
        not getJsonNumberOkay("-0e-1 ",   "-0e-1",   " ") or
        not getJsonNumberOkay("-0E1 ",    "-0E1",    " ") or
        not getJsonNumberOkay("-0E+1 ",   "-0E+1",   " ") or
        not getJsonNumberOkay("-0E-1 ",   "-0E-1",   " ") or
        not getJsonNumberOkay("-1 ",      "-1",      " ") or
        not getJsonNumberOkay("-1.0 ",    "-1.0",    " ") or
        not getJsonNumberOkay("-1.0e1 ",  "-1.0e1",  " ") or
        not getJsonNumberOkay("-1.0e+1 ", "-1.0e+1", " ") or
        not getJsonNumberOkay("-1.0e-1 ", "-1.0e-1", " ") or
        not getJsonNumberOkay("-1.0E1 ",  "-1.0E1",  " ") or
        not getJsonNumberOkay("-1.0E+1 ", "-1.0E+1", " ") or
        not getJsonNumberOkay("-1.0E-1 ", "-1.0E-1", " ") or
        not getJsonNumberOkay("-1e1 ",    "-1e1",    " ") or
        not getJsonNumberOkay("-1e+1 ",   "-1e+1",   " ") or
        not getJsonNumberOkay("-1e-1 ",   "-1e-1",   " ") or
        not getJsonNumberOkay("-1E1 ",    "-1E1",    " ") or
        not getJsonNumberOkay("-1E+1 ",   "-1E+1",   " ") or
        not getJsonNumberOkay("-1E-1 ",   "-1E-1",   " ") or
        not getJsonNumberOkay("-9 ",      "-9",      " ") or
        not getJsonNumberOkay("-9.0 ",    "-9.0",    " ") or
        not getJsonNumberOkay("-9.0e1 ",  "-9.0e1",  " ") or
        not getJsonNumberOkay("-9.0e+1 ", "-9.0e+1", " ") or
        not getJsonNumberOkay("-9.0e-1 ", "-9.0e-1", " ") or
        not getJsonNumberOkay("-9.0E1 ",  "-9.0E1",  " ") or
        not getJsonNumberOkay("-9.0E+1 ", "-9.0E+1", " ") or
        not getJsonNumberOkay("-9.0E-1 ", "-9.0E-1", " ") or
        not getJsonNumberOkay("-9e1 ",    "-9e1",    " ") or
        not getJsonNumberOkay("-9e+1 ",   "-9e+1",   " ") or
        not getJsonNumberOkay("-9e-1 ",   "-9e-1",   " ") or
        not getJsonNumberOkay("-9E1 ",    "-9E1",    " ") or
        not getJsonNumberOkay("-9E+1 ",   "-9E+1",   " ") or
        not getJsonNumberOkay("-9E-1 ",   "-9E-1",   " ") then
      writeln(" ***** getJsonNumber() does not work as expected. (3)");
      okay := FALSE;
    end if;

    if  not getJsonNumberOkay("0-",       "0",       "-") or
        not getJsonNumberOkay("0.0-",     "0.0",     "-") or
        not getJsonNumberOkay("0.0e1-",   "0.0e1",   "-") or
        not getJsonNumberOkay("0.0e+1-",  "0.0e+1",  "-") or
        not getJsonNumberOkay("0.0e-1-",  "0.0e-1",  "-") or
        not getJsonNumberOkay("0.0E1-",   "0.0E1",   "-") or
        not getJsonNumberOkay("0.0E+1-",  "0.0E+1",  "-") or
        not getJsonNumberOkay("0.0E-1-",  "0.0E-1",  "-") or
        not getJsonNumberOkay("0e1-",     "0e1",     "-") or
        not getJsonNumberOkay("0e+1-",    "0e+1",    "-") or
        not getJsonNumberOkay("0e-1-",    "0e-1",    "-") or
        not getJsonNumberOkay("0E1-",     "0E1",     "-") or
        not getJsonNumberOkay("0E+1-",    "0E+1",    "-") or
        not getJsonNumberOkay("0E-1-",    "0E-1",    "-") or
        not getJsonNumberOkay("1-",       "1",       "-") or
        not getJsonNumberOkay("1.0-",     "1.0",     "-") or
        not getJsonNumberOkay("1.0e1-",   "1.0e1",   "-") or
        not getJsonNumberOkay("1.0e+1-",  "1.0e+1",  "-") or
        not getJsonNumberOkay("1.0e-1-",  "1.0e-1",  "-") or
        not getJsonNumberOkay("1.0E1-",   "1.0E1",   "-") or
        not getJsonNumberOkay("1.0E+1-",  "1.0E+1",  "-") or
        not getJsonNumberOkay("1.0E-1-",  "1.0E-1",  "-") or
        not getJsonNumberOkay("1e1-",     "1e1",     "-") or
        not getJsonNumberOkay("1e+1-",    "1e+1",    "-") or
        not getJsonNumberOkay("1e-1-",    "1e-1",    "-") or
        not getJsonNumberOkay("1E1-",     "1E1",     "-") or
        not getJsonNumberOkay("1E+1-",    "1E+1",    "-") or
        not getJsonNumberOkay("1E-1-",    "1E-1",    "-") or
        not getJsonNumberOkay("9-",       "9",       "-") or
        not getJsonNumberOkay("9.0-",     "9.0",     "-") or
        not getJsonNumberOkay("9.0e1-",   "9.0e1",   "-") or
        not getJsonNumberOkay("9.0e+1-",  "9.0e+1",  "-") or
        not getJsonNumberOkay("9.0e-1-",  "9.0e-1",  "-") or
        not getJsonNumberOkay("9.0E1-",   "9.0E1",   "-") or
        not getJsonNumberOkay("9.0E+1-",  "9.0E+1",  "-") or
        not getJsonNumberOkay("9.0E-1-",  "9.0E-1",  "-") or
        not getJsonNumberOkay("9e1-",     "9e1",     "-") or
        not getJsonNumberOkay("9e+1-",    "9e+1",    "-") or
        not getJsonNumberOkay("9e-1-",    "9e-1",    "-") or
        not getJsonNumberOkay("9E1-",     "9E1",     "-") or
        not getJsonNumberOkay("9E+1-",    "9E+1",    "-") or
        not getJsonNumberOkay("9E-1-",    "9E-1",    "-") or
        not getJsonNumberOkay("-0-",      "-0",      "-") or
        not getJsonNumberOkay("-0.0-",    "-0.0",    "-") or
        not getJsonNumberOkay("-0.0e1-",  "-0.0e1",  "-") or
        not getJsonNumberOkay("-0.0e+1-", "-0.0e+1", "-") or
        not getJsonNumberOkay("-0.0e-1-", "-0.0e-1", "-") or
        not getJsonNumberOkay("-0.0E1-",  "-0.0E1",  "-") or
        not getJsonNumberOkay("-0.0E+1-", "-0.0E+1", "-") or
        not getJsonNumberOkay("-0.0E-1-", "-0.0E-1", "-") or
        not getJsonNumberOkay("-0e1-",    "-0e1",    "-") or
        not getJsonNumberOkay("-0e+1-",   "-0e+1",   "-") or
        not getJsonNumberOkay("-0e-1-",   "-0e-1",   "-") or
        not getJsonNumberOkay("-0E1-",    "-0E1",    "-") or
        not getJsonNumberOkay("-0E+1-",   "-0E+1",   "-") or
        not getJsonNumberOkay("-0E-1-",   "-0E-1",   "-") or
        not getJsonNumberOkay("-1-",      "-1",      "-") or
        not getJsonNumberOkay("-1.0-",    "-1.0",    "-") or
        not getJsonNumberOkay("-1.0e1-",  "-1.0e1",  "-") or
        not getJsonNumberOkay("-1.0e+1-", "-1.0e+1", "-") or
        not getJsonNumberOkay("-1.0e-1-", "-1.0e-1", "-") or
        not getJsonNumberOkay("-1.0E1-",  "-1.0E1",  "-") or
        not getJsonNumberOkay("-1.0E+1-", "-1.0E+1", "-") or
        not getJsonNumberOkay("-1.0E-1-", "-1.0E-1", "-") or
        not getJsonNumberOkay("-1e1-",    "-1e1",    "-") or
        not getJsonNumberOkay("-1e+1-",   "-1e+1",   "-") or
        not getJsonNumberOkay("-1e-1-",   "-1e-1",   "-") or
        not getJsonNumberOkay("-1E1-",    "-1E1",    "-") or
        not getJsonNumberOkay("-1E+1-",   "-1E+1",   "-") or
        not getJsonNumberOkay("-1E-1-",   "-1E-1",   "-") or
        not getJsonNumberOkay("-9-",      "-9",      "-") or
        not getJsonNumberOkay("-9.0-",    "-9.0",    "-") or
        not getJsonNumberOkay("-9.0e1-",  "-9.0e1",  "-") or
        not getJsonNumberOkay("-9.0e+1-", "-9.0e+1", "-") or
        not getJsonNumberOkay("-9.0e-1-", "-9.0e-1", "-") or
        not getJsonNumberOkay("-9.0E1-",  "-9.0E1",  "-") or
        not getJsonNumberOkay("-9.0E+1-", "-9.0E+1", "-") or
        not getJsonNumberOkay("-9.0E-1-", "-9.0E-1", "-") or
        not getJsonNumberOkay("-9e1-",    "-9e1",    "-") or
        not getJsonNumberOkay("-9e+1-",   "-9e+1",   "-") or
        not getJsonNumberOkay("-9e-1-",   "-9e-1",   "-") or
        not getJsonNumberOkay("-9E1-",    "-9E1",    "-") or
        not getJsonNumberOkay("-9E+1-",   "-9E+1",   "-") or
        not getJsonNumberOkay("-9E-1-",   "-9E-1",   "-") then
      writeln(" ***** getJsonNumber() does not work as expected. (4)");
      okay := FALSE;
    end if;

    if  not getJsonNumberRaisesRangeError(""      ) or
        not getJsonNumberRaisesRangeError("+"     ) or
        not getJsonNumberRaisesRangeError("++"    ) or
        not getJsonNumberRaisesRangeError("+-"    ) or
        not getJsonNumberRaisesRangeError("++0"   ) or
        not getJsonNumberRaisesRangeError("+-0"   ) or
        not getJsonNumberRaisesRangeError("++1"   ) or
        not getJsonNumberRaisesRangeError("+-1"   ) or
        not getJsonNumberRaisesRangeError("+a"    ) or
        not getJsonNumberRaisesRangeError("-"     ) or
        not getJsonNumberRaisesRangeError("-+"    ) or
        not getJsonNumberRaisesRangeError("--"    ) or
        not getJsonNumberRaisesRangeError("-+0"   ) or
        not getJsonNumberRaisesRangeError("--0"   ) or
        not getJsonNumberRaisesRangeError("-+1"   ) or
        not getJsonNumberRaisesRangeError("--1"   ) or
        not getJsonNumberRaisesRangeError("-a"    ) or
        not getJsonNumberRaisesRangeError("x"     ) or
        not getJsonNumberRaisesRangeError("0."    ) or
        not getJsonNumberRaisesRangeError("0e"    ) or
        not getJsonNumberRaisesRangeError("0e+"   ) or
        not getJsonNumberRaisesRangeError("0e-"   ) or
        not getJsonNumberRaisesRangeError("0E"    ) or
        not getJsonNumberRaisesRangeError("0E+"   ) or
        not getJsonNumberRaisesRangeError("0E-"   ) or
        not getJsonNumberRaisesRangeError("0.0e"  ) or
        not getJsonNumberRaisesRangeError("0.0e+" ) or
        not getJsonNumberRaisesRangeError("0.0e-" ) or
        not getJsonNumberRaisesRangeError("0.0E"  ) or
        not getJsonNumberRaisesRangeError("0.0E+" ) or
        not getJsonNumberRaisesRangeError("0.0E-" ) or
        not getJsonNumberRaisesRangeError("1."    ) or
        not getJsonNumberRaisesRangeError("1e"    ) or
        not getJsonNumberRaisesRangeError("1e+"   ) or
        not getJsonNumberRaisesRangeError("1e-"   ) or
        not getJsonNumberRaisesRangeError("1E"    ) or
        not getJsonNumberRaisesRangeError("1E+"   ) or
        not getJsonNumberRaisesRangeError("1E-"   ) or
        not getJsonNumberRaisesRangeError("1.0e"  ) or
        not getJsonNumberRaisesRangeError("1.0e+" ) or
        not getJsonNumberRaisesRangeError("1.0e-" ) or
        not getJsonNumberRaisesRangeError("1.0E"  ) or
        not getJsonNumberRaisesRangeError("1.0E+" ) or
        not getJsonNumberRaisesRangeError("1.0E-" ) or
        not getJsonNumberRaisesRangeError("-0."   ) or
        not getJsonNumberRaisesRangeError("-0e"   ) or
        not getJsonNumberRaisesRangeError("-0e+"  ) or
        not getJsonNumberRaisesRangeError("-0e-"  ) or
        not getJsonNumberRaisesRangeError("-0E"   ) or
        not getJsonNumberRaisesRangeError("-0E+"  ) or
        not getJsonNumberRaisesRangeError("-0E-"  ) or
        not getJsonNumberRaisesRangeError("-0.0e" ) or
        not getJsonNumberRaisesRangeError("-0.0e+") or
        not getJsonNumberRaisesRangeError("-0.0e-") or
        not getJsonNumberRaisesRangeError("-0.0E" ) or
        not getJsonNumberRaisesRangeError("-0.0E+") or
        not getJsonNumberRaisesRangeError("-0.0E-") or
        not getJsonNumberRaisesRangeError("-1."   ) or
        not getJsonNumberRaisesRangeError("-1e"   ) or
        not getJsonNumberRaisesRangeError("-1e+"  ) or
        not getJsonNumberRaisesRangeError("-1e-"  ) or
        not getJsonNumberRaisesRangeError("-1E"   ) or
        not getJsonNumberRaisesRangeError("-1E+"  ) or
        not getJsonNumberRaisesRangeError("-1E-"  ) or
        not getJsonNumberRaisesRangeError("-1.0e" ) or
        not getJsonNumberRaisesRangeError("-1.0e+") or
        not getJsonNumberRaisesRangeError("-1.0e-") or
        not getJsonNumberRaisesRangeError("-1.0E" ) or
        not getJsonNumberRaisesRangeError("-1.0E+") or
        not getJsonNumberRaisesRangeError("-1.0E-") then
      writeln(" ***** getJsonNumber() does not raise RANGE_ERROR.");
      okay := FALSE;
    end if;
  end func;


const proc: checkGetJsonNumber is func
  local
    var boolean: okay is TRUE;
  begin
    if not checkGetJsonNumber1 then
      okay := FALSE;
    end if;

    if okay then
      writeln("The function getJsonNumber works correctly.");
    end if;
  end func;


const proc: checkGetJsonSymbol is func
  local
    var string: stri is "";
    var file: aFile is STD_NULL;
    var boolean: okay is TRUE;
    var boolean: ok is TRUE;
  begin
    stri := " null "; ok := ok and getJsonSymbol(stri) = "null"  and stri = " ";
    stri := "\ntrue"; ok := ok and getJsonSymbol(stri) = "true"  and stri = "";
    stri := ",-9";    ok := ok and getJsonSymbol(stri) = ","     and stri = "-9";
    stri := ":true";  ok := ok and getJsonSymbol(stri) = ":"     and stri = "true";
    stri := "\r{ } "; ok := ok and getJsonSymbol(stri) = "{"     and stri = " } ";
    stri := " [123]"; ok := ok and getJsonSymbol(stri) = "["     and stri = "123]";
    stri := "\t987 "; ok := ok and getJsonSymbol(stri) = "987"   and stri = " ";
    stri := " -123,"; ok := ok and getJsonSymbol(stri) = "-123"  and stri = ",";
    stri := " \"x\""; ok := ok and getJsonSymbol(stri) = "\"x\"" and stri = "";
    if not ok then
      writeln(" ***** The function getJsonSymbol(STRING) does not work correctly.");
      okay := FALSE;
    end if;

    ok := TRUE;
    aFile := initScan(" null "); ok := ok and getJsonSymbol(aFile) = "null"  and aFile.bufferChar = ' ';
    aFile := initScan("\ntrue"); ok := ok and getJsonSymbol(aFile) = "true"  and aFile.bufferChar = EOF;
    aFile := initScan(",-9");    ok := ok and getJsonSymbol(aFile) = ","     and aFile.bufferChar = '-';
    aFile := initScan(":true");  ok := ok and getJsonSymbol(aFile) = ":"     and aFile.bufferChar = 't';
    aFile := initScan("\r{ } "); ok := ok and getJsonSymbol(aFile) = "{"     and aFile.bufferChar = ' ';
    aFile := initScan(" [123]"); ok := ok and getJsonSymbol(aFile) = "["     and aFile.bufferChar = '1';
    aFile := initScan("\t987 "); ok := ok and getJsonSymbol(aFile) = "987"   and aFile.bufferChar = ' ';
    aFile := initScan(" -123,"); ok := ok and getJsonSymbol(aFile) = "-123"  and aFile.bufferChar = ',';
    aFile := initScan(" \"x\""); ok := ok and getJsonSymbol(aFile) = "\"x\"" and aFile.bufferChar = EOF;
    if not ok then
      writeln(" ***** The function getJsonSymbol(FILE) does not work correctly.");
      okay := FALSE;
    end if;

    if okay then
      writeln("The function getJsonSymbol works correctly.");
    end if;
  end func;


const proc: checkJsonDom is func
  local
    var boolean: okay is TRUE;
  begin
    if  category(jsonValue(NULL))                 <> JSON_NULL    or
        category(jsonValue(TRUE))                 <> JSON_BOOLEAN or
        category(jsonValue(FALSE))                <> JSON_BOOLEAN or
        category(jsonValue(              12345 )) <> JSON_NUMBER  or
        category(jsonValue(9223372036854775808_)) <> JSON_NUMBER  or
        category(jsonValue(0.00000762939453125 )) <> JSON_NUMBER  or
        category(jsonValue("foo"))                <> JSON_STRING  then
      writeln(" ***** The function category(jsonValue) does not work correctly. (1)");
      okay := FALSE;
    end if;

    if  category(readJson("null"))                <> JSON_NULL    or
        category(readJson("true"))                <> JSON_BOOLEAN or
        category(readJson("false"))               <> JSON_BOOLEAN or
        category(readJson("12345"))               <> JSON_NUMBER  or
        category(readJson("9223372036854775808")) <> JSON_NUMBER  or
        category(readJson("0.00000762939453125")) <> JSON_NUMBER  or
        category(readJson("\"foo\""))             <> JSON_STRING  or
        category(readJson("[]"))                  <> JSON_ARRAY   or
        category(readJson("[1, \"foo\"]"))        <> JSON_ARRAY   or
        category(readJson("{}"))                  <> JSON_OBJECT  or
        category(readJson("{\"foo\": null}"))     <> JSON_OBJECT  then
      writeln(" ***** The function category(jsonValue) does not work correctly. (2)");
      okay := FALSE;
    end if;

    if  type(jsonValue(NULL))                 <> void       or
        type(jsonValue(TRUE))                 <> boolean    or
        type(jsonValue(FALSE))                <> boolean    or
        type(jsonValue(              12345 )) <> integer    or
        type(jsonValue(9223372036854775808_)) <> bigInteger or
        type(jsonValue(0.00000762939453125 )) <> float      or
        type(jsonValue("foo"))                <> string     then
      writeln(" ***** The function type(jsonValue) does not work correctly. (1)");
      okay := FALSE;
    end if;

    if  type(readJson("null"))                <> void           or
        type(readJson("true"))                <> boolean        or
        type(readJson("false"))               <> boolean        or
        type(readJson("12345"))               <> integer        or
        type(readJson("9223372036854775808")) <> bigInteger     or
        type(readJson("0.00000762939453125")) <> float          or
        type(readJson("\"foo\""))             <> string         or
        type(readJson("{}"))                  <> jsonValueMap   or
        type(readJson("{\"foo\": null}"))     <> jsonValueMap   or
        type(readJson("[]"))                  <> jsonValueArray or
        type(readJson("[1, \"foo\"]"))        <> jsonValueArray then
      writeln(" ***** The function type(jsonValue) does not work correctly. (2)");
      okay := FALSE;
    end if;

    if  void(      jsonValue(NULL))                 <> empty                or
        boolean(   jsonValue(TRUE))                 <> TRUE                 or
        boolean(   jsonValue(FALSE))                <> FALSE                or
        integer(   jsonValue(              12345 )) <>                12345 or
        bigInteger(jsonValue(9223372036854775808_)) <> 9223372036854775808_ or
        float(     jsonValue(0.00000762939453125 )) <> 0.00000762939453125  or
        string(    jsonValue("foo"))                <> "foo"                then
      writeln(" ***** Converting a jsonValue to a plain value does not work correctly. (1)");
      okay := FALSE;
    end if;

    if  void(      readJson("null"))                <> empty                or
        boolean(   readJson("true"))                <> TRUE                 or
        boolean(   readJson("false"))               <> FALSE                or
        integer(   readJson("12345"))               <>               12345  or
        bigInteger(readJson("9223372036854775808")) <> 9223372036854775808_ or
        float(     readJson("0.00000762939453125")) <> 0.00000762939453125  or
        string(    readJson("\"foo\""))             <> "foo"                then
      writeln(" ***** Converting a jsonValue to a plain value does not work correctly.(2)");
      okay := FALSE;
    end if;

    if  category(readJson("{\"fee\": 0.5, \"foo\": true}")["fee"]) <> JSON_NUMBER  or
        type(    readJson("{\"fee\": 0.5, \"foo\": true}")["fee"]) <> float        or
        float(   readJson("{\"fee\": 0.5, \"foo\": true}")["fee"]) <> 0.5          or
        category(readJson("{\"fee\": 0.5, \"foo\": true}")["foo"]) <> JSON_BOOLEAN or
        type(    readJson("{\"fee\": 0.5, \"foo\": true}")["foo"]) <> boolean      or
        boolean( readJson("{\"fee\": 0.5, \"foo\": true}")["foo"]) <> TRUE         then
      writeln(" ***** Selecting an element from an jsonObject does not work correctly.");
      okay := FALSE;
    end if;

    if  not ("fee"     in readJson("{\"fee\": 0.5, \"foo\": true}")) or
             "fee" not in readJson("{\"fee\": 0.5, \"foo\": true}")  or
        not ("foo"     in readJson("{\"fee\": 0.5, \"foo\": true}")) or
             "foo" not in readJson("{\"fee\": 0.5, \"foo\": true}")  then
      writeln(" ***** Checking for element names in an jsonObject does not work correctly.");
      okay := FALSE;
    end if;

    if  keys(readJson("{}"))                            <> 0 times ""        or
        keys(readJson("{\"fee\": 0.5}"))                <> [] ("fee")        or
        keys(readJson("{\"fee\": 0.5, \"foo\": true}")) <> [] ("fee", "foo") then
      writeln(" ***** Getting the list of element names from an jsonObject does not work correctly.");
      okay := FALSE;
    end if;

    if          values(readJson("[]"))              <> 0 times jsonValue.value or
        string( values(readJson("[\"fee\"]"))[1])   <> "fee"                   or
        float(  values(readJson("[0.5, true]"))[1]) <> 0.5                     or
        boolean(values(readJson("[0.5, true]"))[2]) <> TRUE                    then
      writeln(" ***** Getting the list of elements from an jsonArray does not work correctly.");
      okay := FALSE;
    end if;

    if  category(jsonValue([] (jsonValue(9), jsonValue("x")))[1]) <> JSON_NUMBER or
        type(    jsonValue([] (jsonValue(9), jsonValue("x")))[1]) <> integer     or
        integer( jsonValue([] (jsonValue(9), jsonValue("x")))[1]) <> 9           or
        category(jsonValue([] (jsonValue(9), jsonValue("x")))[2]) <> JSON_STRING or
        type(    jsonValue([] (jsonValue(9), jsonValue("x")))[2]) <> string      or
        string(  jsonValue([] (jsonValue(9), jsonValue("x")))[2]) <> "x"         then
      writeln(" ***** Indexing into a jsonArray does not work correctly. (1)");
      okay := FALSE;
    end if;

    if  category(readJson("[1, \"foo\", false, 0.125]")[1]) <> JSON_NUMBER  or
        type(    readJson("[1, \"foo\", false, 0.125]")[1]) <> integer      or
        integer( readJson("[1, \"foo\", false, 0.125]")[1]) <> 1            or
        category(readJson("[1, \"foo\", false, 0.125]")[2]) <> JSON_STRING  or
        type(    readJson("[1, \"foo\", false, 0.125]")[2]) <> string       or
        string(  readJson("[1, \"foo\", false, 0.125]")[2]) <> "foo"        or
        category(readJson("[1, \"foo\", false, 0.125]")[3]) <> JSON_BOOLEAN or
        type(    readJson("[1, \"foo\", false, 0.125]")[3]) <> boolean      or
        boolean( readJson("[1, \"foo\", false, 0.125]")[3]) <> FALSE        or
        category(readJson("[1, \"foo\", false, 0.125]")[4]) <> JSON_NUMBER  or
        type(    readJson("[1, \"foo\", false, 0.125]")[4]) <> float        or
        float(   readJson("[1, \"foo\", false, 0.125]")[4]) <> 0.125        then
      writeln(" ***** Indexing into a jsonArray does not work correctly. (2)");
      okay := FALSE;
    end if;

    if  length(jsonValue(0 times jsonValue.value)) <> 0 or
        minIdx(jsonValue(0 times jsonValue.value)) <> 1 or
        maxIdx(jsonValue(0 times jsonValue.value)) <> 0 or
        length(jsonValue([] (jsonValue(1)))) <> 1 or
        minIdx(jsonValue([] (jsonValue(1)))) <> 1 or
        maxIdx(jsonValue([] (jsonValue(1)))) <> 1 or
        length(jsonValue([] (jsonValue(1), jsonValue(2)))) <> 2 or
        minIdx(jsonValue([] (jsonValue(1), jsonValue(2)))) <> 1 or
        maxIdx(jsonValue([] (jsonValue(1), jsonValue(2)))) <> 2 or
        length(jsonValue([] (jsonValue(1), jsonValue(2), jsonValue(3)))) <> 3 or
        minIdx(jsonValue([] (jsonValue(1), jsonValue(2), jsonValue(3)))) <> 1 or
        maxIdx(jsonValue([] (jsonValue(1), jsonValue(2), jsonValue(3)))) <> 3 or
        length(jsonValue([] (jsonValue(1), jsonValue(2), jsonValue(3), jsonValue(4)))) <> 4 or
        minIdx(jsonValue([] (jsonValue(1), jsonValue(2), jsonValue(3), jsonValue(4)))) <> 1 or
        maxIdx(jsonValue([] (jsonValue(1), jsonValue(2), jsonValue(3), jsonValue(4)))) <> 4 then
      writeln(" ***** Length, minIdx and maxIdx of a jsonArray does not work correctly. (1)");
      okay := FALSE;
    end if;

    if  length(readJson("[]")) <> 0 or
        minIdx(readJson("[]")) <> 1 or
        maxIdx(readJson("[]")) <> 0 or
        length(readJson("[1]")) <> 1 or
        minIdx(readJson("[1]")) <> 1 or
        maxIdx(readJson("[1]")) <> 1 or
        length(readJson("[1, \"foo\"]")) <> 2 or
        minIdx(readJson("[1, \"foo\"]")) <> 1 or
        maxIdx(readJson("[1, \"foo\"]")) <> 2 or
        length(readJson("[1, \"foo\", false]")) <> 3 or
        minIdx(readJson("[1, \"foo\", false]")) <> 1 or
        maxIdx(readJson("[1, \"foo\", false]")) <> 3 or
        length(readJson("[1, \"foo\", false, 0.125]")) <> 4 or
        minIdx(readJson("[1, \"foo\", false, 0.125]")) <> 1 or
        maxIdx(readJson("[1, \"foo\", false, 0.125]")) <> 4 then
      writeln(" ***** Length, minIdx and maxIdx of a jsonArray does not work correctly. (2)");
      okay := FALSE;
    end if;

    if  not raisesIllegalAction(string(readJson("null")))                or
        not raisesIllegalAction(string(readJson("true")))                or
        not raisesIllegalAction(string(readJson("false")))               or
        not raisesIllegalAction(string(readJson("12345")))               or
        not raisesIllegalAction(string(readJson("9223372036854775808"))) or
        not raisesIllegalAction(string(readJson("0.00000762939453125"))) or
        not raisesIllegalAction(string(readJson("{}")))                  or
        not raisesIllegalAction(string(readJson("{\"foo\": null}")))     or
        not raisesIllegalAction(string(readJson("[]")))                  or
        not raisesIllegalAction(string(readJson("[1, \"foo\"]")))        then
      writeln(" ***** Converting a jsonValue other than jsonString to a string does not work correctly.");
      okay := FALSE;
    end if;

    if  not raisesIllegalAction(integer(readJson("null")))            or
        not raisesIllegalAction(integer(readJson("true")))            or
        not raisesIllegalAction(integer(readJson("false")))           or
        not raisesIllegalAction(integer(readJson("\"foo\"")))         or
        not raisesIllegalAction(integer(readJson("{}")))              or
        not raisesIllegalAction(integer(readJson("{\"foo\": null}"))) or
        not raisesIllegalAction(integer(readJson("[]")))              or
        not raisesIllegalAction(integer(readJson("[1, \"foo\"]")))    then
      writeln(" ***** Converting a jsonValue other than jsonNumber to an integer does not work correctly.");
      okay := FALSE;
    end if;

    if  not raisesIllegalAction(bigInteger(readJson("null")))            or
        not raisesIllegalAction(bigInteger(readJson("true")))            or
        not raisesIllegalAction(bigInteger(readJson("false")))           or
        not raisesIllegalAction(bigInteger(readJson("\"foo\"")))         or
        not raisesIllegalAction(bigInteger(readJson("{}")))              or
        not raisesIllegalAction(bigInteger(readJson("{\"foo\": null}"))) or
        not raisesIllegalAction(bigInteger(readJson("[]")))              or
        not raisesIllegalAction(bigInteger(readJson("[1, \"foo\"]")))    then
      writeln(" ***** Converting a jsonValue other than jsonNumber to a bigInteger does not work correctly.");
      okay := FALSE;
    end if;

    if  not raisesIllegalAction(float(readJson("null")))            or
        not raisesIllegalAction(float(readJson("true")))            or
        not raisesIllegalAction(float(readJson("false")))           or
        not raisesIllegalAction(float(readJson("\"foo\"")))         or
        not raisesIllegalAction(float(readJson("{}")))              or
        not raisesIllegalAction(float(readJson("{\"foo\": null}"))) or
        not raisesIllegalAction(float(readJson("[]")))              or
        not raisesIllegalAction(float(readJson("[1, \"foo\"]")))    then
      writeln(" ***** Converting a jsonValue other than jsonNumber to a float does not work correctly.");
      okay := FALSE;
    end if;

    if  not raisesIllegalAction(length(readJson("null")))                or
        not raisesIllegalAction(length(readJson("true")))                or
        not raisesIllegalAction(length(readJson("false")))               or
        not raisesIllegalAction(length(readJson("12345")))               or
        not raisesIllegalAction(length(readJson("9223372036854775808"))) or
        not raisesIllegalAction(length(readJson("0.00000762939453125"))) or
        not raisesIllegalAction(length(readJson("\"foo\"")))             or
        not raisesIllegalAction(length(readJson("{}")))                  or
        not raisesIllegalAction(length(readJson("{\"foo\": null}")))     then
      writeln(" ***** Computing the length of a jsonValue other than jsonArray does not work correctly.");
      okay := FALSE;
    end if;

    if okay then
      writeln("JSON DOM functions work correctly.");
    end if;
  end func;


const proc: checkStructElementFunctions is func
  local
    var boolean: okay is TRUE;
  begin
    if  getName(elements(rational)[1])    <> "numerator" or
        getName(elements(rational)[2])    <> "denominator" or
        getName(elements(bigRational)[1]) <> "numerator" or
        getName(elements(bigRational)[2]) <> "denominator" or
        getName(elements(complex)[1])     <> "re" or
        getName(elements(complex)[2])     <> "im" or
        getName(elements(null_file)[1])   <> "bufferChar" then
      writeln(" ***** The function getName does not work correctly.");
      okay := FALSE;
    end if;

    if  getType(elements(rational)[1])    <> integer or
        getType(elements(bigRational)[1]) <> bigInteger or
        getType(elements(complex)[1])     <> float or
        getType(elements(null_file)[1])   <> char then
      writeln(" ***** The function getType does not work correctly.");
      okay := FALSE;
    end if;

    if  not raisesIllegalAction(elements(boolean)) or
        not raisesIllegalAction(elements(integer)) then
      writeln(" ***** The function elements does not raise ILLEGAL_ACTION.");
      okay := FALSE;
    end if;

    if  not raisesRangeError(getType(structElement.value)) then
      writeln(" ***** The function getType does not raise RANGE_ERROR.");
      okay := FALSE;
    end if;

    if  not raisesRangeError(ignore(symb structElement.value)) then
      writeln(" ***** The symb operator does not raise RANGE_ERROR.");
      okay := FALSE;
    end if;

    if okay then
      writeln("The struct element functions work correctly.");
    end if;
  end func;


const proc: DECLARE_CHECK_PARSE_JSON (in type: dataType) is func
  begin

    const func boolean: checkParseJson (in string: initialStri, in dataType: expectedData,
        in string: finalSymbol) is func
      result
        var boolean: okay is TRUE;
      local
        var string: stri is "";
        var file: aFile is STD_NULL;
        var string: symbol is "";
        var dataType: dataParsed is dataType.value;
      begin
        stri := initialStri;
        symbol := getJsonSymbol(stri);
        dataParsed := parseJson(symbol, stri, dataType);
        if dataParsed <> expectedData then
          writeln(" ***** parseJson(string) with " <&
                  literal(initialStri) <& " does not return " <& literal(expectedData) <& ".");
          okay := FALSE;
        elsif symbol <> finalSymbol then
          writeln(" ***** parseJson(string) with " <&
                  literal(initialStri) <& " does not have " <& literal(finalSymbol) <& " afterwards.");
          okay := FALSE;
        else
          aFile := initScan(initialStri);
          symbol := getJsonSymbol(aFile);
          dataParsed := parseJson(symbol, aFile, dataType);
          if dataParsed <> expectedData then
            writeln(" ***** parseJson(file) with " <&
                    literal(initialStri) <& " does not return " <& literal(expectedData) <& ".");
            okay := FALSE;
          elsif symbol <> finalSymbol then
            writeln(" ***** parseJson(file) with " <&
                    literal(initialStri) <& " does not have " <& literal(finalSymbol) <& " afterwards.");
            okay := FALSE;
          end if;
        end if;
      end func;

    const func boolean: parseJsonRaisesRangeError (in string: initialStri, attr dataType) is func
      result
        var boolean: okay is TRUE;
      local
        var string: stri is "";
        var file: aFile is STD_NULL;
        var string: symbol is "";
        var dataType: dataParsed is dataType.value;
      begin
        stri := initialStri;
        symbol := getJsonSymbol(stri);
        if not raisesRangeError(parseJson(symbol, stri, dataType)) then
          writeln(" ***** parseJson(string) with " <&
                  literal(initialStri) <& " does not raise RANGE_ERROR.");
          okay := FALSE;
        else
          aFile := initScan(initialStri);
          symbol := getJsonSymbol(aFile);
          if not raisesRangeError(parseJson(symbol, aFile, dataType)) then
            writeln(" ***** getJsonNumber(file) with " <&
                    literal(initialStri) <& " does not raise RANGE_ERROR.");
            okay := FALSE;
          end if;
        end if;
      end func;

  end func;


# Declare file parsing functions:

declare_parse_json(string, file);
declare_parse_json(integer, file);
declare_parse_json(float, file);
declare_parse_json(boolean, file);
declare_parse_json(directionType, file);

# declare_parse_json(x, string) has been invoked by declare_from_json(x).

DECLARE_CHECK_PARSE_JSON(string);
DECLARE_CHECK_PARSE_JSON(integer);
DECLARE_CHECK_PARSE_JSON(float);
DECLARE_CHECK_PARSE_JSON(boolean);
DECLARE_CHECK_PARSE_JSON(directionType);


const proc: checkParseJson is func
  local
    var boolean: okay is TRUE;
    var string: stri is "";
  begin
    if  not checkParseJson(" 0,",     "0",     ",") or
        not checkParseJson(" 0,",     0,       ",") or
        not checkParseJson(" 0,",     0.0,     ",") or
        not checkParseJson(" 1.0,",   "1.0",   ",") or
        not checkParseJson(" 1.0,",   1.0,     ",") or
        not checkParseJson(" 1e10,",  "1e10",  ",") or
        not checkParseJson(" 1e10,",  1.0e10,  ",") or
        not checkParseJson(" 1e-10,", "1e-10", ",") or
        not checkParseJson(" 1e-10,", 1.0e-10, ",") or
        not checkParseJson(" true,",  TRUE,    ",") or
        not checkParseJson(" false,", FALSE,   ",") or
        not checkParseJson(" 0,",     STAY,    ",") or
        not checkParseJson(" 1,",     UP,      ",") or
        not checkParseJson(" 2,",     DOWN,    ",") or
        not checkParseJson(" 3,",     LEFT,    ",") or
        not checkParseJson(" 4,",     RIGHT,   ",") then
      writeln(" ***** parseJson() does not work as expected. (1)");
      okay := FALSE;
    end if;

    if  not checkParseJson(" \"0\",",     0,       ",") or
        not checkParseJson(" \"0\",",     0.0,     ",") or
        not checkParseJson(" \"1.0\",",   1.0,     ",") or
        not checkParseJson(" \"1e10\",",  1.0e10,  ",") or
        not checkParseJson(" \"1e-10\",", 1.0e-10, ",") or
        not checkParseJson(" \"true\",",  TRUE,    ",") or
        not checkParseJson(" \"false\",", FALSE,   ",") or
        not checkParseJson(" TRUE,",      TRUE,    ",") or
        not checkParseJson(" FALSE,",     FALSE,   ",") or
        not checkParseJson(" True,",      TRUE,    ",") or
        not checkParseJson(" False,",     FALSE,   ",") then
      writeln(" ***** parseJson() does not work as expected. (2)");
      okay := FALSE;
    end if;

    if  not parseJsonRaisesRangeError(" 1.0,",   integer)       or
        not parseJsonRaisesRangeError(" 1e10,",  integer)       or
        not parseJsonRaisesRangeError(" 1e-10,", integer)       or
        not parseJsonRaisesRangeError(" null,",  boolean)       or
        not parseJsonRaisesRangeError(" -1,",    directionType) or
        not parseJsonRaisesRangeError(" 5,",     directionType) then
      writeln(" ***** parseJson() does not raise RANGE_ERROR.");
      okay := FALSE;
    end if;

    if okay then
      writeln("The function parseJson works correctly.");
    end if;
  end func;


const proc: checkFromJson is func
  local
    var boolean: okay is TRUE;
    var stringIntegerStruct2: testStruct is stringIntegerStruct2.value;
  begin
    if  fromJson("\"\"",        string) <> "" or
        fromJson("\"\\\"\"",    string) <> "\"" or
        fromJson("\"\\\\\"",    string) <> "\\" or
        fromJson("\"\\/\"",     string) <> "/" or
        fromJson("\"\\b\"",     string) <> "\b" or
        fromJson("\"\\f\"",     string) <> "\f" or
        fromJson("\"\\n\"",     string) <> "\n" or
        fromJson("\"\\r\"",     string) <> "\r" or
        fromJson("\"\\t\"",     string) <> "\t" or
        fromJson("\"\\u0000\"", string) <> "\0;" or
        fromJson("\"\\u001f\"", string) <> "\31;" or
        fromJson("\"\\u007f\"", string) <> "\127;" or
        fromJson("\"\\u0080\"", string) <> "\128;" or
        fromJson("\"\\u009f\"", string) <> "\159;" or
        fromJson("\" \"",       string) <> " " or
        fromJson("\"!\"",       string) <> "!" or
        fromJson("\"0\"",       string) <> "0" or
        fromJson("\"A\"",       string) <> "A" or
        fromJson("\"a\"",       string) <> "a" or
        fromJson("\"~\"",       string) <> "~" or
        fromJson("\"\160;\"",   string) <> "\160;" or
        fromJson("\"ÿ\"",       string) <> "ÿ" or
        fromJson("\"€\"",       string) <> "€" then
      writeln(" ***** fromJson(aString, string) does not work as expected. (1)");
      okay := FALSE;
    end if;

    if  fromJson("\"0123456789\"", string) <> "0123456789" or
        fromJson("\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"", string) <> "ABCDEFGHIJKLMNOPQRSTUVWXYZ" or
        fromJson("\"abcdefghijklmnopqrstuvwxyz\"", string) <> "abcdefghijklmnopqrstuvwxyz" or
        fromJson("\" !\\\"#$%&'()*+,-.\\/:;<=>?@[\\\\]^_`{|}~\"", string) <>
                              " !\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~" or
        fromJson("\"¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿\"", string) <>
                              "¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿" or
        fromJson("\"ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞß\"", string) <>
                              "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞß" or
        fromJson("\"àáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ\"", string) <>
                              "àáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ" or
        fromJson("\"\\\"\\\\\\/\\b\\f\\n\\r\\t\\u0000\\u001f\\u007f\\u0080\\u009f !0Aa~\160;ÿ€\"", string) <>
                 "\"\\/\b\f\n\r\t\0;\31;\127;\128;\159; !0Aa~\160;ÿ€" then
      writeln(" ***** fromJson(aString, string) does not work as expected. (2)");
      okay := FALSE;
    end if;

    if  fromJson("\"\\\"\"",    char) <> '\"' or
        fromJson("\"\\\\\"",    char) <> '\\' or
        fromJson("\"\\/\"",     char) <> '/' or
        fromJson("\"\\b\"",     char) <> '\b' or
        fromJson("\"\\f\"",     char) <> '\f' or
        fromJson("\"\\n\"",     char) <> '\n' or
        fromJson("\"\\r\"",     char) <> '\r' or
        fromJson("\"\\t\"",     char) <> '\t' or
        fromJson("\"\\u0000\"", char) <> '\0;' or
        fromJson("\"\\u001f\"", char) <> '\31;' or
        fromJson("\"\\u007f\"", char) <> '\127;' or
        fromJson("\"\\u0080\"", char) <> '\128;' or
        fromJson("\"\\u009f\"", char) <> '\159;' or
        fromJson("\" \"",       char) <> ' ' or
        fromJson("\"!\"",       char) <> '!' or
        fromJson("\"0\"",       char) <> '0' or
        fromJson("\"A\"",       char) <> 'A' or
        fromJson("\"a\"",       char) <> 'a' or
        fromJson("\"~\"",       char) <> '~' or
        fromJson("\"\160;\"",   char) <> '\160;' or
        fromJson("\"ÿ\"",       char) <> 'ÿ' or
        fromJson("\"€\"",       char) <> '€' then
      writeln(" ***** fromJson(aString, char) does not work as expected.");
      okay := FALSE;
    end if;

    if  fromJson("-9223372036854775808", integer) <>        integer.first or
        fromJson("-9223372036854775807", integer) <> -9223372036854775807 or
        fromJson(           "-12345678", integer) <>            -12345678 or
        fromJson(                  "-1", integer) <>                   -1 or
        fromJson(                  "-0", integer) <>                    0 or
        fromJson(                   "0", integer) <>                    0 or
        fromJson(            "12345678", integer) <>             12345678 or
        fromJson( "9223372036854775807", integer) <>  9223372036854775807 then
      writeln(" ***** fromJson(aString, integer) does not work as expected.");
      okay := FALSE;
    end if;

    if  fromJson("-9223372036854775809", bigInteger) <> -9223372036854775809_ or
        fromJson("-9223372036854775808", bigInteger) <> -9223372036854775808_ or
        fromJson("-9223372036854775807", bigInteger) <> -9223372036854775807_ or
        fromJson(           "-12345678", bigInteger) <>            -12345678_ or
        fromJson(                  "-1", bigInteger) <>                   -1_ or
        fromJson(                  "-0", bigInteger) <>                    0_ or
        fromJson(                   "0", bigInteger) <>                    0_ or
        fromJson(            "12345678", bigInteger) <>             12345678_ or
        fromJson( "9223372036854775807", bigInteger) <>  9223372036854775807_ or
        fromJson( "9223372036854775808", bigInteger) <>  9223372036854775808_ then
      writeln(" ***** fromJson(aString, bigInteger) does not work as expected.");
      okay := FALSE;
    end if;

    if  fromJson( "0",      float) <>  0.0     or
        fromJson( "0.0",    float) <>  0.0     or
        fromJson( "1.2345", float) <>  1.2345  or
        fromJson( "-0",     float) <>  0.0     or
        fromJson( "-0.0",   float) <>  0.0     or
        fromJson("-1.2345", float) <> -1.2345  or
        fromJson( "3.1415", float) <>  3.1415  or
        fromJson( "1e10",   float) <>  1.0e10  or
        fromJson( "1e-10",  float) <>  1.0e-10 then
      writeln(" ***** fromJson(aString, float) does not work as expected.");
      okay := FALSE;
    end if;

    if  fromJson("false", boolean) <> FALSE or
        fromJson("true",  boolean) <> TRUE  then
      writeln(" ***** fromJson(aString, boolean) does not work as expected.");
      okay := FALSE;
    end if;

    if  fromJson("0", directionType) <> STAY  or
        fromJson("1", directionType) <> UP    or
        fromJson("2", directionType) <> DOWN  or
        fromJson("3", directionType) <> LEFT  or
        fromJson("4", directionType) <> RIGHT then
      writeln(" ***** fromJson(aString, enumeration) does not work as expected.");
      okay := FALSE;
    end if;

    if  fromJson("[]",                    array string)  <> 0 times ""      or
        fromJson("[\"a\", \"b\"]",        array string)  <> [] ("a", "b")   or
        fromJson("[\"\\r\", \"\\n\"]",    array string)  <> [] ("\r", "\n") or
        fromJson("[]",                    array integer) <> 0 times 0       or
        fromJson("[1, 2, 3]",             array integer) <> [] (1, 2, 3)    or
        fromJson("[\"1\", \"2\", \"3\"]", array integer) <> [] (1, 2, 3)    or
        fromJson("[]",                    array float)   <> 0 times 0.0     or
        fromJson("[1.2, 3.4]",            array float)   <> [] (1.2, 3.4)   or
        fromJson("[\"1.2\", \"3.4\"]",    array float)   <> [] (1.2, 3.4)   or
        fromJson("[[\"a\", \"b\"], [\"c\", \"d\"]]",      stringArray2)  <> [] ([] ("a", "b"), [] ("c", "d"))             or
        fromJson("[[\"\\b\",\"\\t\"],[\"\\r\",\"\\n\"]]", stringArray2)  <> [] ([] ("\b", "\t"), [] ("\r", "\n"))         or
        fromJson("[[1, 2, 3], [4, 5, 6], [7, 8, 9]]",     integerArray2) <> [] ([] (1, 2, 3), [] (4, 5, 6), [] (7, 8, 9)) or
        fromJson("[[\"1\", \"2\"], [\"3\", \"4\"]]",      integerArray2) <> [] ([] (1, 2), [] (3, 4))                     or
        fromJson("[[1.2, 3.4], [5.6, 7.8]]",              floatArray2)   <> [] ([] (1.2, 3.4), [] (5.6, 7.8))             or
        fromJson("[[\"1\", \"2\"], [\"3\", \"4\"]]",      floatArray2)   <> [] ([] (1.0, 2.0), [] (3.0, 4.0))             then
      writeln(" ***** fromJson does not work as expected. (3)");
      okay := FALSE;
    end if;

    if  fromJson("{\"one\":\"1\",\"three\":\"3\",\"two\":\"2\"}", stringStringHash)  <> [] (["one" : "1"], ["two" : "2"], ["three" : "3"]) or
        fromJson("{\"one\":1,\"three\":3,\"two\":2}",             stringIntegerHash) <> [] (["one" : 1],   ["two" : 2],   ["three" : 3])   or
        fromJson("{\"one\":1.0,\"three\":3.0,\"two\":2.0}",       stringFloatHash)   <> [] (["one" : 1.0], ["two" : 2.0], ["three" : 3.0]) then
      writeln(" ***** fromJson does not work as expected. (4)");
      okay := FALSE;
    end if;

    if  fromJson("[]",     bitset) <> {}  or
        fromJson("[1]",    bitset) <> {1} or
        fromJson("[1, 2]", bitset) <> {1, 2} then
      writeln(" ***** fromJson does not work as expected. (5)");
      okay := FALSE;
    end if;

    if  fromJson("[]",             set of string) <> (set of string).value or
        fromJson("[\"1\"]",        set of string) <> {"1"} or
        fromJson("[\"1\", \"2\"]", set of string) <> {"1", "2"} then
      writeln(" ***** fromJson does not work as expected. (6)");
      okay := FALSE;
    end if;

    if  fromJson("{\"numerator\":1,\"denominator\":3}",  rational) <>  1 / 3 or
        fromJson("{\"numerator\":3,\"denominator\":5}",  rational) <>  3 / 5 or
        fromJson("{\"numerator\":1,\"denominator\":0}",  rational) <>  1 / 0 or
        fromJson("{\"numerator\":-1,\"denominator\":0}", rational) <> -1 / 0 or
        fromJson("{\"numerator\":0,\"denominator\":0}",  rational) <>  0 / 0 then
      writeln(" ***** fromJson(x, rational) does not work as expected.");
      okay := FALSE;
    end if;

    if  fromJson("{\"numerator\":1,\"denominator\":3}", bigRational) <> 1_ / 3_ or
        fromJson("{\"numerator\":3,\"denominator\":5}", bigRational) <> 3_ / 5_ then
      writeln(" ***** fromJson(x, bigRational) does not work as expected.");
      okay := FALSE;
    end if;

    if  fromJson("{\"re\":0.0,\"im\":0.0}",   complex) <> complex( 0.0,  0.0) or
        fromJson("{\"re\":1.2,\"im\":3.4}",   complex) <> complex( 1.2,  3.4) or
        fromJson("{\"re\":-1.2,\"im\":-3.4}", complex) <> complex(-1.2, -3.4) then
      writeln(" ***** fromJson(x, complex) does not work as expected.");
      okay := FALSE;
    end if;

    if  fromJson("[{\"numerator\":1,\"denominator\":3},{\"numerator\":3,\"denominator\":5}]", array rational) <> [] (1 / 3, 3 / 5) then
      writeln(" ***** fromJson(x, array rational) does not work as expected.");
      okay := FALSE;
    end if;

    if  fromJson("[{\"re\":1.2,\"im\":3.4},{\"re\":5.6,\"im\":7.8}]", array complex) <> [] (complex(1.2, 3.4), complex(5.6, 7.8)) then
      writeln(" ***** fromJson(x, array complex) does not work as expected.");
      okay := FALSE;
    end if;

    testStruct := fromJson("{\"for\":\"testName\",\"number\":987654321}", stringIntegerStruct2);
    if testStruct.name <> "testName" or testStruct.number <> 987654321 then
      writeln(" ***** fromJson(x, stringIntegerStruct2) does not work as expected.");
      okay := FALSE;
    end if;

    if okay then
      writeln("The function fromJson works correctly.");
    end if;
  end func;


const proc: checkToJson is func
  local
    var boolean: okay is TRUE;
    var stringIntegerStruct2: testStruct is stringIntegerStruct2.value;
  begin
    if  toJson("")      <> "\"\"" or
        toJson("\"")    <> "\"\\\"\"" or
        toJson("\\")    <> "\"\\\\\"" or
        toJson("/")     <> "\"\\/\"" or
        toJson("\b")    <> "\"\\b\"" or
        toJson("\f")    <> "\"\\f\"" or
        toJson("\n")    <> "\"\\n\"" or
        toJson("\r")    <> "\"\\r\"" or
        toJson("\t")    <> "\"\\t\"" or
        toJson("\0;")   <> "\"\\u0000\"" or
        toJson("\31;")  <> "\"\\u001f\"" or
        toJson("\127;") <> "\"\\u007f\"" or
        toJson("\128;") <> "\"\\u0080\"" or
        toJson("\159;") <> "\"\\u009f\"" or
        toJson(" ")     <> "\" \"" or
        toJson("!")     <> "\"!\"" or
        toJson("0")     <> "\"0\"" or
        toJson("A")     <> "\"A\"" or
        toJson("a")     <> "\"a\"" or
        toJson("~")     <> "\"~\"" or
        toJson("\160;") <> "\"\160;\"" or
        toJson("ÿ")     <> "\"ÿ\"" or
        toJson("€")     <> "\"€\"" then
      writeln(" ***** toJson(aString) does not work as expected. (1)");
      okay := FALSE;
    end if;

    if  toJson("0123456789") <> "\"0123456789\"" or
        toJson("ABCDEFGHIJKLMNOPQRSTUVWXYZ") <> "\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"" or
        toJson("abcdefghijklmnopqrstuvwxyz") <> "\"abcdefghijklmnopqrstuvwxyz\"" or
        toJson(" !\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~") <>
               "\" !\\\"#$%&'()*+,-.\\/:;<=>?@[\\\\]^_`{|}~\"" or
        toJson("¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿") <>
               "\"¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿\"" or
        toJson("ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞß") <>
               "\"ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞß\"" or
        toJson("àáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ") <>
               "\"àáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ\"" or
        toJson("\"\\/\b\f\n\r\t\0;\31;\127;\128;\159; !0Aa~\160;ÿ€") <>
               "\"\\\"\\\\\\/\\b\\f\\n\\r\\t\\u0000\\u001f\\u007f\\u0080\\u009f !0Aa~\160;ÿ€\"" then
      writeln(" ***** toJson(aString) does not work as expected. (2)");
      okay := FALSE;
    end if;

    if  toJson('\"')    <> "\"\\\"\"" or
        toJson('\\')    <> "\"\\\\\"" or
        toJson('/')     <> "\"\\/\"" or
        toJson('\b')    <> "\"\\b\"" or
        toJson('\f')    <> "\"\\f\"" or
        toJson('\n')    <> "\"\\n\"" or
        toJson('\r')    <> "\"\\r\"" or
        toJson('\t')    <> "\"\\t\"" or
        toJson('\0;')   <> "\"\\u0000\"" or
        toJson('\31;')  <> "\"\\u001f\"" or
        toJson('\127;') <> "\"\\u007f\"" or
        toJson('\128;') <> "\"\\u0080\"" or
        toJson('\159;') <> "\"\\u009f\"" or
        toJson(' ')     <> "\" \"" or
        toJson('!')     <> "\"!\"" or
        toJson('0')     <> "\"0\"" or
        toJson('A')     <> "\"A\"" or
        toJson('a')     <> "\"a\"" or
        toJson('~')     <> "\"~\"" or
        toJson('\160;') <> "\"\160;\"" or
        toJson('ÿ')     <> "\"ÿ\"" or
        toJson('€')     <> "\"€\"" then
      writeln(" ***** toJson(aChar) does not work as expected.");
      okay := FALSE;
    end if;

    if  toJson(       integer.first) <> "-9223372036854775808" or
        toJson(-9223372036854775807) <> "-9223372036854775807" or
        toJson(           -12345678) <>            "-12345678" or
        toJson(                  -1) <>                   "-1" or
        toJson(                   0) <>                    "0" or
        toJson(            12345678) <>             "12345678" or
        toJson( 9223372036854775807) <>  "9223372036854775807" then
      writeln(" ***** toJson(anInteger) does not work as expected.");
      okay := FALSE;
    end if;

    if  toJson(-9223372036854775809_) <> "-9223372036854775809" or
        toJson(-9223372036854775808_) <> "-9223372036854775808" or
        toJson(-9223372036854775807_) <> "-9223372036854775807" or
        toJson(           -12345678_) <>            "-12345678" or
        toJson(                  -1_) <>                   "-1" or
        toJson(                   0_) <>                    "0" or
        toJson(            12345678_) <>             "12345678" or
        toJson( 9223372036854775807_) <>  "9223372036854775807" or
        toJson( 9223372036854775808_) <>  "9223372036854775808" then
      writeln(" ***** toJson(aBigInteger) does not work as expected.");
      okay := FALSE;
    end if;

    if  toJson( 0.0   ) <>  "0.0"    or
        toJson( 1.2345) <>  "1.2345" or
        toJson(-1.2345) <> "-1.2345" or
        toJson(3.1415)   <> "3.1415" then
      writeln(" ***** toJson(aFloat) does not work as expected.");
      okay := FALSE;
    end if;

    if  toJson(FALSE) <> "false" or
        toJson(TRUE)  <> "true" then
      writeln(" ***** toJson(aBoolean) does not work as expected.");
      okay := FALSE;
    end if;

    if  toJson(STAY)  <> "0" or
        toJson(UP)    <> "1" or
        toJson(DOWN)  <> "2" or
        toJson(LEFT)  <> "3" or
        toJson(RIGHT) <> "4" then
      writeln(" ***** toJson(enumeration) does not work as expected.");
      okay := FALSE;
    end if;

    if  toJson([] ("a", "b"))    <> "[\"a\",\"b\"]"     or
        toJson([] ("\r", "\n"))  <> "[\"\\r\",\"\\n\"]" or
        toJson([] (1, 2, 3))     <> "[1,2,3]"           or
        toJson([] (1.2, 3.4))    <> "[1.2,3.4]"         or
        toJson([] (FALSE, TRUE)) <> "[false,true]"      or
        toJson([] ([] ("a", "b"), [] ("c", "d")))             <> "[[\"a\",\"b\"],[\"c\",\"d\"]]"         or
        toJson([] ([] ("\b", "\t"), [] ("\r", "\n")))         <> "[[\"\\b\",\"\\t\"],[\"\\r\",\"\\n\"]]" or
        toJson([] ([] (1, 2, 3), [] (4, 5, 6), [] (7, 8, 9))) <> "[[1,2,3],[4,5,6],[7,8,9]]"             or
        toJson([] ([] (1.2, 3.4), [] (5.6, 7.8)))             <> "[[1.2,3.4],[5.6,7.8]]"                 then
      writeln(" ***** toJson does not work as expected. (3)");
      okay := FALSE;
    end if;

    if  toJson([] (["one" : "1"], ["two" : "2"], ["three" : "3"])) <> "{\"one\":\"1\",\"three\":\"3\",\"two\":\"2\"}" or
        toJson([] (["one" : '1'], ["two" : '2'], ["three" : '3'])) <> "{\"one\":\"1\",\"three\":\"3\",\"two\":\"2\"}" or
        toJson([] (["one" : 1],   ["two" : 2],   ["three" : 3]))   <> "{\"one\":1,\"three\":3,\"two\":2}"             or
        toJson([] (["one" : 1.0], ["two" : 2.0], ["three" : 3.0])) <> "{\"one\":1.0,\"three\":3.0,\"two\":2.0}"       then
      writeln(" ***** toJson(hash[string]) does not work as expected.");
      okay := FALSE;
    end if;

    if   toJson({})     <> "[]"     or
         toJson({1})    <> "[1]"    or
        (toJson({1, 2}) <> "[1,2]"  and
         toJson({1, 2}) <> "[2,1]") then
      writeln(" ***** toJson(bitset) does not work as expected.");
      okay := FALSE;
    end if;

    if   toJson((set of string).value) <> "[]"             or
         toJson({"1"})                 <> "[\"1\"]"        or
        (toJson({"1", "2"})            <> "[\"1\",\"2\"]"  and
         toJson({"1", "2"})            <> "[\"2\",\"1\"]") then
      writeln(" ***** toJson(set of string) does not work as expected.");
      okay := FALSE;
    end if;

    if  toJson(1 / 3)  <> "{\"numerator\":1,\"denominator\":3}"  or
        toJson(3 / 5)  <> "{\"numerator\":3,\"denominator\":5}"  or
        toJson(1 / 0)  <> "{\"numerator\":1,\"denominator\":0}"  or
        toJson(-1 / 0) <> "{\"numerator\":-1,\"denominator\":0}" or
        toJson(0 / 0)  <> "{\"numerator\":0,\"denominator\":0}"  then
      writeln(" ***** toJson(rational) does not work as expected.");
      okay := FALSE;
    end if;

    if  toJson(1_ / 3_) <> "{\"numerator\":1,\"denominator\":3}" or
        toJson(3_ / 5_) <> "{\"numerator\":3,\"denominator\":5}" then
      writeln(" ***** toJson(bigRational) does not work as expected.");
      okay := FALSE;
    end if;

    if  toJson(complex(0.0, 0.0))   <> "{\"re\":0.0,\"im\":0.0}"   or
        toJson(complex(1.2, 3.4))   <> "{\"re\":1.2,\"im\":3.4}"   or
        toJson(complex(-1.2, -3.4)) <> "{\"re\":-1.2,\"im\":-3.4}" then
      writeln(" ***** toJson(complex) does not work as expected.");
      okay := FALSE;
    end if;

    if  toJson([] (1 / 3, 3 / 5)) <> "[{\"numerator\":1,\"denominator\":3},{\"numerator\":3,\"denominator\":5}]" then
      writeln(" ***** toJson(array rational) does not work as expected.");
      okay := FALSE;
    end if;

    if  toJson([] (complex(1.2, 3.4), complex(5.6, 7.8))) <> "[{\"re\":1.2,\"im\":3.4},{\"re\":5.6,\"im\":7.8}]" then
      writeln(" ***** toJson(array complex) does not work as expected.");
      okay := FALSE;
    end if;

    testStruct.name := "testName";
    testStruct.number := 987654321;
    if toJson(testStruct) <> "{\"for\":\"testName\",\"number\":987654321}" then
      writeln(" ***** toJson(x, stringIntegerStruct2) does not work as expected.");
      okay := FALSE;
    end if;

    if okay then
      writeln("The function toJson works correctly.");
    end if;
  end func;


const proc: main is func
  begin
    writeln;
    checkGetJsonString;
    checkGetJsonNumber;
    checkGetJsonSymbol;
    checkJsonDom;
    checkStructElementFunctions;
    checkParseJson;
    checkFromJson;
    checkToJson;
  end func;
