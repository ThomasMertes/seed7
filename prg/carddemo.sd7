
(********************************************************************)
(*                                                                  *)
(*  carddemo.sd7  Demonstate the playing cards of the french deck   *)
(*  Copyright (C) 2006  Thomas Mertes                               *)
(*                                                                  *)
(*  This program is free software; you can redistribute it and/or   *)
(*  modify it under the terms of the GNU General Public License as  *)
(*  published by the Free Software Foundation; either version 2 of  *)
(*  the License, or (at your option) any later version.             *)
(*                                                                  *)
(*  This program is distributed in the hope that it will be useful, *)
(*  but WITHOUT ANY WARRANTY; without even the implied warranty of  *)
(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   *)
(*  GNU General Public License for more details.                    *)
(*                                                                  *)
(*  You should have received a copy of the GNU General Public       *)
(*  License along with this program; if not, write to the           *)
(*  Free Software Foundation, Inc., 51 Franklin Street,             *)
(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)
(*                                                                  *)
(********************************************************************)


$ include "seed7_05.s7i";
  include "float.s7i";
  include "draw.s7i";
  include "keybd.s7i";
  include "cards.s7i";
  include "time.s7i";


const integer: PICTURE_SCALE is 1;


const proc: move_card (in PRIMITIVE_WINDOW: aCard) is func
  local
    var integer: cursorXpos is 0;
    var integer: cursorYpos is 0;
    var integer: cardXpos is 0;
    var integer: cardYpos is 0;
    var PRIMITIVE_WINDOW: backup is PRIMITIVE_WINDOW.value;
  begin
    repeat
      cursorXpos := pointerXPos(curr_win) - width(aCard) div 2;
      cursorYpos := pointerYPos(curr_win) - height(aCard) div 2;
      # writeln("X=" <& cursorXpos <& ", Y=" <& cursorYpos);
      if cursorXpos <> cardXpos or
          cursorYpos <> cardYpos then
        put(cardXpos, cardYpos, backup, PSET);
        cardXpos := cursorXpos;
        cardYpos := cursorYpos;
        backup := getPixmap(cardXpos, cardYpos,
            width(aCard), height(aCard));
        put(cardXpos, cardYpos, aCard, PSET);
        DRAW_FLUSH;
      end if;
      wait(30000 . MYCRO_SECONDS);
    until not buttonPressed(KEYBOARD, KEY_MOUSE1);
  end func;


const func PRIMITIVE_WINDOW: take_card is func
  result
    var PRIMITIVE_WINDOW: result is PRIMITIVE_WINDOW.value;
  local
    var integer: line is 0;
    var integer: column is 0;
  begin
    line   := succ((getypos(KEYBOARD) - 4) div 100);
    column := succ((getxpos(KEYBOARD) - 4) div 75);
    case line of
      when {1}:
        case column of
          when { 1}: result := ace_of_spades;
          when { 2}: result := king_of_spades;
          when { 3}: result := queen_of_spades;
          when { 4}: result := jack_of_spades;
          when { 5}: result := ten_of_spades;
          when { 6}: result := nine_of_spades;
          when { 7}: result := eight_of_spades;
          when { 8}: result := seven_of_spades;
          when { 9}: result := six_of_spades;
          when {10}: result := five_of_spades;
          when {11}: result := four_of_spades;
          when {12}: result := three_of_spades;
          when {13}: result := two_of_spades;
        end case;
      when {2}:
        case column of
          when { 1}: result := ace_of_hearts;
          when { 2}: result := king_of_hearts;
          when { 3}: result := queen_of_hearts;
          when { 4}: result := jack_of_hearts;
          when { 5}: result := ten_of_hearts;
          when { 6}: result := nine_of_hearts;
          when { 7}: result := eight_of_hearts;
          when { 8}: result := seven_of_hearts;
          when { 9}: result := six_of_hearts;
          when {10}: result := five_of_hearts;
          when {11}: result := four_of_hearts;
          when {12}: result := three_of_hearts;
          when {13}: result := two_of_hearts;
        end case;
      when {3}:
        case column of
          when { 1}: result := ace_of_diamonds;
          when { 2}: result := king_of_diamonds;
          when { 3}: result := queen_of_diamonds;
          when { 4}: result := jack_of_diamonds;
          when { 5}: result := ten_of_diamonds;
          when { 6}: result := nine_of_diamonds;
          when { 7}: result := eight_of_diamonds;
          when { 8}: result := seven_of_diamonds;
          when { 9}: result := six_of_diamonds;
          when {10}: result := five_of_diamonds;
          when {11}: result := four_of_diamonds;
          when {12}: result := three_of_diamonds;
          when {13}: result := two_of_diamonds;
        end case;
      when {4}:
        case column of
          when { 1}: result := ace_of_clubs;
          when { 2}: result := king_of_clubs;
          when { 3}: result := queen_of_clubs;
          when { 4}: result := jack_of_clubs;
          when { 5}: result := ten_of_clubs;
          when { 6}: result := nine_of_clubs;
          when { 7}: result := eight_of_clubs;
          when { 8}: result := seven_of_clubs;
          when { 9}: result := six_of_clubs;
          when {10}: result := five_of_clubs;
          when {11}: result := four_of_clubs;
          when {12}: result := three_of_clubs;
          when {13}: result := two_of_clubs;
        end case;
    end case;
  end func;


const proc: main is func
  begin
    screen(980 * PICTURE_SCALE, 405 * PICTURE_SCALE);
    clear(curr_win, white);
    (* screen := open(curr_win, 16); *)
    KEYBOARD := GRAPH_KEYBOARD;
    initCardPixmaps(PICTURE_SCALE);
    put(  4 * PICTURE_SCALE,   4 * PICTURE_SCALE, ace_of_spades,     PSET);
    put( 79 * PICTURE_SCALE,   4 * PICTURE_SCALE, king_of_spades,    PSET);
    put(154 * PICTURE_SCALE,   4 * PICTURE_SCALE, queen_of_spades,   PSET);
    put(229 * PICTURE_SCALE,   4 * PICTURE_SCALE, jack_of_spades,    PSET);
    put(304 * PICTURE_SCALE,   4 * PICTURE_SCALE, ten_of_spades,     PSET);
    put(379 * PICTURE_SCALE,   4 * PICTURE_SCALE, nine_of_spades,    PSET);
    put(454 * PICTURE_SCALE,   4 * PICTURE_SCALE, eight_of_spades,   PSET);
    put(529 * PICTURE_SCALE,   4 * PICTURE_SCALE, seven_of_spades,   PSET);
    put(604 * PICTURE_SCALE,   4 * PICTURE_SCALE, six_of_spades,     PSET);
    put(679 * PICTURE_SCALE,   4 * PICTURE_SCALE, five_of_spades,    PSET);
    put(754 * PICTURE_SCALE,   4 * PICTURE_SCALE, four_of_spades,    PSET);
    put(829 * PICTURE_SCALE,   4 * PICTURE_SCALE, three_of_spades,   PSET);
    put(904 * PICTURE_SCALE,   4 * PICTURE_SCALE, two_of_spades,     PSET);
    put(  4 * PICTURE_SCALE, 104 * PICTURE_SCALE, ace_of_hearts,     PSET);
    put( 79 * PICTURE_SCALE, 104 * PICTURE_SCALE, king_of_hearts,    PSET);
    put(154 * PICTURE_SCALE, 104 * PICTURE_SCALE, queen_of_hearts,   PSET);
    put(229 * PICTURE_SCALE, 104 * PICTURE_SCALE, jack_of_hearts,    PSET);
    put(304 * PICTURE_SCALE, 104 * PICTURE_SCALE, ten_of_hearts,     PSET);
    put(379 * PICTURE_SCALE, 104 * PICTURE_SCALE, nine_of_hearts,    PSET);
    put(454 * PICTURE_SCALE, 104 * PICTURE_SCALE, eight_of_hearts,   PSET);
    put(529 * PICTURE_SCALE, 104 * PICTURE_SCALE, seven_of_hearts,   PSET);
    put(604 * PICTURE_SCALE, 104 * PICTURE_SCALE, six_of_hearts,     PSET);
    put(679 * PICTURE_SCALE, 104 * PICTURE_SCALE, five_of_hearts,    PSET);
    put(754 * PICTURE_SCALE, 104 * PICTURE_SCALE, four_of_hearts,    PSET);
    put(829 * PICTURE_SCALE, 104 * PICTURE_SCALE, three_of_hearts,   PSET);
    put(904 * PICTURE_SCALE, 104 * PICTURE_SCALE, two_of_hearts,     PSET);
    put(  4 * PICTURE_SCALE, 204 * PICTURE_SCALE, ace_of_diamonds,   PSET);
    put( 79 * PICTURE_SCALE, 204 * PICTURE_SCALE, king_of_diamonds,  PSET);
    put(154 * PICTURE_SCALE, 204 * PICTURE_SCALE, queen_of_diamonds, PSET);
    put(229 * PICTURE_SCALE, 204 * PICTURE_SCALE, jack_of_diamonds,  PSET);
    put(304 * PICTURE_SCALE, 204 * PICTURE_SCALE, ten_of_diamonds,   PSET);
    put(379 * PICTURE_SCALE, 204 * PICTURE_SCALE, nine_of_diamonds,  PSET);
    put(454 * PICTURE_SCALE, 204 * PICTURE_SCALE, eight_of_diamonds, PSET);
    put(529 * PICTURE_SCALE, 204 * PICTURE_SCALE, seven_of_diamonds, PSET);
    put(604 * PICTURE_SCALE, 204 * PICTURE_SCALE, six_of_diamonds,   PSET);
    put(679 * PICTURE_SCALE, 204 * PICTURE_SCALE, five_of_diamonds,  PSET);
    put(754 * PICTURE_SCALE, 204 * PICTURE_SCALE, four_of_diamonds,  PSET);
    put(829 * PICTURE_SCALE, 204 * PICTURE_SCALE, three_of_diamonds, PSET);
    put(904 * PICTURE_SCALE, 204 * PICTURE_SCALE, two_of_diamonds,   PSET);
    put(  4 * PICTURE_SCALE, 304 * PICTURE_SCALE, ace_of_clubs,      PSET);
    put( 79 * PICTURE_SCALE, 304 * PICTURE_SCALE, king_of_clubs,     PSET);
    put(154 * PICTURE_SCALE, 304 * PICTURE_SCALE, queen_of_clubs,    PSET);
    put(229 * PICTURE_SCALE, 304 * PICTURE_SCALE, jack_of_clubs,     PSET);
    put(304 * PICTURE_SCALE, 304 * PICTURE_SCALE, ten_of_clubs,      PSET);
    put(379 * PICTURE_SCALE, 304 * PICTURE_SCALE, nine_of_clubs,     PSET);
    put(454 * PICTURE_SCALE, 304 * PICTURE_SCALE, eight_of_clubs,    PSET);
    put(529 * PICTURE_SCALE, 304 * PICTURE_SCALE, seven_of_clubs,    PSET);
    put(604 * PICTURE_SCALE, 304 * PICTURE_SCALE, six_of_clubs,      PSET);
    put(679 * PICTURE_SCALE, 304 * PICTURE_SCALE, five_of_clubs,     PSET);
    put(754 * PICTURE_SCALE, 304 * PICTURE_SCALE, four_of_clubs,     PSET);
    put(829 * PICTURE_SCALE, 304 * PICTURE_SCALE, three_of_clubs,    PSET);
    put(904 * PICTURE_SCALE, 304 * PICTURE_SCALE, two_of_clubs,      PSET);
    DRAW_FLUSH;
    while getc(KEYBOARD) = KEY_MOUSE1 do
      move_card(take_card);
    end while;
  end func;
