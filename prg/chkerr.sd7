
(********************************************************************)
(*                                                                  *)
(*  chkerr.sd7    Checks for parsing errors                         *)
(*  Copyright (C) 2025  Thomas Mertes                               *)
(*                                                                  *)
(*  This program is free software; you can redistribute it and/or   *)
(*  modify it under the terms of the GNU General Public License as  *)
(*  published by the Free Software Foundation; either version 2 of  *)
(*  the License, or (at your option) any later version.             *)
(*                                                                  *)
(*  This program is distributed in the hope that it will be useful, *)
(*  but WITHOUT ANY WARRANTY; without even the implied warranty of  *)
(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   *)
(*  GNU General Public License for more details.                    *)
(*                                                                  *)
(*  You should have received a copy of the GNU General Public       *)
(*  License along with this program; if not, write to the           *)
(*  Free Software Foundation, Inc., 51 Franklin Street,             *)
(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)
(*                                                                  *)
(********************************************************************)


$ include "seed7_05.s7i";
  include "progs.s7i";
  include "unicode.s7i";


const proc: show (in parseError: error) is func
  begin
    writeln("error: " <& error.error);
    writeln("fileName: " <& error.fileName);
    writeln("lineNumber: " <& error.lineNumber);
    writeln("columnNumber: " <& error.columnNumber);
    writeln("message: " <& error.message);
    writeln("errorLine: " <& literal(error.errorLine));
  end func;


const func boolean: checkError (in string: testProgram, in integer: errorNum,
    in errorType: errType, in integer: lineNumber, in integer: columnNumber,
    in string: message, in string: errorLine) is func
  result
    var boolean: okay is TRUE;
  local
    var program: aProgram is program.value;
    var parseError: error is parseError.value;
  begin
    block
      aProgram := parseStri(testProgram);
    exception
      catch MEMORY_ERROR: noop;
    end block;
    if aProgram <> program.EMPTY then
      if errorCount(aProgram) >= errorNum then
        error := getError(aProgram, errorNum);
        if error.error <> errType or
            error.lineNumber <> lineNumber or
            error.columnNumber <> columnNumber or
            error.message <> message or
            error.errorLine <> toUtf8(errorLine) then
          show(error);
          writeln(errorCount(aProgram) <& " errors.");
          writeln("testProgram:");
          writeln(literal(testProgram));
          okay := FALSE;
        end if;
      else
        writeln("No error triggered with: " <& errorLine);
        okay := FALSE;
      end if;
    end if;
  end func;


const func boolean: checkError1 (in string: testProgram, in errorType: errType,
    in integer: lineNumber, in integer: columnNumber, in string: message,
    in string: errorLine) is
  return checkError(testProgram, 1, errType, lineNumber, columnNumber,
                    message, errorLine);


const func boolean: checkError2 (in string: testProgram, in errorType: errType,
    in integer: lineNumber, in integer: columnNumber, in string: message,
    in string: errorLine) is
  return checkError(testProgram, 2, errType, lineNumber, columnNumber,
                    message, errorLine);


const func boolean: checkError (in bstring: testProgram, in integer: errorNum,
    in errorType: errType, in integer: lineNumber, in integer: columnNumber,
    in string: message, in string: errorLine) is func
  result
    var boolean: okay is TRUE;
  local
    var program: aProgram is program.value;
    var parseError: error is parseError.value;
  begin
    block
      aProgram := parseStri(testProgram);
    exception
      catch MEMORY_ERROR: noop;
    end block;
    if aProgram <> program.EMPTY then
      if errorCount(aProgram) >= errorNum then
        error := getError(aProgram, errorNum);
        if error.error <> errType or
            error.lineNumber <> lineNumber or
            error.columnNumber <> columnNumber or
            error.message <> message or
            error.errorLine <> errorLine then
          show(error);
          writeln(errorCount(aProgram) <& " errors.");
          okay := FALSE;
        end if;
      else
        writeln("No error triggered with: " <& errorLine);
        okay := FALSE;
      end if;
    end if;
  end func;


const func boolean: checkError1 (in bstring: testProgram, in errorType: errType,
    in integer: lineNumber, in integer: columnNumber, in string: message,
    in string: errorLine) is
  return checkError(testProgram, 1, errType, lineNumber, columnNumber,
                    message, errorLine);


const func boolean: checkError2 (in bstring: testProgram, in errorType: errType,
    in integer: lineNumber, in integer: columnNumber, in string: message,
    in string: errorLine) is
  return checkError(testProgram, 2, errType, lineNumber, columnNumber,
                    message, errorLine);


const func boolean: checkEofEncountered is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1("",
                    EOF_ENCOUNTERED, 1, 1,
                    "\"END OF FILE\" encountered",
                    "") and
        checkError1(" ",
                    EOF_ENCOUNTERED, 1, 1,
                    "\"END OF FILE\" encountered",
                    " ") and
        checkError1("  ",
                    EOF_ENCOUNTERED, 1, 2,
                    "\"END OF FILE\" encountered",
                    "  ") and
        checkError1("\n",
                    EOF_ENCOUNTERED, 1, 1,
                    "\"END OF FILE\" encountered",
                    "") and
        checkError1("\n ",
                    EOF_ENCOUNTERED, 2, 1,
                    "\"END OF FILE\" encountered",
                    " ") and
        checkError1("\n  ",
                    EOF_ENCOUNTERED, 2, 2,
                    "\"END OF FILE\" encountered",
                    "  ") then
      okay := TRUE;
    else
      writeln(" *** EOF_ENCOUNTERED not reported correctly.");
    end if;
  end func;


const func boolean: checkCharIllegal is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1(bstring("\16#ef;\16#80;\16#80;"),
                    CHAR_ILLEGAL, 1, 3,
                    "Illegal character in text \"\\61440;\" (U+f000)",
                    "\16#ef;\16#80;\16#80;") and
        checkError1(bstring("\16#fe;\16#fe;"),
                    CHAR_ILLEGAL, 1, 2,
                    "Illegal character in text \"\\254;\" (U+00fe)",
                    "\16#fe;\16#fe;") and
        checkError1(bstring("\16#ff;\16#ff;"),
                    CHAR_ILLEGAL, 1, 2,
                    "Illegal character in text \"\\255;\" (U+00ff)",
                    "\16#ff;\16#ff;") and
        checkError1(bstring("\16#c2;\16#a0;"),
                    CHAR_ILLEGAL, 1, 2,
                    "Illegal character in text \"\\160;\" (U+00a0)",
                    "\16#c2;\16#a0;") and
        checkError1(bstring("\16#80;"),
                    CHAR_ILLEGAL, 1, 1,
                    "Illegal character in text \"\\128;\" (U+0080)",
                    "\16#80;") and
        checkError1(bstring("\16#bf;"),
                    CHAR_ILLEGAL, 1, 1,
                    "Illegal character in text \"\\191;\" (U+00bf)",
                    "\16#bf;") and
        checkError1("$names unicode;\n\
                    \¡",
                    CHAR_ILLEGAL, 2, 2,
                    "Illegal character in text \"\\161;\" (U+00a1)",
                    "¡") and
        checkError1("$names unicode;\n\
                    \Ö¡",
                    CHAR_ILLEGAL, 2, 4,
                    "Illegal character in text \"\\161;\" (U+00a1)",
                    "Ö¡") and
        checkError1("$names unicode;\n\
                    \÷",
                    CHAR_ILLEGAL, 2, 2,
                    "Illegal character in text \"\\247;\" (U+00f7)",
                    "÷") and
        checkError1(bstring("\16#c2;\16#80;"),
                    CHAR_ILLEGAL, 1, 2,
                    "Illegal character in text \"\\128;\" (U+0080)",
                    "\16#c2;\16#80;") and
        checkError1(bstring("\16#c2;\16#9f;"),
                    CHAR_ILLEGAL, 1, 2,
                    "Illegal character in text \"\\159;\" (U+009f)",
                    "\16#c2;\16#9f;") and
        checkError1("\0;;",
                    CHAR_ILLEGAL, 1, 1,
                    "Illegal character in text \"\\0;\" (U+0000)",
                    "\0;;") and
        checkError1("\a;;",
                    CHAR_ILLEGAL, 1, 1,
                    "Illegal character in text \"\\7;\" (U+0007)",
                    "\a;;") and
        checkError1("\b;;",
                    CHAR_ILLEGAL, 1, 1,
                    "Illegal character in text \"\\8;\" (U+0008)",
                    "\b;;") and
        checkError1("\31;;",
                    CHAR_ILLEGAL, 1, 1,
                    "Illegal character in text \"\\31;\" (U+001f)",
                    "\31;;") and
        checkError1("\16#80;;",
                    CHAR_ILLEGAL, 1, 3,
                    "Illegal character in text \"\\128;\" (U+0080)",
                    "\16#80;;") and
        checkError1("\16#9f;;",
                    CHAR_ILLEGAL, 1, 3,
                    "Illegal character in text \"\\159;\" (U+009f)",
                    "\16#9f;;") and
        checkError1("'\0;';",
                    CHAR_ILLEGAL, 1, 2,
                    "Illegal character in text \"\\0;\" (U+0000)",
                    "'\0;';") and
        checkError1("'\a;';",
                    CHAR_ILLEGAL, 1, 2,
                    "Illegal character in text \"\\7;\" (U+0007)",
                    "'\a;';") and
        checkError1("'\b;';",
                    CHAR_ILLEGAL, 1, 2,
                    "Illegal character in text \"\\8;\" (U+0008)",
                    "'\b;';") and
        checkError1("'\t;';",
                    CHAR_ILLEGAL, 1, 2,
                    "Illegal character in text \"\\9;\" (U+0009)",
                    "'\t;';") and
        checkError1("'\31;';",
                    CHAR_ILLEGAL, 1, 2,
                    "Illegal character in text \"\\31;\" (U+001f)",
                    "'\31;';") and
        checkError1("'\16#80;';",
                    CHAR_ILLEGAL, 1, 4,
                    "Illegal character in text \"\\128;\" (U+0080)",
                    "'\16#80;';") and
        checkError1("'\16#9f;';",
                    CHAR_ILLEGAL, 1, 4,
                    "Illegal character in text \"\\159;\" (U+009f)",
                    "'\16#9f;';") and
        checkError1("\"\0;\";",
                    CHAR_ILLEGAL, 1, 2,
                    "Illegal character in text \"\\0;\" (U+0000)",
                    "\"\0;\";") and
        checkError1("\"\a;\";",
                    CHAR_ILLEGAL, 1, 2,
                    "Illegal character in text \"\\7;\" (U+0007)",
                    "\"\a;\";") and
        checkError1("\"\b;\";",
                    CHAR_ILLEGAL, 1, 2,
                    "Illegal character in text \"\\8;\" (U+0008)",
                    "\"\b;\";") and
        checkError1("\"\t;\";",
                    CHAR_ILLEGAL, 1, 2,
                    "Illegal character in text \"\\9;\" (U+0009)",
                    "\"\t;\";") and
        checkError1("\"\31;\";",
                    CHAR_ILLEGAL, 1, 2,
                    "Illegal character in text \"\\31;\" (U+001f)",
                    "\"\31;\";") and
        checkError1("\"\16#80;\";",
                    CHAR_ILLEGAL, 1, 4,
                    "Illegal character in text \"\\128;\" (U+0080)",
                    "\"\16#80;\";") and
        checkError1("\"\16#9f;\";",
                    CHAR_ILLEGAL, 1, 4,
                    "Illegal character in text \"\\159;\" (U+009f)",
                    "\"\16#9f;\";") then
      okay := TRUE;
    else
      writeln(" *** CHAR_ILLEGAL not reported correctly.");
    end if;
  end func;


const func boolean: checkCommentOpen is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1("(* Unclosed comment",
                    COMMENTOPEN, 1, 0,
                    "Unclosed comment",
                    "(* Unclosed comment") and
        checkError1("(* a\n\
                    \(* b",
                    COMMENTOPEN, 2, 0,
                    "Unclosed comment",
                    "(* b") and
        checkError2("(* a\n\
                    \(* b",
                    COMMENTOPEN, 1, 0,
                    "Unclosed comment",
                    "(* a") then
      okay := TRUE;
    else
      writeln(" *** COMMENTOPEN not reported correctly.");
    end if;
  end func;


const func boolean: checkScannerErrors is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkEofEncountered and
        checkCharIllegal and
        checkCommentOpen then
      writeln("Scanner errors are reported correctly.");
      okay := TRUE;
    else
      writeln(" *** Scanner errors are not reported correctly.");
    end if;
  end func;


const func boolean: checkFileNotFound is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1("$ include \"\";",
                    FILENOTFOUND, 1, 13,
                    "Include file \"\" not found",
                    "$ include \"\";") and
        checkError1("$ include \".\";",
                    FILENOTFOUND, 1, 14,
                    "Include file \".\" not found",
                    "$ include \".\";") and
        checkError1("$ include \"/\";",
                    FILENOTFOUND, 1, 14,
                    "Include file \"/\" not found",
                    "$ include \"/\";") and
        checkError1("$ include \"qwtry\";",
                    FILENOTFOUND, 1, 18,
                    "Include file \"qwtry\" not found",
                    "$ include \"qwtry\";") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \include \"\";",
                    FILENOTFOUND, 2, 11,
                    "Include file \"\" not found",
                    "include \"\";") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \include \".\";",
                    FILENOTFOUND, 2, 12,
                    "Include file \".\" not found",
                    "include \".\";") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \include \"/\";",
                    FILENOTFOUND, 2, 12,
                    "Include file \"/\" not found",
                    "include \"/\";") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \include \"qwtry\";",
                    FILENOTFOUND, 2, 16,
                    "Include file \"qwtry\" not found",
                    "include \"qwtry\";") then
      okay := TRUE;
    else
      writeln(" *** FILENOTFOUND not reported correctly.");
    end if;
  end func;


const func boolean: checkWrongPathDelimiter is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1("$ include \"\\\\a\";",
                    WRONG_PATH_DELIMITER, 1, 16,
                    "Use / instead of \\ as path delimiter in \"\\\\a\"",
                    "$ include \"\\\\a\";") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \include \"\\\\a\";",
                    WRONG_PATH_DELIMITER, 2, 14,
                    "Use / instead of \\ as path delimiter in \"\\\\a\"",
                    "include \"\\\\a\";") and
        checkError1("$ library \"\\\\a\";",
                    WRONG_PATH_DELIMITER, 1, 16,
                    "Use / instead of \\ as path delimiter",
                    "$ library \"\\\\a\";") then
      okay := TRUE;
    else
      writeln(" *** WRONG_PATH_DELIMITER not reported correctly.");
    end if;
  end func;


const func boolean: checkEssentialIncludeFailed is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError2("$ include \"qwtry\";",
                    ESSENTIAL_INCLUDE_FAILED, 1, 18,
                    "Failed to include essential file. Parsing terminated.",
                    "$ include \"qwtry\";") then
      okay := TRUE;
    else
      writeln(" *** ESSENTIAL_INCLUDE_FAILED not reported correctly.");
    end if;
  end func;


const func boolean: checkIllegalPragma is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1("$info fee;",
                    ILLEGALPRAGMA, 1, 10,
                    "Illegal parameter \"fee\" in pragma \"info\"",
                    "$info fee;") and
        checkError1("$names fee;",
                    ILLEGALPRAGMA, 1, 11,
                    "Illegal parameter \"fee\" in pragma \"names\"",
                    "$names fee;") and
        checkError1("$fee;",
                    ILLEGALPRAGMA, 1, 5,
                    "Illegal pragma \"fee\"",
                    "$fee;") then
      okay := TRUE;
    else
      writeln(" *** ILLEGALPRAGMA not reported correctly.");
    end if;
  end func;


const func boolean: checkIncludeAndPragmaErrors is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkFileNotFound and
        checkWrongPathDelimiter and
        checkEssentialIncludeFailed and
        checkIllegalPragma then
      writeln("Include and pragma errors are reported correctly.");
      okay := TRUE;
    else
      writeln(" *** Include and pragma errors are not reported correctly.");
    end if;
  end func;


const func boolean: checkWrongAction is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1("$ include \"syntax.s7i\";\n\
                    \$ const ACTION: a is $ action \"z\";",
                    WRONGACTION, 2, 34,
                    "Illegal action \"z\"",
                    "$ const ACTION: a is $ action \"z\";") then
      okay := TRUE;
    else
      writeln(" *** WRONGACTION not reported correctly.");
    end if;
  end func;


const func boolean: checkWrongSystem is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1("$system \"fee\" is foe;",
                    WRONGSYSTEM, 1, 14,
                    "Illegal system declaration \"fee\"",
                    "$system \"fee\" is foe;") then
      okay := TRUE;
    else
      writeln(" *** WRONGSYSTEM not reported correctly.");
    end if;
  end func;


const func boolean: checkDollarValueWrong is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1("$ include \"seed7_05.s7i\";\n\
                    \$ const char: d is $ tomato;",
                    DOLLAR_VALUE_WRONG, 2, 28,
                    "\"newtype\", \"subtype\", \"func\", \"enumlit\" or \"action\" expected found \"tomato\"",
                    "$ const char: d is $ tomato;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \$ const char: d is $ 12345;",
                    DOLLAR_VALUE_WRONG, 2, 27,
                    "\"newtype\", \"subtype\", \"func\", \"enumlit\" or \"action\" expected found \"12345\"",
                    "$ const char: d is $ 12345;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \$ const char: d is $ 12345_;",
                    DOLLAR_VALUE_WRONG, 2, 28,
                    "\"newtype\", \"subtype\", \"func\", \"enumlit\" or \"action\" expected found \"12345_\"",
                    "$ const char: d is $ 12345_;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \$ const char: d is $ 'a';",
                    DOLLAR_VALUE_WRONG, 2, 25,
                    "\"newtype\", \"subtype\", \"func\", \"enumlit\" or \"action\" expected found 'a'",
                    "$ const char: d is $ 'a';") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \$ const char: d is $ \"abc\";",
                    DOLLAR_VALUE_WRONG, 2, 27,
                    "\"newtype\", \"subtype\", \"func\", \"enumlit\" or \"action\" expected found \"abc\"",
                    "$ const char: d is $ \"abc\";") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \$ const char: d is $ 1.5;",
                    DOLLAR_VALUE_WRONG, 2, 25,
                    "\"newtype\", \"subtype\", \"func\", \"enumlit\" or \"action\" expected found \"1.5\"",
                    "$ const char: d is $ 1.5;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \$ const char: d is $ (abc);",
                    DOLLAR_VALUE_WRONG, 2, 23,
                    "\"newtype\", \"subtype\", \"func\", \"enumlit\" or \"action\" expected found \"(\"",
                    "$ const char: d is $ (abc);") then
      okay := TRUE;
    else
      writeln(" *** DOLLAR_VALUE_WRONG not reported correctly.");
    end if;
  end func;


const func boolean: checkDollarTypeWrong is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1("$ include \"seed7_05.s7i\";\n\
                    \$ const $ apple: e is 1;",
                    DOLLAR_TYPE_WRONG, 2, 16,
                    "\"func\" or \"type\" expected found \"apple\"",
                    "$ const $ apple: e is 1;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \$ const $ 12345: e is 1;",
                    DOLLAR_TYPE_WRONG, 2, 16,
                    "\"func\" or \"type\" expected found \"12345\"",
                    "$ const $ 12345: e is 1;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \$ const $ 12345_: e is 1;",
                    DOLLAR_TYPE_WRONG, 2, 17,
                    "\"func\" or \"type\" expected found \"12345_\"",
                    "$ const $ 12345_: e is 1;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \$ const $ 'a': e is 1;",
                    DOLLAR_TYPE_WRONG, 2, 14,
                    "\"func\" or \"type\" expected found 'a'",
                    "$ const $ 'a': e is 1;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \$ const $ \"abc\": e is 1;",
                    DOLLAR_TYPE_WRONG, 2, 16,
                    "\"func\" or \"type\" expected found \"abc\"",
                    "$ const $ \"abc\": e is 1;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \$ const $ 1.5: e is 1;",
                    DOLLAR_TYPE_WRONG, 2, 14,
                    "\"func\" or \"type\" expected found \"1.5\"",
                    "$ const $ 1.5: e is 1;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \$ const $ (abc): e is 1;",
                    DOLLAR_TYPE_WRONG, 2, 12,
                    "\"func\" or \"type\" expected found \"(\"",
                    "$ const $ (abc): e is 1;") then
      okay := TRUE;
    else
      writeln(" *** DOLLAR_TYPE_WRONG not reported correctly.");
    end if;
  end func;


const func boolean: checkSystemMainMissing is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1("$ include \"syntax.s7i\";",
                    SYSTEM_MAIN_MISSING, 1, 23,
                    "System declaration for main missing",
                    "$ include \"syntax.s7i\";") then
      okay := TRUE;
    else
      writeln(" *** SYSTEM_MAIN_MISSING not reported correctly.");
    end if;
  end func;


const func boolean: checkBasicDeclarationErrors is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkWrongAction and
        checkWrongSystem and
        checkDollarValueWrong and
        checkDollarTypeWrong and
        checkSystemMainMissing then
      writeln("Basic declaration errors are reported correctly.");
      okay := TRUE;
    else
      writeln(" *** Basic declaration errors are not reported correctly.");
    end if;
  end func;


const func boolean: checkCardDecimalTooBig is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1("9223372036854775808;",
                    CARD_DECIMAL_TOO_BIG, 1, 20,
                    "Integer \"9223372036854775808\" too big",
                    "9223372036854775808;") and
        checkError1("9223372036854775809;",
                    CARD_DECIMAL_TOO_BIG, 1, 20,
                    "Integer \"9223372036854775809\" too big",
                    "9223372036854775809;") and
        checkError1("9223372036854775810;",
                    CARD_DECIMAL_TOO_BIG, 1, 20,
                    "Integer \"9223372036854775810\" too big",
                    "9223372036854775810;") and
        checkError1("99999999999999999999999999999999;",
                    CARD_DECIMAL_TOO_BIG, 1, 33,
                    "Integer \"99999999999999999999999999999999\" too big",
                    "99999999999999999999999999999999;") and
        checkError1("\"\\9223372036854775808;\";",
                    CARD_DECIMAL_TOO_BIG, 1, 22,
                    "Integer \"9223372036854775808\" too big",
                    "\"\\9223372036854775808;\";") and
        checkError1("\"\\9223372036854775809;\";",
                    CARD_DECIMAL_TOO_BIG, 1, 22,
                    "Integer \"9223372036854775809\" too big",
                    "\"\\9223372036854775809;\";") and
        checkError1("\"\\9223372036854775810;\";",
                    CARD_DECIMAL_TOO_BIG, 1, 22,
                    "Integer \"9223372036854775810\" too big",
                    "\"\\9223372036854775810;\";") and
        checkError1("\"\\99999999999999999999999999999999;\";",
                    CARD_DECIMAL_TOO_BIG, 1, 35,
                    "Integer \"99999999999999999999999999999999\" too big",
                    "\"\\99999999999999999999999999999999;\";") and
        checkError1("1e9223372036854775808;",
                    CARD_DECIMAL_TOO_BIG, 1, 22,
                    "Integer \"9223372036854775808\" too big",
                    "1e9223372036854775808;") and
        checkError1("1e+9223372036854775808;",
                    CARD_DECIMAL_TOO_BIG, 1, 23,
                    "Integer \"9223372036854775808\" too big",
                    "1e+9223372036854775808;") and
        checkError1("1E9223372036854775808;",
                    CARD_DECIMAL_TOO_BIG, 1, 22,
                    "Integer \"9223372036854775808\" too big",
                    "1E9223372036854775808;") and
        checkError1("1E+9223372036854775808;",
                    CARD_DECIMAL_TOO_BIG, 1, 23,
                    "Integer \"9223372036854775808\" too big",
                    "1E+9223372036854775808;") then
      okay := TRUE;
    else
      writeln(" *** CARD_DECIMAL_TOO_BIG not reported correctly.");
    end if;
  end func;


const func boolean: checkNegativeExponent is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1("1e-1;",
                    NEGATIVE_EXPONENT, 1, 3,
                    "Negative exponent in integer literal",
                    "1e-1;") and
        checkError1("1e-9223372036854775807;",
                    NEGATIVE_EXPONENT, 1, 3,
                    "Negative exponent in integer literal",
                    "1e-9223372036854775807;") and
        checkError1("1e-9223372036854775808;",
                    NEGATIVE_EXPONENT, 1, 3,
                    "Negative exponent in integer literal",
                    "1e-9223372036854775808;") and
        checkError1("1E-1;",
                    NEGATIVE_EXPONENT, 1, 3,
                    "Negative exponent in integer literal",
                    "1E-1;") and
        checkError1("1E-9223372036854775807;",
                    NEGATIVE_EXPONENT, 1, 3,
                    "Negative exponent in integer literal",
                    "1E-9223372036854775807;") and
        checkError1("1E-9223372036854775808;",
                    NEGATIVE_EXPONENT, 1, 3,
                    "Negative exponent in integer literal",
                    "1E-9223372036854775808;") then
      okay := TRUE;
    else
      writeln(" *** NEGATIVE_EXPONENT not reported correctly.");
    end if;
  end func;


const func boolean: checkDigitExpected is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1("2e;",
                    DIGIT_EXPECTED, 1, 3,
                    "Digit expected found \";\"",
                    "2e;") and
        checkError1("2e+;",
                    DIGIT_EXPECTED, 1, 4,
                    "Digit expected found \";\"",
                    "2e+;") and
        checkError1("2E;",
                    DIGIT_EXPECTED, 1, 3,
                    "Digit expected found \";\"",
                    "2E;") and
        checkError1("2E+;",
                    DIGIT_EXPECTED, 1, 4,
                    "Digit expected found \";\"",
                    "2E+;") and
        checkError1("2.0e;",
                    DIGIT_EXPECTED, 1, 5,
                    "Digit expected found \";\"",
                    "2.0e;") and
        checkError1("2.0e+;",
                    DIGIT_EXPECTED, 1, 6,
                    "Digit expected found \";\"",
                    "2.0e+;") and
        checkError1("2.0e-;",
                    DIGIT_EXPECTED, 1, 6,
                    "Digit expected found \";\"",
                    "2.0e-;") and
        checkError1("2.0E;",
                    DIGIT_EXPECTED, 1, 5,
                    "Digit expected found \";\"",
                    "2.0E;") and
        checkError1("2.0E+;",
                    DIGIT_EXPECTED, 1, 6,
                    "Digit expected found \";\"",
                    "2.0E+;") and
        checkError1("2.0E-;",
                    DIGIT_EXPECTED, 1, 6,
                    "Digit expected found \";\"",
                    "2.0E-;") and
        checkError1("2.;",
                    DIGIT_EXPECTED, 1, 3,
                    "Digit expected found \";\"",
                    "2.;") then
      okay := TRUE;
    else
      writeln(" *** DIGIT_EXPECTED not reported correctly.");
    end if;
  end func;


const func boolean: checkCardWithExponentTooBig is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1("1e19;",
                    CARD_WITH_EXPONENT_TOO_BIG, 1, 5,
                    "Integer \"1E19\" too big",
                    "1e19;") and
        checkError1("1e9223372036854775807;",
                    CARD_WITH_EXPONENT_TOO_BIG, 1, 22,
                    "Integer \"1E9223372036854775807\" too big",
                    "1e9223372036854775807;") and
        checkError1("1e+19;",
                    CARD_WITH_EXPONENT_TOO_BIG, 1, 6,
                    "Integer \"1E19\" too big",
                    "1e+19;") and
        checkError1("1e+9223372036854775807;",
                    CARD_WITH_EXPONENT_TOO_BIG, 1, 23,
                    "Integer \"1E9223372036854775807\" too big",
                    "1e+9223372036854775807;") and
        checkError1("1E19;",
                    CARD_WITH_EXPONENT_TOO_BIG, 1, 5,
                    "Integer \"1E19\" too big",
                    "1E19;") and
        checkError1("1E9223372036854775807;",
                    CARD_WITH_EXPONENT_TOO_BIG, 1, 22,
                    "Integer \"1E9223372036854775807\" too big",
                    "1E9223372036854775807;") and
        checkError1("1E+19;",
                    CARD_WITH_EXPONENT_TOO_BIG, 1, 6,
                    "Integer \"1E19\" too big",
                    "1E+19;") and
        checkError1("1E+9223372036854775807;",
                    CARD_WITH_EXPONENT_TOO_BIG, 1, 23,
                    "Integer \"1E9223372036854775807\" too big",
                    "1E+9223372036854775807;") then
      okay := TRUE;
    else
      writeln(" *** CARD_WITH_EXPONENT_TOO_BIG not reported correctly.");
    end if;
  end func;


const func boolean: checkBase2To36Allowed is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1("0#0;",
                    BASE2TO36ALLOWED, 1, 2,
                    "Integer base \"0\" not between 2 and 36",
                    "0#0;") and
        checkError1("1#0;",
                    BASE2TO36ALLOWED, 1, 2,
                    "Integer base \"1\" not between 2 and 36",
                    "1#0;") and
        checkError1("37#0;",
                    BASE2TO36ALLOWED, 1, 3,
                    "Integer base \"37\" not between 2 and 36",
                    "37#0;") and
        checkError1("0#0_;",
                    BASE2TO36ALLOWED, 1, 2,
                    "Integer base \"0\" not between 2 and 36",
                    "0#0_;") and
        checkError1("1#0_;",
                    BASE2TO36ALLOWED, 1, 2,
                    "Integer base \"1\" not between 2 and 36",
                    "1#0_;") and
        checkError1("37#0_;",
                    BASE2TO36ALLOWED, 1, 3,
                    "Integer base \"37\" not between 2 and 36",
                    "37#0_;") then
      okay := TRUE;
    else
      writeln(" *** BASE2TO36ALLOWED not reported correctly.");
    end if;
  end func;


const func boolean: checkExtDigitExpected is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1("2#;",
                    EXTDIGITEXPECTED, 1, 3,
                    "Extended digit expected found \";\"",
                    "2#;") and
        checkError1("3#;",
                    EXTDIGITEXPECTED, 1, 3,
                    "Extended digit expected found \";\"",
                    "3#;") and
        checkError1("4#;",
                    EXTDIGITEXPECTED, 1, 3,
                    "Extended digit expected found \";\"",
                    "4#;") and
        checkError1("5#;",
                    EXTDIGITEXPECTED, 1, 3,
                    "Extended digit expected found \";\"",
                    "5#;") and
        checkError1("6#;",
                    EXTDIGITEXPECTED, 1, 3,
                    "Extended digit expected found \";\"",
                    "6#;") and
        checkError1("7#;",
                    EXTDIGITEXPECTED, 1, 3,
                    "Extended digit expected found \";\"",
                    "7#;") and
        checkError1("8#;",
                    EXTDIGITEXPECTED, 1, 3,
                    "Extended digit expected found \";\"",
                    "8#;") and
        checkError1("9#;",
                    EXTDIGITEXPECTED, 1, 3,
                    "Extended digit expected found \";\"",
                    "9#;") and
        checkError1("10#;",
                    EXTDIGITEXPECTED, 1, 4,
                    "Extended digit expected found \";\"",
                    "10#;") and
        checkError1("11#;",
                    EXTDIGITEXPECTED, 1, 4,
                    "Extended digit expected found \";\"",
                    "11#;") and
        checkError1("12#;",
                    EXTDIGITEXPECTED, 1, 4,
                    "Extended digit expected found \";\"",
                    "12#;") and
        checkError1("13#;",
                    EXTDIGITEXPECTED, 1, 4,
                    "Extended digit expected found \";\"",
                    "13#;") and
        checkError1("14#;",
                    EXTDIGITEXPECTED, 1, 4,
                    "Extended digit expected found \";\"",
                    "14#;") and
        checkError1("15#;",
                    EXTDIGITEXPECTED, 1, 4,
                    "Extended digit expected found \";\"",
                    "15#;") and
        checkError1("16#;",
                    EXTDIGITEXPECTED, 1, 4,
                    "Extended digit expected found \";\"",
                    "16#;") and
        checkError1("17#;",
                    EXTDIGITEXPECTED, 1, 4,
                    "Extended digit expected found \";\"",
                    "17#;") and
        checkError1("18#;",
                    EXTDIGITEXPECTED, 1, 4,
                    "Extended digit expected found \";\"",
                    "18#;") and
        checkError1("19#;",
                    EXTDIGITEXPECTED, 1, 4,
                    "Extended digit expected found \";\"",
                    "19#;") and
        checkError1("20#;",
                    EXTDIGITEXPECTED, 1, 4,
                    "Extended digit expected found \";\"",
                    "20#;") and
        checkError1("21#;",
                    EXTDIGITEXPECTED, 1, 4,
                    "Extended digit expected found \";\"",
                    "21#;") and
        checkError1("22#;",
                    EXTDIGITEXPECTED, 1, 4,
                    "Extended digit expected found \";\"",
                    "22#;") and
        checkError1("23#;",
                    EXTDIGITEXPECTED, 1, 4,
                    "Extended digit expected found \";\"",
                    "23#;") and
        checkError1("24#;",
                    EXTDIGITEXPECTED, 1, 4,
                    "Extended digit expected found \";\"",
                    "24#;") and
        checkError1("25#;",
                    EXTDIGITEXPECTED, 1, 4,
                    "Extended digit expected found \";\"",
                    "25#;") and
        checkError1("26#;",
                    EXTDIGITEXPECTED, 1, 4,
                    "Extended digit expected found \";\"",
                    "26#;") and
        checkError1("27#;",
                    EXTDIGITEXPECTED, 1, 4,
                    "Extended digit expected found \";\"",
                    "27#;") and
        checkError1("28#;",
                    EXTDIGITEXPECTED, 1, 4,
                    "Extended digit expected found \";\"",
                    "28#;") and
        checkError1("29#;",
                    EXTDIGITEXPECTED, 1, 4,
                    "Extended digit expected found \";\"",
                    "29#;") and
        checkError1("30#;",
                    EXTDIGITEXPECTED, 1, 4,
                    "Extended digit expected found \";\"",
                    "30#;") and
        checkError1("31#;",
                    EXTDIGITEXPECTED, 1, 4,
                    "Extended digit expected found \";\"",
                    "31#;") and
        checkError1("32#;",
                    EXTDIGITEXPECTED, 1, 4,
                    "Extended digit expected found \";\"",
                    "32#;") and
        checkError1("33#;",
                    EXTDIGITEXPECTED, 1, 4,
                    "Extended digit expected found \";\"",
                    "33#;") and
        checkError1("34#;",
                    EXTDIGITEXPECTED, 1, 4,
                    "Extended digit expected found \";\"",
                    "34#;") and
        checkError1("35#;",
                    EXTDIGITEXPECTED, 1, 4,
                    "Extended digit expected found \";\"",
                    "35#;") and
        checkError1("36#;",
                    EXTDIGITEXPECTED, 1, 4,
                    "Extended digit expected found \";\"",
                    "36#;") then
      okay := TRUE;
    else
      writeln(" *** EXTDIGITEXPECTED not reported correctly.");
    end if;
  end func;


const func boolean: checkIllegalBaseDigit is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1("2#10210;",
                    ILLEGAL_BASED_DIGIT, 1, 8,
                    "Illegal digit \"2\" in based integer \"2#10210\"",
                    "2#10210;") and
        checkError1("3#1203120;",
                    ILLEGAL_BASED_DIGIT, 1, 10,
                    "Illegal digit \"3\" in based integer \"3#1203120\"",
                    "3#1203120;") and
        checkError1("4#123041230;",
                    ILLEGAL_BASED_DIGIT, 1, 12,
                    "Illegal digit \"4\" in based integer \"4#123041230\"",
                    "4#123041230;") and
        checkError1("5#12340512340;",
                    ILLEGAL_BASED_DIGIT, 1, 14,
                    "Illegal digit \"5\" in based integer \"5#12340512340\"",
                    "5#12340512340;") and
        checkError1("6#1234506123450;",
                    ILLEGAL_BASED_DIGIT, 1, 16,
                    "Illegal digit \"6\" in based integer \"6#1234506123450\"",
                    "6#1234506123450;") and
        checkError1("7#123456071234560;",
                    ILLEGAL_BASED_DIGIT, 1, 18,
                    "Illegal digit \"7\" in based integer \"7#123456071234560\"",
                    "7#123456071234560;") and
        checkError1("8#12345670812345670;",
                    ILLEGAL_BASED_DIGIT, 1, 20,
                    "Illegal digit \"8\" in based integer \"8#12345670812345670\"",
                    "8#12345670812345670;") and
        checkError1("9#1234567809123456780;",
                    ILLEGAL_BASED_DIGIT, 1, 22,
                    "Illegal digit \"9\" in based integer \"9#1234567809123456780\"",
                    "9#1234567809123456780;") and
        checkError1("10#123456789a0;",
                    ILLEGAL_BASED_DIGIT, 1, 15,
                    "Illegal digit \"a\" in based integer \"10#123456789a0\"",
                    "10#123456789a0;") and
        checkError1("11#123456789ab0;",
                    ILLEGAL_BASED_DIGIT, 1, 16,
                    "Illegal digit \"b\" in based integer \"11#123456789ab0\"",
                    "11#123456789ab0;") and
        checkError1("12#123456789abc0;",
                    ILLEGAL_BASED_DIGIT, 1, 17,
                    "Illegal digit \"c\" in based integer \"12#123456789abc0\"",
                    "12#123456789abc0;") and
        checkError1("13#123456789abcd0;",
                    ILLEGAL_BASED_DIGIT, 1, 18,
                    "Illegal digit \"d\" in based integer \"13#123456789abcd0\"",
                    "13#123456789abcd0;") and
        checkError1("14#123456789abcde0;",
                    ILLEGAL_BASED_DIGIT, 1, 19,
                    "Illegal digit \"e\" in based integer \"14#123456789abcde0\"",
                    "14#123456789abcde0;") and
        checkError1("15#123456789abcdef0;",
                    ILLEGAL_BASED_DIGIT, 1, 20,
                    "Illegal digit \"f\" in based integer \"15#123456789abcdef0\"",
                    "15#123456789abcdef0;") and
        checkError1("16#12345678abcdefg0;",
                    ILLEGAL_BASED_DIGIT, 1, 20,
                    "Illegal digit \"g\" in based integer \"16#12345678abcdefg0\"",
                    "16#12345678abcdefg0;") and
        checkError1("17#1234567abcdefgh0;",
                    ILLEGAL_BASED_DIGIT, 1, 20,
                    "Illegal digit \"h\" in based integer \"17#1234567abcdefgh0\"",
                    "17#1234567abcdefgh0;") and
        checkError1("18#123456abcdefghi0;",
                    ILLEGAL_BASED_DIGIT, 1, 20,
                    "Illegal digit \"i\" in based integer \"18#123456abcdefghi0\"",
                    "18#123456abcdefghi0;") and
        checkError1("19#1234abcdefghij0;",
                    ILLEGAL_BASED_DIGIT, 1, 19,
                    "Illegal digit \"j\" in based integer \"19#1234abcdefghij0\"",
                    "19#1234abcdefghij0;") and
        checkError1("20#123abcdefghijk0;",
                    ILLEGAL_BASED_DIGIT, 1, 19,
                    "Illegal digit \"k\" in based integer \"20#123abcdefghijk0\"",
                    "20#123abcdefghijk0;") and
        checkError1("21#12abcdefghijkl0;",
                    ILLEGAL_BASED_DIGIT, 1, 19,
                    "Illegal digit \"l\" in based integer \"21#12abcdefghijkl0\"",
                    "21#12abcdefghijkl0;") and
        checkError1("22#1abcdefghijklm0;",
                    ILLEGAL_BASED_DIGIT, 1, 19,
                    "Illegal digit \"m\" in based integer \"22#1abcdefghijklm0\"",
                    "22#1abcdefghijklm0;") and
        checkError1("23#1cdefghijklmn0;",
                    ILLEGAL_BASED_DIGIT, 1, 18,
                    "Illegal digit \"n\" in based integer \"23#1cdefghijklmn0\"",
                    "23#1cdefghijklmn0;") and
        checkError1("24#1defghijklmno0;",
                    ILLEGAL_BASED_DIGIT, 1, 18,
                    "Illegal digit \"o\" in based integer \"24#1defghijklmno0\"",
                    "24#1defghijklmno0;") and
        checkError1("25#1efghijklmnop0;",
                    ILLEGAL_BASED_DIGIT, 1, 18,
                    "Illegal digit \"p\" in based integer \"25#1efghijklmnop0\"",
                    "25#1efghijklmnop0;") and
        checkError1("26#1fghijklmnopq0;",
                    ILLEGAL_BASED_DIGIT, 1, 18,
                    "Illegal digit \"q\" in based integer \"26#1fghijklmnopq0\"",
                    "26#1fghijklmnopq0;") and
        checkError1("27#1ghijklmnopqr0;",
                    ILLEGAL_BASED_DIGIT, 1, 18,
                    "Illegal digit \"r\" in based integer \"27#1ghijklmnopqr0\"",
                    "27#1ghijklmnopqr0;") and
        checkError1("28#1ijklmnopqrs0;",
                    ILLEGAL_BASED_DIGIT, 1, 17,
                    "Illegal digit \"s\" in based integer \"28#1ijklmnopqrs0\"",
                    "28#1ijklmnopqrs0;") and
        checkError1("29#1jklmnopqrst0;",
                    ILLEGAL_BASED_DIGIT, 1, 17,
                    "Illegal digit \"t\" in based integer \"29#1jklmnopqrst0\"",
                    "29#1jklmnopqrst0;") and
        checkError1("30#1klmnopqrstu0;",
                    ILLEGAL_BASED_DIGIT, 1, 17,
                    "Illegal digit \"u\" in based integer \"30#1klmnopqrstu0\"",
                    "30#1klmnopqrstu0;") and
        checkError1("31#1lmnopqrstuv0;",
                    ILLEGAL_BASED_DIGIT, 1, 17,
                    "Illegal digit \"v\" in based integer \"31#1lmnopqrstuv0\"",
                    "31#1lmnopqrstuv0;") and
        checkError1("32#1mnopqrstuvw0;",
                    ILLEGAL_BASED_DIGIT, 1, 17,
                    "Illegal digit \"w\" in based integer \"32#1mnopqrstuvw0\"",
                    "32#1mnopqrstuvw0;") and
        checkError1("33#1nopqrstuvwx0;",
                    ILLEGAL_BASED_DIGIT, 1, 17,
                    "Illegal digit \"x\" in based integer \"33#1nopqrstuvwx0\"",
                    "33#1nopqrstuvwx0;") and
        checkError1("34#1opqrstuvwxy0;",
                    ILLEGAL_BASED_DIGIT, 1, 17,
                    "Illegal digit \"y\" in based integer \"34#1opqrstuvwxy0\"",
                    "34#1opqrstuvwxy0;") and
        checkError1("35#1pqrstuvwxyz0;",
                    ILLEGAL_BASED_DIGIT, 1, 17,
                    "Illegal digit \"z\" in based integer \"35#1pqrstuvwxyz0\"",
                    "35#1pqrstuvwxyz0;") and
        checkError1("2#1210_;",
                    ILLEGAL_BASED_DIGIT, 1, 8,
                    "Illegal digit \"2\" in based integer \"2#1210\"",
                    "2#1210_;") and
        checkError1("3#123210_;",
                    ILLEGAL_BASED_DIGIT, 1, 10,
                    "Illegal digit \"3\" in based integer \"3#123210\"",
                    "3#123210_;") and
        checkError1("4#12343210_;",
                    ILLEGAL_BASED_DIGIT, 1, 12,
                    "Illegal digit \"4\" in based integer \"4#12343210\"",
                    "4#12343210_;") and
        checkError1("5#1234543210_;",
                    ILLEGAL_BASED_DIGIT, 1, 14,
                    "Illegal digit \"5\" in based integer \"5#1234543210\"",
                    "5#1234543210_;") and
        checkError1("6#123456543210_;",
                    ILLEGAL_BASED_DIGIT, 1, 16,
                    "Illegal digit \"6\" in based integer \"6#123456543210\"",
                    "6#123456543210_;") and
        checkError1("7#12345676543210_;",
                    ILLEGAL_BASED_DIGIT, 1, 18,
                    "Illegal digit \"7\" in based integer \"7#12345676543210\"",
                    "7#12345676543210_;") and
        checkError1("8#1234567876543210_;",
                    ILLEGAL_BASED_DIGIT, 1, 20,
                    "Illegal digit \"8\" in based integer \"8#1234567876543210\"",
                    "8#1234567876543210_;") and
        checkError1("9#123456789876543210_;",
                    ILLEGAL_BASED_DIGIT, 1, 22,
                    "Illegal digit \"9\" in based integer \"9#123456789876543210\"",
                    "9#123456789876543210_;") and
        checkError1("10#123456789a9876543210_;",
                    ILLEGAL_BASED_DIGIT, 1, 25,
                    "Illegal digit \"a\" in based integer \"10#123456789a9876543210\"",
                    "10#123456789a9876543210_;") and
        checkError1("11#123456789aba9876543210_;",
                    ILLEGAL_BASED_DIGIT, 1, 27,
                    "Illegal digit \"b\" in based integer \"11#123456789aba9876543210\"",
                    "11#123456789aba9876543210_;") and
        checkError1("12#123456789abcba9876543210_;",
                    ILLEGAL_BASED_DIGIT, 1, 29,
                    "Illegal digit \"c\" in based integer \"12#123456789abcba9876543210\"",
                    "12#123456789abcba9876543210_;") and
        checkError1("13#123456789abcdcba9876543210_;",
                    ILLEGAL_BASED_DIGIT, 1, 31,
                    "Illegal digit \"d\" in based integer \"13#123456789abcdcba9876543210\"",
                    "13#123456789abcdcba9876543210_;") and
        checkError1("14#123456789abcdedcba9876543210_;",
                    ILLEGAL_BASED_DIGIT, 1, 33,
                    "Illegal digit \"e\" in based integer \"14#123456789abcdedcba9876543210\"",
                    "14#123456789abcdedcba9876543210_;") and
        checkError1("15#123456789abcdefedcba9876543210_;",
                    ILLEGAL_BASED_DIGIT, 1, 35,
                    "Illegal digit \"f\" in based integer \"15#123456789abcdefedcba9876543210\"",
                    "15#123456789abcdefedcba9876543210_;") and
        checkError1("16#123456789abcdefgfedcba9876543210_;",
                    ILLEGAL_BASED_DIGIT, 1, 37,
                    "Illegal digit \"g\" in based integer \"16#123456789abcdefgfedcba9876543210\"",
                    "16#123456789abcdefgfedcba9876543210_;") and
        checkError1("17#123456789abcdefghgfedcba9876543210_;",
                    ILLEGAL_BASED_DIGIT, 1, 39,
                    "Illegal digit \"h\" in based integer \"17#123456789abcdefghgfedcba9876543210\"",
                    "17#123456789abcdefghgfedcba9876543210_;") and
        checkError1("18#123456789abcdefghihgfedcba9876543210_;",
                    ILLEGAL_BASED_DIGIT, 1, 41,
                    "Illegal digit \"i\" in based integer \"18#123456789abcdefghihgfedcba9876543210\"",
                    "18#123456789abcdefghihgfedcba9876543210_;") and
        checkError1("19#123456789abcdefghijihgfedcba9876543210_;",
                    ILLEGAL_BASED_DIGIT, 1, 43,
                    "Illegal digit \"j\" in based integer \"19#123456789abcdefghijihgfedcba9876543210\"",
                    "19#123456789abcdefghijihgfedcba9876543210_;") and
        checkError1("20#123456789abcdefghijkjihgfedcba9876543210_;",
                    ILLEGAL_BASED_DIGIT, 1, 45,
                    "Illegal digit \"k\" in based integer \"20#123456789abcdefghijkjihgfedcba9876543210\"",
                    "20#123456789abcdefghijkjihgfedcba9876543210_;") and
        checkError1("21#123456789abcdefghijklkjihgfedcba9876543210_;",
                    ILLEGAL_BASED_DIGIT, 1, 47,
                    "Illegal digit \"l\" in based integer \"21#123456789abcdefghijklkjihgfedcba9876543210\"",
                    "21#123456789abcdefghijklkjihgfedcba9876543210_;") and
        checkError1("22#123456789abcdefghijklmlkjihgfedcba9876543210_;",
                    ILLEGAL_BASED_DIGIT, 1, 49,
                    "Illegal digit \"m\" in based integer \"22#123456789abcdefghijklmlkjihgfedcba9876543210\"",
                    "22#123456789abcdefghijklmlkjihgfedcba9876543210_;") and
        checkError1("23#123456789abcdefghijklmnmlkjihgfedcba9876543210_;",
                    ILLEGAL_BASED_DIGIT, 1, 51,
                    "Illegal digit \"n\" in based integer \"23#123456789abcdefghijklmnmlkjihgfedcba9876543210\"",
                    "23#123456789abcdefghijklmnmlkjihgfedcba9876543210_;") and
        checkError1("24#123456789abcdefghijklmnonmlkjihgfedcba9876543210_;",
                    ILLEGAL_BASED_DIGIT, 1, 53,
                    "Illegal digit \"o\" in based integer \"24#123456789abcdefghijklmnonmlkjihgfedcba9876543210\"",
                    "24#123456789abcdefghijklmnonmlkjihgfedcba9876543210_;") and
        checkError1("25#123456789abcdefghijklmnoponmlkjihgfedcba9876543210_;",
                    ILLEGAL_BASED_DIGIT, 1, 55,
                    "Illegal digit \"p\" in based integer \"25#123456789abcdefghijklmnoponmlkjihgfedcba9876543210\"",
                    "25#123456789abcdefghijklmnoponmlkjihgfedcba9876543210_;") and
        checkError1("26#123456789abcdefghijklmnopqponmlkjihgfedcba9876543210_;",
                    ILLEGAL_BASED_DIGIT, 1, 57,
                    "Illegal digit \"q\" in based integer \"26#123456789abcdefghijklmnopqponmlkjihgfedcba9876543210\"",
                    "26#123456789abcdefghijklmnopqponmlkjihgfedcba9876543210_;") and
        checkError1("27#123456789abcdefghijklmnopqrqponmlkjihgfedcba9876543210_;",
                    ILLEGAL_BASED_DIGIT, 1, 59,
                    "Illegal digit \"r\" in based integer \"27#123456789abcdefghijklmnopqrqponmlkjihgfedcba9876543210\"",
                    "27#123456789abcdefghijklmnopqrqponmlkjihgfedcba9876543210_;") and
        checkError1("28#123456789abcdefghijklmnopqrsrqponmlkjihgfedcba9876543210_;",
                    ILLEGAL_BASED_DIGIT, 1, 61,
                    "Illegal digit \"s\" in based integer \"28#123456789abcdefghijklmnopqrsrqponmlkjihgfedcba9876543210\"",
                    "28#123456789abcdefghijklmnopqrsrqponmlkjihgfedcba9876543210_;") and
        checkError1("29#123456789abcdefghijklmnopqrstsrqponmlkjihgfedcba9876543210_;",
                    ILLEGAL_BASED_DIGIT, 1, 63,
                    "Illegal digit \"t\" in based integer \"29#123456789abcdefghijklmnopqrstsrqponmlkjihgfedcba9876543210\"",
                    "29#123456789abcdefghijklmnopqrstsrqponmlkjihgfedcba9876543210_;") and
        checkError1("30#123456789abcdefghijklmnopqrstutsrqponmlkjihgfedcba9876543210_;",
                    ILLEGAL_BASED_DIGIT, 1, 65,
                    "Illegal digit \"u\" in based integer \"30#123456789abcdefghijklmnopqrstutsrqponmlkjihgfedcba9876543210\"",
                    "30#123456789abcdefghijklmnopqrstutsrqponmlkjihgfedcba9876543210_;") and
        checkError1("31#123456789abcdefghijklmnopqrstuvutsrqponmlkjihgfedcba9876543210_;",
                    ILLEGAL_BASED_DIGIT, 1, 67,
                    "Illegal digit \"v\" in based integer \"31#123456789abcdefghijklmnopqrstuvutsrqponmlkjihgfedcba9876543210\"",
                    "31#123456789abcdefghijklmnopqrstuvutsrqponmlkjihgfedcba9876543210_;") and
        checkError1("32#123456789abcdefghijklmnopqrstuvwvutsrqponmlkjihgfedcba9876543210_;",
                    ILLEGAL_BASED_DIGIT, 1, 69,
                    "Illegal digit \"w\" in based integer \"32#123456789abcdefghijklmnopqrstuvwvutsrqponmlkjihgfedcba9876543210\"",
                    "32#123456789abcdefghijklmnopqrstuvwvutsrqponmlkjihgfedcba9876543210_;") and
        checkError1("33#123456789abcdefghijklmnopqrstuvwxwvutsrqponmlkjihgfedcba9876543210_;",
                    ILLEGAL_BASED_DIGIT, 1, 71,
                    "Illegal digit \"x\" in based integer \"33#123456789abcdefghijklmnopqrstuvwxwvutsrqponmlkjihgfedcba9876543210\"",
                    "33#123456789abcdefghijklmnopqrstuvwxwvutsrqponmlkjihgfedcba9876543210_;") and
        checkError1("34#123456789abcdefghijklmnopqrstuvwxyxwvutsrqponmlkjihgfedcba9876543210_;",
                    ILLEGAL_BASED_DIGIT, 1, 73,
                    "Illegal digit \"y\" in based integer \"34#123456789abcdefghijklmnopqrstuvwxyxwvutsrqponmlkjihgfedcba9876543210\"",
                    "34#123456789abcdefghijklmnopqrstuvwxyxwvutsrqponmlkjihgfedcba9876543210_;") and
        checkError1("35#123456789abcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcba9876543210_;",
                    ILLEGAL_BASED_DIGIT, 1, 75,
                    "Illegal digit \"z\" in based integer \"35#123456789abcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcba9876543210\"",
                    "35#123456789abcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcba9876543210_;") then
      okay := TRUE;
    else
      writeln(" *** ILLEGAL_BASED_DIGIT not reported correctly.");
    end if;
  end func;


const func boolean: checkCardBasedTooBig is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1("2#1000000000000000000000000000000000000000000000000000000000000000;",
                    CARD_BASED_TOO_BIG, 1, 67,
                    "Based integer \"2#1000000000000000000000000000000000000000000000000000000000000000\" too big",
                    "2#1000000000000000000000000000000000000000000000000000000000000000;") and
        checkError1("3#2021110011022210012102010021220101220222;",
                    CARD_BASED_TOO_BIG, 1, 43,
                    "Based integer \"3#2021110011022210012102010021220101220222\" too big",
                    "3#2021110011022210012102010021220101220222;") and
        checkError1("4#20000000000000000000000000000000;",
                    CARD_BASED_TOO_BIG, 1, 35,
                    "Based integer \"4#20000000000000000000000000000000\" too big",
                    "4#20000000000000000000000000000000;") and
        checkError1("5#1104332401304422434310311213;",
                    CARD_BASED_TOO_BIG, 1, 31,
                    "Based integer \"5#1104332401304422434310311213\" too big",
                    "5#1104332401304422434310311213;") and
        checkError1("6#1540241003031030222122212;",
                    CARD_BASED_TOO_BIG, 1, 28,
                    "Based integer \"6#1540241003031030222122212\" too big",
                    "6#1540241003031030222122212;") and
        checkError1("7#22341010611245052052301;",
                    CARD_BASED_TOO_BIG, 1, 26,
                    "Based integer \"7#22341010611245052052301\" too big",
                    "7#22341010611245052052301;") and
        checkError1("8#1000000000000000000000;",
                    CARD_BASED_TOO_BIG, 1, 25,
                    "Based integer \"8#1000000000000000000000\" too big",
                    "8#1000000000000000000000;") and
        checkError1("9#67404283172107811828;",
                    CARD_BASED_TOO_BIG, 1, 23,
                    "Based integer \"9#67404283172107811828\" too big",
                    "9#67404283172107811828;") and
        checkError1("10#9223372036854775808;",
                    CARD_BASED_TOO_BIG, 1, 23,
                    "Based integer \"10#9223372036854775808\" too big",
                    "10#9223372036854775808;") and
        checkError1("11#1728002635214590698;",
                    CARD_BASED_TOO_BIG, 1, 23,
                    "Based integer \"11#1728002635214590698\" too big",
                    "11#1728002635214590698;") and
        checkError1("12#41a792678515120368;",
                    CARD_BASED_TOO_BIG, 1, 22,
                    "Based integer \"12#41a792678515120368\" too big",
                    "12#41a792678515120368;") and
        checkError1("13#10b269549075433c38;",
                    CARD_BASED_TOO_BIG, 1, 22,
                    "Based integer \"13#10b269549075433c38\" too big",
                    "13#10b269549075433c38;") and
        checkError1("14#4340724c6c71dc7a8;",
                    CARD_BASED_TOO_BIG, 1, 21,
                    "Based integer \"14#4340724c6c71dc7a8\" too big",
                    "14#4340724c6c71dc7a8;") and
        checkError1("15#160e2ad3246366808;",
                    CARD_BASED_TOO_BIG, 1, 21,
                    "Based integer \"15#160e2ad3246366808\" too big",
                    "15#160e2ad3246366808;") and
        checkError1("16#8000000000000000;",
                    CARD_BASED_TOO_BIG, 1, 20,
                    "Based integer \"16#8000000000000000\" too big",
                    "16#8000000000000000;") and
        checkError1("17#33d3d8307b214009;",
                    CARD_BASED_TOO_BIG, 1, 20,
                    "Based integer \"17#33d3d8307b214009\" too big",
                    "17#33d3d8307b214009;") and
        checkError1("18#16agh595df825fa8;",
                    CARD_BASED_TOO_BIG, 1, 20,
                    "Based integer \"18#16agh595df825fa8\" too big",
                    "18#16agh595df825fa8;") and
        checkError1("19#ba643dci0ffeehi;",
                    CARD_BASED_TOO_BIG, 1, 19,
                    "Based integer \"19#ba643dci0ffeehi\" too big",
                    "19#ba643dci0ffeehi;") and
        checkError1("20#5cbfjia3fh26ja8;",
                    CARD_BASED_TOO_BIG, 1, 19,
                    "Based integer \"20#5cbfjia3fh26ja8\" too big",
                    "20#5cbfjia3fh26ja8;") and
        checkError1("21#2heiciiie82dh98;",
                    CARD_BASED_TOO_BIG, 1, 19,
                    "Based integer \"21#2heiciiie82dh98\" too big",
                    "21#2heiciiie82dh98;") and
        checkError1("22#1adaibb21dckfa8;",
                    CARD_BASED_TOO_BIG, 1, 19,
                    "Based integer \"22#1adaibb21dckfa8\" too big",
                    "22#1adaibb21dckfa8;") and
        checkError1("23#i6k448cf4192c3;",
                    CARD_BASED_TOO_BIG, 1, 18,
                    "Based integer \"23#i6k448cf4192c3\" too big",
                    "23#i6k448cf4192c3;") and
        checkError1("24#acd772jnc9l0l8;",
                    CARD_BASED_TOO_BIG, 1, 18,
                    "Based integer \"24#acd772jnc9l0l8\" too big",
                    "24#acd772jnc9l0l8;") and
        checkError1("25#64ie1focnn5g78;",
                    CARD_BASED_TOO_BIG, 1, 18,
                    "Based integer \"25#64ie1focnn5g78\" too big",
                    "25#64ie1focnn5g78;") and
        checkError1("26#3igoecjbmca688;",
                    CARD_BASED_TOO_BIG, 1, 18,
                    "Based integer \"26#3igoecjbmca688\" too big",
                    "26#3igoecjbmca688;") and
        checkError1("27#27c48l5b37oaoq;",
                    CARD_BASED_TOO_BIG, 1, 18,
                    "Based integer \"27#27c48l5b37oaoq\" too big",
                    "27#27c48l5b37oaoq;") and
        checkError1("28#1bk39f3ah3dmq8;",
                    CARD_BASED_TOO_BIG, 1, 18,
                    "Based integer \"28#1bk39f3ah3dmq8\" too big",
                    "28#1bk39f3ah3dmq8;") and
        checkError1("29#q1se8f0m04isc;",
                    CARD_BASED_TOO_BIG, 1, 17,
                    "Based integer \"29#q1se8f0m04isc\" too big",
                    "29#q1se8f0m04isc;") and
        checkError1("30#hajppbc1fc208;",
                    CARD_BASED_TOO_BIG, 1, 17,
                    "Based integer \"30#hajppbc1fc208\" too big",
                    "30#hajppbc1fc208;") and
        checkError1("31#bm03i95hia438;",
                    CARD_BASED_TOO_BIG, 1, 17,
                    "Based integer \"31#bm03i95hia438\" too big",
                    "31#bm03i95hia438;") and
        checkError1("32#8000000000000;",
                    CARD_BASED_TOO_BIG, 1, 17,
                    "Based integer \"32#8000000000000\" too big",
                    "32#8000000000000;") and
        checkError1("33#5hg4ck9jd4u38;",
                    CARD_BASED_TOO_BIG, 1, 17,
                    "Based integer \"33#5hg4ck9jd4u38\" too big",
                    "33#5hg4ck9jd4u38;") and
        checkError1("34#3tdtk1v8j6tpq;",
                    CARD_BASED_TOO_BIG, 1, 17,
                    "Based integer \"34#3tdtk1v8j6tpq\" too big",
                    "34#3tdtk1v8j6tpq;") and
        checkError1("35#2pijmikexrxp8;",
                    CARD_BASED_TOO_BIG, 1, 17,
                    "Based integer \"35#2pijmikexrxp8\" too big",
                    "35#2pijmikexrxp8;") and
        checkError1("36#1y2p0ij32e8e8;",
                    CARD_BASED_TOO_BIG, 1, 17,
                    "Based integer \"36#1y2p0ij32e8e8\" too big",
                    "36#1y2p0ij32e8e8;") and
        checkError1("\"\\2#1000000000000000000000000000000000000000000000000000000000000000;\";",
                    CARD_BASED_TOO_BIG, 1, 69,
                    "Based integer \"2#1000000000000000000000000000000000000000000000000000000000000000\" too big",
                    "\"\\2#1000000000000000000000000000000000000000000000000000000000000000;\";") and
        checkError1("\"\\3#2021110011022210012102010021220101220222;\";",
                    CARD_BASED_TOO_BIG, 1, 45,
                    "Based integer \"3#2021110011022210012102010021220101220222\" too big",
                    "\"\\3#2021110011022210012102010021220101220222;\";") and
        checkError1("\"\\4#20000000000000000000000000000000;\";",
                    CARD_BASED_TOO_BIG, 1, 37,
                    "Based integer \"4#20000000000000000000000000000000\" too big",
                    "\"\\4#20000000000000000000000000000000;\";") and
        checkError1("\"\\5#1104332401304422434310311213;\";",
                    CARD_BASED_TOO_BIG, 1, 33,
                    "Based integer \"5#1104332401304422434310311213\" too big",
                    "\"\\5#1104332401304422434310311213;\";") and
        checkError1("\"\\6#1540241003031030222122212;\";",
                    CARD_BASED_TOO_BIG, 1, 30,
                    "Based integer \"6#1540241003031030222122212\" too big",
                    "\"\\6#1540241003031030222122212;\";") and
        checkError1("\"\\7#22341010611245052052301;\";",
                    CARD_BASED_TOO_BIG, 1, 28,
                    "Based integer \"7#22341010611245052052301\" too big",
                    "\"\\7#22341010611245052052301;\";") and
        checkError1("\"\\8#1000000000000000000000;\";",
                    CARD_BASED_TOO_BIG, 1, 27,
                    "Based integer \"8#1000000000000000000000\" too big",
                    "\"\\8#1000000000000000000000;\";") and
        checkError1("\"\\9#67404283172107811828;\";",
                    CARD_BASED_TOO_BIG, 1, 25,
                    "Based integer \"9#67404283172107811828\" too big",
                    "\"\\9#67404283172107811828;\";") and
        checkError1("\"\\10#9223372036854775808;\";",
                    CARD_BASED_TOO_BIG, 1, 25,
                    "Based integer \"10#9223372036854775808\" too big",
                    "\"\\10#9223372036854775808;\";") and
        checkError1("\"\\11#1728002635214590698;\";",
                    CARD_BASED_TOO_BIG, 1, 25,
                    "Based integer \"11#1728002635214590698\" too big",
                    "\"\\11#1728002635214590698;\";") and
        checkError1("\"\\12#41a792678515120368;\";",
                    CARD_BASED_TOO_BIG, 1, 24,
                    "Based integer \"12#41a792678515120368\" too big",
                    "\"\\12#41a792678515120368;\";") and
        checkError1("\"\\13#10b269549075433c38;\";",
                    CARD_BASED_TOO_BIG, 1, 24,
                    "Based integer \"13#10b269549075433c38\" too big",
                    "\"\\13#10b269549075433c38;\";") and
        checkError1("\"\\14#4340724c6c71dc7a8;\";",
                    CARD_BASED_TOO_BIG, 1, 23,
                    "Based integer \"14#4340724c6c71dc7a8\" too big",
                    "\"\\14#4340724c6c71dc7a8;\";") and
        checkError1("\"\\15#160e2ad3246366808;\";",
                    CARD_BASED_TOO_BIG, 1, 23,
                    "Based integer \"15#160e2ad3246366808\" too big",
                    "\"\\15#160e2ad3246366808;\";") and
        checkError1("\"\\16#8000000000000000;\";",
                    CARD_BASED_TOO_BIG, 1, 22,
                    "Based integer \"16#8000000000000000\" too big",
                    "\"\\16#8000000000000000;\";") and
        checkError1("\"\\17#33d3d8307b214009;\";",
                    CARD_BASED_TOO_BIG, 1, 22,
                    "Based integer \"17#33d3d8307b214009\" too big",
                    "\"\\17#33d3d8307b214009;\";") and
        checkError1("\"\\18#16agh595df825fa8;\";",
                    CARD_BASED_TOO_BIG, 1, 22,
                    "Based integer \"18#16agh595df825fa8\" too big",
                    "\"\\18#16agh595df825fa8;\";") and
        checkError1("\"\\19#ba643dci0ffeehi;\";",
                    CARD_BASED_TOO_BIG, 1, 21,
                    "Based integer \"19#ba643dci0ffeehi\" too big",
                    "\"\\19#ba643dci0ffeehi;\";") and
        checkError1("\"\\20#5cbfjia3fh26ja8;\";",
                    CARD_BASED_TOO_BIG, 1, 21,
                    "Based integer \"20#5cbfjia3fh26ja8\" too big",
                    "\"\\20#5cbfjia3fh26ja8;\";") and
        checkError1("\"\\21#2heiciiie82dh98;\";",
                    CARD_BASED_TOO_BIG, 1, 21,
                    "Based integer \"21#2heiciiie82dh98\" too big",
                    "\"\\21#2heiciiie82dh98;\";") and
        checkError1("\"\\22#1adaibb21dckfa8;\";",
                    CARD_BASED_TOO_BIG, 1, 21,
                    "Based integer \"22#1adaibb21dckfa8\" too big",
                    "\"\\22#1adaibb21dckfa8;\";") and
        checkError1("\"\\23#i6k448cf4192c3;\";",
                    CARD_BASED_TOO_BIG, 1, 20,
                    "Based integer \"23#i6k448cf4192c3\" too big",
                    "\"\\23#i6k448cf4192c3;\";") and
        checkError1("\"\\24#acd772jnc9l0l8;\";",
                    CARD_BASED_TOO_BIG, 1, 20,
                    "Based integer \"24#acd772jnc9l0l8\" too big",
                    "\"\\24#acd772jnc9l0l8;\";") and
        checkError1("\"\\25#64ie1focnn5g78;\";",
                    CARD_BASED_TOO_BIG, 1, 20,
                    "Based integer \"25#64ie1focnn5g78\" too big",
                    "\"\\25#64ie1focnn5g78;\";") and
        checkError1("\"\\26#3igoecjbmca688;\";",
                    CARD_BASED_TOO_BIG, 1, 20,
                    "Based integer \"26#3igoecjbmca688\" too big",
                    "\"\\26#3igoecjbmca688;\";") and
        checkError1("\"\\27#27c48l5b37oaoq;\";",
                    CARD_BASED_TOO_BIG, 1, 20,
                    "Based integer \"27#27c48l5b37oaoq\" too big",
                    "\"\\27#27c48l5b37oaoq;\";") and
        checkError1("\"\\28#1bk39f3ah3dmq8;\";",
                    CARD_BASED_TOO_BIG, 1, 20,
                    "Based integer \"28#1bk39f3ah3dmq8\" too big",
                    "\"\\28#1bk39f3ah3dmq8;\";") and
        checkError1("\"\\29#q1se8f0m04isc;\";",
                    CARD_BASED_TOO_BIG, 1, 19,
                    "Based integer \"29#q1se8f0m04isc\" too big",
                    "\"\\29#q1se8f0m04isc;\";") and
        checkError1("\"\\30#hajppbc1fc208;\";",
                    CARD_BASED_TOO_BIG, 1, 19,
                    "Based integer \"30#hajppbc1fc208\" too big",
                    "\"\\30#hajppbc1fc208;\";") and
        checkError1("\"\\31#bm03i95hia438;\";",
                    CARD_BASED_TOO_BIG, 1, 19,
                    "Based integer \"31#bm03i95hia438\" too big",
                    "\"\\31#bm03i95hia438;\";") and
        checkError1("\"\\32#8000000000000;\";",
                    CARD_BASED_TOO_BIG, 1, 19,
                    "Based integer \"32#8000000000000\" too big",
                    "\"\\32#8000000000000;\";") and
        checkError1("\"\\33#5hg4ck9jd4u38;\";",
                    CARD_BASED_TOO_BIG, 1, 19,
                    "Based integer \"33#5hg4ck9jd4u38\" too big",
                    "\"\\33#5hg4ck9jd4u38;\";") and
        checkError1("\"\\34#3tdtk1v8j6tpq;\";",
                    CARD_BASED_TOO_BIG, 1, 19,
                    "Based integer \"34#3tdtk1v8j6tpq\" too big",
                    "\"\\34#3tdtk1v8j6tpq;\";") and
        checkError1("\"\\35#2pijmikexrxp8;\";",
                    CARD_BASED_TOO_BIG, 1, 19,
                    "Based integer \"35#2pijmikexrxp8\" too big",
                    "\"\\35#2pijmikexrxp8;\";") and
        checkError1("\"\\36#1y2p0ij32e8e8;\";",
                    CARD_BASED_TOO_BIG, 1, 19,
                    "Based integer \"36#1y2p0ij32e8e8\" too big",
                    "\"\\36#1y2p0ij32e8e8;\";") then
      okay := TRUE;
    else
      writeln(" *** CARD_BASED_TOO_BIG not reported correctly.");
    end if;
  end func;


const func boolean: checkNumericLiteralErrors is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkCardDecimalTooBig and
        checkNegativeExponent and
        checkDigitExpected and
        checkCardWithExponentTooBig and
        checkBase2To36Allowed and
        checkExtDigitExpected and
        checkIllegalBaseDigit and
        checkCardBasedTooBig then
      writeln("Numeric literal errors are reported correctly.");
      okay := TRUE;
    else
      writeln(" *** Numeric literal errors are not reported correctly.");
    end if;
  end func;


const func boolean: checkApostrophExpected is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1("'';",
                    APOSTROPHEXPECTED, 1, 3,
                    "\"'\" expected found \";\"",
                    "'';") and
        checkError1("'abcde';",
                    APOSTROPHEXPECTED, 1, 3,
                    "\"'\" expected found \"b\"",
                    "'abcde';") and
        checkError1("'\"\"';",
                    APOSTROPHEXPECTED, 1, 3,
                    "\"'\" expected found \"\"\"",
                    "'\"\"';") then
      okay := TRUE;
    else
      writeln(" *** APOSTROPHEXPECTED not reported correctly.");
    end if;
  end func;


const func boolean: checkCharExceeds is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1("'\n;",
                    CHAREXCEEDS, 1, 2,
                    "Character literal exceeds source line",
                    "'") and
        checkError1("'",
                    CHAREXCEEDS, 1, 1,
                    "Character literal exceeds source line",
                    "'") and
        checkError1("'x\n",
                    CHAREXCEEDS, 1, 3,
                    "Character literal exceeds source line",
                    "'x") and
        checkError1("'x",
                    CHAREXCEEDS, 1, 2,
                    "Character literal exceeds source line",
                    "'x") then
      okay := TRUE;
    else
      writeln(" *** CHAREXCEEDS not reported correctly.");
    end if;
  end func;


const func boolean: checkWrongQuotationRepresentation is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1("\"a\"\"b\";",
                    WRONG_QUOTATION_REPRESENTATION, 1, 4,
                    "Use \\\" instead of \"\" to represent \" in a string",
                    "\"a\"\"b\";") then
      okay := TRUE;
    else
      writeln(" *** WRONG_QUOTATION_REPRESENTATION not reported correctly.");
    end if;
  end func;


const func boolean: checkStringEscape is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1("\"\\!\";",
                    STRINGESCAPE, 1, 3,
                    "Illegal string escape \"\\!\"",
                    "\"\\!\";") and
        checkError1("\"\\#\";",
                    STRINGESCAPE, 1, 3,
                    "Illegal string escape \"\\#\"",
                    "\"\\#\";") and
        checkError1("\"\\$\";",
                    STRINGESCAPE, 1, 3,
                    "Illegal string escape \"\\$\"",
                    "\"\\$\";") and
        checkError1("\"\\%\";",
                    STRINGESCAPE, 1, 3,
                    "Illegal string escape \"\\%\"",
                    "\"\\%\";") and
        checkError1("\"\\&\";",
                    STRINGESCAPE, 1, 3,
                    "Illegal string escape \"\\&\"",
                    "\"\\&\";") and
        checkError1("\"\\(\";",
                    STRINGESCAPE, 1, 3,
                    "Illegal string escape \"\\(\"",
                    "\"\\(\";") and
        checkError1("\"\\)\";",
                    STRINGESCAPE, 1, 3,
                    "Illegal string escape \"\\)\"",
                    "\"\\)\";") and
        checkError1("\"\\*\";",
                    STRINGESCAPE, 1, 3,
                    "Illegal string escape \"\\*\"",
                    "\"\\*\";") and
        checkError1("\"\\+\";",
                    STRINGESCAPE, 1, 3,
                    "Illegal string escape \"\\+\"",
                    "\"\\+\";") and
        checkError1("\"\\,\";",
                    STRINGESCAPE, 1, 3,
                    "Illegal string escape \"\\,\"",
                    "\"\\,\";") and
        checkError1("\"\\-\";",
                    STRINGESCAPE, 1, 3,
                    "Illegal string escape \"\\-\"",
                    "\"\\-\";") and
        checkError1("\"\\.\";",
                    STRINGESCAPE, 1, 3,
                    "Illegal string escape \"\\.\"",
                    "\"\\.\";") and
        checkError1("\"\\/\";",
                    STRINGESCAPE, 1, 3,
                    "Illegal string escape \"\\/\"",
                    "\"\\/\";") and
        checkError1("\"\\:\";",
                    STRINGESCAPE, 1, 3,
                    "Illegal string escape \"\\:\"",
                    "\"\\:\";") and
        checkError1("\"\\;\";",
                    STRINGESCAPE, 1, 3,
                    "Illegal string escape \"\\;\"",
                    "\"\\;\";") and
        checkError1("\"\\<\";",
                    STRINGESCAPE, 1, 3,
                    "Illegal string escape \"\\<\"",
                    "\"\\<\";") and
        checkError1("\"\\=\";",
                    STRINGESCAPE, 1, 3,
                    "Illegal string escape \"\\=\"",
                    "\"\\=\";") and
        checkError1("\"\\>\";",
                    STRINGESCAPE, 1, 3,
                    "Illegal string escape \"\\>\"",
                    "\"\\>\";") and
        checkError1("\"\\?\";",
                    STRINGESCAPE, 1, 3,
                    "Illegal string escape \"\\?\"",
                    "\"\\?\";") and
        checkError1("\"\\@\";",
                    STRINGESCAPE, 1, 3,
                    "Illegal string escape \"\\@\"",
                    "\"\\@\";") and
        checkError1("\"\\[\";",
                    STRINGESCAPE, 1, 3,
                    "Illegal string escape \"\\[\"",
                    "\"\\[\";") and
        checkError1("\"\\]\";",
                    STRINGESCAPE, 1, 3,
                    "Illegal string escape \"\\]\"",
                    "\"\\]\";") and
        checkError1("\"\\^\";",
                    STRINGESCAPE, 1, 3,
                    "Illegal string escape \"\\^\"",
                    "\"\\^\";") and
        checkError1("\"\\_\";",
                    STRINGESCAPE, 1, 3,
                    "Illegal string escape \"\\_\"",
                    "\"\\_\";") and
        checkError1("\"\\`\";",
                    STRINGESCAPE, 1, 3,
                    "Illegal string escape \"\\`\"",
                    "\"\\`\";") and
        checkError1("\"\\c\";",
                    STRINGESCAPE, 1, 3,
                    "Illegal string escape \"\\c\"",
                    "\"\\c\";") and
        checkError1("\"\\d\";",
                    STRINGESCAPE, 1, 3,
                    "Illegal string escape \"\\d\"",
                    "\"\\d\";") and
        checkError1("\"\\g\";",
                    STRINGESCAPE, 1, 3,
                    "Illegal string escape \"\\g\"",
                    "\"\\g\";") and
        checkError1("\"\\h\";",
                    STRINGESCAPE, 1, 3,
                    "Illegal string escape \"\\h\"",
                    "\"\\h\";") and
        checkError1("\"\\i\";",
                    STRINGESCAPE, 1, 3,
                    "Illegal string escape \"\\i\"",
                    "\"\\i\";") and
        checkError1("\"\\j\";",
                    STRINGESCAPE, 1, 3,
                    "Illegal string escape \"\\j\"",
                    "\"\\j\";") and
        checkError1("\"\\k\";",
                    STRINGESCAPE, 1, 3,
                    "Illegal string escape \"\\k\"",
                    "\"\\k\";") and
        checkError1("\"\\l\";",
                    STRINGESCAPE, 1, 3,
                    "Illegal string escape \"\\l\"",
                    "\"\\l\";") and
        checkError1("\"\\m\";",
                    STRINGESCAPE, 1, 3,
                    "Illegal string escape \"\\m\"",
                    "\"\\m\";") and
        checkError1("\"\\o\";",
                    STRINGESCAPE, 1, 3,
                    "Illegal string escape \"\\o\"",
                    "\"\\o\";") and
        checkError1("\"\\p\";",
                    STRINGESCAPE, 1, 3,
                    "Illegal string escape \"\\p\"",
                    "\"\\p\";") and
        checkError1("\"\\q\";",
                    STRINGESCAPE, 1, 3,
                    "Illegal string escape \"\\q\"",
                    "\"\\q\";") and
        checkError1("\"\\s\";",
                    STRINGESCAPE, 1, 3,
                    "Illegal string escape \"\\s\"",
                    "\"\\s\";") and
        checkError1("\"\\u\";",
                    STRINGESCAPE, 1, 3,
                    "Illegal string escape \"\\u\"",
                    "\"\\u\";") and
        checkError1("\"\\w\";",
                    STRINGESCAPE, 1, 3,
                    "Illegal string escape \"\\w\"",
                    "\"\\w\";") and
        checkError1("\"\\x\";",
                    STRINGESCAPE, 1, 3,
                    "Illegal string escape \"\\x\"",
                    "\"\\x\";") and
        checkError1("\"\\y\";",
                    STRINGESCAPE, 1, 3,
                    "Illegal string escape \"\\y\"",
                    "\"\\y\";") and
        checkError1("\"\\z\";",
                    STRINGESCAPE, 1, 3,
                    "Illegal string escape \"\\z\"",
                    "\"\\z\";") and
        checkError1("\"\\{\";",
                    STRINGESCAPE, 1, 3,
                    "Illegal string escape \"\\{\"",
                    "\"\\{\";") and
        checkError1("\"\\|\";",
                    STRINGESCAPE, 1, 3,
                    "Illegal string escape \"\\|\"",
                    "\"\\|\";") and
        checkError1("\"\\}\";",
                    STRINGESCAPE, 1, 3,
                    "Illegal string escape \"\\}\"",
                    "\"\\}\";") and
        checkError1("\"\\~\";",
                    STRINGESCAPE, 1, 3,
                    "Illegal string escape \"\\~\"",
                    "\"\\~\";") then
      okay := TRUE;
    else
      writeln(" *** STRINGESCAPE not reported correctly.");
    end if;
  end func;


const func boolean: checkWrongNumericalEscape is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1("'\\8",
                    WRONG_NUMERICAL_ESCAPE, 1, 3,
                    "Numerical escape sequences should end with \";\" not EOF",
                    "'\\8") and
        checkError1("'\\8';",
                    WRONG_NUMERICAL_ESCAPE, 1, 4,
                    "Numerical escape sequences should end with \";\" not \"'\"",
                    "'\\8';") and
        checkError1("'\\8\\';",
                    WRONG_NUMERICAL_ESCAPE, 1, 4,
                    "Numerical escape sequences should end with \";\" not \"\\\"",
                    "'\\8\\';") and
        checkError1("'\\8y';",
                    WRONG_NUMERICAL_ESCAPE, 1, 4,
                    "Numerical escape sequences should end with \";\" not \"y\"",
                    "'\\8y';") and
        checkError1("\"\\8",
                    WRONG_NUMERICAL_ESCAPE, 1, 3,
                    "Numerical escape sequences should end with \";\" not EOF",
                    "\"\\8") and
        checkError1("\"\\8\";",
                    WRONG_NUMERICAL_ESCAPE, 1, 4,
                    "Numerical escape sequences should end with \";\" not \"\"\"",
                    "\"\\8\";") and
        checkError1("\"\\8\\\";",
                    WRONG_NUMERICAL_ESCAPE, 1, 4,
                    "Numerical escape sequences should end with \";\" not \"\\\"",
                    "\"\\8\\\";") and
        checkError1("\"\\8y\";",
                    WRONG_NUMERICAL_ESCAPE, 1, 4,
                    "Numerical escape sequences should end with \";\" not \"y\"",
                    "\"\\8y\";") then
      okay := TRUE;
    else
      writeln(" *** WRONG_NUMERICAL_ESCAPE not reported correctly.");
    end if;
  end func;


const func boolean: checkNumericalEscapeTooBig is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1("\"\\4294967296;\";",
                    NUMERICAL_ESCAPE_TOO_BIG, 1, 13,
                    "The numerical escape sequence \"\\4294967296;\" is too big",
                    "\"\\4294967296;\";") and
        checkError1("\"\\9999999999;\";",
                    NUMERICAL_ESCAPE_TOO_BIG, 1, 13,
                    "The numerical escape sequence \"\\9999999999;\" is too big",
                    "\"\\9999999999;\";") and
        checkError1("\"\\9223372036854775807;\";",
                    NUMERICAL_ESCAPE_TOO_BIG, 1, 22,
                    "The numerical escape sequence \"\\9223372036854775807;\" is too big",
                    "\"\\9223372036854775807;\";") and
        checkError1("\"\\16#100000000;\";",
                    NUMERICAL_ESCAPE_TOO_BIG, 1, 15,
                    "The numerical escape sequence \"\\4294967296;\" is too big",
                    "\"\\16#100000000;\";") and
        checkError1("\"\\16#7fffffffffffffff;\";",
                    NUMERICAL_ESCAPE_TOO_BIG, 1, 22,
                    "The numerical escape sequence \"\\9223372036854775807;\" is too big",
                    "\"\\16#7fffffffffffffff;\";") then
      okay := TRUE;
    else
      writeln(" *** NUMERICAL_ESCAPE_TOO_BIG not reported correctly.");
    end if;
  end func;


const func boolean: checkBackslashExpected is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1("\"\\",
                    WRONG_STRING_CONTINUATION, 1, 2,
                    "String continuations should end with \"\\\" not EOF",
                    "\"\\") and
        checkError1("\"\\ ",
                    WRONG_STRING_CONTINUATION, 1, 3,
                    "String continuations should end with \"\\\" not EOF",
                    "\"\\ ") and
        checkError1("\"\\\n",
                    WRONG_STRING_CONTINUATION, 2, 3,
                    "String continuations should end with \"\\\" not EOF",
                    "\"\\") and
        checkError1("\"\\\r\n",
                    WRONG_STRING_CONTINUATION, 2, 4,
                    "String continuations should end with \"\\\" not EOF",
                    "\"\\") and
        checkError1("\"\\ \n",
                    WRONG_STRING_CONTINUATION, 2, 4,
                    "String continuations should end with \"\\\" not EOF",
                    "\"\\ ") and
        checkError1("\"\\\t\n",
                    WRONG_STRING_CONTINUATION, 2, 4,
                    "String continuations should end with \"\\\" not EOF",
                    "\"\\\t") and
        checkError1("\"\\\ncontinued\";",
                    WRONG_STRING_CONTINUATION, 2, 1,
                    "String continuations should end with \"\\\" not \"c\"",
                    "continued\";") and
        checkError1("\"\\ \ncontinued\";",
                    WRONG_STRING_CONTINUATION, 2, 1,
                    "String continuations should end with \"\\\" not \"c\"",
                    "continued\";") and
        checkError1("\"\\\t\ncontinued\";",
                    WRONG_STRING_CONTINUATION, 2, 1,
                    "String continuations should end with \"\\\" not \"c\"",
                    "continued\";") and
        checkError1("\"\\\r\ncontinued\";",
                    WRONG_STRING_CONTINUATION, 2, 1,
                    "String continuations should end with \"\\\" not \"c\"",
                    "continued\";") and
        checkError1("\"\\ continued\";",
                    WRONG_STRING_CONTINUATION, 1, 4,
                    "String continuations should end with \"\\\" not \"c\"",
                    "\"\\ continued\";") and
        checkError1("\"\\\tcontinued\";",
                    WRONG_STRING_CONTINUATION, 1, 4,
                    "String continuations should end with \"\\\" not \"c\"",
                    "\"\\\tcontinued\";") and
        checkError1("\"\\\rcontinued\";",
                    WRONG_STRING_CONTINUATION, 1, 4,
                    "String continuations should end with \"\\\" not \"c\"",
                    "\"\\\rcontinued\";") then
      okay := TRUE;
    else
      writeln(" *** WRONG_STRING_CONTINUATION not reported correctly.");
    end if;
  end func;


const func boolean: checkStringExceeds is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1("\"\n;",
                    STRING_EXCEEDS, 1, 2,
                    "String literal exceeds source line",
                    "\"") and
        checkError1("\" \n;",
                    STRING_EXCEEDS, 1, 3,
                    "String literal exceeds source line",
                    "\" ") and
        checkError2("\"\\",
                    STRING_EXCEEDS, 1, 2,
                    "String literal exceeds source line",
                    "\"\\") and
        checkError2("\"\\ ",
                    STRING_EXCEEDS, 1, 3,
                    "String literal exceeds source line",
                    "\"\\ ") and
        checkError2("\"\\\n",
                    STRING_EXCEEDS, 2, 3,
                    "String literal exceeds source line",
                    "\"\\") and
        checkError2("\"\\\r\n",
                    STRING_EXCEEDS, 2, 4,
                    "String literal exceeds source line",
                    "\"\\") and
        checkError2("\"\\ \n",
                    STRING_EXCEEDS, 2, 4,
                    "String literal exceeds source line",
                    "\"\\ ") and
        checkError2("\"\\\t\n",
                    STRING_EXCEEDS, 2, 4,
                    "String literal exceeds source line",
                    "\"\\\t") then
      okay := TRUE;
    else
      writeln(" *** STRING_EXCEEDS not reported correctly.");
    end if;
  end func;


const func boolean: checkStringAndCharLiteralErrors is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkApostrophExpected and
        checkCharExceeds and
        checkWrongQuotationRepresentation and
        checkStringEscape and
        checkWrongNumericalEscape and
        checkNumericalEscapeTooBig and
        checkBackslashExpected and
        checkStringExceeds then
      writeln("String and char literal errors are reported correctly.");
      okay := TRUE;
    else
      writeln(" *** String and char literal errors are not reported correctly.");
    end if;
  end func;


const func boolean: checkNameExpected is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1("$ ();",
                    NAME_EXPECTED, 1, 4,
                    "Name expected found \"(\"",
                    "$ ();") and
        checkError1("$ 12345;",
                    NAME_EXPECTED, 1, 8,
                    "Name expected found \"12345\"",
                    "$ 12345;") and
        checkError1("$ 12345_;",
                    NAME_EXPECTED, 1, 9,
                    "Name expected found \"12345_\"",
                    "$ 12345_;") and
        checkError1("$ 'x';",
                    NAME_EXPECTED, 1, 6,
                    "Name expected found 'x'",
                    "$ 'x';") and
        checkError1("$ \"x\";",
                    NAME_EXPECTED, 1, 6,
                    "Name expected found \"x\"",
                    "$ \"x\";") and
        checkError1("$ 1.5;",
                    NAME_EXPECTED, 1, 6,
                    "Name expected found \"1.5\"",
                    "$ 1.5;") then
      okay := TRUE;
    else
      writeln(" *** NAME_EXPECTED not reported correctly.");
    end if;
  end func;


const func boolean: checkCardExpected is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1("\"\\1_\";",
                    CARD_EXPECTED, 1, 5,
                    "Integer literal expected found \"1_\"",
                    "\"\\1_\";") and
        checkError1("\"\\1.5;\";",
                    CARD_EXPECTED, 1, 6,
                    "Integer literal expected found \"1.5\"",
                    "\"\\1.5;\";") and
        checkError1("$ include \"syntax.s7i\";\n\
                    \$ syntax expr: l2 is -> x;",
                    CARD_EXPECTED, 2, 26,
                    "Integer literal expected found \"x\"",
                    "$ syntax expr: l2 is -> x;") and
        checkError1("$ include \"syntax.s7i\";\n\
                    \$ syntax expr: l2 is -> 1_;",
                    CARD_EXPECTED, 2, 27,
                    "Integer literal expected found \"1_\"",
                    "$ syntax expr: l2 is -> 1_;") and
        checkError1("$ include \"syntax.s7i\";\n\
                    \$ syntax expr: l2 is -> 1.5;",
                    CARD_EXPECTED, 2, 28,
                    "Integer literal expected found \"1.5\"",
                    "$ syntax expr: l2 is -> 1.5;") and
        checkError1("$ include \"syntax.s7i\";\n\
                    \$ syntax expr: l2 is -> 'x';",
                    CARD_EXPECTED, 2, 28,
                    "Integer literal expected found 'x'",
                    "$ syntax expr: l2 is -> 'x';") and
        checkError1("$ include \"syntax.s7i\";\n\
                    \$ syntax expr: l2 is -> \"x\";",
                    CARD_EXPECTED, 2, 28,
                    "Integer literal expected found \"x\"",
                    "$ syntax expr: l2 is -> \"x\";") and
        checkError1("$ include \"syntax.s7i\";\n\
                    \$ syntax expr: l2 is -> (x);",
                    CARD_EXPECTED, 2, 26,
                    "Integer literal expected found \"(\"",
                    "$ syntax expr: l2 is -> (x);") and
        checkError1("$ include \"syntax.s7i\";\n\
                    \$ syntax expr: .().postfix is <- 50[x];",
                    CARD_EXPECTED, 2, 38,
                    "Integer literal expected found \"x\"",
                    "$ syntax expr: .().postfix is <- 50[x];") and
        checkError1("$ include \"syntax.s7i\";\n\
                    \$ syntax expr: .().postfix is <- 50[1_];",
                    CARD_EXPECTED, 2, 39,
                    "Integer literal expected found \"1_\"",
                    "$ syntax expr: .().postfix is <- 50[1_];") and
        checkError1("$ include \"syntax.s7i\";\n\
                    \$ syntax expr: .().postfix is <- 50[1.5];",
                    CARD_EXPECTED, 2, 40,
                    "Integer literal expected found \"1.5\"",
                    "$ syntax expr: .().postfix is <- 50[1.5];") and
        checkError1("$ include \"syntax.s7i\";\n\
                    \$ syntax expr: .().postfix is <- 50['x'];",
                    CARD_EXPECTED, 2, 40,
                    "Integer literal expected found 'x'",
                    "$ syntax expr: .().postfix is <- 50['x'];") and
        checkError1("$ include \"syntax.s7i\";\n\
                    \$ syntax expr: .().postfix is <- 50[\"x\"];",
                    CARD_EXPECTED, 2, 40,
                    "Integer literal expected found \"x\"",
                    "$ syntax expr: .().postfix is <- 50[\"x\"];") and
        checkError1("$ include \"syntax.s7i\";\n\
                    \$ syntax expr: .().postfix is <- 50[(x)];",
                    CARD_EXPECTED, 2, 38,
                    "Integer literal expected found \"(\"",
                    "$ syntax expr: .().postfix is <- 50[(x)];") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \syntax expr: .prefix.() is -> x;",
                    CARD_EXPECTED, 2, 0,
                    "Integer literal expected found \"x\"",
                    "syntax expr: .prefix.() is -> x;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \  include \"bigint.s7i\";\n\
                    \syntax expr: .prefix.() is -> 1_;",
                    CARD_EXPECTED, 3, 0,
                    "Integer literal expected found \"constant bigInteger: 1\"",
                    "syntax expr: .prefix.() is -> 1_;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \  include \"float.s7i\";\n\
                    \syntax expr: .prefix.() is -> 1.5;",
                    CARD_EXPECTED, 3, 0,
                    "Integer literal expected found \"constant float: 1.5\"",
                    "syntax expr: .prefix.() is -> 1.5;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \syntax expr: .prefix.() is -> 'x';",
                    CARD_EXPECTED, 2, 0,
                    "Integer literal expected found \"constant char: 'x'\"",
                    "syntax expr: .prefix.() is -> 'x';") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \syntax expr: .prefix.() is -> \"x\";",
                    CARD_EXPECTED, 2, 0,
                    "Integer literal expected found constant string: \"x\"",
                    "syntax expr: .prefix.() is -> \"x\";") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \syntax expr: .().postfix is <- 50[x];",
                    CARD_EXPECTED, 2, 0,
                    "Integer literal expected found \"({50 [ x ] })\"",
                    "syntax expr: .().postfix is <- 50[x];") then
      okay := TRUE;
    else
      writeln(" *** CARD_EXPECTED not reported correctly.");
    end if;
  end func;


const func boolean: checkStriExpected is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1("$system 123 is fee;",
                    STRING_EXPECTED, 1, 12,
                    "String literal expected found \"123\"",
                    "$system 123 is fee;") and
        checkError1("$include 123;",
                    STRING_EXPECTED, 1, 13,
                    "String literal expected found \"123\"",
                    "$include 123;") and
        checkError1("$library 123;",
                    STRING_EXPECTED, 1, 13,
                    "String literal expected found \"123\"",
                    "$library 123;") and
        checkError1("$message 123;",
                    STRING_EXPECTED, 1, 13,
                    "String literal expected found \"123\"",
                    "$message 123;") and
        checkError1("$trace 123;",
                    STRING_EXPECTED, 1, 11,
                    "String literal expected found \"123\"",
                    "$trace 123;") and
        checkError1("$ include \"syntax.s7i\";\n\
                    \$ const ACTION: a is $ action 123;",
                    STRING_EXPECTED, 2, 34,
                    "String literal expected found \"123\"",
                    "$ const ACTION: a is $ action 123;") then
      okay := TRUE;
    else
      writeln(" *** STRING_EXPECTED not reported correctly.");
    end if;
  end func;


const func boolean: checkIdentExpected is func
  result
    var boolean: okay is FALSE;
  begin
    if (* checkError1("$ include \"seed7_05.s7i\";\n\
                    \syntax expr: .prefix\"asdf\".postfix is <- 5;",
                    IDENT_EXPECTED, 2, 38,
                    "Integer literal expected found \"x\"",
                    "syntax expr: .prefix\"asdf\".postfix is <- 5;") and *)
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \const integer: 123 is 1;",
                    IDENT_EXPECTED, 2, 24,
                    "Identifier expected found \"123\"",
                    "const integer: 123 is 1;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \  include \"bigint.s7i\";\n\
                    \const integer: 1_ is 1;",
                    IDENT_EXPECTED, 3, 23,
                    "Identifier expected found constant bigInteger: 1",
                    "const integer: 1_ is 1;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \  include \"float.s7i\";\n\
                    \const integer: 1.5 is 1;",
                    IDENT_EXPECTED, 3, 24,
                    "Identifier expected found \"1.5\"",
                    "const integer: 1.5 is 1;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \const integer: 'a' is 1;",
                    IDENT_EXPECTED, 2, 24,
                    "Identifier expected found 'a'",
                    "const integer: 'a' is 1;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \const integer: \"asdf\" is 1;",
                    IDENT_EXPECTED, 2, 27,
                    "Identifier expected found \"asdf\"",
                    "const integer: \"asdf\" is 1;") and
(*        checkError1("$ include \"seed7_05.s7i\";\n\
                    \const integer: 1234(in integer: a) is 1;",
                    IDENT_EXPECTED, 2, 27,
                    "Identifier expected found \"asdf\"",
                    "const integer: 1234(in integer: a) is 1;") and *)
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \$ syntax expr: 123 is -> 5;",
                    IDENT_EXPECTED, 2, 27,
                    "Identifier expected found \"123\"",
                    "$ syntax expr: 123 is -> 5;") then
      okay := TRUE;
    else
      writeln(" *** IDENT_EXPECTED not reported correctly.");
    end if;
  end func;


const func boolean: checkTypeExpected is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1("$ include \"seed7_05.s7i\";\n\
                    \const func integer: func foo is return 1;\n\
                    \$ const $ func type: $ fee (ref func foo param) is $ action \"TYP_FUNC\";",
                    TYPE_EXPECTED, 3, 0,
                    "Type expected found expression ({func foo }) of type func integer",
                    "$ const $ func type: $ fee (ref func foo param) is $ action \"TYP_FUNC\";") and
        checkError1("$ include \"syntax.s7i\";\n\
                    \$ const $ func type: $ asdf (ref jkl param) is $ action \"TYP_FUNC\";",
                    TYPE_EXPECTED, 2, 47,
                    "Type expected found jkl",
                    "$ const $ func type: $ asdf (ref jkl param) is $ action \"TYP_FUNC\";") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \$ system \"string\" is writeln;",
                    TYPE_EXPECTED, 2, 29,
                    "Type expected found constant proc: writeln",
                    "$ system \"string\" is writeln;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \$ const: b is 5;",
                    TYPE_EXPECTED, 2, 9,
                    "Type expected found \":\"",
                    "$ const: b is 5;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \$ const $func jkl: b is 5;",
                    TYPE_EXPECTED, 2, 19,
                    "Type expected found jkl",
                    "$ const $func jkl: b is 5;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \$ const jkl: b is 5;",
                    TYPE_EXPECTED, 2, 13,
                    "Type expected found jkl",
                    "$ const jkl: b is 5;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \$ const type: abcd is $ subtype jkl;",
                    TYPE_EXPECTED, 2, 36,
                    "Type expected found jkl",
                    "$ const type: abcd is $ subtype jkl;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \$ const type: abcd is $ func jkl;",
                    TYPE_EXPECTED, 2, 33,
                    "Type expected found jkl",
                    "$ const type: abcd is $ func jkl;") and
(*        checkError1("$ include \"seed7_05.s7i\";\n\
                    \$ const $ type: abcd is $ jkl;",
                    TYPE_EXPECTED, 2, 33,
                    "Type expected found jkl",
                    "$ const $ type: abcd is $ jkl;") and *)
        checkError1("$ include \"syntax.s7i\";\n\
                    \$ syntax abcd: .prefix.() is -> 5;",
                    TYPE_EXPECTED, 2, 15,
                    "Type expected found abcd",
                    "$ syntax abcd: .prefix.() is -> 5;") and
        checkError1("$ include \"syntax.s7i\";\n\
                    \$ syntax expr: .prefix.(abcd) is -> 5;",
                    TYPE_EXPECTED, 2, 38,
                    "Type expected found abcd",
                    "$ syntax expr: .prefix.(abcd) is -> 5;") then
      okay := TRUE;
    else
      writeln(" *** TYPE_EXPECTED not reported correctly.");
    end if;
  end func;


const func boolean: checkProcExpected is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1("$ include \"seed7_05.s7i\";\n\
                    \const proc: abc is func\n\
                    \  begin 1; end func;",
                    PROC_EXPECTED, 3, 20,
                    "Procedure expected found type integer expression",
                    "  begin 1; end func;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \  include \"bigint.s7i\";\n\
                    \const proc: abc is func\n\
                    \  begin 1_; end func;",
                    PROC_EXPECTED, 4, 21,
                    "Procedure expected found type bigInteger expression",
                    "  begin 1_; end func;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \  include \"float.s7i\";\n\
                    \const proc: abc is func\n\
                    \  begin 1.5; end func;",
                    PROC_EXPECTED, 4, 22,
                    "Procedure expected found type float expression",
                    "  begin 1.5; end func;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \const proc: abc is func\n\
                    \  begin 'a'; end func;",
                    PROC_EXPECTED, 3, 22,
                    "Procedure expected found type char expression",
                    "  begin 'a'; end func;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \const proc: abc is func\n\
                    \  begin \"a\"; end func;",
                    PROC_EXPECTED, 3, 22,
                    "Procedure expected found type string expression",
                    "  begin \"a\"; end func;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \const proc: abc is func\n\
                    \  local\n\
                    \    var integer: x is 0;\n\
                    \  begin 1; end func;",
                    PROC_EXPECTED, 5, 20,
                    "Procedure expected found type integer expression",
                    "  begin 1; end func;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \  include \"bigint.s7i\";\n\
                    \const proc: abc is func\n\
                    \  local\n\
                    \    var integer: x is 0;\n\
                    \  begin 1_; end func;",
                    PROC_EXPECTED, 6, 21,
                    "Procedure expected found type bigInteger expression",
                    "  begin 1_; end func;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \  include \"float.s7i\";\n\
                    \const proc: abc is func\n\
                    \  local\n\
                    \    var integer: x is 0;\n\
                    \  begin 1.5; end func;",
                    PROC_EXPECTED, 6, 22,
                    "Procedure expected found type float expression",
                    "  begin 1.5; end func;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \const proc: abc is func\n\
                    \  local\n\
                    \    var integer: x is 0;\n\
                    \  begin 'a'; end func;",
                    PROC_EXPECTED, 5, 22,
                    "Procedure expected found type char expression",
                    "  begin 'a'; end func;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \const proc: abc is func\n\
                    \  local\n\
                    \    var integer: x is 0;\n\
                    \  begin \"a\"; end func;",
                    PROC_EXPECTED, 5, 22,
                    "Procedure expected found type string expression",
                    "  begin \"a\"; end func;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \const func integer: abc is func\n\
                    \  result\n\
                    \    var integer: x is 0;\n\
                    \  begin 1; end func;",
                    PROC_EXPECTED, 5, 20,
                    "Procedure expected found type integer expression",
                    "  begin 1; end func;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \  include \"bigint.s7i\";\n\
                    \const func integer: abc is func\n\
                    \  result\n\
                    \    var integer: x is 0;\n\
                    \  begin 1_; end func;",
                    PROC_EXPECTED, 6, 21,
                    "Procedure expected found type bigInteger expression",
                    "  begin 1_; end func;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \  include \"float.s7i\";\n\
                    \const func integer: abc is func\n\
                    \  result\n\
                    \    var integer: x is 0;\n\
                    \  begin 1.5; end func;",
                    PROC_EXPECTED, 6, 22,
                    "Procedure expected found type float expression",
                    "  begin 1.5; end func;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \const func integer: abc is func\n\
                    \  result\n\
                    \    var integer: x is 0;\n\
                    \  begin 'a'; end func;",
                    PROC_EXPECTED, 5, 22,
                    "Procedure expected found type char expression",
                    "  begin 'a'; end func;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \const func integer: abc is func\n\
                    \  result\n\
                    \    var integer: x is 0;\n\
                    \  begin \"a\"; end func;",
                    PROC_EXPECTED, 5, 22,
                    "Procedure expected found type string expression",
                    "  begin \"a\"; end func;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \const func integer: abc is func\n\
                    \  result\n\
                    \    var integer: x is 0;\n\
                    \  local\n\
                    \    var integer: y is 0;\n\
                    \  begin 1; end func;",
                    PROC_EXPECTED, 7, 20,
                    "Procedure expected found type integer expression",
                    "  begin 1; end func;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \  include \"bigint.s7i\";\n\
                    \const func integer: abc is func\n\
                    \  result\n\
                    \    var integer: x is 0;\n\
                    \  local\n\
                    \    var integer: y is 0;\n\
                    \  begin 1_; end func;",
                    PROC_EXPECTED, 8, 21,
                    "Procedure expected found type bigInteger expression",
                    "  begin 1_; end func;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \  include \"float.s7i\";\n\
                    \const func integer: abc is func\n\
                    \  result\n\
                    \    var integer: x is 0;\n\
                    \  local\n\
                    \    var integer: y is 0;\n\
                    \  begin 1.5; end func;",
                    PROC_EXPECTED, 8, 22,
                    "Procedure expected found type float expression",
                    "  begin 1.5; end func;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \const func integer: abc is func\n\
                    \  result\n\
                    \    var integer: x is 0;\n\
                    \  local\n\
                    \    var integer: y is 0;\n\
                    \  begin 'a'; end func;",
                    PROC_EXPECTED, 7, 22,
                    "Procedure expected found type char expression",
                    "  begin 'a'; end func;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \const func integer: abc is func\n\
                    \  result\n\
                    \    var integer: x is 0;\n\
                    \  local\n\
                    \    var integer: y is 0;\n\
                    \  begin \"a\"; end func;",
                    PROC_EXPECTED, 7, 22,
                    "Procedure expected found type string expression",
                    "  begin \"a\"; end func;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \const type: aStruct is new struct raise RANGE_ERROR; end struct;",
                    PROC_EXPECTED, 2, 64,
                    "Procedure expected found RANGE_ERROR expression",
                    "const type: aStruct is new struct raise RANGE_ERROR; end struct;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \$ const type: aStruct is new struct raise RANGE_ERROR; end struct;",
                    PROC_EXPECTED, 2, 66,
                    "Procedure expected found RANGE_ERROR expression",
                    "$ const type: aStruct is new struct raise RANGE_ERROR; end struct;") then
      okay := TRUE;
    else
      writeln(" *** PROC_EXPECTED not reported correctly.");
    end if;
  end func;


const func boolean: checkParamSpecifierExpected is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1("$ include \"syntax.s7i\";\n\
                    \$ const $ func type: $ asdf (in type param) is $ action \"TYP_FUNC\";",
                    PARAM_SPECIFIER_EXPECTED, 2, 47,
                    "Parameter specifier \"ref\" expected found \"in\"",
                    "$ const $ func type: $ asdf (in type param) is $ action \"TYP_FUNC\";") then
      okay := TRUE;
    else
      writeln(" *** PARAM_SPECIFIER_EXPECTED not reported correctly.");
    end if;
  end func;


const func boolean: checkParamDeclOrSymbolExpected is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1("$ include \"seed7_05.s7i\";\n\
                    \const proc: test (1) is func\n\
                    \  begin\n\
                    \    writeln(\"okay\");\n\
                    \  end func;",
                    PARAM_DECL_OR_SYMBOL_EXPECTED, 2, 0,
                    "Parameter declaration or symbol expected found constant integer: 1",
                    "const proc: test (1) is func") then
      okay := TRUE;
    else
      writeln(" *** PARAM_DECL_OR_SYMBOL_EXPECTED not reported correctly.");
    end if;
  end func;


const func boolean: checkExceptionExpected is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1("$ include \"seed7_05.s7i\";\n\
                    \$ system \"memory_error\" is writeln;",
                    EXCEPTION_EXPECTED, 2, 35,
                    "Exception expected found constant proc: writeln",
                    "$ system \"memory_error\" is writeln;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \$ system \"numeric_error\" is writeln;",
                    EXCEPTION_EXPECTED, 2, 36,
                    "Exception expected found constant proc: writeln",
                    "$ system \"numeric_error\" is writeln;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \$ system \"overflow_error\" is writeln;",
                    EXCEPTION_EXPECTED, 2, 37,
                    "Exception expected found constant proc: writeln",
                    "$ system \"overflow_error\" is writeln;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \$ system \"range_error\" is writeln;",
                    EXCEPTION_EXPECTED, 2, 34,
                    "Exception expected found constant proc: writeln",
                    "$ system \"range_error\" is writeln;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \$ system \"index_error\" is writeln;",
                    EXCEPTION_EXPECTED, 2, 34,
                    "Exception expected found constant proc: writeln",
                    "$ system \"index_error\" is writeln;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \$ system \"file_error\" is writeln;",
                    EXCEPTION_EXPECTED, 2, 33,
                    "Exception expected found constant proc: writeln",
                    "$ system \"file_error\" is writeln;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \$ system \"database_error\" is writeln;",
                    EXCEPTION_EXPECTED, 2, 37,
                    "Exception expected found constant proc: writeln",
                    "$ system \"database_error\" is writeln;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \$ system \"graphic_error\" is writeln;",
                    EXCEPTION_EXPECTED, 2, 36,
                    "Exception expected found constant proc: writeln",
                    "$ system \"graphic_error\" is writeln;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \$ system \"illegal_action\" is writeln;",
                    EXCEPTION_EXPECTED, 2, 37,
                    "Exception expected found constant proc: writeln",
                    "$ system \"illegal_action\" is writeln;") then
      okay := TRUE;
    else
      writeln(" *** EXCEPTION_EXPECTED not reported correctly.");
    end if;
  end func;


const func boolean: checkExprExpected is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1("P;",
                    EXPR_EXPECTED, 1, 2,
                    "Expression expected found P",
                    "P;") and
        checkError1("();",
                    EXPR_EXPECTED, 1, 3,
                    "Expression expected found \")\"",
                    "();") then
(*         checkError1("$ include \"syntax.s7i\";\n\
                    \a+ ;",
                    EXPR_EXPECTED, 1, 3,
                    "Expression expected found \")\"",
                    "();") and *)
      okay := TRUE;
    else
      writeln(" *** EXPR_EXPECTED not reported correctly.");
    end if;
  end func;


const func boolean: checkExpectedSymbol is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1("$system \"integer\";",
                    EXPECTED_SYMBOL, 1, 18,
                    "\"is\" expected found \";\"",
                    "$system \"integer\";") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \$system \"integer\" is integer\n",
                    EXPECTED_SYMBOL, 2, 29,
                    "\";\" expected found \"END OF FILE\"",
                    "$system \"integer\" is integer") and
        checkError1("$include \"aFile\"\n",
                    EXPECTED_SYMBOL, 1, 17,
                    "\";\" expected found \"END OF FILE\"",
                    "$include \"aFile\"") and
        checkError1("$library \"abc\"\n",
                    EXPECTED_SYMBOL, 1, 15,
                    "\";\" expected found \"END OF FILE\"",
                    "$library \"abc\"") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \const integer: i is 5\n",
                    EXPECTED_SYMBOL, 2, 22,
                    "\";\" expected found \"END OF FILE\"",
                    "const integer: i is 5") and
        checkError1("$ include \"syntax.s7i\";\n\
                    \$ syntax expr fee",
                    EXPECTED_SYMBOL, 2, 17,
                    "\":\" expected found \"fee\"",
                    "$ syntax expr fee") and
        checkError1("$ include \"syntax.s7i\";\n\
                    \$ syntax expr: .fee.() foo",
                    EXPECTED_SYMBOL, 2, 26,
                    "\"is\" expected found \"foo\"",
                    "$ syntax expr: .fee.() foo") and
        checkError1("$ include \"syntax.s7i\";\n\
                    \$ syntax expr: .().postfix is <- 50[1 fee",
                    EXPECTED_SYMBOL, 2, 41,
                    "\"]\" expected found \"fee\"",
                    "$ syntax expr: .().postfix is <- 50[1 fee") and
        checkError1("$ include \"syntax.s7i\";\n\
                    \$ syntax expr: .().postfix is <- 50 fee",
                    EXPECTED_SYMBOL, 2, 39,
                    "\";\" expected found \"fee\"",
                    "$ syntax expr: .().postfix is <- 50 fee") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \syntax expr: .prefix.() is -> x fee",
                    EXPECTED_SYMBOL, 2, 35,
                    "\";\" expected found \"fee\"",
                    "syntax expr: .prefix.() is -> x fee") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \(\"abcde\" fee",
                    EXPECTED_SYMBOL, 2, 12,
                    "\")\" expected found \"fee\"",
                    "(\"abcde\" fee") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \abcde(\"abcde\" fee",
                    EXPECTED_SYMBOL, 2, 17,
                    "\")\" expected found \"fee\"",
                    "abcde(\"abcde\" fee") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \. (\"abcde\" fee",
                    EXPECTED_SYMBOL, 2, 14,
                    "\")\" expected found \"fee\"",
                    ". (\"abcde\" fee") and
        checkError1("$ include \"syntax.s7i\";\n\
                    \const proc: if true ten writeln end if  is noop;",
                    EXPECTED_SYMBOL, 2, 24,
                    "\"then\" expected found \"ten\"",
                    "const proc: if true ten writeln end if  is noop;") and
        checkError1("$ const $ type fee",
                    EXPECTED_SYMBOL, 1, 18,
                    "\":\" expected found \"fee\"",
                    "$ const $ type fee") and
        checkError1("$ const $ type: type fee",
                    EXPECTED_SYMBOL, 1, 24,
                    "\"is\" expected found \"fee\"",
                    "$ const $ type: type fee") and
        checkError1("$ const $ type: type is $ newtype fee",
                    EXPECTED_SYMBOL, 1, 37,
                    "\";\" expected found \"fee\"",
                    "$ const $ type: type is $ newtype fee") then
      okay := TRUE;
    else
      writeln(" *** EXPECTED_SYMBOL not reported correctly.");
    end if;
  end func;


const func boolean: checkExpectedErrors is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkNameExpected and
        checkCardExpected and
        checkStriExpected and
        checkIdentExpected and
        checkTypeExpected and
        checkProcExpected and
        checkParamSpecifierExpected and
        checkParamDeclOrSymbolExpected and
        checkExceptionExpected and
        checkExprExpected and
        checkExpectedSymbol then
      writeln("Errors where something was expected are reported correctly.");
      okay := TRUE;
    else
      writeln(" *** Errors where something was expected are not reported correctly.");
    end if;
  end func;


const func boolean: checkParamDeclFailed is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1("$ include \"seed7_05.s7i\";\n\
                    \const proc: test (1 + 2) is func\n\
                    \  begin\n\
                    \    writeln(\"okay\");\n\
                    \  end func;",
                    PARAM_DECL_FAILED, 2, 0,
                    "Declaration of parameter {1 + 2 } failed",
                    "const proc: test (1 + 2) is func") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \const func type: raiseException is func\n\
                    \  result\n\
                    \    var type: aType is void;\n\
                    \  begin\n\
                    \    raise RANGE_ERROR;\n\
                    \  end func;\n\
                    \const proc: test (in raiseException: aParam) is func\n\
                    \  begin\n\
                    \    writeln(\"okay\");\n\
                    \  end func;",
                    PARAM_DECL_FAILED, 8, 0,
                    "Declaration of parameter {in raiseException({}) : {aParam } } failed",
                    "const proc: test (in raiseException: aParam) is func") then
      okay := TRUE;
    else
      writeln(" *** PARAM_DECL_FAILED not reported correctly.");
    end if;
  end func;


const func boolean: checkDeclFailed is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError2("$ include \"seed7_05.s7i\";\n\
                    \const proc: (ref char param) ::= (ref integer param) is\n\
                    \  return raise NUMERIC_ERROR;\n\
                    \$ const char: j3 is 1;",
                    DECL_FAILED, 4, 22,
                    "Declaration of \"j3\" failed",
                    "$ const char: j3 is 1;") and
        checkError2("$ include \"seed7_05.s7i\";\n\
                    \const proc: (ref char param) ::= (ref integer param) is\n\
                    \  return raise NUMERIC_ERROR;\n\
                    \const char: j3 is 1;",
                    DECL_FAILED, 4, 0,
                    "Declaration of \"j3\" failed",
                    "const char: j3 is 1;") and
        checkError2("$ include \"seed7_05.s7i\";\n\
                    \const proc: (ref char param) ::= (ref integer param) is\n\
                    \  return raise NUMERIC_ERROR;\n\
                    \const char: j3 is 1+1;",
                    DECL_FAILED, 4, 0,
                    "Declaration of \"j3\" failed",
                    "const char: j3 is 1+1;") and
        checkError2("$ include \"seed7_05.s7i\";\n\
                    \const proc: (ref char param) ::= (ref integer param) is\n\
                    \  return raise NUMERIC_ERROR;\n\
                    \var char: j3 is 1;",
                    DECL_FAILED, 4, 0,
                    "Declaration of \"j3\" failed",
                    "var char: j3 is 1;") and
        checkError2("$ include \"seed7_05.s7i\";\n\
                    \const proc: (ref char param) ::= (ref integer param) is\n\
                    \  return raise NUMERIC_ERROR;\n\
                    \var char: j3 is 1+1;",
                    DECL_FAILED, 4, 0,
                    "Declaration of \"j3\" failed",
                    "var char: j3 is 1+1;") then
      okay := TRUE;
    else
      writeln(" *** DECL_FAILED not reported correctly.");
    end if;
  end func;


const func boolean: checkObjTwiceDeclared is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1("$ include \"seed7_05.s7i\";\n\
                    \const integer: num1 is 1;\n\
                    \const integer: num1 is 1;",
                    OBJTWICEDECLARED, 3, 25,
                    "Redeclaration of \"num1\"",
                    "const integer: num1 is 1;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \const func integer: f1 (in integer: num1) is return succ(num1);\n\
                    \const func integer: f1 (in integer: num2) is return pred(num2);",
                    OBJTWICEDECLARED, 3, 63,
                    "Redeclaration of \"f1 (val integer: num1)\"",
                    "const func integer: f1 (in integer: num2) is return pred(num2);") then
      okay := TRUE;
    else
      writeln(" *** OBJTWICEDECLARED not reported correctly.");
    end if;
  end func;


const func boolean: checkPreviousDeclaration is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError2("$ include \"seed7_05.s7i\";\n\
                    \const integer: num1 is 1;\n\
                    \const integer: num1 is 1;",
                    PREVIOUS_DECLARATION, 2, 0,
                    "Previous declaration of \"num1\"",
                    "const integer: num1 is 1;") and
        checkError2("$ include \"seed7_05.s7i\";\n\
                    \const func integer: f1 (in integer: num1) is return succ(num1);\n\
                    \const func integer: f1 (in integer: num2) is return pred(num2);",
                    PREVIOUS_DECLARATION, 2, 0,
                    "Previous declaration of \"f1 (val integer: num1)\"",
                    "const func integer: f1 (in integer: num1) is return succ(num1);") then
      okay := TRUE;
    else
      writeln(" *** PREVIOUS_DECLARATION not reported correctly.");
    end if;
  end func;


const func boolean: checkExceptionRaised is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1("$ include \"seed7_05.s7i\";\n\
                    \const func type: func foo is func\n\
                    \  result\n\
                    \    var type: aType is void;\n\
                    \  begin\n\
                    \    raise RANGE_ERROR;\n\
                    \  end func;\n\
                    \$ const $ func type: $ fee (ref func foo param) is $ action \"TYP_FUNC\";",
                    EXCEPTION_RAISED, 8, 51,
                    "Exception \"RANGE_ERROR\" raised",
                    "$ const $ func type: $ fee (ref func foo param) is $ action \"TYP_FUNC\";") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \raise RANGE_ERROR;",
                    EXCEPTION_RAISED, 2, 18,
                    "Exception \"RANGE_ERROR\" raised",
                    "raise RANGE_ERROR;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \const proc: (ref char param) ::= (ref integer param) is\n\
                    \  return raise NUMERIC_ERROR;\n\
                    \$ const char: j3 is 1;",
                    EXCEPTION_RAISED, 3, 0,
                    "Exception \"NUMERIC_ERROR\" raised",
                    "  return raise NUMERIC_ERROR;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \const string: a is \"a\" mult integer.last;",
                    EXCEPTION_RAISED, 2, 41,
                    "Exception \"MEMORY_ERROR\" raised",
                    "const string: a is \"a\" mult integer.last;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \const proc: (ref char param) ::= (ref integer param) is\n\
                    \  return raise NUMERIC_ERROR;\n\
                    \const char: j3 is 1;",
                    EXCEPTION_RAISED, 3, 0,
                    "Exception \"NUMERIC_ERROR\" raised",
                    "  return raise NUMERIC_ERROR;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \var string: a is \"a\" mult integer.last;",
                    EXCEPTION_RAISED, 2, 39,
                    "Exception \"MEMORY_ERROR\" raised",
                    "var string: a is \"a\" mult integer.last;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \const proc: (ref char param) ::= (ref integer param) is\n\
                    \  return raise NUMERIC_ERROR;\n\
                    \var char: j3 is 1;",
                    EXCEPTION_RAISED, 3, 0,
                    "Exception \"NUMERIC_ERROR\" raised",
                    "  return raise NUMERIC_ERROR;") then
      okay := TRUE;
    else
      writeln(" *** EXCEPTION_RAISED not reported correctly.");
    end if;
  end func;


const func boolean: checkDeclarationErrors is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkParamDeclFailed and
        checkDeclFailed and
        checkObjTwiceDeclared and
        checkPreviousDeclaration and
        checkExceptionRaised then
      writeln("Declaration errors are reported correctly.");
      okay := TRUE;
    else
      writeln(" *** Declaration errors are not reported correctly.");
    end if;
  end func;


const func boolean: checkIllegalAssociativity is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1("$ include \"syntax.s7i\";\n\
                    \$ syntax expr: .h is x 1;",
                    ILLEGAL_ASSOCIATIVITY, 2, 23,
                    "Associativity expected found \"x\"",
                    "$ syntax expr: .h is x 1;") and
        checkError1("$ include \"syntax.s7i\";\n\
                    \$ syntax expr: .h is (1);",
                    ILLEGAL_ASSOCIATIVITY, 2, 23,
                    "Associativity expected found \"(\"",
                    "$ syntax expr: .h is (1);") and
        checkError1("$ include \"syntax.s7i\";\n\
                    \$ syntax expr: .h is 1 1;",
                    ILLEGAL_ASSOCIATIVITY, 2, 23,
                    "Associativity expected found \"1\"",
                    "$ syntax expr: .h is 1 1;") and
        checkError1("$ include \"syntax.s7i\";\n\
                    \$ syntax expr: .h is 1_ 1;",
                    ILLEGAL_ASSOCIATIVITY, 2, 24,
                    "Associativity expected found \"1_\"",
                    "$ syntax expr: .h is 1_ 1;") and
        checkError1("$ include \"syntax.s7i\";\n\
                    \$ syntax expr: .h is 'x' 1;",
                    ILLEGAL_ASSOCIATIVITY, 2, 25,
                    "Associativity expected found 'x'",
                    "$ syntax expr: .h is 'x' 1;") and
        checkError1("$ include \"syntax.s7i\";\n\
                    \$ syntax expr: .h is \"x\" 1;",
                    ILLEGAL_ASSOCIATIVITY, 2, 25,
                    "Associativity expected found \"x\"",
                    "$ syntax expr: .h is \"x\" 1;") and
        checkError1("$ include \"syntax.s7i\";\n\
                    \$ syntax expr: .h is 1.5 1;",
                    ILLEGAL_ASSOCIATIVITY, 2, 25,
                    "Associativity expected found \"1.5\"",
                    "$ syntax expr: .h is 1.5 1;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \syntax expr: .prefix.() is x;",
                    ILLEGAL_ASSOCIATIVITY, 2, 0,
                    "Associativity expected found \"x\"",
                    "syntax expr: .prefix.() is x;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \syntax expr: .prefix.() is .();",
                    ILLEGAL_ASSOCIATIVITY, 2, 0,
                    "Associativity expected",
                    "syntax expr: .prefix.() is .();") then
      okay := TRUE;
    else
      writeln(" *** ILLEGAL_ASSOCIATIVITY not reported correctly.");
    end if;
  end func;


const func boolean: checkIllegalPriority is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1("$ include \"syntax.s7i\";\n\
                    \$ syntax expr: .j is -> 999999;",
                    ILLEGAL_PRIORITY, 2, 31,
                    "Statement priority \"999999\" too big",
                    "$ syntax expr: .j is -> 999999;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \syntax expr: .prefix.() is -> 999999;",
                    ILLEGAL_PRIORITY, 2, 37,
                    "Statement priority \"999999\" too big",
                    "syntax expr: .prefix.() is -> 999999;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \const integer: priority is -1;\n\
                    \syntax expr: .prefix.() is -> priority;",
                    ILLEGAL_PRIORITY, 3, 39,
                    "Statement priority \"-1\" too small",
                    "syntax expr: .prefix.() is -> priority;") then
      okay := TRUE;
    else
      writeln(" *** ILLEGAL_PRIORITY not reported correctly.");
    end if;
  end func;


const func boolean: checkTwoParameterSyntax is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1("$ include \"syntax.s7i\";\n\
                    \$ syntax expr: .().().x is -> 1;",
                    TWO_PARAMETER_SYNTAX, 2, 32,
                    "Syntax with two parameters before operator is illegal",
                    "$ syntax expr: .().().x is -> 1;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \syntax expr: .().().x is -> 1;",
                    TWO_PARAMETER_SYNTAX, 2, 30,
                    "Syntax with two parameters before operator is illegal",
                    "syntax expr: .().().x is -> 1;") and
        checkError1("$ include \"syntax.s7i\";\n\
                    \$ syntax expr: .().().().x is -> 1;",
                    TWO_PARAMETER_SYNTAX, 2, 35,
                    "Syntax with two parameters before operator is illegal",
                    "$ syntax expr: .().().().x is -> 1;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \syntax expr: .().().().x is -> 1;",
                    TWO_PARAMETER_SYNTAX, 2, 33,
                    "Syntax with two parameters before operator is illegal",
                    "syntax expr: .().().().x is -> 1;") then
      okay := TRUE;
    else
      writeln(" *** TWO_PARAMETER_SYNTAX not reported correctly.");
    end if;
  end func;


const func boolean: checkSyntaxDeclaredTwice is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1("$ include \"syntax.s7i\";\n\
                    \$ syntax expr: .prefix.() is -> 5;\n\
                    \$ syntax expr: .prefix.() is -> 5;",
                    SYNTAX_DECLARED_TWICE, 3, 0,
                    "Syntax .prefix.() declared twice",
                    "$ syntax expr: .prefix.() is -> 5;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \syntax expr: .prefix.() is -> 5;\n\
                    \syntax expr: .prefix.() is -> 5;",
                    SYNTAX_DECLARED_TWICE, 3, 0,
                    "Syntax .prefix.() declared twice",
                    "syntax expr: .prefix.() is -> 5;") then
      okay := TRUE;
    else
      writeln(" *** SYNTAX_DECLARED_TWICE not reported correctly.");
    end if;
  end func;


const func boolean: checkDotExprExpected is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1("$ include \"syntax.s7i\";\n\
                    \$ syntax expr: .() is -> 1;",
                    DOT_EXPR_EXPECTED, 2, 0,
                    "Dot expression expected as syntax description, found ({})",
                    "$ syntax expr: .() is -> 1;") then
      okay := TRUE;
    else
      writeln(" *** DOT_EXPR_EXPECTED not reported correctly.");
    end if;
  end func;


const func boolean: checkRedeclaredInfixPriority is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1("$ include \"syntax.s7i\";\n\
                    \$ syntax expr: .().a2 is -> 5;\n\
                    \$ syntax expr: .().a2 is -> 7;",
                    REDECLARED_INFIX_PRIORITY, 3, 30,
                    "\"a2\" redeclared with infix priority 7 not 5",
                    "$ syntax expr: .().a2 is -> 7;") and
        checkError1("$ include \"syntax.s7i\";\n\
                    \$ syntax expr: .().inx.() is <-> 12;\n\
                    \$ syntax expr: .for.().inx.().end is -> 25;",
                    REDECLARED_INFIX_PRIORITY, 3, 43,
                    "\"inx\" redeclared with infix priority 127 not 12",
                    "$ syntax expr: .for.().inx.().end is -> 25;") then
      okay := TRUE;
    else
      writeln(" *** REDECLARED_INFIX_PRIORITY not reported correctly.");
    end if;
  end func;


const func boolean: checkRedeclaredPrefixPriority is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1("$ include \"syntax.s7i\";\n\
                    \$ syntax expr: .b2 is -> 5;\n\
                    \$ syntax expr: .b2 is -> 7;",
                    REDECLARED_PREFIX_PRIORITY, 3, 27,
                    "\"b2\" redeclared with prefix priority 7 not 5",
                    "$ syntax expr: .b2 is -> 7;") and
        checkError1("$ include \"syntax.s7i\";\n\
                    \$ syntax expr: .b2.() is -> 5;\n\
                    \$ syntax expr: .b2.() is -> 7;",
                    REDECLARED_PREFIX_PRIORITY, 3, 30,
                    "\"b2\" redeclared with prefix priority 7 not 5",
                    "$ syntax expr: .b2.() is -> 7;") and
        checkError1("$ include \"syntax.s7i\";\n\
                    \$ syntax expr: .b2.() is -> 5;\n\
                    \$ syntax expr: .for.().b2.() is -> 25;",
                    REDECLARED_PREFIX_PRIORITY, 3, 38,
                    "\"b2\" redeclared with prefix priority 127 not 5",
                    "$ syntax expr: .for.().b2.() is -> 25;") then
      okay := TRUE;
    else
      writeln(" *** REDECLARED_PREFIX_PRIORITY not reported correctly.");
    end if;
  end func;


const func boolean: checkWrongExprParamPriority is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1("$ include \"syntax.s7i\";\n\
                    \$ syntax expr: .c2.() is -> 5;\n\
                    \$ syntax expr: .c2.() is <- 5;",
                    WRONG_EXPR_PARAM_PRIORITY, 3, 30,
                    "Priority 4 required for parameter after \"c2\" not 5",
                    "$ syntax expr: .c2.() is <- 5;") and
        checkError1("$ include \"syntax.s7i\";\n\
                    \$ syntax expr: .c3.().c4 is -> 5;\n\
                    \$ syntax expr: .c3.() is -> 5;",
                    WRONG_EXPR_PARAM_PRIORITY, 3, 30,
                    "Priority 127 required for parameter after \"c3\" not 4",
                    "$ syntax expr: .c3.() is -> 5;") and
        checkError1("$ include \"syntax.s7i\";\n\
                    \$ syntax expr: .k1.() is -> 5;\n\
                    \$ syntax expr: .k1.().k2 is -> 5;",
                    WRONG_EXPR_PARAM_PRIORITY, 3, 33,
                    "Priority 4 required for parameter after \"k1\" not 127",
                    "$ syntax expr: .k1.().k2 is -> 5;") then
      okay := TRUE;
    else
      writeln(" *** WRONG_EXPR_PARAM_PRIORITY not reported correctly.");
    end if;
  end func;


const func boolean: checkWrongPrefixPriority is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1("$ include \"syntax.s7i\";\n\
                    \$ syntax expr: .d2.() is -> 50;\n\
                    \d2 1 + 1;",
                    WRONG_PREFIX_PRIORITY, 3, 3,
                    "Priority <= 49 expected found \"d2\" with priority 50",
                    "d2 1 + 1;") then
      okay := TRUE;
    else
      writeln(" *** WRONG_PREFIX_PRIORITY not reported correctly.");
    end if;
  end func;


const func boolean: checkDotExprIllegal is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1("$ include \"syntax.s7i\";\n\
                    \$ syntax expr: .e2 is -> 20;\n\
                    \e2.noop;",
                    DOT_EXPR_ILLEGAL, 3, 4,
                    "\"e2\" must have priority 0 not 20 for dot expression",
                    "e2.noop;") then
      okay := TRUE;
    else
      writeln(" *** DOT_EXPR_ILLEGAL not reported correctly.");
    end if;
  end func;


const func boolean: checkSyntaxDeclarationErrors is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkIllegalAssociativity and
        checkIllegalPriority and
        checkTwoParameterSyntax and
        checkSyntaxDeclaredTwice and
        checkDotExprExpected and
        checkRedeclaredInfixPriority and
        checkRedeclaredPrefixPriority and
        checkWrongExprParamPriority and
        checkWrongPrefixPriority and
        checkDotExprIllegal then
      writeln("Syntax declaration errors are reported correctly.");
      okay := TRUE;
    else
      writeln(" *** Syntax declaration errors are not reported correctly.");
    end if;
  end func;


const func boolean: checkNoMatch is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1("$ include \"syntax.s7i\";\n\
                    \$ const $ func type: $ asdf (ref func jkl param) is $ action \"TYP_FUNC\";",
                    NO_MATCH, 2, 0,
                    "Match for {func jkl } failed",
                    "$ const $ func type: $ asdf (ref func jkl param) is $ action \"TYP_FUNC\";") and
        checkError1("$ include \"syntax.s7i\";\n\
                    \$ const type: jkl is $ subtype writeln(asdf);",
                    NO_MATCH, 2, 0,
                    "Match for {asdf writeln } failed",
                    "$ const type: jkl is $ subtype writeln(asdf);") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \$ const type: jkl is $ subtype 123 div \"12\";",
                    NO_MATCH, 2, 0,
                    "Match for {123 div \"12\" } failed",
                    "$ const type: jkl is $ subtype 123 div \"12\";") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \syntax expr: 123 is -> 5;",
                    NO_MATCH, 2, 0,
                    "Match for {syntax expr : 123 is {-> 5 } } failed",
                    "syntax expr: 123 is -> 5;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \const proc: main is func\n\
                    \  begin\n\
                    \    writeln(asdf);\n\
                    \  end func;",
                    NO_MATCH, 4, 0,
                    "Match for {asdf writeln } failed",
                    "    writeln(asdf);") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \const proc: main is func\n\
                    \  local\n\
                    \    const integer: number is 0;\n\
                    \  begin\n\
                    \    incr(\"asdf\");\n\
                    \  end func;",
                    NO_MATCH, 6, 0,
                    "Match for {\"asdf\" incr } failed",
                    "    incr(\"asdf\");") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \const proc: main is func\n\
                    \  local\n\
                    \    var integer: number is 0;\n\
                    \  begin\n\
                    \    number := \"asdf\";\n\
                    \  end func;",
                    NO_MATCH, 6, 0,
                    "Match for {number := \"asdf\" } failed",
                    "    number := \"asdf\";") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \const func integer: doCount is func\n\
                    \  result\n\
                    \    var integer: number is 0;\n\
                    \  begin\n\
                    \    number := \"asdf\";\n\
                    \  end func;",
                    NO_MATCH, 6, 0,
                    "Match for {number := \"asdf\" } failed",
                    "    number := \"asdf\";") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \const func boolean: isOkay is func\n\
                    \  result\n\
                    \    var boolean: result is FALSE;\n\
                    \  local\n\
                    \    const integer: number is 0;\n\
                    \  begin\n\
                    \    incr(\"asdf\");\n\
                    \  end func;",
                    NO_MATCH, 8, 0,
                    "Match for {\"asdf\" incr } failed",
                    "    incr(\"asdf\");") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \const func boolean: isOkay is func\n\
                    \  result\n\
                    \    var boolean: result is FALSE;\n\
                    \  local\n\
                    \    var integer: number is 0;\n\
                    \  begin\n\
                    \    number := \"asdf\";\n\
                    \  end func;",
                    NO_MATCH, 8, 0,
                    "Match for {number := \"asdf\" } failed",
                    "    number := \"asdf\";") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \const func integer: doCount is func\n\
                    \  result\n\
                    \    var integer: number is \"asdf\";\n\
                    \  begin\n\
                    \    noop;\n\
                    \  end func;",
                    NO_MATCH, 4, 0,
                    "Match for {number } failed",
                    "    var integer: number is \"asdf\";") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \const proc: test (in var integer: number) is func\n\
                    \  begin\n\
                    \    number := \"asdf\";\n\
                    \  end func;",
                    NO_MATCH, 4, 0,
                    "Match for {number := \"asdf\" } failed",
                    "    number := \"asdf\";") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \const proc: test (inout integer: number) is func\n\
                    \  begin\n\
                    \    number := \"asdf\";\n\
                    \  end func;",
                    NO_MATCH, 4, 0,
                    "Match for {number := \"asdf\" } failed",
                    "    number := \"asdf\";") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \const proc: main is func\n\
                    \  begin\n\
                    \    writeln(123 div \"12\");\n\
                    \  end func;",
                    NO_MATCH, 4, 0,
                    "Match for {123 div \"12\" } failed",
                    "    writeln(123 div \"12\");") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \const proc: test (writeln(asdf)) is func\n\
                    \  begin\n\
                    \    writeln(\"okay\");\n\
                    \  end func;",
                    NO_MATCH, 2, 0,
                    "Match for {asdf writeln } failed",
                    "const proc: test (writeln(asdf)) is func") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \const proc: test (123 div \"12\") is func\n\
                    \  begin\n\
                    \    writeln(\"okay\");\n\
                    \  end func;",
                    NO_MATCH, 2, 0,
                    "Match for {123 div \"12\" } failed",
                    "const proc: test (123 div \"12\") is func") then
      okay := TRUE;
    else
      writeln(" *** NO_MATCH not reported correctly.");
    end if;
  end func;


const func boolean: checkWrongAccessRight is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1("$ include \"seed7_05.s7i\";\n\
                    \const integer: one is 1;\n\
                    \incr(one);",
                    WRONGACCESSRIGHT, 3, 0,
                    "Variable expected in {one incr } found constant integer: one",
                    "incr(one);") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \const char: space is ' ';\n\
                    \incr(space);",
                    WRONGACCESSRIGHT, 3, 0,
                    "Variable expected in {space incr } found constant char: space",
                    "incr(space);") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \const string: stri is \"x\";\n\
                    \stri := \"y\";",
                    WRONGACCESSRIGHT, 3, 0,
                    "Variable expected in {stri := \"y\" } found constant string: stri",
                    "stri := \"y\";") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \const array integer: one is [] (1);\n\
                    \incr(one[1]);",
                    WRONGACCESSRIGHT, 3, 0,
                    "Variable expected in {ARR_IDX({one [ 1 ] }) incr } found expression ({one [ 1 ] }) of type func integer",
                    "incr(one[1]);") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \const array char: space is [] (' ');\n\
                    \incr(space[1]);",
                    WRONGACCESSRIGHT, 3, 0,
                    "Variable expected in {ARR_IDX({space [ 1 ] }) incr } found expression ({space [ 1 ] }) of type func char",
                    "incr(space[1]);") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \const array string: arr is [] (\"x\");\n\
                    \arr[1] := \"y\";",
                    WRONGACCESSRIGHT, 3, 0,
                    "Variable expected in {ARR_IDX({arr [ 1 ] }) := \"y\" } found expression ({arr [ 1 ] }) of type func string",
                    "arr[1] := \"y\";") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \const proc: abc is func\n\
                    \  local\n\
                    \    const integer: x is 0;\n\
                    \  begin\n\
                    \    x := 1;\n\
                    \  end func;",
                    WRONGACCESSRIGHT, 6, 0,
                    "Variable expected in {x := 1 } found constant integer: x",
                    "    x := 1;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \const func boolean: abc is func\n\
                    \  result\n\
                    \    var boolean: okay is FALSE;\n\
                    \  local\n\
                    \    const integer: x is 0;\n\
                    \  begin\n\
                    \    x := 1;\n\
                    \  end func;",
                    WRONGACCESSRIGHT, 8, 0,
                    "Variable expected in {x := 1 } found constant integer: x",
                    "    x := 1;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \const proc: abc (val integer: x) is func\n\
                    \  begin\n\
                    \    x := 1;\n\
                    \  end func;",
                    WRONGACCESSRIGHT, 4, 0,
                    "Variable expected in {x := 1 } found parameter (val integer: x)",
                    "    x := 1;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \const proc: abc (ref integer: x) is func\n\
                    \  begin\n\
                    \    x := 1;\n\
                    \  end func;",
                    WRONGACCESSRIGHT, 4, 0,
                    "Variable expected in {x := 1 } found parameter (ref integer: x)",
                    "    x := 1;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \const proc: abc (in integer: x) is func\n\
                    \  begin\n\
                    \    x := 1;\n\
                    \  end func;",
                    WRONGACCESSRIGHT, 4, 0,
                    "Variable expected in {x := 1 } found parameter (val integer: x)",
                    "    x := 1;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \const proc: abc (val string: x) is func\n\
                    \  begin\n\
                    \    x := \"A\";\n\
                    \  end func;",
                    WRONGACCESSRIGHT, 4, 0,
                    "Variable expected in {x := \"A\" } found parameter (val string: x)",
                    "    x := \"A\";") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \const proc: abc (ref string: x) is func\n\
                    \  begin\n\
                    \    x := \"A\";\n\
                    \  end func;",
                    WRONGACCESSRIGHT, 4, 0,
                    "Variable expected in {x := \"A\" } found parameter (ref string: x)",
                    "    x := \"A\";") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \const proc: abc (in string: x) is func\n\
                    \  begin\n\
                    \    x := \"A\";\n\
                    \  end func;",
                    WRONGACCESSRIGHT, 4, 0,
                    "Variable expected in {x := \"A\" } found parameter (ref string: x)",
                    "    x := \"A\";") then
      okay := TRUE;
    else
      writeln(" *** WRONGACCESSRIGHT not reported correctly.");
    end if;
  end func;


const func boolean: checkLiteralTypeUndefined is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1("12345",
                    LITERAL_TYPE_UNDEFINED, 1, 5,
                    "Undefined type for literal \"12345\"",
                    "12345") and
        checkError1("12345_",
                    LITERAL_TYPE_UNDEFINED, 1, 6,
                    "Undefined type for literal \"12345_\"",
                    "12345_") and
        checkError1("'a'",
                    LITERAL_TYPE_UNDEFINED, 1, 3,
                    "Undefined type for literal 'a'",
                    "'a'") and
        checkError1("\"abc\"",
                    LITERAL_TYPE_UNDEFINED, 1, 5,
                    "Undefined type for literal \"abc\"",
                    "\"abc\"") and
        checkError1("1.5",
                    LITERAL_TYPE_UNDEFINED, 1, 3,
                    "Undefined type for literal \"1.5\"",
                    "1.5") then
      okay := TRUE;
    else
      writeln(" *** LITERAL_TYPE_UNDEFINED not reported correctly.");
    end if;
  end func;


const func boolean: checkKindOfParamUndefined is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1("$ include \"seed7_05.s7i\";\n\
                    \const type: abc is newtype;\n\
                    \const proc: xyz (in abc param) is noop;",
                    KIND_OF_IN_PARAM_UNDEFINED, 3, 0,
                    "Kind of in-parameter (val or ref) unspecified for type \"abc\"",
                    "const proc: xyz (in abc param) is noop;") and
        checkError1("$ include \"seed7_05.s7i\";\n\
                    \const type: abc is newtype;\n\
                    \const proc: xyz (in abc: rst) is noop;",
                    KIND_OF_IN_PARAM_UNDEFINED, 3, 0,
                    "Kind of in-parameter (val or ref) unspecified for type \"abc\"",
                    "const proc: xyz (in abc: rst) is noop;") then
      okay := TRUE;
    else
      writeln(" *** KIND_OF_IN_PARAM_UNDEFINED not reported correctly.");
    end if;
  end func;


const func boolean: checkSemanticErrors is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkNoMatch and
        checkWrongAccessRight and
        checkLiteralTypeUndefined and
        checkKindOfParamUndefined then
      writeln("Semantic errors are reported correctly.");
      okay := TRUE;
    else
      writeln(" *** Semantic errors are not reported correctly.");
    end if;
  end func;


const func boolean: checkOverlongUtf8Encoding is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1(bstring("\16#c0;\16#80;;"),
                    OVERLONG_UTF8_ENCODING, 1, 3,
                    "Overlong UTF-8 encoding used for character \"\\0;\" (U+0000)",
                    "\16#c0;\16#80;;") and
        checkError1(bstring("\16#c1;\16#bf;;"),
                    OVERLONG_UTF8_ENCODING, 1, 3,
                    "Overlong UTF-8 encoding used for character \"\\127;\" (U+007f)",
                    "\16#c1;\16#bf;;") and
        checkError1(bstring("\16#e0;\16#80;\16#80;;"),
                    OVERLONG_UTF8_ENCODING, 1, 4,
                    "Overlong UTF-8 encoding used for character \"\\0;\" (U+0000)",
                    "\16#e0;\16#80;\16#80;;") and
        checkError1(bstring("\16#e0;\16#9f;\16#bf;;"),
                    OVERLONG_UTF8_ENCODING, 1, 4,
                    "Overlong UTF-8 encoding used for character \"\\2047;\" (U+07ff)",
                    "\16#e0;\16#9f;\16#bf;;") and
        checkError1(bstring("\16#f0;\16#80;\16#80;\16#80;;"),
                    OVERLONG_UTF8_ENCODING, 1, 5,
                    "Overlong UTF-8 encoding used for character \"\\0;\" (U+0000)",
                    "\16#f0;\16#80;\16#80;\16#80;;") and
        checkError1(bstring("\16#f0;\16#8f;\16#bf;\16#bf;;"),
                    OVERLONG_UTF8_ENCODING, 1, 5,
                    "Overlong UTF-8 encoding used for character \"\\65535;\" (U+ffff)",
                    "\16#f0;\16#8f;\16#bf;\16#bf;;") and
        checkError1(bstring("\16#f8;\16#80;\16#80;\16#80;\16#80;;"),
                    OVERLONG_UTF8_ENCODING, 1, 6,
                    "Overlong UTF-8 encoding used for character \"\\0;\" (U+0000)",
                    "\16#f8;\16#80;\16#80;\16#80;\16#80;;") and
        checkError1(bstring("\16#f8;\16#87;\16#bf;\16#bf;\16#bf;;"),
                    OVERLONG_UTF8_ENCODING, 1, 6,
                    "Overlong UTF-8 encoding used for character \"\\2097151;\" (U+1fffff)",
                    "\16#f8;\16#87;\16#bf;\16#bf;\16#bf;;") and
        checkError1(bstring("\16#fc;\16#80;\16#80;\16#80;\16#80;\16#80;;"),
                    OVERLONG_UTF8_ENCODING, 1, 7,
                    "Overlong UTF-8 encoding used for character \"\\0;\" (U+0000)",
                    "\16#fc;\16#80;\16#80;\16#80;\16#80;\16#80;;") and
        checkError1(bstring("\16#fc;\16#83;\16#bf;\16#bf;\16#bf;\16#bf;;"),
                    OVERLONG_UTF8_ENCODING, 1, 7,
                    "Overlong UTF-8 encoding used for character \"\\67108863;\" (U+3ffffff)",
                    "\16#fc;\16#83;\16#bf;\16#bf;\16#bf;\16#bf;;") and
        checkError1(bstring("'\16#c0;\16#80;';"),
                    OVERLONG_UTF8_ENCODING, 1, 4,
                    "Overlong UTF-8 encoding used for character \"\\0;\" (U+0000)",
                    "'\16#c0;\16#80;';") and
        checkError1(bstring("'\16#c1;\16#bf;';"),
                    OVERLONG_UTF8_ENCODING, 1, 4,
                    "Overlong UTF-8 encoding used for character \"\\127;\" (U+007f)",
                    "'\16#c1;\16#bf;';") and
        checkError1(bstring("'\16#e0;\16#80;\16#80;';"),
                    OVERLONG_UTF8_ENCODING, 1, 5,
                    "Overlong UTF-8 encoding used for character \"\\0;\" (U+0000)",
                    "'\16#e0;\16#80;\16#80;';") and
        checkError1(bstring("'\16#e0;\16#9f;\16#bf;';"),
                    OVERLONG_UTF8_ENCODING, 1, 5,
                    "Overlong UTF-8 encoding used for character \"\\2047;\" (U+07ff)",
                    "'\16#e0;\16#9f;\16#bf;';") and
        checkError1(bstring("'\16#f0;\16#80;\16#80;\16#80;';"),
                    OVERLONG_UTF8_ENCODING, 1, 6,
                    "Overlong UTF-8 encoding used for character \"\\0;\" (U+0000)",
                    "'\16#f0;\16#80;\16#80;\16#80;';") and
        checkError1(bstring("'\16#f0;\16#8f;\16#bf;\16#bf;';"),
                    OVERLONG_UTF8_ENCODING, 1, 6,
                    "Overlong UTF-8 encoding used for character \"\\65535;\" (U+ffff)",
                    "'\16#f0;\16#8f;\16#bf;\16#bf;';") and
        checkError1(bstring("'\16#f8;\16#80;\16#80;\16#80;\16#80;';"),
                    OVERLONG_UTF8_ENCODING, 1, 7,
                    "Overlong UTF-8 encoding used for character \"\\0;\" (U+0000)",
                    "'\16#f8;\16#80;\16#80;\16#80;\16#80;';") and
        checkError1(bstring("'\16#f8;\16#87;\16#bf;\16#bf;\16#bf;';"),
                    OVERLONG_UTF8_ENCODING, 1, 7,
                    "Overlong UTF-8 encoding used for character \"\\2097151;\" (U+1fffff)",
                    "'\16#f8;\16#87;\16#bf;\16#bf;\16#bf;';") and
        checkError1(bstring("'\16#fc;\16#80;\16#80;\16#80;\16#80;\16#80;';"),
                    OVERLONG_UTF8_ENCODING, 1, 8,
                    "Overlong UTF-8 encoding used for character \"\\0;\" (U+0000)",
                    "'\16#fc;\16#80;\16#80;\16#80;\16#80;\16#80;';") and
        checkError1(bstring("'\16#fc;\16#83;\16#bf;\16#bf;\16#bf;\16#bf;';"),
                    OVERLONG_UTF8_ENCODING, 1, 8,
                    "Overlong UTF-8 encoding used for character \"\\67108863;\" (U+3ffffff)",
                    "'\16#fc;\16#83;\16#bf;\16#bf;\16#bf;\16#bf;';") and
        checkError1(bstring("\"\16#c0;\16#80;\";"),
                    OVERLONG_UTF8_ENCODING, 1, 4,
                    "Overlong UTF-8 encoding used for character \"\\0;\" (U+0000)",
                    "\"\16#c0;\16#80;\";") and
        checkError1(bstring("\"\16#c1;\16#bf;\";"),
                    OVERLONG_UTF8_ENCODING, 1, 4,
                    "Overlong UTF-8 encoding used for character \"\\127;\" (U+007f)",
                    "\"\16#c1;\16#bf;\";") and
        checkError1(bstring("\"\16#e0;\16#80;\16#80;\";"),
                    OVERLONG_UTF8_ENCODING, 1, 5,
                    "Overlong UTF-8 encoding used for character \"\\0;\" (U+0000)",
                    "\"\16#e0;\16#80;\16#80;\";") and
        checkError1(bstring("\"\16#e0;\16#9f;\16#bf;\";"),
                    OVERLONG_UTF8_ENCODING, 1, 5,
                    "Overlong UTF-8 encoding used for character \"\\2047;\" (U+07ff)",
                    "\"\16#e0;\16#9f;\16#bf;\";") and
        checkError1(bstring("\"\16#f0;\16#80;\16#80;\16#80;\";"),
                    OVERLONG_UTF8_ENCODING, 1, 6,
                    "Overlong UTF-8 encoding used for character \"\\0;\" (U+0000)",
                    "\"\16#f0;\16#80;\16#80;\16#80;\";") and
        checkError1(bstring("\"\16#f0;\16#8f;\16#bf;\16#bf;\";"),
                    OVERLONG_UTF8_ENCODING, 1, 6,
                    "Overlong UTF-8 encoding used for character \"\\65535;\" (U+ffff)",
                    "\"\16#f0;\16#8f;\16#bf;\16#bf;\";") and
        checkError1(bstring("\"\16#f8;\16#80;\16#80;\16#80;\16#80;\";"),
                    OVERLONG_UTF8_ENCODING, 1, 7,
                    "Overlong UTF-8 encoding used for character \"\\0;\" (U+0000)",
                    "\"\16#f8;\16#80;\16#80;\16#80;\16#80;\";") and
        checkError1(bstring("\"\16#f8;\16#87;\16#bf;\16#bf;\16#bf;\";"),
                    OVERLONG_UTF8_ENCODING, 1, 7,
                    "Overlong UTF-8 encoding used for character \"\\2097151;\" (U+1fffff)",
                    "\"\16#f8;\16#87;\16#bf;\16#bf;\16#bf;\";") and
        checkError1(bstring("\"\16#fc;\16#80;\16#80;\16#80;\16#80;\16#80;\";"),
                    OVERLONG_UTF8_ENCODING, 1, 8,
                    "Overlong UTF-8 encoding used for character \"\\0;\" (U+0000)",
                    "\"\16#fc;\16#80;\16#80;\16#80;\16#80;\16#80;\";") and
        checkError1(bstring("\"\16#fc;\16#83;\16#bf;\16#bf;\16#bf;\16#bf;\";"),
                    OVERLONG_UTF8_ENCODING, 1, 8,
                    "Overlong UTF-8 encoding used for character \"\\67108863;\" (U+3ffffff)",
                    "\"\16#fc;\16#83;\16#bf;\16#bf;\16#bf;\16#bf;\";") then
      okay := TRUE;
    else
      writeln(" *** OVERLONG_UTF8_ENCODING not reported correctly.");
    end if;
  end func;


const func boolean: checkUtf16SurrogateChar is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1("\16#d800;;",
                    UTF16_SURROGATE_CHAR_FOUND, 1, 4,
                    "UTF-16 surrogate character found in UTF-8 encoding \"\\55296;\" (U+d800)",
                    "\16#d800;;") and
        checkError1("\16#dbff;;",
                    UTF16_SURROGATE_CHAR_FOUND, 1, 4,
                    "UTF-16 surrogate character found in UTF-8 encoding \"\\56319;\" (U+dbff)",
                    "\16#dbff;;") and
        checkError1("\16#dc00;;",
                    UTF16_SURROGATE_CHAR_FOUND, 1, 4,
                    "UTF-16 surrogate character found in UTF-8 encoding \"\\56320;\" (U+dc00)",
                    "\16#dc00;;") and
        checkError1("\16#dfff;;",
                    UTF16_SURROGATE_CHAR_FOUND, 1, 4,
                    "UTF-16 surrogate character found in UTF-8 encoding \"\\57343;\" (U+dfff)",
                    "\16#dfff;;") and
        checkError1("'\16#d800;';",
                    UTF16_SURROGATE_CHAR_FOUND, 1, 5,
                    "UTF-16 surrogate character found in UTF-8 encoding \"\\55296;\" (U+d800)",
                    "'\16#d800;';") and
        checkError1("'\16#dbff;';",
                    UTF16_SURROGATE_CHAR_FOUND, 1, 5,
                    "UTF-16 surrogate character found in UTF-8 encoding \"\\56319;\" (U+dbff)",
                    "'\16#dbff;';") and
        checkError1("'\16#dc00;';",
                    UTF16_SURROGATE_CHAR_FOUND, 1, 5,
                    "UTF-16 surrogate character found in UTF-8 encoding \"\\56320;\" (U+dc00)",
                    "'\16#dc00;';") and
        checkError1("'\16#dfff;';",
                    UTF16_SURROGATE_CHAR_FOUND, 1, 5,
                    "UTF-16 surrogate character found in UTF-8 encoding \"\\57343;\" (U+dfff)",
                    "'\16#dfff;';") and
        checkError1("\"\16#d800;\";",
                    UTF16_SURROGATE_CHAR_FOUND, 1, 5,
                    "UTF-16 surrogate character found in UTF-8 encoding \"\\55296;\" (U+d800)",
                    "\"\16#d800;\";") and
        checkError1("\"\16#dbff;\";",
                    UTF16_SURROGATE_CHAR_FOUND, 1, 5,
                    "UTF-16 surrogate character found in UTF-8 encoding \"\\56319;\" (U+dbff)",
                    "\"\16#dbff;\";") and
        checkError1("\"\16#dc00;\";",
                    UTF16_SURROGATE_CHAR_FOUND, 1, 5,
                    "UTF-16 surrogate character found in UTF-8 encoding \"\\56320;\" (U+dc00)",
                    "\"\16#dc00;\";") and
        checkError1("\"\16#dfff;\";",
                    UTF16_SURROGATE_CHAR_FOUND, 1, 5,
                    "UTF-16 surrogate character found in UTF-8 encoding \"\\57343;\" (U+dfff)",
                    "\"\16#dfff;\";") then
      okay := TRUE;
    else
      writeln(" *** UTF16_SURROGATE_CHAR_FOUND not reported correctly.");
    end if;
  end func;


const func boolean: checkCharNotUnicode is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1("\16#110000;;",
                    CHAR_NOT_UNICODE, 1, 5,
                    "Non Unicode character found \"\\1114112;\" (U+110000)",
                    "\16#110000;;") and
        checkError1("\16#1fffff;;",
                    CHAR_NOT_UNICODE, 1, 5,
                    "Non Unicode character found \"\\2097151;\" (U+1fffff)",
                    "\16#1fffff;;") and
        checkError1("\16#200000;;",
                    CHAR_NOT_UNICODE, 1, 6,
                    "Non Unicode character found \"\\2097152;\" (U+200000)",
                    "\16#200000;;") and
        checkError1("\16#3ffffff;;",
                    CHAR_NOT_UNICODE, 1, 6,
                    "Non Unicode character found \"\\67108863;\" (U+3ffffff)",
                    "\16#3ffffff;;") and
        checkError1("\16#4000000;;",
                    CHAR_NOT_UNICODE, 1, 7,
                    "Non Unicode character found \"\\67108864;\" (U+4000000)",
                    "\16#4000000;;") and
        checkError1("\16#7fffffff;;",
                    CHAR_NOT_UNICODE, 1, 7,
                    "Non Unicode character found \"\\2147483647;\" (U+7fffffff)",
                    "\16#7fffffff;;") and
        checkError1("'\16#110000;';",
                    CHAR_NOT_UNICODE, 1, 6,
                    "Non Unicode character found \"\\1114112;\" (U+110000)",
                    "'\16#110000;';") and
        checkError1("'\16#1fffff;';",
                    CHAR_NOT_UNICODE, 1, 6,
                    "Non Unicode character found \"\\2097151;\" (U+1fffff)",
                    "'\16#1fffff;';") and
        checkError1("'\16#200000;';",
                    CHAR_NOT_UNICODE, 1, 7,
                    "Non Unicode character found \"\\2097152;\" (U+200000)",
                    "'\16#200000;';") and
        checkError1("'\16#3ffffff;';",
                    CHAR_NOT_UNICODE, 1, 7,
                    "Non Unicode character found \"\\67108863;\" (U+3ffffff)",
                    "'\16#3ffffff;';") and
        checkError1("'\16#4000000;';",
                    CHAR_NOT_UNICODE, 1, 8,
                    "Non Unicode character found \"\\67108864;\" (U+4000000)",
                    "'\16#4000000;';") and
        checkError1("'\16#7fffffff;';",
                    CHAR_NOT_UNICODE, 1, 8,
                    "Non Unicode character found \"\\2147483647;\" (U+7fffffff)",
                    "'\16#7fffffff;';") and
        checkError1("\"\16#110000;\";",
                    CHAR_NOT_UNICODE, 1, 6,
                    "Non Unicode character found \"\\1114112;\" (U+110000)",
                    "\"\16#110000;\";") and
        checkError1("\"\16#1fffff;\";",
                    CHAR_NOT_UNICODE, 1, 6,
                    "Non Unicode character found \"\\2097151;\" (U+1fffff)",
                    "\"\16#1fffff;\";") and
        checkError1("\"\16#200000;\";",
                    CHAR_NOT_UNICODE, 1, 7,
                    "Non Unicode character found \"\\2097152;\" (U+200000)",
                    "\"\16#200000;\";") and
        checkError1("\"\16#3ffffff;\";",
                    CHAR_NOT_UNICODE, 1, 7,
                    "Non Unicode character found \"\\67108863;\" (U+3ffffff)",
                    "\"\16#3ffffff;\";") and
        checkError1("\"\16#4000000;\";",
                    CHAR_NOT_UNICODE, 1, 8,
                    "Non Unicode character found \"\\67108864;\" (U+4000000)",
                    "\"\16#4000000;\";") and
        checkError1("\"\16#7fffffff;\";",
                    CHAR_NOT_UNICODE, 1, 8,
                    "Non Unicode character found \"\\2147483647;\" (U+7fffffff)",
                    "\"\16#7fffffff;\";") then
      okay := TRUE;
    else
      writeln(" *** CHAR_NOT_UNICODE not reported correctly.");
    end if;
  end func;


const func boolean: checkUTF8ContinuationByte1 is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1(bstring("\16#e0;\16#80;\0;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 3,
                    "UTF-8 continuation byte expected found \"\\0;\" (U+0000)",
                    "\16#e0;\16#80;\0;;") and
        checkError1(bstring("\16#e0;\16#80;\16#7f;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 3,
                    "UTF-8 continuation byte expected found \"\\127;\" (U+007f)",
                    "\16#e0;\16#80;\16#7f;;") and
        checkError1(bstring("\16#e0;\16#bf;\0;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 3,
                    "UTF-8 continuation byte expected found \"\\0;\" (U+0000)",
                    "\16#e0;\16#bf;\0;;") and
        checkError1(bstring("\16#e0;\16#bf;\16#7f;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 3,
                    "UTF-8 continuation byte expected found \"\\127;\" (U+007f)",
                    "\16#e0;\16#bf;\16#7f;;") and
        checkError1(bstring("\16#ef;\16#80;\0;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 3,
                    "UTF-8 continuation byte expected found \"\\0;\" (U+0000)",
                    "\16#ef;\16#80;\0;;") and
        checkError1(bstring("\16#ef;\16#80;\16#7f;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 3,
                    "UTF-8 continuation byte expected found \"\\127;\" (U+007f)",
                    "\16#ef;\16#80;\16#7f;;") and
        checkError1(bstring("\16#ef;\16#bf;\0;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 3,
                    "UTF-8 continuation byte expected found \"\\0;\" (U+0000)",
                    "\16#ef;\16#bf;\0;;") and
        checkError1(bstring("\16#ef;\16#bf;\16#7f;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 3,
                    "UTF-8 continuation byte expected found \"\\127;\" (U+007f)",
                    "\16#ef;\16#bf;\16#7f;;") then
      okay := TRUE;
    else
      writeln(" *** UTF8_CONTINUATION_BYTE_EXPECTED not reported correctly. (1)");
    end if;
  end func;


const func boolean: checkUTF8ContinuationByte2 is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1(bstring("\16#f0;\16#80;\16#80;\0;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 4,
                    "UTF-8 continuation byte expected found \"\\0;\" (U+0000)",
                    "\16#f0;\16#80;\16#80;\0;;") and
        checkError1(bstring("\16#f0;\16#80;\16#80;\16#7f;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 4,
                    "UTF-8 continuation byte expected found \"\\127;\" (U+007f)",
                    "\16#f0;\16#80;\16#80;\16#7f;;") and
        checkError1(bstring("\16#f0;\16#80;\16#bf;\0;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 4,
                    "UTF-8 continuation byte expected found \"\\0;\" (U+0000)",
                    "\16#f0;\16#80;\16#bf;\0;;") and
        checkError1(bstring("\16#f0;\16#80;\16#bf;\16#7f;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 4,
                    "UTF-8 continuation byte expected found \"\\127;\" (U+007f)",
                    "\16#f0;\16#80;\16#bf;\16#7f;;") and
        checkError1(bstring("\16#f0;\16#bf;\16#80;\0;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 4,
                    "UTF-8 continuation byte expected found \"\\0;\" (U+0000)",
                    "\16#f0;\16#bf;\16#80;\0;;") and
        checkError1(bstring("\16#f0;\16#bf;\16#80;\16#7f;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 4,
                    "UTF-8 continuation byte expected found \"\\127;\" (U+007f)",
                    "\16#f0;\16#bf;\16#80;\16#7f;;") and
        checkError1(bstring("\16#f0;\16#bf;\16#bf;\0;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 4,
                    "UTF-8 continuation byte expected found \"\\0;\" (U+0000)",
                    "\16#f0;\16#bf;\16#bf;\0;;") and
        checkError1(bstring("\16#f0;\16#bf;\16#bf;\16#7f;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 4,
                    "UTF-8 continuation byte expected found \"\\127;\" (U+007f)",
                    "\16#f0;\16#bf;\16#bf;\16#7f;;") and
        checkError1(bstring("\16#f7;\16#80;\16#80;\0;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 4,
                    "UTF-8 continuation byte expected found \"\\0;\" (U+0000)",
                    "\16#f7;\16#80;\16#80;\0;;") and
        checkError1(bstring("\16#f7;\16#80;\16#80;\16#7f;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 4,
                    "UTF-8 continuation byte expected found \"\\127;\" (U+007f)",
                    "\16#f7;\16#80;\16#80;\16#7f;;") and
        checkError1(bstring("\16#f7;\16#80;\16#bf;\0;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 4,
                    "UTF-8 continuation byte expected found \"\\0;\" (U+0000)",
                    "\16#f7;\16#80;\16#bf;\0;;") and
        checkError1(bstring("\16#f7;\16#80;\16#bf;\16#7f;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 4,
                    "UTF-8 continuation byte expected found \"\\127;\" (U+007f)",
                    "\16#f7;\16#80;\16#bf;\16#7f;;") and
        checkError1(bstring("\16#f7;\16#bf;\16#80;\0;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 4,
                    "UTF-8 continuation byte expected found \"\\0;\" (U+0000)",
                    "\16#f7;\16#bf;\16#80;\0;;") and
        checkError1(bstring("\16#f7;\16#bf;\16#80;\16#7f;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 4,
                    "UTF-8 continuation byte expected found \"\\127;\" (U+007f)",
                    "\16#f7;\16#bf;\16#80;\16#7f;;") and
        checkError1(bstring("\16#f7;\16#bf;\16#bf;\0;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 4,
                    "UTF-8 continuation byte expected found \"\\0;\" (U+0000)",
                    "\16#f7;\16#bf;\16#bf;\0;;") and
        checkError1(bstring("\16#f7;\16#bf;\16#bf;\16#7f;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 4,
                    "UTF-8 continuation byte expected found \"\\127;\" (U+007f)",
                    "\16#f7;\16#bf;\16#bf;\16#7f;;") then
      okay := TRUE;
    else
      writeln(" *** UTF8_CONTINUATION_BYTE_EXPECTED not reported correctly. (2)");
    end if;
  end func;


const func boolean: checkUTF8ContinuationByte3 is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1(bstring("\16#f0;\16#80;\0;\16#80;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 3,
                    "UTF-8 continuation byte expected found \"\\0;\" (U+0000)",
                    "\16#f0;\16#80;\0;\16#80;;") and
        checkError1(bstring("\16#f0;\16#80;\16#7f;\16#80;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 3,
                    "UTF-8 continuation byte expected found \"\\127;\" (U+007f)",
                    "\16#f0;\16#80;\16#7f;\16#80;;") and
        checkError1(bstring("\16#f0;\16#bf;\0;\16#80;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 3,
                    "UTF-8 continuation byte expected found \"\\0;\" (U+0000)",
                    "\16#f0;\16#bf;\0;\16#80;;") and
        checkError1(bstring("\16#f0;\16#bf;\16#7f;\16#80;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 3,
                    "UTF-8 continuation byte expected found \"\\127;\" (U+007f)",
                    "\16#f0;\16#bf;\16#7f;\16#80;;") and
        checkError1(bstring("\16#f7;\16#80;\0;\16#80;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 3,
                    "UTF-8 continuation byte expected found \"\\0;\" (U+0000)",
                    "\16#f7;\16#80;\0;\16#80;;") and
        checkError1(bstring("\16#f7;\16#80;\16#7f;\16#80;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 3,
                    "UTF-8 continuation byte expected found \"\\127;\" (U+007f)",
                    "\16#f7;\16#80;\16#7f;\16#80;;") and
        checkError1(bstring("\16#f7;\16#bf;\0;\16#80;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 3,
                    "UTF-8 continuation byte expected found \"\\0;\" (U+0000)",
                    "\16#f7;\16#bf;\0;\16#80;;") and
        checkError1(bstring("\16#f7;\16#bf;\16#7f;\16#80;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 3,
                    "UTF-8 continuation byte expected found \"\\127;\" (U+007f)",
                    "\16#f7;\16#bf;\16#7f;\16#80;;") then
      okay := TRUE;
    else
      writeln(" *** UTF8_CONTINUATION_BYTE_EXPECTED not reported correctly. (3)");
    end if;
  end func;


const func boolean: checkUTF8ContinuationByte4 is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1(bstring("\16#f8;\16#80;\16#80;\16#80;\0;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 5,
                    "UTF-8 continuation byte expected found \"\\0;\" (U+0000)",
                    "\16#f8;\16#80;\16#80;\16#80;\0;;") and
        checkError1(bstring("\16#f8;\16#80;\16#80;\16#80;\16#7f;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 5,
                    "UTF-8 continuation byte expected found \"\\127;\" (U+007f)",
                    "\16#f8;\16#80;\16#80;\16#80;\16#7f;;") and
        checkError1(bstring("\16#fb;\16#bf;\16#bf;\16#bf;\0;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 5,
                    "UTF-8 continuation byte expected found \"\\0;\" (U+0000)",
                    "\16#fb;\16#bf;\16#bf;\16#bf;\0;;") and
        checkError1(bstring("\16#fb;\16#bf;\16#bf;\16#bf;\16#7f;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 5,
                    "UTF-8 continuation byte expected found \"\\127;\" (U+007f)",
                    "\16#fb;\16#bf;\16#bf;\16#bf;\16#7f;;") then
      okay := TRUE;
    else
      writeln(" *** UTF8_CONTINUATION_BYTE_EXPECTED not reported correctly. (4)");
    end if;
  end func;


const func boolean: checkUTF8ContinuationByte5 is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1(bstring("\16#f8;\16#80;\16#80;\0;\16#80;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 4,
                    "UTF-8 continuation byte expected found \"\\0;\" (U+0000)",
                    "\16#f8;\16#80;\16#80;\0;\16#80;;") and
        checkError1(bstring("\16#f8;\16#80;\16#80;\16#7f;\16#80;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 4,
                    "UTF-8 continuation byte expected found \"\\127;\" (U+007f)",
                    "\16#f8;\16#80;\16#80;\16#7f;\16#80;;") and
        checkError1(bstring("\16#f8;\16#80;\16#bf;\0;\16#80;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 4,
                    "UTF-8 continuation byte expected found \"\\0;\" (U+0000)",
                    "\16#f8;\16#80;\16#bf;\0;\16#80;;") and
        checkError1(bstring("\16#f8;\16#80;\16#bf;\16#7f;\16#80;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 4,
                    "UTF-8 continuation byte expected found \"\\127;\" (U+007f)",
                    "\16#f8;\16#80;\16#bf;\16#7f;\16#80;;") and
        checkError1(bstring("\16#f8;\16#bf;\16#80;\0;\16#80;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 4,
                    "UTF-8 continuation byte expected found \"\\0;\" (U+0000)",
                    "\16#f8;\16#bf;\16#80;\0;\16#80;;") and
        checkError1(bstring("\16#f8;\16#bf;\16#80;\16#7f;\16#80;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 4,
                    "UTF-8 continuation byte expected found \"\\127;\" (U+007f)",
                    "\16#f8;\16#bf;\16#80;\16#7f;\16#80;;") and
        checkError1(bstring("\16#f8;\16#bf;\16#bf;\0;\16#80;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 4,
                    "UTF-8 continuation byte expected found \"\\0;\" (U+0000)",
                    "\16#f8;\16#bf;\16#bf;\0;\16#80;;") and
        checkError1(bstring("\16#f8;\16#bf;\16#bf;\16#7f;\16#80;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 4,
                    "UTF-8 continuation byte expected found \"\\127;\" (U+007f)",
                    "\16#f8;\16#bf;\16#bf;\16#7f;\16#80;;") and
        checkError1(bstring("\16#fb;\16#80;\16#80;\0;\16#80;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 4,
                    "UTF-8 continuation byte expected found \"\\0;\" (U+0000)",
                    "\16#fb;\16#80;\16#80;\0;\16#80;;") and
        checkError1(bstring("\16#fb;\16#80;\16#80;\16#7f;\16#80;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 4,
                    "UTF-8 continuation byte expected found \"\\127;\" (U+007f)",
                    "\16#fb;\16#80;\16#80;\16#7f;\16#80;;") and
        checkError1(bstring("\16#fb;\16#80;\16#bf;\0;\16#80;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 4,
                    "UTF-8 continuation byte expected found \"\\0;\" (U+0000)",
                    "\16#fb;\16#80;\16#bf;\0;\16#80;;") and
        checkError1(bstring("\16#fb;\16#80;\16#bf;\16#7f;\16#80;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 4,
                    "UTF-8 continuation byte expected found \"\\127;\" (U+007f)",
                    "\16#fb;\16#80;\16#bf;\16#7f;\16#80;;") and
        checkError1(bstring("\16#fb;\16#bf;\16#80;\0;\16#80;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 4,
                    "UTF-8 continuation byte expected found \"\\0;\" (U+0000)",
                    "\16#fb;\16#bf;\16#80;\0;\16#80;;") and
        checkError1(bstring("\16#fb;\16#bf;\16#80;\16#7f;\16#80;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 4,
                    "UTF-8 continuation byte expected found \"\\127;\" (U+007f)",
                    "\16#fb;\16#bf;\16#80;\16#7f;\16#80;;") and
        checkError1(bstring("\16#fb;\16#bf;\16#bf;\0;\16#80;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 4,
                    "UTF-8 continuation byte expected found \"\\0;\" (U+0000)",
                    "\16#fb;\16#bf;\16#bf;\0;\16#80;;") and
        checkError1(bstring("\16#fb;\16#bf;\16#bf;\16#7f;\16#80;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 4,
                    "UTF-8 continuation byte expected found \"\\127;\" (U+007f)",
                    "\16#fb;\16#bf;\16#bf;\16#7f;\16#80;;") then
      okay := TRUE;
    else
      writeln(" *** UTF8_CONTINUATION_BYTE_EXPECTED not reported correctly. (5)");
    end if;
  end func;


const func boolean: checkUTF8ContinuationByte6 is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1(bstring("\16#f8;\16#80;\0;\16#80;\16#80;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 3,
                    "UTF-8 continuation byte expected found \"\\0;\" (U+0000)",
                    "\16#f8;\16#80;\0;\16#80;\16#80;;") and
        checkError1(bstring("\16#f8;\16#80;\16#7f;\16#80;\16#80;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 3,
                    "UTF-8 continuation byte expected found \"\\127;\" (U+007f)",
                    "\16#f8;\16#80;\16#7f;\16#80;\16#80;;") and
        checkError1(bstring("\16#f8;\16#bf;\0;\16#80;\16#80;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 3,
                    "UTF-8 continuation byte expected found \"\\0;\" (U+0000)",
                    "\16#f8;\16#bf;\0;\16#80;\16#80;;") and
        checkError1(bstring("\16#f8;\16#bf;\16#7f;\16#80;\16#80;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 3,
                    "UTF-8 continuation byte expected found \"\\127;\" (U+007f)",
                    "\16#f8;\16#bf;\16#7f;\16#80;\16#80;;") and
        checkError1(bstring("\16#fb;\16#80;\0;\16#80;\16#80;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 3,
                    "UTF-8 continuation byte expected found \"\\0;\" (U+0000)",
                    "\16#fb;\16#80;\0;\16#80;\16#80;;") and
        checkError1(bstring("\16#fb;\16#80;\16#7f;\16#80;\16#80;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 3,
                    "UTF-8 continuation byte expected found \"\\127;\" (U+007f)",
                    "\16#fb;\16#80;\16#7f;\16#80;\16#80;;") and
        checkError1(bstring("\16#fb;\16#bf;\0;\16#80;\16#80;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 3,
                    "UTF-8 continuation byte expected found \"\\0;\" (U+0000)",
                    "\16#fb;\16#bf;\0;\16#80;\16#80;;") and
        checkError1(bstring("\16#fb;\16#bf;\16#7f;\16#80;\16#80;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 3,
                    "UTF-8 continuation byte expected found \"\\127;\" (U+007f)",
                    "\16#fb;\16#bf;\16#7f;\16#80;\16#80;;") then
      okay := TRUE;
    else
      writeln(" *** UTF8_CONTINUATION_BYTE_EXPECTED not reported correctly. (6)");
    end if;
  end func;


const func boolean: checkUTF8ContinuationByte7 is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1(bstring("\16#fc;\16#80;\16#80;\16#80;\16#80;\0;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 6,
                    "UTF-8 continuation byte expected found \"\\0;\" (U+0000)",
                    "\16#fc;\16#80;\16#80;\16#80;\16#80;\0;;") and
        checkError1(bstring("\16#fc;\16#80;\16#80;\16#80;\16#80;\16#7f;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 6,
                    "UTF-8 continuation byte expected found \"\\127;\" (U+007f)",
                    "\16#fc;\16#80;\16#80;\16#80;\16#80;\16#7f;;") and
        checkError1(bstring(" \16#ff;\16#bf;\16#bf;\16#bf;\16#bf;\0;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 7,
                    "UTF-8 continuation byte expected found \"\\0;\" (U+0000)",
                    " \16#ff;\16#bf;\16#bf;\16#bf;\16#bf;\0;;") and
        checkError1(bstring(" \16#ff;\16#bf;\16#bf;\16#bf;\16#bf;\16#7f;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 7,
                    "UTF-8 continuation byte expected found \"\\127;\" (U+007f)",
                    " \16#ff;\16#bf;\16#bf;\16#bf;\16#bf;\16#7f;;") then
      okay := TRUE;
    else
      writeln(" *** UTF8_CONTINUATION_BYTE_EXPECTED not reported correctly. (7)");
    end if;
  end func;


const func boolean: checkUTF8ContinuationByte8 is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1(bstring("\16#fc;\16#80;\16#80;\16#80;\0;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 5,
                    "UTF-8 continuation byte expected found \"\\0;\" (U+0000)",
                    "\16#fc;\16#80;\16#80;\16#80;\0;;") and
        checkError1(bstring("\16#fc;\16#80;\16#80;\16#80;\16#7f;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 5,
                    "UTF-8 continuation byte expected found \"\\127;\" (U+007f)",
                    "\16#fc;\16#80;\16#80;\16#80;\16#7f;;") and
        checkError1(bstring(" \16#ff;\16#bf;\16#bf;\16#bf;\0;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 6,
                    "UTF-8 continuation byte expected found \"\\0;\" (U+0000)",
                    " \16#ff;\16#bf;\16#bf;\16#bf;\0;;") and
        checkError1(bstring(" \16#ff;\16#bf;\16#bf;\16#bf;\16#7f;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 6,
                    "UTF-8 continuation byte expected found \"\\127;\" (U+007f)",
                    " \16#ff;\16#bf;\16#bf;\16#bf;\16#7f;;") then
      okay := TRUE;
    else
      writeln(" *** UTF8_CONTINUATION_BYTE_EXPECTED not reported correctly. (8)");
    end if;
  end func;


const func boolean: checkUTF8ContinuationByte9 is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1(bstring("\16#fc;\16#80;\16#80;\0;\16#80;\16#80;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 4,
                    "UTF-8 continuation byte expected found \"\\0;\" (U+0000)",
                    "\16#fc;\16#80;\16#80;\0;\16#80;\16#80;;") and
        checkError1(bstring("\16#fc;\16#80;\16#80;\16#7f;\16#80;\16#80;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 4,
                    "UTF-8 continuation byte expected found \"\\127;\" (U+007f)",
                    "\16#fc;\16#80;\16#80;\16#7f;\16#80;\16#80;;") and
        checkError1(bstring("\16#fc;\16#80;\16#bf;\0;\16#80;\16#80;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 4,
                    "UTF-8 continuation byte expected found \"\\0;\" (U+0000)",
                    "\16#fc;\16#80;\16#bf;\0;\16#80;\16#80;;") and
        checkError1(bstring("\16#fc;\16#80;\16#bf;\16#7f;\16#80;\16#80;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 4,
                    "UTF-8 continuation byte expected found \"\\127;\" (U+007f)",
                    "\16#fc;\16#80;\16#bf;\16#7f;\16#80;\16#80;;") and
        checkError1(bstring("\16#fc;\16#bf;\16#80;\0;\16#80;\16#80;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 4,
                    "UTF-8 continuation byte expected found \"\\0;\" (U+0000)",
                    "\16#fc;\16#bf;\16#80;\0;\16#80;\16#80;;") and
        checkError1(bstring("\16#fc;\16#bf;\16#80;\16#7f;\16#80;\16#80;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 4,
                    "UTF-8 continuation byte expected found \"\\127;\" (U+007f)",
                    "\16#fc;\16#bf;\16#80;\16#7f;\16#80;\16#80;;") and
        checkError1(bstring("\16#fc;\16#bf;\16#bf;\0;\16#80;\16#80;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 4,
                    "UTF-8 continuation byte expected found \"\\0;\" (U+0000)",
                    "\16#fc;\16#bf;\16#bf;\0;\16#80;\16#80;;") and
        checkError1(bstring("\16#fc;\16#bf;\16#bf;\16#7f;\16#80;\16#80;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 4,
                    "UTF-8 continuation byte expected found \"\\127;\" (U+007f)",
                    "\16#fc;\16#bf;\16#bf;\16#7f;\16#80;\16#80;;") and
        checkError1(bstring(" \16#ff;\16#80;\16#80;\0;\16#80;\16#80;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 5,
                    "UTF-8 continuation byte expected found \"\\0;\" (U+0000)",
                    " \16#ff;\16#80;\16#80;\0;\16#80;\16#80;;") and
        checkError1(bstring(" \16#ff;\16#80;\16#80;\16#7f;\16#80;\16#80;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 5,
                    "UTF-8 continuation byte expected found \"\\127;\" (U+007f)",
                    " \16#ff;\16#80;\16#80;\16#7f;\16#80;\16#80;;") and
        checkError1(bstring(" \16#ff;\16#80;\16#bf;\0;\16#80;\16#80;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 5,
                    "UTF-8 continuation byte expected found \"\\0;\" (U+0000)",
                    " \16#ff;\16#80;\16#bf;\0;\16#80;\16#80;;") and
        checkError1(bstring(" \16#ff;\16#80;\16#bf;\16#7f;\16#80;\16#80;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 5,
                    "UTF-8 continuation byte expected found \"\\127;\" (U+007f)",
                    " \16#ff;\16#80;\16#bf;\16#7f;\16#80;\16#80;;") and
        checkError1(bstring(" \16#ff;\16#bf;\16#80;\0;\16#80;\16#80;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 5,
                    "UTF-8 continuation byte expected found \"\\0;\" (U+0000)",
                    " \16#ff;\16#bf;\16#80;\0;\16#80;\16#80;;") and
        checkError1(bstring(" \16#ff;\16#bf;\16#80;\16#7f;\16#80;\16#80;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 5,
                    "UTF-8 continuation byte expected found \"\\127;\" (U+007f)",
                    " \16#ff;\16#bf;\16#80;\16#7f;\16#80;\16#80;;") and
        checkError1(bstring(" \16#ff;\16#bf;\16#bf;\0;\16#80;\16#80;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 5,
                    "UTF-8 continuation byte expected found \"\\0;\" (U+0000)",
                    " \16#ff;\16#bf;\16#bf;\0;\16#80;\16#80;;") and
        checkError1(bstring(" \16#ff;\16#bf;\16#bf;\16#7f;\16#80;\16#80;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 5,
                    "UTF-8 continuation byte expected found \"\\127;\" (U+007f)",
                    " \16#ff;\16#bf;\16#bf;\16#7f;\16#80;\16#80;;") then
      okay := TRUE;
    else
      writeln(" *** UTF8_CONTINUATION_BYTE_EXPECTED not reported correctly. (9)");
    end if;
  end func;


const func boolean: checkUTF8ContinuationByte10 is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1(bstring("\16#fc;\16#80;\0;\16#80;\16#80;\16#80;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 3,
                    "UTF-8 continuation byte expected found \"\\0;\" (U+0000)",
                    "\16#fc;\16#80;\0;\16#80;\16#80;\16#80;;") and
        checkError1(bstring("\16#fc;\16#80;\16#7f;\16#80;\16#80;\16#80;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 3,
                    "UTF-8 continuation byte expected found \"\\127;\" (U+007f)",
                    "\16#fc;\16#80;\16#7f;\16#80;\16#80;\16#80;;") and
        checkError1(bstring("\16#fc;\16#bf;\0;\16#80;\16#80;\16#80;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 3,
                    "UTF-8 continuation byte expected found \"\\0;\" (U+0000)",
                    "\16#fc;\16#bf;\0;\16#80;\16#80;\16#80;;") and
        checkError1(bstring("\16#fc;\16#bf;\16#7f;\16#80;\16#80;\16#80;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 3,
                    "UTF-8 continuation byte expected found \"\\127;\" (U+007f)",
                    "\16#fc;\16#bf;\16#7f;\16#80;\16#80;\16#80;;") and
        checkError1(bstring(" \16#ff;\16#80;\0;\16#80;\16#80;\16#80;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 4,
                    "UTF-8 continuation byte expected found \"\\0;\" (U+0000)",
                    " \16#ff;\16#80;\0;\16#80;\16#80;\16#80;;") and
        checkError1(bstring(" \16#ff;\16#80;\16#7f;\16#80;\16#80;\16#80;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 4,
                    "UTF-8 continuation byte expected found \"\\127;\" (U+007f)",
                    " \16#ff;\16#80;\16#7f;\16#80;\16#80;\16#80;;") and
        checkError1(bstring(" \16#ff;\16#bf;\0;\16#80;\16#80;\16#80;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 4,
                    "UTF-8 continuation byte expected found \"\\0;\" (U+0000)",
                    " \16#ff;\16#bf;\0;\16#80;\16#80;\16#80;;") and
        checkError1(bstring(" \16#ff;\16#bf;\16#7f;\16#80;\16#80;\16#80;;"),
                    UTF8_CONTINUATION_BYTE_EXPECTED, 1, 4,
                    "UTF-8 continuation byte expected found \"\\127;\" (U+007f)",
                    " \16#ff;\16#bf;\16#7f;\16#80;\16#80;\16#80;;") then
      okay := TRUE;
    else
      writeln(" *** UTF8_CONTINUATION_BYTE_EXPECTED not reported correctly. (10)");
    end if;
  end func;


const func boolean: checkUnexpectedUtf8ContinuationByte is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1(bstring("'\16#80;';"),
                    UNEXPECTED_UTF8_CONTINUATION_BYTE, 1, 2,
                    "Unexpected UTF-8 continuation byte found \"\\128;\" (U+0080)",
                    "'\16#80;';") and
        checkError1(bstring("'\16#bf;';"),
                    UNEXPECTED_UTF8_CONTINUATION_BYTE, 1, 2,
                    "Unexpected UTF-8 continuation byte found \"\\191;\" (U+00bf)",
                    "'\16#bf;';") and
        checkError1(bstring("\"\16#80;\";"),
                    UNEXPECTED_UTF8_CONTINUATION_BYTE, 1, 2,
                    "Unexpected UTF-8 continuation byte found \"\\128;\" (U+0080)",
                    "\"\16#80;\";") and
        checkError1(bstring("\"\16#bf;\";"),
                    UNEXPECTED_UTF8_CONTINUATION_BYTE, 1, 2,
                    "Unexpected UTF-8 continuation byte found \"\\191;\" (U+00bf)",
                    "\"\16#bf;\";") then
      okay := TRUE;
    else
      writeln(" *** UNEXPECTED_UTF8_CONTINUATION_BYTE not reported correctly.");
    end if;
  end func;


const func boolean: checkSolitaryUtf8StartByte is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1(bstring("\16#c0;;"),
                    SOLITARY_UTF8_START_BYTE, 1, 2,
                    "Solitary UTF-8 start byte found \"\\192;\" (U+00c0)",
                    "\16#c0;;") and
        checkError1(bstring("\16#df;;"),
                    SOLITARY_UTF8_START_BYTE, 1, 2,
                    "Solitary UTF-8 start byte found \"\\223;\" (U+00df)",
                    "\16#df;;") and
        checkError1(bstring("\16#e0;;"),
                    SOLITARY_UTF8_START_BYTE, 1, 2,
                    "Solitary UTF-8 start byte found \"\\224;\" (U+00e0)",
                    "\16#e0;;") and
        checkError1(bstring("\16#ef;;"),
                    SOLITARY_UTF8_START_BYTE, 1, 2,
                    "Solitary UTF-8 start byte found \"\\239;\" (U+00ef)",
                    "\16#ef;;") and
        checkError1(bstring("\16#f0;;"),
                    SOLITARY_UTF8_START_BYTE, 1, 2,
                    "Solitary UTF-8 start byte found \"\\240;\" (U+00f0)",
                    "\16#f0;;") and
        checkError1(bstring("\16#f7;;"),
                    SOLITARY_UTF8_START_BYTE, 1, 2,
                    "Solitary UTF-8 start byte found \"\\247;\" (U+00f7)",
                    "\16#f7;;") and
        checkError1(bstring("\16#f8;;"),
                    SOLITARY_UTF8_START_BYTE, 1, 2,
                    "Solitary UTF-8 start byte found \"\\248;\" (U+00f8)",
                    "\16#f8;;") and
        checkError1(bstring("\16#fb;;"),
                    SOLITARY_UTF8_START_BYTE, 1, 2,
                    "Solitary UTF-8 start byte found \"\\251;\" (U+00fb)",
                    "\16#fb;;") and
        checkError1(bstring("\16#fc;;"),
                    SOLITARY_UTF8_START_BYTE, 1, 2,
                    "Solitary UTF-8 start byte found \"\\252;\" (U+00fc)",
                    "\16#fc;;") and
        checkError1(bstring(" \16#ff;;"),
                    SOLITARY_UTF8_START_BYTE, 1, 3,
                    "Solitary UTF-8 start byte found \"\\255;\" (U+00ff)",
                    " \16#ff;;") then
      okay := TRUE;
    else
      writeln(" *** SOLITARY_UTF8_START_BYTE not reported correctly.");
    end if;
  end func;


const func boolean: checkUtf16ByteOrderMarkFound is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkError1(bstring("\16#fe;\16#ff;"),
                    UTF16_BYTE_ORDER_MARK_FOUND, 1, 2,
                    "UTF-16 byte order mark found \"\\65279;\" (U+feff)",
                    "\16#fe;\16#ff;") and
        checkError1(bstring("\16#ff;\16#fe;"),
                    UTF16_BYTE_ORDER_MARK_FOUND, 1, 2,
                    "UTF-16 byte order mark found \"\\65534;\" (U+fffe)",
                    "\16#ff;\16#fe;") then
      okay := TRUE;
    else
      writeln(" *** UTF16_BYTE_ORDER_MARK_FOUND not reported correctly.");
    end if;
  end func;


const func boolean: checkUnicodeErrors is func
  result
    var boolean: okay is FALSE;
  begin
    if  checkOverlongUtf8Encoding and
        checkUtf16SurrogateChar and
        checkCharNotUnicode and
        checkUTF8ContinuationByte1 and
        checkUTF8ContinuationByte2 and
        checkUTF8ContinuationByte3 and
        checkUTF8ContinuationByte4 and
        checkUTF8ContinuationByte5 and
        checkUTF8ContinuationByte6 and
        checkUTF8ContinuationByte7 and
        checkUTF8ContinuationByte8 and
        checkUTF8ContinuationByte9 and
        checkUTF8ContinuationByte10 and
        checkUnexpectedUtf8ContinuationByte and
        checkSolitaryUtf8StartByte and
        checkUtf16ByteOrderMarkFound then
      writeln("Unicode errors are reported correctly.");
      okay := TRUE;
    else
      writeln(" *** Unicode errors are not reported correctly.");
    end if;
  end func;


const proc: main is func
  begin
    writeln;
    if  checkScannerErrors and
        checkIncludeAndPragmaErrors and
        checkBasicDeclarationErrors and
        checkNumericLiteralErrors and
        checkStringAndCharLiteralErrors and
        checkExpectedErrors and
        checkDeclarationErrors and
        checkSyntaxDeclarationErrors and
        checkSemanticErrors and
        checkUnicodeErrors then
      writeln("All errors are reported correctly.");
    else
      writeln(" *** Some errors are not reported correctly.");
    end if;
  end func;
