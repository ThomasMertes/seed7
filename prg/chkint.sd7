
(********************************************************************)
(*                                                                  *)
(*  chkint.sd7    Checks integer literals and operations            *)
(*  Copyright (C) 1991 - 1994, 2004, 2005, 2007 - 2017, 2019 - 2020 *)
(*                Thomas Mertes                                     *)
(*                                                                  *)
(*  This program is free software; you can redistribute it and/or   *)
(*  modify it under the terms of the GNU General Public License as  *)
(*  published by the Free Software Foundation; either version 2 of  *)
(*  the License, or (at your option) any later version.             *)
(*                                                                  *)
(*  This program is distributed in the hope that it will be useful, *)
(*  but WITHOUT ANY WARRANTY; without even the implied warranty of  *)
(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   *)
(*  GNU General Public License for more details.                    *)
(*                                                                  *)
(*  You should have received a copy of the GNU General Public       *)
(*  License along with this program; if not, write to the           *)
(*  Free Software Foundation, Inc., 51 Franklin Street,             *)
(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)
(*                                                                  *)
(********************************************************************)


$ include "seed7_05.s7i";
  include "stdio.s7i";
  include "bytedata.s7i";
  include "leb128.s7i";


const integer: INT32_MIN is pred(-2147483647);
const integer: INT32_MAX is 2147483647;
const integer: INT64_MIN is integer.first;
const integer: INT64_MAX is integer.last;


const func integer: intExpr (in integer: number) is
  return number + length(str(rand(1, 9))[2 ..]);


const func string: striExpr (in string: stri) is
  return stri & str(rand(1, 9))[2 ..];


const func char: charExpr (in char: ch) is
  return chr(ord(ch) + length(str(rand(1, 9))[2 ..]));


const func boolean: boolExpr (ref boolean: value) is
  return value and str(rand(1, 9))[2 ..] = "";


const func boolean: raisesRangeError (ref func string: expression) is func
  result
    var boolean: raisesRangeError is FALSE;
  local
    var string: exprResult is "";
  begin
    block
      exprResult := expression;
    exception
      catch RANGE_ERROR:
        raisesRangeError := TRUE;
    end block;
  end func;


const func boolean: raisesRangeError (ref func integer: expression) is func
  result
    var boolean: raisesRangeError is FALSE;
  local
    var integer: exprResult is 0;
  begin
    block
      exprResult := expression;
    exception
      catch RANGE_ERROR:
        raisesRangeError := TRUE;
    end block;
  end func;


const func boolean: raisesNumericError (ref func integer: expression) is func
  result
    var boolean: raisesNumericError is FALSE;
  local
    var integer: exprResult is 0;
  begin
    block
      exprResult := expression;
    exception
      catch NUMERIC_ERROR:
        raisesNumericError := TRUE;
    end block;
  end func;


const proc: check_exponent_integer_literal is func
  local
    var boolean: okay is TRUE;
  begin
    if 0 <> 0E0 or 0E0 <> 0e0 or
        0 <> 0E1 or 0E1 <> 0e1 or
        0 <> 0E2 or 0E2 <> 0e2 or
        0 <> 0E3 or 0E3 <> 0e3 or
        0 <> 0E4 or 0E4 <> 0e4 or
        0 <> 0E5 or 0E5 <> 0e5 or
        0 <> 0E6 or 0E6 <> 0e6 or
        0 <> 0E7 or 0E7 <> 0e7 or
        0 <> 0E8 or 0E8 <> 0e8 or
        0 <> 0E9 or 0E9 <> 0e9 or
        0 <> 0E10 or 0E10 <> 0e10 or
        0 <> 0E11 or 0E11 <> 0e11 or
        0 <> 0E12 or 0E12 <> 0e12 or
        0 <> 0E13 or 0E13 <> 0e13 or
        0 <> 0E14 or 0E14 <> 0e14 or
        0 <> 0E15 or 0E15 <> 0e15 or
        0 <> 0E16 or 0E16 <> 0e16 or
        0 <> 0E17 or 0E17 <> 0e17 or
        0 <> 0E999999999999999 or 0E999999999999999 <> 0e999999999999999 or
        1 <>          1E0 or 1E0 <> 1e0 or
        10 <>         1E1 or 1E1 <> 1e1 or
        100 <>        1E2 or 1E2 <> 1e2 or
        1000 <>       1E3 or 1E3 <> 1e3 or
        10000 <>      1E4 or 1E4 <> 1e4 or
        100000 <>     1E5 or 1E5 <> 1e5 or
        1000000 <>    1E6 or 1E6 <> 1e6 or
        10000000 <>   1E7 or 1E7 <> 1e7 or
        100000000 <>  1E8 or 1E8 <> 1e8 or
        1000000000 <> 1E9 or 1E9 <> 1e9 or
        12 <>         12E0 or 12E0 <> 12e0 or
        120 <>        12E1 or 12E1 <> 12e1 or
        1200 <>       12E2 or 12E2 <> 12e2 or
        1200000 <>    12E5 or 12E5 <> 12e5 or
        1200000000 <> 12E8 or 12E8 <> 12e8 or
        123 <>        123E0 or 123E0 <> 123e0 or
        1230 <>       123E1 or 123E1 <> 123e1 or
        12300 <>      123E2 or 123E2 <> 123e2 or
        12300000 <>   123E5 or 123E5 <> 123e5 or
        1230000000 <> 123E7 or 123E7 <> 123e7 or
        12345 <>      12345E0 or 12345E0 <> 12345e0 or
        123450 <>     12345E1 or 12345E1 <> 12345e1 or
        1234500 <>    12345E2 or 12345E2 <> 12345e2 or
        123450000 <>  12345E4 or 12345E4 <> 12345e4 or
        1234500000 <> 12345E5 or 12345E5 <> 12345e5 then
      writeln("Integer literals with exponent do not work correct.");
      okay := FALSE;
    end if;

    if okay then
      writeln("Integer literals with exponent work correct.");
    else
      writeln(" ***** Integer literals with exponent do not work correct.");
      writeln;
    end if;
  end func;


const proc: check_based_integer_literal is func
  local
    var boolean: okay is TRUE;
  begin
    if     0 <>  2#0 or  2#0 <>  3#0 or
         3#0 <>  4#0 or  4#0 <>  5#0 or  5#0 <>  6#0 or  6#0 <>  7#0 or
         7#0 <>  8#0 or  8#0 <>  9#0 or  9#0 <> 10#0 or 10#0 <> 11#0 or
        11#0 <> 12#0 or 12#0 <> 13#0 or 13#0 <> 14#0 or 14#0 <> 15#0 or
        15#0 <> 16#0 or 16#0 <> 17#0 or 17#0 <> 18#0 or 18#0 <> 19#0 or
        19#0 <> 20#0 or 20#0 <> 21#0 or 21#0 <> 22#0 or 22#0 <> 23#0 or
        23#0 <> 24#0 or 24#0 <> 25#0 or 25#0 <> 26#0 or 26#0 <> 27#0 or
        27#0 <> 28#0 or 28#0 <> 29#0 or 29#0 <> 30#0 or 30#0 <> 31#0 or
        31#0 <> 32#0 or 32#0 <> 33#0 or 33#0 <> 34#0 or 34#0 <> 35#0 or
        35#0 <> 36#0 then
      writeln("Based integer literals do not work correct.");
      okay := FALSE;
    end if;
    if     1 <>  2#1 or  2#1 <>  3#1 or
         3#1 <>  4#1 or  4#1 <>  5#1 or  5#1 <>  6#1 or  6#1 <>  7#1 or
         7#1 <>  8#1 or  8#1 <>  9#1 or  9#1 <> 10#1 or 10#1 <> 11#1 or
        11#1 <> 12#1 or 12#1 <> 13#1 or 13#1 <> 14#1 or 14#1 <> 15#1 or
        15#1 <> 16#1 or 16#1 <> 17#1 or 17#1 <> 18#1 or 18#1 <> 19#1 or
        19#1 <> 20#1 or 20#1 <> 21#1 or 21#1 <> 22#1 or 22#1 <> 23#1 or
        23#1 <> 24#1 or 24#1 <> 25#1 or 25#1 <> 26#1 or 26#1 <> 27#1 or
        27#1 <> 28#1 or 28#1 <> 29#1 or 29#1 <> 30#1 or 30#1 <> 31#1 or
        31#1 <> 32#1 or 32#1 <> 33#1 or 33#1 <> 34#1 or 34#1 <> 35#1 or
        35#1 <> 36#1 then
      writeln("Based integer literals do not work correct.");
      okay := FALSE;
    end if;
    if     2 <> 2#10 or 2#10 <>  3#2 or
         3#2 <>  4#2 or  4#2 <>  5#2 or  5#2 <>  6#2 or  6#2 <>  7#2 or
         7#2 <>  8#2 or  8#2 <>  9#2 or  9#2 <> 10#2 or 10#2 <> 11#2 or
        11#2 <> 12#2 or 12#2 <> 13#2 or 13#2 <> 14#2 or 14#2 <> 15#2 or
        15#2 <> 16#2 or 16#2 <> 17#2 or 17#2 <> 18#2 or 18#2 <> 19#2 or
        19#2 <> 20#2 or 20#2 <> 21#2 or 21#2 <> 22#2 or 22#2 <> 23#2 or
        23#2 <> 24#2 or 24#2 <> 25#2 or 25#2 <> 26#2 or 26#2 <> 27#2 or
        27#2 <> 28#2 or 28#2 <> 29#2 or 29#2 <> 30#2 or 30#2 <> 31#2 or
        31#2 <> 32#2 or 32#2 <> 33#2 or 33#2 <> 34#2 or 34#2 <> 35#2 or
        35#2 <> 36#2 then
      writeln("Based integer literals do not work correct.");
      okay := FALSE;
    end if;
    if    16 <> 2#10000 or 2#10000 <> 3#121 or
        3#121 <> 4#100 or 4#100 <>  5#31 or  5#31 <>  6#24 or  6#24 <>  7#22 or
         7#22 <>  8#20 or  8#20 <>  9#17 or  9#17 <> 10#16 or 10#16 <> 11#15 or
        11#15 <> 12#14 or 12#14 <> 13#13 or 13#13 <> 14#12 or 14#12 <> 15#11 or
        15#11 <> 16#10 or 16#10 <> 17#G or 17#G <> 18#G or 18#G <> 19#G or
        19#G <> 20#G or 20#G <> 21#G or 21#G <> 22#G or 22#G <> 23#G or
        23#G <> 24#G or 24#G <> 25#G or 25#G <> 26#G or 26#G <> 27#G or
        27#G <> 28#G or 28#G <> 29#G or 29#G <> 30#G or 30#G <> 31#G or
        31#G <> 32#G or 32#G <> 33#G or 33#G <> 34#G or 34#G <> 35#G or
        35#G <> 36#G then
      writeln("Based integer literals do not work correct.");
      okay := FALSE;
    end if;
    if    32 <> 2#100000 or 2#100000 <> 3#1012 or
       3#1012 <> 4#200 or 4#200 <> 5#112 or 5#112 <>  6#52 or  6#52 <>  7#44 or
         7#44 <>  8#40 or  8#40 <>  9#35 or  9#35 <> 10#32 or 10#32 <> 11#2A or
        11#2A <> 12#28 or 12#28 <> 13#26 or 13#26 <> 14#24 or 14#24 <> 15#22 or
        15#22 <> 16#20 or 16#20 <> 17#1F or 17#1F <> 18#1E or 18#1E <> 19#1D or
        19#1D <> 20#1C or 20#1C <> 21#1B or 21#1B <> 22#1A or 22#1A <> 23#19 or
        23#19 <> 24#18 or 24#18 <> 25#17 or 25#17 <> 26#16 or 26#16 <> 27#15 or
        27#15 <> 28#14 or 28#14 <> 29#13 or 29#13 <> 30#12 or 30#12 <> 31#11 or
        31#11 <> 32#10 or 32#10 <> 33#W or 33#W <> 34#W or 34#W <> 35#W or
        35#W <> 36#W then
      writeln("Based integer literals do not work correct.");
      okay := FALSE;
    end if;
    if  1000000 <>  2#11110100001001000000 or
        1000000 <>  3#1212210202001 or
        1000000 <>  4#3310021000 or
        1000000 <>  5#224000000 or
        1000000 <>  6#33233344 or
        1000000 <>  7#11333311 or
        1000000 <>  8#3641100 or
        1000000 <>  9#1783661 or
        1000000 <> 10#1000000 or
        1000000 <> 11#623351 or
        1000000 <> 12#402854 or
        1000000 <> 13#290221 or
        1000000 <> 14#1C0608 or
        1000000 <> 15#14B46A or
        1000000 <> 16#F4240 or
        1000000 <> 17#BG939 or
        1000000 <> 18#9987A or
        1000000 <> 19#7CF1B or
        1000000 <> 20#65000 or
        1000000 <> 21#52KC1 or
        1000000 <> 22#45K2C or
        1000000 <> 23#3D486 or
        1000000 <> 24#3082G or
        1000000 <> 25#2E000 or
        1000000 <> 26#24N7E or
        1000000 <> 27#1NLK1 or
        1000000 <> 28#1HFE8 or
        1000000 <> 29#1C01M or
        1000000 <> 30#1713A or
        1000000 <> 31#12HI2 or
        1000000 <> 32#UGI0 or
        1000000 <> 33#RR91 or
        1000000 <> 34#PF1Q or
        1000000 <> 35#NBBF or
        1000000 <> 36#LFLS then
      writeln("Based integer literals do not work correct.");
      okay := FALSE;
    end if;

    if okay then
      writeln("Based integer literals work correct.");
    else
      writeln(" ***** Based integer literals do not work correct.");
      writeln;
    end if;
  end func;


const proc: check_compare is func
  local
    var boolean: okay is TRUE;
  begin
    if  compare(           INT64_MIN,            INT64_MIN) <>  0 or
        compare(-9223372036854775807,            INT64_MIN) <>  1 or
        compare(                  -2,            INT64_MIN) <>  1 or
        compare(                  -1,            INT64_MIN) <>  1 or
        compare(                   0,            INT64_MIN) <>  1 or
        compare(                   1,            INT64_MIN) <>  1 or
        compare(                   2,            INT64_MIN) <>  1 or
        compare( 9223372036854775806,            INT64_MIN) <>  1 or
        compare( 9223372036854775807,            INT64_MIN) <>  1 or
        compare(           INT64_MIN, -9223372036854775807) <> -1 or
        compare(-9223372036854775807, -9223372036854775807) <>  0 or
        compare(                  -2, -9223372036854775807) <>  1 or
        compare(                  -1, -9223372036854775807) <>  1 or
        compare(                   0, -9223372036854775807) <>  1 or
        compare(                   1, -9223372036854775807) <>  1 or
        compare(                   2, -9223372036854775807) <>  1 or
        compare( 9223372036854775806, -9223372036854775807) <>  1 or
        compare( 9223372036854775807, -9223372036854775807) <>  1 or
        compare(           INT64_MIN,                   -2) <> -1 or
        compare(-9223372036854775807,                   -2) <> -1 or
        compare(                  -2,                   -2) <>  0 or
        compare(                  -1,                   -2) <>  1 or
        compare(                   0,                   -2) <>  1 or
        compare(                   1,                   -2) <>  1 or
        compare(                   2,                   -2) <>  1 or
        compare( 9223372036854775806,                   -2) <>  1 or
        compare( 9223372036854775807,                   -2) <>  1 or
        compare(           INT64_MIN,                   -1) <> -1 or
        compare(-9223372036854775807,                   -1) <> -1 or
        compare(                  -2,                   -1) <> -1 or
        compare(                  -1,                   -1) <>  0 or
        compare(                   0,                   -1) <>  1 or
        compare(                   1,                   -1) <>  1 or
        compare(                   2,                   -1) <>  1 or
        compare( 9223372036854775806,                   -1) <>  1 or
        compare( 9223372036854775807,                   -1) <>  1 or
        compare(           INT64_MIN,                    0) <> -1 or
        compare(-9223372036854775807,                    0) <> -1 or
        compare(                  -2,                    0) <> -1 or
        compare(                  -1,                    0) <> -1 or
        compare(                   0,                    0) <>  0 or
        compare(                   1,                    0) <>  1 or
        compare(                   2,                    0) <>  1 or
        compare( 9223372036854775806,                    0) <>  1 or
        compare( 9223372036854775807,                    0) <>  1 or
        compare(           INT64_MIN,                    1) <> -1 or
        compare(-9223372036854775807,                    1) <> -1 or
        compare(                  -2,                    1) <> -1 or
        compare(                  -1,                    1) <> -1 or
        compare(                   0,                    1) <> -1 or
        compare(                   1,                    1) <>  0 or
        compare(                   2,                    1) <>  1 or
        compare( 9223372036854775806,                    1) <>  1 or
        compare( 9223372036854775807,                    1) <>  1 or
        compare(           INT64_MIN,                    2) <> -1 or
        compare(-9223372036854775807,                    2) <> -1 or
        compare(                  -2,                    2) <> -1 or
        compare(                  -1,                    2) <> -1 or
        compare(                   0,                    2) <> -1 or
        compare(                   1,                    2) <> -1 or
        compare(                   2,                    2) <>  0 or
        compare( 9223372036854775806,                    2) <>  1 or
        compare( 9223372036854775807,                    2) <>  1 or
        compare(           INT64_MIN,  9223372036854775806) <> -1 or
        compare(-9223372036854775807,  9223372036854775806) <> -1 or
        compare(                  -2,  9223372036854775806) <> -1 or
        compare(                  -1,  9223372036854775806) <> -1 or
        compare(                   0,  9223372036854775806) <> -1 or
        compare(                   1,  9223372036854775806) <> -1 or
        compare(                   2,  9223372036854775806) <> -1 or
        compare( 9223372036854775806,  9223372036854775806) <>  0 or
        compare( 9223372036854775807,  9223372036854775806) <>  1 or
        compare(           INT64_MIN,  9223372036854775807) <> -1 or
        compare(-9223372036854775807,  9223372036854775807) <> -1 or
        compare(                  -2,  9223372036854775807) <> -1 or
        compare(                  -1,  9223372036854775807) <> -1 or
        compare(                   0,  9223372036854775807) <> -1 or
        compare(                   1,  9223372036854775807) <> -1 or
        compare(                   2,  9223372036854775807) <> -1 or
        compare( 9223372036854775806,  9223372036854775807) <> -1 or
        compare( 9223372036854775807,  9223372036854775807) <>  0 then
      writeln("The integer compare does not work correct. (1)");
      okay := FALSE;
    end if;

    if  compare(intExpr(           INT64_MIN),            INT64_MIN) <>  0 or
        compare(intExpr(-9223372036854775807),            INT64_MIN) <>  1 or
        compare(intExpr(                  -2),            INT64_MIN) <>  1 or
        compare(intExpr(                  -1),            INT64_MIN) <>  1 or
        compare(intExpr(                   0),            INT64_MIN) <>  1 or
        compare(intExpr(                   1),            INT64_MIN) <>  1 or
        compare(intExpr(                   2),            INT64_MIN) <>  1 or
        compare(intExpr( 9223372036854775806),            INT64_MIN) <>  1 or
        compare(intExpr( 9223372036854775807),            INT64_MIN) <>  1 or
        compare(intExpr(           INT64_MIN), -9223372036854775807) <> -1 or
        compare(intExpr(-9223372036854775807), -9223372036854775807) <>  0 or
        compare(intExpr(                  -2), -9223372036854775807) <>  1 or
        compare(intExpr(                  -1), -9223372036854775807) <>  1 or
        compare(intExpr(                   0), -9223372036854775807) <>  1 or
        compare(intExpr(                   1), -9223372036854775807) <>  1 or
        compare(intExpr(                   2), -9223372036854775807) <>  1 or
        compare(intExpr( 9223372036854775806), -9223372036854775807) <>  1 or
        compare(intExpr( 9223372036854775807), -9223372036854775807) <>  1 or
        compare(intExpr(           INT64_MIN),                   -2) <> -1 or
        compare(intExpr(-9223372036854775807),                   -2) <> -1 or
        compare(intExpr(                  -2),                   -2) <>  0 or
        compare(intExpr(                  -1),                   -2) <>  1 or
        compare(intExpr(                   0),                   -2) <>  1 or
        compare(intExpr(                   1),                   -2) <>  1 or
        compare(intExpr(                   2),                   -2) <>  1 or
        compare(intExpr( 9223372036854775806),                   -2) <>  1 or
        compare(intExpr( 9223372036854775807),                   -2) <>  1 or
        compare(intExpr(           INT64_MIN),                   -1) <> -1 or
        compare(intExpr(-9223372036854775807),                   -1) <> -1 or
        compare(intExpr(                  -2),                   -1) <> -1 or
        compare(intExpr(                  -1),                   -1) <>  0 or
        compare(intExpr(                   0),                   -1) <>  1 or
        compare(intExpr(                   1),                   -1) <>  1 or
        compare(intExpr(                   2),                   -1) <>  1 or
        compare(intExpr( 9223372036854775806),                   -1) <>  1 or
        compare(intExpr( 9223372036854775807),                   -1) <>  1 or
        compare(intExpr(           INT64_MIN),                    0) <> -1 or
        compare(intExpr(-9223372036854775807),                    0) <> -1 or
        compare(intExpr(                  -2),                    0) <> -1 or
        compare(intExpr(                  -1),                    0) <> -1 or
        compare(intExpr(                   0),                    0) <>  0 or
        compare(intExpr(                   1),                    0) <>  1 or
        compare(intExpr(                   2),                    0) <>  1 or
        compare(intExpr( 9223372036854775806),                    0) <>  1 or
        compare(intExpr( 9223372036854775807),                    0) <>  1 or
        compare(intExpr(           INT64_MIN),                    1) <> -1 or
        compare(intExpr(-9223372036854775807),                    1) <> -1 or
        compare(intExpr(                  -2),                    1) <> -1 or
        compare(intExpr(                  -1),                    1) <> -1 or
        compare(intExpr(                   0),                    1) <> -1 or
        compare(intExpr(                   1),                    1) <>  0 or
        compare(intExpr(                   2),                    1) <>  1 or
        compare(intExpr( 9223372036854775806),                    1) <>  1 or
        compare(intExpr( 9223372036854775807),                    1) <>  1 or
        compare(intExpr(           INT64_MIN),                    2) <> -1 or
        compare(intExpr(-9223372036854775807),                    2) <> -1 or
        compare(intExpr(                  -2),                    2) <> -1 or
        compare(intExpr(                  -1),                    2) <> -1 or
        compare(intExpr(                   0),                    2) <> -1 or
        compare(intExpr(                   1),                    2) <> -1 or
        compare(intExpr(                   2),                    2) <>  0 or
        compare(intExpr( 9223372036854775806),                    2) <>  1 or
        compare(intExpr( 9223372036854775807),                    2) <>  1 or
        compare(intExpr(           INT64_MIN),  9223372036854775806) <> -1 or
        compare(intExpr(-9223372036854775807),  9223372036854775806) <> -1 or
        compare(intExpr(                  -2),  9223372036854775806) <> -1 or
        compare(intExpr(                  -1),  9223372036854775806) <> -1 or
        compare(intExpr(                   0),  9223372036854775806) <> -1 or
        compare(intExpr(                   1),  9223372036854775806) <> -1 or
        compare(intExpr(                   2),  9223372036854775806) <> -1 or
        compare(intExpr( 9223372036854775806),  9223372036854775806) <>  0 or
        compare(intExpr( 9223372036854775807),  9223372036854775806) <>  1 or
        compare(intExpr(           INT64_MIN),  9223372036854775807) <> -1 or
        compare(intExpr(-9223372036854775807),  9223372036854775807) <> -1 or
        compare(intExpr(                  -2),  9223372036854775807) <> -1 or
        compare(intExpr(                  -1),  9223372036854775807) <> -1 or
        compare(intExpr(                   0),  9223372036854775807) <> -1 or
        compare(intExpr(                   1),  9223372036854775807) <> -1 or
        compare(intExpr(                   2),  9223372036854775807) <> -1 or
        compare(intExpr( 9223372036854775806),  9223372036854775807) <> -1 or
        compare(intExpr( 9223372036854775807),  9223372036854775807) <>  0 then
      writeln("The integer compare does not work correct. (2)");
      okay := FALSE;
    end if;

    if  compare(           INT64_MIN, intExpr(           INT64_MIN)) <>  0 or
        compare(-9223372036854775807, intExpr(           INT64_MIN)) <>  1 or
        compare(                  -2, intExpr(           INT64_MIN)) <>  1 or
        compare(                  -1, intExpr(           INT64_MIN)) <>  1 or
        compare(                   0, intExpr(           INT64_MIN)) <>  1 or
        compare(                   1, intExpr(           INT64_MIN)) <>  1 or
        compare(                   2, intExpr(           INT64_MIN)) <>  1 or
        compare( 9223372036854775806, intExpr(           INT64_MIN)) <>  1 or
        compare( 9223372036854775807, intExpr(           INT64_MIN)) <>  1 or
        compare(           INT64_MIN, intExpr(-9223372036854775807)) <> -1 or
        compare(-9223372036854775807, intExpr(-9223372036854775807)) <>  0 or
        compare(                  -2, intExpr(-9223372036854775807)) <>  1 or
        compare(                  -1, intExpr(-9223372036854775807)) <>  1 or
        compare(                   0, intExpr(-9223372036854775807)) <>  1 or
        compare(                   1, intExpr(-9223372036854775807)) <>  1 or
        compare(                   2, intExpr(-9223372036854775807)) <>  1 or
        compare( 9223372036854775806, intExpr(-9223372036854775807)) <>  1 or
        compare( 9223372036854775807, intExpr(-9223372036854775807)) <>  1 or
        compare(           INT64_MIN, intExpr(                  -2)) <> -1 or
        compare(-9223372036854775807, intExpr(                  -2)) <> -1 or
        compare(                  -2, intExpr(                  -2)) <>  0 or
        compare(                  -1, intExpr(                  -2)) <>  1 or
        compare(                   0, intExpr(                  -2)) <>  1 or
        compare(                   1, intExpr(                  -2)) <>  1 or
        compare(                   2, intExpr(                  -2)) <>  1 or
        compare( 9223372036854775806, intExpr(                  -2)) <>  1 or
        compare( 9223372036854775807, intExpr(                  -2)) <>  1 or
        compare(           INT64_MIN, intExpr(                  -1)) <> -1 or
        compare(-9223372036854775807, intExpr(                  -1)) <> -1 or
        compare(                  -2, intExpr(                  -1)) <> -1 or
        compare(                  -1, intExpr(                  -1)) <>  0 or
        compare(                   0, intExpr(                  -1)) <>  1 or
        compare(                   1, intExpr(                  -1)) <>  1 or
        compare(                   2, intExpr(                  -1)) <>  1 or
        compare( 9223372036854775806, intExpr(                  -1)) <>  1 or
        compare( 9223372036854775807, intExpr(                  -1)) <>  1 or
        compare(           INT64_MIN, intExpr(                   0)) <> -1 or
        compare(-9223372036854775807, intExpr(                   0)) <> -1 or
        compare(                  -2, intExpr(                   0)) <> -1 or
        compare(                  -1, intExpr(                   0)) <> -1 or
        compare(                   0, intExpr(                   0)) <>  0 or
        compare(                   1, intExpr(                   0)) <>  1 or
        compare(                   2, intExpr(                   0)) <>  1 or
        compare( 9223372036854775806, intExpr(                   0)) <>  1 or
        compare( 9223372036854775807, intExpr(                   0)) <>  1 or
        compare(           INT64_MIN, intExpr(                   1)) <> -1 or
        compare(-9223372036854775807, intExpr(                   1)) <> -1 or
        compare(                  -2, intExpr(                   1)) <> -1 or
        compare(                  -1, intExpr(                   1)) <> -1 or
        compare(                   0, intExpr(                   1)) <> -1 or
        compare(                   1, intExpr(                   1)) <>  0 or
        compare(                   2, intExpr(                   1)) <>  1 or
        compare( 9223372036854775806, intExpr(                   1)) <>  1 or
        compare( 9223372036854775807, intExpr(                   1)) <>  1 or
        compare(           INT64_MIN, intExpr(                   2)) <> -1 or
        compare(-9223372036854775807, intExpr(                   2)) <> -1 or
        compare(                  -2, intExpr(                   2)) <> -1 or
        compare(                  -1, intExpr(                   2)) <> -1 or
        compare(                   0, intExpr(                   2)) <> -1 or
        compare(                   1, intExpr(                   2)) <> -1 or
        compare(                   2, intExpr(                   2)) <>  0 or
        compare( 9223372036854775806, intExpr(                   2)) <>  1 or
        compare( 9223372036854775807, intExpr(                   2)) <>  1 or
        compare(           INT64_MIN, intExpr( 9223372036854775806)) <> -1 or
        compare(-9223372036854775807, intExpr( 9223372036854775806)) <> -1 or
        compare(                  -2, intExpr( 9223372036854775806)) <> -1 or
        compare(                  -1, intExpr( 9223372036854775806)) <> -1 or
        compare(                   0, intExpr( 9223372036854775806)) <> -1 or
        compare(                   1, intExpr( 9223372036854775806)) <> -1 or
        compare(                   2, intExpr( 9223372036854775806)) <> -1 or
        compare( 9223372036854775806, intExpr( 9223372036854775806)) <>  0 or
        compare( 9223372036854775807, intExpr( 9223372036854775806)) <>  1 or
        compare(           INT64_MIN, intExpr( 9223372036854775807)) <> -1 or
        compare(-9223372036854775807, intExpr( 9223372036854775807)) <> -1 or
        compare(                  -2, intExpr( 9223372036854775807)) <> -1 or
        compare(                  -1, intExpr( 9223372036854775807)) <> -1 or
        compare(                   0, intExpr( 9223372036854775807)) <> -1 or
        compare(                   1, intExpr( 9223372036854775807)) <> -1 or
        compare(                   2, intExpr( 9223372036854775807)) <> -1 or
        compare( 9223372036854775806, intExpr( 9223372036854775807)) <> -1 or
        compare( 9223372036854775807, intExpr( 9223372036854775807)) <>  0 then
      writeln("The integer compare does not work correct. (3)");
      okay := FALSE;
    end if;

    if  compare(intExpr(           INT64_MIN), intExpr(           INT64_MIN)) <>  0 or
        compare(intExpr(-9223372036854775807), intExpr(           INT64_MIN)) <>  1 or
        compare(intExpr(                  -2), intExpr(           INT64_MIN)) <>  1 or
        compare(intExpr(                  -1), intExpr(           INT64_MIN)) <>  1 or
        compare(intExpr(                   0), intExpr(           INT64_MIN)) <>  1 or
        compare(intExpr(                   1), intExpr(           INT64_MIN)) <>  1 or
        compare(intExpr(                   2), intExpr(           INT64_MIN)) <>  1 or
        compare(intExpr( 9223372036854775806), intExpr(           INT64_MIN)) <>  1 or
        compare(intExpr( 9223372036854775807), intExpr(           INT64_MIN)) <>  1 or
        compare(intExpr(           INT64_MIN), intExpr(-9223372036854775807)) <> -1 or
        compare(intExpr(-9223372036854775807), intExpr(-9223372036854775807)) <>  0 or
        compare(intExpr(                  -2), intExpr(-9223372036854775807)) <>  1 or
        compare(intExpr(                  -1), intExpr(-9223372036854775807)) <>  1 or
        compare(intExpr(                   0), intExpr(-9223372036854775807)) <>  1 or
        compare(intExpr(                   1), intExpr(-9223372036854775807)) <>  1 or
        compare(intExpr(                   2), intExpr(-9223372036854775807)) <>  1 or
        compare(intExpr( 9223372036854775806), intExpr(-9223372036854775807)) <>  1 or
        compare(intExpr( 9223372036854775807), intExpr(-9223372036854775807)) <>  1 or
        compare(intExpr(           INT64_MIN), intExpr(                  -2)) <> -1 or
        compare(intExpr(-9223372036854775807), intExpr(                  -2)) <> -1 or
        compare(intExpr(                  -2), intExpr(                  -2)) <>  0 or
        compare(intExpr(                  -1), intExpr(                  -2)) <>  1 or
        compare(intExpr(                   0), intExpr(                  -2)) <>  1 or
        compare(intExpr(                   1), intExpr(                  -2)) <>  1 or
        compare(intExpr(                   2), intExpr(                  -2)) <>  1 or
        compare(intExpr( 9223372036854775806), intExpr(                  -2)) <>  1 or
        compare(intExpr( 9223372036854775807), intExpr(                  -2)) <>  1 or
        compare(intExpr(           INT64_MIN), intExpr(                  -1)) <> -1 or
        compare(intExpr(-9223372036854775807), intExpr(                  -1)) <> -1 or
        compare(intExpr(                  -2), intExpr(                  -1)) <> -1 or
        compare(intExpr(                  -1), intExpr(                  -1)) <>  0 or
        compare(intExpr(                   0), intExpr(                  -1)) <>  1 or
        compare(intExpr(                   1), intExpr(                  -1)) <>  1 or
        compare(intExpr(                   2), intExpr(                  -1)) <>  1 or
        compare(intExpr( 9223372036854775806), intExpr(                  -1)) <>  1 or
        compare(intExpr( 9223372036854775807), intExpr(                  -1)) <>  1 or
        compare(intExpr(           INT64_MIN), intExpr(                   0)) <> -1 or
        compare(intExpr(-9223372036854775807), intExpr(                   0)) <> -1 or
        compare(intExpr(                  -2), intExpr(                   0)) <> -1 or
        compare(intExpr(                  -1), intExpr(                   0)) <> -1 or
        compare(intExpr(                   0), intExpr(                   0)) <>  0 or
        compare(intExpr(                   1), intExpr(                   0)) <>  1 or
        compare(intExpr(                   2), intExpr(                   0)) <>  1 or
        compare(intExpr( 9223372036854775806), intExpr(                   0)) <>  1 or
        compare(intExpr( 9223372036854775807), intExpr(                   0)) <>  1 or
        compare(intExpr(           INT64_MIN), intExpr(                   1)) <> -1 or
        compare(intExpr(-9223372036854775807), intExpr(                   1)) <> -1 or
        compare(intExpr(                  -2), intExpr(                   1)) <> -1 or
        compare(intExpr(                  -1), intExpr(                   1)) <> -1 or
        compare(intExpr(                   0), intExpr(                   1)) <> -1 or
        compare(intExpr(                   1), intExpr(                   1)) <>  0 or
        compare(intExpr(                   2), intExpr(                   1)) <>  1 or
        compare(intExpr( 9223372036854775806), intExpr(                   1)) <>  1 or
        compare(intExpr( 9223372036854775807), intExpr(                   1)) <>  1 or
        compare(intExpr(           INT64_MIN), intExpr(                   2)) <> -1 or
        compare(intExpr(-9223372036854775807), intExpr(                   2)) <> -1 or
        compare(intExpr(                  -2), intExpr(                   2)) <> -1 or
        compare(intExpr(                  -1), intExpr(                   2)) <> -1 or
        compare(intExpr(                   0), intExpr(                   2)) <> -1 or
        compare(intExpr(                   1), intExpr(                   2)) <> -1 or
        compare(intExpr(                   2), intExpr(                   2)) <>  0 or
        compare(intExpr( 9223372036854775806), intExpr(                   2)) <>  1 or
        compare(intExpr( 9223372036854775807), intExpr(                   2)) <>  1 or
        compare(intExpr(           INT64_MIN), intExpr( 9223372036854775806)) <> -1 or
        compare(intExpr(-9223372036854775807), intExpr( 9223372036854775806)) <> -1 or
        compare(intExpr(                  -2), intExpr( 9223372036854775806)) <> -1 or
        compare(intExpr(                  -1), intExpr( 9223372036854775806)) <> -1 or
        compare(intExpr(                   0), intExpr( 9223372036854775806)) <> -1 or
        compare(intExpr(                   1), intExpr( 9223372036854775806)) <> -1 or
        compare(intExpr(                   2), intExpr( 9223372036854775806)) <> -1 or
        compare(intExpr( 9223372036854775806), intExpr( 9223372036854775806)) <>  0 or
        compare(intExpr( 9223372036854775807), intExpr( 9223372036854775806)) <>  1 or
        compare(intExpr(           INT64_MIN), intExpr( 9223372036854775807)) <> -1 or
        compare(intExpr(-9223372036854775807), intExpr( 9223372036854775807)) <> -1 or
        compare(intExpr(                  -2), intExpr( 9223372036854775807)) <> -1 or
        compare(intExpr(                  -1), intExpr( 9223372036854775807)) <> -1 or
        compare(intExpr(                   0), intExpr( 9223372036854775807)) <> -1 or
        compare(intExpr(                   1), intExpr( 9223372036854775807)) <> -1 or
        compare(intExpr(                   2), intExpr( 9223372036854775807)) <> -1 or
        compare(intExpr( 9223372036854775806), intExpr( 9223372036854775807)) <> -1 or
        compare(intExpr( 9223372036854775807), intExpr( 9223372036854775807)) <>  0 then
      writeln("The integer compare does not work correct. (4)");
      okay := FALSE;
    end if;

    if okay then
      writeln("The integer compare works correct.");
    else
      writeln(" ***** The integer compare does not work correct.");
      writeln;
    end if;
  end func;


const proc: check_bytesBe is func
  local
    var boolean: okay is TRUE;
  begin
    if  bytes(           INT64_MIN, SIGNED, BE) <> "\128;\000;\000;\000;\000;\000;\000;\000;" or
        bytes(-9223372036854775807, SIGNED, BE) <> "\128;\000;\000;\000;\000;\000;\000;\001;" or
        bytes(  -72057594037927937, SIGNED, BE) <> "\254;\255;\255;\255;\255;\255;\255;\255;" or
        bytes(  -72057594037927936, SIGNED, BE) <> "\255;\000;\000;\000;\000;\000;\000;\000;" or
        bytes(  -36028797018963969, SIGNED, BE) <> "\255;\127;\255;\255;\255;\255;\255;\255;" or
        bytes(  -36028797018963968, SIGNED, BE) <>      "\128;\000;\000;\000;\000;\000;\000;" or
        bytes(    -281474976710657, SIGNED, BE) <>      "\254;\255;\255;\255;\255;\255;\255;" or
        bytes(    -281474976710656, SIGNED, BE) <>      "\255;\000;\000;\000;\000;\000;\000;" or
        bytes(    -140737488355329, SIGNED, BE) <>      "\255;\127;\255;\255;\255;\255;\255;" or
        bytes(    -140737488355328, SIGNED, BE) <>           "\128;\000;\000;\000;\000;\000;" or
        bytes(      -1099511627777, SIGNED, BE) <>           "\254;\255;\255;\255;\255;\255;" or
        bytes(      -1099511627776, SIGNED, BE) <>           "\255;\000;\000;\000;\000;\000;" or
        bytes(       -549755813889, SIGNED, BE) <>           "\255;\127;\255;\255;\255;\255;" or
        bytes(       -549755813888, SIGNED, BE) <>                "\128;\000;\000;\000;\000;" or
        bytes(         -4294967297, SIGNED, BE) <>                "\254;\255;\255;\255;\255;" or
        bytes(         -4294967296, SIGNED, BE) <>                "\255;\000;\000;\000;\000;" or
        bytes(         -2147483649, SIGNED, BE) <>                "\255;\127;\255;\255;\255;" or
        bytes(         -2147483648, SIGNED, BE) <>                     "\128;\000;\000;\000;" or
        bytes(           -16777217, SIGNED, BE) <>                     "\254;\255;\255;\255;" or
        bytes(           -16777216, SIGNED, BE) <>                     "\255;\000;\000;\000;" or
        bytes(            -8388609, SIGNED, BE) <>                     "\255;\127;\255;\255;" or
        bytes(            -8388608, SIGNED, BE) <>                          "\128;\000;\000;" or
        bytes(              -65537, SIGNED, BE) <>                          "\254;\255;\255;" or
        bytes(              -65536, SIGNED, BE) <>                          "\255;\000;\000;" or
        bytes(              -65281, SIGNED, BE) <>                          "\255;\000;\255;" or
        bytes(              -65280, SIGNED, BE) <>                          "\255;\001;\000;" or
        bytes(              -65025, SIGNED, BE) <>                          "\255;\001;\255;" or
        bytes(              -65024, SIGNED, BE) <>                          "\255;\002;\000;" or
        bytes(              -32770, SIGNED, BE) <>                          "\255;\127;\254;" or
        bytes(              -32769, SIGNED, BE) <>                          "\255;\127;\255;" or
        bytes(              -32768, SIGNED, BE) <>                               "\128;\000;" or
        bytes(              -32767, SIGNED, BE) <>                               "\128;\001;" or
        bytes(              -32514, SIGNED, BE) <>                               "\128;\254;" or
        bytes(              -32513, SIGNED, BE) <>                               "\128;\255;" or
        bytes(              -32512, SIGNED, BE) <>                               "\129;\000;" or
        bytes(              -32511, SIGNED, BE) <>                               "\129;\001;" or
        bytes(              -32258, SIGNED, BE) <>                               "\129;\254;" or
        bytes(              -32257, SIGNED, BE) <>                               "\129;\255;" or
        bytes(              -32256, SIGNED, BE) <>                               "\130;\000;" or
        bytes(              -32255, SIGNED, BE) <>                               "\130;\001;" or
        bytes(                -514, SIGNED, BE) <>                               "\253;\254;" or
        bytes(                -513, SIGNED, BE) <>                               "\253;\255;" or
        bytes(                -512, SIGNED, BE) <>                               "\254;\000;" or
        bytes(                -511, SIGNED, BE) <>                               "\254;\001;" or
        bytes(                -258, SIGNED, BE) <>                               "\254;\254;" or
        bytes(                -257, SIGNED, BE) <>                               "\254;\255;" or
        bytes(                -256, SIGNED, BE) <>                               "\255;\000;" or
        bytes(                -255, SIGNED, BE) <>                               "\255;\001;" or
        bytes(                -130, SIGNED, BE) <>                               "\255;\126;" or
        bytes(                -129, SIGNED, BE) <>                               "\255;\127;" or
        bytes(                -128, SIGNED, BE) <>                                    "\128;" or
        bytes(                -127, SIGNED, BE) <>                                    "\129;" or
        bytes(                  -2, SIGNED, BE) <>                                    "\254;" or
        bytes(                  -1, SIGNED, BE) <>                                    "\255;" or
        bytes(                   0, SIGNED, BE) <>                                    "\000;" or
        bytes(                   1, SIGNED, BE) <>                                    "\001;" or
        bytes(                   2, SIGNED, BE) <>                                    "\002;" or
        bytes(                 126, SIGNED, BE) <>                                    "\126;" or
        bytes(                 127, SIGNED, BE) <>                                    "\127;" or
        bytes(                 128, SIGNED, BE) <>                               "\000;\128;" or
        bytes(                 129, SIGNED, BE) <>                               "\000;\129;" or
        bytes(                 254, SIGNED, BE) <>                               "\000;\254;" or
        bytes(                 255, SIGNED, BE) <>                               "\000;\255;" or
        bytes(                 256, SIGNED, BE) <>                               "\001;\000;" or
        bytes(                 257, SIGNED, BE) <>                               "\001;\001;" or
        bytes(                 510, SIGNED, BE) <>                               "\001;\254;" or
        bytes(                 511, SIGNED, BE) <>                               "\001;\255;" or
        bytes(                 512, SIGNED, BE) <>                               "\002;\000;" or
        bytes(                 513, SIGNED, BE) <>                               "\002;\001;" or
        bytes(               32254, SIGNED, BE) <>                               "\125;\254;" or
        bytes(               32255, SIGNED, BE) <>                               "\125;\255;" or
        bytes(               32256, SIGNED, BE) <>                               "\126;\000;" or
        bytes(               32257, SIGNED, BE) <>                               "\126;\001;" or
        bytes(               32510, SIGNED, BE) <>                               "\126;\254;" or
        bytes(               32511, SIGNED, BE) <>                               "\126;\255;" or
        bytes(               32512, SIGNED, BE) <>                               "\127;\000;" or
        bytes(               32513, SIGNED, BE) <>                               "\127;\001;" or
        bytes(               32766, SIGNED, BE) <>                               "\127;\254;" or
        bytes(               32767, SIGNED, BE) <>                               "\127;\255;" or
        bytes(               32768, SIGNED, BE) <>                          "\000;\128;\000;" or
        bytes(               32769, SIGNED, BE) <>                          "\000;\128;\001;" or
        bytes(               65023, SIGNED, BE) <>                          "\000;\253;\255;" or
        bytes(               65024, SIGNED, BE) <>                          "\000;\254;\000;" or
        bytes(               65279, SIGNED, BE) <>                          "\000;\254;\255;" or
        bytes(               65280, SIGNED, BE) <>                          "\000;\255;\000;" or
        bytes(               65535, SIGNED, BE) <>                          "\000;\255;\255;" or
        bytes(               65536, SIGNED, BE) <>                          "\001;\000;\000;" or
        bytes(             8388607, SIGNED, BE) <>                          "\127;\255;\255;" or
        bytes(             8388608, SIGNED, BE) <>                     "\000;\128;\000;\000;" or
        bytes(            16777215, SIGNED, BE) <>                     "\000;\255;\255;\255;" or
        bytes(            16777216, SIGNED, BE) <>                     "\001;\000;\000;\000;" or
        bytes(          2147483647, SIGNED, BE) <>                     "\127;\255;\255;\255;" or
        bytes(          2147483648, SIGNED, BE) <>                "\000;\128;\000;\000;\000;" or
        bytes(          4294967295, SIGNED, BE) <>                "\000;\255;\255;\255;\255;" or
        bytes(          4294967296, SIGNED, BE) <>                "\001;\000;\000;\000;\000;" or
        bytes(        549755813887, SIGNED, BE) <>                "\127;\255;\255;\255;\255;" or
        bytes(        549755813888, SIGNED, BE) <>           "\000;\128;\000;\000;\000;\000;" or
        bytes(       1099511627775, SIGNED, BE) <>           "\000;\255;\255;\255;\255;\255;" or
        bytes(       1099511627776, SIGNED, BE) <>           "\001;\000;\000;\000;\000;\000;" or
        bytes(     140737488355327, SIGNED, BE) <>           "\127;\255;\255;\255;\255;\255;" or
        bytes(     140737488355328, SIGNED, BE) <>      "\000;\128;\000;\000;\000;\000;\000;" or
        bytes(     281474976710655, SIGNED, BE) <>      "\000;\255;\255;\255;\255;\255;\255;" or
        bytes(     281474976710656, SIGNED, BE) <>      "\001;\000;\000;\000;\000;\000;\000;" or
        bytes(   36028797018963967, SIGNED, BE) <>      "\127;\255;\255;\255;\255;\255;\255;" or
        bytes(   36028797018963968, SIGNED, BE) <> "\000;\128;\000;\000;\000;\000;\000;\000;" or
        bytes(   72057594037927935, SIGNED, BE) <> "\000;\255;\255;\255;\255;\255;\255;\255;" or
        bytes(   72057594037927936, SIGNED, BE) <> "\001;\000;\000;\000;\000;\000;\000;\000;" or
        bytes( 9223372036854775807, SIGNED, BE) <> "\127;\255;\255;\255;\255;\255;\255;\255;" then
      writeln("Conversion of integer to big endian byte string does not work correct.");
      okay := FALSE;
    end if;

    if  bytes(               258, SIGNED, BE) <>                   "\1;\2;" or
        bytes(             66051, SIGNED, BE) <>                "\1;\2;\3;" or
        bytes(          16909060, SIGNED, BE) <>             "\1;\2;\3;\4;" or
        bytes(        4328719365, SIGNED, BE) <>          "\1;\2;\3;\4;\5;" or
        bytes(     1108152157446, SIGNED, BE) <>       "\1;\2;\3;\4;\5;\6;" or
        bytes(   283686952306183, SIGNED, BE) <>    "\1;\2;\3;\4;\5;\6;\7;" or
        bytes( 72623859790382856, SIGNED, BE) <> "\1;\2;\3;\4;\5;\6;\7;\8;" or
        bytes(               513, SIGNED, BE) <>                   "\2;\1;" or
        bytes(            197121, SIGNED, BE) <>                "\3;\2;\1;" or
        bytes(          67305985, SIGNED, BE) <>             "\4;\3;\2;\1;" or
        bytes(       21542142465, SIGNED, BE) <>          "\5;\4;\3;\2;\1;" or
        bytes(     6618611909121, SIGNED, BE) <>       "\6;\5;\4;\3;\2;\1;" or
        bytes(  1976943448883713, SIGNED, BE) <>    "\7;\6;\5;\4;\3;\2;\1;" or
        bytes(578437695752307201, SIGNED, BE) <> "\8;\7;\6;\5;\4;\3;\2;\1;" then
      writeln("Conversion of integer to big endian byte string does not work correct.");
      okay := FALSE;
    end if;

    if  bytes(              -255, SIGNED, BE) <>                   "\255;\1;" or
        bytes(            -65278, SIGNED, BE) <>                "\255;\1;\2;" or
        bytes(         -16711165, SIGNED, BE) <>             "\255;\1;\2;\3;" or
        bytes(       -4278058236, SIGNED, BE) <>          "\255;\1;\2;\3;\4;" or
        bytes(    -1095182908411, SIGNED, BE) <>       "\255;\1;\2;\3;\4;\5;" or
        bytes(  -280366824553210, SIGNED, BE) <>    "\255;\1;\2;\3;\4;\5;\6;" or
        bytes(-71773907085621753, SIGNED, BE) <> "\255;\1;\2;\3;\4;\5;\6;\7;" or
        bytes(              -255, SIGNED, BE) <>                   "\255;\1;" or
        bytes(            -65023, SIGNED, BE) <>                "\255;\2;\1;" or
        bytes(         -16580095, SIGNED, BE) <>             "\255;\3;\2;\1;" or
        bytes(       -4227661311, SIGNED, BE) <>          "\255;\4;\3;\2;\1;" or
        bytes(    -1077969485311, SIGNED, BE) <>       "\255;\5;\4;\3;\2;\1;" or
        bytes(  -274856364801535, SIGNED, BE) <>    "\255;\6;\5;\4;\3;\2;\1;" or
        bytes(-70080650589044223, SIGNED, BE) <> "\255;\7;\6;\5;\4;\3;\2;\1;" then
      writeln("Conversion of integer to big endian byte string does not work correct.");
      okay := FALSE;
    end if;

    if  bytes(                  0, UNSIGNED, BE) <>                                    "\000;" or
        bytes(                  1, UNSIGNED, BE) <>                                    "\001;" or
        bytes(                  2, UNSIGNED, BE) <>                                    "\002;" or
        bytes(                126, UNSIGNED, BE) <>                                    "\126;" or
        bytes(                127, UNSIGNED, BE) <>                                    "\127;" or
        bytes(                128, UNSIGNED, BE) <>                                    "\128;" or
        bytes(                129, UNSIGNED, BE) <>                                    "\129;" or
        bytes(                254, UNSIGNED, BE) <>                                    "\254;" or
        bytes(                255, UNSIGNED, BE) <>                                    "\255;" or
        bytes(                256, UNSIGNED, BE) <>                               "\001;\000;" or
        bytes(                257, UNSIGNED, BE) <>                               "\001;\001;" or
        bytes(                510, UNSIGNED, BE) <>                               "\001;\254;" or
        bytes(                511, UNSIGNED, BE) <>                               "\001;\255;" or
        bytes(                512, UNSIGNED, BE) <>                               "\002;\000;" or
        bytes(                513, UNSIGNED, BE) <>                               "\002;\001;" or
        bytes(              32254, UNSIGNED, BE) <>                               "\125;\254;" or
        bytes(              32255, UNSIGNED, BE) <>                               "\125;\255;" or
        bytes(              32256, UNSIGNED, BE) <>                               "\126;\000;" or
        bytes(              32257, UNSIGNED, BE) <>                               "\126;\001;" or
        bytes(              32510, UNSIGNED, BE) <>                               "\126;\254;" or
        bytes(              32511, UNSIGNED, BE) <>                               "\126;\255;" or
        bytes(              32512, UNSIGNED, BE) <>                               "\127;\000;" or
        bytes(              32513, UNSIGNED, BE) <>                               "\127;\001;" or
        bytes(              32766, UNSIGNED, BE) <>                               "\127;\254;" or
        bytes(              32767, UNSIGNED, BE) <>                               "\127;\255;" or
        bytes(              32768, UNSIGNED, BE) <>                               "\128;\000;" or
        bytes(              32769, UNSIGNED, BE) <>                               "\128;\001;" or
        bytes(              65023, UNSIGNED, BE) <>                               "\253;\255;" or
        bytes(              65024, UNSIGNED, BE) <>                               "\254;\000;" or
        bytes(              65279, UNSIGNED, BE) <>                               "\254;\255;" or
        bytes(              65280, UNSIGNED, BE) <>                               "\255;\000;" or
        bytes(              65535, UNSIGNED, BE) <>                               "\255;\255;" or
        bytes(              65536, UNSIGNED, BE) <>                          "\001;\000;\000;" or
        bytes(            8388607, UNSIGNED, BE) <>                          "\127;\255;\255;" or
        bytes(            8388608, UNSIGNED, BE) <>                          "\128;\000;\000;" or
        bytes(           16777215, UNSIGNED, BE) <>                          "\255;\255;\255;" or
        bytes(           16777216, UNSIGNED, BE) <>                     "\001;\000;\000;\000;" or
        bytes(         2147483647, UNSIGNED, BE) <>                     "\127;\255;\255;\255;" or
        bytes(         2147483648, UNSIGNED, BE) <>                     "\128;\000;\000;\000;" or
        bytes(         4294967295, UNSIGNED, BE) <>                     "\255;\255;\255;\255;" or
        bytes(         4294967296, UNSIGNED, BE) <>                "\001;\000;\000;\000;\000;" or
        bytes(       549755813887, UNSIGNED, BE) <>                "\127;\255;\255;\255;\255;" or
        bytes(       549755813888, UNSIGNED, BE) <>                "\128;\000;\000;\000;\000;" or
        bytes(      1099511627775, UNSIGNED, BE) <>                "\255;\255;\255;\255;\255;" or
        bytes(      1099511627776, UNSIGNED, BE) <>           "\001;\000;\000;\000;\000;\000;" or
        bytes(    140737488355327, UNSIGNED, BE) <>           "\127;\255;\255;\255;\255;\255;" or
        bytes(    140737488355328, UNSIGNED, BE) <>           "\128;\000;\000;\000;\000;\000;" or
        bytes(    281474976710655, UNSIGNED, BE) <>           "\255;\255;\255;\255;\255;\255;" or
        bytes(    281474976710656, UNSIGNED, BE) <>      "\001;\000;\000;\000;\000;\000;\000;" or
        bytes(  36028797018963967, UNSIGNED, BE) <>      "\127;\255;\255;\255;\255;\255;\255;" or
        bytes(  36028797018963968, UNSIGNED, BE) <>      "\128;\000;\000;\000;\000;\000;\000;" or
        bytes(  72057594037927935, UNSIGNED, BE) <>      "\255;\255;\255;\255;\255;\255;\255;" or
        bytes(  72057594037927936, UNSIGNED, BE) <> "\001;\000;\000;\000;\000;\000;\000;\000;" or
        bytes(9223372036854775807, UNSIGNED, BE) <> "\127;\255;\255;\255;\255;\255;\255;\255;" then
      writeln("Conversion of integer to unsigned big endian byte string does not work correct.");
      okay := FALSE;
    end if;

    if  bytes(               258, UNSIGNED, BE) <>                   "\1;\2;" or
        bytes(             66051, UNSIGNED, BE) <>                "\1;\2;\3;" or
        bytes(          16909060, UNSIGNED, BE) <>             "\1;\2;\3;\4;" or
        bytes(        4328719365, UNSIGNED, BE) <>          "\1;\2;\3;\4;\5;" or
        bytes(     1108152157446, UNSIGNED, BE) <>       "\1;\2;\3;\4;\5;\6;" or
        bytes(   283686952306183, UNSIGNED, BE) <>    "\1;\2;\3;\4;\5;\6;\7;" or
        bytes( 72623859790382856, UNSIGNED, BE) <> "\1;\2;\3;\4;\5;\6;\7;\8;" or
        bytes(               513, UNSIGNED, BE) <>                   "\2;\1;" or
        bytes(            197121, UNSIGNED, BE) <>                "\3;\2;\1;" or
        bytes(          67305985, UNSIGNED, BE) <>             "\4;\3;\2;\1;" or
        bytes(       21542142465, UNSIGNED, BE) <>          "\5;\4;\3;\2;\1;" or
        bytes(     6618611909121, UNSIGNED, BE) <>       "\6;\5;\4;\3;\2;\1;" or
        bytes(  1976943448883713, UNSIGNED, BE) <>    "\7;\6;\5;\4;\3;\2;\1;" or
        bytes(578437695752307201, UNSIGNED, BE) <> "\8;\7;\6;\5;\4;\3;\2;\1;" then
      writeln("Conversion of integer to unsigned big endian byte string does not work correct.");
      okay := FALSE;
    end if;

    if  bytes(            65281, UNSIGNED, BE) <>                "\255;\1;" or
        bytes(         16711938, UNSIGNED, BE) <>             "\255;\1;\2;" or
        bytes(       4278256131, UNSIGNED, BE) <>          "\255;\1;\2;\3;" or
        bytes(    1095233569540, UNSIGNED, BE) <>       "\255;\1;\2;\3;\4;" or
        bytes(  280379793802245, UNSIGNED, BE) <>    "\255;\1;\2;\3;\4;\5;" or
        bytes(71777227213374726, UNSIGNED, BE) <> "\255;\1;\2;\3;\4;\5;\6;" or
        bytes(            65281, UNSIGNED, BE) <>                "\255;\1;" or
        bytes(         16712193, UNSIGNED, BE) <>             "\255;\2;\1;" or
        bytes(       4278387201, UNSIGNED, BE) <>          "\255;\3;\2;\1;" or
        bytes(    1095283966465, UNSIGNED, BE) <>       "\255;\4;\3;\2;\1;" or
        bytes(  280397007225345, UNSIGNED, BE) <>    "\255;\5;\4;\3;\2;\1;" or
        bytes(71782737673126401, UNSIGNED, BE) <> "\255;\6;\5;\4;\3;\2;\1;" then
      writeln("Conversion of integer to unsigned big endian byte string does not work correct.");
      okay := FALSE;
    end if;

    if  bytes(1413829460,          SIGNED,   BE) <> "TEST"     or
        bytes(1330331993,          SIGNED,   BE) <> "OKAY"     or
        bytes(-338762715347,       SIGNED,   BE) <> "± +/-"    or
        bytes(760748912429,        SIGNED,   BE) <> "\0;± +/-" or
        bytes(760748912429,        UNSIGNED, BE) <> "± +/-"    or
        bytes(5292891159410142067, UNSIGNED, BE) <> "It works" then
      writeln("Conversion of bigInteger to byte string does not work correct.");
      okay := FALSE;
    end if;

    if  not raisesRangeError(bytes(        integer.first,  UNSIGNED, BE)) or
        not raisesRangeError(bytes(                   -1,  UNSIGNED, BE)) or
        not raisesRangeError(bytes(intExpr(integer.first), UNSIGNED, BE)) or
        not raisesRangeError(bytes(intExpr(           -1), UNSIGNED, BE)) then
      writeln("Conversion of negative integer to unsigned big endian byte string does not raise RANGE_ERROR.");
      okay := FALSE;
    end if;

    if okay then
      writeln("Conversion of integer to big endian byte string works correct.");
    else
      writeln(" ***** Conversion of integer to big endian byte string does not work correct.");
      writeln;
    end if;
  end func;


const proc: check_bytesLe is func
  local
    var boolean: okay is TRUE;
  begin
    if  bytes(           INT64_MIN, SIGNED, LE) <> "\000;\000;\000;\000;\000;\000;\000;\128;" or
        bytes(-9223372036854775807, SIGNED, LE) <> "\001;\000;\000;\000;\000;\000;\000;\128;" or
        bytes(  -72057594037927937, SIGNED, LE) <> "\255;\255;\255;\255;\255;\255;\255;\254;" or
        bytes(  -72057594037927936, SIGNED, LE) <> "\000;\000;\000;\000;\000;\000;\000;\255;" or
        bytes(  -36028797018963969, SIGNED, LE) <> "\255;\255;\255;\255;\255;\255;\127;\255;" or
        bytes(  -36028797018963968, SIGNED, LE) <> "\000;\000;\000;\000;\000;\000;\128;"      or
        bytes(    -281474976710657, SIGNED, LE) <> "\255;\255;\255;\255;\255;\255;\254;"      or
        bytes(    -281474976710656, SIGNED, LE) <> "\000;\000;\000;\000;\000;\000;\255;"      or
        bytes(    -140737488355329, SIGNED, LE) <> "\255;\255;\255;\255;\255;\127;\255;"      or
        bytes(    -140737488355328, SIGNED, LE) <> "\000;\000;\000;\000;\000;\128;"           or
        bytes(      -1099511627777, SIGNED, LE) <> "\255;\255;\255;\255;\255;\254;"           or
        bytes(      -1099511627776, SIGNED, LE) <> "\000;\000;\000;\000;\000;\255;"           or
        bytes(       -549755813889, SIGNED, LE) <> "\255;\255;\255;\255;\127;\255;"           or
        bytes(       -549755813888, SIGNED, LE) <> "\000;\000;\000;\000;\128;"                or
        bytes(         -4294967297, SIGNED, LE) <> "\255;\255;\255;\255;\254;"                or
        bytes(         -4294967296, SIGNED, LE) <> "\000;\000;\000;\000;\255;"                or
        bytes(         -2147483649, SIGNED, LE) <> "\255;\255;\255;\127;\255;"                or
        bytes(         -2147483648, SIGNED, LE) <> "\000;\000;\000;\128;"                     or
        bytes(           -16777217, SIGNED, LE) <> "\255;\255;\255;\254;"                     or
        bytes(           -16777216, SIGNED, LE) <> "\000;\000;\000;\255;"                     or
        bytes(            -8388609, SIGNED, LE) <> "\255;\255;\127;\255;"                     or
        bytes(            -8388608, SIGNED, LE) <> "\000;\000;\128;"                          or
        bytes(              -65537, SIGNED, LE) <> "\255;\255;\254;"                          or
        bytes(              -65536, SIGNED, LE) <> "\000;\000;\255;"                          or
        bytes(              -65281, SIGNED, LE) <> "\255;\000;\255;"                          or
        bytes(              -65280, SIGNED, LE) <> "\000;\001;\255;"                          or
        bytes(              -65025, SIGNED, LE) <> "\255;\001;\255;"                          or
        bytes(              -65024, SIGNED, LE) <> "\000;\002;\255;"                          or
        bytes(              -32770, SIGNED, LE) <> "\254;\127;\255;"                          or
        bytes(              -32769, SIGNED, LE) <> "\255;\127;\255;"                          or
        bytes(              -32768, SIGNED, LE) <> "\000;\128;"                               or
        bytes(              -32767, SIGNED, LE) <> "\001;\128;"                               or
        bytes(              -32514, SIGNED, LE) <> "\254;\128;"                               or
        bytes(              -32513, SIGNED, LE) <> "\255;\128;"                               or
        bytes(              -32512, SIGNED, LE) <> "\000;\129;"                               or
        bytes(              -32511, SIGNED, LE) <> "\001;\129;"                               or
        bytes(              -32258, SIGNED, LE) <> "\254;\129;"                               or
        bytes(              -32257, SIGNED, LE) <> "\255;\129;"                               or
        bytes(              -32256, SIGNED, LE) <> "\000;\130;"                               or
        bytes(              -32255, SIGNED, LE) <> "\001;\130;"                               or
        bytes(                -514, SIGNED, LE) <> "\254;\253;"                               or
        bytes(                -513, SIGNED, LE) <> "\255;\253;"                               or
        bytes(                -512, SIGNED, LE) <> "\000;\254;"                               or
        bytes(                -511, SIGNED, LE) <> "\001;\254;"                               or
        bytes(                -258, SIGNED, LE) <> "\254;\254;"                               or
        bytes(                -257, SIGNED, LE) <> "\255;\254;"                               or
        bytes(                -256, SIGNED, LE) <> "\000;\255;"                               or
        bytes(                -255, SIGNED, LE) <> "\001;\255;"                               or
        bytes(                -130, SIGNED, LE) <> "\126;\255;"                               or
        bytes(                -129, SIGNED, LE) <> "\127;\255;"                               or
        bytes(                -128, SIGNED, LE) <> "\128;"                                    or
        bytes(                -127, SIGNED, LE) <> "\129;"                                    or
        bytes(                  -2, SIGNED, LE) <> "\254;"                                    or
        bytes(                  -1, SIGNED, LE) <> "\255;"                                    or
        bytes(                   0, SIGNED, LE) <> "\000;"                                    or
        bytes(                   1, SIGNED, LE) <> "\001;"                                    or
        bytes(                   2, SIGNED, LE) <> "\002;"                                    or
        bytes(                 126, SIGNED, LE) <> "\126;"                                    or
        bytes(                 127, SIGNED, LE) <> "\127;"                                    or
        bytes(                 128, SIGNED, LE) <> "\128;\000;"                               or
        bytes(                 129, SIGNED, LE) <> "\129;\000;"                               or
        bytes(                 254, SIGNED, LE) <> "\254;\000;"                               or
        bytes(                 255, SIGNED, LE) <> "\255;\000;"                               or
        bytes(                 256, SIGNED, LE) <> "\000;\001;"                               or
        bytes(                 257, SIGNED, LE) <> "\001;\001;"                               or
        bytes(                 510, SIGNED, LE) <> "\254;\001;"                               or
        bytes(                 511, SIGNED, LE) <> "\255;\001;"                               or
        bytes(                 512, SIGNED, LE) <> "\000;\002;"                               or
        bytes(                 513, SIGNED, LE) <> "\001;\002;"                               or
        bytes(               32254, SIGNED, LE) <> "\254;\125;"                               or
        bytes(               32255, SIGNED, LE) <> "\255;\125;"                               or
        bytes(               32256, SIGNED, LE) <> "\000;\126;"                               or
        bytes(               32257, SIGNED, LE) <> "\001;\126;"                               or
        bytes(               32510, SIGNED, LE) <> "\254;\126;"                               or
        bytes(               32511, SIGNED, LE) <> "\255;\126;"                               or
        bytes(               32512, SIGNED, LE) <> "\000;\127;"                               or
        bytes(               32513, SIGNED, LE) <> "\001;\127;"                               or
        bytes(               32766, SIGNED, LE) <> "\254;\127;"                               or
        bytes(               32767, SIGNED, LE) <> "\255;\127;"                               or
        bytes(               32768, SIGNED, LE) <> "\000;\128;\000;"                          or
        bytes(               32769, SIGNED, LE) <> "\001;\128;\000;"                          or
        bytes(               65023, SIGNED, LE) <> "\255;\253;\000;"                          or
        bytes(               65024, SIGNED, LE) <> "\000;\254;\000;"                          or
        bytes(               65279, SIGNED, LE) <> "\255;\254;\000;"                          or
        bytes(               65280, SIGNED, LE) <> "\000;\255;\000;"                          or
        bytes(               65535, SIGNED, LE) <> "\255;\255;\000;"                          or
        bytes(               65536, SIGNED, LE) <> "\000;\000;\001;"                          or
        bytes(             8388607, SIGNED, LE) <> "\255;\255;\127;"                          or
        bytes(             8388608, SIGNED, LE) <> "\000;\000;\128;\000;"                     or
        bytes(            16777215, SIGNED, LE) <> "\255;\255;\255;\000;"                     or
        bytes(            16777216, SIGNED, LE) <> "\000;\000;\000;\001;"                     or
        bytes(          2147483647, SIGNED, LE) <> "\255;\255;\255;\127;"                     or
        bytes(          2147483648, SIGNED, LE) <> "\000;\000;\000;\128;\000;"                or
        bytes(          4294967295, SIGNED, LE) <> "\255;\255;\255;\255;\000;"                or
        bytes(          4294967296, SIGNED, LE) <> "\000;\000;\000;\000;\001;"                or
        bytes(        549755813887, SIGNED, LE) <> "\255;\255;\255;\255;\127;"                or
        bytes(        549755813888, SIGNED, LE) <> "\000;\000;\000;\000;\128;\000;"           or
        bytes(       1099511627775, SIGNED, LE) <> "\255;\255;\255;\255;\255;\000;"           or
        bytes(       1099511627776, SIGNED, LE) <> "\000;\000;\000;\000;\000;\001;"           or
        bytes(     140737488355327, SIGNED, LE) <> "\255;\255;\255;\255;\255;\127;"           or
        bytes(     140737488355328, SIGNED, LE) <> "\000;\000;\000;\000;\000;\128;\000;"      or
        bytes(     281474976710655, SIGNED, LE) <> "\255;\255;\255;\255;\255;\255;\000;"      or
        bytes(     281474976710656, SIGNED, LE) <> "\000;\000;\000;\000;\000;\000;\001;"      or
        bytes(   36028797018963967, SIGNED, LE) <> "\255;\255;\255;\255;\255;\255;\127;"      or
        bytes(   36028797018963968, SIGNED, LE) <> "\000;\000;\000;\000;\000;\000;\128;\000;" or
        bytes(   72057594037927935, SIGNED, LE) <> "\255;\255;\255;\255;\255;\255;\255;\000;" or
        bytes(   72057594037927936, SIGNED, LE) <> "\000;\000;\000;\000;\000;\000;\000;\001;" or
        bytes( 9223372036854775807, SIGNED, LE) <> "\255;\255;\255;\255;\255;\255;\255;\127;" then
      writeln("Conversion of integer to little endian byte string does not work correct.");
      okay := FALSE;
    end if;

    if  bytes(               258, SIGNED, LE) <> "\2;\1;"                   or
        bytes(             66051, SIGNED, LE) <> "\3;\2;\1;"                or
        bytes(          16909060, SIGNED, LE) <> "\4;\3;\2;\1;"             or
        bytes(        4328719365, SIGNED, LE) <> "\5;\4;\3;\2;\1;"          or
        bytes(     1108152157446, SIGNED, LE) <> "\6;\5;\4;\3;\2;\1;"       or
        bytes(   283686952306183, SIGNED, LE) <> "\7;\6;\5;\4;\3;\2;\1;"    or
        bytes( 72623859790382856, SIGNED, LE) <> "\8;\7;\6;\5;\4;\3;\2;\1;" or
        bytes(               513, SIGNED, LE) <> "\1;\2;"                   or
        bytes(            197121, SIGNED, LE) <> "\1;\2;\3;"                or
        bytes(          67305985, SIGNED, LE) <> "\1;\2;\3;\4;"             or
        bytes(       21542142465, SIGNED, LE) <> "\1;\2;\3;\4;\5;"          or
        bytes(     6618611909121, SIGNED, LE) <> "\1;\2;\3;\4;\5;\6;"       or
        bytes(  1976943448883713, SIGNED, LE) <> "\1;\2;\3;\4;\5;\6;\7;"    or
        bytes(578437695752307201, SIGNED, LE) <> "\1;\2;\3;\4;\5;\6;\7;\8;" then
      writeln("Conversion of integer to little endian byte string does not work correct.");
      okay := FALSE;
    end if;

    if  bytes(              -255, SIGNED, LE) <> "\1;\255;"                   or
        bytes(            -65278, SIGNED, LE) <> "\2;\1;\255;"                or
        bytes(         -16711165, SIGNED, LE) <> "\3;\2;\1;\255;"             or
        bytes(       -4278058236, SIGNED, LE) <> "\4;\3;\2;\1;\255;"          or
        bytes(    -1095182908411, SIGNED, LE) <> "\5;\4;\3;\2;\1;\255;"       or
        bytes(  -280366824553210, SIGNED, LE) <> "\6;\5;\4;\3;\2;\1;\255;"    or
        bytes(-71773907085621753, SIGNED, LE) <> "\7;\6;\5;\4;\3;\2;\1;\255;" or
        bytes(              -255, SIGNED, LE) <> "\1;\255;"                   or
        bytes(            -65023, SIGNED, LE) <> "\1;\2;\255;"                or
        bytes(         -16580095, SIGNED, LE) <> "\1;\2;\3;\255;"             or
        bytes(       -4227661311, SIGNED, LE) <> "\1;\2;\3;\4;\255;"          or
        bytes(    -1077969485311, SIGNED, LE) <> "\1;\2;\3;\4;\5;\255;"       or
        bytes(  -274856364801535, SIGNED, LE) <> "\1;\2;\3;\4;\5;\6;\255;"    or
        bytes(-70080650589044223, SIGNED, LE) <> "\1;\2;\3;\4;\5;\6;\7;\255;" then
      writeln("Conversion of integer to little endian byte string does not work correct.");
      okay := FALSE;
    end if;

    if  bytes(                  0, UNSIGNED, LE) <> "\000;"                                    or
        bytes(                  1, UNSIGNED, LE) <> "\001;"                                    or
        bytes(                  2, UNSIGNED, LE) <> "\002;"                                    or
        bytes(                126, UNSIGNED, LE) <> "\126;"                                    or
        bytes(                127, UNSIGNED, LE) <> "\127;"                                    or
        bytes(                128, UNSIGNED, LE) <> "\128;"                                    or
        bytes(                129, UNSIGNED, LE) <> "\129;"                                    or
        bytes(                254, UNSIGNED, LE) <> "\254;"                                    or
        bytes(                255, UNSIGNED, LE) <> "\255;"                                    or
        bytes(                256, UNSIGNED, LE) <> "\000;\001;"                               or
        bytes(                257, UNSIGNED, LE) <> "\001;\001;"                               or
        bytes(                510, UNSIGNED, LE) <> "\254;\001;"                               or
        bytes(                511, UNSIGNED, LE) <> "\255;\001;"                               or
        bytes(                512, UNSIGNED, LE) <> "\000;\002;"                               or
        bytes(                513, UNSIGNED, LE) <> "\001;\002;"                               or
        bytes(              32254, UNSIGNED, LE) <> "\254;\125;"                               or
        bytes(              32255, UNSIGNED, LE) <> "\255;\125;"                               or
        bytes(              32256, UNSIGNED, LE) <> "\000;\126;"                               or
        bytes(              32257, UNSIGNED, LE) <> "\001;\126;"                               or
        bytes(              32510, UNSIGNED, LE) <> "\254;\126;"                               or
        bytes(              32511, UNSIGNED, LE) <> "\255;\126;"                               or
        bytes(              32512, UNSIGNED, LE) <> "\000;\127;"                               or
        bytes(              32513, UNSIGNED, LE) <> "\001;\127;"                               or
        bytes(              32766, UNSIGNED, LE) <> "\254;\127;"                               or
        bytes(              32767, UNSIGNED, LE) <> "\255;\127;"                               or
        bytes(              32768, UNSIGNED, LE) <> "\000;\128;"                               or
        bytes(              32769, UNSIGNED, LE) <> "\001;\128;"                               or
        bytes(              65023, UNSIGNED, LE) <> "\255;\253;"                               or
        bytes(              65024, UNSIGNED, LE) <> "\000;\254;"                               or
        bytes(              65279, UNSIGNED, LE) <> "\255;\254;"                               or
        bytes(              65280, UNSIGNED, LE) <> "\000;\255;"                               or
        bytes(              65535, UNSIGNED, LE) <> "\255;\255;"                               or
        bytes(              65536, UNSIGNED, LE) <> "\000;\000;\001;"                          or
        bytes(            8388607, UNSIGNED, LE) <> "\255;\255;\127;"                          or
        bytes(            8388608, UNSIGNED, LE) <> "\000;\000;\128;"                          or
        bytes(           16777215, UNSIGNED, LE) <> "\255;\255;\255;"                          or
        bytes(           16777216, UNSIGNED, LE) <> "\000;\000;\000;\001;"                     or
        bytes(         2147483647, UNSIGNED, LE) <> "\255;\255;\255;\127;"                     or
        bytes(         2147483648, UNSIGNED, LE) <> "\000;\000;\000;\128;"                     or
        bytes(         4294967295, UNSIGNED, LE) <> "\255;\255;\255;\255;"                     or
        bytes(         4294967296, UNSIGNED, LE) <> "\000;\000;\000;\000;\001;"                or
        bytes(       549755813887, UNSIGNED, LE) <> "\255;\255;\255;\255;\127;"                or
        bytes(       549755813888, UNSIGNED, LE) <> "\000;\000;\000;\000;\128;"                or
        bytes(      1099511627775, UNSIGNED, LE) <> "\255;\255;\255;\255;\255;"                or
        bytes(      1099511627776, UNSIGNED, LE) <> "\000;\000;\000;\000;\000;\001;"           or
        bytes(    140737488355327, UNSIGNED, LE) <> "\255;\255;\255;\255;\255;\127;"           or
        bytes(    140737488355328, UNSIGNED, LE) <> "\000;\000;\000;\000;\000;\128;"           or
        bytes(    281474976710655, UNSIGNED, LE) <> "\255;\255;\255;\255;\255;\255;"           or
        bytes(    281474976710656, UNSIGNED, LE) <> "\000;\000;\000;\000;\000;\000;\001;"      or
        bytes(  36028797018963967, UNSIGNED, LE) <> "\255;\255;\255;\255;\255;\255;\127;"      or
        bytes(  36028797018963968, UNSIGNED, LE) <> "\000;\000;\000;\000;\000;\000;\128;"      or
        bytes(  72057594037927935, UNSIGNED, LE) <> "\255;\255;\255;\255;\255;\255;\255;"      or
        bytes(  72057594037927936, UNSIGNED, LE) <> "\000;\000;\000;\000;\000;\000;\000;\001;" or
        bytes(9223372036854775807, UNSIGNED, LE) <> "\255;\255;\255;\255;\255;\255;\255;\127;" then
      writeln("Conversion of integer to unsigned little endian byte string does not work correct.");
      okay := FALSE;
    end if;

    if  bytes(               258, UNSIGNED, LE) <> "\2;\1;"                   or
        bytes(             66051, UNSIGNED, LE) <> "\3;\2;\1;"                or
        bytes(          16909060, UNSIGNED, LE) <> "\4;\3;\2;\1;"             or
        bytes(        4328719365, UNSIGNED, LE) <> "\5;\4;\3;\2;\1;"          or
        bytes(     1108152157446, UNSIGNED, LE) <> "\6;\5;\4;\3;\2;\1;"       or
        bytes(   283686952306183, UNSIGNED, LE) <> "\7;\6;\5;\4;\3;\2;\1;"    or
        bytes( 72623859790382856, UNSIGNED, LE) <> "\8;\7;\6;\5;\4;\3;\2;\1;" or
        bytes(               513, UNSIGNED, LE) <> "\1;\2;"                   or
        bytes(            197121, UNSIGNED, LE) <> "\1;\2;\3;"                or
        bytes(          67305985, UNSIGNED, LE) <> "\1;\2;\3;\4;"             or
        bytes(       21542142465, UNSIGNED, LE) <> "\1;\2;\3;\4;\5;"          or
        bytes(     6618611909121, UNSIGNED, LE) <> "\1;\2;\3;\4;\5;\6;"       or
        bytes(  1976943448883713, UNSIGNED, LE) <> "\1;\2;\3;\4;\5;\6;\7;"    or
        bytes(578437695752307201, UNSIGNED, LE) <> "\1;\2;\3;\4;\5;\6;\7;\8;" then
      writeln("Conversion of integer to unsigned little endian byte string does not work correct.");
      okay := FALSE;
    end if;

    if  bytes(            65281, UNSIGNED, LE) <> "\1;\255;"                or
        bytes(         16711938, UNSIGNED, LE) <> "\2;\1;\255;"             or
        bytes(       4278256131, UNSIGNED, LE) <> "\3;\2;\1;\255;"          or
        bytes(    1095233569540, UNSIGNED, LE) <> "\4;\3;\2;\1;\255;"       or
        bytes(  280379793802245, UNSIGNED, LE) <> "\5;\4;\3;\2;\1;\255;"    or
        bytes(71777227213374726, UNSIGNED, LE) <> "\6;\5;\4;\3;\2;\1;\255;" or
        bytes(            65281, UNSIGNED, LE) <> "\1;\255;"                or
        bytes(         16712193, UNSIGNED, LE) <> "\1;\2;\255;"             or
        bytes(       4278387201, UNSIGNED, LE) <> "\1;\2;\3;\255;"          or
        bytes(    1095283966465, UNSIGNED, LE) <> "\1;\2;\3;\4;\255;"       or
        bytes(  280397007225345, UNSIGNED, LE) <> "\1;\2;\3;\4;\5;\255;"    or
        bytes(71782737673126401, UNSIGNED, LE) <> "\1;\2;\3;\4;\5;\6;\255;" then
      writeln("Conversion of integer to unsigned little endian byte string does not work correct.");
      okay := FALSE;
    end if;

    if  bytes(1414743380,          SIGNED,   LE) <> "TEST"     or
        bytes(1497451343,          SIGNED,   LE) <> "OKAY"     or
        bytes(-338762584277,       SIGNED,   LE) <> "+/- ±"    or
        bytes(760749043499,        SIGNED,   LE) <> "+/- ±\0;" or
        bytes(760749043499,        UNSIGNED, LE) <> "+/- ±"    or
        bytes(8316866959935304777, UNSIGNED, LE) <> "It works" then
      writeln("Conversion of bigInteger to byte string does not work correct.");
      okay := FALSE;
    end if;

    if  not raisesRangeError(bytes(        integer.first,  UNSIGNED, LE)) or
        not raisesRangeError(bytes(                   -1,  UNSIGNED, LE)) or
        not raisesRangeError(bytes(intExpr(integer.first), UNSIGNED, LE)) or
        not raisesRangeError(bytes(intExpr(           -1), UNSIGNED, LE)) then
      writeln("Conversion of negative integer to unsigned little endian byte string does not raise RANGE_ERROR.");
      okay := FALSE;
    end if;

    if okay then
      writeln("Conversion of integer to little endian byte string works correct.");
    else
      writeln(" ***** Conversion of integer to little endian byte string does not work correct.");
      writeln;
    end if;
  end func;


const proc: check_bytesBe2Int is func
  local
    var boolean: okay is TRUE;
  begin
    if  bytes2Int("\128;\000;\000;\000;\000;\000;\000;\000;", SIGNED, BE) <>            INT64_MIN or
        bytes2Int("\128;\000;\000;\000;\000;\000;\000;\001;", SIGNED, BE) <> -9223372036854775807 or
        bytes2Int("\254;\255;\255;\255;\255;\255;\255;\255;", SIGNED, BE) <>   -72057594037927937 or
        bytes2Int("\255;\000;\000;\000;\000;\000;\000;\000;", SIGNED, BE) <>   -72057594037927936 or
        bytes2Int("\255;\127;\255;\255;\255;\255;\255;\255;", SIGNED, BE) <>   -36028797018963969 or
        bytes2Int(     "\128;\000;\000;\000;\000;\000;\000;", SIGNED, BE) <>   -36028797018963968 or
        bytes2Int(     "\254;\255;\255;\255;\255;\255;\255;", SIGNED, BE) <>     -281474976710657 or
        bytes2Int(     "\255;\000;\000;\000;\000;\000;\000;", SIGNED, BE) <>     -281474976710656 or
        bytes2Int(     "\255;\127;\255;\255;\255;\255;\255;", SIGNED, BE) <>     -140737488355329 or
        bytes2Int(          "\128;\000;\000;\000;\000;\000;", SIGNED, BE) <>     -140737488355328 or
        bytes2Int(          "\254;\255;\255;\255;\255;\255;", SIGNED, BE) <>       -1099511627777 or
        bytes2Int(          "\255;\000;\000;\000;\000;\000;", SIGNED, BE) <>       -1099511627776 or
        bytes2Int(          "\255;\127;\255;\255;\255;\255;", SIGNED, BE) <>        -549755813889 or
        bytes2Int(               "\128;\000;\000;\000;\000;", SIGNED, BE) <>        -549755813888 or
        bytes2Int(               "\254;\255;\255;\255;\255;", SIGNED, BE) <>          -4294967297 or
        bytes2Int(               "\255;\000;\000;\000;\000;", SIGNED, BE) <>          -4294967296 or
        bytes2Int(               "\255;\127;\255;\255;\255;", SIGNED, BE) <>          -2147483649 or
        bytes2Int(                    "\128;\000;\000;\000;", SIGNED, BE) <>          -2147483648 or
        bytes2Int(                    "\254;\255;\255;\255;", SIGNED, BE) <>            -16777217 or
        bytes2Int(                    "\255;\000;\000;\000;", SIGNED, BE) <>            -16777216 or
        bytes2Int(                    "\255;\127;\255;\255;", SIGNED, BE) <>             -8388609 or
        bytes2Int(                         "\128;\000;\000;", SIGNED, BE) <>             -8388608 or
        bytes2Int(                         "\254;\255;\255;", SIGNED, BE) <>               -65537 or
        bytes2Int(                         "\255;\000;\000;", SIGNED, BE) <>               -65536 or
        bytes2Int(                         "\255;\000;\255;", SIGNED, BE) <>               -65281 or
        bytes2Int(                         "\255;\001;\000;", SIGNED, BE) <>               -65280 or
        bytes2Int(                         "\255;\001;\255;", SIGNED, BE) <>               -65025 or
        bytes2Int(                         "\255;\002;\000;", SIGNED, BE) <>               -65024 or
        bytes2Int(                         "\255;\127;\254;", SIGNED, BE) <>               -32770 or
        bytes2Int(                         "\255;\127;\255;", SIGNED, BE) <>               -32769 or
        bytes2Int(                              "\128;\000;", SIGNED, BE) <>               -32768 or
        bytes2Int(                              "\128;\001;", SIGNED, BE) <>               -32767 or
        bytes2Int(                              "\128;\254;", SIGNED, BE) <>               -32514 or
        bytes2Int(                              "\128;\255;", SIGNED, BE) <>               -32513 or
        bytes2Int(                              "\129;\000;", SIGNED, BE) <>               -32512 or
        bytes2Int(                              "\129;\001;", SIGNED, BE) <>               -32511 or
        bytes2Int(                              "\129;\254;", SIGNED, BE) <>               -32258 or
        bytes2Int(                              "\129;\255;", SIGNED, BE) <>               -32257 or
        bytes2Int(                              "\130;\000;", SIGNED, BE) <>               -32256 or
        bytes2Int(                              "\130;\001;", SIGNED, BE) <>               -32255 or
        bytes2Int(                              "\253;\254;", SIGNED, BE) <>                 -514 or
        bytes2Int(                              "\253;\255;", SIGNED, BE) <>                 -513 or
        bytes2Int(                              "\254;\000;", SIGNED, BE) <>                 -512 or
        bytes2Int(                              "\254;\001;", SIGNED, BE) <>                 -511 or
        bytes2Int(                              "\254;\254;", SIGNED, BE) <>                 -258 or
        bytes2Int(                              "\254;\255;", SIGNED, BE) <>                 -257 or
        bytes2Int(                              "\255;\000;", SIGNED, BE) <>                 -256 or
        bytes2Int(                              "\255;\001;", SIGNED, BE) <>                 -255 or
        bytes2Int(                              "\255;\126;", SIGNED, BE) <>                 -130 or
        bytes2Int(                              "\255;\127;", SIGNED, BE) <>                 -129 or
        bytes2Int(                                   "\128;", SIGNED, BE) <>                 -128 or
        bytes2Int(                                   "\129;", SIGNED, BE) <>                 -127 or
        bytes2Int(                                   "\254;", SIGNED, BE) <>                   -2 or
        bytes2Int(                                   "\255;", SIGNED, BE) <>                   -1 or
        bytes2Int(                                   "\000;", SIGNED, BE) <>                    0 or
        bytes2Int(                                   "\001;", SIGNED, BE) <>                    1 or
        bytes2Int(                                   "\002;", SIGNED, BE) <>                    2 or
        bytes2Int(                                   "\126;", SIGNED, BE) <>                  126 or
        bytes2Int(                                   "\127;", SIGNED, BE) <>                  127 or
        bytes2Int(                              "\000;\128;", SIGNED, BE) <>                  128 or
        bytes2Int(                              "\000;\129;", SIGNED, BE) <>                  129 or
        bytes2Int(                              "\000;\254;", SIGNED, BE) <>                  254 or
        bytes2Int(                              "\000;\255;", SIGNED, BE) <>                  255 or
        bytes2Int(                              "\001;\000;", SIGNED, BE) <>                  256 or
        bytes2Int(                              "\001;\001;", SIGNED, BE) <>                  257 or
        bytes2Int(                              "\001;\254;", SIGNED, BE) <>                  510 or
        bytes2Int(                              "\001;\255;", SIGNED, BE) <>                  511 or
        bytes2Int(                              "\002;\000;", SIGNED, BE) <>                  512 or
        bytes2Int(                              "\002;\001;", SIGNED, BE) <>                  513 or
        bytes2Int(                              "\125;\254;", SIGNED, BE) <>                32254 or
        bytes2Int(                              "\125;\255;", SIGNED, BE) <>                32255 or
        bytes2Int(                              "\126;\000;", SIGNED, BE) <>                32256 or
        bytes2Int(                              "\126;\001;", SIGNED, BE) <>                32257 or
        bytes2Int(                              "\126;\254;", SIGNED, BE) <>                32510 or
        bytes2Int(                              "\126;\255;", SIGNED, BE) <>                32511 or
        bytes2Int(                              "\127;\000;", SIGNED, BE) <>                32512 or
        bytes2Int(                              "\127;\001;", SIGNED, BE) <>                32513 or
        bytes2Int(                              "\127;\254;", SIGNED, BE) <>                32766 or
        bytes2Int(                              "\127;\255;", SIGNED, BE) <>                32767 or
        bytes2Int(                         "\000;\128;\000;", SIGNED, BE) <>                32768 or
        bytes2Int(                         "\000;\128;\001;", SIGNED, BE) <>                32769 or
        bytes2Int(                         "\000;\253;\255;", SIGNED, BE) <>                65023 or
        bytes2Int(                         "\000;\254;\000;", SIGNED, BE) <>                65024 or
        bytes2Int(                         "\000;\254;\255;", SIGNED, BE) <>                65279 or
        bytes2Int(                         "\000;\255;\000;", SIGNED, BE) <>                65280 or
        bytes2Int(                         "\000;\255;\255;", SIGNED, BE) <>                65535 or
        bytes2Int(                         "\001;\000;\000;", SIGNED, BE) <>                65536 or
        bytes2Int(                         "\127;\255;\255;", SIGNED, BE) <>              8388607 or
        bytes2Int(                    "\000;\128;\000;\000;", SIGNED, BE) <>              8388608 or
        bytes2Int(                    "\000;\255;\255;\255;", SIGNED, BE) <>             16777215 or
        bytes2Int(                    "\001;\000;\000;\000;", SIGNED, BE) <>             16777216 or
        bytes2Int(                    "\127;\255;\255;\255;", SIGNED, BE) <>           2147483647 or
        bytes2Int(               "\000;\128;\000;\000;\000;", SIGNED, BE) <>           2147483648 or
        bytes2Int(               "\000;\255;\255;\255;\255;", SIGNED, BE) <>           4294967295 or
        bytes2Int(               "\001;\000;\000;\000;\000;", SIGNED, BE) <>           4294967296 or
        bytes2Int(               "\127;\255;\255;\255;\255;", SIGNED, BE) <>         549755813887 or
        bytes2Int(          "\000;\128;\000;\000;\000;\000;", SIGNED, BE) <>         549755813888 or
        bytes2Int(          "\000;\255;\255;\255;\255;\255;", SIGNED, BE) <>        1099511627775 or
        bytes2Int(          "\001;\000;\000;\000;\000;\000;", SIGNED, BE) <>        1099511627776 or
        bytes2Int(          "\127;\255;\255;\255;\255;\255;", SIGNED, BE) <>      140737488355327 or
        bytes2Int(     "\000;\128;\000;\000;\000;\000;\000;", SIGNED, BE) <>      140737488355328 or
        bytes2Int(     "\000;\255;\255;\255;\255;\255;\255;", SIGNED, BE) <>      281474976710655 or
        bytes2Int(     "\001;\000;\000;\000;\000;\000;\000;", SIGNED, BE) <>      281474976710656 or
        bytes2Int(     "\127;\255;\255;\255;\255;\255;\255;", SIGNED, BE) <>    36028797018963967 or
        bytes2Int("\000;\128;\000;\000;\000;\000;\000;\000;", SIGNED, BE) <>    36028797018963968 or
        bytes2Int("\000;\255;\255;\255;\255;\255;\255;\255;", SIGNED, BE) <>    72057594037927935 or
        bytes2Int("\001;\000;\000;\000;\000;\000;\000;\000;", SIGNED, BE) <>    72057594037927936 or
        bytes2Int("\127;\255;\255;\255;\255;\255;\255;\255;", SIGNED, BE) <>  9223372036854775807 then
      writeln("Conversion of big endian byte string to integer does not work correct.");
      okay := FALSE;
    end if;

    if  bytes2Int(                  "\1;\2;", SIGNED, BE) <>                258 or
        bytes2Int(               "\1;\2;\3;", SIGNED, BE) <>              66051 or
        bytes2Int(            "\1;\2;\3;\4;", SIGNED, BE) <>           16909060 or
        bytes2Int(         "\1;\2;\3;\4;\5;", SIGNED, BE) <>         4328719365 or
        bytes2Int(      "\1;\2;\3;\4;\5;\6;", SIGNED, BE) <>      1108152157446 or
        bytes2Int(   "\1;\2;\3;\4;\5;\6;\7;", SIGNED, BE) <>    283686952306183 or
        bytes2Int("\1;\2;\3;\4;\5;\6;\7;\8;", SIGNED, BE) <>  72623859790382856 or
        bytes2Int(                  "\2;\1;", SIGNED, BE) <>                513 or
        bytes2Int(               "\3;\2;\1;", SIGNED, BE) <>             197121 or
        bytes2Int(            "\4;\3;\2;\1;", SIGNED, BE) <>           67305985 or
        bytes2Int(         "\5;\4;\3;\2;\1;", SIGNED, BE) <>        21542142465 or
        bytes2Int(      "\6;\5;\4;\3;\2;\1;", SIGNED, BE) <>      6618611909121 or
        bytes2Int(   "\7;\6;\5;\4;\3;\2;\1;", SIGNED, BE) <>   1976943448883713 or
        bytes2Int("\8;\7;\6;\5;\4;\3;\2;\1;", SIGNED, BE) <> 578437695752307201 then
      writeln("Conversion of big endian byte string to integer does not work correct.");
      okay := FALSE;
    end if;

    if  bytes2Int(                  "\255;\1;", SIGNED, BE) <>               -255 or
        bytes2Int(               "\255;\1;\2;", SIGNED, BE) <>             -65278 or
        bytes2Int(            "\255;\1;\2;\3;", SIGNED, BE) <>          -16711165 or
        bytes2Int(         "\255;\1;\2;\3;\4;", SIGNED, BE) <>        -4278058236 or
        bytes2Int(      "\255;\1;\2;\3;\4;\5;", SIGNED, BE) <>     -1095182908411 or
        bytes2Int(   "\255;\1;\2;\3;\4;\5;\6;", SIGNED, BE) <>   -280366824553210 or
        bytes2Int("\255;\1;\2;\3;\4;\5;\6;\7;", SIGNED, BE) <> -71773907085621753 or
        bytes2Int(                  "\255;\1;", SIGNED, BE) <>               -255 or
        bytes2Int(               "\255;\2;\1;", SIGNED, BE) <>             -65023 or
        bytes2Int(            "\255;\3;\2;\1;", SIGNED, BE) <>          -16580095 or
        bytes2Int(         "\255;\4;\3;\2;\1;", SIGNED, BE) <>        -4227661311 or
        bytes2Int(      "\255;\5;\4;\3;\2;\1;", SIGNED, BE) <>     -1077969485311 or
        bytes2Int(   "\255;\6;\5;\4;\3;\2;\1;", SIGNED, BE) <>   -274856364801535 or
        bytes2Int("\255;\7;\6;\5;\4;\3;\2;\1;", SIGNED, BE) <> -70080650589044223 then
      writeln("Conversion of big endian byte string to integer does not work correct.");
      okay := FALSE;
    end if;

    if  bytes2Int("\255;\255;\128;\000;\000;\000;\000;\000;\000;\000;", SIGNED, BE) <>            INT64_MIN or
        bytes2Int("\255;\255;\128;\000;\000;\000;\000;\000;\000;\001;", SIGNED, BE) <> -9223372036854775807 or
        bytes2Int("\255;\255;\255;\000;\000;\000;\000;\000;\000;\000;", SIGNED, BE) <>   -72057594037927936 or
        bytes2Int("\255;\255;\255;\127;\255;\255;\255;\255;\255;\255;", SIGNED, BE) <>   -36028797018963969 or
        bytes2Int("\255;\255;\255;\128;\000;\000;\000;\000;\000;\000;", SIGNED, BE) <>   -36028797018963968 or
        bytes2Int(                         "\255;\255;\255;\255;\127;", SIGNED, BE) <>                 -129 or
        bytes2Int(                              "\255;\255;\255;\127;", SIGNED, BE) <>                 -129 or
        bytes2Int(                                   "\255;\255;\127;", SIGNED, BE) <>                 -129 or
        bytes2Int(                         "\255;\255;\255;\255;\128;", SIGNED, BE) <>                 -128 or
        bytes2Int(                              "\255;\255;\255;\128;", SIGNED, BE) <>                 -128 or
        bytes2Int(                                   "\255;\255;\128;", SIGNED, BE) <>                 -128 or
        bytes2Int(                                        "\255;\128;", SIGNED, BE) <>                 -128 or
        bytes2Int("\255;\255;\255;\255;\255;\255;\255;\255;\255;\254;", SIGNED, BE) <>                   -2 or
        bytes2Int(                         "\255;\255;\255;\255;\254;", SIGNED, BE) <>                   -2 or
        bytes2Int(                              "\255;\255;\255;\254;", SIGNED, BE) <>                   -2 or
        bytes2Int(                                   "\255;\255;\254;", SIGNED, BE) <>                   -2 or
        bytes2Int(                                        "\255;\254;", SIGNED, BE) <>                   -2 or
        bytes2Int("\255;\255;\255;\255;\255;\255;\255;\255;\255;\255;", SIGNED, BE) <>                   -1 or
        bytes2Int(                         "\255;\255;\255;\255;\255;", SIGNED, BE) <>                   -1 or
        bytes2Int(                              "\255;\255;\255;\255;", SIGNED, BE) <>                   -1 or
        bytes2Int(                                   "\255;\255;\255;", SIGNED, BE) <>                   -1 or
        bytes2Int(                                        "\255;\255;", SIGNED, BE) <>                   -1 or
        bytes2Int(                                                  "", SIGNED, BE) <>                    0 or
        bytes2Int(                                        "\000;\000;", SIGNED, BE) <>                    0 or
        bytes2Int(                                   "\000;\000;\000;", SIGNED, BE) <>                    0 or
        bytes2Int(                              "\000;\000;\000;\000;", SIGNED, BE) <>                    0 or
        bytes2Int(                         "\000;\000;\000;\000;\000;", SIGNED, BE) <>                    0 or
        bytes2Int("\000;\000;\000;\000;\000;\000;\000;\000;\000;\000;", SIGNED, BE) <>                    0 or
        bytes2Int(                                        "\000;\001;", SIGNED, BE) <>                    1 or
        bytes2Int(                                   "\000;\000;\001;", SIGNED, BE) <>                    1 or
        bytes2Int(                              "\000;\000;\000;\001;", SIGNED, BE) <>                    1 or
        bytes2Int(                         "\000;\000;\000;\000;\001;", SIGNED, BE) <>                    1 or
        bytes2Int("\000;\000;\000;\000;\000;\000;\000;\000;\000;\001;", SIGNED, BE) <>                    1 or
        bytes2Int(                                        "\000;\127;", SIGNED, BE) <>                  127 or
        bytes2Int(                                   "\000;\000;\127;", SIGNED, BE) <>                  127 or
        bytes2Int(                              "\000;\000;\000;\127;", SIGNED, BE) <>                  127 or
        bytes2Int(                         "\000;\000;\000;\000;\127;", SIGNED, BE) <>                  127 or
        bytes2Int(                                   "\000;\000;\128;", SIGNED, BE) <>                  128 or
        bytes2Int(                              "\000;\000;\000;\128;", SIGNED, BE) <>                  128 or
        bytes2Int(                         "\000;\000;\000;\000;\128;", SIGNED, BE) <>                  128 or
        bytes2Int("\000;\000;\000;\127;\255;\255;\255;\255;\255;\255;", SIGNED, BE) <>    36028797018963967 or
        bytes2Int("\000;\000;\000;\128;\000;\000;\000;\000;\000;\000;", SIGNED, BE) <>    36028797018963968 or
        bytes2Int("\000;\000;\000;\255;\255;\255;\255;\255;\255;\255;", SIGNED, BE) <>    72057594037927935 or
        bytes2Int("\000;\000;\127;\255;\255;\255;\255;\255;\255;\255;", SIGNED, BE) <>  9223372036854775807 then
      writeln("Conversion of big endian byte string to integer does not work correct.");
      okay := FALSE;
    end if;

    if  bytes2Int(                                   "\000;", UNSIGNED, BE) <>                   0 or
        bytes2Int(                                   "\001;", UNSIGNED, BE) <>                   1 or
        bytes2Int(                                   "\002;", UNSIGNED, BE) <>                   2 or
        bytes2Int(                                   "\126;", UNSIGNED, BE) <>                 126 or
        bytes2Int(                                   "\127;", UNSIGNED, BE) <>                 127 or
        bytes2Int(                                   "\128;", UNSIGNED, BE) <>                 128 or
        bytes2Int(                                   "\129;", UNSIGNED, BE) <>                 129 or
        bytes2Int(                                   "\254;", UNSIGNED, BE) <>                 254 or
        bytes2Int(                                   "\255;", UNSIGNED, BE) <>                 255 or
        bytes2Int(                              "\001;\000;", UNSIGNED, BE) <>                 256 or
        bytes2Int(                              "\001;\001;", UNSIGNED, BE) <>                 257 or
        bytes2Int(                              "\001;\254;", UNSIGNED, BE) <>                 510 or
        bytes2Int(                              "\001;\255;", UNSIGNED, BE) <>                 511 or
        bytes2Int(                              "\002;\000;", UNSIGNED, BE) <>                 512 or
        bytes2Int(                              "\002;\001;", UNSIGNED, BE) <>                 513 or
        bytes2Int(                              "\125;\254;", UNSIGNED, BE) <>               32254 or
        bytes2Int(                              "\125;\255;", UNSIGNED, BE) <>               32255 or
        bytes2Int(                              "\126;\000;", UNSIGNED, BE) <>               32256 or
        bytes2Int(                              "\126;\001;", UNSIGNED, BE) <>               32257 or
        bytes2Int(                              "\126;\254;", UNSIGNED, BE) <>               32510 or
        bytes2Int(                              "\126;\255;", UNSIGNED, BE) <>               32511 or
        bytes2Int(                              "\127;\000;", UNSIGNED, BE) <>               32512 or
        bytes2Int(                              "\127;\001;", UNSIGNED, BE) <>               32513 or
        bytes2Int(                              "\127;\254;", UNSIGNED, BE) <>               32766 or
        bytes2Int(                              "\127;\255;", UNSIGNED, BE) <>               32767 or
        bytes2Int(                              "\128;\000;", UNSIGNED, BE) <>               32768 or
        bytes2Int(                              "\128;\001;", UNSIGNED, BE) <>               32769 or
        bytes2Int(                              "\253;\255;", UNSIGNED, BE) <>               65023 or
        bytes2Int(                              "\254;\000;", UNSIGNED, BE) <>               65024 or
        bytes2Int(                              "\254;\255;", UNSIGNED, BE) <>               65279 or
        bytes2Int(                              "\255;\000;", UNSIGNED, BE) <>               65280 or
        bytes2Int(                              "\255;\255;", UNSIGNED, BE) <>               65535 or
        bytes2Int(                         "\001;\000;\000;", UNSIGNED, BE) <>               65536 or
        bytes2Int(                         "\127;\255;\255;", UNSIGNED, BE) <>             8388607 or
        bytes2Int(                         "\128;\000;\000;", UNSIGNED, BE) <>             8388608 or
        bytes2Int(                         "\255;\255;\255;", UNSIGNED, BE) <>            16777215 or
        bytes2Int(                    "\001;\000;\000;\000;", UNSIGNED, BE) <>            16777216 or
        bytes2Int(                    "\127;\255;\255;\255;", UNSIGNED, BE) <>          2147483647 or
        bytes2Int(                    "\128;\000;\000;\000;", UNSIGNED, BE) <>          2147483648 or
        bytes2Int(                    "\255;\255;\255;\255;", UNSIGNED, BE) <>          4294967295 or
        bytes2Int(               "\001;\000;\000;\000;\000;", UNSIGNED, BE) <>          4294967296 or
        bytes2Int(               "\127;\255;\255;\255;\255;", UNSIGNED, BE) <>        549755813887 or
        bytes2Int(               "\128;\000;\000;\000;\000;", UNSIGNED, BE) <>        549755813888 or
        bytes2Int(               "\255;\255;\255;\255;\255;", UNSIGNED, BE) <>       1099511627775 or
        bytes2Int(          "\001;\000;\000;\000;\000;\000;", UNSIGNED, BE) <>       1099511627776 or
        bytes2Int(          "\127;\255;\255;\255;\255;\255;", UNSIGNED, BE) <>     140737488355327 or
        bytes2Int(          "\128;\000;\000;\000;\000;\000;", UNSIGNED, BE) <>     140737488355328 or
        bytes2Int(          "\255;\255;\255;\255;\255;\255;", UNSIGNED, BE) <>     281474976710655 or
        bytes2Int(     "\001;\000;\000;\000;\000;\000;\000;", UNSIGNED, BE) <>     281474976710656 or
        bytes2Int(     "\127;\255;\255;\255;\255;\255;\255;", UNSIGNED, BE) <>   36028797018963967 or
        bytes2Int(     "\128;\000;\000;\000;\000;\000;\000;", UNSIGNED, BE) <>   36028797018963968 or
        bytes2Int(     "\255;\255;\255;\255;\255;\255;\255;", UNSIGNED, BE) <>   72057594037927935 or
        bytes2Int("\001;\000;\000;\000;\000;\000;\000;\000;", UNSIGNED, BE) <>   72057594037927936 or
        bytes2Int("\127;\255;\255;\255;\255;\255;\255;\255;", UNSIGNED, BE) <> 9223372036854775807 then
      writeln("Conversion of unsigned big endian byte string to integer does not work correct.");
      okay := FALSE;
    end if;

    if  bytes2Int(                  "\1;\2;", UNSIGNED, BE) <>                258 or
        bytes2Int(               "\1;\2;\3;", UNSIGNED, BE) <>              66051 or
        bytes2Int(            "\1;\2;\3;\4;", UNSIGNED, BE) <>           16909060 or
        bytes2Int(         "\1;\2;\3;\4;\5;", UNSIGNED, BE) <>         4328719365 or
        bytes2Int(      "\1;\2;\3;\4;\5;\6;", UNSIGNED, BE) <>      1108152157446 or
        bytes2Int(   "\1;\2;\3;\4;\5;\6;\7;", UNSIGNED, BE) <>    283686952306183 or
        bytes2Int("\1;\2;\3;\4;\5;\6;\7;\8;", UNSIGNED, BE) <>  72623859790382856 or
        bytes2Int(                  "\2;\1;", UNSIGNED, BE) <>                513 or
        bytes2Int(               "\3;\2;\1;", UNSIGNED, BE) <>             197121 or
        bytes2Int(            "\4;\3;\2;\1;", UNSIGNED, BE) <>           67305985 or
        bytes2Int(         "\5;\4;\3;\2;\1;", UNSIGNED, BE) <>        21542142465 or
        bytes2Int(      "\6;\5;\4;\3;\2;\1;", UNSIGNED, BE) <>      6618611909121 or
        bytes2Int(   "\7;\6;\5;\4;\3;\2;\1;", UNSIGNED, BE) <>   1976943448883713 or
        bytes2Int("\8;\7;\6;\5;\4;\3;\2;\1;", UNSIGNED, BE) <> 578437695752307201 then
      writeln("Conversion of unsigned big endian byte string to integer does not work correct.");
      okay := FALSE;
    end if;

    if  bytes2Int(               "\255;\1;", UNSIGNED, BE) <>             65281 or
        bytes2Int(            "\255;\1;\2;", UNSIGNED, BE) <>          16711938 or
        bytes2Int(         "\255;\1;\2;\3;", UNSIGNED, BE) <>        4278256131 or
        bytes2Int(      "\255;\1;\2;\3;\4;", UNSIGNED, BE) <>     1095233569540 or
        bytes2Int(   "\255;\1;\2;\3;\4;\5;", UNSIGNED, BE) <>   280379793802245 or
        bytes2Int("\255;\1;\2;\3;\4;\5;\6;", UNSIGNED, BE) <> 71777227213374726 or
        bytes2Int(               "\255;\1;", UNSIGNED, BE) <>             65281 or
        bytes2Int(            "\255;\2;\1;", UNSIGNED, BE) <>          16712193 or
        bytes2Int(         "\255;\3;\2;\1;", UNSIGNED, BE) <>        4278387201 or
        bytes2Int(      "\255;\4;\3;\2;\1;", UNSIGNED, BE) <>     1095283966465 or
        bytes2Int(   "\255;\5;\4;\3;\2;\1;", UNSIGNED, BE) <>   280397007225345 or
        bytes2Int("\255;\6;\5;\4;\3;\2;\1;", UNSIGNED, BE) <> 71782737673126401 then
      writeln("Conversion of unsigned big endian byte string to integer does not work correct.");
      okay := FALSE;
    end if;

    if  bytes2Int(                                                  "", UNSIGNED, BE) <>                   0 or
        bytes2Int(                                        "\000;\000;", UNSIGNED, BE) <>                   0 or
        bytes2Int(                                   "\000;\000;\000;", UNSIGNED, BE) <>                   0 or
        bytes2Int(                              "\000;\000;\000;\000;", UNSIGNED, BE) <>                   0 or
        bytes2Int(                         "\000;\000;\000;\000;\000;", UNSIGNED, BE) <>                   0 or
        bytes2Int("\000;\000;\000;\000;\000;\000;\000;\000;\000;\000;", UNSIGNED, BE) <>                   0 or
        bytes2Int(                                        "\000;\001;", UNSIGNED, BE) <>                   1 or
        bytes2Int(                                   "\000;\000;\001;", UNSIGNED, BE) <>                   1 or
        bytes2Int(                              "\000;\000;\000;\001;", UNSIGNED, BE) <>                   1 or
        bytes2Int(                         "\000;\000;\000;\000;\001;", UNSIGNED, BE) <>                   1 or
        bytes2Int("\000;\000;\000;\000;\000;\000;\000;\000;\000;\001;", UNSIGNED, BE) <>                   1 or
        bytes2Int(                                        "\000;\127;", UNSIGNED, BE) <>                 127 or
        bytes2Int(                                   "\000;\000;\127;", UNSIGNED, BE) <>                 127 or
        bytes2Int(                              "\000;\000;\000;\127;", UNSIGNED, BE) <>                 127 or
        bytes2Int(                         "\000;\000;\000;\000;\127;", UNSIGNED, BE) <>                 127 or
        bytes2Int(                                   "\000;\000;\128;", UNSIGNED, BE) <>                 128 or
        bytes2Int(                              "\000;\000;\000;\128;", UNSIGNED, BE) <>                 128 or
        bytes2Int(                         "\000;\000;\000;\000;\128;", UNSIGNED, BE) <>                 128 or
        bytes2Int("\000;\000;\000;\127;\255;\255;\255;\255;\255;\255;", UNSIGNED, BE) <>   36028797018963967 or
        bytes2Int("\000;\000;\000;\128;\000;\000;\000;\000;\000;\000;", UNSIGNED, BE) <>   36028797018963968 or
        bytes2Int("\000;\000;\000;\255;\255;\255;\255;\255;\255;\255;", UNSIGNED, BE) <>   72057594037927935 or
        bytes2Int("\000;\000;\127;\255;\255;\255;\255;\255;\255;\255;", UNSIGNED, BE) <> 9223372036854775807 then
      writeln("Conversion of unsigned big endian byte string to integer does not work correct.");
      okay := FALSE;
    end if;

    if  bytes2Int("\071;\039;\112;\044;\208;\199;\233;\120;\215;\049;"[2 len 0], UNSIGNED, BE) <>                   0 or
        bytes2Int("\071;\039;\112;\044;\208;\199;\233;\120;\215;\049;"[2 len 1], UNSIGNED, BE) <>                  39 or
        bytes2Int("\071;\039;\112;\044;\208;\199;\233;\120;\215;\049;"[2 len 2], UNSIGNED, BE) <>               10096 or
        bytes2Int("\071;\039;\112;\044;\208;\199;\233;\120;\215;\049;"[2 len 3], UNSIGNED, BE) <>             2584620 or
        bytes2Int("\071;\039;\112;\044;\208;\199;\233;\120;\215;\049;"[2 len 4], UNSIGNED, BE) <>           661662928 or
        bytes2Int("\071;\039;\112;\044;\208;\199;\233;\120;\215;\049;"[2 len 5], UNSIGNED, BE) <>        169385709767 or
        bytes2Int("\071;\039;\112;\044;\208;\199;\233;\120;\215;\049;"[2 len 6], UNSIGNED, BE) <>      43362741700585 or
        bytes2Int("\071;\039;\112;\044;\208;\199;\233;\120;\215;\049;"[2 len 7], UNSIGNED, BE) <>   11100861875349880 or
        bytes2Int("\071;\039;\112;\044;\208;\199;\233;\120;\215;\049;"[2 len 8], UNSIGNED, BE) <> 2841820640089569495 or
        bytes2Int("\071;\000;\112;\044;\208;\199;\233;\120;\215;\049;"[2 len 9], UNSIGNED, BE) <> 8083064988257277745 or
        bytes2Int("\071;\039;\112;\044;\208;\199;\233;\120;\215;\049;"[intExpr(2) len 0], UNSIGNED, BE) <>                   0 or
        bytes2Int("\071;\039;\112;\044;\208;\199;\233;\120;\215;\049;"[intExpr(2) len 1], UNSIGNED, BE) <>                  39 or
        bytes2Int("\071;\039;\112;\044;\208;\199;\233;\120;\215;\049;"[intExpr(2) len 2], UNSIGNED, BE) <>               10096 or
        bytes2Int("\071;\039;\112;\044;\208;\199;\233;\120;\215;\049;"[intExpr(2) len 3], UNSIGNED, BE) <>             2584620 or
        bytes2Int("\071;\039;\112;\044;\208;\199;\233;\120;\215;\049;"[intExpr(2) len 4], UNSIGNED, BE) <>           661662928 or
        bytes2Int("\071;\039;\112;\044;\208;\199;\233;\120;\215;\049;"[intExpr(2) len 5], UNSIGNED, BE) <>        169385709767 or
        bytes2Int("\071;\039;\112;\044;\208;\199;\233;\120;\215;\049;"[intExpr(2) len 6], UNSIGNED, BE) <>      43362741700585 or
        bytes2Int("\071;\039;\112;\044;\208;\199;\233;\120;\215;\049;"[intExpr(2) len 7], UNSIGNED, BE) <>   11100861875349880 or
        bytes2Int("\071;\039;\112;\044;\208;\199;\233;\120;\215;\049;"[intExpr(2) len 8], UNSIGNED, BE) <> 2841820640089569495 or
        bytes2Int("\071;\000;\112;\044;\208;\199;\233;\120;\215;\049;"[intExpr(2) len 9], UNSIGNED, BE) <> 8083064988257277745 or
        bytes2Int(striExpr("\071;\039;\112;\044;\208;\199;\233;\120;\215;\049;")[2 len 0], UNSIGNED, BE) <>                   0 or
        bytes2Int(striExpr("\071;\039;\112;\044;\208;\199;\233;\120;\215;\049;")[2 len 1], UNSIGNED, BE) <>                  39 or
        bytes2Int(striExpr("\071;\039;\112;\044;\208;\199;\233;\120;\215;\049;")[2 len 2], UNSIGNED, BE) <>               10096 or
        bytes2Int(striExpr("\071;\039;\112;\044;\208;\199;\233;\120;\215;\049;")[2 len 3], UNSIGNED, BE) <>             2584620 or
        bytes2Int(striExpr("\071;\039;\112;\044;\208;\199;\233;\120;\215;\049;")[2 len 4], UNSIGNED, BE) <>           661662928 or
        bytes2Int(striExpr("\071;\039;\112;\044;\208;\199;\233;\120;\215;\049;")[2 len 5], UNSIGNED, BE) <>        169385709767 or
        bytes2Int(striExpr("\071;\039;\112;\044;\208;\199;\233;\120;\215;\049;")[2 len 6], UNSIGNED, BE) <>      43362741700585 or
        bytes2Int(striExpr("\071;\039;\112;\044;\208;\199;\233;\120;\215;\049;")[2 len 7], UNSIGNED, BE) <>   11100861875349880 or
        bytes2Int(striExpr("\071;\039;\112;\044;\208;\199;\233;\120;\215;\049;")[2 len 8], UNSIGNED, BE) <> 2841820640089569495 or
        bytes2Int(striExpr("\071;\000;\112;\044;\208;\199;\233;\120;\215;\049;")[2 len 9], UNSIGNED, BE) <> 8083064988257277745 or
        bytes2Int(striExpr("\071;\039;\112;\044;\208;\199;\233;\120;\215;\049;")[intExpr(2) len 0], UNSIGNED, BE) <>                   0 or
        bytes2Int(striExpr("\071;\039;\112;\044;\208;\199;\233;\120;\215;\049;")[intExpr(2) len 1], UNSIGNED, BE) <>                  39 or
        bytes2Int(striExpr("\071;\039;\112;\044;\208;\199;\233;\120;\215;\049;")[intExpr(2) len 2], UNSIGNED, BE) <>               10096 or
        bytes2Int(striExpr("\071;\039;\112;\044;\208;\199;\233;\120;\215;\049;")[intExpr(2) len 3], UNSIGNED, BE) <>             2584620 or
        bytes2Int(striExpr("\071;\039;\112;\044;\208;\199;\233;\120;\215;\049;")[intExpr(2) len 4], UNSIGNED, BE) <>           661662928 or
        bytes2Int(striExpr("\071;\039;\112;\044;\208;\199;\233;\120;\215;\049;")[intExpr(2) len 5], UNSIGNED, BE) <>        169385709767 or
        bytes2Int(striExpr("\071;\039;\112;\044;\208;\199;\233;\120;\215;\049;")[intExpr(2) len 6], UNSIGNED, BE) <>      43362741700585 or
        bytes2Int(striExpr("\071;\039;\112;\044;\208;\199;\233;\120;\215;\049;")[intExpr(2) len 7], UNSIGNED, BE) <>   11100861875349880 or
        bytes2Int(striExpr("\071;\039;\112;\044;\208;\199;\233;\120;\215;\049;")[intExpr(2) len 8], UNSIGNED, BE) <> 2841820640089569495 or
        bytes2Int(striExpr("\071;\000;\112;\044;\208;\199;\233;\120;\215;\049;")[intExpr(2) len 9], UNSIGNED, BE) <> 8083064988257277745 then
      writeln("Conversion of unsigned big endian byte string to integer with substring does not work correct.");
      okay := FALSE;
    end if;

    if  bytes2Int("\071;"                                        [2 len 1], UNSIGNED, BE) <>                   0 or
        bytes2Int("\071;\039;"                                   [2 len 2], UNSIGNED, BE) <>                  39 or
        bytes2Int("\071;\039;\112;"                              [2 len 3], UNSIGNED, BE) <>               10096 or
        bytes2Int("\071;\039;\112;\044;"                         [2 len 4], UNSIGNED, BE) <>             2584620 or
        bytes2Int("\071;\039;\112;\044;\208;"                    [2 len 5], UNSIGNED, BE) <>           661662928 or
        bytes2Int("\071;\039;\112;\044;\208;\199;"               [2 len 6], UNSIGNED, BE) <>        169385709767 or
        bytes2Int("\071;\039;\112;\044;\208;\199;\233;"          [2 len 7], UNSIGNED, BE) <>      43362741700585 or
        bytes2Int("\071;\039;\112;\044;\208;\199;\233;\120;"     [2 len 8], UNSIGNED, BE) <>   11100861875349880 or
        bytes2Int("\071;\039;\112;\044;\208;\199;\233;\120;\215;"[2 len 9], UNSIGNED, BE) <> 2841820640089569495 or
        bytes2Int("\071;"                                        [intExpr(2) len 1], UNSIGNED, BE) <>                   0 or
        bytes2Int("\071;\039;"                                   [intExpr(2) len 2], UNSIGNED, BE) <>                  39 or
        bytes2Int("\071;\039;\112;"                              [intExpr(2) len 3], UNSIGNED, BE) <>               10096 or
        bytes2Int("\071;\039;\112;\044;"                         [intExpr(2) len 4], UNSIGNED, BE) <>             2584620 or
        bytes2Int("\071;\039;\112;\044;\208;"                    [intExpr(2) len 5], UNSIGNED, BE) <>           661662928 or
        bytes2Int("\071;\039;\112;\044;\208;\199;"               [intExpr(2) len 6], UNSIGNED, BE) <>        169385709767 or
        bytes2Int("\071;\039;\112;\044;\208;\199;\233;"          [intExpr(2) len 7], UNSIGNED, BE) <>      43362741700585 or
        bytes2Int("\071;\039;\112;\044;\208;\199;\233;\120;"     [intExpr(2) len 8], UNSIGNED, BE) <>   11100861875349880 or
        bytes2Int("\071;\039;\112;\044;\208;\199;\233;\120;\215;"[intExpr(2) len 9], UNSIGNED, BE) <> 2841820640089569495 or
        bytes2Int(striExpr("\071;"                                        )[2 len 1], UNSIGNED, BE) <>                   0 or
        bytes2Int(striExpr("\071;\039;"                                   )[2 len 2], UNSIGNED, BE) <>                  39 or
        bytes2Int(striExpr("\071;\039;\112;"                              )[2 len 3], UNSIGNED, BE) <>               10096 or
        bytes2Int(striExpr("\071;\039;\112;\044;"                         )[2 len 4], UNSIGNED, BE) <>             2584620 or
        bytes2Int(striExpr("\071;\039;\112;\044;\208;"                    )[2 len 5], UNSIGNED, BE) <>           661662928 or
        bytes2Int(striExpr("\071;\039;\112;\044;\208;\199;"               )[2 len 6], UNSIGNED, BE) <>        169385709767 or
        bytes2Int(striExpr("\071;\039;\112;\044;\208;\199;\233;"          )[2 len 7], UNSIGNED, BE) <>      43362741700585 or
        bytes2Int(striExpr("\071;\039;\112;\044;\208;\199;\233;\120;"     )[2 len 8], UNSIGNED, BE) <>   11100861875349880 or
        bytes2Int(striExpr("\071;\039;\112;\044;\208;\199;\233;\120;\215;")[2 len 9], UNSIGNED, BE) <> 2841820640089569495 or
        bytes2Int(striExpr("\071;"                                        )[intExpr(2) len 1], UNSIGNED, BE) <>                   0 or
        bytes2Int(striExpr("\071;\039;"                                   )[intExpr(2) len 2], UNSIGNED, BE) <>                  39 or
        bytes2Int(striExpr("\071;\039;\112;"                              )[intExpr(2) len 3], UNSIGNED, BE) <>               10096 or
        bytes2Int(striExpr("\071;\039;\112;\044;"                         )[intExpr(2) len 4], UNSIGNED, BE) <>             2584620 or
        bytes2Int(striExpr("\071;\039;\112;\044;\208;"                    )[intExpr(2) len 5], UNSIGNED, BE) <>           661662928 or
        bytes2Int(striExpr("\071;\039;\112;\044;\208;\199;"               )[intExpr(2) len 6], UNSIGNED, BE) <>        169385709767 or
        bytes2Int(striExpr("\071;\039;\112;\044;\208;\199;\233;"          )[intExpr(2) len 7], UNSIGNED, BE) <>      43362741700585 or
        bytes2Int(striExpr("\071;\039;\112;\044;\208;\199;\233;\120;"     )[intExpr(2) len 8], UNSIGNED, BE) <>   11100861875349880 or
        bytes2Int(striExpr("\071;\039;\112;\044;\208;\199;\233;\120;\215;")[intExpr(2) len 9], UNSIGNED, BE) <> 2841820640089569495 then
      writeln("Conversion of unsigned big endian byte string to integer with substring does not work correct.");
      okay := FALSE;
    end if;

    if  not raisesRangeError(bytes2Int("\000;\256;\255;\255;\255;\255;\255;\255;\255;"[2 len 1], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int("\000;\256;\255;\255;\255;\255;\255;\255;\255;"[2 len 2], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int("\000;\255;\256;\255;\255;\255;\255;\255;\255;"[2 len 2], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int("\000;\256;\255;\255;\255;\255;\255;\255;\255;"[2 len 3], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int("\000;\255;\256;\255;\255;\255;\255;\255;\255;"[2 len 3], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int("\000;\255;\255;\256;\255;\255;\255;\255;\255;"[2 len 3], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int("\000;\256;\255;\255;\255;\255;\255;\255;\255;"[2 len 4], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int("\000;\255;\256;\255;\255;\255;\255;\255;\255;"[2 len 4], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int("\000;\255;\255;\256;\255;\255;\255;\255;\255;"[2 len 4], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int("\000;\255;\255;\255;\256;\255;\255;\255;\255;"[2 len 4], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int("\000;\256;\255;\255;\255;\255;\255;\255;\255;"[2 len 5], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int("\000;\255;\255;\256;\255;\255;\255;\255;\255;"[2 len 5], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int("\000;\255;\255;\255;\255;\256;\255;\255;\255;"[2 len 5], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int("\000;\256;\255;\255;\255;\255;\255;\255;\255;"[2 len 6], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int("\000;\255;\255;\255;\256;\255;\255;\255;\255;"[2 len 6], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int("\000;\255;\255;\255;\255;\255;\256;\255;\255;"[2 len 6], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int("\000;\256;\255;\255;\255;\255;\255;\255;\255;"[2 len 7], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int("\000;\255;\255;\255;\255;\256;\255;\255;\255;"[2 len 7], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int("\000;\255;\255;\255;\255;\255;\255;\256;\255;"[2 len 7], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int("\000;\128;\255;\255;\255;\255;\255;\255;\255;"[2 len 8], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int("\000;\127;\255;\255;\255;\256;\255;\255;\255;"[2 len 8], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int("\000;\127;\255;\255;\255;\255;\255;\255;\256;"[2 len 8], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int("\000;\256;\255;\255;\255;\255;\255;\255;\255;"[intExpr(2) len 1], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int("\000;\256;\255;\255;\255;\255;\255;\255;\255;"[intExpr(2) len 2], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int("\000;\255;\256;\255;\255;\255;\255;\255;\255;"[intExpr(2) len 2], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int("\000;\256;\255;\255;\255;\255;\255;\255;\255;"[intExpr(2) len 3], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int("\000;\255;\256;\255;\255;\255;\255;\255;\255;"[intExpr(2) len 3], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int("\000;\255;\255;\256;\255;\255;\255;\255;\255;"[intExpr(2) len 3], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int("\000;\256;\255;\255;\255;\255;\255;\255;\255;"[intExpr(2) len 4], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int("\000;\255;\256;\255;\255;\255;\255;\255;\255;"[intExpr(2) len 4], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int("\000;\255;\255;\256;\255;\255;\255;\255;\255;"[intExpr(2) len 4], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int("\000;\255;\255;\255;\256;\255;\255;\255;\255;"[intExpr(2) len 4], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int("\000;\256;\255;\255;\255;\255;\255;\255;\255;"[intExpr(2) len 5], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int("\000;\255;\255;\256;\255;\255;\255;\255;\255;"[intExpr(2) len 5], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int("\000;\255;\255;\255;\255;\256;\255;\255;\255;"[intExpr(2) len 5], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int("\000;\256;\255;\255;\255;\255;\255;\255;\255;"[intExpr(2) len 6], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int("\000;\255;\255;\255;\256;\255;\255;\255;\255;"[intExpr(2) len 6], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int("\000;\255;\255;\255;\255;\255;\256;\255;\255;"[intExpr(2) len 6], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int("\000;\256;\255;\255;\255;\255;\255;\255;\255;"[intExpr(2) len 7], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int("\000;\255;\255;\255;\255;\256;\255;\255;\255;"[intExpr(2) len 7], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int("\000;\255;\255;\255;\255;\255;\255;\256;\255;"[intExpr(2) len 7], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int("\000;\128;\255;\255;\255;\255;\255;\255;\255;"[intExpr(2) len 8], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int("\000;\127;\255;\255;\255;\256;\255;\255;\255;"[intExpr(2) len 8], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int("\000;\127;\255;\255;\255;\255;\255;\255;\256;"[intExpr(2) len 8], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\256;\255;\255;\255;\255;\255;\255;\255;")[2 len 1], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\256;\255;\255;\255;\255;\255;\255;\255;")[2 len 2], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\255;\256;\255;\255;\255;\255;\255;\255;")[2 len 2], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\256;\255;\255;\255;\255;\255;\255;\255;")[2 len 3], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\255;\256;\255;\255;\255;\255;\255;\255;")[2 len 3], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\255;\255;\256;\255;\255;\255;\255;\255;")[2 len 3], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\256;\255;\255;\255;\255;\255;\255;\255;")[2 len 4], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\255;\256;\255;\255;\255;\255;\255;\255;")[2 len 4], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\255;\255;\256;\255;\255;\255;\255;\255;")[2 len 4], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\255;\255;\255;\256;\255;\255;\255;\255;")[2 len 4], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\256;\255;\255;\255;\255;\255;\255;\255;")[2 len 5], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\255;\255;\256;\255;\255;\255;\255;\255;")[2 len 5], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\255;\255;\255;\255;\256;\255;\255;\255;")[2 len 5], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\256;\255;\255;\255;\255;\255;\255;\255;")[2 len 6], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\255;\255;\255;\256;\255;\255;\255;\255;")[2 len 6], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\255;\255;\255;\255;\255;\256;\255;\255;")[2 len 6], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\256;\255;\255;\255;\255;\255;\255;\255;")[2 len 7], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\255;\255;\255;\255;\256;\255;\255;\255;")[2 len 7], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\255;\255;\255;\255;\255;\255;\256;\255;")[2 len 7], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\128;\255;\255;\255;\255;\255;\255;\255;")[2 len 8], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\127;\255;\255;\255;\256;\255;\255;\255;")[2 len 8], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\127;\255;\255;\255;\255;\255;\255;\256;")[2 len 8], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\256;\255;\255;\255;\255;\255;\255;\255;")[intExpr(2) len 1], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\256;\255;\255;\255;\255;\255;\255;\255;")[intExpr(2) len 2], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\255;\256;\255;\255;\255;\255;\255;\255;")[intExpr(2) len 2], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\256;\255;\255;\255;\255;\255;\255;\255;")[intExpr(2) len 3], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\255;\256;\255;\255;\255;\255;\255;\255;")[intExpr(2) len 3], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\255;\255;\256;\255;\255;\255;\255;\255;")[intExpr(2) len 3], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\256;\255;\255;\255;\255;\255;\255;\255;")[intExpr(2) len 4], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\255;\256;\255;\255;\255;\255;\255;\255;")[intExpr(2) len 4], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\255;\255;\256;\255;\255;\255;\255;\255;")[intExpr(2) len 4], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\255;\255;\255;\256;\255;\255;\255;\255;")[intExpr(2) len 4], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\256;\255;\255;\255;\255;\255;\255;\255;")[intExpr(2) len 5], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\255;\255;\256;\255;\255;\255;\255;\255;")[intExpr(2) len 5], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\255;\255;\255;\255;\256;\255;\255;\255;")[intExpr(2) len 5], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\256;\255;\255;\255;\255;\255;\255;\255;")[intExpr(2) len 6], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\255;\255;\255;\256;\255;\255;\255;\255;")[intExpr(2) len 6], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\255;\255;\255;\255;\255;\256;\255;\255;")[intExpr(2) len 6], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\256;\255;\255;\255;\255;\255;\255;\255;")[intExpr(2) len 7], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\255;\255;\255;\255;\256;\255;\255;\255;")[intExpr(2) len 7], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\255;\255;\255;\255;\255;\255;\256;\255;")[intExpr(2) len 7], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\128;\255;\255;\255;\255;\255;\255;\255;")[intExpr(2) len 8], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\127;\255;\255;\255;\256;\255;\255;\255;")[intExpr(2) len 8], UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\127;\255;\255;\255;\255;\255;\255;\256;")[intExpr(2) len 8], UNSIGNED, BE)) then
      writeln("Conversion of unsigned big endian byte string to integer with substring does not raise RANGE_ERROR.");
      okay := FALSE;
    end if;

    if  not raisesRangeError(bytes2Int("\000;\127;\255;\255;\255;\255;\255;\255;\255;\255;",   SIGNED, BE)) or
        not raisesRangeError(bytes2Int("\000;\000;\128;\255;\255;\255;\255;\255;\255;\255;",   SIGNED, BE)) or
        not raisesRangeError(bytes2Int("\000;\000;\127;\255;\255;\255;\256;\255;\255;\255;",   SIGNED, BE)) or
        not raisesRangeError(bytes2Int("\255;\128;\255;\255;\255;\255;\255;\255;\255;\255;",   SIGNED, BE)) or
        not raisesRangeError(bytes2Int("\255;\255;\127;\255;\255;\255;\255;\255;\255;\255;",   SIGNED, BE)) or
        not raisesRangeError(bytes2Int("\255;\255;\128;\255;\255;\255;\256;\255;\255;\255;",   SIGNED, BE)) or
        not raisesRangeError(bytes2Int("\000;\127;\255;\255;\255;\255;\255;\255;\255;\255;", UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int("\000;\000;\128;\255;\255;\255;\255;\255;\255;\255;", UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int("\000;\000;\127;\255;\255;\255;\256;\255;\255;\255;", UNSIGNED, BE)) then
      writeln("Illegal conversion of big endian byte string to integer does not raise RANGE_ERROR.");
      okay := FALSE;
    end if;

    if okay then
      writeln("Conversion of big endian byte string to integer works correct.");
    else
      writeln(" ***** Conversion of big endian byte string to integer does not work correct.");
      writeln;
    end if;
  end func;


const proc: check_bytesLe2Int is func
  local
    var boolean: okay is TRUE;
  begin
    if  bytes2Int("\000;\000;\000;\000;\000;\000;\000;\128;", SIGNED, LE) <>            INT64_MIN or
        bytes2Int("\001;\000;\000;\000;\000;\000;\000;\128;", SIGNED, LE) <> -9223372036854775807 or
        bytes2Int("\255;\255;\255;\255;\255;\255;\255;\254;", SIGNED, LE) <>   -72057594037927937 or
        bytes2Int("\000;\000;\000;\000;\000;\000;\000;\255;", SIGNED, LE) <>   -72057594037927936 or
        bytes2Int("\255;\255;\255;\255;\255;\255;\127;\255;", SIGNED, LE) <>   -36028797018963969 or
        bytes2Int("\000;\000;\000;\000;\000;\000;\128;",      SIGNED, LE) <>   -36028797018963968 or
        bytes2Int("\255;\255;\255;\255;\255;\255;\254;",      SIGNED, LE) <>     -281474976710657 or
        bytes2Int("\000;\000;\000;\000;\000;\000;\255;",      SIGNED, LE) <>     -281474976710656 or
        bytes2Int("\255;\255;\255;\255;\255;\127;\255;",      SIGNED, LE) <>     -140737488355329 or
        bytes2Int("\000;\000;\000;\000;\000;\128;",           SIGNED, LE) <>     -140737488355328 or
        bytes2Int("\255;\255;\255;\255;\255;\254;",           SIGNED, LE) <>       -1099511627777 or
        bytes2Int("\000;\000;\000;\000;\000;\255;",           SIGNED, LE) <>       -1099511627776 or
        bytes2Int("\255;\255;\255;\255;\127;\255;",           SIGNED, LE) <>        -549755813889 or
        bytes2Int("\000;\000;\000;\000;\128;",                SIGNED, LE) <>        -549755813888 or
        bytes2Int("\255;\255;\255;\255;\254;",                SIGNED, LE) <>          -4294967297 or
        bytes2Int("\000;\000;\000;\000;\255;",                SIGNED, LE) <>          -4294967296 or
        bytes2Int("\255;\255;\255;\127;\255;",                SIGNED, LE) <>          -2147483649 or
        bytes2Int("\000;\000;\000;\128;",                     SIGNED, LE) <>          -2147483648 or
        bytes2Int("\255;\255;\255;\254;",                     SIGNED, LE) <>            -16777217 or
        bytes2Int("\000;\000;\000;\255;",                     SIGNED, LE) <>            -16777216 or
        bytes2Int("\255;\255;\127;\255;",                     SIGNED, LE) <>             -8388609 or
        bytes2Int("\000;\000;\128;",                          SIGNED, LE) <>             -8388608 or
        bytes2Int("\255;\255;\254;",                          SIGNED, LE) <>               -65537 or
        bytes2Int("\000;\000;\255;",                          SIGNED, LE) <>               -65536 or
        bytes2Int("\255;\000;\255;",                          SIGNED, LE) <>               -65281 or
        bytes2Int("\000;\001;\255;",                          SIGNED, LE) <>               -65280 or
        bytes2Int("\255;\001;\255;",                          SIGNED, LE) <>               -65025 or
        bytes2Int("\000;\002;\255;",                          SIGNED, LE) <>               -65024 or
        bytes2Int("\254;\127;\255;",                          SIGNED, LE) <>               -32770 or
        bytes2Int("\255;\127;\255;",                          SIGNED, LE) <>               -32769 or
        bytes2Int("\000;\128;",                               SIGNED, LE) <>               -32768 or
        bytes2Int("\001;\128;",                               SIGNED, LE) <>               -32767 or
        bytes2Int("\254;\128;",                               SIGNED, LE) <>               -32514 or
        bytes2Int("\255;\128;",                               SIGNED, LE) <>               -32513 or
        bytes2Int("\000;\129;",                               SIGNED, LE) <>               -32512 or
        bytes2Int("\001;\129;",                               SIGNED, LE) <>               -32511 or
        bytes2Int("\254;\129;",                               SIGNED, LE) <>               -32258 or
        bytes2Int("\255;\129;",                               SIGNED, LE) <>               -32257 or
        bytes2Int("\000;\130;",                               SIGNED, LE) <>               -32256 or
        bytes2Int("\001;\130;",                               SIGNED, LE) <>               -32255 or
        bytes2Int("\254;\253;",                               SIGNED, LE) <>                 -514 or
        bytes2Int("\255;\253;",                               SIGNED, LE) <>                 -513 or
        bytes2Int("\000;\254;",                               SIGNED, LE) <>                 -512 or
        bytes2Int("\001;\254;",                               SIGNED, LE) <>                 -511 or
        bytes2Int("\254;\254;",                               SIGNED, LE) <>                 -258 or
        bytes2Int("\255;\254;",                               SIGNED, LE) <>                 -257 or
        bytes2Int("\000;\255;",                               SIGNED, LE) <>                 -256 or
        bytes2Int("\001;\255;",                               SIGNED, LE) <>                 -255 or
        bytes2Int("\126;\255;",                               SIGNED, LE) <>                 -130 or
        bytes2Int("\127;\255;",                               SIGNED, LE) <>                 -129 or
        bytes2Int("\128;",                                    SIGNED, LE) <>                 -128 or
        bytes2Int("\129;",                                    SIGNED, LE) <>                 -127 or
        bytes2Int("\254;",                                    SIGNED, LE) <>                   -2 or
        bytes2Int("\255;",                                    SIGNED, LE) <>                   -1 or
        bytes2Int("\000;",                                    SIGNED, LE) <>                    0 or
        bytes2Int("\001;",                                    SIGNED, LE) <>                    1 or
        bytes2Int("\002;",                                    SIGNED, LE) <>                    2 or
        bytes2Int("\126;",                                    SIGNED, LE) <>                  126 or
        bytes2Int("\127;",                                    SIGNED, LE) <>                  127 or
        bytes2Int("\128;\000;",                               SIGNED, LE) <>                  128 or
        bytes2Int("\129;\000;",                               SIGNED, LE) <>                  129 or
        bytes2Int("\254;\000;",                               SIGNED, LE) <>                  254 or
        bytes2Int("\255;\000;",                               SIGNED, LE) <>                  255 or
        bytes2Int("\000;\001;",                               SIGNED, LE) <>                  256 or
        bytes2Int("\001;\001;",                               SIGNED, LE) <>                  257 or
        bytes2Int("\254;\001;",                               SIGNED, LE) <>                  510 or
        bytes2Int("\255;\001;",                               SIGNED, LE) <>                  511 or
        bytes2Int("\000;\002;",                               SIGNED, LE) <>                  512 or
        bytes2Int("\001;\002;",                               SIGNED, LE) <>                  513 or
        bytes2Int("\254;\125;",                               SIGNED, LE) <>                32254 or
        bytes2Int("\255;\125;",                               SIGNED, LE) <>                32255 or
        bytes2Int("\000;\126;",                               SIGNED, LE) <>                32256 or
        bytes2Int("\001;\126;",                               SIGNED, LE) <>                32257 or
        bytes2Int("\254;\126;",                               SIGNED, LE) <>                32510 or
        bytes2Int("\255;\126;",                               SIGNED, LE) <>                32511 or
        bytes2Int("\000;\127;",                               SIGNED, LE) <>                32512 or
        bytes2Int("\001;\127;",                               SIGNED, LE) <>                32513 or
        bytes2Int("\254;\127;",                               SIGNED, LE) <>                32766 or
        bytes2Int("\255;\127;",                               SIGNED, LE) <>                32767 or
        bytes2Int("\000;\128;\000;",                          SIGNED, LE) <>                32768 or
        bytes2Int("\001;\128;\000;",                          SIGNED, LE) <>                32769 or
        bytes2Int("\255;\253;\000;",                          SIGNED, LE) <>                65023 or
        bytes2Int("\000;\254;\000;",                          SIGNED, LE) <>                65024 or
        bytes2Int("\255;\254;\000;",                          SIGNED, LE) <>                65279 or
        bytes2Int("\000;\255;\000;",                          SIGNED, LE) <>                65280 or
        bytes2Int("\255;\255;\000;",                          SIGNED, LE) <>                65535 or
        bytes2Int("\000;\000;\001;",                          SIGNED, LE) <>                65536 or
        bytes2Int("\255;\255;\127;",                          SIGNED, LE) <>              8388607 or
        bytes2Int("\000;\000;\128;\000;",                     SIGNED, LE) <>              8388608 or
        bytes2Int("\255;\255;\255;\000;",                     SIGNED, LE) <>             16777215 or
        bytes2Int("\000;\000;\000;\001;",                     SIGNED, LE) <>             16777216 or
        bytes2Int("\255;\255;\255;\127;",                     SIGNED, LE) <>           2147483647 or
        bytes2Int("\000;\000;\000;\128;\000;",                SIGNED, LE) <>           2147483648 or
        bytes2Int("\255;\255;\255;\255;\000;",                SIGNED, LE) <>           4294967295 or
        bytes2Int("\000;\000;\000;\000;\001;",                SIGNED, LE) <>           4294967296 or
        bytes2Int("\255;\255;\255;\255;\127;",                SIGNED, LE) <>         549755813887 or
        bytes2Int("\000;\000;\000;\000;\128;\000;",           SIGNED, LE) <>         549755813888 or
        bytes2Int("\255;\255;\255;\255;\255;\000;",           SIGNED, LE) <>        1099511627775 or
        bytes2Int("\000;\000;\000;\000;\000;\001;",           SIGNED, LE) <>        1099511627776 or
        bytes2Int("\255;\255;\255;\255;\255;\127;",           SIGNED, LE) <>      140737488355327 or
        bytes2Int("\000;\000;\000;\000;\000;\128;\000;",      SIGNED, LE) <>      140737488355328 or
        bytes2Int("\255;\255;\255;\255;\255;\255;\000;",      SIGNED, LE) <>      281474976710655 or
        bytes2Int("\000;\000;\000;\000;\000;\000;\001;",      SIGNED, LE) <>      281474976710656 or
        bytes2Int("\255;\255;\255;\255;\255;\255;\127;",      SIGNED, LE) <>    36028797018963967 or
        bytes2Int("\000;\000;\000;\000;\000;\000;\128;\000;", SIGNED, LE) <>    36028797018963968 or
        bytes2Int("\255;\255;\255;\255;\255;\255;\255;\000;", SIGNED, LE) <>    72057594037927935 or
        bytes2Int("\000;\000;\000;\000;\000;\000;\000;\001;", SIGNED, LE) <>    72057594037927936 or
        bytes2Int("\255;\255;\255;\255;\255;\255;\255;\127;", SIGNED, LE) <>  9223372036854775807 then
      writeln("Conversion of little endian byte string to integer does not work correct.");
      okay := FALSE;
    end if;

    if  bytes2Int("\2;\1;",                   SIGNED, LE) <>                258 or
        bytes2Int("\3;\2;\1;",                SIGNED, LE) <>              66051 or
        bytes2Int("\4;\3;\2;\1;",             SIGNED, LE) <>           16909060 or
        bytes2Int("\5;\4;\3;\2;\1;",          SIGNED, LE) <>         4328719365 or
        bytes2Int("\6;\5;\4;\3;\2;\1;",       SIGNED, LE) <>      1108152157446 or
        bytes2Int("\7;\6;\5;\4;\3;\2;\1;",    SIGNED, LE) <>    283686952306183 or
        bytes2Int("\8;\7;\6;\5;\4;\3;\2;\1;", SIGNED, LE) <>  72623859790382856 or
        bytes2Int("\1;\2;",                   SIGNED, LE) <>                513 or
        bytes2Int("\1;\2;\3;",                SIGNED, LE) <>             197121 or
        bytes2Int("\1;\2;\3;\4;",             SIGNED, LE) <>           67305985 or
        bytes2Int("\1;\2;\3;\4;\5;",          SIGNED, LE) <>        21542142465 or
        bytes2Int("\1;\2;\3;\4;\5;\6;",       SIGNED, LE) <>      6618611909121 or
        bytes2Int("\1;\2;\3;\4;\5;\6;\7;",    SIGNED, LE) <>   1976943448883713 or
        bytes2Int("\1;\2;\3;\4;\5;\6;\7;\8;", SIGNED, LE) <> 578437695752307201 then
      writeln("Conversion of little endian byte string to integer does not work correct.");
      okay := FALSE;
    end if;

    if  bytes2Int("\1;\255;",                   SIGNED, LE) <>               -255 or
        bytes2Int("\2;\1;\255;",                SIGNED, LE) <>             -65278 or
        bytes2Int("\3;\2;\1;\255;",             SIGNED, LE) <>          -16711165 or
        bytes2Int("\4;\3;\2;\1;\255;",          SIGNED, LE) <>        -4278058236 or
        bytes2Int("\5;\4;\3;\2;\1;\255;",       SIGNED, LE) <>     -1095182908411 or
        bytes2Int("\6;\5;\4;\3;\2;\1;\255;",    SIGNED, LE) <>   -280366824553210 or
        bytes2Int("\7;\6;\5;\4;\3;\2;\1;\255;", SIGNED, LE) <> -71773907085621753 or
        bytes2Int("\1;\255;",                   SIGNED, LE) <>               -255 or
        bytes2Int("\1;\2;\255;",                SIGNED, LE) <>             -65023 or
        bytes2Int("\1;\2;\3;\255;",             SIGNED, LE) <>          -16580095 or
        bytes2Int("\1;\2;\3;\4;\255;",          SIGNED, LE) <>        -4227661311 or
        bytes2Int("\1;\2;\3;\4;\5;\255;",       SIGNED, LE) <>     -1077969485311 or
        bytes2Int("\1;\2;\3;\4;\5;\6;\255;",    SIGNED, LE) <>   -274856364801535 or
        bytes2Int("\1;\2;\3;\4;\5;\6;\7;\255;", SIGNED, LE) <> -70080650589044223 then
      writeln("Conversion of little endian byte string to integer does not work correct.");
      okay := FALSE;
    end if;

    if  bytes2Int("\000;\000;\000;\000;\000;\000;\000;\128;\255;\255;", SIGNED, LE) <>            INT64_MIN or
        bytes2Int("\001;\000;\000;\000;\000;\000;\000;\128;\255;\255;", SIGNED, LE) <> -9223372036854775807 or
        bytes2Int("\000;\000;\000;\000;\000;\000;\000;\255;\255;\255;", SIGNED, LE) <>   -72057594037927936 or
        bytes2Int("\255;\255;\255;\255;\255;\255;\127;\255;\255;\255;", SIGNED, LE) <>   -36028797018963969 or
        bytes2Int("\000;\000;\000;\000;\000;\000;\128;\255;\255;\255;", SIGNED, LE) <>   -36028797018963968 or
        bytes2Int("\127;\255;\255;\255;\255;",                          SIGNED, LE) <>                 -129 or
        bytes2Int("\127;\255;\255;\255;",                               SIGNED, LE) <>                 -129 or
        bytes2Int("\127;\255;\255;",                                    SIGNED, LE) <>                 -129 or
        bytes2Int("\128;\255;\255;\255;\255;",                          SIGNED, LE) <>                 -128 or
        bytes2Int("\128;\255;\255;\255;",                               SIGNED, LE) <>                 -128 or
        bytes2Int("\128;\255;\255;",                                    SIGNED, LE) <>                 -128 or
        bytes2Int("\128;\255;",                                         SIGNED, LE) <>                 -128 or
        bytes2Int("\254;\255;\255;\255;\255;\255;\255;\255;\255;\255;", SIGNED, LE) <>                   -2 or
        bytes2Int("\254;\255;\255;\255;\255;",                          SIGNED, LE) <>                   -2 or
        bytes2Int("\254;\255;\255;\255;",                               SIGNED, LE) <>                   -2 or
        bytes2Int("\254;\255;\255;",                                    SIGNED, LE) <>                   -2 or
        bytes2Int("\254;\255;",                                         SIGNED, LE) <>                   -2 or
        bytes2Int("\255;\255;\255;\255;\255;\255;\255;\255;\255;\255;", SIGNED, LE) <>                   -1 or
        bytes2Int("\255;\255;\255;\255;\255;",                          SIGNED, LE) <>                   -1 or
        bytes2Int("\255;\255;\255;\255;",                               SIGNED, LE) <>                   -1 or
        bytes2Int("\255;\255;\255;",                                    SIGNED, LE) <>                   -1 or
        bytes2Int("\255;\255;",                                         SIGNED, LE) <>                   -1 or
        bytes2Int("",                                                   SIGNED, LE) <>                    0 or
        bytes2Int("\000;\000;",                                         SIGNED, LE) <>                    0 or
        bytes2Int("\000;\000;\000;",                                    SIGNED, LE) <>                    0 or
        bytes2Int("\000;\000;\000;\000;",                               SIGNED, LE) <>                    0 or
        bytes2Int("\000;\000;\000;\000;\000;",                          SIGNED, LE) <>                    0 or
        bytes2Int("\000;\000;\000;\000;\000;\000;\000;\000;\000;\000;", SIGNED, LE) <>                    0 or
        bytes2Int("\001;\000;",                                         SIGNED, LE) <>                    1 or
        bytes2Int("\001;\000;\000;",                                    SIGNED, LE) <>                    1 or
        bytes2Int("\001;\000;\000;\000;",                               SIGNED, LE) <>                    1 or
        bytes2Int("\001;\000;\000;\000;\000;",                          SIGNED, LE) <>                    1 or
        bytes2Int("\001;\000;\000;\000;\000;\000;\000;\000;\000;\000;", SIGNED, LE) <>                    1 or
        bytes2Int("\127;\000;",                                         SIGNED, LE) <>                  127 or
        bytes2Int("\127;\000;\000;",                                    SIGNED, LE) <>                  127 or
        bytes2Int("\127;\000;\000;\000;",                               SIGNED, LE) <>                  127 or
        bytes2Int("\127;\000;\000;\000;\000;",                          SIGNED, LE) <>                  127 or
        bytes2Int("\128;\000;\000;",                                    SIGNED, LE) <>                  128 or
        bytes2Int("\128;\000;\000;\000;",                               SIGNED, LE) <>                  128 or
        bytes2Int("\128;\000;\000;\000;\000;",                          SIGNED, LE) <>                  128 or
        bytes2Int("\255;\255;\255;\255;\255;\255;\127;\000;\000;\000;", SIGNED, LE) <>    36028797018963967 or
        bytes2Int("\000;\000;\000;\000;\000;\000;\128;\000;\000;\000;", SIGNED, LE) <>    36028797018963968 or
        bytes2Int("\255;\255;\255;\255;\255;\255;\255;\000;\000;\000;", SIGNED, LE) <>    72057594037927935 or
        bytes2Int("\255;\255;\255;\255;\255;\255;\255;\127;\000;\000;", SIGNED, LE) <>  9223372036854775807 then
      writeln("Conversion of little endian byte string to integer does not work correct.");
      okay := FALSE;
    end if;

    if  bytes2Int("\000;",                                    UNSIGNED, LE) <>                   0 or
        bytes2Int("\001;",                                    UNSIGNED, LE) <>                   1 or
        bytes2Int("\002;",                                    UNSIGNED, LE) <>                   2 or
        bytes2Int("\126;",                                    UNSIGNED, LE) <>                 126 or
        bytes2Int("\127;",                                    UNSIGNED, LE) <>                 127 or
        bytes2Int("\128;",                                    UNSIGNED, LE) <>                 128 or
        bytes2Int("\129;",                                    UNSIGNED, LE) <>                 129 or
        bytes2Int("\254;",                                    UNSIGNED, LE) <>                 254 or
        bytes2Int("\255;",                                    UNSIGNED, LE) <>                 255 or
        bytes2Int("\000;\001;",                               UNSIGNED, LE) <>                 256 or
        bytes2Int("\001;\001;",                               UNSIGNED, LE) <>                 257 or
        bytes2Int("\254;\001;",                               UNSIGNED, LE) <>                 510 or
        bytes2Int("\255;\001;",                               UNSIGNED, LE) <>                 511 or
        bytes2Int("\000;\002;",                               UNSIGNED, LE) <>                 512 or
        bytes2Int("\001;\002;",                               UNSIGNED, LE) <>                 513 or
        bytes2Int("\254;\125;",                               UNSIGNED, LE) <>               32254 or
        bytes2Int("\255;\125;",                               UNSIGNED, LE) <>               32255 or
        bytes2Int("\000;\126;",                               UNSIGNED, LE) <>               32256 or
        bytes2Int("\001;\126;",                               UNSIGNED, LE) <>               32257 or
        bytes2Int("\254;\126;",                               UNSIGNED, LE) <>               32510 or
        bytes2Int("\255;\126;",                               UNSIGNED, LE) <>               32511 or
        bytes2Int("\000;\127;",                               UNSIGNED, LE) <>               32512 or
        bytes2Int("\001;\127;",                               UNSIGNED, LE) <>               32513 or
        bytes2Int("\254;\127;",                               UNSIGNED, LE) <>               32766 or
        bytes2Int("\255;\127;",                               UNSIGNED, LE) <>               32767 or
        bytes2Int("\000;\128;",                               UNSIGNED, LE) <>               32768 or
        bytes2Int("\001;\128;",                               UNSIGNED, LE) <>               32769 or
        bytes2Int("\255;\253;",                               UNSIGNED, LE) <>               65023 or
        bytes2Int("\000;\254;",                               UNSIGNED, LE) <>               65024 or
        bytes2Int("\255;\254;",                               UNSIGNED, LE) <>               65279 or
        bytes2Int("\000;\255;",                               UNSIGNED, LE) <>               65280 or
        bytes2Int("\255;\255;",                               UNSIGNED, LE) <>               65535 or
        bytes2Int("\000;\000;\001;",                          UNSIGNED, LE) <>               65536 or
        bytes2Int("\255;\255;\127;",                          UNSIGNED, LE) <>             8388607 or
        bytes2Int("\000;\000;\128;",                          UNSIGNED, LE) <>             8388608 or
        bytes2Int("\255;\255;\255;",                          UNSIGNED, LE) <>            16777215 or
        bytes2Int("\000;\000;\000;\001;",                     UNSIGNED, LE) <>            16777216 or
        bytes2Int("\255;\255;\255;\127;",                     UNSIGNED, LE) <>          2147483647 or
        bytes2Int("\000;\000;\000;\128;",                     UNSIGNED, LE) <>          2147483648 or
        bytes2Int("\255;\255;\255;\255;",                     UNSIGNED, LE) <>          4294967295 or
        bytes2Int("\000;\000;\000;\000;\001;",                UNSIGNED, LE) <>          4294967296 or
        bytes2Int("\255;\255;\255;\255;\127;",                UNSIGNED, LE) <>        549755813887 or
        bytes2Int("\000;\000;\000;\000;\128;",                UNSIGNED, LE) <>        549755813888 or
        bytes2Int("\255;\255;\255;\255;\255;",                UNSIGNED, LE) <>       1099511627775 or
        bytes2Int("\000;\000;\000;\000;\000;\001;",           UNSIGNED, LE) <>       1099511627776 or
        bytes2Int("\255;\255;\255;\255;\255;\127;",           UNSIGNED, LE) <>     140737488355327 or
        bytes2Int("\000;\000;\000;\000;\000;\128;",           UNSIGNED, LE) <>     140737488355328 or
        bytes2Int("\255;\255;\255;\255;\255;\255;",           UNSIGNED, LE) <>     281474976710655 or
        bytes2Int("\000;\000;\000;\000;\000;\000;\001;",      UNSIGNED, LE) <>     281474976710656 or
        bytes2Int("\255;\255;\255;\255;\255;\255;\127;",      UNSIGNED, LE) <>   36028797018963967 or
        bytes2Int("\000;\000;\000;\000;\000;\000;\128;",      UNSIGNED, LE) <>   36028797018963968 or
        bytes2Int("\255;\255;\255;\255;\255;\255;\255;",      UNSIGNED, LE) <>   72057594037927935 or
        bytes2Int("\000;\000;\000;\000;\000;\000;\000;\001;", UNSIGNED, LE) <>   72057594037927936 or
        bytes2Int("\255;\255;\255;\255;\255;\255;\255;\127;", UNSIGNED, LE) <> 9223372036854775807 then
      writeln("Conversion of unsigned little endian byte string to integer does not work correct.");
      okay := FALSE;
    end if;

    if  bytes2Int("\2;\1;",                   UNSIGNED, LE) <>                258 or
        bytes2Int("\3;\2;\1;",                UNSIGNED, LE) <>              66051 or
        bytes2Int("\4;\3;\2;\1;",             UNSIGNED, LE) <>           16909060 or
        bytes2Int("\5;\4;\3;\2;\1;",          UNSIGNED, LE) <>         4328719365 or
        bytes2Int("\6;\5;\4;\3;\2;\1;",       UNSIGNED, LE) <>      1108152157446 or
        bytes2Int("\7;\6;\5;\4;\3;\2;\1;",    UNSIGNED, LE) <>    283686952306183 or
        bytes2Int("\8;\7;\6;\5;\4;\3;\2;\1;", UNSIGNED, LE) <>  72623859790382856 or
        bytes2Int("\1;\2;",                   UNSIGNED, LE) <>                513 or
        bytes2Int("\1;\2;\3;",                UNSIGNED, LE) <>             197121 or
        bytes2Int("\1;\2;\3;\4;",             UNSIGNED, LE) <>           67305985 or
        bytes2Int("\1;\2;\3;\4;\5;",          UNSIGNED, LE) <>        21542142465 or
        bytes2Int("\1;\2;\3;\4;\5;\6;",       UNSIGNED, LE) <>      6618611909121 or
        bytes2Int("\1;\2;\3;\4;\5;\6;\7;",    UNSIGNED, LE) <>   1976943448883713 or
        bytes2Int("\1;\2;\3;\4;\5;\6;\7;\8;", UNSIGNED, LE) <> 578437695752307201 then
      writeln("Conversion of unsigned little endian byte string to integer does not work correct.");
      okay := FALSE;
    end if;

    if  bytes2Int("\1;\255;",                UNSIGNED, LE) <>             65281 or
        bytes2Int("\2;\1;\255;",             UNSIGNED, LE) <>          16711938 or
        bytes2Int("\3;\2;\1;\255;",          UNSIGNED, LE) <>        4278256131 or
        bytes2Int("\4;\3;\2;\1;\255;",       UNSIGNED, LE) <>     1095233569540 or
        bytes2Int("\5;\4;\3;\2;\1;\255;",    UNSIGNED, LE) <>   280379793802245 or
        bytes2Int("\6;\5;\4;\3;\2;\1;\255;", UNSIGNED, LE) <> 71777227213374726 or
        bytes2Int("\1;\255;",                UNSIGNED, LE) <>             65281 or
        bytes2Int("\1;\2;\255;",             UNSIGNED, LE) <>          16712193 or
        bytes2Int("\1;\2;\3;\255;",          UNSIGNED, LE) <>        4278387201 or
        bytes2Int("\1;\2;\3;\4;\255;",       UNSIGNED, LE) <>     1095283966465 or
        bytes2Int("\1;\2;\3;\4;\5;\255;",    UNSIGNED, LE) <>   280397007225345 or
        bytes2Int("\1;\2;\3;\4;\5;\6;\255;", UNSIGNED, LE) <> 71782737673126401 then
      writeln("Conversion of unsigned little endian byte string to integer does not work correct.");
      okay := FALSE;
    end if;

    if  bytes2Int("",                                                   UNSIGNED, LE) <>                   0 or
        bytes2Int("\000;\000;",                                         UNSIGNED, LE) <>                   0 or
        bytes2Int("\000;\000;\000;",                                    UNSIGNED, LE) <>                   0 or
        bytes2Int("\000;\000;\000;\000;",                               UNSIGNED, LE) <>                   0 or
        bytes2Int("\000;\000;\000;\000;\000;",                          UNSIGNED, LE) <>                   0 or
        bytes2Int("\000;\000;\000;\000;\000;\000;\000;\000;\000;\000;", UNSIGNED, LE) <>                   0 or
        bytes2Int("\001;\000;",                                         UNSIGNED, LE) <>                   1 or
        bytes2Int("\001;\000;\000;",                                    UNSIGNED, LE) <>                   1 or
        bytes2Int("\001;\000;\000;\000;",                               UNSIGNED, LE) <>                   1 or
        bytes2Int("\001;\000;\000;\000;\000;",                          UNSIGNED, LE) <>                   1 or
        bytes2Int("\001;\000;\000;\000;\000;\000;\000;\000;\000;\000;", UNSIGNED, LE) <>                   1 or
        bytes2Int("\127;\000;",                                         UNSIGNED, LE) <>                 127 or
        bytes2Int("\127;\000;\000;",                                    UNSIGNED, LE) <>                 127 or
        bytes2Int("\127;\000;\000;\000;",                               UNSIGNED, LE) <>                 127 or
        bytes2Int("\127;\000;\000;\000;\000;",                          UNSIGNED, LE) <>                 127 or
        bytes2Int("\128;\000;\000;",                                    UNSIGNED, LE) <>                 128 or
        bytes2Int("\128;\000;\000;\000;",                               UNSIGNED, LE) <>                 128 or
        bytes2Int("\128;\000;\000;\000;\000;",                          UNSIGNED, LE) <>                 128 or
        bytes2Int("\255;\255;\255;\255;\255;\255;\127;\000;\000;\000;", UNSIGNED, LE) <>   36028797018963967 or
        bytes2Int("\000;\000;\000;\000;\000;\000;\128;\000;\000;\000;", UNSIGNED, LE) <>   36028797018963968 or
        bytes2Int("\255;\255;\255;\255;\255;\255;\255;\000;\000;\000;", UNSIGNED, LE) <>   72057594037927935 or
        bytes2Int("\255;\255;\255;\255;\255;\255;\255;\127;\000;\000;", UNSIGNED, LE) <> 9223372036854775807 then
      writeln("Conversion of unsigned little endian byte string to integer does not work correct.");
      okay := FALSE;
    end if;

    if  bytes2Int("\071;\039;\112;\044;\208;\199;\233;\120;\049;\215;"[2 len 0], UNSIGNED, LE) <>                   0 or
        bytes2Int("\071;\039;\112;\044;\208;\199;\233;\120;\049;\215;"[2 len 1], UNSIGNED, LE) <>                  39 or
        bytes2Int("\071;\039;\112;\044;\208;\199;\233;\120;\049;\215;"[2 len 2], UNSIGNED, LE) <>               28711 or
        bytes2Int("\071;\039;\112;\044;\208;\199;\233;\120;\049;\215;"[2 len 3], UNSIGNED, LE) <>             2912295 or
        bytes2Int("\071;\039;\112;\044;\208;\199;\233;\120;\049;\215;"[2 len 4], UNSIGNED, LE) <>          3492573223 or
        bytes2Int("\071;\039;\112;\044;\208;\199;\233;\120;\049;\215;"[2 len 5], UNSIGNED, LE) <>        858191065127 or
        bytes2Int("\071;\039;\112;\044;\208;\199;\233;\120;\049;\215;"[2 len 6], UNSIGNED, LE) <>     257044400336935 or
        bytes2Int("\071;\039;\112;\044;\208;\199;\233;\120;\049;\215;"[2 len 7], UNSIGNED, LE) <>   34034041605615655 or
        bytes2Int("\071;\039;\112;\044;\208;\199;\233;\120;\049;\215;"[2 len 8], UNSIGNED, LE) <> 3564856149464084519 or
        bytes2Int("\071;\039;\112;\044;\208;\199;\233;\120;\049;\000;"[2 len 9], UNSIGNED, LE) <> 3564856149464084519 or
        bytes2Int("\071;\039;\112;\044;\208;\199;\233;\120;\049;\215;"[intExpr(2) len 0], UNSIGNED, LE) <>                   0 or
        bytes2Int("\071;\039;\112;\044;\208;\199;\233;\120;\049;\215;"[intExpr(2) len 1], UNSIGNED, LE) <>                  39 or
        bytes2Int("\071;\039;\112;\044;\208;\199;\233;\120;\049;\215;"[intExpr(2) len 2], UNSIGNED, LE) <>               28711 or
        bytes2Int("\071;\039;\112;\044;\208;\199;\233;\120;\049;\215;"[intExpr(2) len 3], UNSIGNED, LE) <>             2912295 or
        bytes2Int("\071;\039;\112;\044;\208;\199;\233;\120;\049;\215;"[intExpr(2) len 4], UNSIGNED, LE) <>          3492573223 or
        bytes2Int("\071;\039;\112;\044;\208;\199;\233;\120;\049;\215;"[intExpr(2) len 5], UNSIGNED, LE) <>        858191065127 or
        bytes2Int("\071;\039;\112;\044;\208;\199;\233;\120;\049;\215;"[intExpr(2) len 6], UNSIGNED, LE) <>     257044400336935 or
        bytes2Int("\071;\039;\112;\044;\208;\199;\233;\120;\049;\215;"[intExpr(2) len 7], UNSIGNED, LE) <>   34034041605615655 or
        bytes2Int("\071;\039;\112;\044;\208;\199;\233;\120;\049;\215;"[intExpr(2) len 8], UNSIGNED, LE) <> 3564856149464084519 or
        bytes2Int("\071;\039;\112;\044;\208;\199;\233;\120;\049;\000;"[intExpr(2) len 9], UNSIGNED, LE) <> 3564856149464084519 or
        bytes2Int(striExpr("\071;\039;\112;\044;\208;\199;\233;\120;\049;\215;")[2 len 0], UNSIGNED, LE) <>                   0 or
        bytes2Int(striExpr("\071;\039;\112;\044;\208;\199;\233;\120;\049;\215;")[2 len 1], UNSIGNED, LE) <>                  39 or
        bytes2Int(striExpr("\071;\039;\112;\044;\208;\199;\233;\120;\049;\215;")[2 len 2], UNSIGNED, LE) <>               28711 or
        bytes2Int(striExpr("\071;\039;\112;\044;\208;\199;\233;\120;\049;\215;")[2 len 3], UNSIGNED, LE) <>             2912295 or
        bytes2Int(striExpr("\071;\039;\112;\044;\208;\199;\233;\120;\049;\215;")[2 len 4], UNSIGNED, LE) <>          3492573223 or
        bytes2Int(striExpr("\071;\039;\112;\044;\208;\199;\233;\120;\049;\215;")[2 len 5], UNSIGNED, LE) <>        858191065127 or
        bytes2Int(striExpr("\071;\039;\112;\044;\208;\199;\233;\120;\049;\215;")[2 len 6], UNSIGNED, LE) <>     257044400336935 or
        bytes2Int(striExpr("\071;\039;\112;\044;\208;\199;\233;\120;\049;\215;")[2 len 7], UNSIGNED, LE) <>   34034041605615655 or
        bytes2Int(striExpr("\071;\039;\112;\044;\208;\199;\233;\120;\049;\215;")[2 len 8], UNSIGNED, LE) <> 3564856149464084519 or
        bytes2Int(striExpr("\071;\039;\112;\044;\208;\199;\233;\120;\049;\000;")[2 len 9], UNSIGNED, LE) <> 3564856149464084519 or
        bytes2Int(striExpr("\071;\039;\112;\044;\208;\199;\233;\120;\049;\215;")[intExpr(2) len 0], UNSIGNED, LE) <>                   0 or
        bytes2Int(striExpr("\071;\039;\112;\044;\208;\199;\233;\120;\049;\215;")[intExpr(2) len 1], UNSIGNED, LE) <>                  39 or
        bytes2Int(striExpr("\071;\039;\112;\044;\208;\199;\233;\120;\049;\215;")[intExpr(2) len 2], UNSIGNED, LE) <>               28711 or
        bytes2Int(striExpr("\071;\039;\112;\044;\208;\199;\233;\120;\049;\215;")[intExpr(2) len 3], UNSIGNED, LE) <>             2912295 or
        bytes2Int(striExpr("\071;\039;\112;\044;\208;\199;\233;\120;\049;\215;")[intExpr(2) len 4], UNSIGNED, LE) <>          3492573223 or
        bytes2Int(striExpr("\071;\039;\112;\044;\208;\199;\233;\120;\049;\215;")[intExpr(2) len 5], UNSIGNED, LE) <>        858191065127 or
        bytes2Int(striExpr("\071;\039;\112;\044;\208;\199;\233;\120;\049;\215;")[intExpr(2) len 6], UNSIGNED, LE) <>     257044400336935 or
        bytes2Int(striExpr("\071;\039;\112;\044;\208;\199;\233;\120;\049;\215;")[intExpr(2) len 7], UNSIGNED, LE) <>   34034041605615655 or
        bytes2Int(striExpr("\071;\039;\112;\044;\208;\199;\233;\120;\049;\215;")[intExpr(2) len 8], UNSIGNED, LE) <> 3564856149464084519 or
        bytes2Int(striExpr("\071;\039;\112;\044;\208;\199;\233;\120;\049;\000;")[intExpr(2) len 9], UNSIGNED, LE) <> 3564856149464084519 then
      writeln("Conversion of unsigned little endian byte string to integer with substring does not work correct.");
      okay := FALSE;
    end if;

    if  bytes2Int("\071;"                                        [2 len 1], UNSIGNED, LE) <>                   0 or
        bytes2Int("\071;\039;"                                   [2 len 2], UNSIGNED, LE) <>                  39 or
        bytes2Int("\071;\039;\112;"                              [2 len 3], UNSIGNED, LE) <>               28711 or
        bytes2Int("\071;\039;\112;\044;"                         [2 len 4], UNSIGNED, LE) <>             2912295 or
        bytes2Int("\071;\039;\112;\044;\208;"                    [2 len 5], UNSIGNED, LE) <>          3492573223 or
        bytes2Int("\071;\039;\112;\044;\208;\199;"               [2 len 6], UNSIGNED, LE) <>        858191065127 or
        bytes2Int("\071;\039;\112;\044;\208;\199;\233;"          [2 len 7], UNSIGNED, LE) <>     257044400336935 or
        bytes2Int("\071;\039;\112;\044;\208;\199;\233;\120;"     [2 len 8], UNSIGNED, LE) <>   34034041605615655 or
        bytes2Int("\071;\039;\112;\044;\208;\199;\233;\120;\049;"[2 len 9], UNSIGNED, LE) <> 3564856149464084519 or
        bytes2Int("\071;"                                        [intExpr(2) len 1], UNSIGNED, LE) <>                   0 or
        bytes2Int("\071;\039;"                                   [intExpr(2) len 2], UNSIGNED, LE) <>                  39 or
        bytes2Int("\071;\039;\112;"                              [intExpr(2) len 3], UNSIGNED, LE) <>               28711 or
        bytes2Int("\071;\039;\112;\044;"                         [intExpr(2) len 4], UNSIGNED, LE) <>             2912295 or
        bytes2Int("\071;\039;\112;\044;\208;"                    [intExpr(2) len 5], UNSIGNED, LE) <>          3492573223 or
        bytes2Int("\071;\039;\112;\044;\208;\199;"               [intExpr(2) len 6], UNSIGNED, LE) <>        858191065127 or
        bytes2Int("\071;\039;\112;\044;\208;\199;\233;"          [intExpr(2) len 7], UNSIGNED, LE) <>     257044400336935 or
        bytes2Int("\071;\039;\112;\044;\208;\199;\233;\120;"     [intExpr(2) len 8], UNSIGNED, LE) <>   34034041605615655 or
        bytes2Int("\071;\039;\112;\044;\208;\199;\233;\120;\049;"[intExpr(2) len 9], UNSIGNED, LE) <> 3564856149464084519 or
        bytes2Int(striExpr("\071;"                                        )[2 len 1], UNSIGNED, LE) <>                   0 or
        bytes2Int(striExpr("\071;\039;"                                   )[2 len 2], UNSIGNED, LE) <>                  39 or
        bytes2Int(striExpr("\071;\039;\112;"                              )[2 len 3], UNSIGNED, LE) <>               28711 or
        bytes2Int(striExpr("\071;\039;\112;\044;"                         )[2 len 4], UNSIGNED, LE) <>             2912295 or
        bytes2Int(striExpr("\071;\039;\112;\044;\208;"                    )[2 len 5], UNSIGNED, LE) <>          3492573223 or
        bytes2Int(striExpr("\071;\039;\112;\044;\208;\199;"               )[2 len 6], UNSIGNED, LE) <>        858191065127 or
        bytes2Int(striExpr("\071;\039;\112;\044;\208;\199;\233;"          )[2 len 7], UNSIGNED, LE) <>     257044400336935 or
        bytes2Int(striExpr("\071;\039;\112;\044;\208;\199;\233;\120;"     )[2 len 8], UNSIGNED, LE) <>   34034041605615655 or
        bytes2Int(striExpr("\071;\039;\112;\044;\208;\199;\233;\120;\049;")[2 len 9], UNSIGNED, LE) <> 3564856149464084519 or
        bytes2Int(striExpr("\071;"                                        )[intExpr(2) len 1], UNSIGNED, LE) <>                   0 or
        bytes2Int(striExpr("\071;\039;"                                   )[intExpr(2) len 2], UNSIGNED, LE) <>                  39 or
        bytes2Int(striExpr("\071;\039;\112;"                              )[intExpr(2) len 3], UNSIGNED, LE) <>               28711 or
        bytes2Int(striExpr("\071;\039;\112;\044;"                         )[intExpr(2) len 4], UNSIGNED, LE) <>             2912295 or
        bytes2Int(striExpr("\071;\039;\112;\044;\208;"                    )[intExpr(2) len 5], UNSIGNED, LE) <>          3492573223 or
        bytes2Int(striExpr("\071;\039;\112;\044;\208;\199;"               )[intExpr(2) len 6], UNSIGNED, LE) <>        858191065127 or
        bytes2Int(striExpr("\071;\039;\112;\044;\208;\199;\233;"          )[intExpr(2) len 7], UNSIGNED, LE) <>     257044400336935 or
        bytes2Int(striExpr("\071;\039;\112;\044;\208;\199;\233;\120;"     )[intExpr(2) len 8], UNSIGNED, LE) <>   34034041605615655 or
        bytes2Int(striExpr("\071;\039;\112;\044;\208;\199;\233;\120;\049;")[intExpr(2) len 9], UNSIGNED, LE) <> 3564856149464084519 then
      writeln("Conversion of unsigned little endian byte string to integer with substring does not work correct.");
      okay := FALSE;
    end if;

    if  not raisesRangeError(bytes2Int("\000;\256;\255;\255;\255;\255;\255;\255;\255;"[2 len 1], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int("\000;\256;\255;\255;\255;\255;\255;\255;\255;"[2 len 2], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int("\000;\255;\256;\255;\255;\255;\255;\255;\255;"[2 len 2], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int("\000;\256;\255;\255;\255;\255;\255;\255;\255;"[2 len 3], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int("\000;\255;\256;\255;\255;\255;\255;\255;\255;"[2 len 3], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int("\000;\255;\255;\256;\255;\255;\255;\255;\255;"[2 len 3], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int("\000;\256;\255;\255;\255;\255;\255;\255;\255;"[2 len 4], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int("\000;\255;\256;\255;\255;\255;\255;\255;\255;"[2 len 4], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int("\000;\255;\255;\256;\255;\255;\255;\255;\255;"[2 len 4], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int("\000;\255;\255;\255;\256;\255;\255;\255;\255;"[2 len 4], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int("\000;\256;\255;\255;\255;\255;\255;\255;\255;"[2 len 5], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int("\000;\255;\255;\256;\255;\255;\255;\255;\255;"[2 len 5], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int("\000;\255;\255;\255;\255;\256;\255;\255;\255;"[2 len 5], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int("\000;\256;\255;\255;\255;\255;\255;\255;\255;"[2 len 6], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int("\000;\255;\255;\255;\256;\255;\255;\255;\255;"[2 len 6], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int("\000;\255;\255;\255;\255;\255;\256;\255;\255;"[2 len 6], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int("\000;\256;\255;\255;\255;\255;\255;\255;\255;"[2 len 7], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int("\000;\255;\255;\255;\255;\256;\255;\255;\255;"[2 len 7], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int("\000;\255;\255;\255;\255;\255;\255;\256;\255;"[2 len 7], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int("\000;\255;\255;\255;\255;\255;\255;\255;\128;"[2 len 8], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int("\000;\255;\255;\255;\255;\256;\255;\255;\127;"[2 len 8], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int("\000;\256;\255;\255;\255;\255;\255;\255;\127;"[2 len 8], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int("\000;\256;\255;\255;\255;\255;\255;\255;\255;"[intExpr(2) len 1], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int("\000;\256;\255;\255;\255;\255;\255;\255;\255;"[intExpr(2) len 2], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int("\000;\255;\256;\255;\255;\255;\255;\255;\255;"[intExpr(2) len 2], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int("\000;\256;\255;\255;\255;\255;\255;\255;\255;"[intExpr(2) len 3], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int("\000;\255;\256;\255;\255;\255;\255;\255;\255;"[intExpr(2) len 3], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int("\000;\255;\255;\256;\255;\255;\255;\255;\255;"[intExpr(2) len 3], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int("\000;\256;\255;\255;\255;\255;\255;\255;\255;"[intExpr(2) len 4], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int("\000;\255;\256;\255;\255;\255;\255;\255;\255;"[intExpr(2) len 4], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int("\000;\255;\255;\256;\255;\255;\255;\255;\255;"[intExpr(2) len 4], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int("\000;\255;\255;\255;\256;\255;\255;\255;\255;"[intExpr(2) len 4], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int("\000;\256;\255;\255;\255;\255;\255;\255;\255;"[intExpr(2) len 5], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int("\000;\255;\255;\256;\255;\255;\255;\255;\255;"[intExpr(2) len 5], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int("\000;\255;\255;\255;\255;\256;\255;\255;\255;"[intExpr(2) len 5], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int("\000;\256;\255;\255;\255;\255;\255;\255;\255;"[intExpr(2) len 6], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int("\000;\255;\255;\255;\256;\255;\255;\255;\255;"[intExpr(2) len 6], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int("\000;\255;\255;\255;\255;\255;\256;\255;\255;"[intExpr(2) len 6], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int("\000;\256;\255;\255;\255;\255;\255;\255;\255;"[intExpr(2) len 7], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int("\000;\255;\255;\255;\255;\256;\255;\255;\255;"[intExpr(2) len 7], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int("\000;\255;\255;\255;\255;\255;\255;\256;\255;"[intExpr(2) len 7], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int("\000;\255;\255;\255;\255;\255;\255;\255;\128;"[intExpr(2) len 8], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int("\000;\255;\255;\255;\255;\256;\255;\255;\127;"[intExpr(2) len 8], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int("\000;\256;\255;\255;\255;\255;\255;\255;\127;"[intExpr(2) len 8], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\256;\255;\255;\255;\255;\255;\255;\255;")[2 len 1], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\256;\255;\255;\255;\255;\255;\255;\255;")[2 len 2], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\255;\256;\255;\255;\255;\255;\255;\255;")[2 len 2], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\256;\255;\255;\255;\255;\255;\255;\255;")[2 len 3], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\255;\256;\255;\255;\255;\255;\255;\255;")[2 len 3], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\255;\255;\256;\255;\255;\255;\255;\255;")[2 len 3], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\256;\255;\255;\255;\255;\255;\255;\255;")[2 len 4], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\255;\256;\255;\255;\255;\255;\255;\255;")[2 len 4], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\255;\255;\256;\255;\255;\255;\255;\255;")[2 len 4], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\255;\255;\255;\256;\255;\255;\255;\255;")[2 len 4], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\256;\255;\255;\255;\255;\255;\255;\255;")[2 len 5], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\255;\255;\256;\255;\255;\255;\255;\255;")[2 len 5], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\255;\255;\255;\255;\256;\255;\255;\255;")[2 len 5], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\256;\255;\255;\255;\255;\255;\255;\255;")[2 len 6], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\255;\255;\255;\256;\255;\255;\255;\255;")[2 len 6], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\255;\255;\255;\255;\255;\256;\255;\255;")[2 len 6], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\256;\255;\255;\255;\255;\255;\255;\255;")[2 len 7], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\255;\255;\255;\255;\256;\255;\255;\255;")[2 len 7], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\255;\255;\255;\255;\255;\255;\256;\255;")[2 len 7], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\255;\255;\255;\255;\255;\255;\255;\128;")[2 len 8], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\255;\255;\255;\255;\256;\255;\255;\127;")[2 len 8], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\256;\255;\255;\255;\255;\255;\255;\127;")[2 len 8], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\256;\255;\255;\255;\255;\255;\255;\255;")[intExpr(2) len 1], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\256;\255;\255;\255;\255;\255;\255;\255;")[intExpr(2) len 2], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\255;\256;\255;\255;\255;\255;\255;\255;")[intExpr(2) len 2], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\256;\255;\255;\255;\255;\255;\255;\255;")[intExpr(2) len 3], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\255;\256;\255;\255;\255;\255;\255;\255;")[intExpr(2) len 3], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\255;\255;\256;\255;\255;\255;\255;\255;")[intExpr(2) len 3], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\256;\255;\255;\255;\255;\255;\255;\255;")[intExpr(2) len 4], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\255;\256;\255;\255;\255;\255;\255;\255;")[intExpr(2) len 4], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\255;\255;\256;\255;\255;\255;\255;\255;")[intExpr(2) len 4], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\255;\255;\255;\256;\255;\255;\255;\255;")[intExpr(2) len 4], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\256;\255;\255;\255;\255;\255;\255;\255;")[intExpr(2) len 5], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\255;\255;\256;\255;\255;\255;\255;\255;")[intExpr(2) len 5], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\255;\255;\255;\255;\256;\255;\255;\255;")[intExpr(2) len 5], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\256;\255;\255;\255;\255;\255;\255;\255;")[intExpr(2) len 6], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\255;\255;\255;\256;\255;\255;\255;\255;")[intExpr(2) len 6], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\255;\255;\255;\255;\255;\256;\255;\255;")[intExpr(2) len 6], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\256;\255;\255;\255;\255;\255;\255;\255;")[intExpr(2) len 7], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\255;\255;\255;\255;\256;\255;\255;\255;")[intExpr(2) len 7], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\255;\255;\255;\255;\255;\255;\256;\255;")[intExpr(2) len 7], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\255;\255;\255;\255;\255;\255;\255;\128;")[intExpr(2) len 8], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\255;\255;\255;\255;\256;\255;\255;\127;")[intExpr(2) len 8], UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int(striExpr("\000;\256;\255;\255;\255;\255;\255;\255;\127;")[intExpr(2) len 8], UNSIGNED, LE)) then
      writeln("Conversion of unsigned little endian byte string to integer with substring does not raise RANGE_ERROR.");
      okay := FALSE;
    end if;

    if  not raisesRangeError(bytes2Int("\255;\255;\255;\255;\255;\255;\255;\255;\127;\000;",   SIGNED, LE)) or
        not raisesRangeError(bytes2Int("\255;\255;\255;\255;\255;\255;\255;\128;\000;\000;",   SIGNED, LE)) or
        not raisesRangeError(bytes2Int("\255;\255;\255;\256;\255;\255;\255;\127;\000;\000;",   SIGNED, LE)) or
        not raisesRangeError(bytes2Int("\255;\255;\255;\255;\255;\255;\255;\255;\128;\255;",   SIGNED, LE)) or
        not raisesRangeError(bytes2Int("\255;\255;\255;\255;\255;\255;\255;\127;\255;\255;",   SIGNED, LE)) or
        not raisesRangeError(bytes2Int("\255;\255;\255;\256;\255;\255;\255;\128;\255;\255;",   SIGNED, LE)) or
        not raisesRangeError(bytes2Int("\255;\255;\255;\255;\255;\255;\255;\255;\127;\000;", UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int("\255;\255;\255;\255;\255;\255;\255;\128;\000;\000;", UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int("\255;\255;\255;\256;\255;\255;\255;\127;\000;\000;", UNSIGNED, LE)) then
      writeln("Illegal conversion of little endian byte string to integer does not raise RANGE_ERROR.");
      okay := FALSE;
    end if;

    if okay then
      writeln("Conversion of little endian byte string to integer works correct.");
    else
      writeln(" ***** Conversion of little endian byte string to integer does not work correct.");
      writeln;
    end if;
  end func;


const proc: check_leb128 is func
  local
    var boolean: okay is TRUE;
  begin
    if  leb128ToInt("\0;")           <>    0 or
        leb128ToInt("\1;")           <>    1 or
        leb128ToInt("\62;")          <>   62 or
        leb128ToInt("\63;")          <>   63 or
        leb128ToInt("\192;\0;")      <>   64 or
        leb128ToInt("\193;\0;")      <>   65 or
        leb128ToInt("\254;\0;")      <>  126 or
        leb128ToInt("\255;\0;")      <>  127 or
        leb128ToInt("\128;\1;")      <>  128 or
        leb128ToInt("\129;\1;")      <>  129 or
        leb128ToInt("\254;\1;")      <>  254 or
        leb128ToInt("\255;\1;")      <>  255 or
        leb128ToInt("\128;\2;")      <>  256 or
        leb128ToInt("\129;\2;")      <>  257 or
        leb128ToInt("\254;\2;")      <>  382 or
        leb128ToInt("\255;\2;")      <>  383 or
        leb128ToInt("\128;\62;")     <> 7936 or
        leb128ToInt("\129;\62;")     <> 7937 or
        leb128ToInt("\254;\62;")     <> 8062 or
        leb128ToInt("\255;\62;")     <> 8063 or
        leb128ToInt("\128;\63;")     <> 8064 or
        leb128ToInt("\129;\63;")     <> 8065 or
        leb128ToInt("\254;\63;")     <> 8190 or
        leb128ToInt("\255;\63;")     <> 8191 or
        leb128ToInt("\128;\192;\0;") <> 8192 or
        leb128ToInt("\129;\192;\0;") <> 8193 or
        leb128ToInt("\254;\192;\0;") <> 8318 or
        leb128ToInt("\255;\192;\0;") <> 8319 or
        leb128ToInt("\254;\255;\63;")                                   <>             1048574 or
        leb128ToInt("\255;\255;\63;")                                   <>             1048575 or
        leb128ToInt("\128;\128;\192;\0;")                               <>             1048576 or
        leb128ToInt("\129;\128;\192;\0;")                               <>             1048577 or
        leb128ToInt("\254;\255;\255;\63;")                              <>           134217726 or
        leb128ToInt("\255;\255;\255;\63;")                              <>           134217727 or
        leb128ToInt("\128;\128;\128;\192;\0;")                          <>           134217728 or
        leb128ToInt("\129;\128;\128;\192;\0;")                          <>           134217729 or
        leb128ToInt("\254;\255;\255;\255;\63;")                         <>         17179869182 or
        leb128ToInt("\255;\255;\255;\255;\63;")                         <>         17179869183 or
        leb128ToInt("\128;\128;\128;\128;\192;\0;")                     <>         17179869184 or
        leb128ToInt("\129;\128;\128;\128;\192;\0;")                     <>         17179869185 or
        leb128ToInt("\254;\255;\255;\255;\255;\63;")                    <>       2199023255550 or
        leb128ToInt("\255;\255;\255;\255;\255;\63;")                    <>       2199023255551 or
        leb128ToInt("\128;\128;\128;\128;\128;\192;\0;")                <>       2199023255552 or
        leb128ToInt("\129;\128;\128;\128;\128;\192;\0;")                <>       2199023255553 or
        leb128ToInt("\254;\255;\255;\255;\255;\255;\63;")               <>     281474976710654 or
        leb128ToInt("\255;\255;\255;\255;\255;\255;\63;")               <>     281474976710655 or
        leb128ToInt("\128;\128;\128;\128;\128;\128;\192;\0;")           <>     281474976710656 or
        leb128ToInt("\129;\128;\128;\128;\128;\128;\192;\0;")           <>     281474976710657 or
        leb128ToInt("\254;\255;\255;\255;\255;\255;\255;\63;")          <>   36028797018963966 or
        leb128ToInt("\255;\255;\255;\255;\255;\255;\255;\63;")          <>   36028797018963967 or
        leb128ToInt("\128;\128;\128;\128;\128;\128;\128;\192;\0;")      <>   36028797018963968 or
        leb128ToInt("\129;\128;\128;\128;\128;\128;\128;\192;\0;")      <>   36028797018963969 or
        leb128ToInt("\254;\255;\255;\255;\255;\255;\255;\255;\63;")     <> 4611686018427387902 or
        leb128ToInt("\255;\255;\255;\255;\255;\255;\255;\255;\63;")     <> 4611686018427387903 or
        leb128ToInt("\128;\128;\128;\128;\128;\128;\128;\128;\192;\0;") <> 4611686018427387904 or
        leb128ToInt("\129;\128;\128;\128;\128;\128;\128;\128;\192;\0;") <> 4611686018427387905 or
        leb128ToInt("\254;\255;\255;\255;\255;\255;\255;\255;\255;\0;") <> 9223372036854775806 or
        leb128ToInt("\255;\255;\255;\255;\255;\255;\255;\255;\255;\0;") <> 9223372036854775807 then
      writeln(" *** leb128ToInt() does not work correct for positive values.");
      okay := FALSE;
    end if;

    if  leb128ToInt("\127;")           <>    -1 or
        leb128ToInt("\126;")           <>    -2 or
        leb128ToInt("\65;")            <>   -63 or
        leb128ToInt("\64;")            <>   -64 or
        leb128ToInt("\191;\127;")      <>   -65 or
        leb128ToInt("\190;\127;")      <>   -66 or
        leb128ToInt("\129;\127;")      <>  -127 or
        leb128ToInt("\128;\127;")      <>  -128 or
        leb128ToInt("\255;\126;")      <>  -129 or
        leb128ToInt("\254;\126;")      <>  -130 or
        leb128ToInt("\129;\126;")      <>  -255 or
        leb128ToInt("\128;\126;")      <>  -256 or
        leb128ToInt("\255;\65;")       <> -7937 or
        leb128ToInt("\254;\65;")       <> -7938 or
        leb128ToInt("\129;\65;")       <> -8063 or
        leb128ToInt("\128;\65;")       <> -8064 or
        leb128ToInt("\255;\64;")       <> -8065 or
        leb128ToInt("\254;\64;")       <> -8066 or
        leb128ToInt("\129;\64;")       <> -8191 or
        leb128ToInt("\128;\64;")       <> -8192 or
        leb128ToInt("\255;\191;\127;") <> -8193 or
        leb128ToInt("\254;\191;\127;") <> -8194 or
        leb128ToInt("\129;\191;\127;") <> -8319 or
        leb128ToInt("\128;\191;\127;") <> -8320 or
        leb128ToInt("\129;\128;\64;")                                     <>             -1048575 or
        leb128ToInt("\128;\128;\64;")                                     <>             -1048576 or
        leb128ToInt("\255;\255;\191;\127;")                               <>             -1048577 or
        leb128ToInt("\254;\255;\191;\127;")                               <>             -1048578 or
        leb128ToInt("\129;\128;\128;\64;")                                <>           -134217727 or
        leb128ToInt("\128;\128;\128;\64;")                                <>           -134217728 or
        leb128ToInt("\255;\255;\255;\191;\127;")                          <>           -134217729 or
        leb128ToInt("\254;\255;\255;\191;\127;")                          <>           -134217730 or
        leb128ToInt("\129;\128;\128;\128;\64;")                           <>         -17179869183 or
        leb128ToInt("\128;\128;\128;\128;\64;")                           <>         -17179869184 or
        leb128ToInt("\255;\255;\255;\255;\191;\127;")                     <>         -17179869185 or
        leb128ToInt("\254;\255;\255;\255;\191;\127;")                     <>         -17179869186 or
        leb128ToInt("\129;\128;\128;\128;\128;\64;")                      <>       -2199023255551 or
        leb128ToInt("\128;\128;\128;\128;\128;\64;")                      <>       -2199023255552 or
        leb128ToInt("\255;\255;\255;\255;\255;\191;\127;")                <>       -2199023255553 or
        leb128ToInt("\254;\255;\255;\255;\255;\191;\127;")                <>       -2199023255554 or
        leb128ToInt("\129;\128;\128;\128;\128;\128;\64;")                 <>     -281474976710655 or
        leb128ToInt("\128;\128;\128;\128;\128;\128;\64;")                 <>     -281474976710656 or
        leb128ToInt("\255;\255;\255;\255;\255;\255;\191;\127;")           <>     -281474976710657 or
        leb128ToInt("\254;\255;\255;\255;\255;\255;\191;\127;")           <>     -281474976710658 or
        leb128ToInt("\129;\128;\128;\128;\128;\128;\128;\64;")            <>   -36028797018963967 or
        leb128ToInt("\128;\128;\128;\128;\128;\128;\128;\64;")            <>   -36028797018963968 or
        leb128ToInt("\255;\255;\255;\255;\255;\255;\255;\191;\127;")      <>   -36028797018963969 or
        leb128ToInt("\254;\255;\255;\255;\255;\255;\255;\191;\127;")      <>   -36028797018963970 or
        leb128ToInt("\129;\128;\128;\128;\128;\128;\128;\128;\64;")       <> -4611686018427387903 or
        leb128ToInt("\128;\128;\128;\128;\128;\128;\128;\128;\64;")       <> -4611686018427387904 or
        leb128ToInt("\255;\255;\255;\255;\255;\255;\255;\255;\191;\127;") <> -4611686018427387905 or
        leb128ToInt("\254;\255;\255;\255;\255;\255;\255;\255;\191;\127;") <> -4611686018427387906 or
        leb128ToInt("\129;\128;\128;\128;\128;\128;\128;\128;\128;\127;") <> -9223372036854775807 or
        leb128ToInt("\128;\128;\128;\128;\128;\128;\128;\128;\128;\127;") <>        integer.first then
      writeln(" *** leb128ToInt() does not work correct for negative values.");
      okay := FALSE;
    end if;

    if  uLeb128ToInt("\0;")           <>     0 or
        uLeb128ToInt("\1;")           <>     1 or
        uLeb128ToInt("\62;")          <>    62 or
        uLeb128ToInt("\63;")          <>    63 or
        uLeb128ToInt("\64;")          <>    64 or
        uLeb128ToInt("\65;")          <>    65 or
        uLeb128ToInt("\126;")         <>   126 or
        uLeb128ToInt("\127;")         <>   127 or
        uLeb128ToInt("\128;\1;")      <>   128 or
        uLeb128ToInt("\129;\1;")      <>   129 or
        uLeb128ToInt("\254;\1;")      <>   254 or
        uLeb128ToInt("\255;\1;")      <>   255 or
        uLeb128ToInt("\128;\2;")      <>   256 or
        uLeb128ToInt("\129;\2;")      <>   257 or
        uLeb128ToInt("\254;\2;")      <>   382 or
        uLeb128ToInt("\255;\2;")      <>   383 or
        uLeb128ToInt("\128;\62;")     <>  7936 or
        uLeb128ToInt("\129;\62;")     <>  7937 or
        uLeb128ToInt("\254;\62;")     <>  8062 or
        uLeb128ToInt("\255;\62;")     <>  8063 or
        uLeb128ToInt("\128;\63;")     <>  8064 or
        uLeb128ToInt("\129;\63;")     <>  8065 or
        uLeb128ToInt("\254;\63;")     <>  8190 or
        uLeb128ToInt("\255;\63;")     <>  8191 or
        uLeb128ToInt("\128;\64;")     <>  8192 or
        uLeb128ToInt("\129;\64;")     <>  8193 or
        uLeb128ToInt("\254;\64;")     <>  8318 or
        uLeb128ToInt("\255;\64;")     <>  8319 or
        uLeb128ToInt("\128;\65;")     <>  8320 or
        uLeb128ToInt("\129;\65;")     <>  8321 or
        uLeb128ToInt("\254;\65;")     <>  8446 or
        uLeb128ToInt("\255;\65;")     <>  8447 or
        uLeb128ToInt("\128;\126;")    <> 16128 or
        uLeb128ToInt("\129;\126;")    <> 16129 or
        uLeb128ToInt("\254;\126;")    <> 16254 or
        uLeb128ToInt("\255;\126;")    <> 16255 or
        uLeb128ToInt("\128;\127;")    <> 16256 or
        uLeb128ToInt("\129;\127;")    <> 16257 or
        uLeb128ToInt("\254;\127;")    <> 16382 or
        uLeb128ToInt("\255;\127;")    <> 16383 or
        uLeb128ToInt("\128;\128;\1;") <> 16384 or
        uLeb128ToInt("\129;\128;\1;") <> 16385 or
        uLeb128ToInt("\254;\128;\1;") <> 16510 or
        uLeb128ToInt("\255;\128;\1;") <> 16511 or
        uLeb128ToInt("\254;\255;\127;")                               <>             2097150 or
        uLeb128ToInt("\255;\255;\127;")                               <>             2097151 or
        uLeb128ToInt("\128;\128;\128;\1;")                            <>             2097152 or
        uLeb128ToInt("\129;\128;\128;\1;")                            <>             2097153 or
        uLeb128ToInt("\254;\255;\255;\127;")                          <>           268435454 or
        uLeb128ToInt("\255;\255;\255;\127;")                          <>           268435455 or
        uLeb128ToInt("\128;\128;\128;\128;\1;")                       <>           268435456 or
        uLeb128ToInt("\129;\128;\128;\128;\1;")                       <>           268435457 or
        uLeb128ToInt("\254;\255;\255;\255;\127;")                     <>         34359738366 or
        uLeb128ToInt("\255;\255;\255;\255;\127;")                     <>         34359738367 or
        uLeb128ToInt("\128;\128;\128;\128;\128;\1;")                  <>         34359738368 or
        uLeb128ToInt("\129;\128;\128;\128;\128;\1;")                  <>         34359738369 or
        uLeb128ToInt("\254;\255;\255;\255;\255;\127;")                <>       4398046511102 or
        uLeb128ToInt("\255;\255;\255;\255;\255;\127;")                <>       4398046511103 or
        uLeb128ToInt("\128;\128;\128;\128;\128;\128;\1;")             <>       4398046511104 or
        uLeb128ToInt("\129;\128;\128;\128;\128;\128;\1;")             <>       4398046511105 or
        uLeb128ToInt("\254;\255;\255;\255;\255;\255;\127;")           <>     562949953421310 or
        uLeb128ToInt("\255;\255;\255;\255;\255;\255;\127;")           <>     562949953421311 or
        uLeb128ToInt("\128;\128;\128;\128;\128;\128;\128;\1;")        <>     562949953421312 or
        uLeb128ToInt("\129;\128;\128;\128;\128;\128;\128;\1;")        <>     562949953421313 or
        uLeb128ToInt("\254;\255;\255;\255;\255;\255;\255;\127;")      <>   72057594037927934 or
        uLeb128ToInt("\255;\255;\255;\255;\255;\255;\255;\127;")      <>   72057594037927935 or
        uLeb128ToInt("\128;\128;\128;\128;\128;\128;\128;\128;\1;")   <>   72057594037927936 or
        uLeb128ToInt("\129;\128;\128;\128;\128;\128;\128;\128;\1;")   <>   72057594037927937 or
        uLeb128ToInt("\254;\255;\255;\255;\255;\255;\255;\255;\127;") <> 9223372036854775806 or
        uLeb128ToInt("\255;\255;\255;\255;\255;\255;\255;\255;\127;") <> 9223372036854775807 then
      writeln(" *** uLeb128ToInt() does not work correct.");
      okay := FALSE;
    end if;

    if  leb128(                  0) <> "\0;" or
        leb128(                  1) <> "\1;" or
        leb128(                 62) <> "\62;" or
        leb128(                 63) <> "\63;" or
        leb128(                 64) <> "\192;\0;" or
        leb128(                 65) <> "\193;\0;" or
        leb128(                126) <> "\254;\0;" or
        leb128(                127) <> "\255;\0;" or
        leb128(                128) <> "\128;\1;" or
        leb128(                129) <> "\129;\1;" or
        leb128(                254) <> "\254;\1;" or
        leb128(                255) <> "\255;\1;" or
        leb128(                256) <> "\128;\2;" or
        leb128(                257) <> "\129;\2;" or
        leb128(                382) <> "\254;\2;" or
        leb128(                383) <> "\255;\2;" or
        leb128(               7936) <> "\128;\62;" or
        leb128(               7937) <> "\129;\62;" or
        leb128(               8062) <> "\254;\62;" or
        leb128(               8063) <> "\255;\62;" or
        leb128(               8064) <> "\128;\63;" or
        leb128(               8065) <> "\129;\63;" or
        leb128(               8190) <> "\254;\63;" or
        leb128(               8191) <> "\255;\63;" or
        leb128(               8192) <> "\128;\192;\0;" or
        leb128(               8193) <> "\129;\192;\0;" or
        leb128(               8318) <> "\254;\192;\0;" or
        leb128(               8319) <> "\255;\192;\0;" or
        leb128(            1048574) <> "\254;\255;\63;" or
        leb128(            1048575) <> "\255;\255;\63;" or
        leb128(            1048576) <> "\128;\128;\192;\0;" or
        leb128(            1048577) <> "\129;\128;\192;\0;" or
        leb128(          134217726) <> "\254;\255;\255;\63;" or
        leb128(          134217727) <> "\255;\255;\255;\63;" or
        leb128(          134217728) <> "\128;\128;\128;\192;\0;" or
        leb128(          134217729) <> "\129;\128;\128;\192;\0;" or
        leb128(        17179869182) <> "\254;\255;\255;\255;\63;" or
        leb128(        17179869183) <> "\255;\255;\255;\255;\63;" or
        leb128(        17179869184) <> "\128;\128;\128;\128;\192;\0;" or
        leb128(        17179869185) <> "\129;\128;\128;\128;\192;\0;" or
        leb128(      2199023255550) <> "\254;\255;\255;\255;\255;\63;" or
        leb128(      2199023255551) <> "\255;\255;\255;\255;\255;\63;" or
        leb128(      2199023255552) <> "\128;\128;\128;\128;\128;\192;\0;" or
        leb128(      2199023255553) <> "\129;\128;\128;\128;\128;\192;\0;" or
        leb128(    281474976710654) <> "\254;\255;\255;\255;\255;\255;\63;" or
        leb128(    281474976710655) <> "\255;\255;\255;\255;\255;\255;\63;" or
        leb128(    281474976710656) <> "\128;\128;\128;\128;\128;\128;\192;\0;" or
        leb128(    281474976710657) <> "\129;\128;\128;\128;\128;\128;\192;\0;" or
        leb128(  36028797018963966) <> "\254;\255;\255;\255;\255;\255;\255;\63;" or
        leb128(  36028797018963967) <> "\255;\255;\255;\255;\255;\255;\255;\63;" or
        leb128(  36028797018963968) <> "\128;\128;\128;\128;\128;\128;\128;\192;\0;" or
        leb128(  36028797018963969) <> "\129;\128;\128;\128;\128;\128;\128;\192;\0;" or
        leb128(4611686018427387902) <> "\254;\255;\255;\255;\255;\255;\255;\255;\63;" or
        leb128(4611686018427387903) <> "\255;\255;\255;\255;\255;\255;\255;\255;\63;" or
        leb128(4611686018427387904) <> "\128;\128;\128;\128;\128;\128;\128;\128;\192;\0;" or
        leb128(4611686018427387905) <> "\129;\128;\128;\128;\128;\128;\128;\128;\192;\0;" or
        leb128(9223372036854775806) <> "\254;\255;\255;\255;\255;\255;\255;\255;\255;\0;" or
        leb128(9223372036854775807) <> "\255;\255;\255;\255;\255;\255;\255;\255;\255;\0;" then
      writeln(" *** leb128() does not work correct for positive values.");
      okay := FALSE;
    end if;

    if  leb128(                  -1) <> "\127;" or
        leb128(                  -2) <> "\126;" or
        leb128(                 -63) <> "\65;" or
        leb128(                 -64) <> "\64;" or
        leb128(                 -65) <> "\191;\127;" or
        leb128(                 -66) <> "\190;\127;" or
        leb128(                -127) <> "\129;\127;" or
        leb128(                -128) <> "\128;\127;" or
        leb128(                -129) <> "\255;\126;" or
        leb128(                -130) <> "\254;\126;" or
        leb128(                -255) <> "\129;\126;" or
        leb128(                -256) <> "\128;\126;" or
        leb128(               -7937) <> "\255;\65;" or
        leb128(               -7938) <> "\254;\65;" or
        leb128(               -8063) <> "\129;\65;" or
        leb128(               -8064) <> "\128;\65;" or
        leb128(               -8065) <> "\255;\64;" or
        leb128(               -8066) <> "\254;\64;" or
        leb128(               -8191) <> "\129;\64;" or
        leb128(               -8192) <> "\128;\64;" or
        leb128(               -8193) <> "\255;\191;\127;" or
        leb128(               -8194) <> "\254;\191;\127;" or
        leb128(               -8319) <> "\129;\191;\127;" or
        leb128(               -8320) <> "\128;\191;\127;" or
        leb128(            -1048575) <> "\129;\128;\64;" or
        leb128(            -1048576) <> "\128;\128;\64;" or
        leb128(            -1048577) <> "\255;\255;\191;\127;" or
        leb128(            -1048578) <> "\254;\255;\191;\127;" or
        leb128(          -134217727) <> "\129;\128;\128;\64;" or
        leb128(          -134217728) <> "\128;\128;\128;\64;" or
        leb128(          -134217729) <> "\255;\255;\255;\191;\127;" or
        leb128(          -134217730) <> "\254;\255;\255;\191;\127;" or
        leb128(        -17179869183) <> "\129;\128;\128;\128;\64;" or
        leb128(        -17179869184) <> "\128;\128;\128;\128;\64;" or
        leb128(        -17179869185) <> "\255;\255;\255;\255;\191;\127;" or
        leb128(        -17179869186) <> "\254;\255;\255;\255;\191;\127;" or
        leb128(      -2199023255551) <> "\129;\128;\128;\128;\128;\64;" or
        leb128(      -2199023255552) <> "\128;\128;\128;\128;\128;\64;" or
        leb128(      -2199023255553) <> "\255;\255;\255;\255;\255;\191;\127;" or
        leb128(      -2199023255554) <> "\254;\255;\255;\255;\255;\191;\127;" or
        leb128(    -281474976710655) <> "\129;\128;\128;\128;\128;\128;\64;" or
        leb128(    -281474976710656) <> "\128;\128;\128;\128;\128;\128;\64;" or
        leb128(    -281474976710657) <> "\255;\255;\255;\255;\255;\255;\191;\127;" or
        leb128(    -281474976710658) <> "\254;\255;\255;\255;\255;\255;\191;\127;" or
        leb128(  -36028797018963967) <> "\129;\128;\128;\128;\128;\128;\128;\64;" or
        leb128(  -36028797018963968) <> "\128;\128;\128;\128;\128;\128;\128;\64;" or
        leb128(  -36028797018963969) <> "\255;\255;\255;\255;\255;\255;\255;\191;\127;" or
        leb128(  -36028797018963970) <> "\254;\255;\255;\255;\255;\255;\255;\191;\127;" or
        leb128(-4611686018427387903) <> "\129;\128;\128;\128;\128;\128;\128;\128;\64;" or
        leb128(-4611686018427387904) <> "\128;\128;\128;\128;\128;\128;\128;\128;\64;" or
        leb128(-4611686018427387905) <> "\255;\255;\255;\255;\255;\255;\255;\255;\191;\127;" or
        leb128(-4611686018427387906) <> "\254;\255;\255;\255;\255;\255;\255;\255;\191;\127;" or
        leb128(-9223372036854775807) <> "\129;\128;\128;\128;\128;\128;\128;\128;\128;\127;" or
        leb128(       integer.first) <> "\128;\128;\128;\128;\128;\128;\128;\128;\128;\127;" then
      writeln(" *** leb128() does not work correct for negative values.");
      okay := FALSE;
    end if;

    if  uLeb128(                  0) <> "\0;" or
        uLeb128(                  1) <> "\1;" or
        uLeb128(                 62) <> "\62;" or
        uLeb128(                 63) <> "\63;" or
        uLeb128(                 64) <> "\64;" or
        uLeb128(                 65) <> "\65;" or
        uLeb128(                126) <> "\126;" or
        uLeb128(                127) <> "\127;" or
        uLeb128(                128) <> "\128;\1;" or
        uLeb128(                129) <> "\129;\1;" or
        uLeb128(                254) <> "\254;\1;" or
        uLeb128(                255) <> "\255;\1;" or
        uLeb128(                256) <> "\128;\2;" or
        uLeb128(                257) <> "\129;\2;" or
        uLeb128(                382) <> "\254;\2;" or
        uLeb128(                383) <> "\255;\2;" or
        uLeb128(               7936) <> "\128;\62;" or
        uLeb128(               7937) <> "\129;\62;" or
        uLeb128(               8062) <> "\254;\62;" or
        uLeb128(               8063) <> "\255;\62;" or
        uLeb128(               8064) <> "\128;\63;" or
        uLeb128(               8065) <> "\129;\63;" or
        uLeb128(               8190) <> "\254;\63;" or
        uLeb128(               8191) <> "\255;\63;" or
        uLeb128(               8192) <> "\128;\64;" or
        uLeb128(               8193) <> "\129;\64;" or
        uLeb128(               8318) <> "\254;\64;" or
        uLeb128(               8319) <> "\255;\64;" or
        uLeb128(               8320) <> "\128;\65;" or
        uLeb128(               8321) <> "\129;\65;" or
        uLeb128(               8446) <> "\254;\65;" or
        uLeb128(               8447) <> "\255;\65;" or
        uLeb128(              16128) <> "\128;\126;" or
        uLeb128(              16129) <> "\129;\126;" or
        uLeb128(              16254) <> "\254;\126;" or
        uLeb128(              16255) <> "\255;\126;" or
        uLeb128(              16256) <> "\128;\127;" or
        uLeb128(              16257) <> "\129;\127;" or
        uLeb128(              16382) <> "\254;\127;" or
        uLeb128(              16383) <> "\255;\127;" or
        uLeb128(              16384) <> "\128;\128;\1;" or
        uLeb128(              16385) <> "\129;\128;\1;" or
        uLeb128(              16510) <> "\254;\128;\1;" or
        uLeb128(              16511) <> "\255;\128;\1;" or
        uLeb128(            2097150) <> "\254;\255;\127;" or
        uLeb128(            2097151) <> "\255;\255;\127;" or
        uLeb128(            2097152) <> "\128;\128;\128;\1;" or
        uLeb128(            2097153) <> "\129;\128;\128;\1;" or
        uLeb128(          268435454) <> "\254;\255;\255;\127;" or
        uLeb128(          268435455) <> "\255;\255;\255;\127;" or
        uLeb128(          268435456) <> "\128;\128;\128;\128;\1;" or
        uLeb128(          268435457) <> "\129;\128;\128;\128;\1;" or
        uLeb128(        34359738366) <> "\254;\255;\255;\255;\127;" or
        uLeb128(        34359738367) <> "\255;\255;\255;\255;\127;" or
        uLeb128(        34359738368) <> "\128;\128;\128;\128;\128;\1;" or
        uLeb128(        34359738369) <> "\129;\128;\128;\128;\128;\1;" or
        uLeb128(      4398046511102) <> "\254;\255;\255;\255;\255;\127;" or
        uLeb128(      4398046511103) <> "\255;\255;\255;\255;\255;\127;" or
        uLeb128(      4398046511104) <> "\128;\128;\128;\128;\128;\128;\1;" or
        uLeb128(      4398046511105) <> "\129;\128;\128;\128;\128;\128;\1;" or
        uLeb128(    562949953421310) <> "\254;\255;\255;\255;\255;\255;\127;" or
        uLeb128(    562949953421311) <> "\255;\255;\255;\255;\255;\255;\127;" or
        uLeb128(    562949953421312) <> "\128;\128;\128;\128;\128;\128;\128;\1;" or
        uLeb128(    562949953421313) <> "\129;\128;\128;\128;\128;\128;\128;\1;" or
        uLeb128(  72057594037927934) <> "\254;\255;\255;\255;\255;\255;\255;\127;" or
        uLeb128(  72057594037927935) <> "\255;\255;\255;\255;\255;\255;\255;\127;" or
        uLeb128(  72057594037927936) <> "\128;\128;\128;\128;\128;\128;\128;\128;\1;" or
        uLeb128(  72057594037927937) <> "\129;\128;\128;\128;\128;\128;\128;\128;\1;" or
        uLeb128(9223372036854775806) <> "\254;\255;\255;\255;\255;\255;\255;\255;\127;" or
        uLeb128(9223372036854775807) <> "\255;\255;\255;\255;\255;\255;\255;\255;\127;" then
      writeln(" *** uLeb128() does not work correct.");
      okay := FALSE;
    end if;

    if okay then
      writeln("Conversion to and from LEB128 encoding works correct.");
    end if;
  end func;


const proc: check_negation is func
  local
    var boolean: okay is TRUE;
    var integer: number is 0;
    var integer: neg_number is 10;
  begin
    for number range -10 to 10 do
      if -number <> neg_number then
        write(" ***** -");
        write(number);
        writeln(" is not correct computed.");
        okay := FALSE;
      end if;
      decr(neg_number);
      if +number <> number then
        write(" ***** +");
        write(number);
        writeln(" is not correct computed.");
        okay := FALSE;
      end if;
    end for;
    if okay then
      writeln("-i is correct computed in the range -10 to 10.");
    end if;
  end func;


(**
 *  Tests for the compiler optimization to reduce overflow checking
 *  for addition and subtraction.
 *)
const func boolean: check_reduced_overflow_checking_for_sums is func
  result
    var boolean: okay is TRUE;
  begin
    if  intExpr( integer.last) div integer.first +        integer.first <>        integer.first or
        intExpr(integer.first) div integer.first +        integer.first <> -9223372036854775807 or
        intExpr( integer.last) div -integer.last + -9223372036854775807 <>        integer.first or
        intExpr(integer.first) div -integer.last + -9223372036854775807 <> -9223372036854775806 or
        intExpr( integer.last) div  -34359738368 + -9223372036586340353 <>        integer.first or
        intExpr(integer.first) div  -34359738368 + -9223372036586340353 <> -9223372036317904897 or
        intExpr( integer.last) div   -1234567890 + -9223372029383844391 <>        integer.first or
        intExpr(integer.first) div   -1234567890 + -9223372029383844391 <> -9223372021912912974 or
        intExpr( integer.last) div            -2 + -4611686018427387905 <>        integer.first or
        intExpr(integer.first) div            -2 + -4611686018427387905 <>                   -1 or
        intExpr( integer.last) div            -1 +                   -1 <>        integer.first or
        intExpr(integer.first) div             1 +                    0 <>        integer.first or
        intExpr(integer.first) div             2 + -4611686018427387904 <>        integer.first or
        intExpr( integer.last) div             2 + -4611686018427387904 <>                   -1 or
        intExpr(integer.first) div    1234567890 + -9223372029383844391 <>        integer.first or
        intExpr( integer.last) div    1234567890 + -9223372029383844391 <> -9223372021912912974 or
        intExpr(integer.first) div   34359738368 + -9223372036586340352 <>        integer.first or
        intExpr( integer.last) div   34359738368 + -9223372036586340352 <> -9223372036317904897 or
        intExpr(integer.first) div  integer.last + -9223372036854775807 <>        integer.first or
        intExpr( integer.last) div  integer.last + -9223372036854775807 <> -9223372036854775806 then
      writeln(" ***** Reduced overflow check for sums failed: Minimum division result if the divisor is known.");
      okay := FALSE;
    end if;

    if  intExpr(integer.first) div integer.first +  9223372036854775806 <>         integer.last or
        intExpr( integer.last) div integer.first +  9223372036854775806 <>  9223372036854775806 or
        intExpr(integer.first) div -integer.last +  9223372036854775806 <>         integer.last or
        intExpr( integer.last) div -integer.last +  9223372036854775806 <>  9223372036854775805 or
        intExpr(integer.first) div  -34359738368 +  9223372036586340351 <>         integer.last or
        intExpr(integer.first) div  -34359738368 +  9223372036586340351 <>  9223372036854775807 or
        intExpr(integer.first) div   -1234567890 +  9223372029383844390 <>         integer.last or
        intExpr( integer.last) div   -1234567890 +  9223372029383844390 <>  9223372021912912973 or
        intExpr(integer.first) div            -2 +  4611686018427387903 <>         integer.last or
        intExpr( integer.last) div            -2 +  4611686018427387903 <>                    0 or
        intExpr( integer.last) div             1 +                    0 <>         integer.last or
        intExpr( integer.last) div             2 +  4611686018427387904 <>         integer.last or
        intExpr(integer.first) div             2 +  4611686018427387904 <>                    0 or
        intExpr( integer.last) div    1234567890 +  9223372029383844390 <>         integer.last or
        intExpr(integer.first) div    1234567890 +  9223372029383844390 <>  9223372021912912973 or
        intExpr( integer.last) div   34359738368 +  9223372036586340352 <>         integer.last or
        intExpr(integer.first) div   34359738368 +  9223372036586340352 <>  9223372036317904896 or
        intExpr( integer.last) div  integer.last +  9223372036854775806 <>         integer.last or
        intExpr(integer.first) div  integer.last +  9223372036854775806 <>  9223372036854775805 then
      writeln(" ***** Reduced overflow check for sums failed: Maximum division result if the divisor is known.");
      okay := FALSE;
    end if;

    if         integer.first div intExpr( 1) +                    0 <>        integer.first or
        -9223372036854775807 div intExpr( 1) +                   -1 <>        integer.first or
        -9223372036854775807 div intExpr(-1) +                   -1 <>  9223372036854775806 or
        -9223372036854775806 div intExpr( 1) +                   -2 <>        integer.first or
        -9223372036854775806 div intExpr(-1) +                   -2 <>  9223372036854775804 or
        -4611686018427387904 div intExpr( 1) + -4611686018427387904 <>        integer.first or
        -4611686018427387904 div intExpr(-1) + -4611686018427387904 <>                    0 or
                 -1234567890 div intExpr( 1) + -9223372035620207918 <>        integer.first or
                 -1234567890 div intExpr(-1) + -9223372035620207918 <> -9223372034385640028 or
                          -1 div intExpr( 1) + -9223372036854775807 <>        integer.first or
                          -1 div intExpr(-1) + -9223372036854775807 <> -9223372036854775806 or
                           1 div intExpr(-1) + -9223372036854775807 <>        integer.first or
                           1 div intExpr( 1) + -9223372036854775807 <> -9223372036854775806 or
                  1234567890 div intExpr(-1) + -9223372035620207918 <>        integer.first or
                  1234567890 div intExpr( 1) + -9223372035620207918 <> -9223372034385640028 or
         4611686018427387904 div intExpr(-1) + -4611686018427387904 <>        integer.first or
         4611686018427387904 div intExpr( 1) + -4611686018427387904 <>                    0 or
         9223372036854775806 div intExpr(-1) +                   -2 <>        integer.first or
         9223372036854775806 div intExpr( 1) +                   -2 <>  9223372036854775804 or
         9223372036854775807 div intExpr(-1) +                   -1 <>        integer.first or
         9223372036854775807 div intExpr( 1) +                   -1 <>  9223372036854775806 then
      writeln(" ***** Reduced overflow check for sums failed: Minimum division result if the dividend is known.");
      okay := FALSE;
    end if;

    if  -9223372036854775807 div intExpr(-1) +                    0 <>         integer.last or
        -9223372036854775807 div intExpr( 1) +                    0 <> -9223372036854775807 or
        -9223372036854775806 div intExpr(-1) +                    1 <>         integer.last or
        -9223372036854775806 div intExpr( 1) +                    1 <> -9223372036854775805 or
        -4611686018427387904 div intExpr(-1) +  4611686018427387903 <>         integer.last or
        -4611686018427387904 div intExpr( 1) +  4611686018427387903 <>                   -1 or
                 -1234567890 div intExpr(-1) +  9223372035620207917 <>         integer.last or
                 -1234567890 div intExpr( 1) +  9223372035620207917 <>  9223372034385640027 or
                          -1 div intExpr(-1) +  9223372036854775806 <>         integer.last or
                          -1 div intExpr( 1) +  9223372036854775806 <>  9223372036854775805 or
                           1 div intExpr( 1) +  9223372036854775806 <>         integer.last or
                           1 div intExpr(-1) +  9223372036854775806 <>  9223372036854775805 or
                  1234567890 div intExpr( 1) +  9223372035620207917 <>         integer.last or
                  1234567890 div intExpr(-1) +  9223372035620207917 <>  9223372034385640027 or
         4611686018427387904 div intExpr( 1) +  4611686018427387903 <>         integer.last or
         4611686018427387904 div intExpr(-1) +  4611686018427387903 <>                   -1 or
         9223372036854775806 div intExpr( 1) +                    1 <>         integer.last or
         9223372036854775806 div intExpr(-1) +                    1 <> -9223372036854775805 or
         9223372036854775807 div intExpr( 1) +                    0 <>         integer.last or
         9223372036854775807 div intExpr(-1) +                    0 <> -9223372036854775807 then
      writeln(" ***** Reduced overflow check for sums failed: Maximum division result if the dividend is known.");
      okay := FALSE;
    end if;

    if  intExpr(       -integer.last) rem        integer.first +                   -1 <>        integer.first or
        intExpr(        integer.last) rem        integer.first +                   -1 <>  9223372036854775806 or
        intExpr(       -integer.last) rem -4611686018427387904 + -4611686018427387905 <>        integer.first or
        intExpr(        integer.last) rem -4611686018427387904 + -4611686018427387905 <>                   -2 or
        intExpr(       -integer.last) rem         -34359738368 + -9223372002495037441 <>        integer.first or
        intExpr(        integer.last) rem         -34359738368 + -9223372002495037441 <> -9223371968135299074 or
        intExpr(         -6172839449) rem          -1234567890 + -9223372035620207919 <>        integer.first or
        intExpr(          6172839449) rem          -1234567890 + -9223372035620207919 <> -9223372034385640030 or
        intExpr(       -123456789123) rem                   -2 + -9223372036854775807 <>        integer.first or
        intExpr(        123456789123) rem                   -2 + -9223372036854775807 <> -9223372036854775806 or
        intExpr(              -12345) rem                   -1 +        integer.first <>        integer.first or
        intExpr(               12345) rem                    1 +        integer.first <>        integer.first or
        intExpr(       -123456789123) rem                    2 + -9223372036854775807 <>        integer.first or
        intExpr(        123456789123) rem                    2 + -9223372036854775807 <> -9223372036854775806 or
        intExpr(         -6172839449) rem           1234567890 + -9223372035620207919 <>        integer.first or
        intExpr(          6172839449) rem           1234567890 + -9223372035620207919 <> -9223372034385640030 or
        intExpr(       -integer.last) rem          34359738368 + -9223372002495037441 <>        integer.first or
        intExpr(        integer.last) rem          34359738368 + -9223372002495037441 <> -9223371968135299074 or
        intExpr(       -integer.last) rem  4611686018427387904 + -4611686018427387905 <>        integer.first or
        intExpr(        integer.last) rem  4611686018427387904 + -4611686018427387905 <>                   -2 or
        intExpr(-9223372036854775806) rem         integer.last +                   -2 <>        integer.first or
        intExpr( 9223372036854775806) rem         integer.last +                   -2 <>  9223372036854775804 then
      writeln(" ***** Reduced overflow check for sums failed: Minimum remainder result if the divisor is known.");
      okay := FALSE;
    end if;

    if  intExpr(        integer.last) rem        integer.first +                    0 <>         integer.last or
        intExpr(       -integer.last) rem        integer.first +                    0 <> -9223372036854775807 or
        intExpr(        integer.last) rem -4611686018427387904 +  4611686018427387904 <>         integer.last or
        intExpr(       -integer.last) rem -4611686018427387904 +  4611686018427387904 <>                    1 or
        intExpr(        integer.last) rem         -34359738368 +  9223372002495037440 <>         integer.last or
        intExpr(       -integer.last) rem         -34359738368 +  9223372002495037440 <>  9223371968135299073 or
        intExpr(          6172839449) rem          -1234567890 +  9223372035620207918 <>         integer.last or
        intExpr(         -6172839449) rem          -1234567890 +  9223372035620207918 <>  9223372034385640029 or
        intExpr(        123456789123) rem                   -2 +  9223372036854775806 <>         integer.last or
        intExpr(       -123456789123) rem                   -2 +  9223372036854775806 <>  9223372036854775805 or
        intExpr(               12345) rem                   -1 +         integer.last <>         integer.last or
        intExpr(              -12345) rem                    1 +         integer.last <>         integer.last or
        intExpr(        123456789123) rem                    2 +  9223372036854775806 <>         integer.last or
        intExpr(       -123456789123) rem                    2 +  9223372036854775806 <>  9223372036854775805 or
        intExpr(          6172839449) rem           1234567890 +  9223372035620207918 <>         integer.last or
        intExpr(         -6172839449) rem           1234567890 +  9223372035620207918 <>  9223372034385640029 or
        intExpr(        integer.last) rem          34359738368 +  9223372002495037440 <>         integer.last or
        intExpr(       -integer.last) rem          34359738368 +  9223372002495037440 <>  9223371968135299073 or
        intExpr(        integer.last) rem  4611686018427387904 +  4611686018427387904 <>         integer.last or
        intExpr(       -integer.last) rem  4611686018427387904 +  4611686018427387904 <>                    1 or
        intExpr( 9223372036854775806) rem         integer.last +                    1 <>         integer.last or
        intExpr(-9223372036854775806) rem         integer.last +                    1 <> -9223372036854775805 then
      writeln(" ***** Reduced overflow check for sums failed: Maximum remainder result if the divisor is known.");
      okay := FALSE;
    end if;

    if  -9223372036854775807 rem intExpr(      integer.first) +                   -1 <>        integer.first or
        -9223372036854775807 rem intExpr(9223372036854775807) +                   -1 <>                   -1 or
                 -1234567890 rem intExpr(         2345678901) + -9223372035620207918 <>        integer.first or
                 -1234567890 rem intExpr(                  1) + -9223372035620207918 <> -9223372035620207918 or
                          -1 rem intExpr(                  2) + -9223372036854775807 <>        integer.first or
                          -1 rem intExpr(                  1) + -9223372036854775807 <> -9223372036854775807 or
                           0 rem intExpr(         1234567890) +        integer.first <>        integer.first or
                           1 rem intExpr(                  1) +        integer.first <>        integer.first or
                           1 rem intExpr(                  2) +        integer.first <> -9223372036854775807 or
                  1234567890 rem intExpr(                  1) +        integer.first <>        integer.first or
                  1234567890 rem intExpr(         2345678901) +        integer.first <> -9223372035620207918 or
         9223372036854775807 rem intExpr(9223372036854775807) +        integer.first <>        integer.first or
         9223372036854775807 rem intExpr(      integer.first) +        integer.first <>                   -1 then
      writeln(" ***** Reduced overflow check for sums failed: Minimum remainder result if the dividend is known.");
      okay := FALSE;
    end if;

    if  -9223372036854775807 rem intExpr(9223372036854775807) +         integer.last <>         integer.last or
        -9223372036854775807 rem intExpr(      integer.first) +         integer.last <>                    0 or
                 -1234567890 rem intExpr(                  1) +         integer.last <>         integer.last or
                 -1234567890 rem intExpr(         2345678901) +         integer.last <>  9223372035620207917 or
                          -1 rem intExpr(                  1) +         integer.last <>         integer.last or
                          -1 rem intExpr(                  2) +         integer.last <>  9223372036854775806 or
                           0 rem intExpr(         1234567890) +         integer.last <>         integer.last or
                           1 rem intExpr(                  2) +  9223372036854775806 <>         integer.last or
                           1 rem intExpr(                  1) +  9223372036854775806 <>  9223372036854775806 or
                  1234567890 rem intExpr(         2345678901) +  9223372035620207917 <>         integer.last or
                  1234567890 rem intExpr(                  1) +  9223372035620207917 <>  9223372035620207917 or
         9223372036854775807 rem intExpr(      integer.first) +                    0 <>         integer.last or
         9223372036854775807 rem intExpr(9223372036854775807) +                    0 <>                    0 then
      writeln(" ***** Reduced overflow check for sums failed: Maximum remainder result if the dividend is known.");
      okay := FALSE;
    end if;

    if  intExpr( integer.last) mdiv integer.first + -9223372036854775807 <>        integer.first or
        intExpr(integer.first) mdiv integer.first + -9223372036854775807 <> -9223372036854775806 or
        intExpr( integer.last) mdiv  -34359738368 + -9223372036586340352 <>        integer.first or
        intExpr(integer.first) mdiv  -34359738368 + -9223372036586340352 <> -9223372036317904896 or
        intExpr( integer.last) mdiv   -1234567890 + -9223372029383844390 <>        integer.first or
        intExpr(integer.first) mdiv   -1234567890 + -9223372029383844390 <> -9223372021912912973 or
        intExpr( integer.last) mdiv            -2 + -4611686018427387904 <>        integer.first or
        intExpr(integer.first) mdiv            -2 + -4611686018427387904 <>                    0 or
        intExpr( integer.last) mdiv            -1 +                   -1 <>        integer.first or
        intExpr(integer.first) mdiv             1 +                    0 <>        integer.first or
        intExpr(integer.first) mdiv             2 + -4611686018427387904 <>        integer.first or
        intExpr( integer.last) mdiv             2 + -4611686018427387904 <>                   -1 or
        intExpr(integer.first) mdiv    1234567890 + -9223372029383844390 <>        integer.first or
        intExpr( integer.last) mdiv    1234567890 + -9223372029383844390 <> -9223372021912912973 or
        intExpr(integer.first) mdiv   34359738368 + -9223372036586340352 <>        integer.first or
        intExpr( integer.last) mdiv   34359738368 + -9223372036586340352 <> -9223372036317904897 or
        intExpr(integer.first) mdiv  integer.last + -9223372036854775806 <>        integer.first or
        intExpr( integer.last) mdiv  integer.last + -9223372036854775806 <> -9223372036854775805 then
      writeln(" ***** Reduced overflow check for sums failed: Minimum mdiv division result if the divisor is known.");
      okay := FALSE;
    end if;

    if  intExpr(integer.first) mdiv integer.first +  9223372036854775806 <>         integer.last or
        intExpr( integer.last) mdiv integer.first +  9223372036854775806 <>  9223372036854775805 or
        intExpr(integer.first) mdiv  -34359738368 +  9223372036586340351 <>         integer.last or
        intExpr( integer.last) mdiv  -34359738368 +  9223372036586340351 <>  9223372036317904895 or
        intExpr(integer.first) mdiv   -1234567890 +  9223372029383844390 <>         integer.last or
        intExpr( integer.last) mdiv   -1234567890 +  9223372029383844390 <>  9223372021912912972 or
        intExpr(integer.first) mdiv            -2 +  4611686018427387903 <>         integer.last or
        intExpr( integer.last) mdiv            -2 +  4611686018427387903 <>                   -1 or
        intExpr( integer.last) mdiv             1 +                    0 <>         integer.last or
        intExpr( integer.last) mdiv             2 +  4611686018427387904 <>         integer.last or
        intExpr(integer.first) mdiv             2 +  4611686018427387904 <>                    0 or
        intExpr( integer.last) mdiv    1234567890 +  9223372029383844390 <>         integer.last or
        intExpr(integer.first) mdiv    1234567890 +  9223372029383844390 <>  9223372021912912972 or
        intExpr( integer.last) mdiv   34359738368 +  9223372036586340352 <>         integer.last or
        intExpr(integer.first) mdiv   34359738368 +  9223372036586340352 <>  9223372036317904896 or
        intExpr( integer.last) mdiv  integer.last +  9223372036854775806 <>         integer.last or
        intExpr(integer.first) mdiv  integer.last +  9223372036854775806 <>  9223372036854775804 then
      writeln(" ***** Reduced overflow check for sums failed: Maximum mdiv division result if the divisor is known.");
      okay := FALSE;
    end if;

    if         integer.first mdiv intExpr( 1) +                    0 <>        integer.first or
        -9223372036854775807 mdiv intExpr( 1) +                   -1 <>        integer.first or
        -9223372036854775807 mdiv intExpr(-1) +                   -1 <>  9223372036854775806 or
        -9223372036854775806 mdiv intExpr( 1) +                   -2 <>        integer.first or
        -9223372036854775806 mdiv intExpr(-1) +                   -2 <>  9223372036854775804 or
        -4611686018427387904 mdiv intExpr( 1) + -4611686018427387904 <>        integer.first or
        -4611686018427387904 mdiv intExpr(-1) + -4611686018427387904 <>                    0 or
                 -1234567890 mdiv intExpr( 1) + -9223372035620207918 <>        integer.first or
                 -1234567890 mdiv intExpr(-1) + -9223372035620207918 <> -9223372034385640028 or
                          -1 mdiv intExpr( 1) + -9223372036854775807 <>        integer.first or
                          -1 mdiv intExpr(-1) + -9223372036854775807 <> -9223372036854775806 or
                           1 mdiv intExpr(-1) + -9223372036854775807 <>        integer.first or
                           1 mdiv intExpr( 1) + -9223372036854775807 <> -9223372036854775806 or
                  1234567890 mdiv intExpr(-1) + -9223372035620207918 <>        integer.first or
                  1234567890 mdiv intExpr( 1) + -9223372035620207918 <> -9223372034385640028 or
         4611686018427387904 mdiv intExpr(-1) + -4611686018427387904 <>        integer.first or
         4611686018427387904 mdiv intExpr( 1) + -4611686018427387904 <>                    0 or
         9223372036854775806 mdiv intExpr(-1) +                   -2 <>        integer.first or
         9223372036854775806 mdiv intExpr( 1) +                   -2 <>  9223372036854775804 or
         9223372036854775807 mdiv intExpr(-1) +                   -1 <>        integer.first or
         9223372036854775807 mdiv intExpr( 1) +                   -1 <>  9223372036854775806 then
      writeln(" ***** Reduced overflow check for sums failed: Minimum mdiv division result if the dividend is known.");
      okay := FALSE;
    end if;

    if  -9223372036854775807 mdiv intExpr(-1) +                    0 <>         integer.last or
        -9223372036854775807 mdiv intExpr( 1) +                    0 <> -9223372036854775807 or
        -9223372036854775806 mdiv intExpr(-1) +                    1 <>         integer.last or
        -9223372036854775806 mdiv intExpr( 1) +                    1 <> -9223372036854775805 or
        -4611686018427387904 mdiv intExpr(-1) +  4611686018427387903 <>         integer.last or
        -4611686018427387904 mdiv intExpr( 1) +  4611686018427387903 <>                   -1 or
                 -1234567890 mdiv intExpr(-1) +  9223372035620207917 <>         integer.last or
                 -1234567890 mdiv intExpr( 1) +  9223372035620207917 <>  9223372034385640027 or
                          -1 mdiv intExpr(-1) +  9223372036854775806 <>         integer.last or
                          -1 mdiv intExpr( 1) +  9223372036854775806 <>  9223372036854775805 or
                           1 mdiv intExpr( 1) +  9223372036854775806 <>         integer.last or
                           1 mdiv intExpr(-1) +  9223372036854775806 <>  9223372036854775805 or
                  1234567890 mdiv intExpr( 1) +  9223372035620207917 <>         integer.last or
                  1234567890 mdiv intExpr(-1) +  9223372035620207917 <>  9223372034385640027 or
         4611686018427387904 mdiv intExpr( 1) +  4611686018427387903 <>         integer.last or
         4611686018427387904 mdiv intExpr(-1) +  4611686018427387903 <>                   -1 or
         9223372036854775806 mdiv intExpr( 1) +                    1 <>         integer.last or
         9223372036854775806 mdiv intExpr(-1) +                    1 <> -9223372036854775805 or
         9223372036854775807 mdiv intExpr( 1) +                    0 <>         integer.last or
         9223372036854775807 mdiv intExpr(-1) +                    0 <> -9223372036854775807 then
      writeln(" ***** Reduced overflow check for sums failed: Maximum mdiv division result if the dividend is known.");
      okay := FALSE;
    end if;

    if  intExpr(       -integer.last) mod        integer.first +                   -1 <>        integer.first or
        intExpr(       integer.first) mod        integer.first +                   -1 <>                   -1 or
        intExpr( 4611686018427387905) mod -4611686018427387904 + -4611686018427387905 <>        integer.first or
        intExpr( 4611686018427387904) mod -4611686018427387904 + -4611686018427387905 <> -4611686018427387905 or
        intExpr( 9223372002495037441) mod         -34359738368 + -9223372002495037441 <>        integer.first or
        intExpr( 9223372002495037440) mod         -34359738368 + -9223372002495037441 <> -9223372002495037441 or
        intExpr(          6172839451) mod          -1234567890 + -9223372035620207919 <>        integer.first or
        intExpr(          6172839450) mod          -1234567890 + -9223372035620207919 <> -9223372035620207919 or
        intExpr(        123456789123) mod                   -2 + -9223372036854775807 <>        integer.first or
        intExpr(        123456789122) mod                   -2 + -9223372036854775807 <> -9223372036854775807 or
        intExpr(        integer.last) mod                   -1 +        integer.first <>        integer.first or
        intExpr(        integer.last) mod                    1 +        integer.first <>        integer.first or
        intExpr(        123456789124) mod                    2 +        integer.first <>        integer.first or
        intExpr(        123456789123) mod                    2 +        integer.first <> -9223372036854775807 or
        intExpr(          6172839450) mod           1234567890 +        integer.first <>        integer.first or
        intExpr(          6172839449) mod           1234567890 +        integer.first <> -9223372035620207919 or
        intExpr( 9223372002495037440) mod          34359738368 +        integer.first <>        integer.first or
        intExpr( 9223372002495037439) mod          34359738368 +        integer.first <> -9223372002495037441 or
        intExpr( 4611686018427387904) mod  4611686018427387904 +        integer.first <>        integer.first or
        intExpr(        integer.last) mod  4611686018427387904 +        integer.first <> -4611686018427387905 or
        intExpr(        integer.last) mod         integer.last +        integer.first <>        integer.first or
        intExpr( 9223372036854775806) mod         integer.last +        integer.first <>                   -2 then
      writeln(" ***** Reduced overflow check for sums failed: Minimum modulo result if the divisor is known.");
      okay := FALSE;
    end if;

    if  intExpr(       integer.first) mod        integer.first +         integer.last <>         integer.last or
        intExpr(       -integer.last) mod        integer.first +         integer.last <>                    0 or
        intExpr( 4611686018427387904) mod -4611686018427387904 +         integer.last <>         integer.last or
        intExpr( 4611686018427387905) mod -4611686018427387904 +         integer.last <>  4611686018427387904 or
        intExpr( 9223372002495037440) mod         -34359738368 +         integer.last <>         integer.last or
        intExpr( 9223372002495037441) mod         -34359738368 +         integer.last <>  9223372002495037440 or
        intExpr(          6172839450) mod          -1234567890 +         integer.last <>         integer.last or
        intExpr(          6172839451) mod          -1234567890 +         integer.last <>  9223372035620207918 or
        intExpr(        123456789122) mod                   -2 +         integer.last <>         integer.last or
        intExpr(        123456789123) mod                   -2 +         integer.last <>  9223372036854775806 or
        intExpr(        integer.last) mod                   -1 +         integer.last <>         integer.last or
        intExpr(        integer.last) mod                    1 +         integer.last <>         integer.last or
        intExpr(        123456789123) mod                    2 +  9223372036854775806 <>         integer.last or
        intExpr(        123456789124) mod                    2 +  9223372036854775806 <>  9223372036854775806 or
        intExpr(          6172839449) mod           1234567890 +  9223372035620207918 <>         integer.last or
        intExpr(          6172839450) mod           1234567890 +  9223372035620207918 <>  9223372035620207918 or
        intExpr( 9223372002495037439) mod          34359738368 +  9223372002495037440 <>         integer.last or
        intExpr( 9223372002495037440) mod          34359738368 +  9223372002495037440 <>  9223372002495037440 or
        intExpr(        integer.last) mod  4611686018427387904 +  4611686018427387904 <>         integer.last or
        intExpr( 4611686018427387904) mod  4611686018427387904 +  4611686018427387904 <>  4611686018427387904 or
        intExpr( 9223372036854775806) mod         integer.last +                    1 <>         integer.last or
        intExpr(        integer.last) mod         integer.last +                    1 <>                    1 then
      writeln(" ***** Reduced overflow check for sums failed: Maximum modulo result if the divisor is known.");
      okay := FALSE;
    end if;

    if         integer.first mod intExpr(-4611686018427387905) + -4611686018427387905 <>        integer.first or
               integer.first mod intExpr(        integer.last) + -4611686018427387905 <>  4611686018427387901 or
        -9223372036854775807 mod intExpr(       integer.first) +                   -1 <>        integer.first or
        -9223372036854775807 mod intExpr( 9223372036854775806) +                   -1 <>  9223372036854775804 or
        -7654321098765432109 mod intExpr(-7654321098765432110) + -1569050938089343699 <>        integer.first or
        -7654321098765432109 mod intExpr( 7654321098765432108) + -1569050938089343699 <>  6085270160676088408 or
        -4611686018427387906 mod intExpr(-4611686018427387907) + -4611686018427387902 <>        integer.first or
        -4611686018427387906 mod intExpr( 4611686018427387905) + -4611686018427387902 <>                    2 or
        -4611686018427387905 mod intExpr(-4611686018427387906) + -4611686018427387903 <>        integer.first or
        -4611686018427387905 mod intExpr( 4611686018427387904) + -4611686018427387903 <>                    0 or
        -4611686018427387904 mod intExpr(-4611686018427387905) + -4611686018427387904 <>        integer.first or
        -4611686018427387904 mod intExpr(        integer.last) + -4611686018427387904 <>                   -1 or
                 -1234567890 mod intExpr(         -1234567891) + -9223372035620207918 <>        integer.first or
                 -1234567890 mod intExpr(        integer.last) + -9223372035620207918 <>                   -1 or
                          -1 mod intExpr(                  -2) + -9223372036854775807 <>        integer.first or
                          -1 mod intExpr(        integer.last) + -9223372036854775807 <>                   -1 or
                           0 mod intExpr(          1234567890) +        integer.first <>        integer.first or
                           1 mod intExpr(       integer.first) +                   -1 <>        integer.first or
                           1 mod intExpr(                   2) +                   -1 <>                    0 or
                  1234567890 mod intExpr(       integer.first) +          -1234567890 <>        integer.first or
                  1234567890 mod intExpr(          1234567891) +          -1234567890 <>                    0 or
         4611686018427387904 mod intExpr(       integer.first) + -4611686018427387904 <>        integer.first or
         4611686018427387904 mod intExpr( 4611686018427387905) + -4611686018427387904 <>                    0 or
         4611686018427387905 mod intExpr(-4611686018427387904) + -4611686018427387905 <>        integer.first or
         4611686018427387905 mod intExpr( 4611686018427387906) + -4611686018427387905 <>                    0 or
         4611686018427387906 mod intExpr(-4611686018427387905) + -4611686018427387904 <>        integer.first or
         4611686018427387906 mod intExpr( 4611686018427387907) + -4611686018427387904 <>                    2 or
         7654321098765432109 mod intExpr(-7654321098765432108) + -1569050938089343701 <>        integer.first or
         7654321098765432109 mod intExpr( 7654321098765432110) + -1569050938089343701 <>  6085270160676088408 or
         9223372036854775806 mod intExpr(-9223372036854775805) +                   -4 <>        integer.first or
         9223372036854775806 mod intExpr( 9223372036854775807) +                   -4 <>  9223372036854775802 or
                integer.last mod intExpr(-9223372036854775806) +                   -3 <>        integer.first or
                integer.last mod intExpr( 4611686018427387904) +                   -3 <>  4611686018427387900 then
      writeln(" ***** Reduced overflow check for sums failed: Minimum modulo result if the dividend is known.");
      okay := FALSE;
    end if;

    if         integer.first mod intExpr(        integer.last) +                    1 <>         integer.last or
               integer.first mod intExpr(-4611686018427387905) +                    1 <> -4611686018427387902 or
        -9223372036854775807 mod intExpr( 9223372036854775806) +                    2 <>         integer.last or
        -9223372036854775807 mod intExpr(       integer.first) +                    2 <> -9223372036854775805 or
        -7654321098765432109 mod intExpr( 7654321098765432108) +  1569050938089343700 <>         integer.last or
        -7654321098765432109 mod intExpr(-7654321098765432110) +  1569050938089343700 <> -6085270160676088409 or
        -4611686018427387906 mod intExpr( 4611686018427387905) +  4611686018427387903 <>         integer.last or
        -4611686018427387906 mod intExpr(-4611686018427387907) +  4611686018427387903 <>                   -3 or
        -4611686018427387905 mod intExpr( 4611686018427387904) +  4611686018427387904 <>         integer.last or
        -4611686018427387905 mod intExpr(-4611686018427387906) +  4611686018427387904 <>                   -1 or
        -4611686018427387904 mod intExpr(        integer.last) +  4611686018427387904 <>         integer.last or
        -4611686018427387904 mod intExpr(-4611686018427387905) +  4611686018427387904 <>                    0 or
                 -1234567890 mod intExpr(        integer.last) +           1234567890 <>         integer.last or
                 -1234567890 mod intExpr(         -1234567891) +           1234567890 <>                    0 or
                          -1 mod intExpr(        integer.last) +                    1 <>         integer.last or
                          -1 mod intExpr(                  -2) +                    1 <>                    0 or
                           0 mod intExpr(          1234567890) +         integer.last <>         integer.last or
                           1 mod intExpr(                   2) +  9223372036854775806 <>         integer.last or
                           1 mod intExpr(       integer.first) +  9223372036854775806 <>                   -1 or
                  1234567890 mod intExpr(          1234567891) +  9223372035620207917 <>         integer.last or
                  1234567890 mod intExpr(       integer.first) +  9223372035620207917 <>                   -1 or
         4611686018427387904 mod intExpr( 4611686018427387905) +  4611686018427387903 <>         integer.last or
         4611686018427387904 mod intExpr(       integer.first) +  4611686018427387903 <>                   -1 or
         4611686018427387905 mod intExpr( 4611686018427387906) +  4611686018427387902 <>         integer.last or
         4611686018427387905 mod intExpr(-4611686018427387904) +  4611686018427387902 <>                   -1 or
         4611686018427387906 mod intExpr( 4611686018427387907) +  4611686018427387901 <>         integer.last or
         4611686018427387906 mod intExpr(-4611686018427387905) +  4611686018427387901 <>                   -3 or
         7654321098765432109 mod intExpr( 7654321098765432110) +  1569050938089343698 <>         integer.last or
         7654321098765432109 mod intExpr(-7654321098765432108) +  1569050938089343698 <> -6085270160676088409 or
         9223372036854775806 mod intExpr( 9223372036854775807) +                    1 <>         integer.last or
         9223372036854775806 mod intExpr(-9223372036854775805) +                    1 <> -9223372036854775803 or
                integer.last mod intExpr( 4611686018427387904) +  4611686018427387904 <>         integer.last or
                integer.last mod intExpr(-9223372036854775806) +  4611686018427387904 <> -4611686018427387901 then
      writeln(" ***** Reduced overflow check for sums failed: Maximum modulo result if the dividend is known.");
      okay := FALSE;
    end if;

    if  (intExpr(integer.first) >>  0) +                    0 <>        integer.first or
        (intExpr(integer.first) >>  1) + -4611686018427387904 <>        integer.first or
        (intExpr( integer.last) >>  1) + -4611686018427387904 <>                   -1 or
        (intExpr(integer.first) >> 30) + -9223372028264841216 <>        integer.first or
        (intExpr( integer.last) >> 30) + -9223372028264841216 <> -9223372019674906625 or
        (intExpr(integer.first) >> 62) + -9223372036854775806 <>        integer.first or
        (intExpr( integer.last) >> 62) + -9223372036854775806 <> -9223372036854775805 or
        (intExpr(integer.first) >> 63) + -9223372036854775807 <>        integer.first or
        (intExpr( integer.last) >> 63) + -9223372036854775807 <> -9223372036854775807 then
      writeln(" ***** Reduced overflow check for sums failed: Minimum rshift result if the shift amount is known.");
      okay := FALSE;
    end if;

    if  (intExpr( integer.last) >>  0) +                    0 <>         integer.last or
        (intExpr( integer.last) >>  1) +  4611686018427387904 <>         integer.last or
        (intExpr(integer.first) >>  1) +  4611686018427387904 <>                    0 or
        (intExpr( integer.last) >> 30) +  9223372028264841216 <>         integer.last or
        (intExpr(integer.first) >> 30) +  9223372028264841216 <>  9223372019674906624 or
        (intExpr( integer.last) >> 62) +  9223372036854775806 <>         integer.last or
        (intExpr(integer.first) >> 62) +  9223372036854775806 <>  9223372036854775804 or
        (intExpr( integer.last) >> 63) +         integer.last <>         integer.last or
        (intExpr(integer.first) >> 63) +         integer.last <>  9223372036854775806 then
      writeln(" ***** Reduced overflow check for sums failed: Maximum rshift result if the shift amount is known.");
      okay := FALSE;
    end if;

    if  (       integer.first >> intExpr( 0)) +                    0 <>        integer.first or
        (       integer.first >> intExpr(63)) +                    0 <>                   -1 or
        (       -integer.last >> intExpr( 0)) +                   -1 <>        integer.first or
        (       -integer.last >> intExpr(63)) +                   -1 <>                   -2 or
        (-9012345678901234567 >> intExpr( 0)) +  -211026357953541241 <>        integer.first or
        (-9012345678901234567 >> intExpr(63)) +  -211026357953541241 <>  -211026357953541242 or
        (-4611686018427387904 >> intExpr( 0)) + -4611686018427387904 <>        integer.first or
        (-4611686018427387904 >> intExpr(62)) + -4611686018427387904 <> -4611686018427387905 or
        (         -1234567890 >> intExpr( 0)) + -9223372035620207918 <>        integer.first or
        (         -1234567890 >> intExpr(31)) + -9223372035620207918 <> -9223372035620207919 or
        (                  -2 >> intExpr( 0)) + -9223372036854775806 <>        integer.first or
        (                  -2 >> intExpr( 1)) + -9223372036854775806 <> -9223372036854775807 or
        (                  -1 >> intExpr( 0)) + -9223372036854775807 <>        integer.first or
        (                   0 >> intExpr( 0)) +        integer.first <>        integer.first or
        (                   1 >> intExpr( 1)) +        integer.first <>        integer.first or
        (                   1 >> intExpr( 0)) +        integer.first <> -9223372036854775807 or
        (                   2 >> intExpr( 2)) +        integer.first <>        integer.first or
        (                   2 >> intExpr( 0)) +        integer.first <> -9223372036854775806 or
        (          1234567890 >> intExpr(31)) +        integer.first <>        integer.first or
        (          1234567890 >> intExpr( 0)) +        integer.first <> -9223372035620207918 or
        ( 4611686018427387903 >> intExpr(62)) +        integer.first <>        integer.first or
        ( 4611686018427387903 >> intExpr( 0)) +        integer.first <> -4611686018427387905 or
        ( 9012345678901234567 >> intExpr(63)) +        integer.first <>        integer.first or
        ( 9012345678901234567 >> intExpr( 0)) +        integer.first <>  -211026357953541241 or
        ( 9223372036854775806 >> intExpr(63)) +        integer.first <>        integer.first or
        ( 9223372036854775806 >> intExpr( 0)) +        integer.first <>                   -2 or
        (        integer.last >> intExpr(63)) +        integer.first <>        integer.first or
        (        integer.last >> intExpr( 0)) +        integer.first <>                   -1 then
      writeln(" ***** Reduced overflow check for sums failed: Minimum rshift result if the shifted value is known.");
      okay := FALSE;
    end if;

    if  (                   0 >> intExpr( 0)) +         integer.last <>         integer.last or
        (                   1 >> intExpr( 0)) +  9223372036854775806 <>         integer.last or
        (                   1 >> intExpr( 1)) +  9223372036854775806 <>  9223372036854775806 or
        (                   2 >> intExpr( 0)) +  9223372036854775805 <>         integer.last or
        (                   2 >> intExpr( 2)) +  9223372036854775805 <>  9223372036854775805 or
        (          1234567890 >> intExpr( 0)) +  9223372035620207917 <>         integer.last or
        (          1234567890 >> intExpr(31)) +  9223372035620207917 <>  9223372035620207917 or
        ( 4611686018427387903 >> intExpr( 0)) +  4611686018427387904 <>         integer.last or
        ( 4611686018427387903 >> intExpr(62)) +  4611686018427387904 <>  4611686018427387904 or
        ( 9012345678901234567 >> intExpr( 0)) +   211026357953541240 <>         integer.last or
        ( 9012345678901234567 >> intExpr(63)) +   211026357953541240 <>   211026357953541240 or
        ( 9223372036854775806 >> intExpr( 0)) +                    1 <>         integer.last or
        ( 9223372036854775806 >> intExpr(63)) +                    1 <>                    1 or
        (        integer.last >> intExpr( 0)) +                    0 <>         integer.last or
        (        integer.last >> intExpr(63)) +                    0 <>                    0 then
      writeln(" ***** Reduced overflow check for sums failed: Maximum rshift result if the shifted value is known.");
      okay := FALSE;
    end if;

    if   abs(         intExpr(            0)) +        integer.first <> integer.first or
         abs(         intExpr( integer.last)) +                    0 <>  integer.last or
        -abs(         intExpr( integer.last)) -                    1 <> integer.first or
        -abs(         intExpr(            0)) -        -integer.last <>  integer.last or
         log2(        intExpr(            0)) + -9223372036854775807 <> integer.first or
         log2(        intExpr( integer.last)) +  9223372036854775745 <>  integer.last or
        -log2(        intExpr( integer.last)) -  9223372036854775746 <> integer.first or
        -log2(        intExpr(            0)) - -9223372036854775806 <>  integer.last or
         log10(       intExpr(            0)) + -9223372036854775807 <> integer.first or
         log10(       intExpr( integer.last)) +  9223372036854775789 <>  integer.last or
        -log10(       intExpr( integer.last)) -  9223372036854775790 <> integer.first or
        -log10(       intExpr(            0)) - -9223372036854775806 <>  integer.last or
         sqrt(        intExpr(            0)) +        integer.first <> integer.first or
         sqrt(        intExpr( integer.last)) +  9223372033817775308 <>  integer.last or
        -sqrt(        intExpr( integer.last)) -  9223372033817775309 <> integer.first or
        -sqrt(        intExpr(            0)) -        -integer.last <>  integer.last or
         bitLength(   intExpr(            0)) +        integer.first <> integer.first or
         bitLength(   intExpr( integer.last)) +  9223372036854775744 <>  integer.last or
         bitLength(   intExpr(            0)) + bitLength(   intExpr(            0)) +        integer.first <> integer.first or
         bitLength(   intExpr( integer.last)) + bitLength(   intExpr( integer.last)) +  9223372036854775681 <>  integer.last or
        -bitLength(   intExpr( integer.last)) -  9223372036854775745 <> integer.first or
        -bitLength(   intExpr(            0)) -        -integer.last <>  integer.last or
        -bitLength(   intExpr( integer.last)) - bitLength(   intExpr( integer.last)) -  9223372036854775682 <> integer.first or
        -bitLength(   intExpr(            0)) - bitLength(   intExpr(            0)) -        -integer.last <>  integer.last or
         lowestSetBit(intExpr(            0)) + -9223372036854775807 <> integer.first or
         lowestSetBit(intExpr(integer.first)) +  9223372036854775744 <>  integer.last or
        -lowestSetBit(intExpr(integer.first)) -  9223372036854775745 <> integer.first or
        -lowestSetBit(intExpr(            0)) - -9223372036854775806 <>  integer.last or

         rand(        -1234567890,  intExpr(-1234567890)) + -9223372035620207918 <> integer.first or
         rand(intExpr( 1234567890),          1234567890 ) +  9223372035620207917 <>  integer.last or
        -rand(intExpr( 1234567890),          1234567890 ) -  9223372035620207918 <> integer.first or
        -rand(        -1234567890,  intExpr(-1234567890)) - -9223372035620207917 <>  integer.last or

         compare(intExpr(0), intExpr(1)) + -9223372036854775807 <> integer.first or
         compare(intExpr(1), intExpr(0)) +  9223372036854775806 <>  integer.last or
        -compare(intExpr(1), intExpr(0)) -  9223372036854775807 <> integer.first or
        -compare(intExpr(0), intExpr(1)) - -9223372036854775806 <>  integer.last then
      writeln(" ***** Reduced overflow check for sums failed: Various integer functions.");
      okay := FALSE;
    end if;

    if   abs(ord(charExpr(char(-2147483648) ))) + 9223372034707292159 <>         integer.last or
         abs(ord(charExpr(             '\0;'))) + 9223372034707292159 <>  9223372034707292159 or
         abs(ord(charExpr(char(-2147483648) ))) +
         abs(ord(charExpr(char(-2147483648) ))) + 9223372032559808511 <>         integer.last or
         abs(ord(charExpr(             '\0;'))) +
         abs(ord(charExpr(             '\0;'))) + 9223372032559808511 <>  9223372032559808511 or
        -abs(ord(charExpr(char(-2147483648) ))) - 9223372034707292160 <>        integer.first or
        -abs(ord(charExpr(             '\0;'))) - 9223372034707292160 <> -9223372034707292160 or
        -abs(ord(charExpr(char(-2147483648) ))) -
         abs(ord(charExpr(char(-2147483648) ))) - 9223372032559808512 <>        integer.first or
        -abs(ord(charExpr(             '\0;'))) -
         abs(ord(charExpr(             '\0;'))) - 9223372032559808512 <> -9223372032559808512 then
      writeln(" ***** Reduced overflow check for sums failed: abs(ord(char))");
      okay := FALSE;
    end if;

    if   ord(boolExpr(FALSE)) +        integer.first <>        integer.first or
         ord(boolExpr( TRUE)) +        integer.first <> -9223372036854775807 or
         ord(boolExpr( TRUE)) +  9223372036854775806 <>         integer.last or
         ord(boolExpr(FALSE)) +  9223372036854775806 <>  9223372036854775806 or
        -ord(boolExpr( TRUE)) -  9223372036854775807 <>        integer.first or
        -ord(boolExpr(FALSE)) -  9223372036854775807 <> -9223372036854775807 or
        -ord(boolExpr(FALSE)) - -9223372036854775807 <>         integer.last or
        -ord(boolExpr( TRUE)) - -9223372036854775807 <>  9223372036854775806 or
         ord(boolExpr(FALSE)) + ord(boolExpr(FALSE)) +        integer.first <>        integer.first or
         ord(boolExpr( TRUE)) + ord(boolExpr( TRUE)) +        integer.first <> -9223372036854775806 or
         ord(boolExpr( TRUE)) + ord(boolExpr( TRUE)) +  9223372036854775805 <>         integer.last or
         ord(boolExpr(FALSE)) + ord(boolExpr(FALSE)) +  9223372036854775805 <>  9223372036854775805 or
        -ord(boolExpr( TRUE)) - ord(boolExpr( TRUE)) -  9223372036854775806 <>        integer.first or
        -ord(boolExpr(FALSE)) - ord(boolExpr(FALSE)) -  9223372036854775806 <> -9223372036854775806 or
        -ord(boolExpr(FALSE)) - ord(boolExpr(FALSE)) - -9223372036854775807 <>         integer.last or
        -ord(boolExpr( TRUE)) - ord(boolExpr( TRUE)) - -9223372036854775807 <>  9223372036854775805 or
        ord(boolExpr(FALSE)) + ord(boolExpr(FALSE)) + ord(boolExpr(FALSE)) +       integer.first <>        integer.first or
        ord(boolExpr( TRUE)) + ord(boolExpr( TRUE)) + ord(boolExpr( TRUE)) +       integer.first <> -9223372036854775805 or
        ord(boolExpr( TRUE)) + ord(boolExpr( TRUE)) + ord(boolExpr( TRUE)) + 9223372036854775804 <>         integer.last or
        ord(boolExpr(FALSE)) + ord(boolExpr(FALSE)) + ord(boolExpr(FALSE)) + 9223372036854775804 <>  9223372036854775804 or
        ord(boolExpr(FALSE)) + ord(boolExpr(FALSE)) + ord(boolExpr(FALSE)) + ord(boolExpr(FALSE)) +       integer.first <>        integer.first or
        ord(boolExpr( TRUE)) + ord(boolExpr( TRUE)) + ord(boolExpr( TRUE)) + ord(boolExpr( TRUE)) +       integer.first <> -9223372036854775804 or
        ord(boolExpr( TRUE)) + ord(boolExpr( TRUE)) + ord(boolExpr( TRUE)) + ord(boolExpr( TRUE)) + 9223372036854775803 <>         integer.last or
        ord(boolExpr(FALSE)) + ord(boolExpr(FALSE)) + ord(boolExpr(FALSE)) + ord(boolExpr(FALSE)) + 9223372036854775803 <>  9223372036854775803 or
        ord(boolExpr(FALSE)) + sqrt(intExpr(           0)) +        integer.first <>        integer.first or
        ord(boolExpr( TRUE)) + sqrt(intExpr(integer.last)) +        integer.first <> -9223372033817775308 or
        ord(boolExpr( TRUE)) + sqrt(intExpr(integer.last)) +  9223372033817775307 <>         integer.last or
        ord(boolExpr(FALSE)) + sqrt(intExpr(           0)) +  9223372033817775307 <>  9223372033817775307 or
        ord(boolExpr(FALSE)) - sqrt(intExpr(integer.last)) + -9223372033817775309 <>        integer.first or
        ord(boolExpr( TRUE)) - sqrt(intExpr(           0)) + -9223372033817775309 <> -9223372033817775308 or
        ord(boolExpr( TRUE)) - sqrt(intExpr(           0)) +  9223372036854775806 <>         integer.last or
        ord(boolExpr(FALSE)) - sqrt(intExpr(integer.last)) +  9223372036854775806 <>  9223372033817775307 or
        ord(boolExpr(FALSE)) + abs(intExpr(0)) +        integer.first <>        integer.first or
        ord(boolExpr( TRUE)) + abs(intExpr(0)) +        integer.first <> -9223372036854775807 or
        ord(boolExpr( TRUE)) + abs(intExpr(1)) +  9223372036854775805 <>         integer.last or
        ord(boolExpr(FALSE)) + abs(intExpr(1)) +  9223372036854775805 <>  9223372036854775806 or
        ord(boolExpr(FALSE)) - abs(intExpr(1)) + -9223372036854775807 <>        integer.first or
        ord(boolExpr( TRUE)) - abs(intExpr(1)) + -9223372036854775807 <> -9223372036854775807 or
        ord(boolExpr( TRUE)) - abs(intExpr(1)) +         integer.last <>         integer.last or
        ord(boolExpr(FALSE)) - abs(intExpr(1)) +         integer.last <>  9223372036854775806 then
      writeln(" ***** Reduced overflow check for sums failed: ord(boolean)");
      okay := FALSE;
    end if;

    if   ord(charExpr(char(-2147483648) )) + -9223372034707292160 <>        integer.first or
         ord(charExpr(    '\2147483647;')) + -9223372034707292160 <> -9223372032559808513 or
         ord(charExpr(    '\2147483647;')) +  9223372034707292160 <>         integer.last or
         ord(charExpr(char(-2147483648) )) +  9223372034707292160 <>  9223372032559808512 or
        -ord(charExpr(    '\2147483647;')) -  9223372034707292161 <>        integer.first or
        -ord(charExpr(char(-2147483648) )) -  9223372034707292161 <> -9223372032559808513 or
        -ord(charExpr(char(-2147483648) )) - -9223372034707292159 <>         integer.last or
        -ord(charExpr(    '\2147483647;')) - -9223372034707292159 <>  9223372032559808512 or
         ord(charExpr(char(-2147483648) )) + ord(charExpr(char(-2147483648) )) + -9223372032559808512 <>        integer.first or
         ord(charExpr(    '\2147483647;')) + ord(charExpr(    '\2147483647;')) + -9223372032559808512 <> -9223372028264841218 or
         ord(charExpr(    '\2147483647;')) + ord(charExpr(    '\2147483647;')) +  9223372032559808513 <>         integer.last or
         ord(charExpr(char(-2147483648) )) + ord(charExpr(char(-2147483648) )) +  9223372032559808513 <>  9223372028264841217 or
        -ord(charExpr(    '\2147483647;')) - ord(charExpr(    '\2147483647;')) -  9223372032559808514 <>        integer.first or
        -ord(charExpr(char(-2147483648) )) - ord(charExpr(char(-2147483648) )) -  9223372032559808514 <> -9223372028264841218 or
        -ord(charExpr(char(-2147483648) )) - ord(charExpr(char(-2147483648) )) - -9223372032559808511 <>         integer.last or
        -ord(charExpr(    '\2147483647;')) - ord(charExpr(    '\2147483647;')) - -9223372032559808511 <>  9223372028264841217 or
        ord(charExpr(char(-2147483648) )) + ord(charExpr(char(-2147483648) )) +
            ord(charExpr(char(-2147483648) )) + -9223372030412324864 <>        integer.first or
        ord(charExpr(    '\2147483647;')) + ord(charExpr(    '\2147483647;')) +
            ord(charExpr(    '\2147483647;')) + -9223372030412324864 <> -9223372023969873923 or
        ord(charExpr(    '\2147483647;')) + ord(charExpr(    '\2147483647;')) +
            ord(charExpr(    '\2147483647;')) +  9223372030412324866 <>         integer.last or
        ord(charExpr(char(-2147483648) )) + ord(charExpr(char(-2147483648) )) +
            ord(charExpr(char(-2147483648) )) +  9223372030412324866 <>  9223372023969873922 or
        ord(charExpr(char(-2147483648) )) + ord(charExpr(char(-2147483648) )) +
            ord(charExpr(char(-2147483648) )) + ord(charExpr(char(-2147483648) )) + -9223372028264841216 <>        integer.first or
        ord(charExpr(    '\2147483647;')) + ord(charExpr(    '\2147483647;')) +
            ord(charExpr(    '\2147483647;')) + ord(charExpr(    '\2147483647;')) + -9223372028264841216 <> -9223372019674906628 or
        ord(charExpr(    '\2147483647;')) + ord(charExpr(    '\2147483647;')) +
            ord(charExpr(    '\2147483647;')) + ord(charExpr(    '\2147483647;')) +  9223372028264841219 <>         integer.last or
        ord(charExpr(char(-2147483648) )) + ord(charExpr(char(-2147483648) )) +
            ord(charExpr(char(-2147483648) )) + ord(charExpr(char(-2147483648) )) +  9223372028264841219 <>  9223372019674906627 or
        ord(charExpr(char(-2147483648) )) - ord(charExpr(    '\2147483647;')) + -9223372032559808513 <>        integer.first or
        ord(charExpr(    '\2147483647;')) - ord(charExpr(char(-2147483648) )) + -9223372032559808513 <> -9223372028264841218 or
        ord(charExpr(    '\2147483647;')) - ord(charExpr(char(-2147483648) )) +  9223372032559808512 <>         integer.last or
        ord(charExpr(char(-2147483648) )) - ord(charExpr(    '\2147483647;')) +  9223372032559808512 <>  9223372028264841217 or
        ord(charExpr(char(-2147483648) )) + sqrt(intExpr(           0)) + -9223372034707292160 <>        integer.first or
        ord(charExpr(    '\2147483647;')) + sqrt(intExpr(integer.last)) + -9223372034707292160 <> -9223372029522808014 or
        ord(charExpr(    '\2147483647;')) + sqrt(intExpr(integer.last)) +  9223372031670291661 <>         integer.last or
        ord(charExpr(char(-2147483648) )) + sqrt(intExpr(           0)) +  9223372031670291661 <>  9223372029522808013 or
        ord(charExpr(char(-2147483648) )) - sqrt(intExpr(integer.last)) + -9223372031670291661 <>        integer.first or
        ord(charExpr(    '\2147483647;')) - sqrt(intExpr(           0)) + -9223372031670291661 <> -9223372029522808014 or
        ord(charExpr(    '\2147483647;')) - sqrt(intExpr(           0)) +  9223372034707292160 <>         integer.last or
        ord(charExpr(char(-2147483648) )) - sqrt(intExpr(integer.last)) +  9223372034707292160 <>  9223372029522808013 or
        ord(charExpr(char(-2147483648) )) + abs(intExpr(1)) + -9223372034707292161 <>        integer.first or
        ord(charExpr(    '\2147483647;')) + abs(intExpr(1)) + -9223372034707292161 <> -9223372032559808513 or
        ord(charExpr(    '\2147483647;')) + abs(intExpr(1)) +  9223372034707292159 <>         integer.last or
        ord(charExpr(char(-2147483648) )) + abs(intExpr(1)) +  9223372034707292159 <>  9223372032559808512 or
        ord(charExpr(char(-2147483648) )) - abs(intExpr(1)) + -9223372034707292159 <>        integer.first or
        ord(charExpr(    '\2147483647;')) - abs(intExpr(1)) + -9223372034707292159 <> -9223372032559808513 or
        ord(charExpr(    '\2147483647;')) - abs(intExpr(1)) +  9223372034707292161 <>         integer.last or
        ord(charExpr(char(-2147483648) )) - abs(intExpr(1)) +  9223372034707292161 <>  9223372032559808512 then
      writeln(" ***** Reduced overflow check for sums failed: ord(char)");
      okay := FALSE;
    end if;

    if  pos(striExpr(""), striExpr(""))  + integer.first <>        integer.first or
        pos("",           striExpr(""))  + integer.first <>        integer.first or
        pos("a",          striExpr(""))  + integer.first <>        integer.first or
        pos("a",          striExpr("a")) + integer.first <> -9223372036854775807 or
        pos("ab",         striExpr(""))  + integer.first <>        integer.first or
        pos("ab",         striExpr("b")) + integer.first <> -9223372036854775806 or
        pos("abc",        striExpr(""))  + integer.first <>        integer.first or
        pos("abc",        striExpr("c")) + integer.first <> -9223372036854775805 then
      writeln(" ***** Reduced overflow check for sums failed: Minimum pos result if the main string is known.");
      okay := FALSE;
    end if;

    if  pos("",    striExpr(""))  +        integer.last <>        integer.last or
        pos("a",   striExpr("a")) + 9223372036854775806 <>        integer.last or
        pos("a",   striExpr(""))  + 9223372036854775806 <> 9223372036854775806 or
        pos("ab",  striExpr("b")) + 9223372036854775805 <>        integer.last or
        pos("ab",  striExpr(""))  + 9223372036854775805 <> 9223372036854775805 or
        pos("abc", striExpr("c")) + 9223372036854775804 <>        integer.last or
        pos("abc", striExpr(""))  + 9223372036854775804 <> 9223372036854775804 then
      writeln(" ***** Reduced overflow check for sums failed: Maximum pos result if the main string is known.");
      okay := FALSE;
    end if;
  end func;


const proc: check_add is func
  local
    var boolean: okay is TRUE;
  begin
    if             INT64_MIN +                    0 <>            INT64_MIN or
                   INT64_MIN +  9223372036854775807 <>                   -1 or
        -9223372036854775807 +                   -1 <>            INT64_MIN or
        -9223372036854775807 +  9223372036854775807 <>                    0 or
                           0 +            INT64_MIN <>            INT64_MIN or
                           0 + -9223372036854775807 <> -9223372036854775807 or
                           0 +                    0 <>                    0 or
                           0 +           2147483647 <>           2147483647 or
                           0 +           2147483648 <>           2147483648 or
                           0 +  9223372036854775807 <>  9223372036854775807 or
                           2 +                    3 <>                    5 or
                         127 +                  127 <>                  254 or
                         255 +                  255 <>                  510 or
                       18341 +                26783 <>                45124 or
                       32767 +                32767 <>                65534 or
                       35759 +                58537 <>                94296 or
                       65535 +                65535 <>               131070 or
                       73819 +               124303 <>               198122 or
                  2147483647 +                    0 <>           2147483647 or
                  2147483648 +                    0 <>           2147483648 or
         9223372036854775807 +            INT64_MIN <>                   -1 or
         9223372036854775807 + -9223372036854775807 <>                    0 or
         9223372036854775807 +                    0 <>  9223372036854775807 or
        intExpr(           INT64_MIN) +                    0 <>            INT64_MIN or
        intExpr(           INT64_MIN) +  9223372036854775807 <>                   -1 or
        intExpr(-9223372036854775807) +                   -1 <>            INT64_MIN or
        intExpr(-9223372036854775807) +  9223372036854775807 <>                    0 or
        intExpr(                   0) +            INT64_MIN <>            INT64_MIN or
        intExpr(                   0) + -9223372036854775807 <> -9223372036854775807 or
        intExpr(                   0) +                    0 <>                    0 or
        intExpr(                   0) +           2147483647 <>           2147483647 or
        intExpr(                   0) +           2147483648 <>           2147483648 or
        intExpr(                   0) +  9223372036854775807 <>  9223372036854775807 or
        intExpr(                   2) +                    3 <>                    5 or
        intExpr(                 127) +                  127 <>                  254 or
        intExpr(                 255) +                  255 <>                  510 or
        intExpr(               18341) +                26783 <>                45124 or
        intExpr(               32767) +                32767 <>                65534 or
        intExpr(               35759) +                58537 <>                94296 or
        intExpr(               65535) +                65535 <>               131070 or
        intExpr(               73819) +               124303 <>               198122 or
        intExpr(          2147483647) +                    0 <>           2147483647 or
        intExpr(          2147483648) +                    0 <>           2147483648 or
        intExpr( 9223372036854775807) +            INT64_MIN <>                   -1 or
        intExpr( 9223372036854775807) + -9223372036854775807 <>                    0 or
        intExpr( 9223372036854775807) +                    0 <>  9223372036854775807 or
                   INT64_MIN + intExpr(                   0) <>            INT64_MIN or
                   INT64_MIN + intExpr( 9223372036854775807) <>                   -1 or
        -9223372036854775807 + intExpr(                  -1) <>            INT64_MIN or
        -9223372036854775807 + intExpr( 9223372036854775807) <>                    0 or
                           0 + intExpr(           INT64_MIN) <>            INT64_MIN or
                           0 + intExpr(-9223372036854775807) <> -9223372036854775807 or
                           0 + intExpr(                   0) <>                    0 or
                           0 + intExpr(          2147483647) <>           2147483647 or
                           0 + intExpr(          2147483648) <>           2147483648 or
                           0 + intExpr( 9223372036854775807) <>  9223372036854775807 or
                           2 + intExpr(                   3) <>                    5 or
                         127 + intExpr(                 127) <>                  254 or
                         255 + intExpr(                 255) <>                  510 or
                       18341 + intExpr(               26783) <>                45124 or
                       32767 + intExpr(               32767) <>                65534 or
                       35759 + intExpr(               58537) <>                94296 or
                       65535 + intExpr(               65535) <>               131070 or
                       73819 + intExpr(              124303) <>               198122 or
                  2147483647 + intExpr(                   0) <>           2147483647 or
                  2147483648 + intExpr(                   0) <>           2147483648 or
         9223372036854775807 + intExpr(           INT64_MIN) <>                   -1 or
         9223372036854775807 + intExpr(-9223372036854775807) <>                    0 or
         9223372036854775807 + intExpr(                   0) <>  9223372036854775807 or
        intExpr(           INT64_MIN) + intExpr(                   0) <>            INT64_MIN or
        intExpr(           INT64_MIN) + intExpr( 9223372036854775807) <>                   -1 or
        intExpr(-9223372036854775807) + intExpr(                  -1) <>            INT64_MIN or
        intExpr(-9223372036854775807) + intExpr( 9223372036854775807) <>                    0 or
        intExpr(                   0) + intExpr(           INT64_MIN) <>            INT64_MIN or
        intExpr(                   0) + intExpr(-9223372036854775807) <> -9223372036854775807 or
        intExpr(                   0) + intExpr(                   0) <>                    0 or
        intExpr(                   0) + intExpr(          2147483647) <>           2147483647 or
        intExpr(                   0) + intExpr(          2147483648) <>           2147483648 or
        intExpr(                   0) + intExpr( 9223372036854775807) <>  9223372036854775807 or
        intExpr(                   2) + intExpr(                   3) <>                    5 or
        intExpr(                 127) + intExpr(                 127) <>                  254 or
        intExpr(                 255) + intExpr(                 255) <>                  510 or
        intExpr(               18341) + intExpr(               26783) <>                45124 or
        intExpr(               32767) + intExpr(               32767) <>                65534 or
        intExpr(               35759) + intExpr(               58537) <>                94296 or
        intExpr(               65535) + intExpr(               65535) <>               131070 or
        intExpr(               73819) + intExpr(              124303) <>               198122 or
        intExpr(          2147483647) + intExpr(                   0) <>           2147483647 or
        intExpr(          2147483648) + intExpr(                   0) <>           2147483648 or
        intExpr( 9223372036854775807) + intExpr(           INT64_MIN) <>                   -1 or
        intExpr( 9223372036854775807) + intExpr(-9223372036854775807) <>                    0 or
        intExpr( 9223372036854775807) + intExpr(                   0) <>  9223372036854775807 then
      writeln(" ***** Addition with selected values does not work correct.");
      okay := FALSE;
    end if;

    if             INT64_MIN +                    0 <> INT64_MIN or
        -9223372036854775807 +                   -1 <> INT64_MIN or
        -9223372036854775806 +                   -2 <> INT64_MIN or
        -9223372036854775805 +                   -3 <> INT64_MIN or
        -9223372036854775797 +                  -11 <> INT64_MIN or
        -9223372036854774951 +                 -857 <> INT64_MIN or
        -9223372036854771169 +                -4639 <> INT64_MIN or
        -9223372036854737535 +               -38273 <> INT64_MIN or
        -9223372036854131365 +              -644443 <> INT64_MIN or
        -9223372036844899255 +             -9876553 <> INT64_MIN or
        -9223372036842430155 +            -12345653 <> INT64_MIN or
        -9223372036731319017 +           -123456791 <> INT64_MIN or
        -9223372033817775309 +          -3037000499 <> INT64_MIN or
        -9223371962145462840 +         -74709312968 <> INT64_MIN or
        -9223371289760066695 +        -747094709113 <> INT64_MIN or
        -9223371102989282771 +        -933865493037 <> INT64_MIN or
        -9223357724693674121 +      -14312161101687 <> INT64_MIN or
        -9223131047853734480 +     -240989001041328 <> INT64_MIN or
        -9221383812660584221 +    -1988224194191587 <> INT64_MIN or
        -9212609642412704892 +   -10762394442070916 <> INT64_MIN or
        -8384883669867978008 +  -838488366986797800 <> INT64_MIN or
        -6148914691236517206 + -3074457345618258602 <> INT64_MIN or
        -3074457345618258602 + -6148914691236517206 <> INT64_MIN or
         -838488366986797800 + -8384883669867978008 <> INT64_MIN or
          -10762394442070916 + -9212609642412704892 <> INT64_MIN or
           -1988224194191587 + -9221383812660584221 <> INT64_MIN or
            -240989001041328 + -9223131047853734480 <> INT64_MIN or
             -14312161101687 + -9223357724693674121 <> INT64_MIN or
               -933865493037 + -9223371102989282771 <> INT64_MIN or
               -747094709113 + -9223371289760066695 <> INT64_MIN or
                -74709312968 + -9223371962145462840 <> INT64_MIN or
                 -3037000499 + -9223372033817775309 <> INT64_MIN or
                  -123456791 + -9223372036731319017 <> INT64_MIN or
                   -12345653 + -9223372036842430155 <> INT64_MIN or
                    -9876553 + -9223372036844899255 <> INT64_MIN or
                     -644443 + -9223372036854131365 <> INT64_MIN or
                      -38273 + -9223372036854737535 <> INT64_MIN or
                       -4639 + -9223372036854771169 <> INT64_MIN or
                        -857 + -9223372036854774951 <> INT64_MIN or
                         -11 + -9223372036854775797 <> INT64_MIN or
                          -3 + -9223372036854775805 <> INT64_MIN or
                          -2 + -9223372036854775806 <> INT64_MIN or
                          -1 + -9223372036854775807 <> INT64_MIN or
                           0 +            INT64_MIN <> INT64_MIN or
        intExpr(           INT64_MIN) +                    0 <> INT64_MIN or
        intExpr(-9223372036854775807) +                   -1 <> INT64_MIN or
        intExpr(-9223372036854775806) +                   -2 <> INT64_MIN or
        intExpr(-9223372036854775805) +                   -3 <> INT64_MIN or
        intExpr(-9223372036854775797) +                  -11 <> INT64_MIN or
        intExpr(-9223372036854774951) +                 -857 <> INT64_MIN or
        intExpr(-9223372036854771169) +                -4639 <> INT64_MIN or
        intExpr(-9223372036854737535) +               -38273 <> INT64_MIN or
        intExpr(-9223372036854131365) +              -644443 <> INT64_MIN or
        intExpr(-9223372036844899255) +             -9876553 <> INT64_MIN or
        intExpr(-9223372036842430155) +            -12345653 <> INT64_MIN or
        intExpr(-9223372036731319017) +           -123456791 <> INT64_MIN or
        intExpr(-9223372033817775309) +          -3037000499 <> INT64_MIN or
        intExpr(-9223371962145462840) +         -74709312968 <> INT64_MIN or
        intExpr(-9223371289760066695) +        -747094709113 <> INT64_MIN or
        intExpr(-9223371102989282771) +        -933865493037 <> INT64_MIN or
        intExpr(-9223357724693674121) +      -14312161101687 <> INT64_MIN or
        intExpr(-9223131047853734480) +     -240989001041328 <> INT64_MIN or
        intExpr(-9221383812660584221) +    -1988224194191587 <> INT64_MIN or
        intExpr(-9212609642412704892) +   -10762394442070916 <> INT64_MIN or
        intExpr(-8384883669867978008) +  -838488366986797800 <> INT64_MIN or
        intExpr(-6148914691236517206) + -3074457345618258602 <> INT64_MIN or
        intExpr(-3074457345618258602) + -6148914691236517206 <> INT64_MIN or
        intExpr( -838488366986797800) + -8384883669867978008 <> INT64_MIN or
        intExpr(  -10762394442070916) + -9212609642412704892 <> INT64_MIN or
        intExpr(   -1988224194191587) + -9221383812660584221 <> INT64_MIN or
        intExpr(    -240989001041328) + -9223131047853734480 <> INT64_MIN or
        intExpr(     -14312161101687) + -9223357724693674121 <> INT64_MIN or
        intExpr(       -933865493037) + -9223371102989282771 <> INT64_MIN or
        intExpr(       -747094709113) + -9223371289760066695 <> INT64_MIN or
        intExpr(        -74709312968) + -9223371962145462840 <> INT64_MIN or
        intExpr(         -3037000499) + -9223372033817775309 <> INT64_MIN or
        intExpr(          -123456791) + -9223372036731319017 <> INT64_MIN or
        intExpr(           -12345653) + -9223372036842430155 <> INT64_MIN or
        intExpr(            -9876553) + -9223372036844899255 <> INT64_MIN or
        intExpr(             -644443) + -9223372036854131365 <> INT64_MIN or
        intExpr(              -38273) + -9223372036854737535 <> INT64_MIN or
        intExpr(               -4639) + -9223372036854771169 <> INT64_MIN or
        intExpr(                -857) + -9223372036854774951 <> INT64_MIN or
        intExpr(                 -11) + -9223372036854775797 <> INT64_MIN or
        intExpr(                  -3) + -9223372036854775805 <> INT64_MIN or
        intExpr(                  -2) + -9223372036854775806 <> INT64_MIN or
        intExpr(                  -1) + -9223372036854775807 <> INT64_MIN or
        intExpr(                   0) +            INT64_MIN <> INT64_MIN or
                   INT64_MIN + intExpr(                   0) <> INT64_MIN or
        -9223372036854775807 + intExpr(                  -1) <> INT64_MIN or
        -9223372036854775806 + intExpr(                  -2) <> INT64_MIN or
        -9223372036854775805 + intExpr(                  -3) <> INT64_MIN or
        -9223372036854775797 + intExpr(                 -11) <> INT64_MIN or
        -9223372036854774951 + intExpr(                -857) <> INT64_MIN or
        -9223372036854771169 + intExpr(               -4639) <> INT64_MIN or
        -9223372036854737535 + intExpr(              -38273) <> INT64_MIN or
        -9223372036854131365 + intExpr(             -644443) <> INT64_MIN or
        -9223372036844899255 + intExpr(            -9876553) <> INT64_MIN or
        -9223372036842430155 + intExpr(           -12345653) <> INT64_MIN or
        -9223372036731319017 + intExpr(          -123456791) <> INT64_MIN or
        -9223372033817775309 + intExpr(         -3037000499) <> INT64_MIN or
        -9223371962145462840 + intExpr(        -74709312968) <> INT64_MIN or
        -9223371289760066695 + intExpr(       -747094709113) <> INT64_MIN or
        -9223371102989282771 + intExpr(       -933865493037) <> INT64_MIN or
        -9223357724693674121 + intExpr(     -14312161101687) <> INT64_MIN or
        -9223131047853734480 + intExpr(    -240989001041328) <> INT64_MIN or
        -9221383812660584221 + intExpr(   -1988224194191587) <> INT64_MIN or
        -9212609642412704892 + intExpr(  -10762394442070916) <> INT64_MIN or
        -8384883669867978008 + intExpr( -838488366986797800) <> INT64_MIN or
        -6148914691236517206 + intExpr(-3074457345618258602) <> INT64_MIN or
        -3074457345618258602 + intExpr(-6148914691236517206) <> INT64_MIN or
         -838488366986797800 + intExpr(-8384883669867978008) <> INT64_MIN or
          -10762394442070916 + intExpr(-9212609642412704892) <> INT64_MIN or
           -1988224194191587 + intExpr(-9221383812660584221) <> INT64_MIN or
            -240989001041328 + intExpr(-9223131047853734480) <> INT64_MIN or
             -14312161101687 + intExpr(-9223357724693674121) <> INT64_MIN or
               -933865493037 + intExpr(-9223371102989282771) <> INT64_MIN or
               -747094709113 + intExpr(-9223371289760066695) <> INT64_MIN or
                -74709312968 + intExpr(-9223371962145462840) <> INT64_MIN or
                 -3037000499 + intExpr(-9223372033817775309) <> INT64_MIN or
                  -123456791 + intExpr(-9223372036731319017) <> INT64_MIN or
                   -12345653 + intExpr(-9223372036842430155) <> INT64_MIN or
                    -9876553 + intExpr(-9223372036844899255) <> INT64_MIN or
                     -644443 + intExpr(-9223372036854131365) <> INT64_MIN or
                      -38273 + intExpr(-9223372036854737535) <> INT64_MIN or
                       -4639 + intExpr(-9223372036854771169) <> INT64_MIN or
                        -857 + intExpr(-9223372036854774951) <> INT64_MIN or
                         -11 + intExpr(-9223372036854775797) <> INT64_MIN or
                          -3 + intExpr(-9223372036854775805) <> INT64_MIN or
                          -2 + intExpr(-9223372036854775806) <> INT64_MIN or
                          -1 + intExpr(-9223372036854775807) <> INT64_MIN or
                           0 + intExpr(           INT64_MIN) <> INT64_MIN or
        intExpr(           INT64_MIN) + intExpr(                   0) <> INT64_MIN or
        intExpr(-9223372036854775807) + intExpr(                  -1) <> INT64_MIN or
        intExpr(-9223372036854775806) + intExpr(                  -2) <> INT64_MIN or
        intExpr(-9223372036854775805) + intExpr(                  -3) <> INT64_MIN or
        intExpr(-9223372036854775797) + intExpr(                 -11) <> INT64_MIN or
        intExpr(-9223372036854774951) + intExpr(                -857) <> INT64_MIN or
        intExpr(-9223372036854771169) + intExpr(               -4639) <> INT64_MIN or
        intExpr(-9223372036854737535) + intExpr(              -38273) <> INT64_MIN or
        intExpr(-9223372036854131365) + intExpr(             -644443) <> INT64_MIN or
        intExpr(-9223372036844899255) + intExpr(            -9876553) <> INT64_MIN or
        intExpr(-9223372036842430155) + intExpr(           -12345653) <> INT64_MIN or
        intExpr(-9223372036731319017) + intExpr(          -123456791) <> INT64_MIN or
        intExpr(-9223372033817775309) + intExpr(         -3037000499) <> INT64_MIN or
        intExpr(-9223371962145462840) + intExpr(        -74709312968) <> INT64_MIN or
        intExpr(-9223371289760066695) + intExpr(       -747094709113) <> INT64_MIN or
        intExpr(-9223371102989282771) + intExpr(       -933865493037) <> INT64_MIN or
        intExpr(-9223357724693674121) + intExpr(     -14312161101687) <> INT64_MIN or
        intExpr(-9223131047853734480) + intExpr(    -240989001041328) <> INT64_MIN or
        intExpr(-9221383812660584221) + intExpr(   -1988224194191587) <> INT64_MIN or
        intExpr(-9212609642412704892) + intExpr(  -10762394442070916) <> INT64_MIN or
        intExpr(-8384883669867978008) + intExpr( -838488366986797800) <> INT64_MIN or
        intExpr(-6148914691236517206) + intExpr(-3074457345618258602) <> INT64_MIN or
        intExpr(-3074457345618258602) + intExpr(-6148914691236517206) <> INT64_MIN or
        intExpr( -838488366986797800) + intExpr(-8384883669867978008) <> INT64_MIN or
        intExpr(  -10762394442070916) + intExpr(-9212609642412704892) <> INT64_MIN or
        intExpr(   -1988224194191587) + intExpr(-9221383812660584221) <> INT64_MIN or
        intExpr(    -240989001041328) + intExpr(-9223131047853734480) <> INT64_MIN or
        intExpr(     -14312161101687) + intExpr(-9223357724693674121) <> INT64_MIN or
        intExpr(       -933865493037) + intExpr(-9223371102989282771) <> INT64_MIN or
        intExpr(       -747094709113) + intExpr(-9223371289760066695) <> INT64_MIN or
        intExpr(        -74709312968) + intExpr(-9223371962145462840) <> INT64_MIN or
        intExpr(         -3037000499) + intExpr(-9223372033817775309) <> INT64_MIN or
        intExpr(          -123456791) + intExpr(-9223372036731319017) <> INT64_MIN or
        intExpr(           -12345653) + intExpr(-9223372036842430155) <> INT64_MIN or
        intExpr(            -9876553) + intExpr(-9223372036844899255) <> INT64_MIN or
        intExpr(             -644443) + intExpr(-9223372036854131365) <> INT64_MIN or
        intExpr(              -38273) + intExpr(-9223372036854737535) <> INT64_MIN or
        intExpr(               -4639) + intExpr(-9223372036854771169) <> INT64_MIN or
        intExpr(                -857) + intExpr(-9223372036854774951) <> INT64_MIN or
        intExpr(                 -11) + intExpr(-9223372036854775797) <> INT64_MIN or
        intExpr(                  -3) + intExpr(-9223372036854775805) <> INT64_MIN or
        intExpr(                  -2) + intExpr(-9223372036854775806) <> INT64_MIN or
        intExpr(                  -1) + intExpr(-9223372036854775807) <> INT64_MIN or
        intExpr(                   0) + intExpr(           INT64_MIN) <> INT64_MIN then
      writeln(" ***** Addition that results in the minimum integer does not work correct.");
      okay := FALSE;
    end if;

    if  9223372036854775807 +                   0 <> 9223372036854775807 or
        9223372036854775806 +                   1 <> 9223372036854775807 or
        9223372036854775805 +                   2 <> 9223372036854775807 or
        9223372036854775804 +                   3 <> 9223372036854775807 or
        9223372036854775796 +                  11 <> 9223372036854775807 or
        9223372036854774950 +                 857 <> 9223372036854775807 or
        9223372036854771168 +                4639 <> 9223372036854775807 or
        9223372036854737534 +               38273 <> 9223372036854775807 or
        9223372036854131364 +              644443 <> 9223372036854775807 or
        9223372036844899254 +             9876553 <> 9223372036854775807 or
        9223372036842430154 +            12345653 <> 9223372036854775807 or
        9223372036731319016 +           123456791 <> 9223372036854775807 or
        9223372033817775308 +          3037000499 <> 9223372036854775807 or
        9223371962145462839 +         74709312968 <> 9223372036854775807 or
        9223371289760066694 +        747094709113 <> 9223372036854775807 or
        9223371102989282770 +        933865493037 <> 9223372036854775807 or
        9223357724693674120 +      14312161101687 <> 9223372036854775807 or
        9223131047853734479 +     240989001041328 <> 9223372036854775807 or
        9221383812660584220 +    1988224194191587 <> 9223372036854775807 or
        9212609642412704891 +   10762394442070916 <> 9223372036854775807 or
        8384883669867978007 +  838488366986797800 <> 9223372036854775807 or
        6148914691236517205 + 3074457345618258602 <> 9223372036854775807 or
        3074457345618258602 + 6148914691236517205 <> 9223372036854775807 or
         838488366986797800 + 8384883669867978007 <> 9223372036854775807 or
          10762394442070916 + 9212609642412704891 <> 9223372036854775807 or
           1988224194191587 + 9221383812660584220 <> 9223372036854775807 or
            240989001041328 + 9223131047853734479 <> 9223372036854775807 or
             14312161101687 + 9223357724693674120 <> 9223372036854775807 or
               933865493037 + 9223371102989282770 <> 9223372036854775807 or
               747094709113 + 9223371289760066694 <> 9223372036854775807 or
                74709312968 + 9223371962145462839 <> 9223372036854775807 or
                 3037000499 + 9223372033817775308 <> 9223372036854775807 or
                  123456791 + 9223372036731319016 <> 9223372036854775807 or
                   12345653 + 9223372036842430154 <> 9223372036854775807 or
                    9876553 + 9223372036844899254 <> 9223372036854775807 or
                     644443 + 9223372036854131364 <> 9223372036854775807 or
                      38273 + 9223372036854737534 <> 9223372036854775807 or
                       4639 + 9223372036854771168 <> 9223372036854775807 or
                        857 + 9223372036854774950 <> 9223372036854775807 or
                         11 + 9223372036854775796 <> 9223372036854775807 or
                          3 + 9223372036854775804 <> 9223372036854775807 or
                          2 + 9223372036854775805 <> 9223372036854775807 or
                          1 + 9223372036854775806 <> 9223372036854775807 or
                          0 + 9223372036854775807 <> 9223372036854775807 or
        intExpr(9223372036854775807) +                   0 <> 9223372036854775807 or
        intExpr(9223372036854775806) +                   1 <> 9223372036854775807 or
        intExpr(9223372036854775805) +                   2 <> 9223372036854775807 or
        intExpr(9223372036854775804) +                   3 <> 9223372036854775807 or
        intExpr(9223372036854775796) +                  11 <> 9223372036854775807 or
        intExpr(9223372036854774950) +                 857 <> 9223372036854775807 or
        intExpr(9223372036854771168) +                4639 <> 9223372036854775807 or
        intExpr(9223372036854737534) +               38273 <> 9223372036854775807 or
        intExpr(9223372036854131364) +              644443 <> 9223372036854775807 or
        intExpr(9223372036844899254) +             9876553 <> 9223372036854775807 or
        intExpr(9223372036842430154) +            12345653 <> 9223372036854775807 or
        intExpr(9223372036731319016) +           123456791 <> 9223372036854775807 or
        intExpr(9223372033817775308) +          3037000499 <> 9223372036854775807 or
        intExpr(9223371962145462839) +         74709312968 <> 9223372036854775807 or
        intExpr(9223371289760066694) +        747094709113 <> 9223372036854775807 or
        intExpr(9223371102989282770) +        933865493037 <> 9223372036854775807 or
        intExpr(9223357724693674120) +      14312161101687 <> 9223372036854775807 or
        intExpr(9223131047853734479) +     240989001041328 <> 9223372036854775807 or
        intExpr(9221383812660584220) +    1988224194191587 <> 9223372036854775807 or
        intExpr(9212609642412704891) +   10762394442070916 <> 9223372036854775807 or
        intExpr(8384883669867978007) +  838488366986797800 <> 9223372036854775807 or
        intExpr(6148914691236517205) + 3074457345618258602 <> 9223372036854775807 or
        intExpr(3074457345618258602) + 6148914691236517205 <> 9223372036854775807 or
        intExpr( 838488366986797800) + 8384883669867978007 <> 9223372036854775807 or
        intExpr(  10762394442070916) + 9212609642412704891 <> 9223372036854775807 or
        intExpr(   1988224194191587) + 9221383812660584220 <> 9223372036854775807 or
        intExpr(    240989001041328) + 9223131047853734479 <> 9223372036854775807 or
        intExpr(     14312161101687) + 9223357724693674120 <> 9223372036854775807 or
        intExpr(       933865493037) + 9223371102989282770 <> 9223372036854775807 or
        intExpr(       747094709113) + 9223371289760066694 <> 9223372036854775807 or
        intExpr(        74709312968) + 9223371962145462839 <> 9223372036854775807 or
        intExpr(         3037000499) + 9223372033817775308 <> 9223372036854775807 or
        intExpr(          123456791) + 9223372036731319016 <> 9223372036854775807 or
        intExpr(           12345653) + 9223372036842430154 <> 9223372036854775807 or
        intExpr(            9876553) + 9223372036844899254 <> 9223372036854775807 or
        intExpr(             644443) + 9223372036854131364 <> 9223372036854775807 or
        intExpr(              38273) + 9223372036854737534 <> 9223372036854775807 or
        intExpr(               4639) + 9223372036854771168 <> 9223372036854775807 or
        intExpr(                857) + 9223372036854774950 <> 9223372036854775807 or
        intExpr(                 11) + 9223372036854775796 <> 9223372036854775807 or
        intExpr(                  3) + 9223372036854775804 <> 9223372036854775807 or
        intExpr(                  2) + 9223372036854775805 <> 9223372036854775807 or
        intExpr(                  1) + 9223372036854775806 <> 9223372036854775807 or
        intExpr(                  0) + 9223372036854775807 <> 9223372036854775807 or
        9223372036854775807 + intExpr(                  0) <> 9223372036854775807 or
        9223372036854775806 + intExpr(                  1) <> 9223372036854775807 or
        9223372036854775805 + intExpr(                  2) <> 9223372036854775807 or
        9223372036854775804 + intExpr(                  3) <> 9223372036854775807 or
        9223372036854775796 + intExpr(                 11) <> 9223372036854775807 or
        9223372036854774950 + intExpr(                857) <> 9223372036854775807 or
        9223372036854771168 + intExpr(               4639) <> 9223372036854775807 or
        9223372036854737534 + intExpr(              38273) <> 9223372036854775807 or
        9223372036854131364 + intExpr(             644443) <> 9223372036854775807 or
        9223372036844899254 + intExpr(            9876553) <> 9223372036854775807 or
        9223372036842430154 + intExpr(           12345653) <> 9223372036854775807 or
        9223372036731319016 + intExpr(          123456791) <> 9223372036854775807 or
        9223372033817775308 + intExpr(         3037000499) <> 9223372036854775807 or
        9223371962145462839 + intExpr(        74709312968) <> 9223372036854775807 or
        9223371289760066694 + intExpr(       747094709113) <> 9223372036854775807 or
        9223371102989282770 + intExpr(       933865493037) <> 9223372036854775807 or
        9223357724693674120 + intExpr(     14312161101687) <> 9223372036854775807 or
        9223131047853734479 + intExpr(    240989001041328) <> 9223372036854775807 or
        9221383812660584220 + intExpr(   1988224194191587) <> 9223372036854775807 or
        9212609642412704891 + intExpr(  10762394442070916) <> 9223372036854775807 or
        8384883669867978007 + intExpr( 838488366986797800) <> 9223372036854775807 or
        6148914691236517205 + intExpr(3074457345618258602) <> 9223372036854775807 or
        3074457345618258602 + intExpr(6148914691236517205) <> 9223372036854775807 or
         838488366986797800 + intExpr(8384883669867978007) <> 9223372036854775807 or
          10762394442070916 + intExpr(9212609642412704891) <> 9223372036854775807 or
           1988224194191587 + intExpr(9221383812660584220) <> 9223372036854775807 or
            240989001041328 + intExpr(9223131047853734479) <> 9223372036854775807 or
             14312161101687 + intExpr(9223357724693674120) <> 9223372036854775807 or
               933865493037 + intExpr(9223371102989282770) <> 9223372036854775807 or
               747094709113 + intExpr(9223371289760066694) <> 9223372036854775807 or
                74709312968 + intExpr(9223371962145462839) <> 9223372036854775807 or
                 3037000499 + intExpr(9223372033817775308) <> 9223372036854775807 or
                  123456791 + intExpr(9223372036731319016) <> 9223372036854775807 or
                   12345653 + intExpr(9223372036842430154) <> 9223372036854775807 or
                    9876553 + intExpr(9223372036844899254) <> 9223372036854775807 or
                     644443 + intExpr(9223372036854131364) <> 9223372036854775807 or
                      38273 + intExpr(9223372036854737534) <> 9223372036854775807 or
                       4639 + intExpr(9223372036854771168) <> 9223372036854775807 or
                        857 + intExpr(9223372036854774950) <> 9223372036854775807 or
                         11 + intExpr(9223372036854775796) <> 9223372036854775807 or
                          3 + intExpr(9223372036854775804) <> 9223372036854775807 or
                          2 + intExpr(9223372036854775805) <> 9223372036854775807 or
                          1 + intExpr(9223372036854775806) <> 9223372036854775807 or
                          0 + intExpr(9223372036854775807) <> 9223372036854775807 or
        intExpr(9223372036854775807) + intExpr(                  0) <> 9223372036854775807 or
        intExpr(9223372036854775806) + intExpr(                  1) <> 9223372036854775807 or
        intExpr(9223372036854775805) + intExpr(                  2) <> 9223372036854775807 or
        intExpr(9223372036854775804) + intExpr(                  3) <> 9223372036854775807 or
        intExpr(9223372036854775796) + intExpr(                 11) <> 9223372036854775807 or
        intExpr(9223372036854774950) + intExpr(                857) <> 9223372036854775807 or
        intExpr(9223372036854771168) + intExpr(               4639) <> 9223372036854775807 or
        intExpr(9223372036854737534) + intExpr(              38273) <> 9223372036854775807 or
        intExpr(9223372036854131364) + intExpr(             644443) <> 9223372036854775807 or
        intExpr(9223372036844899254) + intExpr(            9876553) <> 9223372036854775807 or
        intExpr(9223372036842430154) + intExpr(           12345653) <> 9223372036854775807 or
        intExpr(9223372036731319016) + intExpr(          123456791) <> 9223372036854775807 or
        intExpr(9223372033817775308) + intExpr(         3037000499) <> 9223372036854775807 or
        intExpr(9223371962145462839) + intExpr(        74709312968) <> 9223372036854775807 or
        intExpr(9223371289760066694) + intExpr(       747094709113) <> 9223372036854775807 or
        intExpr(9223371102989282770) + intExpr(       933865493037) <> 9223372036854775807 or
        intExpr(9223357724693674120) + intExpr(     14312161101687) <> 9223372036854775807 or
        intExpr(9223131047853734479) + intExpr(    240989001041328) <> 9223372036854775807 or
        intExpr(9221383812660584220) + intExpr(   1988224194191587) <> 9223372036854775807 or
        intExpr(9212609642412704891) + intExpr(  10762394442070916) <> 9223372036854775807 or
        intExpr(8384883669867978007) + intExpr( 838488366986797800) <> 9223372036854775807 or
        intExpr(6148914691236517205) + intExpr(3074457345618258602) <> 9223372036854775807 or
        intExpr(3074457345618258602) + intExpr(6148914691236517205) <> 9223372036854775807 or
        intExpr( 838488366986797800) + intExpr(8384883669867978007) <> 9223372036854775807 or
        intExpr(  10762394442070916) + intExpr(9212609642412704891) <> 9223372036854775807 or
        intExpr(   1988224194191587) + intExpr(9221383812660584220) <> 9223372036854775807 or
        intExpr(    240989001041328) + intExpr(9223131047853734479) <> 9223372036854775807 or
        intExpr(     14312161101687) + intExpr(9223357724693674120) <> 9223372036854775807 or
        intExpr(       933865493037) + intExpr(9223371102989282770) <> 9223372036854775807 or
        intExpr(       747094709113) + intExpr(9223371289760066694) <> 9223372036854775807 or
        intExpr(        74709312968) + intExpr(9223371962145462839) <> 9223372036854775807 or
        intExpr(         3037000499) + intExpr(9223372033817775308) <> 9223372036854775807 or
        intExpr(          123456791) + intExpr(9223372036731319016) <> 9223372036854775807 or
        intExpr(           12345653) + intExpr(9223372036842430154) <> 9223372036854775807 or
        intExpr(            9876553) + intExpr(9223372036844899254) <> 9223372036854775807 or
        intExpr(             644443) + intExpr(9223372036854131364) <> 9223372036854775807 or
        intExpr(              38273) + intExpr(9223372036854737534) <> 9223372036854775807 or
        intExpr(               4639) + intExpr(9223372036854771168) <> 9223372036854775807 or
        intExpr(                857) + intExpr(9223372036854774950) <> 9223372036854775807 or
        intExpr(                 11) + intExpr(9223372036854775796) <> 9223372036854775807 or
        intExpr(                  3) + intExpr(9223372036854775804) <> 9223372036854775807 or
        intExpr(                  2) + intExpr(9223372036854775805) <> 9223372036854775807 or
        intExpr(                  1) + intExpr(9223372036854775806) <> 9223372036854775807 or
        intExpr(                  0) + intExpr(9223372036854775807) <> 9223372036854775807 then
      writeln(" ***** Addition that results in the maximum integer does not work correct.");
      okay := FALSE;
    end if;

    if          2  +         1  <> 3 or
                2  + intExpr(1) <> 3 or
        intExpr(2) +         1  <> 3 or
        intExpr(2) + intExpr(1) <> 3 then
      writeln(" ***** Addition of several summands in a chain does not work correct. (1)");
      okay := FALSE;
    end if;

    if          0  +         1  <> 1 or
                0  + intExpr(1) <> 1 or
        intExpr(0) +         1  <> 1 or
        intExpr(0) + intExpr(1) <> 1 then
      writeln(" ***** Addition of several summands in a chain does not work correct. (2)");
      okay := FALSE;
    end if;

    if          4  +         2  +         1  <> 7 or
                4  +         2  + intExpr(1) <> 7 or
                4  + intExpr(2) +         1  <> 7 or
                4  + intExpr(2) + intExpr(1) <> 7 or
        intExpr(4) +         2  +         1  <> 7 or
        intExpr(4) +         2  + intExpr(1) <> 7 or
        intExpr(4) + intExpr(2) +         1  <> 7 or
        intExpr(4) + intExpr(2) + intExpr(1) <> 7 then
      writeln(" ***** Addition of several summands in a chain does not work correct. (3)");
      okay := FALSE;
    end if;

    if          4  +         2  -         1  <> 5 or
                4  +         2  - intExpr(1) <> 5 or
                4  + intExpr(2) -         1  <> 5 or
                4  + intExpr(2) - intExpr(1) <> 5 or
        intExpr(4) +         2  -         1  <> 5 or
        intExpr(4) +         2  - intExpr(1) <> 5 or
        intExpr(4) + intExpr(2) -         1  <> 5 or
        intExpr(4) + intExpr(2) - intExpr(1) <> 5 then
      writeln(" ***** Addition of several summands in a chain does not work correct. (4)");
      okay := FALSE;
    end if;

    if          0  +         2  +         1  <> 3 or
                0  +         2  + intExpr(1) <> 3 or
                0  + intExpr(2) +         1  <> 3 or
                0  + intExpr(2) + intExpr(1) <> 3 or
        intExpr(0) +         2  +         1  <> 3 or
        intExpr(0) +         2  + intExpr(1) <> 3 or
        intExpr(0) + intExpr(2) +         1  <> 3 or
        intExpr(0) + intExpr(2) + intExpr(1) <> 3 then
      writeln(" ***** Addition of several summands in a chain does not work correct. (5)");
      okay := FALSE;
    end if;

    if          0  +         2  -         1  <> 1 or
                0  +         2  - intExpr(1) <> 1 or
                0  + intExpr(2) -         1  <> 1 or
                0  + intExpr(2) - intExpr(1) <> 1 or
        intExpr(0) +         2  -         1  <> 1 or
        intExpr(0) +         2  - intExpr(1) <> 1 or
        intExpr(0) + intExpr(2) -         1  <> 1 or
        intExpr(0) + intExpr(2) - intExpr(1) <> 1 then
      writeln(" ***** Addition of several summands in a chain does not work correct. (6)");
      okay := FALSE;
    end if;

    if          8  +         4  +         2  +         1  <> 15 or
                8  +         4  +         2  + intExpr(1) <> 15 or
                8  +         4  + intExpr(2) +         1  <> 15 or
                8  +         4  + intExpr(2) + intExpr(1) <> 15 or
                8  + intExpr(4) +         2  +         1  <> 15 or
                8  + intExpr(4) +         2  + intExpr(1) <> 15 or
                8  + intExpr(4) + intExpr(2) +         1  <> 15 or
                8  + intExpr(4) + intExpr(2) + intExpr(1) <> 15 or
        intExpr(8) +         4  +         2  +         1  <> 15 or
        intExpr(8) +         4  +         2  + intExpr(1) <> 15 or
        intExpr(8) +         4  + intExpr(2) +         1  <> 15 or
        intExpr(8) +         4  + intExpr(2) + intExpr(1) <> 15 or
        intExpr(8) + intExpr(4) +         2  +         1  <> 15 or
        intExpr(8) + intExpr(4) +         2  + intExpr(1) <> 15 or
        intExpr(8) + intExpr(4) + intExpr(2) +         1  <> 15 or
        intExpr(8) + intExpr(4) + intExpr(2) + intExpr(1) <> 15 then
      writeln(" ***** Addition of several summands in a chain does not work correct. (7)");
      okay := FALSE;
    end if;

    if          16  +         8  +         4  +         2  +         1  <> 31 or
                16  +         8  +         4  +         2  + intExpr(1) <> 31 or
                16  +         8  +         4  + intExpr(2) +         1  <> 31 or
                16  +         8  +         4  + intExpr(2) + intExpr(1) <> 31 or
                16  +         8  + intExpr(4) +         2  +         1  <> 31 or
                16  +         8  + intExpr(4) +         2  + intExpr(1) <> 31 or
                16  +         8  + intExpr(4) + intExpr(2) +         1  <> 31 or
                16  +         8  + intExpr(4) + intExpr(2) + intExpr(1) <> 31 or
                16  + intExpr(8) +         4  +         2  +         1  <> 31 or
                16  + intExpr(8) +         4  +         2  + intExpr(1) <> 31 or
                16  + intExpr(8) +         4  + intExpr(2) +         1  <> 31 or
                16  + intExpr(8) +         4  + intExpr(2) + intExpr(1) <> 31 or
                16  + intExpr(8) + intExpr(4) +         2  +         1  <> 31 or
                16  + intExpr(8) + intExpr(4) +         2  + intExpr(1) <> 31 or
                16  + intExpr(8) + intExpr(4) + intExpr(2) +         1  <> 31 or
                16  + intExpr(8) + intExpr(4) + intExpr(2) + intExpr(1) <> 31 or
        intExpr(16) +         8  +         4  +         2  +         1  <> 31 or
        intExpr(16) +         8  +         4  +         2  + intExpr(1) <> 31 or
        intExpr(16) +         8  +         4  + intExpr(2) +         1  <> 31 or
        intExpr(16) +         8  +         4  + intExpr(2) + intExpr(1) <> 31 or
        intExpr(16) +         8  + intExpr(4) +         2  +         1  <> 31 or
        intExpr(16) +         8  + intExpr(4) +         2  + intExpr(1) <> 31 or
        intExpr(16) +         8  + intExpr(4) + intExpr(2) +         1  <> 31 or
        intExpr(16) +         8  + intExpr(4) + intExpr(2) + intExpr(1) <> 31 or
        intExpr(16) + intExpr(8) +         4  +         2  +         1  <> 31 or
        intExpr(16) + intExpr(8) +         4  +         2  + intExpr(1) <> 31 or
        intExpr(16) + intExpr(8) +         4  + intExpr(2) +         1  <> 31 or
        intExpr(16) + intExpr(8) +         4  + intExpr(2) + intExpr(1) <> 31 or
        intExpr(16) + intExpr(8) + intExpr(4) +         2  +         1  <> 31 or
        intExpr(16) + intExpr(8) + intExpr(4) +         2  + intExpr(1) <> 31 or
        intExpr(16) + intExpr(8) + intExpr(4) + intExpr(2) +         1  <> 31 or
        intExpr(16) + intExpr(8) + intExpr(4) + intExpr(2) + intExpr(1) <> 31 then
      writeln(" ***** Addition of several summands in a chain does not work correct. (8)");
      okay := FALSE;
    end if;

    if          0  + -4611686018427387904 + -4611686018427387904 <> INT64_MIN or
        intExpr(0) + -4611686018427387904 + -4611686018427387904 <> INT64_MIN or
                2  + -4611686018427387905 + -4611686018427387905 <> INT64_MIN or
        intExpr(2) + -4611686018427387905 + -4611686018427387905 <> INT64_MIN then
      writeln(" ***** Subtraction of integer.first or less does not work correct.");
      okay := FALSE;
    end if;

    if   intExpr(16) +          8  -          8  <>  16 or
                  8  + intExpr(16) -          8  <>  16 or
                  8  -          8  + intExpr(16) <>  16 or
        intExpr(-16) +          8  -          8  <> -16 or
                  8  - intExpr(16) -          8  <> -16 or
                  8  -          8  - intExpr(16) <> -16 or
         intExpr(10) +  intExpr(6) +          8  -          8  <>  16 or
                  8  + intExpr(10) +  intExpr(6) -          8  <>  16 or
                  8  -          8  + intExpr(10) +  intExpr(6) <>  16 or
        intExpr(-10) -  intExpr(6) +          8  -          8  <> -16 or
                  8  - intExpr(10) -  intExpr(6) -          8  <> -16 or
                  8  -          8  - intExpr(10) -  intExpr(6) <> -16 then
      writeln(" ***** Addition and subtraction that cancel each other does not work correct.");
      okay := FALSE;
    end if;

    if  succ(        2)  +         8   <> 11 or
        succ(        2   +         8)  <> 11 or
        succ(intExpr(2)) +         8   <> 11 or
        succ(intExpr(2)  +         8)  <> 11 or
        succ(        2)  + intExpr(8)  <> 11 or
        succ(        2   + intExpr(8)) <> 11 or
        succ(intExpr(2)) + intExpr(8)  <> 11 or
        succ(intExpr(2)  + intExpr(8)) <> 11 then
      writeln(" ***** Addition of summands and use of succ() does not work correct. (1)");
      okay := FALSE;
    end if;

    if  succ(        2)  +         8   +         16   <> 27 or
        succ(        2   +         8)  +         16   <> 27 or
        succ(        2   +         8   +         16)  <> 27 or
        succ(intExpr(2)) +         8   +         16   <> 27 or
        succ(intExpr(2)  +         8)  +         16   <> 27 or
        succ(intExpr(2)  +         8   +         16)  <> 27 or
        succ(        2)  + intExpr(8)  +         16   <> 27 or
        succ(        2   + intExpr(8)) +         16   <> 27 or
        succ(        2   + intExpr(8)  +         16)  <> 27 or
        succ(intExpr(2)) + intExpr(8)  +         16   <> 27 or
        succ(intExpr(2)  + intExpr(8)) +         16   <> 27 or
        succ(intExpr(2)  + intExpr(8)  +         16)  <> 27 or
        succ(        2)  +         8   + intExpr(16)  <> 27 or
        succ(        2   +         8)  + intExpr(16)  <> 27 or
        succ(        2   +         8   + intExpr(16)) <> 27 or
        succ(intExpr(2)) +         8   + intExpr(16)  <> 27 or
        succ(intExpr(2)  +         8)  + intExpr(16)  <> 27 or
        succ(intExpr(2)  +         8   + intExpr(16)) <> 27 or
        succ(        2)  + intExpr(8)  + intExpr(16)  <> 27 or
        succ(        2   + intExpr(8)) + intExpr(16)  <> 27 or
        succ(        2   + intExpr(8)  + intExpr(16)) <> 27 or
        succ(intExpr(2)) + intExpr(8)  + intExpr(16)  <> 27 or
        succ(intExpr(2)  + intExpr(8)) + intExpr(16)  <> 27 or
        succ(intExpr(2)  + intExpr(8)  + intExpr(16)) <> 27 then
      writeln(" ***** Addition of summands and use of succ() does not work correct. (2)");
      okay := FALSE;
    end if;

    if  pred(        2)  +         8   <> 9 or
        pred(        2   +         8)  <> 9 or
        pred(intExpr(2)) +         8   <> 9 or
        pred(intExpr(2)  +         8)  <> 9 or
        pred(        2)  + intExpr(8)  <> 9 or
        pred(        2   + intExpr(8)) <> 9 or
        pred(intExpr(2)) + intExpr(8)  <> 9 or
        pred(intExpr(2)  + intExpr(8)) <> 9 then
      writeln(" ***** Addition of summands and use of pred() does not work correct. (1)");
      okay := FALSE;
    end if;

    if  pred(        2)  +         8   +         16   <> 25 or
        pred(        2   +         8)  +         16   <> 25 or
        pred(        2   +         8   +         16)  <> 25 or
        pred(intExpr(2)) +         8   +         16   <> 25 or
        pred(intExpr(2)  +         8)  +         16   <> 25 or
        pred(intExpr(2)  +         8   +         16)  <> 25 or
        pred(        2)  + intExpr(8)  +         16   <> 25 or
        pred(        2   + intExpr(8)) +         16   <> 25 or
        pred(        2   + intExpr(8)  +         16)  <> 25 or
        pred(intExpr(2)) + intExpr(8)  +         16   <> 25 or
        pred(intExpr(2)  + intExpr(8)) +         16   <> 25 or
        pred(intExpr(2)  + intExpr(8)  +         16)  <> 25 or
        pred(        2)  +         8   + intExpr(16)  <> 25 or
        pred(        2   +         8)  + intExpr(16)  <> 25 or
        pred(        2   +         8   + intExpr(16)) <> 25 or
        pred(intExpr(2)) +         8   + intExpr(16)  <> 25 or
        pred(intExpr(2)  +         8)  + intExpr(16)  <> 25 or
        pred(intExpr(2)  +         8   + intExpr(16)) <> 25 or
        pred(        2)  + intExpr(8)  + intExpr(16)  <> 25 or
        pred(        2   + intExpr(8)) + intExpr(16)  <> 25 or
        pred(        2   + intExpr(8)  + intExpr(16)) <> 25 or
        pred(intExpr(2)) + intExpr(8)  + intExpr(16)  <> 25 or
        pred(intExpr(2)  + intExpr(8)) + intExpr(16)  <> 25 or
        pred(intExpr(2)  + intExpr(8)  + intExpr(16)) <> 25 then
      writeln(" ***** Addition of summands and use of pred() does not work correct. (2)");
      okay := FALSE;
    end if;

    if not check_reduced_overflow_checking_for_sums then
      okay := FALSE;
    end if;

    if okay then
      writeln("Addition works correct for selected values.");
    else
      writeln(" ***** Addition does not work correct.");
    end if;
  end func;


const proc: check_add_assign is func
  local
    var boolean: okay is TRUE;
    var boolean: ok is TRUE;
    var integer: num is 0;
    var array integer: arr is [] (0);
  begin
    num :=            INT64_MIN; num +:=                    0; ok := ok and num =            INT64_MIN;
    num :=            INT64_MIN; num +:=  9223372036854775807; ok := ok and num =                   -1;
    num := -9223372036854775807; num +:=                   -1; ok := ok and num =            INT64_MIN;
    num := -9223372036854775807; num +:=  9223372036854775807; ok := ok and num =                    0;
    num :=                    0; num +:=            INT64_MIN; ok := ok and num =            INT64_MIN;
    num :=                    0; num +:= -9223372036854775807; ok := ok and num = -9223372036854775807;
    num :=                    0; num +:=                    0; ok := ok and num =                    0;
    num :=                    0; num +:=           2147483647; ok := ok and num =           2147483647;
    num :=                    0; num +:=           2147483648; ok := ok and num =           2147483648;
    num :=                    0; num +:=  9223372036854775807; ok := ok and num =  9223372036854775807;
    num :=                    2; num +:=                    3; ok := ok and num =                    5;
    num :=                  127; num +:=                  127; ok := ok and num =                  254;
    num :=                  255; num +:=                  255; ok := ok and num =                  510;
    num :=                18341; num +:=                26783; ok := ok and num =                45124;
    num :=                32767; num +:=                32767; ok := ok and num =                65534;
    num :=                35759; num +:=                58537; ok := ok and num =                94296;
    num :=                65535; num +:=                65535; ok := ok and num =               131070;
    num :=                73819; num +:=               124303; ok := ok and num =               198122;
    num :=           2147483647; num +:=                    0; ok := ok and num =           2147483647;
    num :=           2147483648; num +:=                    0; ok := ok and num =           2147483648;
    num :=  9223372036854775807; num +:=            INT64_MIN; ok := ok and num =                   -1;
    num :=  9223372036854775807; num +:= -9223372036854775807; ok := ok and num =                    0;
    num :=  9223372036854775807; num +:=                    0; ok := ok and num =  9223372036854775807;
    if not ok then
      writeln(" ***** Addition assignment with selected values does not work correct.");
      okay := FALSE;
    end if;

    ok := TRUE;
    num :=            INT64_MIN; num +:=                    0; ok := ok and num = INT64_MIN;
    num := -9223372036854775807; num +:=                   -1; ok := ok and num = INT64_MIN;
    num := -9223372036854775806; num +:=                   -2; ok := ok and num = INT64_MIN;
    num := -9223372036854775805; num +:=                   -3; ok := ok and num = INT64_MIN;
    num := -9223372036854775797; num +:=                  -11; ok := ok and num = INT64_MIN;
    num := -9223372036854774951; num +:=                 -857; ok := ok and num = INT64_MIN;
    num := -9223372036854771169; num +:=                -4639; ok := ok and num = INT64_MIN;
    num := -9223372036854737535; num +:=               -38273; ok := ok and num = INT64_MIN;
    num := -9223372036854131365; num +:=              -644443; ok := ok and num = INT64_MIN;
    num := -9223372036844899255; num +:=             -9876553; ok := ok and num = INT64_MIN;
    num := -9223372036842430155; num +:=            -12345653; ok := ok and num = INT64_MIN;
    num := -9223372036731319017; num +:=           -123456791; ok := ok and num = INT64_MIN;
    num := -9223372033817775309; num +:=          -3037000499; ok := ok and num = INT64_MIN;
    num := -9223371962145462840; num +:=         -74709312968; ok := ok and num = INT64_MIN;
    num := -9223371289760066695; num +:=        -747094709113; ok := ok and num = INT64_MIN;
    num := -9223371102989282771; num +:=        -933865493037; ok := ok and num = INT64_MIN;
    num := -9223357724693674121; num +:=      -14312161101687; ok := ok and num = INT64_MIN;
    num := -9223131047853734480; num +:=     -240989001041328; ok := ok and num = INT64_MIN;
    num := -9221383812660584221; num +:=    -1988224194191587; ok := ok and num = INT64_MIN;
    num := -9212609642412704892; num +:=   -10762394442070916; ok := ok and num = INT64_MIN;
    num := -8384883669867978008; num +:=  -838488366986797800; ok := ok and num = INT64_MIN;
    num := -6148914691236517206; num +:= -3074457345618258602; ok := ok and num = INT64_MIN;
    num := -3074457345618258602; num +:= -6148914691236517206; ok := ok and num = INT64_MIN;
    num :=  -838488366986797800; num +:= -8384883669867978008; ok := ok and num = INT64_MIN;
    num :=   -10762394442070916; num +:= -9212609642412704892; ok := ok and num = INT64_MIN;
    num :=    -1988224194191587; num +:= -9221383812660584221; ok := ok and num = INT64_MIN;
    num :=     -240989001041328; num +:= -9223131047853734480; ok := ok and num = INT64_MIN;
    num :=      -14312161101687; num +:= -9223357724693674121; ok := ok and num = INT64_MIN;
    num :=        -933865493037; num +:= -9223371102989282771; ok := ok and num = INT64_MIN;
    num :=        -747094709113; num +:= -9223371289760066695; ok := ok and num = INT64_MIN;
    num :=         -74709312968; num +:= -9223371962145462840; ok := ok and num = INT64_MIN;
    num :=          -3037000499; num +:= -9223372033817775309; ok := ok and num = INT64_MIN;
    num :=           -123456791; num +:= -9223372036731319017; ok := ok and num = INT64_MIN;
    num :=            -12345653; num +:= -9223372036842430155; ok := ok and num = INT64_MIN;
    num :=             -9876553; num +:= -9223372036844899255; ok := ok and num = INT64_MIN;
    num :=              -644443; num +:= -9223372036854131365; ok := ok and num = INT64_MIN;
    num :=               -38273; num +:= -9223372036854737535; ok := ok and num = INT64_MIN;
    num :=                -4639; num +:= -9223372036854771169; ok := ok and num = INT64_MIN;
    num :=                 -857; num +:= -9223372036854774951; ok := ok and num = INT64_MIN;
    num :=                  -11; num +:= -9223372036854775797; ok := ok and num = INT64_MIN;
    num :=                   -3; num +:= -9223372036854775805; ok := ok and num = INT64_MIN;
    num :=                   -2; num +:= -9223372036854775806; ok := ok and num = INT64_MIN;
    num :=                   -1; num +:= -9223372036854775807; ok := ok and num = INT64_MIN;
    num :=                    0; num +:=            INT64_MIN; ok := ok and num = INT64_MIN;
    num :=            INT64_MIN; num +:= intExpr(                   0); ok := ok and num = INT64_MIN;
    num := -9223372036854775807; num +:= intExpr(                  -1); ok := ok and num = INT64_MIN;
    num := -9223372036854775806; num +:= intExpr(                  -2); ok := ok and num = INT64_MIN;
    num := -9223372036854775805; num +:= intExpr(                  -3); ok := ok and num = INT64_MIN;
    num := -9223372036854775797; num +:= intExpr(                 -11); ok := ok and num = INT64_MIN;
    num := -9223372036854774951; num +:= intExpr(                -857); ok := ok and num = INT64_MIN;
    num := -9223372036854771169; num +:= intExpr(               -4639); ok := ok and num = INT64_MIN;
    num := -9223372036854737535; num +:= intExpr(              -38273); ok := ok and num = INT64_MIN;
    num := -9223372036854131365; num +:= intExpr(             -644443); ok := ok and num = INT64_MIN;
    num := -9223372036844899255; num +:= intExpr(            -9876553); ok := ok and num = INT64_MIN;
    num := -9223372036842430155; num +:= intExpr(           -12345653); ok := ok and num = INT64_MIN;
    num := -9223372036731319017; num +:= intExpr(          -123456791); ok := ok and num = INT64_MIN;
    num := -9223372033817775309; num +:= intExpr(         -3037000499); ok := ok and num = INT64_MIN;
    num := -9223371962145462840; num +:= intExpr(        -74709312968); ok := ok and num = INT64_MIN;
    num := -9223371289760066695; num +:= intExpr(       -747094709113); ok := ok and num = INT64_MIN;
    num := -9223371102989282771; num +:= intExpr(       -933865493037); ok := ok and num = INT64_MIN;
    num := -9223357724693674121; num +:= intExpr(     -14312161101687); ok := ok and num = INT64_MIN;
    num := -9223131047853734480; num +:= intExpr(    -240989001041328); ok := ok and num = INT64_MIN;
    num := -9221383812660584221; num +:= intExpr(   -1988224194191587); ok := ok and num = INT64_MIN;
    num := -9212609642412704892; num +:= intExpr(  -10762394442070916); ok := ok and num = INT64_MIN;
    num := -8384883669867978008; num +:= intExpr( -838488366986797800); ok := ok and num = INT64_MIN;
    num := -6148914691236517206; num +:= intExpr(-3074457345618258602); ok := ok and num = INT64_MIN;
    num := -3074457345618258602; num +:= intExpr(-6148914691236517206); ok := ok and num = INT64_MIN;
    num :=  -838488366986797800; num +:= intExpr(-8384883669867978008); ok := ok and num = INT64_MIN;
    num :=   -10762394442070916; num +:= intExpr(-9212609642412704892); ok := ok and num = INT64_MIN;
    num :=    -1988224194191587; num +:= intExpr(-9221383812660584221); ok := ok and num = INT64_MIN;
    num :=     -240989001041328; num +:= intExpr(-9223131047853734480); ok := ok and num = INT64_MIN;
    num :=      -14312161101687; num +:= intExpr(-9223357724693674121); ok := ok and num = INT64_MIN;
    num :=        -933865493037; num +:= intExpr(-9223371102989282771); ok := ok and num = INT64_MIN;
    num :=        -747094709113; num +:= intExpr(-9223371289760066695); ok := ok and num = INT64_MIN;
    num :=         -74709312968; num +:= intExpr(-9223371962145462840); ok := ok and num = INT64_MIN;
    num :=          -3037000499; num +:= intExpr(-9223372033817775309); ok := ok and num = INT64_MIN;
    num :=           -123456791; num +:= intExpr(-9223372036731319017); ok := ok and num = INT64_MIN;
    num :=            -12345653; num +:= intExpr(-9223372036842430155); ok := ok and num = INT64_MIN;
    num :=             -9876553; num +:= intExpr(-9223372036844899255); ok := ok and num = INT64_MIN;
    num :=              -644443; num +:= intExpr(-9223372036854131365); ok := ok and num = INT64_MIN;
    num :=               -38273; num +:= intExpr(-9223372036854737535); ok := ok and num = INT64_MIN;
    num :=                -4639; num +:= intExpr(-9223372036854771169); ok := ok and num = INT64_MIN;
    num :=                 -857; num +:= intExpr(-9223372036854774951); ok := ok and num = INT64_MIN;
    num :=                  -11; num +:= intExpr(-9223372036854775797); ok := ok and num = INT64_MIN;
    num :=                   -3; num +:= intExpr(-9223372036854775805); ok := ok and num = INT64_MIN;
    num :=                   -2; num +:= intExpr(-9223372036854775806); ok := ok and num = INT64_MIN;
    num :=                   -1; num +:= intExpr(-9223372036854775807); ok := ok and num = INT64_MIN;
    num :=                    0; num +:= intExpr(           INT64_MIN); ok := ok and num = INT64_MIN;
    arr[1] :=            INT64_MIN; arr[1] +:=                    0; ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223372036854775807; arr[1] +:=                   -1; ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223372036854775806; arr[1] +:=                   -2; ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223372036854775805; arr[1] +:=                   -3; ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223372036854775797; arr[1] +:=                  -11; ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223372036854774951; arr[1] +:=                 -857; ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223372036854771169; arr[1] +:=                -4639; ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223372036854737535; arr[1] +:=               -38273; ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223372036854131365; arr[1] +:=              -644443; ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223372036844899255; arr[1] +:=             -9876553; ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223372036842430155; arr[1] +:=            -12345653; ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223372036731319017; arr[1] +:=           -123456791; ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223372033817775309; arr[1] +:=          -3037000499; ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223371962145462840; arr[1] +:=         -74709312968; ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223371289760066695; arr[1] +:=        -747094709113; ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223371102989282771; arr[1] +:=        -933865493037; ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223357724693674121; arr[1] +:=      -14312161101687; ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223131047853734480; arr[1] +:=     -240989001041328; ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9221383812660584221; arr[1] +:=    -1988224194191587; ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9212609642412704892; arr[1] +:=   -10762394442070916; ok := ok and arr[1] = INT64_MIN;
    arr[1] := -8384883669867978008; arr[1] +:=  -838488366986797800; ok := ok and arr[1] = INT64_MIN;
    arr[1] := -6148914691236517206; arr[1] +:= -3074457345618258602; ok := ok and arr[1] = INT64_MIN;
    arr[1] := -3074457345618258602; arr[1] +:= -6148914691236517206; ok := ok and arr[1] = INT64_MIN;
    arr[1] :=  -838488366986797800; arr[1] +:= -8384883669867978008; ok := ok and arr[1] = INT64_MIN;
    arr[1] :=   -10762394442070916; arr[1] +:= -9212609642412704892; ok := ok and arr[1] = INT64_MIN;
    arr[1] :=    -1988224194191587; arr[1] +:= -9221383812660584221; ok := ok and arr[1] = INT64_MIN;
    arr[1] :=     -240989001041328; arr[1] +:= -9223131047853734480; ok := ok and arr[1] = INT64_MIN;
    arr[1] :=      -14312161101687; arr[1] +:= -9223357724693674121; ok := ok and arr[1] = INT64_MIN;
    arr[1] :=        -933865493037; arr[1] +:= -9223371102989282771; ok := ok and arr[1] = INT64_MIN;
    arr[1] :=        -747094709113; arr[1] +:= -9223371289760066695; ok := ok and arr[1] = INT64_MIN;
    arr[1] :=         -74709312968; arr[1] +:= -9223371962145462840; ok := ok and arr[1] = INT64_MIN;
    arr[1] :=          -3037000499; arr[1] +:= -9223372033817775309; ok := ok and arr[1] = INT64_MIN;
    arr[1] :=           -123456791; arr[1] +:= -9223372036731319017; ok := ok and arr[1] = INT64_MIN;
    arr[1] :=            -12345653; arr[1] +:= -9223372036842430155; ok := ok and arr[1] = INT64_MIN;
    arr[1] :=             -9876553; arr[1] +:= -9223372036844899255; ok := ok and arr[1] = INT64_MIN;
    arr[1] :=              -644443; arr[1] +:= -9223372036854131365; ok := ok and arr[1] = INT64_MIN;
    arr[1] :=               -38273; arr[1] +:= -9223372036854737535; ok := ok and arr[1] = INT64_MIN;
    arr[1] :=                -4639; arr[1] +:= -9223372036854771169; ok := ok and arr[1] = INT64_MIN;
    arr[1] :=                 -857; arr[1] +:= -9223372036854774951; ok := ok and arr[1] = INT64_MIN;
    arr[1] :=                  -11; arr[1] +:= -9223372036854775797; ok := ok and arr[1] = INT64_MIN;
    arr[1] :=                   -3; arr[1] +:= -9223372036854775805; ok := ok and arr[1] = INT64_MIN;
    arr[1] :=                   -2; arr[1] +:= -9223372036854775806; ok := ok and arr[1] = INT64_MIN;
    arr[1] :=                   -1; arr[1] +:= -9223372036854775807; ok := ok and arr[1] = INT64_MIN;
    arr[1] :=                    0; arr[1] +:=            INT64_MIN; ok := ok and arr[1] = INT64_MIN;
    arr[1] :=            INT64_MIN; arr[1] +:= intExpr(                   0); ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223372036854775807; arr[1] +:= intExpr(                  -1); ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223372036854775806; arr[1] +:= intExpr(                  -2); ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223372036854775805; arr[1] +:= intExpr(                  -3); ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223372036854775797; arr[1] +:= intExpr(                 -11); ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223372036854774951; arr[1] +:= intExpr(                -857); ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223372036854771169; arr[1] +:= intExpr(               -4639); ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223372036854737535; arr[1] +:= intExpr(              -38273); ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223372036854131365; arr[1] +:= intExpr(             -644443); ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223372036844899255; arr[1] +:= intExpr(            -9876553); ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223372036842430155; arr[1] +:= intExpr(           -12345653); ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223372036731319017; arr[1] +:= intExpr(          -123456791); ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223372033817775309; arr[1] +:= intExpr(         -3037000499); ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223371962145462840; arr[1] +:= intExpr(        -74709312968); ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223371289760066695; arr[1] +:= intExpr(       -747094709113); ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223371102989282771; arr[1] +:= intExpr(       -933865493037); ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223357724693674121; arr[1] +:= intExpr(     -14312161101687); ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223131047853734480; arr[1] +:= intExpr(    -240989001041328); ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9221383812660584221; arr[1] +:= intExpr(   -1988224194191587); ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9212609642412704892; arr[1] +:= intExpr(  -10762394442070916); ok := ok and arr[1] = INT64_MIN;
    arr[1] := -8384883669867978008; arr[1] +:= intExpr( -838488366986797800); ok := ok and arr[1] = INT64_MIN;
    arr[1] := -6148914691236517206; arr[1] +:= intExpr(-3074457345618258602); ok := ok and arr[1] = INT64_MIN;
    arr[1] := -3074457345618258602; arr[1] +:= intExpr(-6148914691236517206); ok := ok and arr[1] = INT64_MIN;
    arr[1] :=  -838488366986797800; arr[1] +:= intExpr(-8384883669867978008); ok := ok and arr[1] = INT64_MIN;
    arr[1] :=   -10762394442070916; arr[1] +:= intExpr(-9212609642412704892); ok := ok and arr[1] = INT64_MIN;
    arr[1] :=    -1988224194191587; arr[1] +:= intExpr(-9221383812660584221); ok := ok and arr[1] = INT64_MIN;
    arr[1] :=     -240989001041328; arr[1] +:= intExpr(-9223131047853734480); ok := ok and arr[1] = INT64_MIN;
    arr[1] :=      -14312161101687; arr[1] +:= intExpr(-9223357724693674121); ok := ok and arr[1] = INT64_MIN;
    arr[1] :=        -933865493037; arr[1] +:= intExpr(-9223371102989282771); ok := ok and arr[1] = INT64_MIN;
    arr[1] :=        -747094709113; arr[1] +:= intExpr(-9223371289760066695); ok := ok and arr[1] = INT64_MIN;
    arr[1] :=         -74709312968; arr[1] +:= intExpr(-9223371962145462840); ok := ok and arr[1] = INT64_MIN;
    arr[1] :=          -3037000499; arr[1] +:= intExpr(-9223372033817775309); ok := ok and arr[1] = INT64_MIN;
    arr[1] :=           -123456791; arr[1] +:= intExpr(-9223372036731319017); ok := ok and arr[1] = INT64_MIN;
    arr[1] :=            -12345653; arr[1] +:= intExpr(-9223372036842430155); ok := ok and arr[1] = INT64_MIN;
    arr[1] :=             -9876553; arr[1] +:= intExpr(-9223372036844899255); ok := ok and arr[1] = INT64_MIN;
    arr[1] :=              -644443; arr[1] +:= intExpr(-9223372036854131365); ok := ok and arr[1] = INT64_MIN;
    arr[1] :=               -38273; arr[1] +:= intExpr(-9223372036854737535); ok := ok and arr[1] = INT64_MIN;
    arr[1] :=                -4639; arr[1] +:= intExpr(-9223372036854771169); ok := ok and arr[1] = INT64_MIN;
    arr[1] :=                 -857; arr[1] +:= intExpr(-9223372036854774951); ok := ok and arr[1] = INT64_MIN;
    arr[1] :=                  -11; arr[1] +:= intExpr(-9223372036854775797); ok := ok and arr[1] = INT64_MIN;
    arr[1] :=                   -3; arr[1] +:= intExpr(-9223372036854775805); ok := ok and arr[1] = INT64_MIN;
    arr[1] :=                   -2; arr[1] +:= intExpr(-9223372036854775806); ok := ok and arr[1] = INT64_MIN;
    arr[1] :=                   -1; arr[1] +:= intExpr(-9223372036854775807); ok := ok and arr[1] = INT64_MIN;
    arr[1] :=                    0; arr[1] +:= intExpr(           INT64_MIN); ok := ok and arr[1] = INT64_MIN;
    if not ok then
      writeln(" ***** Addition assignment that results in the minimum integer does not work correct.");
      okay := FALSE;
    end if;

    ok := TRUE;
    num := 9223372036854775807; num +:=                   0; ok := ok and num = 9223372036854775807;
    num := 9223372036854775806; num +:=                   1; ok := ok and num = 9223372036854775807;
    num := 9223372036854775805; num +:=                   2; ok := ok and num = 9223372036854775807;
    num := 9223372036854775804; num +:=                   3; ok := ok and num = 9223372036854775807;
    num := 9223372036854775796; num +:=                  11; ok := ok and num = 9223372036854775807;
    num := 9223372036854774950; num +:=                 857; ok := ok and num = 9223372036854775807;
    num := 9223372036854771168; num +:=                4639; ok := ok and num = 9223372036854775807;
    num := 9223372036854737534; num +:=               38273; ok := ok and num = 9223372036854775807;
    num := 9223372036854131364; num +:=              644443; ok := ok and num = 9223372036854775807;
    num := 9223372036844899254; num +:=             9876553; ok := ok and num = 9223372036854775807;
    num := 9223372036842430154; num +:=            12345653; ok := ok and num = 9223372036854775807;
    num := 9223372036731319016; num +:=           123456791; ok := ok and num = 9223372036854775807;
    num := 9223372033817775308; num +:=          3037000499; ok := ok and num = 9223372036854775807;
    num := 9223371962145462839; num +:=         74709312968; ok := ok and num = 9223372036854775807;
    num := 9223371289760066694; num +:=        747094709113; ok := ok and num = 9223372036854775807;
    num := 9223371102989282770; num +:=        933865493037; ok := ok and num = 9223372036854775807;
    num := 9223357724693674120; num +:=      14312161101687; ok := ok and num = 9223372036854775807;
    num := 9223131047853734479; num +:=     240989001041328; ok := ok and num = 9223372036854775807;
    num := 9221383812660584220; num +:=    1988224194191587; ok := ok and num = 9223372036854775807;
    num := 9212609642412704891; num +:=   10762394442070916; ok := ok and num = 9223372036854775807;
    num := 8384883669867978007; num +:=  838488366986797800; ok := ok and num = 9223372036854775807;
    num := 6148914691236517205; num +:= 3074457345618258602; ok := ok and num = 9223372036854775807;
    num := 3074457345618258602; num +:= 6148914691236517205; ok := ok and num = 9223372036854775807;
    num :=  838488366986797800; num +:= 8384883669867978007; ok := ok and num = 9223372036854775807;
    num :=   10762394442070916; num +:= 9212609642412704891; ok := ok and num = 9223372036854775807;
    num :=    1988224194191587; num +:= 9221383812660584220; ok := ok and num = 9223372036854775807;
    num :=     240989001041328; num +:= 9223131047853734479; ok := ok and num = 9223372036854775807;
    num :=      14312161101687; num +:= 9223357724693674120; ok := ok and num = 9223372036854775807;
    num :=        933865493037; num +:= 9223371102989282770; ok := ok and num = 9223372036854775807;
    num :=        747094709113; num +:= 9223371289760066694; ok := ok and num = 9223372036854775807;
    num :=         74709312968; num +:= 9223371962145462839; ok := ok and num = 9223372036854775807;
    num :=          3037000499; num +:= 9223372033817775308; ok := ok and num = 9223372036854775807;
    num :=           123456791; num +:= 9223372036731319016; ok := ok and num = 9223372036854775807;
    num :=            12345653; num +:= 9223372036842430154; ok := ok and num = 9223372036854775807;
    num :=             9876553; num +:= 9223372036844899254; ok := ok and num = 9223372036854775807;
    num :=              644443; num +:= 9223372036854131364; ok := ok and num = 9223372036854775807;
    num :=               38273; num +:= 9223372036854737534; ok := ok and num = 9223372036854775807;
    num :=                4639; num +:= 9223372036854771168; ok := ok and num = 9223372036854775807;
    num :=                 857; num +:= 9223372036854774950; ok := ok and num = 9223372036854775807;
    num :=                  11; num +:= 9223372036854775796; ok := ok and num = 9223372036854775807;
    num :=                   3; num +:= 9223372036854775804; ok := ok and num = 9223372036854775807;
    num :=                   2; num +:= 9223372036854775805; ok := ok and num = 9223372036854775807;
    num :=                   1; num +:= 9223372036854775806; ok := ok and num = 9223372036854775807;
    num :=                   0; num +:= 9223372036854775807; ok := ok and num = 9223372036854775807;
    num := 9223372036854775807; num +:= intExpr(                  0); ok := ok and num = 9223372036854775807;
    num := 9223372036854775806; num +:= intExpr(                  1); ok := ok and num = 9223372036854775807;
    num := 9223372036854775805; num +:= intExpr(                  2); ok := ok and num = 9223372036854775807;
    num := 9223372036854775804; num +:= intExpr(                  3); ok := ok and num = 9223372036854775807;
    num := 9223372036854775796; num +:= intExpr(                 11); ok := ok and num = 9223372036854775807;
    num := 9223372036854774950; num +:= intExpr(                857); ok := ok and num = 9223372036854775807;
    num := 9223372036854771168; num +:= intExpr(               4639); ok := ok and num = 9223372036854775807;
    num := 9223372036854737534; num +:= intExpr(              38273); ok := ok and num = 9223372036854775807;
    num := 9223372036854131364; num +:= intExpr(             644443); ok := ok and num = 9223372036854775807;
    num := 9223372036844899254; num +:= intExpr(            9876553); ok := ok and num = 9223372036854775807;
    num := 9223372036842430154; num +:= intExpr(           12345653); ok := ok and num = 9223372036854775807;
    num := 9223372036731319016; num +:= intExpr(          123456791); ok := ok and num = 9223372036854775807;
    num := 9223372033817775308; num +:= intExpr(         3037000499); ok := ok and num = 9223372036854775807;
    num := 9223371962145462839; num +:= intExpr(        74709312968); ok := ok and num = 9223372036854775807;
    num := 9223371289760066694; num +:= intExpr(       747094709113); ok := ok and num = 9223372036854775807;
    num := 9223371102989282770; num +:= intExpr(       933865493037); ok := ok and num = 9223372036854775807;
    num := 9223357724693674120; num +:= intExpr(     14312161101687); ok := ok and num = 9223372036854775807;
    num := 9223131047853734479; num +:= intExpr(    240989001041328); ok := ok and num = 9223372036854775807;
    num := 9221383812660584220; num +:= intExpr(   1988224194191587); ok := ok and num = 9223372036854775807;
    num := 9212609642412704891; num +:= intExpr(  10762394442070916); ok := ok and num = 9223372036854775807;
    num := 8384883669867978007; num +:= intExpr( 838488366986797800); ok := ok and num = 9223372036854775807;
    num := 6148914691236517205; num +:= intExpr(3074457345618258602); ok := ok and num = 9223372036854775807;
    num := 3074457345618258602; num +:= intExpr(6148914691236517205); ok := ok and num = 9223372036854775807;
    num :=  838488366986797800; num +:= intExpr(8384883669867978007); ok := ok and num = 9223372036854775807;
    num :=   10762394442070916; num +:= intExpr(9212609642412704891); ok := ok and num = 9223372036854775807;
    num :=    1988224194191587; num +:= intExpr(9221383812660584220); ok := ok and num = 9223372036854775807;
    num :=     240989001041328; num +:= intExpr(9223131047853734479); ok := ok and num = 9223372036854775807;
    num :=      14312161101687; num +:= intExpr(9223357724693674120); ok := ok and num = 9223372036854775807;
    num :=        933865493037; num +:= intExpr(9223371102989282770); ok := ok and num = 9223372036854775807;
    num :=        747094709113; num +:= intExpr(9223371289760066694); ok := ok and num = 9223372036854775807;
    num :=         74709312968; num +:= intExpr(9223371962145462839); ok := ok and num = 9223372036854775807;
    num :=          3037000499; num +:= intExpr(9223372033817775308); ok := ok and num = 9223372036854775807;
    num :=           123456791; num +:= intExpr(9223372036731319016); ok := ok and num = 9223372036854775807;
    num :=            12345653; num +:= intExpr(9223372036842430154); ok := ok and num = 9223372036854775807;
    num :=             9876553; num +:= intExpr(9223372036844899254); ok := ok and num = 9223372036854775807;
    num :=              644443; num +:= intExpr(9223372036854131364); ok := ok and num = 9223372036854775807;
    num :=               38273; num +:= intExpr(9223372036854737534); ok := ok and num = 9223372036854775807;
    num :=                4639; num +:= intExpr(9223372036854771168); ok := ok and num = 9223372036854775807;
    num :=                 857; num +:= intExpr(9223372036854774950); ok := ok and num = 9223372036854775807;
    num :=                  11; num +:= intExpr(9223372036854775796); ok := ok and num = 9223372036854775807;
    num :=                   3; num +:= intExpr(9223372036854775804); ok := ok and num = 9223372036854775807;
    num :=                   2; num +:= intExpr(9223372036854775805); ok := ok and num = 9223372036854775807;
    num :=                   1; num +:= intExpr(9223372036854775806); ok := ok and num = 9223372036854775807;
    num :=                   0; num +:= intExpr(9223372036854775807); ok := ok and num = 9223372036854775807;
    arr[1] := 9223372036854775807; arr[1] +:=                   0; ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223372036854775806; arr[1] +:=                   1; ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223372036854775805; arr[1] +:=                   2; ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223372036854775804; arr[1] +:=                   3; ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223372036854775796; arr[1] +:=                  11; ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223372036854774950; arr[1] +:=                 857; ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223372036854771168; arr[1] +:=                4639; ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223372036854737534; arr[1] +:=               38273; ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223372036854131364; arr[1] +:=              644443; ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223372036844899254; arr[1] +:=             9876553; ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223372036842430154; arr[1] +:=            12345653; ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223372036731319016; arr[1] +:=           123456791; ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223372033817775308; arr[1] +:=          3037000499; ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223371962145462839; arr[1] +:=         74709312968; ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223371289760066694; arr[1] +:=        747094709113; ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223371102989282770; arr[1] +:=        933865493037; ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223357724693674120; arr[1] +:=      14312161101687; ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223131047853734479; arr[1] +:=     240989001041328; ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9221383812660584220; arr[1] +:=    1988224194191587; ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9212609642412704891; arr[1] +:=   10762394442070916; ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 8384883669867978007; arr[1] +:=  838488366986797800; ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 6148914691236517205; arr[1] +:= 3074457345618258602; ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 3074457345618258602; arr[1] +:= 6148914691236517205; ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=  838488366986797800; arr[1] +:= 8384883669867978007; ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=   10762394442070916; arr[1] +:= 9212609642412704891; ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=    1988224194191587; arr[1] +:= 9221383812660584220; ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=     240989001041328; arr[1] +:= 9223131047853734479; ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=      14312161101687; arr[1] +:= 9223357724693674120; ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=        933865493037; arr[1] +:= 9223371102989282770; ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=        747094709113; arr[1] +:= 9223371289760066694; ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=         74709312968; arr[1] +:= 9223371962145462839; ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=          3037000499; arr[1] +:= 9223372033817775308; ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=           123456791; arr[1] +:= 9223372036731319016; ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=            12345653; arr[1] +:= 9223372036842430154; ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=             9876553; arr[1] +:= 9223372036844899254; ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=              644443; arr[1] +:= 9223372036854131364; ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=               38273; arr[1] +:= 9223372036854737534; ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=                4639; arr[1] +:= 9223372036854771168; ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=                 857; arr[1] +:= 9223372036854774950; ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=                  11; arr[1] +:= 9223372036854775796; ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=                   3; arr[1] +:= 9223372036854775804; ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=                   2; arr[1] +:= 9223372036854775805; ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=                   1; arr[1] +:= 9223372036854775806; ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=                   0; arr[1] +:= 9223372036854775807; ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223372036854775807; arr[1] +:= intExpr(                  0); ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223372036854775806; arr[1] +:= intExpr(                  1); ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223372036854775805; arr[1] +:= intExpr(                  2); ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223372036854775804; arr[1] +:= intExpr(                  3); ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223372036854775796; arr[1] +:= intExpr(                 11); ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223372036854774950; arr[1] +:= intExpr(                857); ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223372036854771168; arr[1] +:= intExpr(               4639); ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223372036854737534; arr[1] +:= intExpr(              38273); ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223372036854131364; arr[1] +:= intExpr(             644443); ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223372036844899254; arr[1] +:= intExpr(            9876553); ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223372036842430154; arr[1] +:= intExpr(           12345653); ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223372036731319016; arr[1] +:= intExpr(          123456791); ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223372033817775308; arr[1] +:= intExpr(         3037000499); ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223371962145462839; arr[1] +:= intExpr(        74709312968); ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223371289760066694; arr[1] +:= intExpr(       747094709113); ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223371102989282770; arr[1] +:= intExpr(       933865493037); ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223357724693674120; arr[1] +:= intExpr(     14312161101687); ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223131047853734479; arr[1] +:= intExpr(    240989001041328); ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9221383812660584220; arr[1] +:= intExpr(   1988224194191587); ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9212609642412704891; arr[1] +:= intExpr(  10762394442070916); ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 8384883669867978007; arr[1] +:= intExpr( 838488366986797800); ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 6148914691236517205; arr[1] +:= intExpr(3074457345618258602); ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 3074457345618258602; arr[1] +:= intExpr(6148914691236517205); ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=  838488366986797800; arr[1] +:= intExpr(8384883669867978007); ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=   10762394442070916; arr[1] +:= intExpr(9212609642412704891); ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=    1988224194191587; arr[1] +:= intExpr(9221383812660584220); ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=     240989001041328; arr[1] +:= intExpr(9223131047853734479); ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=      14312161101687; arr[1] +:= intExpr(9223357724693674120); ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=        933865493037; arr[1] +:= intExpr(9223371102989282770); ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=        747094709113; arr[1] +:= intExpr(9223371289760066694); ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=         74709312968; arr[1] +:= intExpr(9223371962145462839); ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=          3037000499; arr[1] +:= intExpr(9223372033817775308); ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=           123456791; arr[1] +:= intExpr(9223372036731319016); ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=            12345653; arr[1] +:= intExpr(9223372036842430154); ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=             9876553; arr[1] +:= intExpr(9223372036844899254); ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=              644443; arr[1] +:= intExpr(9223372036854131364); ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=               38273; arr[1] +:= intExpr(9223372036854737534); ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=                4639; arr[1] +:= intExpr(9223372036854771168); ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=                 857; arr[1] +:= intExpr(9223372036854774950); ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=                  11; arr[1] +:= intExpr(9223372036854775796); ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=                   3; arr[1] +:= intExpr(9223372036854775804); ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=                   2; arr[1] +:= intExpr(9223372036854775805); ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=                   1; arr[1] +:= intExpr(9223372036854775806); ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=                   0; arr[1] +:= intExpr(9223372036854775807); ok := ok and arr[1] = 9223372036854775807;
    if not ok then
      writeln(" ***** Addition that results in the maximum integer does not work correct.");
      okay := FALSE;
    end if;

    if okay then
      writeln("Addition assignment works correct for selected values.");
    else
      writeln(" ***** Addition assignment does not work correct.");
    end if;
  end func;


const proc: check_subtract is func
  local
    var boolean: okay is TRUE;
  begin
    if             INT64_MIN -                    0 <>            INT64_MIN or
                   INT64_MIN - -9223372036854775807 <>                   -1 or
        -9223372036854775807 -                    1 <>            INT64_MIN or
        -9223372036854775807 - -9223372036854775807 <>                    0 or
                          -1 -  9223372036854775807 <>            INT64_MIN or
                           0 -  9223372036854775807 <> -9223372036854775807 or
                           0 -                    0 <>                    0 or
                           0 -          -2147483647 <>           2147483647 or
                           0 -          -2147483648 <>           2147483648 or
                           0 - -9223372036854775807 <>  9223372036854775807 or
                           2 -                   -3 <>                    5 or
                         127 -                 -127 <>                  254 or
                         255 -                 -255 <>                  510 or
                       18341 -               -26783 <>                45124 or
                       32767 -               -32767 <>                65534 or
                       35759 -               -58537 <>                94296 or
                       65535 -               -65535 <>               131070 or
                       73819 -              -124303 <>               198122 or
                  2147483647 -                    0 <>           2147483647 or
                  2147483648 -                    0 <>           2147483648 or
         9223372036854775807 -  9223372036854775807 <>                    0 or
         9223372036854775807 -                    0 <>  9223372036854775807 then
      writeln(" ***** Subtraction with selected values does not work correct.");
      okay := FALSE;
    end if;

    if             INT64_MIN -                   0 <> INT64_MIN or
        -9223372036854775807 -                   1 <> INT64_MIN or
        -9223372036854775806 -                   2 <> INT64_MIN or
        -9223372036854775805 -                   3 <> INT64_MIN or
        -9223372036854775797 -                  11 <> INT64_MIN or
        -9223372036854774951 -                 857 <> INT64_MIN or
        -9223372036854771169 -                4639 <> INT64_MIN or
        -9223372036854737535 -               38273 <> INT64_MIN or
        -9223372036854131365 -              644443 <> INT64_MIN or
        -9223372036844899255 -             9876553 <> INT64_MIN or
        -9223372036842430155 -            12345653 <> INT64_MIN or
        -9223372036731319017 -           123456791 <> INT64_MIN or
        -9223372033817775309 -          3037000499 <> INT64_MIN or
        -9223371962145462840 -         74709312968 <> INT64_MIN or
        -9223371289760066695 -        747094709113 <> INT64_MIN or
        -9223371102989282771 -        933865493037 <> INT64_MIN or
        -9223357724693674121 -      14312161101687 <> INT64_MIN or
        -9223131047853734480 -     240989001041328 <> INT64_MIN or
        -9221383812660584221 -    1988224194191587 <> INT64_MIN or
        -9212609642412704892 -   10762394442070916 <> INT64_MIN or
        -8384883669867978008 -  838488366986797800 <> INT64_MIN or
        -6148914691236517206 - 3074457345618258602 <> INT64_MIN or
        -3074457345618258602 - 6148914691236517206 <> INT64_MIN or
         -838488366986797800 - 8384883669867978008 <> INT64_MIN or
          -10762394442070916 - 9212609642412704892 <> INT64_MIN or
           -1988224194191587 - 9221383812660584221 <> INT64_MIN or
            -240989001041328 - 9223131047853734480 <> INT64_MIN or
             -14312161101687 - 9223357724693674121 <> INT64_MIN or
               -933865493037 - 9223371102989282771 <> INT64_MIN or
               -747094709113 - 9223371289760066695 <> INT64_MIN or
                -74709312968 - 9223371962145462840 <> INT64_MIN or
                 -3037000499 - 9223372033817775309 <> INT64_MIN or
                  -123456791 - 9223372036731319017 <> INT64_MIN or
                   -12345653 - 9223372036842430155 <> INT64_MIN or
                    -9876553 - 9223372036844899255 <> INT64_MIN or
                     -644443 - 9223372036854131365 <> INT64_MIN or
                      -38273 - 9223372036854737535 <> INT64_MIN or
                       -4639 - 9223372036854771169 <> INT64_MIN or
                        -857 - 9223372036854774951 <> INT64_MIN or
                         -11 - 9223372036854775797 <> INT64_MIN or
                          -3 - 9223372036854775805 <> INT64_MIN or
                          -2 - 9223372036854775806 <> INT64_MIN or
                          -1 - 9223372036854775807 <> INT64_MIN or
        intExpr(           INT64_MIN) -                   0 <> INT64_MIN or
        intExpr(-9223372036854775807) -                   1 <> INT64_MIN or
        intExpr(-9223372036854775806) -                   2 <> INT64_MIN or
        intExpr(-9223372036854775805) -                   3 <> INT64_MIN or
        intExpr(-9223372036854775797) -                  11 <> INT64_MIN or
        intExpr(-9223372036854774951) -                 857 <> INT64_MIN or
        intExpr(-9223372036854771169) -                4639 <> INT64_MIN or
        intExpr(-9223372036854737535) -               38273 <> INT64_MIN or
        intExpr(-9223372036854131365) -              644443 <> INT64_MIN or
        intExpr(-9223372036844899255) -             9876553 <> INT64_MIN or
        intExpr(-9223372036842430155) -            12345653 <> INT64_MIN or
        intExpr(-9223372036731319017) -           123456791 <> INT64_MIN or
        intExpr(-9223372033817775309) -          3037000499 <> INT64_MIN or
        intExpr(-9223371962145462840) -         74709312968 <> INT64_MIN or
        intExpr(-9223371289760066695) -        747094709113 <> INT64_MIN or
        intExpr(-9223371102989282771) -        933865493037 <> INT64_MIN or
        intExpr(-9223357724693674121) -      14312161101687 <> INT64_MIN or
        intExpr(-9223131047853734480) -     240989001041328 <> INT64_MIN or
        intExpr(-9221383812660584221) -    1988224194191587 <> INT64_MIN or
        intExpr(-9212609642412704892) -   10762394442070916 <> INT64_MIN or
        intExpr(-8384883669867978008) -  838488366986797800 <> INT64_MIN or
        intExpr(-6148914691236517206) - 3074457345618258602 <> INT64_MIN or
        intExpr(-3074457345618258602) - 6148914691236517206 <> INT64_MIN or
        intExpr( -838488366986797800) - 8384883669867978008 <> INT64_MIN or
        intExpr(  -10762394442070916) - 9212609642412704892 <> INT64_MIN or
        intExpr(   -1988224194191587) - 9221383812660584221 <> INT64_MIN or
        intExpr(    -240989001041328) - 9223131047853734480 <> INT64_MIN or
        intExpr(     -14312161101687) - 9223357724693674121 <> INT64_MIN or
        intExpr(       -933865493037) - 9223371102989282771 <> INT64_MIN or
        intExpr(       -747094709113) - 9223371289760066695 <> INT64_MIN or
        intExpr(        -74709312968) - 9223371962145462840 <> INT64_MIN or
        intExpr(         -3037000499) - 9223372033817775309 <> INT64_MIN or
        intExpr(          -123456791) - 9223372036731319017 <> INT64_MIN or
        intExpr(           -12345653) - 9223372036842430155 <> INT64_MIN or
        intExpr(            -9876553) - 9223372036844899255 <> INT64_MIN or
        intExpr(             -644443) - 9223372036854131365 <> INT64_MIN or
        intExpr(              -38273) - 9223372036854737535 <> INT64_MIN or
        intExpr(               -4639) - 9223372036854771169 <> INT64_MIN or
        intExpr(                -857) - 9223372036854774951 <> INT64_MIN or
        intExpr(                 -11) - 9223372036854775797 <> INT64_MIN or
        intExpr(                  -3) - 9223372036854775805 <> INT64_MIN or
        intExpr(                  -2) - 9223372036854775806 <> INT64_MIN or
        intExpr(                  -1) - 9223372036854775807 <> INT64_MIN or
                   INT64_MIN - intExpr(                  0) <> INT64_MIN or
        -9223372036854775807 - intExpr(                  1) <> INT64_MIN or
        -9223372036854775806 - intExpr(                  2) <> INT64_MIN or
        -9223372036854775805 - intExpr(                  3) <> INT64_MIN or
        -9223372036854775797 - intExpr(                 11) <> INT64_MIN or
        -9223372036854774951 - intExpr(                857) <> INT64_MIN or
        -9223372036854771169 - intExpr(               4639) <> INT64_MIN or
        -9223372036854737535 - intExpr(              38273) <> INT64_MIN or
        -9223372036854131365 - intExpr(             644443) <> INT64_MIN or
        -9223372036844899255 - intExpr(            9876553) <> INT64_MIN or
        -9223372036842430155 - intExpr(           12345653) <> INT64_MIN or
        -9223372036731319017 - intExpr(          123456791) <> INT64_MIN or
        -9223372033817775309 - intExpr(         3037000499) <> INT64_MIN or
        -9223371962145462840 - intExpr(        74709312968) <> INT64_MIN or
        -9223371289760066695 - intExpr(       747094709113) <> INT64_MIN or
        -9223371102989282771 - intExpr(       933865493037) <> INT64_MIN or
        -9223357724693674121 - intExpr(     14312161101687) <> INT64_MIN or
        -9223131047853734480 - intExpr(    240989001041328) <> INT64_MIN or
        -9221383812660584221 - intExpr(   1988224194191587) <> INT64_MIN or
        -9212609642412704892 - intExpr(  10762394442070916) <> INT64_MIN or
        -8384883669867978008 - intExpr( 838488366986797800) <> INT64_MIN or
        -6148914691236517206 - intExpr(3074457345618258602) <> INT64_MIN or
        -3074457345618258602 - intExpr(6148914691236517206) <> INT64_MIN or
         -838488366986797800 - intExpr(8384883669867978008) <> INT64_MIN or
          -10762394442070916 - intExpr(9212609642412704892) <> INT64_MIN or
           -1988224194191587 - intExpr(9221383812660584221) <> INT64_MIN or
            -240989001041328 - intExpr(9223131047853734480) <> INT64_MIN or
             -14312161101687 - intExpr(9223357724693674121) <> INT64_MIN or
               -933865493037 - intExpr(9223371102989282771) <> INT64_MIN or
               -747094709113 - intExpr(9223371289760066695) <> INT64_MIN or
                -74709312968 - intExpr(9223371962145462840) <> INT64_MIN or
                 -3037000499 - intExpr(9223372033817775309) <> INT64_MIN or
                  -123456791 - intExpr(9223372036731319017) <> INT64_MIN or
                   -12345653 - intExpr(9223372036842430155) <> INT64_MIN or
                    -9876553 - intExpr(9223372036844899255) <> INT64_MIN or
                     -644443 - intExpr(9223372036854131365) <> INT64_MIN or
                      -38273 - intExpr(9223372036854737535) <> INT64_MIN or
                       -4639 - intExpr(9223372036854771169) <> INT64_MIN or
                        -857 - intExpr(9223372036854774951) <> INT64_MIN or
                         -11 - intExpr(9223372036854775797) <> INT64_MIN or
                          -3 - intExpr(9223372036854775805) <> INT64_MIN or
                          -2 - intExpr(9223372036854775806) <> INT64_MIN or
                          -1 - intExpr(9223372036854775807) <> INT64_MIN or
        intExpr(           INT64_MIN) - intExpr(                  0) <> INT64_MIN or
        intExpr(-9223372036854775807) - intExpr(                  1) <> INT64_MIN or
        intExpr(-9223372036854775806) - intExpr(                  2) <> INT64_MIN or
        intExpr(-9223372036854775805) - intExpr(                  3) <> INT64_MIN or
        intExpr(-9223372036854775797) - intExpr(                 11) <> INT64_MIN or
        intExpr(-9223372036854774951) - intExpr(                857) <> INT64_MIN or
        intExpr(-9223372036854771169) - intExpr(               4639) <> INT64_MIN or
        intExpr(-9223372036854737535) - intExpr(              38273) <> INT64_MIN or
        intExpr(-9223372036854131365) - intExpr(             644443) <> INT64_MIN or
        intExpr(-9223372036844899255) - intExpr(            9876553) <> INT64_MIN or
        intExpr(-9223372036842430155) - intExpr(           12345653) <> INT64_MIN or
        intExpr(-9223372036731319017) - intExpr(          123456791) <> INT64_MIN or
        intExpr(-9223372033817775309) - intExpr(         3037000499) <> INT64_MIN or
        intExpr(-9223371962145462840) - intExpr(        74709312968) <> INT64_MIN or
        intExpr(-9223371289760066695) - intExpr(       747094709113) <> INT64_MIN or
        intExpr(-9223371102989282771) - intExpr(       933865493037) <> INT64_MIN or
        intExpr(-9223357724693674121) - intExpr(     14312161101687) <> INT64_MIN or
        intExpr(-9223131047853734480) - intExpr(    240989001041328) <> INT64_MIN or
        intExpr(-9221383812660584221) - intExpr(   1988224194191587) <> INT64_MIN or
        intExpr(-9212609642412704892) - intExpr(  10762394442070916) <> INT64_MIN or
        intExpr(-8384883669867978008) - intExpr( 838488366986797800) <> INT64_MIN or
        intExpr(-6148914691236517206) - intExpr(3074457345618258602) <> INT64_MIN or
        intExpr(-3074457345618258602) - intExpr(6148914691236517206) <> INT64_MIN or
        intExpr( -838488366986797800) - intExpr(8384883669867978008) <> INT64_MIN or
        intExpr(  -10762394442070916) - intExpr(9212609642412704892) <> INT64_MIN or
        intExpr(   -1988224194191587) - intExpr(9221383812660584221) <> INT64_MIN or
        intExpr(    -240989001041328) - intExpr(9223131047853734480) <> INT64_MIN or
        intExpr(     -14312161101687) - intExpr(9223357724693674121) <> INT64_MIN or
        intExpr(       -933865493037) - intExpr(9223371102989282771) <> INT64_MIN or
        intExpr(       -747094709113) - intExpr(9223371289760066695) <> INT64_MIN or
        intExpr(        -74709312968) - intExpr(9223371962145462840) <> INT64_MIN or
        intExpr(         -3037000499) - intExpr(9223372033817775309) <> INT64_MIN or
        intExpr(          -123456791) - intExpr(9223372036731319017) <> INT64_MIN or
        intExpr(           -12345653) - intExpr(9223372036842430155) <> INT64_MIN or
        intExpr(            -9876553) - intExpr(9223372036844899255) <> INT64_MIN or
        intExpr(             -644443) - intExpr(9223372036854131365) <> INT64_MIN or
        intExpr(              -38273) - intExpr(9223372036854737535) <> INT64_MIN or
        intExpr(               -4639) - intExpr(9223372036854771169) <> INT64_MIN or
        intExpr(                -857) - intExpr(9223372036854774951) <> INT64_MIN or
        intExpr(                 -11) - intExpr(9223372036854775797) <> INT64_MIN or
        intExpr(                  -3) - intExpr(9223372036854775805) <> INT64_MIN or
        intExpr(                  -2) - intExpr(9223372036854775806) <> INT64_MIN or
        intExpr(                  -1) - intExpr(9223372036854775807) <> INT64_MIN then
      writeln(" ***** Subtraction that results in the minimum integer does not work correct.");
      okay := FALSE;
    end if;

    if  9223372036854775807 -                    0 <> 9223372036854775807 or
        9223372036854775806 -                   -1 <> 9223372036854775807 or
        9223372036854775805 -                   -2 <> 9223372036854775807 or
        9223372036854775804 -                   -3 <> 9223372036854775807 or
        9223372036854775796 -                  -11 <> 9223372036854775807 or
        9223372036854774950 -                 -857 <> 9223372036854775807 or
        9223372036854771168 -                -4639 <> 9223372036854775807 or
        9223372036854737534 -               -38273 <> 9223372036854775807 or
        9223372036854131364 -              -644443 <> 9223372036854775807 or
        9223372036844899254 -             -9876553 <> 9223372036854775807 or
        9223372036842430154 -            -12345653 <> 9223372036854775807 or
        9223372036731319016 -           -123456791 <> 9223372036854775807 or
        9223372033817775308 -          -3037000499 <> 9223372036854775807 or
        9223371962145462839 -         -74709312968 <> 9223372036854775807 or
        9223371289760066694 -        -747094709113 <> 9223372036854775807 or
        9223371102989282770 -        -933865493037 <> 9223372036854775807 or
        9223357724693674120 -      -14312161101687 <> 9223372036854775807 or
        9223131047853734479 -     -240989001041328 <> 9223372036854775807 or
        9221383812660584220 -    -1988224194191587 <> 9223372036854775807 or
        9212609642412704891 -   -10762394442070916 <> 9223372036854775807 or
        8384883669867978007 -  -838488366986797800 <> 9223372036854775807 or
        6148914691236517205 - -3074457345618258602 <> 9223372036854775807 or
        3074457345618258602 - -6148914691236517205 <> 9223372036854775807 or
         838488366986797800 - -8384883669867978007 <> 9223372036854775807 or
          10762394442070916 - -9212609642412704891 <> 9223372036854775807 or
           1988224194191587 - -9221383812660584220 <> 9223372036854775807 or
            240989001041328 - -9223131047853734479 <> 9223372036854775807 or
             14312161101687 - -9223357724693674120 <> 9223372036854775807 or
               933865493037 - -9223371102989282770 <> 9223372036854775807 or
               747094709113 - -9223371289760066694 <> 9223372036854775807 or
                74709312968 - -9223371962145462839 <> 9223372036854775807 or
                 3037000499 - -9223372033817775308 <> 9223372036854775807 or
                  123456791 - -9223372036731319016 <> 9223372036854775807 or
                   12345653 - -9223372036842430154 <> 9223372036854775807 or
                    9876553 - -9223372036844899254 <> 9223372036854775807 or
                     644443 - -9223372036854131364 <> 9223372036854775807 or
                      38273 - -9223372036854737534 <> 9223372036854775807 or
                       4639 - -9223372036854771168 <> 9223372036854775807 or
                        857 - -9223372036854774950 <> 9223372036854775807 or
                         11 - -9223372036854775796 <> 9223372036854775807 or
                          3 - -9223372036854775804 <> 9223372036854775807 or
                          2 - -9223372036854775805 <> 9223372036854775807 or
                          1 - -9223372036854775806 <> 9223372036854775807 or
                          0 - -9223372036854775807 <> 9223372036854775807 or
                         -1 -            INT64_MIN <> 9223372036854775807 or
        intExpr(9223372036854775807) -                    0 <> 9223372036854775807 or
        intExpr(9223372036854775806) -                   -1 <> 9223372036854775807 or
        intExpr(9223372036854775805) -                   -2 <> 9223372036854775807 or
        intExpr(9223372036854775804) -                   -3 <> 9223372036854775807 or
        intExpr(9223372036854775796) -                  -11 <> 9223372036854775807 or
        intExpr(9223372036854774950) -                 -857 <> 9223372036854775807 or
        intExpr(9223372036854771168) -                -4639 <> 9223372036854775807 or
        intExpr(9223372036854737534) -               -38273 <> 9223372036854775807 or
        intExpr(9223372036854131364) -              -644443 <> 9223372036854775807 or
        intExpr(9223372036844899254) -             -9876553 <> 9223372036854775807 or
        intExpr(9223372036842430154) -            -12345653 <> 9223372036854775807 or
        intExpr(9223372036731319016) -           -123456791 <> 9223372036854775807 or
        intExpr(9223372033817775308) -          -3037000499 <> 9223372036854775807 or
        intExpr(9223371962145462839) -         -74709312968 <> 9223372036854775807 or
        intExpr(9223371289760066694) -        -747094709113 <> 9223372036854775807 or
        intExpr(9223371102989282770) -        -933865493037 <> 9223372036854775807 or
        intExpr(9223357724693674120) -      -14312161101687 <> 9223372036854775807 or
        intExpr(9223131047853734479) -     -240989001041328 <> 9223372036854775807 or
        intExpr(9221383812660584220) -    -1988224194191587 <> 9223372036854775807 or
        intExpr(9212609642412704891) -   -10762394442070916 <> 9223372036854775807 or
        intExpr(8384883669867978007) -  -838488366986797800 <> 9223372036854775807 or
        intExpr(6148914691236517205) - -3074457345618258602 <> 9223372036854775807 or
        intExpr(3074457345618258602) - -6148914691236517205 <> 9223372036854775807 or
        intExpr( 838488366986797800) - -8384883669867978007 <> 9223372036854775807 or
        intExpr(  10762394442070916) - -9212609642412704891 <> 9223372036854775807 or
        intExpr(   1988224194191587) - -9221383812660584220 <> 9223372036854775807 or
        intExpr(    240989001041328) - -9223131047853734479 <> 9223372036854775807 or
        intExpr(     14312161101687) - -9223357724693674120 <> 9223372036854775807 or
        intExpr(       933865493037) - -9223371102989282770 <> 9223372036854775807 or
        intExpr(       747094709113) - -9223371289760066694 <> 9223372036854775807 or
        intExpr(        74709312968) - -9223371962145462839 <> 9223372036854775807 or
        intExpr(         3037000499) - -9223372033817775308 <> 9223372036854775807 or
        intExpr(          123456791) - -9223372036731319016 <> 9223372036854775807 or
        intExpr(           12345653) - -9223372036842430154 <> 9223372036854775807 or
        intExpr(            9876553) - -9223372036844899254 <> 9223372036854775807 or
        intExpr(             644443) - -9223372036854131364 <> 9223372036854775807 or
        intExpr(              38273) - -9223372036854737534 <> 9223372036854775807 or
        intExpr(               4639) - -9223372036854771168 <> 9223372036854775807 or
        intExpr(                857) - -9223372036854774950 <> 9223372036854775807 or
        intExpr(                 11) - -9223372036854775796 <> 9223372036854775807 or
        intExpr(                  3) - -9223372036854775804 <> 9223372036854775807 or
        intExpr(                  2) - -9223372036854775805 <> 9223372036854775807 or
        intExpr(                  1) - -9223372036854775806 <> 9223372036854775807 or
        intExpr(                  0) - -9223372036854775807 <> 9223372036854775807 or
        intExpr(                 -1) -            INT64_MIN <> 9223372036854775807 or
        9223372036854775807 - intExpr(                   0) <> 9223372036854775807 or
        9223372036854775806 - intExpr(                  -1) <> 9223372036854775807 or
        9223372036854775805 - intExpr(                  -2) <> 9223372036854775807 or
        9223372036854775804 - intExpr(                  -3) <> 9223372036854775807 or
        9223372036854775796 - intExpr(                 -11) <> 9223372036854775807 or
        9223372036854774950 - intExpr(                -857) <> 9223372036854775807 or
        9223372036854771168 - intExpr(               -4639) <> 9223372036854775807 or
        9223372036854737534 - intExpr(              -38273) <> 9223372036854775807 or
        9223372036854131364 - intExpr(             -644443) <> 9223372036854775807 or
        9223372036844899254 - intExpr(            -9876553) <> 9223372036854775807 or
        9223372036842430154 - intExpr(           -12345653) <> 9223372036854775807 or
        9223372036731319016 - intExpr(          -123456791) <> 9223372036854775807 or
        9223372033817775308 - intExpr(         -3037000499) <> 9223372036854775807 or
        9223371962145462839 - intExpr(        -74709312968) <> 9223372036854775807 or
        9223371289760066694 - intExpr(       -747094709113) <> 9223372036854775807 or
        9223371102989282770 - intExpr(       -933865493037) <> 9223372036854775807 or
        9223357724693674120 - intExpr(     -14312161101687) <> 9223372036854775807 or
        9223131047853734479 - intExpr(    -240989001041328) <> 9223372036854775807 or
        9221383812660584220 - intExpr(   -1988224194191587) <> 9223372036854775807 or
        9212609642412704891 - intExpr(  -10762394442070916) <> 9223372036854775807 or
        8384883669867978007 - intExpr( -838488366986797800) <> 9223372036854775807 or
        6148914691236517205 - intExpr(-3074457345618258602) <> 9223372036854775807 or
        3074457345618258602 - intExpr(-6148914691236517205) <> 9223372036854775807 or
         838488366986797800 - intExpr(-8384883669867978007) <> 9223372036854775807 or
          10762394442070916 - intExpr(-9212609642412704891) <> 9223372036854775807 or
           1988224194191587 - intExpr(-9221383812660584220) <> 9223372036854775807 or
            240989001041328 - intExpr(-9223131047853734479) <> 9223372036854775807 or
             14312161101687 - intExpr(-9223357724693674120) <> 9223372036854775807 or
               933865493037 - intExpr(-9223371102989282770) <> 9223372036854775807 or
               747094709113 - intExpr(-9223371289760066694) <> 9223372036854775807 or
                74709312968 - intExpr(-9223371962145462839) <> 9223372036854775807 or
                 3037000499 - intExpr(-9223372033817775308) <> 9223372036854775807 or
                  123456791 - intExpr(-9223372036731319016) <> 9223372036854775807 or
                   12345653 - intExpr(-9223372036842430154) <> 9223372036854775807 or
                    9876553 - intExpr(-9223372036844899254) <> 9223372036854775807 or
                     644443 - intExpr(-9223372036854131364) <> 9223372036854775807 or
                      38273 - intExpr(-9223372036854737534) <> 9223372036854775807 or
                       4639 - intExpr(-9223372036854771168) <> 9223372036854775807 or
                        857 - intExpr(-9223372036854774950) <> 9223372036854775807 or
                         11 - intExpr(-9223372036854775796) <> 9223372036854775807 or
                          3 - intExpr(-9223372036854775804) <> 9223372036854775807 or
                          2 - intExpr(-9223372036854775805) <> 9223372036854775807 or
                          1 - intExpr(-9223372036854775806) <> 9223372036854775807 or
                          0 - intExpr(-9223372036854775807) <> 9223372036854775807 or
                         -1 - intExpr(           INT64_MIN) <> 9223372036854775807 or
        intExpr(9223372036854775807) - intExpr(                   0) <> 9223372036854775807 or
        intExpr(9223372036854775806) - intExpr(                  -1) <> 9223372036854775807 or
        intExpr(9223372036854775805) - intExpr(                  -2) <> 9223372036854775807 or
        intExpr(9223372036854775804) - intExpr(                  -3) <> 9223372036854775807 or
        intExpr(9223372036854775796) - intExpr(                 -11) <> 9223372036854775807 or
        intExpr(9223372036854774950) - intExpr(                -857) <> 9223372036854775807 or
        intExpr(9223372036854771168) - intExpr(               -4639) <> 9223372036854775807 or
        intExpr(9223372036854737534) - intExpr(              -38273) <> 9223372036854775807 or
        intExpr(9223372036854131364) - intExpr(             -644443) <> 9223372036854775807 or
        intExpr(9223372036844899254) - intExpr(            -9876553) <> 9223372036854775807 or
        intExpr(9223372036842430154) - intExpr(           -12345653) <> 9223372036854775807 or
        intExpr(9223372036731319016) - intExpr(          -123456791) <> 9223372036854775807 or
        intExpr(9223372033817775308) - intExpr(         -3037000499) <> 9223372036854775807 or
        intExpr(9223371962145462839) - intExpr(        -74709312968) <> 9223372036854775807 or
        intExpr(9223371289760066694) - intExpr(       -747094709113) <> 9223372036854775807 or
        intExpr(9223371102989282770) - intExpr(       -933865493037) <> 9223372036854775807 or
        intExpr(9223357724693674120) - intExpr(     -14312161101687) <> 9223372036854775807 or
        intExpr(9223131047853734479) - intExpr(    -240989001041328) <> 9223372036854775807 or
        intExpr(9221383812660584220) - intExpr(   -1988224194191587) <> 9223372036854775807 or
        intExpr(9212609642412704891) - intExpr(  -10762394442070916) <> 9223372036854775807 or
        intExpr(8384883669867978007) - intExpr( -838488366986797800) <> 9223372036854775807 or
        intExpr(6148914691236517205) - intExpr(-3074457345618258602) <> 9223372036854775807 or
        intExpr(3074457345618258602) - intExpr(-6148914691236517205) <> 9223372036854775807 or
        intExpr( 838488366986797800) - intExpr(-8384883669867978007) <> 9223372036854775807 or
        intExpr(  10762394442070916) - intExpr(-9212609642412704891) <> 9223372036854775807 or
        intExpr(   1988224194191587) - intExpr(-9221383812660584220) <> 9223372036854775807 or
        intExpr(    240989001041328) - intExpr(-9223131047853734479) <> 9223372036854775807 or
        intExpr(     14312161101687) - intExpr(-9223357724693674120) <> 9223372036854775807 or
        intExpr(       933865493037) - intExpr(-9223371102989282770) <> 9223372036854775807 or
        intExpr(       747094709113) - intExpr(-9223371289760066694) <> 9223372036854775807 or
        intExpr(        74709312968) - intExpr(-9223371962145462839) <> 9223372036854775807 or
        intExpr(         3037000499) - intExpr(-9223372033817775308) <> 9223372036854775807 or
        intExpr(          123456791) - intExpr(-9223372036731319016) <> 9223372036854775807 or
        intExpr(           12345653) - intExpr(-9223372036842430154) <> 9223372036854775807 or
        intExpr(            9876553) - intExpr(-9223372036844899254) <> 9223372036854775807 or
        intExpr(             644443) - intExpr(-9223372036854131364) <> 9223372036854775807 or
        intExpr(              38273) - intExpr(-9223372036854737534) <> 9223372036854775807 or
        intExpr(               4639) - intExpr(-9223372036854771168) <> 9223372036854775807 or
        intExpr(                857) - intExpr(-9223372036854774950) <> 9223372036854775807 or
        intExpr(                 11) - intExpr(-9223372036854775796) <> 9223372036854775807 or
        intExpr(                  3) - intExpr(-9223372036854775804) <> 9223372036854775807 or
        intExpr(                  2) - intExpr(-9223372036854775805) <> 9223372036854775807 or
        intExpr(                  1) - intExpr(-9223372036854775806) <> 9223372036854775807 or
        intExpr(                  0) - intExpr(-9223372036854775807) <> 9223372036854775807 or
        intExpr(                 -1) - intExpr(           INT64_MIN) <> 9223372036854775807 then
      writeln(" ***** Subtraction that results in the maximum integer does not work correct.");
      okay := FALSE;
    end if;

    if          2  -         1  <> 1 or
                2  - intExpr(1) <> 1 or
        intExpr(2) -         1  <> 1 or
        intExpr(2) - intExpr(1) <> 1 then
      writeln(" ***** Subtraction of several summands in a chain does not work correct. (1)");
      okay := FALSE;
    end if;

    if          0  -         1  <> -1 or
                0  - intExpr(1) <> -1 or
        intExpr(0) -         1  <> -1 or
        intExpr(0) - intExpr(1) <> -1 then
      writeln(" ***** Subtraction of several summands in a chain does not work correct. (2)");
      okay := FALSE;
    end if;

    if          4  -         2  -         1  <> 1 or
                4  -         2  - intExpr(1) <> 1 or
                4  - intExpr(2) -         1  <> 1 or
                4  - intExpr(2) - intExpr(1) <> 1 or
        intExpr(4) -         2  -         1  <> 1 or
        intExpr(4) -         2  - intExpr(1) <> 1 or
        intExpr(4) - intExpr(2) -         1  <> 1 or
        intExpr(4) - intExpr(2) - intExpr(1) <> 1 then
      writeln(" ***** Subtraction of several summands in a chain does not work correct. (3)");
      okay := FALSE;
    end if;

    if          4  -         2  +         1  <> 3 or
                4  -         2  + intExpr(1) <> 3 or
                4  - intExpr(2) +         1  <> 3 or
                4  - intExpr(2) + intExpr(1) <> 3 or
        intExpr(4) -         2  +         1  <> 3 or
        intExpr(4) -         2  + intExpr(1) <> 3 or
        intExpr(4) - intExpr(2) +         1  <> 3 or
        intExpr(4) - intExpr(2) + intExpr(1) <> 3 then
      writeln(" ***** Subtraction of several summands in a chain does not work correct. (4)");
      okay := FALSE;
    end if;

    if          0  -         2  -         1  <> -3 or
                0  -         2  - intExpr(1) <> -3 or
                0  - intExpr(2) -         1  <> -3 or
                0  - intExpr(2) - intExpr(1) <> -3 or
        intExpr(0) -         2  -         1  <> -3 or
        intExpr(0) -         2  - intExpr(1) <> -3 or
        intExpr(0) - intExpr(2) -         1  <> -3 or
        intExpr(0) - intExpr(2) - intExpr(1) <> -3 then
      writeln(" ***** Subtraction of several summands in a chain does not work correct. (5)");
      okay := FALSE;
    end if;

    if          0  -         2  +         1  <> -1 or
                0  -         2  + intExpr(1) <> -1 or
                0  - intExpr(2) +         1  <> -1 or
                0  - intExpr(2) + intExpr(1) <> -1 or
        intExpr(0) -         2  +         1  <> -1 or
        intExpr(0) -         2  + intExpr(1) <> -1 or
        intExpr(0) - intExpr(2) +         1  <> -1 or
        intExpr(0) - intExpr(2) + intExpr(1) <> -1 then
      writeln(" ***** Subtraction of several summands in a chain does not work correct. (6)");
      okay := FALSE;
    end if;

    if          8  -         4  -         2  -         1  <> 1 or
                8  -         4  -         2  - intExpr(1) <> 1 or
                8  -         4  - intExpr(2) -         1  <> 1 or
                8  -         4  - intExpr(2) - intExpr(1) <> 1 or
                8  - intExpr(4) -         2  -         1  <> 1 or
                8  - intExpr(4) -         2  - intExpr(1) <> 1 or
                8  - intExpr(4) - intExpr(2) -         1  <> 1 or
                8  - intExpr(4) - intExpr(2) - intExpr(1) <> 1 or
        intExpr(8) -         4  -         2  -         1  <> 1 or
        intExpr(8) -         4  -         2  - intExpr(1) <> 1 or
        intExpr(8) -         4  - intExpr(2) -         1  <> 1 or
        intExpr(8) -         4  - intExpr(2) - intExpr(1) <> 1 or
        intExpr(8) - intExpr(4) -         2  -         1  <> 1 or
        intExpr(8) - intExpr(4) -         2  - intExpr(1) <> 1 or
        intExpr(8) - intExpr(4) - intExpr(2) -         1  <> 1 or
        intExpr(8) - intExpr(4) - intExpr(2) - intExpr(1) <> 1 then
      writeln(" ***** Subtraction of several summands in a chain does not work correct. (7)");
      okay := FALSE;
    end if;

    if          16  -         8  -         4  -         2  -         1  <> 1 or
                16  -         8  -         4  -         2  - intExpr(1) <> 1 or
                16  -         8  -         4  - intExpr(2) -         1  <> 1 or
                16  -         8  -         4  - intExpr(2) - intExpr(1) <> 1 or
                16  -         8  - intExpr(4) -         2  -         1  <> 1 or
                16  -         8  - intExpr(4) -         2  - intExpr(1) <> 1 or
                16  -         8  - intExpr(4) - intExpr(2) -         1  <> 1 or
                16  -         8  - intExpr(4) - intExpr(2) - intExpr(1) <> 1 or
                16  - intExpr(8) -         4  -         2  -         1  <> 1 or
                16  - intExpr(8) -         4  -         2  - intExpr(1) <> 1 or
                16  - intExpr(8) -         4  - intExpr(2) -         1  <> 1 or
                16  - intExpr(8) -         4  - intExpr(2) - intExpr(1) <> 1 or
                16  - intExpr(8) - intExpr(4) -         2  -         1  <> 1 or
                16  - intExpr(8) - intExpr(4) -         2  - intExpr(1) <> 1 or
                16  - intExpr(8) - intExpr(4) - intExpr(2) -         1  <> 1 or
                16  - intExpr(8) - intExpr(4) - intExpr(2) - intExpr(1) <> 1 or
        intExpr(16) -         8  -         4  -         2  -         1  <> 1 or
        intExpr(16) -         8  -         4  -         2  - intExpr(1) <> 1 or
        intExpr(16) -         8  -         4  - intExpr(2) -         1  <> 1 or
        intExpr(16) -         8  -         4  - intExpr(2) - intExpr(1) <> 1 or
        intExpr(16) -         8  - intExpr(4) -         2  -         1  <> 1 or
        intExpr(16) -         8  - intExpr(4) -         2  - intExpr(1) <> 1 or
        intExpr(16) -         8  - intExpr(4) - intExpr(2) -         1  <> 1 or
        intExpr(16) -         8  - intExpr(4) - intExpr(2) - intExpr(1) <> 1 or
        intExpr(16) - intExpr(8) -         4  -         2  -         1  <> 1 or
        intExpr(16) - intExpr(8) -         4  -         2  - intExpr(1) <> 1 or
        intExpr(16) - intExpr(8) -         4  - intExpr(2) -         1  <> 1 or
        intExpr(16) - intExpr(8) -         4  - intExpr(2) - intExpr(1) <> 1 or
        intExpr(16) - intExpr(8) - intExpr(4) -         2  -         1  <> 1 or
        intExpr(16) - intExpr(8) - intExpr(4) -         2  - intExpr(1) <> 1 or
        intExpr(16) - intExpr(8) - intExpr(4) - intExpr(2) -         1  <> 1 or
        intExpr(16) - intExpr(8) - intExpr(4) - intExpr(2) - intExpr(1) <> 1 then
      writeln(" ***** Subtraction of several summands in a chain does not work correct. (8)");
      okay := FALSE;
    end if;

    if          -1  - -4611686018427387904 - -4611686018427387904 <> 9223372036854775807 or
        intExpr(-1) - -4611686018427387904 - -4611686018427387904 <> 9223372036854775807 or
                -3  - -4611686018427387905 - -4611686018427387905 <> 9223372036854775807 or
        intExpr(-3) - -4611686018427387905 - -4611686018427387905 <> 9223372036854775807 then
      writeln(" ***** Subtraction of integer.first or less does not work correct.");
      okay := FALSE;
    end if;

    if okay then
      writeln("Subtraction works correct for selected values.");
    else
      writeln(" ***** Subtraction does not work correct.");
    end if;
  end func;


const proc: check_subtract_assign is func
  local
    var boolean: okay is TRUE;
    var boolean: ok is TRUE;
    var integer: num is 0;
    var array integer: arr is [] (0);
  begin
    num :=            INT64_MIN; num -:=                    0; ok := ok and num =            INT64_MIN;
    num :=            INT64_MIN; num -:= -9223372036854775807; ok := ok and num =                   -1;
    num := -9223372036854775807; num -:=                    1; ok := ok and num =            INT64_MIN;
    num := -9223372036854775807; num -:= -9223372036854775807; ok := ok and num =                    0;
    num :=                   -1; num -:=  9223372036854775807; ok := ok and num =            INT64_MIN;
    num :=                    0; num -:=  9223372036854775807; ok := ok and num = -9223372036854775807;
    num :=                    0; num -:=                    0; ok := ok and num =                    0;
    num :=                    0; num -:=          -2147483647; ok := ok and num =           2147483647;
    num :=                    0; num -:=          -2147483648; ok := ok and num =           2147483648;
    num :=                    0; num -:= -9223372036854775807; ok := ok and num =  9223372036854775807;
    num :=                    2; num -:=                   -3; ok := ok and num =                    5;
    num :=                  127; num -:=                 -127; ok := ok and num =                  254;
    num :=                  255; num -:=                 -255; ok := ok and num =                  510;
    num :=                18341; num -:=               -26783; ok := ok and num =                45124;
    num :=                32767; num -:=               -32767; ok := ok and num =                65534;
    num :=                35759; num -:=               -58537; ok := ok and num =                94296;
    num :=                65535; num -:=               -65535; ok := ok and num =               131070;
    num :=                73819; num -:=              -124303; ok := ok and num =               198122;
    num :=           2147483647; num -:=                    0; ok := ok and num =           2147483647;
    num :=           2147483648; num -:=                    0; ok := ok and num =           2147483648;
    num :=  9223372036854775807; num -:=  9223372036854775807; ok := ok and num =                    0;
    num :=  9223372036854775807; num -:=                    0; ok := ok and num =  9223372036854775807;
    if not ok then
      writeln(" ***** Subtraction assignment with selected values does not work correct.");
      okay := FALSE;
    end if;

    ok := TRUE;
    num :=            INT64_MIN; num -:=                   0; ok := ok and num = INT64_MIN;
    num := -9223372036854775807; num -:=                   1; ok := ok and num = INT64_MIN;
    num := -9223372036854775806; num -:=                   2; ok := ok and num = INT64_MIN;
    num := -9223372036854775805; num -:=                   3; ok := ok and num = INT64_MIN;
    num := -9223372036854775797; num -:=                  11; ok := ok and num = INT64_MIN;
    num := -9223372036854774951; num -:=                 857; ok := ok and num = INT64_MIN;
    num := -9223372036854771169; num -:=                4639; ok := ok and num = INT64_MIN;
    num := -9223372036854737535; num -:=               38273; ok := ok and num = INT64_MIN;
    num := -9223372036854131365; num -:=              644443; ok := ok and num = INT64_MIN;
    num := -9223372036844899255; num -:=             9876553; ok := ok and num = INT64_MIN;
    num := -9223372036842430155; num -:=            12345653; ok := ok and num = INT64_MIN;
    num := -9223372036731319017; num -:=           123456791; ok := ok and num = INT64_MIN;
    num := -9223372033817775309; num -:=          3037000499; ok := ok and num = INT64_MIN;
    num := -9223371962145462840; num -:=         74709312968; ok := ok and num = INT64_MIN;
    num := -9223371289760066695; num -:=        747094709113; ok := ok and num = INT64_MIN;
    num := -9223371102989282771; num -:=        933865493037; ok := ok and num = INT64_MIN;
    num := -9223357724693674121; num -:=      14312161101687; ok := ok and num = INT64_MIN;
    num := -9223131047853734480; num -:=     240989001041328; ok := ok and num = INT64_MIN;
    num := -9221383812660584221; num -:=    1988224194191587; ok := ok and num = INT64_MIN;
    num := -9212609642412704892; num -:=   10762394442070916; ok := ok and num = INT64_MIN;
    num := -8384883669867978008; num -:=  838488366986797800; ok := ok and num = INT64_MIN;
    num := -6148914691236517206; num -:= 3074457345618258602; ok := ok and num = INT64_MIN;
    num := -3074457345618258602; num -:= 6148914691236517206; ok := ok and num = INT64_MIN;
    num :=  -838488366986797800; num -:= 8384883669867978008; ok := ok and num = INT64_MIN;
    num :=   -10762394442070916; num -:= 9212609642412704892; ok := ok and num = INT64_MIN;
    num :=    -1988224194191587; num -:= 9221383812660584221; ok := ok and num = INT64_MIN;
    num :=     -240989001041328; num -:= 9223131047853734480; ok := ok and num = INT64_MIN;
    num :=      -14312161101687; num -:= 9223357724693674121; ok := ok and num = INT64_MIN;
    num :=        -933865493037; num -:= 9223371102989282771; ok := ok and num = INT64_MIN;
    num :=        -747094709113; num -:= 9223371289760066695; ok := ok and num = INT64_MIN;
    num :=         -74709312968; num -:= 9223371962145462840; ok := ok and num = INT64_MIN;
    num :=          -3037000499; num -:= 9223372033817775309; ok := ok and num = INT64_MIN;
    num :=           -123456791; num -:= 9223372036731319017; ok := ok and num = INT64_MIN;
    num :=            -12345653; num -:= 9223372036842430155; ok := ok and num = INT64_MIN;
    num :=             -9876553; num -:= 9223372036844899255; ok := ok and num = INT64_MIN;
    num :=              -644443; num -:= 9223372036854131365; ok := ok and num = INT64_MIN;
    num :=               -38273; num -:= 9223372036854737535; ok := ok and num = INT64_MIN;
    num :=                -4639; num -:= 9223372036854771169; ok := ok and num = INT64_MIN;
    num :=                 -857; num -:= 9223372036854774951; ok := ok and num = INT64_MIN;
    num :=                  -11; num -:= 9223372036854775797; ok := ok and num = INT64_MIN;
    num :=                   -3; num -:= 9223372036854775805; ok := ok and num = INT64_MIN;
    num :=                   -2; num -:= 9223372036854775806; ok := ok and num = INT64_MIN;
    num :=                   -1; num -:= 9223372036854775807; ok := ok and num = INT64_MIN;
    num :=            INT64_MIN; num -:= intExpr(                  0); ok := ok and num = INT64_MIN;
    num := -9223372036854775807; num -:= intExpr(                  1); ok := ok and num = INT64_MIN;
    num := -9223372036854775806; num -:= intExpr(                  2); ok := ok and num = INT64_MIN;
    num := -9223372036854775805; num -:= intExpr(                  3); ok := ok and num = INT64_MIN;
    num := -9223372036854775797; num -:= intExpr(                 11); ok := ok and num = INT64_MIN;
    num := -9223372036854774951; num -:= intExpr(                857); ok := ok and num = INT64_MIN;
    num := -9223372036854771169; num -:= intExpr(               4639); ok := ok and num = INT64_MIN;
    num := -9223372036854737535; num -:= intExpr(              38273); ok := ok and num = INT64_MIN;
    num := -9223372036854131365; num -:= intExpr(             644443); ok := ok and num = INT64_MIN;
    num := -9223372036844899255; num -:= intExpr(            9876553); ok := ok and num = INT64_MIN;
    num := -9223372036842430155; num -:= intExpr(           12345653); ok := ok and num = INT64_MIN;
    num := -9223372036731319017; num -:= intExpr(          123456791); ok := ok and num = INT64_MIN;
    num := -9223372033817775309; num -:= intExpr(         3037000499); ok := ok and num = INT64_MIN;
    num := -9223371962145462840; num -:= intExpr(        74709312968); ok := ok and num = INT64_MIN;
    num := -9223371289760066695; num -:= intExpr(       747094709113); ok := ok and num = INT64_MIN;
    num := -9223371102989282771; num -:= intExpr(       933865493037); ok := ok and num = INT64_MIN;
    num := -9223357724693674121; num -:= intExpr(     14312161101687); ok := ok and num = INT64_MIN;
    num := -9223131047853734480; num -:= intExpr(    240989001041328); ok := ok and num = INT64_MIN;
    num := -9221383812660584221; num -:= intExpr(   1988224194191587); ok := ok and num = INT64_MIN;
    num := -9212609642412704892; num -:= intExpr(  10762394442070916); ok := ok and num = INT64_MIN;
    num := -8384883669867978008; num -:= intExpr( 838488366986797800); ok := ok and num = INT64_MIN;
    num := -6148914691236517206; num -:= intExpr(3074457345618258602); ok := ok and num = INT64_MIN;
    num := -3074457345618258602; num -:= intExpr(6148914691236517206); ok := ok and num = INT64_MIN;
    num :=  -838488366986797800; num -:= intExpr(8384883669867978008); ok := ok and num = INT64_MIN;
    num :=   -10762394442070916; num -:= intExpr(9212609642412704892); ok := ok and num = INT64_MIN;
    num :=    -1988224194191587; num -:= intExpr(9221383812660584221); ok := ok and num = INT64_MIN;
    num :=     -240989001041328; num -:= intExpr(9223131047853734480); ok := ok and num = INT64_MIN;
    num :=      -14312161101687; num -:= intExpr(9223357724693674121); ok := ok and num = INT64_MIN;
    num :=        -933865493037; num -:= intExpr(9223371102989282771); ok := ok and num = INT64_MIN;
    num :=        -747094709113; num -:= intExpr(9223371289760066695); ok := ok and num = INT64_MIN;
    num :=         -74709312968; num -:= intExpr(9223371962145462840); ok := ok and num = INT64_MIN;
    num :=          -3037000499; num -:= intExpr(9223372033817775309); ok := ok and num = INT64_MIN;
    num :=           -123456791; num -:= intExpr(9223372036731319017); ok := ok and num = INT64_MIN;
    num :=            -12345653; num -:= intExpr(9223372036842430155); ok := ok and num = INT64_MIN;
    num :=             -9876553; num -:= intExpr(9223372036844899255); ok := ok and num = INT64_MIN;
    num :=              -644443; num -:= intExpr(9223372036854131365); ok := ok and num = INT64_MIN;
    num :=               -38273; num -:= intExpr(9223372036854737535); ok := ok and num = INT64_MIN;
    num :=                -4639; num -:= intExpr(9223372036854771169); ok := ok and num = INT64_MIN;
    num :=                 -857; num -:= intExpr(9223372036854774951); ok := ok and num = INT64_MIN;
    num :=                  -11; num -:= intExpr(9223372036854775797); ok := ok and num = INT64_MIN;
    num :=                   -3; num -:= intExpr(9223372036854775805); ok := ok and num = INT64_MIN;
    num :=                   -2; num -:= intExpr(9223372036854775806); ok := ok and num = INT64_MIN;
    num :=                   -1; num -:= intExpr(9223372036854775807); ok := ok and num = INT64_MIN;
    arr[1] :=            INT64_MIN; arr[1] -:=                   0; ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223372036854775807; arr[1] -:=                   1; ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223372036854775806; arr[1] -:=                   2; ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223372036854775805; arr[1] -:=                   3; ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223372036854775797; arr[1] -:=                  11; ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223372036854774951; arr[1] -:=                 857; ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223372036854771169; arr[1] -:=                4639; ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223372036854737535; arr[1] -:=               38273; ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223372036854131365; arr[1] -:=              644443; ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223372036844899255; arr[1] -:=             9876553; ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223372036842430155; arr[1] -:=            12345653; ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223372036731319017; arr[1] -:=           123456791; ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223372033817775309; arr[1] -:=          3037000499; ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223371962145462840; arr[1] -:=         74709312968; ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223371289760066695; arr[1] -:=        747094709113; ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223371102989282771; arr[1] -:=        933865493037; ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223357724693674121; arr[1] -:=      14312161101687; ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223131047853734480; arr[1] -:=     240989001041328; ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9221383812660584221; arr[1] -:=    1988224194191587; ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9212609642412704892; arr[1] -:=   10762394442070916; ok := ok and arr[1] = INT64_MIN;
    arr[1] := -8384883669867978008; arr[1] -:=  838488366986797800; ok := ok and arr[1] = INT64_MIN;
    arr[1] := -6148914691236517206; arr[1] -:= 3074457345618258602; ok := ok and arr[1] = INT64_MIN;
    arr[1] := -3074457345618258602; arr[1] -:= 6148914691236517206; ok := ok and arr[1] = INT64_MIN;
    arr[1] :=  -838488366986797800; arr[1] -:= 8384883669867978008; ok := ok and arr[1] = INT64_MIN;
    arr[1] :=   -10762394442070916; arr[1] -:= 9212609642412704892; ok := ok and arr[1] = INT64_MIN;
    arr[1] :=    -1988224194191587; arr[1] -:= 9221383812660584221; ok := ok and arr[1] = INT64_MIN;
    arr[1] :=     -240989001041328; arr[1] -:= 9223131047853734480; ok := ok and arr[1] = INT64_MIN;
    arr[1] :=      -14312161101687; arr[1] -:= 9223357724693674121; ok := ok and arr[1] = INT64_MIN;
    arr[1] :=        -933865493037; arr[1] -:= 9223371102989282771; ok := ok and arr[1] = INT64_MIN;
    arr[1] :=        -747094709113; arr[1] -:= 9223371289760066695; ok := ok and arr[1] = INT64_MIN;
    arr[1] :=         -74709312968; arr[1] -:= 9223371962145462840; ok := ok and arr[1] = INT64_MIN;
    arr[1] :=          -3037000499; arr[1] -:= 9223372033817775309; ok := ok and arr[1] = INT64_MIN;
    arr[1] :=           -123456791; arr[1] -:= 9223372036731319017; ok := ok and arr[1] = INT64_MIN;
    arr[1] :=            -12345653; arr[1] -:= 9223372036842430155; ok := ok and arr[1] = INT64_MIN;
    arr[1] :=             -9876553; arr[1] -:= 9223372036844899255; ok := ok and arr[1] = INT64_MIN;
    arr[1] :=              -644443; arr[1] -:= 9223372036854131365; ok := ok and arr[1] = INT64_MIN;
    arr[1] :=               -38273; arr[1] -:= 9223372036854737535; ok := ok and arr[1] = INT64_MIN;
    arr[1] :=                -4639; arr[1] -:= 9223372036854771169; ok := ok and arr[1] = INT64_MIN;
    arr[1] :=                 -857; arr[1] -:= 9223372036854774951; ok := ok and arr[1] = INT64_MIN;
    arr[1] :=                  -11; arr[1] -:= 9223372036854775797; ok := ok and arr[1] = INT64_MIN;
    arr[1] :=                   -3; arr[1] -:= 9223372036854775805; ok := ok and arr[1] = INT64_MIN;
    arr[1] :=                   -2; arr[1] -:= 9223372036854775806; ok := ok and arr[1] = INT64_MIN;
    arr[1] :=                   -1; arr[1] -:= 9223372036854775807; ok := ok and arr[1] = INT64_MIN;
    arr[1] :=            INT64_MIN; arr[1] -:= intExpr(                  0); ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223372036854775807; arr[1] -:= intExpr(                  1); ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223372036854775806; arr[1] -:= intExpr(                  2); ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223372036854775805; arr[1] -:= intExpr(                  3); ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223372036854775797; arr[1] -:= intExpr(                 11); ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223372036854774951; arr[1] -:= intExpr(                857); ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223372036854771169; arr[1] -:= intExpr(               4639); ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223372036854737535; arr[1] -:= intExpr(              38273); ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223372036854131365; arr[1] -:= intExpr(             644443); ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223372036844899255; arr[1] -:= intExpr(            9876553); ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223372036842430155; arr[1] -:= intExpr(           12345653); ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223372036731319017; arr[1] -:= intExpr(          123456791); ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223372033817775309; arr[1] -:= intExpr(         3037000499); ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223371962145462840; arr[1] -:= intExpr(        74709312968); ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223371289760066695; arr[1] -:= intExpr(       747094709113); ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223371102989282771; arr[1] -:= intExpr(       933865493037); ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223357724693674121; arr[1] -:= intExpr(     14312161101687); ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9223131047853734480; arr[1] -:= intExpr(    240989001041328); ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9221383812660584221; arr[1] -:= intExpr(   1988224194191587); ok := ok and arr[1] = INT64_MIN;
    arr[1] := -9212609642412704892; arr[1] -:= intExpr(  10762394442070916); ok := ok and arr[1] = INT64_MIN;
    arr[1] := -8384883669867978008; arr[1] -:= intExpr( 838488366986797800); ok := ok and arr[1] = INT64_MIN;
    arr[1] := -6148914691236517206; arr[1] -:= intExpr(3074457345618258602); ok := ok and arr[1] = INT64_MIN;
    arr[1] := -3074457345618258602; arr[1] -:= intExpr(6148914691236517206); ok := ok and arr[1] = INT64_MIN;
    arr[1] :=  -838488366986797800; arr[1] -:= intExpr(8384883669867978008); ok := ok and arr[1] = INT64_MIN;
    arr[1] :=   -10762394442070916; arr[1] -:= intExpr(9212609642412704892); ok := ok and arr[1] = INT64_MIN;
    arr[1] :=    -1988224194191587; arr[1] -:= intExpr(9221383812660584221); ok := ok and arr[1] = INT64_MIN;
    arr[1] :=     -240989001041328; arr[1] -:= intExpr(9223131047853734480); ok := ok and arr[1] = INT64_MIN;
    arr[1] :=      -14312161101687; arr[1] -:= intExpr(9223357724693674121); ok := ok and arr[1] = INT64_MIN;
    arr[1] :=        -933865493037; arr[1] -:= intExpr(9223371102989282771); ok := ok and arr[1] = INT64_MIN;
    arr[1] :=        -747094709113; arr[1] -:= intExpr(9223371289760066695); ok := ok and arr[1] = INT64_MIN;
    arr[1] :=         -74709312968; arr[1] -:= intExpr(9223371962145462840); ok := ok and arr[1] = INT64_MIN;
    arr[1] :=          -3037000499; arr[1] -:= intExpr(9223372033817775309); ok := ok and arr[1] = INT64_MIN;
    arr[1] :=           -123456791; arr[1] -:= intExpr(9223372036731319017); ok := ok and arr[1] = INT64_MIN;
    arr[1] :=            -12345653; arr[1] -:= intExpr(9223372036842430155); ok := ok and arr[1] = INT64_MIN;
    arr[1] :=             -9876553; arr[1] -:= intExpr(9223372036844899255); ok := ok and arr[1] = INT64_MIN;
    arr[1] :=              -644443; arr[1] -:= intExpr(9223372036854131365); ok := ok and arr[1] = INT64_MIN;
    arr[1] :=               -38273; arr[1] -:= intExpr(9223372036854737535); ok := ok and arr[1] = INT64_MIN;
    arr[1] :=                -4639; arr[1] -:= intExpr(9223372036854771169); ok := ok and arr[1] = INT64_MIN;
    arr[1] :=                 -857; arr[1] -:= intExpr(9223372036854774951); ok := ok and arr[1] = INT64_MIN;
    arr[1] :=                  -11; arr[1] -:= intExpr(9223372036854775797); ok := ok and arr[1] = INT64_MIN;
    arr[1] :=                   -3; arr[1] -:= intExpr(9223372036854775805); ok := ok and arr[1] = INT64_MIN;
    arr[1] :=                   -2; arr[1] -:= intExpr(9223372036854775806); ok := ok and arr[1] = INT64_MIN;
    arr[1] :=                   -1; arr[1] -:= intExpr(9223372036854775807); ok := ok and arr[1] = INT64_MIN;
    if not ok then
      writeln(" ***** Subtraction assignment that results in the minimum integer does not work correct.");
      okay := FALSE;
    end if;

    ok := TRUE;
    num := 9223372036854775807; num -:=                    0; ok := ok and num = 9223372036854775807;
    num := 9223372036854775806; num -:=                   -1; ok := ok and num = 9223372036854775807;
    num := 9223372036854775805; num -:=                   -2; ok := ok and num = 9223372036854775807;
    num := 9223372036854775804; num -:=                   -3; ok := ok and num = 9223372036854775807;
    num := 9223372036854775796; num -:=                  -11; ok := ok and num = 9223372036854775807;
    num := 9223372036854774950; num -:=                 -857; ok := ok and num = 9223372036854775807;
    num := 9223372036854771168; num -:=                -4639; ok := ok and num = 9223372036854775807;
    num := 9223372036854737534; num -:=               -38273; ok := ok and num = 9223372036854775807;
    num := 9223372036854131364; num -:=              -644443; ok := ok and num = 9223372036854775807;
    num := 9223372036844899254; num -:=             -9876553; ok := ok and num = 9223372036854775807;
    num := 9223372036842430154; num -:=            -12345653; ok := ok and num = 9223372036854775807;
    num := 9223372036731319016; num -:=           -123456791; ok := ok and num = 9223372036854775807;
    num := 9223372033817775308; num -:=          -3037000499; ok := ok and num = 9223372036854775807;
    num := 9223371962145462839; num -:=         -74709312968; ok := ok and num = 9223372036854775807;
    num := 9223371289760066694; num -:=        -747094709113; ok := ok and num = 9223372036854775807;
    num := 9223371102989282770; num -:=        -933865493037; ok := ok and num = 9223372036854775807;
    num := 9223357724693674120; num -:=      -14312161101687; ok := ok and num = 9223372036854775807;
    num := 9223131047853734479; num -:=     -240989001041328; ok := ok and num = 9223372036854775807;
    num := 9221383812660584220; num -:=    -1988224194191587; ok := ok and num = 9223372036854775807;
    num := 9212609642412704891; num -:=   -10762394442070916; ok := ok and num = 9223372036854775807;
    num := 8384883669867978007; num -:=  -838488366986797800; ok := ok and num = 9223372036854775807;
    num := 6148914691236517205; num -:= -3074457345618258602; ok := ok and num = 9223372036854775807;
    num := 3074457345618258602; num -:= -6148914691236517205; ok := ok and num = 9223372036854775807;
    num :=  838488366986797800; num -:= -8384883669867978007; ok := ok and num = 9223372036854775807;
    num :=   10762394442070916; num -:= -9212609642412704891; ok := ok and num = 9223372036854775807;
    num :=    1988224194191587; num -:= -9221383812660584220; ok := ok and num = 9223372036854775807;
    num :=     240989001041328; num -:= -9223131047853734479; ok := ok and num = 9223372036854775807;
    num :=      14312161101687; num -:= -9223357724693674120; ok := ok and num = 9223372036854775807;
    num :=        933865493037; num -:= -9223371102989282770; ok := ok and num = 9223372036854775807;
    num :=        747094709113; num -:= -9223371289760066694; ok := ok and num = 9223372036854775807;
    num :=         74709312968; num -:= -9223371962145462839; ok := ok and num = 9223372036854775807;
    num :=          3037000499; num -:= -9223372033817775308; ok := ok and num = 9223372036854775807;
    num :=           123456791; num -:= -9223372036731319016; ok := ok and num = 9223372036854775807;
    num :=            12345653; num -:= -9223372036842430154; ok := ok and num = 9223372036854775807;
    num :=             9876553; num -:= -9223372036844899254; ok := ok and num = 9223372036854775807;
    num :=              644443; num -:= -9223372036854131364; ok := ok and num = 9223372036854775807;
    num :=               38273; num -:= -9223372036854737534; ok := ok and num = 9223372036854775807;
    num :=                4639; num -:= -9223372036854771168; ok := ok and num = 9223372036854775807;
    num :=                 857; num -:= -9223372036854774950; ok := ok and num = 9223372036854775807;
    num :=                  11; num -:= -9223372036854775796; ok := ok and num = 9223372036854775807;
    num :=                   3; num -:= -9223372036854775804; ok := ok and num = 9223372036854775807;
    num :=                   2; num -:= -9223372036854775805; ok := ok and num = 9223372036854775807;
    num :=                   1; num -:= -9223372036854775806; ok := ok and num = 9223372036854775807;
    num :=                   0; num -:= -9223372036854775807; ok := ok and num = 9223372036854775807;
    num := 9223372036854775807; num -:= intExpr(                   0); ok := ok and num = 9223372036854775807;
    num := 9223372036854775806; num -:= intExpr(                  -1); ok := ok and num = 9223372036854775807;
    num := 9223372036854775805; num -:= intExpr(                  -2); ok := ok and num = 9223372036854775807;
    num := 9223372036854775804; num -:= intExpr(                  -3); ok := ok and num = 9223372036854775807;
    num := 9223372036854775796; num -:= intExpr(                 -11); ok := ok and num = 9223372036854775807;
    num := 9223372036854774950; num -:= intExpr(                -857); ok := ok and num = 9223372036854775807;
    num := 9223372036854771168; num -:= intExpr(               -4639); ok := ok and num = 9223372036854775807;
    num := 9223372036854737534; num -:= intExpr(              -38273); ok := ok and num = 9223372036854775807;
    num := 9223372036854131364; num -:= intExpr(             -644443); ok := ok and num = 9223372036854775807;
    num := 9223372036844899254; num -:= intExpr(            -9876553); ok := ok and num = 9223372036854775807;
    num := 9223372036842430154; num -:= intExpr(           -12345653); ok := ok and num = 9223372036854775807;
    num := 9223372036731319016; num -:= intExpr(          -123456791); ok := ok and num = 9223372036854775807;
    num := 9223372033817775308; num -:= intExpr(         -3037000499); ok := ok and num = 9223372036854775807;
    num := 9223371962145462839; num -:= intExpr(        -74709312968); ok := ok and num = 9223372036854775807;
    num := 9223371289760066694; num -:= intExpr(       -747094709113); ok := ok and num = 9223372036854775807;
    num := 9223371102989282770; num -:= intExpr(       -933865493037); ok := ok and num = 9223372036854775807;
    num := 9223357724693674120; num -:= intExpr(     -14312161101687); ok := ok and num = 9223372036854775807;
    num := 9223131047853734479; num -:= intExpr(    -240989001041328); ok := ok and num = 9223372036854775807;
    num := 9221383812660584220; num -:= intExpr(   -1988224194191587); ok := ok and num = 9223372036854775807;
    num := 9212609642412704891; num -:= intExpr(  -10762394442070916); ok := ok and num = 9223372036854775807;
    num := 8384883669867978007; num -:= intExpr( -838488366986797800); ok := ok and num = 9223372036854775807;
    num := 6148914691236517205; num -:= intExpr(-3074457345618258602); ok := ok and num = 9223372036854775807;
    num := 3074457345618258602; num -:= intExpr(-6148914691236517205); ok := ok and num = 9223372036854775807;
    num :=  838488366986797800; num -:= intExpr(-8384883669867978007); ok := ok and num = 9223372036854775807;
    num :=   10762394442070916; num -:= intExpr(-9212609642412704891); ok := ok and num = 9223372036854775807;
    num :=    1988224194191587; num -:= intExpr(-9221383812660584220); ok := ok and num = 9223372036854775807;
    num :=     240989001041328; num -:= intExpr(-9223131047853734479); ok := ok and num = 9223372036854775807;
    num :=      14312161101687; num -:= intExpr(-9223357724693674120); ok := ok and num = 9223372036854775807;
    num :=        933865493037; num -:= intExpr(-9223371102989282770); ok := ok and num = 9223372036854775807;
    num :=        747094709113; num -:= intExpr(-9223371289760066694); ok := ok and num = 9223372036854775807;
    num :=         74709312968; num -:= intExpr(-9223371962145462839); ok := ok and num = 9223372036854775807;
    num :=          3037000499; num -:= intExpr(-9223372033817775308); ok := ok and num = 9223372036854775807;
    num :=           123456791; num -:= intExpr(-9223372036731319016); ok := ok and num = 9223372036854775807;
    num :=            12345653; num -:= intExpr(-9223372036842430154); ok := ok and num = 9223372036854775807;
    num :=             9876553; num -:= intExpr(-9223372036844899254); ok := ok and num = 9223372036854775807;
    num :=              644443; num -:= intExpr(-9223372036854131364); ok := ok and num = 9223372036854775807;
    num :=               38273; num -:= intExpr(-9223372036854737534); ok := ok and num = 9223372036854775807;
    num :=                4639; num -:= intExpr(-9223372036854771168); ok := ok and num = 9223372036854775807;
    num :=                 857; num -:= intExpr(-9223372036854774950); ok := ok and num = 9223372036854775807;
    num :=                  11; num -:= intExpr(-9223372036854775796); ok := ok and num = 9223372036854775807;
    num :=                   3; num -:= intExpr(-9223372036854775804); ok := ok and num = 9223372036854775807;
    num :=                   2; num -:= intExpr(-9223372036854775805); ok := ok and num = 9223372036854775807;
    num :=                   1; num -:= intExpr(-9223372036854775806); ok := ok and num = 9223372036854775807;
    num :=                   0; num -:= intExpr(-9223372036854775807); ok := ok and num = 9223372036854775807;
    arr[1] := 9223372036854775807; arr[1] -:=                    0; ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223372036854775806; arr[1] -:=                   -1; ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223372036854775805; arr[1] -:=                   -2; ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223372036854775804; arr[1] -:=                   -3; ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223372036854775796; arr[1] -:=                  -11; ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223372036854774950; arr[1] -:=                 -857; ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223372036854771168; arr[1] -:=                -4639; ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223372036854737534; arr[1] -:=               -38273; ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223372036854131364; arr[1] -:=              -644443; ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223372036844899254; arr[1] -:=             -9876553; ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223372036842430154; arr[1] -:=            -12345653; ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223372036731319016; arr[1] -:=           -123456791; ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223372033817775308; arr[1] -:=          -3037000499; ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223371962145462839; arr[1] -:=         -74709312968; ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223371289760066694; arr[1] -:=        -747094709113; ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223371102989282770; arr[1] -:=        -933865493037; ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223357724693674120; arr[1] -:=      -14312161101687; ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223131047853734479; arr[1] -:=     -240989001041328; ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9221383812660584220; arr[1] -:=    -1988224194191587; ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9212609642412704891; arr[1] -:=   -10762394442070916; ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 8384883669867978007; arr[1] -:=  -838488366986797800; ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 6148914691236517205; arr[1] -:= -3074457345618258602; ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 3074457345618258602; arr[1] -:= -6148914691236517205; ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=  838488366986797800; arr[1] -:= -8384883669867978007; ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=   10762394442070916; arr[1] -:= -9212609642412704891; ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=    1988224194191587; arr[1] -:= -9221383812660584220; ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=     240989001041328; arr[1] -:= -9223131047853734479; ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=      14312161101687; arr[1] -:= -9223357724693674120; ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=        933865493037; arr[1] -:= -9223371102989282770; ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=        747094709113; arr[1] -:= -9223371289760066694; ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=         74709312968; arr[1] -:= -9223371962145462839; ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=          3037000499; arr[1] -:= -9223372033817775308; ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=           123456791; arr[1] -:= -9223372036731319016; ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=            12345653; arr[1] -:= -9223372036842430154; ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=             9876553; arr[1] -:= -9223372036844899254; ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=              644443; arr[1] -:= -9223372036854131364; ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=               38273; arr[1] -:= -9223372036854737534; ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=                4639; arr[1] -:= -9223372036854771168; ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=                 857; arr[1] -:= -9223372036854774950; ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=                  11; arr[1] -:= -9223372036854775796; ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=                   3; arr[1] -:= -9223372036854775804; ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=                   2; arr[1] -:= -9223372036854775805; ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=                   1; arr[1] -:= -9223372036854775806; ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=                   0; arr[1] -:= -9223372036854775807; ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223372036854775807; arr[1] -:= intExpr(                   0); ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223372036854775806; arr[1] -:= intExpr(                  -1); ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223372036854775805; arr[1] -:= intExpr(                  -2); ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223372036854775804; arr[1] -:= intExpr(                  -3); ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223372036854775796; arr[1] -:= intExpr(                 -11); ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223372036854774950; arr[1] -:= intExpr(                -857); ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223372036854771168; arr[1] -:= intExpr(               -4639); ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223372036854737534; arr[1] -:= intExpr(              -38273); ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223372036854131364; arr[1] -:= intExpr(             -644443); ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223372036844899254; arr[1] -:= intExpr(            -9876553); ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223372036842430154; arr[1] -:= intExpr(           -12345653); ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223372036731319016; arr[1] -:= intExpr(          -123456791); ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223372033817775308; arr[1] -:= intExpr(         -3037000499); ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223371962145462839; arr[1] -:= intExpr(        -74709312968); ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223371289760066694; arr[1] -:= intExpr(       -747094709113); ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223371102989282770; arr[1] -:= intExpr(       -933865493037); ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223357724693674120; arr[1] -:= intExpr(     -14312161101687); ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9223131047853734479; arr[1] -:= intExpr(    -240989001041328); ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9221383812660584220; arr[1] -:= intExpr(   -1988224194191587); ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 9212609642412704891; arr[1] -:= intExpr(  -10762394442070916); ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 8384883669867978007; arr[1] -:= intExpr( -838488366986797800); ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 6148914691236517205; arr[1] -:= intExpr(-3074457345618258602); ok := ok and arr[1] = 9223372036854775807;
    arr[1] := 3074457345618258602; arr[1] -:= intExpr(-6148914691236517205); ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=  838488366986797800; arr[1] -:= intExpr(-8384883669867978007); ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=   10762394442070916; arr[1] -:= intExpr(-9212609642412704891); ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=    1988224194191587; arr[1] -:= intExpr(-9221383812660584220); ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=     240989001041328; arr[1] -:= intExpr(-9223131047853734479); ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=      14312161101687; arr[1] -:= intExpr(-9223357724693674120); ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=        933865493037; arr[1] -:= intExpr(-9223371102989282770); ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=        747094709113; arr[1] -:= intExpr(-9223371289760066694); ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=         74709312968; arr[1] -:= intExpr(-9223371962145462839); ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=          3037000499; arr[1] -:= intExpr(-9223372033817775308); ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=           123456791; arr[1] -:= intExpr(-9223372036731319016); ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=            12345653; arr[1] -:= intExpr(-9223372036842430154); ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=             9876553; arr[1] -:= intExpr(-9223372036844899254); ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=              644443; arr[1] -:= intExpr(-9223372036854131364); ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=               38273; arr[1] -:= intExpr(-9223372036854737534); ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=                4639; arr[1] -:= intExpr(-9223372036854771168); ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=                 857; arr[1] -:= intExpr(-9223372036854774950); ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=                  11; arr[1] -:= intExpr(-9223372036854775796); ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=                   3; arr[1] -:= intExpr(-9223372036854775804); ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=                   2; arr[1] -:= intExpr(-9223372036854775805); ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=                   1; arr[1] -:= intExpr(-9223372036854775806); ok := ok and arr[1] = 9223372036854775807;
    arr[1] :=                   0; arr[1] -:= intExpr(-9223372036854775807); ok := ok and arr[1] = 9223372036854775807;
    if not ok then
      writeln(" ***** Subtraction assignment that results in the maximum integer does not work correct.");
      okay := FALSE;
    end if;

    if okay then
      writeln("Subtraction assignment works correct for selected values.");
    else
      writeln(" ***** Subtraction assignment does not work correct.");
    end if;
  end func;


const proc: check_succ is func
  local
    var boolean: okay is TRUE;
  begin
    if  succ(           INT64_MIN) <> -9223372036854775807 or
        succ(-9223372036854775807) <> -9223372036854775806 or
        succ(     -14312161101687) <>      -14312161101686 or
        succ(         -4294967297) <>          -4294967296 or
        succ(         -4294967296) <>          -4294967295 or
        succ(         -4294967295) <>          -4294967294 or
        succ(         -2147483649) <>          -2147483648 or
        succ(         -2147483648) <>          -2147483647 or
        succ(         -2147483647) <>          -2147483646 or
        succ(          -123456791) <>           -123456790 or
        succ(             -644443) <>              -644442 or
        succ(                  -1) <>                    0 or
        succ(                   0) <>                    1 or
        succ(                   1) <>                    2 or
        succ(              644443) <>               644444 or
        succ(           123456791) <>            123456792 or
        succ(          2147483646) <>           2147483647 or
        succ(          2147483647) <>           2147483648 or
        succ(          2147483648) <>           2147483649 or
        succ(          4294967295) <>           4294967296 or
        succ(          4294967296) <>           4294967297 or
        succ(          4294967297) <>           4294967298 or
        succ(      14312161101687) <>       14312161101688 or
        succ( 9223372036854775805) <>  9223372036854775806 or
        succ( 9223372036854775806) <>  9223372036854775807 or
        succ(intExpr(           INT64_MIN)) <> -9223372036854775807 or
        succ(intExpr(-9223372036854775807)) <> -9223372036854775806 or
        succ(intExpr(     -14312161101687)) <>      -14312161101686 or
        succ(intExpr(         -4294967297)) <>          -4294967296 or
        succ(intExpr(         -4294967296)) <>          -4294967295 or
        succ(intExpr(         -4294967295)) <>          -4294967294 or
        succ(intExpr(         -2147483649)) <>          -2147483648 or
        succ(intExpr(         -2147483648)) <>          -2147483647 or
        succ(intExpr(         -2147483647)) <>          -2147483646 or
        succ(intExpr(          -123456791)) <>           -123456790 or
        succ(intExpr(             -644443)) <>              -644442 or
        succ(intExpr(                  -1)) <>                    0 or
        succ(intExpr(                   0)) <>                    1 or
        succ(intExpr(                   1)) <>                    2 or
        succ(intExpr(              644443)) <>               644444 or
        succ(intExpr(           123456791)) <>            123456792 or
        succ(intExpr(          2147483646)) <>           2147483647 or
        succ(intExpr(          2147483647)) <>           2147483648 or
        succ(intExpr(          2147483648)) <>           2147483649 or
        succ(intExpr(          4294967295)) <>           4294967296 or
        succ(intExpr(          4294967296)) <>           4294967297 or
        succ(intExpr(          4294967297)) <>           4294967298 or
        succ(intExpr(      14312161101687)) <>       14312161101688 or
        succ(intExpr( 9223372036854775805)) <>  9223372036854775806 or
        succ(intExpr( 9223372036854775806)) <>  9223372036854775807 then
      writeln(" ***** Succ does not work correkt for selected values.");
      okay := FALSE;
    end if;

    if okay then
      writeln("Succ works correct for selected values.");
    else
      writeln(" ***** Succ does not work correct.");
    end if;
  end func;


const proc: check_pred is func
  local
    var boolean: okay is TRUE;
  begin
    if  pred(-9223372036854775807) <>            INT64_MIN or
        pred(-9223372036854775806) <> -9223372036854775807 or
        pred(     -14312161101687) <>      -14312161101688 or
        pred(         -4294967297) <>          -4294967298 or
        pred(         -4294967296) <>          -4294967297 or
        pred(         -4294967295) <>          -4294967296 or
        pred(         -2147483649) <>          -2147483650 or
        pred(         -2147483648) <>          -2147483649 or
        pred(         -2147483647) <>          -2147483648 or
        pred(          -123456791) <>           -123456792 or
        pred(             -644443) <>              -644444 or
        pred(                  -1) <>                   -2 or
        pred(                   0) <>                   -1 or
        pred(                   1) <>                    0 or
        pred(              644443) <>               644442 or
        pred(           123456791) <>            123456790 or
        pred(          2147483646) <>           2147483645 or
        pred(          2147483647) <>           2147483646 or
        pred(          2147483648) <>           2147483647 or
        pred(          4294967295) <>           4294967294 or
        pred(          4294967296) <>           4294967295 or
        pred(          4294967297) <>           4294967296 or
        pred(      14312161101687) <>       14312161101686 or
        pred( 9223372036854775806) <>  9223372036854775805 or
        pred( 9223372036854775807) <>  9223372036854775806 or
        pred(intExpr(-9223372036854775807)) <>            INT64_MIN or
        pred(intExpr(-9223372036854775806)) <> -9223372036854775807 or
        pred(intExpr(     -14312161101687)) <>      -14312161101688 or
        pred(intExpr(         -4294967297)) <>          -4294967298 or
        pred(intExpr(         -4294967296)) <>          -4294967297 or
        pred(intExpr(         -4294967295)) <>          -4294967296 or
        pred(intExpr(         -2147483649)) <>          -2147483650 or
        pred(intExpr(         -2147483648)) <>          -2147483649 or
        pred(intExpr(         -2147483647)) <>          -2147483648 or
        pred(intExpr(          -123456791)) <>           -123456792 or
        pred(intExpr(             -644443)) <>              -644444 or
        pred(intExpr(                  -1)) <>                   -2 or
        pred(intExpr(                   0)) <>                   -1 or
        pred(intExpr(                   1)) <>                    0 or
        pred(intExpr(              644443)) <>               644442 or
        pred(intExpr(           123456791)) <>            123456790 or
        pred(intExpr(          2147483646)) <>           2147483645 or
        pred(intExpr(          2147483647)) <>           2147483646 or
        pred(intExpr(          2147483648)) <>           2147483647 or
        pred(intExpr(          4294967295)) <>           4294967294 or
        pred(intExpr(          4294967296)) <>           4294967295 or
        pred(intExpr(          4294967297)) <>           4294967296 or
        pred(intExpr(      14312161101687)) <>       14312161101686 or
        pred(intExpr( 9223372036854775806)) <>  9223372036854775805 or
        pred(intExpr( 9223372036854775807)) <>  9223372036854775806 then
      writeln(" ***** Pred does not work correkt for selected values.");
      okay := FALSE;
    end if;

    if okay then
      writeln("Pred works correct for selected values.");
    else
      writeln(" ***** Pred does not work correct.");
    end if;
  end func;


const proc: check_incr is func
  local
    var integer: num is 0;
    var array integer: arr is [] (0);
    var boolean: okay is TRUE;
  begin
    num :=            INT64_MIN; incr(num); okay := okay and num = -9223372036854775807;
    num := -9223372036854775807; incr(num); okay := okay and num = -9223372036854775806;
    num :=      -14312161101687; incr(num); okay := okay and num =      -14312161101686;
    num :=          -4294967297; incr(num); okay := okay and num =          -4294967296;
    num :=          -4294967296; incr(num); okay := okay and num =          -4294967295;
    num :=          -4294967295; incr(num); okay := okay and num =          -4294967294;
    num :=          -2147483649; incr(num); okay := okay and num =          -2147483648;
    num :=          -2147483648; incr(num); okay := okay and num =          -2147483647;
    num :=          -2147483647; incr(num); okay := okay and num =          -2147483646;
    num :=           -123456791; incr(num); okay := okay and num =           -123456790;
    num :=              -644443; incr(num); okay := okay and num =              -644442;
    num :=                   -1; incr(num); okay := okay and num =                    0;
    num :=                    0; incr(num); okay := okay and num =                    1;
    num :=                    1; incr(num); okay := okay and num =                    2;
    num :=               644443; incr(num); okay := okay and num =               644444;
    num :=            123456791; incr(num); okay := okay and num =            123456792;
    num :=           2147483646; incr(num); okay := okay and num =           2147483647;
    num :=           2147483647; incr(num); okay := okay and num =           2147483648;
    num :=           2147483648; incr(num); okay := okay and num =           2147483649;
    num :=           4294967295; incr(num); okay := okay and num =           4294967296;
    num :=           4294967296; incr(num); okay := okay and num =           4294967297;
    num :=           4294967297; incr(num); okay := okay and num =           4294967298;
    num :=       14312161101687; incr(num); okay := okay and num =       14312161101688;
    num :=  9223372036854775805; incr(num); okay := okay and num =  9223372036854775806;
    num :=  9223372036854775806; incr(num); okay := okay and num =  9223372036854775807;
    arr[1] :=            INT64_MIN; incr(arr[1]); okay := okay and arr[1] = -9223372036854775807;
    arr[1] := -9223372036854775807; incr(arr[1]); okay := okay and arr[1] = -9223372036854775806;
    arr[1] :=      -14312161101687; incr(arr[1]); okay := okay and arr[1] =      -14312161101686;
    arr[1] :=          -4294967297; incr(arr[1]); okay := okay and arr[1] =          -4294967296;
    arr[1] :=          -4294967296; incr(arr[1]); okay := okay and arr[1] =          -4294967295;
    arr[1] :=          -4294967295; incr(arr[1]); okay := okay and arr[1] =          -4294967294;
    arr[1] :=          -2147483649; incr(arr[1]); okay := okay and arr[1] =          -2147483648;
    arr[1] :=          -2147483648; incr(arr[1]); okay := okay and arr[1] =          -2147483647;
    arr[1] :=          -2147483647; incr(arr[1]); okay := okay and arr[1] =          -2147483646;
    arr[1] :=           -123456791; incr(arr[1]); okay := okay and arr[1] =           -123456790;
    arr[1] :=              -644443; incr(arr[1]); okay := okay and arr[1] =              -644442;
    arr[1] :=                   -1; incr(arr[1]); okay := okay and arr[1] =                    0;
    arr[1] :=                    0; incr(arr[1]); okay := okay and arr[1] =                    1;
    arr[1] :=                    1; incr(arr[1]); okay := okay and arr[1] =                    2;
    arr[1] :=               644443; incr(arr[1]); okay := okay and arr[1] =               644444;
    arr[1] :=            123456791; incr(arr[1]); okay := okay and arr[1] =            123456792;
    arr[1] :=           2147483646; incr(arr[1]); okay := okay and arr[1] =           2147483647;
    arr[1] :=           2147483647; incr(arr[1]); okay := okay and arr[1] =           2147483648;
    arr[1] :=           2147483648; incr(arr[1]); okay := okay and arr[1] =           2147483649;
    arr[1] :=           4294967295; incr(arr[1]); okay := okay and arr[1] =           4294967296;
    arr[1] :=           4294967296; incr(arr[1]); okay := okay and arr[1] =           4294967297;
    arr[1] :=           4294967297; incr(arr[1]); okay := okay and arr[1] =           4294967298;
    arr[1] :=       14312161101687; incr(arr[1]); okay := okay and arr[1] =       14312161101688;
    arr[1] :=  9223372036854775805; incr(arr[1]); okay := okay and arr[1] =  9223372036854775806;
    arr[1] :=  9223372036854775806; incr(arr[1]); okay := okay and arr[1] =  9223372036854775807;

    if okay then
      writeln("Incr works correct for selected values.");
    else
      writeln(" ***** Incr does not work correct.");
    end if;
  end func;


const proc: check_decr is func
  local
    var integer: num is 0;
    var array integer: arr is [] (0);
    var boolean: okay is TRUE;
  begin
    num := -9223372036854775807; decr(num); okay := okay and num =            INT64_MIN;
    num := -9223372036854775806; decr(num); okay := okay and num = -9223372036854775807;
    num :=      -14312161101687; decr(num); okay := okay and num =      -14312161101688;
    num :=          -4294967297; decr(num); okay := okay and num =          -4294967298;
    num :=          -4294967296; decr(num); okay := okay and num =          -4294967297;
    num :=          -4294967295; decr(num); okay := okay and num =          -4294967296;
    num :=          -2147483649; decr(num); okay := okay and num =          -2147483650;
    num :=          -2147483648; decr(num); okay := okay and num =          -2147483649;
    num :=          -2147483647; decr(num); okay := okay and num =          -2147483648;
    num :=           -123456791; decr(num); okay := okay and num =           -123456792;
    num :=              -644443; decr(num); okay := okay and num =              -644444;
    num :=                   -1; decr(num); okay := okay and num =                   -2;
    num :=                    0; decr(num); okay := okay and num =                   -1;
    num :=                    1; decr(num); okay := okay and num =                    0;
    num :=               644443; decr(num); okay := okay and num =               644442;
    num :=            123456791; decr(num); okay := okay and num =            123456790;
    num :=           2147483646; decr(num); okay := okay and num =           2147483645;
    num :=           2147483647; decr(num); okay := okay and num =           2147483646;
    num :=           2147483648; decr(num); okay := okay and num =           2147483647;
    num :=           4294967295; decr(num); okay := okay and num =           4294967294;
    num :=           4294967296; decr(num); okay := okay and num =           4294967295;
    num :=           4294967297; decr(num); okay := okay and num =           4294967296;
    num :=       14312161101687; decr(num); okay := okay and num =       14312161101686;
    num :=  9223372036854775806; decr(num); okay := okay and num =  9223372036854775805;
    num :=  9223372036854775807; decr(num); okay := okay and num =  9223372036854775806;
    arr[1] := -9223372036854775807; decr(arr[1]); okay := okay and arr[1] =            INT64_MIN;
    arr[1] := -9223372036854775806; decr(arr[1]); okay := okay and arr[1] = -9223372036854775807;
    arr[1] :=      -14312161101687; decr(arr[1]); okay := okay and arr[1] =      -14312161101688;
    arr[1] :=          -4294967297; decr(arr[1]); okay := okay and arr[1] =          -4294967298;
    arr[1] :=          -4294967296; decr(arr[1]); okay := okay and arr[1] =          -4294967297;
    arr[1] :=          -4294967295; decr(arr[1]); okay := okay and arr[1] =          -4294967296;
    arr[1] :=          -2147483649; decr(arr[1]); okay := okay and arr[1] =          -2147483650;
    arr[1] :=          -2147483648; decr(arr[1]); okay := okay and arr[1] =          -2147483649;
    arr[1] :=          -2147483647; decr(arr[1]); okay := okay and arr[1] =          -2147483648;
    arr[1] :=           -123456791; decr(arr[1]); okay := okay and arr[1] =           -123456792;
    arr[1] :=              -644443; decr(arr[1]); okay := okay and arr[1] =              -644444;
    arr[1] :=                   -1; decr(arr[1]); okay := okay and arr[1] =                   -2;
    arr[1] :=                    0; decr(arr[1]); okay := okay and arr[1] =                   -1;
    arr[1] :=                    1; decr(arr[1]); okay := okay and arr[1] =                    0;
    arr[1] :=               644443; decr(arr[1]); okay := okay and arr[1] =               644442;
    arr[1] :=            123456791; decr(arr[1]); okay := okay and arr[1] =            123456790;
    arr[1] :=           2147483646; decr(arr[1]); okay := okay and arr[1] =           2147483645;
    arr[1] :=           2147483647; decr(arr[1]); okay := okay and arr[1] =           2147483646;
    arr[1] :=           2147483648; decr(arr[1]); okay := okay and arr[1] =           2147483647;
    arr[1] :=           4294967295; decr(arr[1]); okay := okay and arr[1] =           4294967294;
    arr[1] :=           4294967296; decr(arr[1]); okay := okay and arr[1] =           4294967295;
    arr[1] :=           4294967297; decr(arr[1]); okay := okay and arr[1] =           4294967296;
    arr[1] :=       14312161101687; decr(arr[1]); okay := okay and arr[1] =       14312161101686;
    arr[1] :=  9223372036854775806; decr(arr[1]); okay := okay and arr[1] =  9223372036854775805;
    arr[1] :=  9223372036854775807; decr(arr[1]); okay := okay and arr[1] =  9223372036854775806;

    if okay then
      writeln("Decr works correct for selected values.");
    else
      writeln(" ***** Decr does not work correct.");
    end if;
  end func;


(**
 *  Tests for the compiler optimization to reduce overflow checking
 *  for multiplication.
 *)
const func boolean: check_reduced_overflow_checking_for_mult is func
  result
    var boolean: okay is TRUE;
  begin
    if  intExpr( integer.last) div        integer.first *        integer.first <>                    0 or
        intExpr( integer.last) div        -integer.last *        -integer.last <>         integer.last or
        intExpr( integer.last) div -4611686018427387905 *        -integer.last <>         integer.last or
        intExpr( integer.last) div -3074457345618258602 * -3074457345618258602 <>  9223372036854775806 or
        intExpr( integer.last) div -1317624576693539401 * -1317624576693539401 <>         integer.last or
        intExpr( integer.last) div         -60247241209 *         -60247241209 <>         integer.last or
        intExpr( integer.last) div         -34359738369 *         -34359738496 <>  9223372036854775680 or
        intExpr( integer.last) div          -1234567890 *          -1234567890 <>  9223372035820400130 or
        intExpr( integer.last) div                   -7 *                   -7 <>         integer.last or
        intExpr( integer.last) div                   -3 *                   -3 <>  9223372036854775806 or
        intExpr(integer.first) div                    2 *                   -1 <>  4611686018427387904 or
        intExpr(integer.first) div                    3 *                   -3 <>  9223372036854775806 or
        intExpr(integer.first) div                    7 *                   -7 <>         integer.last or
        intExpr(integer.first) div           1234567890 *          -1234567890 <>  9223372035820400130 or
        intExpr(integer.first) div          34359738368 *         -34359738367 <>  9223372036586340352 or
        intExpr(integer.first) div          34359738369 *         -34359738496 <>  9223372036854775680 or
        intExpr(integer.first) div          60247241209 *         -60247241209 <>         integer.last or
        intExpr(integer.first) div  1317624576693539401 * -1317624576693539401 <>         integer.last or
        intExpr(integer.first) div  4611686018427387904 * -4611686018427387903 <>  9223372036854775806 or
        intExpr(integer.first) div  9223372036854775806 *        -integer.last <>         integer.last or
        intExpr(integer.first) div         integer.last *        -integer.last <>         integer.last then
      writeln(" ***** Reduced overflow check for mult failed: Minimum division result if the divisor is known. (1)");
      okay := FALSE;
    end if;

    if  intExpr( integer.last) div        integer.first *         integer.last <>                    0 or
        intExpr( integer.last) div        -integer.last *         integer.last <>        -integer.last or
        intExpr( integer.last) div -4611686018427387905 *         integer.last <>        -integer.last or
        intExpr( integer.last) div -3074457345618258602 *  3074457345618258602 <> -9223372036854775806 or
        intExpr( integer.last) div -1317624576693539401 *  1317624576693539401 <>        -integer.last or
        intExpr( integer.last) div         -60247241209 *          60247241209 <>        -integer.last or
        intExpr( integer.last) div         -34359738369 *          34359738496 <> -9223372036854775680 or
        intExpr( integer.last) div          -1234567890 *           1234567890 <> -9223372035820400130 or
        intExpr( integer.last) div                   -7 *                    7 <>        -integer.last or
        intExpr( integer.last) div                   -3 *                    3 <> -9223372036854775806 or
        intExpr(integer.first) div                    2 *                    2 <>        integer.first or
        intExpr(integer.first) div                    3 *                    3 <> -9223372036854775806 or
        intExpr(integer.first) div                    7 *                    7 <>        -integer.last or
        intExpr(integer.first) div           1234567890 *           1234567890 <> -9223372035820400130 or
        intExpr(integer.first) div          34359738368 *          34359738368 <>        integer.first or
        intExpr(integer.first) div          34359738369 *          34359738496 <> -9223372036854775680 or
        intExpr(integer.first) div          60247241209 *          60247241209 <>        -integer.last or
        intExpr(integer.first) div  1317624576693539401 *  1317624576693539401 <>        -integer.last or
        intExpr(integer.first) div  4611686018427387904 *  4611686018427387904 <>        integer.first or
        intExpr(integer.first) div  9223372036854775806 *         integer.last <>        -integer.last or
        intExpr(integer.first) div         integer.last *         integer.last <>        -integer.last then
      writeln(" ***** Reduced overflow check for mult failed: Minimum division result if the divisor is known. (2)");
      okay := FALSE;
    end if;

    if  intExpr(integer.first) div        integer.first *        integer.first <>        integer.first or
        intExpr(integer.first) div -4611686018427387904 * -4611686018427387903 <> -9223372036854775806 or
        intExpr(integer.first) div -1317624576693539401 * -1317624576693539401 <>        -integer.last or
        intExpr(integer.first) div         -60247241209 *         -60247241209 <>        -integer.last or
        intExpr(integer.first) div         -34359738369 *         -34359738496 <> -9223372036854775680 or
        intExpr(integer.first) div         -34359738368 *         -34359738367 <> -9223372036586340352 or
        intExpr(integer.first) div          -1234567890 *          -1234567890 <> -9223372035820400130 or
        intExpr(integer.first) div                   -7 *                   -7 <>        -integer.last or
        intExpr(integer.first) div                   -3 *                   -2 <> -6148914691236517204 or
        intExpr(integer.first) div                   -2 *                   -1 <> -4611686018427387904 or
        intExpr( integer.last) div                    3 *                   -3 <> -9223372036854775806 or
        intExpr( integer.last) div                    7 *                   -7 <>        -integer.last or
        intExpr( integer.last) div           1234567890 *          -1234567890 <> -9223372035820400130 or
        intExpr( integer.last) div          34359738367 *         -34359738367 <> -9223372036586340352 or
        intExpr( integer.last) div          60247241209 *         -60247241209 <>        -integer.last or
        intExpr( integer.last) div  1317624576693539401 * -1317624576693539401 <>        -integer.last or
        intExpr( integer.last) div  4611686018427387903 * -4611686018427387903 <> -9223372036854775806 then
      writeln(" ***** Reduced overflow check for mult failed: Maximum division result if the divisor is known. (1)");
      okay := FALSE;
    end if;

    if  intExpr(integer.first) div        integer.first *         integer.last <>         integer.last or
        intExpr(integer.first) div        -integer.last *         integer.last <>         integer.last or
        intExpr(integer.first) div -4611686018427387905 *         integer.last <>         integer.last or
        intExpr(integer.first) div -4611686018427387904 *  4611686018427387903 <>  9223372036854775806 or
        intExpr(integer.first) div -1317624576693539401 *  1317624576693539401 <>         integer.last or
        intExpr(integer.first) div         -60247241209 *          60247241209 <>         integer.last or
        intExpr(integer.first) div         -34359738369 *          34359738496 <>  9223372036854775680 or
        intExpr(integer.first) div         -34359738368 *          34359738367 <>  9223372036586340352 or
        intExpr(integer.first) div          -1234567890 *           1234567890 <>  9223372035820400130 or
        intExpr(integer.first) div                   -7 *                    7 <>         integer.last or
        intExpr(integer.first) div                   -3 *                    2 <>  6148914691236517204 or
        intExpr(integer.first) div                   -2 *                    1 <>  4611686018427387904 or
        intExpr( integer.last) div                    1 *                    1 <>         integer.last or
        intExpr( integer.last) div                    2 *                    2 <>  9223372036854775806 or
        intExpr( integer.last) div                    3 *                    3 <>  9223372036854775806 or
        intExpr( integer.last) div                    7 *                    7 <>         integer.last or
        intExpr( integer.last) div           1234567890 *           1234567890 <>  9223372035820400130 or
        intExpr( integer.last) div          34359738367 *          34359738367 <>  9223372036586340352 or
        intExpr( integer.last) div          60247241209 *          60247241209 <>         integer.last or
        intExpr( integer.last) div  1317624576693539401 *  1317624576693539401 <>         integer.last or
        intExpr( integer.last) div  4611686018427387903 *  4611686018427387903 <>  9223372036854775806 or
        intExpr( integer.last) div  9223372036854775806 *         integer.last <>         integer.last or
        intExpr( integer.last) div         integer.last *         integer.last <>         integer.last then
      writeln(" ***** Reduced overflow check for mult failed: Maximum division result if the divisor is known. (2)");
      okay := FALSE;
    end if;
  end func;


const proc: check_mult is func
  local
    var boolean: okay is TRUE;
  begin
    if  -2147483648 * -2147483648 <>  4611686018427387904 or
        -2147483648 * -2147483647 <>  4611686016279904256 or
        -2147483648 *  2147483647 <> -4611686016279904256 or
        -2147483648 *  2147483648 <> -4611686018427387904 or
        -2147483647 * -2147483648 <>  4611686016279904256 or
        -2147483647 * -2147483647 <>  4611686014132420609 or
        -2147483647 *  2147483647 <> -4611686014132420609 or
        -2147483647 *  2147483648 <> -4611686016279904256 or
         2147483647 * -2147483648 <> -4611686016279904256 or
         2147483647 * -2147483647 <> -4611686014132420609 or
         2147483647 *  2147483647 <>  4611686014132420609 or
         2147483647 *  2147483648 <>  4611686016279904256 or
         2147483648 * -2147483648 <> -4611686018427387904 or
         2147483648 * -2147483647 <> -4611686016279904256 or
         2147483648 *  2147483647 <>  4611686016279904256 or
         2147483648 *  2147483648 <>  4611686018427387904 then
      writeln(" ***** Multiplication with big and small factors does not work correct.");
      okay := FALSE;
    end if;

    if  -9223372036854775807 *                   -1 <>  9223372036854775807 or
        -4611686018427387903 *                   -2 <>  9223372036854775806 or
        -3074457345618258602 *                   -3 <>  9223372036854775806 or
         -838488366986797800 *                  -11 <>  9223372036854775800 or
          -10762394442070916 *                 -857 <>  9223372036854775012 or
           -1988224194191587 *                -4639 <>  9223372036854772093 or
            -240989001041328 *               -38273 <>  9223372036854746544 or
             -14312161101687 *              -644443 <>  9223372036854475341 or
               -933865493037 *             -9876553 <>  9223372036851061461 or
               -747094709113 *            -12345653 <>  9223372036845035789 or
                -74709312968 *           -123456791 <>  9223372036843965688 or
                 -3037000499 *          -3037000499 <>  9223372030926249001 or
                  -123456791 *         -74709312968 <>  9223372036843965688 or
                   -12345653 *        -747094709113 <>  9223372036845035789 or
                    -9876553 *        -933865493037 <>  9223372036851061461 or
                     -644443 *      -14312161101687 <>  9223372036854475341 or
                      -38273 *     -240989001041328 <>  9223372036854746544 or
                       -4639 *    -1988224194191587 <>  9223372036854772093 or
                        -857 *   -10762394442070916 <>  9223372036854775012 or
                         -11 *  -838488366986797800 <>  9223372036854775800 or
                          -3 * -3074457345618258602 <>  9223372036854775806 or
                          -2 * -4611686018427387903 <>  9223372036854775806 or
                          -1 * -9223372036854775807 <>  9223372036854775807 or
                   INT64_MIN *                    1 <>            INT64_MIN or
        -4611686018427387904 *                    2 <>            INT64_MIN or
        -3074457345618258602 *                    3 <> -9223372036854775806 or
         -838488366986797800 *                   11 <> -9223372036854775800 or
          -10762394442070916 *                  857 <> -9223372036854775012 or
           -1988224194191587 *                 4639 <> -9223372036854772093 or
            -240989001041328 *                38273 <> -9223372036854746544 or
             -14312161101687 *               644443 <> -9223372036854475341 or
               -933865493037 *              9876553 <> -9223372036851061461 or
               -747094709113 *             12345653 <> -9223372036845035789 or
                -74709312968 *            123456791 <> -9223372036843965688 or
                 -3037000499 *           3037000499 <> -9223372030926249001 or
                  -123456791 *          74709312968 <> -9223372036843965688 or
                   -12345653 *         747094709113 <> -9223372036845035789 or
                    -9876553 *         933865493037 <> -9223372036851061461 or
                     -644443 *       14312161101687 <> -9223372036854475341 or
                      -38273 *      240989001041328 <> -9223372036854746544 or
                       -4639 *     1988224194191587 <> -9223372036854772093 or
                        -857 *    10762394442070916 <> -9223372036854775012 or
                         -11 *   838488366986797800 <> -9223372036854775800 or
                          -3 *  3074457345618258602 <> -9223372036854775806 or
                          -2 *  4611686018427387904 <>            INT64_MIN or
                          -1 *  9223372036854775807 <> -9223372036854775807 or
         9223372036854775807 *                   -1 <> -9223372036854775807 or
         4611686018427387904 *                   -2 <>            INT64_MIN or
         3074457345618258602 *                   -3 <> -9223372036854775806 or
          838488366986797800 *                  -11 <> -9223372036854775800 or
           10762394442070916 *                 -857 <> -9223372036854775012 or
            1988224194191587 *                -4639 <> -9223372036854772093 or
             240989001041328 *               -38273 <> -9223372036854746544 or
              14312161101687 *              -644443 <> -9223372036854475341 or
                933865493037 *             -9876553 <> -9223372036851061461 or
                747094709113 *            -12345653 <> -9223372036845035789 or
                 74709312968 *           -123456791 <> -9223372036843965688 or
                  3037000499 *          -3037000499 <> -9223372030926249001 or
                   123456791 *         -74709312968 <> -9223372036843965688 or
                    12345653 *        -747094709113 <> -9223372036845035789 or
                     9876553 *        -933865493037 <> -9223372036851061461 or
                      644443 *      -14312161101687 <> -9223372036854475341 or
                       38273 *     -240989001041328 <> -9223372036854746544 or
                        4639 *    -1988224194191587 <> -9223372036854772093 or
                         857 *   -10762394442070916 <> -9223372036854775012 or
                          11 *  -838488366986797800 <> -9223372036854775800 or
                           3 * -3074457345618258602 <> -9223372036854775806 or
                           2 * -4611686018427387904 <>            INT64_MIN or
                           1 *            INT64_MIN <>            INT64_MIN or
         9223372036854775807 *                    1 <>  9223372036854775807 or
         4611686018427387903 *                    2 <>  9223372036854775806 or
         3074457345618258602 *                    3 <>  9223372036854775806 or
          838488366986797800 *                   11 <>  9223372036854775800 or
           10762394442070916 *                  857 <>  9223372036854775012 or
            1988224194191587 *                 4639 <>  9223372036854772093 or
             240989001041328 *                38273 <>  9223372036854746544 or
              14312161101687 *               644443 <>  9223372036854475341 or
                933865493037 *              9876553 <>  9223372036851061461 or
                747094709113 *             12345653 <>  9223372036845035789 or
                 74709312968 *            123456791 <>  9223372036843965688 or
                  3037000499 *           3037000499 <>  9223372030926249001 or
                   123456791 *          74709312968 <>  9223372036843965688 or
                    12345653 *         747094709113 <>  9223372036845035789 or
                     9876553 *         933865493037 <>  9223372036851061461 or
                      644443 *       14312161101687 <>  9223372036854475341 or
                       38273 *      240989001041328 <>  9223372036854746544 or
                        4639 *     1988224194191587 <>  9223372036854772093 or
                         857 *    10762394442070916 <>  9223372036854775012 or
                          11 *   838488366986797800 <>  9223372036854775800 or
                           3 *  3074457345618258602 <>  9223372036854775806 or
                           2 *  4611686018427387903 <>  9223372036854775806 or
                           1 *  9223372036854775807 <>  9223372036854775807 then
      writeln(" ***** Multiplication with big products does not work correct. (1)");
      okay := FALSE;
    end if;

    if  intExpr(-9223372036854775807) *                   -1 <>  9223372036854775807 or
        intExpr(-4611686018427387903) *                   -2 <>  9223372036854775806 or
        intExpr(-3074457345618258602) *                   -3 <>  9223372036854775806 or
        intExpr( -838488366986797800) *                  -11 <>  9223372036854775800 or
        intExpr(  -10762394442070916) *                 -857 <>  9223372036854775012 or
        intExpr(   -1988224194191587) *                -4639 <>  9223372036854772093 or
        intExpr(    -240989001041328) *               -38273 <>  9223372036854746544 or
        intExpr(     -14312161101687) *              -644443 <>  9223372036854475341 or
        intExpr(       -933865493037) *             -9876553 <>  9223372036851061461 or
        intExpr(       -747094709113) *            -12345653 <>  9223372036845035789 or
        intExpr(        -74709312968) *           -123456791 <>  9223372036843965688 or
        intExpr(         -3037000499) *          -3037000499 <>  9223372030926249001 or
        intExpr(          -123456791) *         -74709312968 <>  9223372036843965688 or
        intExpr(           -12345653) *        -747094709113 <>  9223372036845035789 or
        intExpr(            -9876553) *        -933865493037 <>  9223372036851061461 or
        intExpr(             -644443) *      -14312161101687 <>  9223372036854475341 or
        intExpr(              -38273) *     -240989001041328 <>  9223372036854746544 or
        intExpr(               -4639) *    -1988224194191587 <>  9223372036854772093 or
        intExpr(                -857) *   -10762394442070916 <>  9223372036854775012 or
        intExpr(                 -11) *  -838488366986797800 <>  9223372036854775800 or
        intExpr(                  -3) * -3074457345618258602 <>  9223372036854775806 or
        intExpr(                  -2) * -4611686018427387903 <>  9223372036854775806 or
        intExpr(                  -1) * -9223372036854775807 <>  9223372036854775807 or
        intExpr(           INT64_MIN) *                    1 <>            INT64_MIN or
        intExpr(-4611686018427387904) *                    2 <>            INT64_MIN or
        intExpr(-3074457345618258602) *                    3 <> -9223372036854775806 or
        intExpr( -838488366986797800) *                   11 <> -9223372036854775800 or
        intExpr(  -10762394442070916) *                  857 <> -9223372036854775012 or
        intExpr(   -1988224194191587) *                 4639 <> -9223372036854772093 or
        intExpr(    -240989001041328) *                38273 <> -9223372036854746544 or
        intExpr(     -14312161101687) *               644443 <> -9223372036854475341 or
        intExpr(       -933865493037) *              9876553 <> -9223372036851061461 or
        intExpr(       -747094709113) *             12345653 <> -9223372036845035789 or
        intExpr(        -74709312968) *            123456791 <> -9223372036843965688 or
        intExpr(         -3037000499) *           3037000499 <> -9223372030926249001 or
        intExpr(          -123456791) *          74709312968 <> -9223372036843965688 or
        intExpr(           -12345653) *         747094709113 <> -9223372036845035789 or
        intExpr(            -9876553) *         933865493037 <> -9223372036851061461 or
        intExpr(             -644443) *       14312161101687 <> -9223372036854475341 or
        intExpr(              -38273) *      240989001041328 <> -9223372036854746544 or
        intExpr(               -4639) *     1988224194191587 <> -9223372036854772093 or
        intExpr(                -857) *    10762394442070916 <> -9223372036854775012 or
        intExpr(                 -11) *   838488366986797800 <> -9223372036854775800 or
        intExpr(                  -3) *  3074457345618258602 <> -9223372036854775806 or
        intExpr(                  -2) *  4611686018427387904 <>            INT64_MIN or
        intExpr(                  -1) *  9223372036854775807 <> -9223372036854775807 or
        intExpr( 9223372036854775807) *                   -1 <> -9223372036854775807 or
        intExpr( 4611686018427387904) *                   -2 <>            INT64_MIN or
        intExpr( 3074457345618258602) *                   -3 <> -9223372036854775806 or
        intExpr(  838488366986797800) *                  -11 <> -9223372036854775800 or
        intExpr(   10762394442070916) *                 -857 <> -9223372036854775012 or
        intExpr(    1988224194191587) *                -4639 <> -9223372036854772093 or
        intExpr(     240989001041328) *               -38273 <> -9223372036854746544 or
        intExpr(      14312161101687) *              -644443 <> -9223372036854475341 or
        intExpr(        933865493037) *             -9876553 <> -9223372036851061461 or
        intExpr(        747094709113) *            -12345653 <> -9223372036845035789 or
        intExpr(         74709312968) *           -123456791 <> -9223372036843965688 or
        intExpr(          3037000499) *          -3037000499 <> -9223372030926249001 or
        intExpr(           123456791) *         -74709312968 <> -9223372036843965688 or
        intExpr(            12345653) *        -747094709113 <> -9223372036845035789 or
        intExpr(             9876553) *        -933865493037 <> -9223372036851061461 or
        intExpr(              644443) *      -14312161101687 <> -9223372036854475341 or
        intExpr(               38273) *     -240989001041328 <> -9223372036854746544 or
        intExpr(                4639) *    -1988224194191587 <> -9223372036854772093 or
        intExpr(                 857) *   -10762394442070916 <> -9223372036854775012 or
        intExpr(                  11) *  -838488366986797800 <> -9223372036854775800 or
        intExpr(                   3) * -3074457345618258602 <> -9223372036854775806 or
        intExpr(                   2) * -4611686018427387904 <>            INT64_MIN or
        intExpr(                   1) *            INT64_MIN <>            INT64_MIN or
        intExpr( 9223372036854775807) *                    1 <>  9223372036854775807 or
        intExpr( 4611686018427387903) *                    2 <>  9223372036854775806 or
        intExpr( 3074457345618258602) *                    3 <>  9223372036854775806 or
        intExpr(  838488366986797800) *                   11 <>  9223372036854775800 or
        intExpr(   10762394442070916) *                  857 <>  9223372036854775012 or
        intExpr(    1988224194191587) *                 4639 <>  9223372036854772093 or
        intExpr(     240989001041328) *                38273 <>  9223372036854746544 or
        intExpr(      14312161101687) *               644443 <>  9223372036854475341 or
        intExpr(        933865493037) *              9876553 <>  9223372036851061461 or
        intExpr(        747094709113) *             12345653 <>  9223372036845035789 or
        intExpr(         74709312968) *            123456791 <>  9223372036843965688 or
        intExpr(          3037000499) *           3037000499 <>  9223372030926249001 or
        intExpr(           123456791) *          74709312968 <>  9223372036843965688 or
        intExpr(            12345653) *         747094709113 <>  9223372036845035789 or
        intExpr(             9876553) *         933865493037 <>  9223372036851061461 or
        intExpr(              644443) *       14312161101687 <>  9223372036854475341 or
        intExpr(               38273) *      240989001041328 <>  9223372036854746544 or
        intExpr(                4639) *     1988224194191587 <>  9223372036854772093 or
        intExpr(                 857) *    10762394442070916 <>  9223372036854775012 or
        intExpr(                  11) *   838488366986797800 <>  9223372036854775800 or
        intExpr(                   3) *  3074457345618258602 <>  9223372036854775806 or
        intExpr(                   2) *  4611686018427387903 <>  9223372036854775806 or
        intExpr(                   1) *  9223372036854775807 <>  9223372036854775807 then
      writeln(" ***** Multiplication with big products does not work correct. (2)");
      okay := FALSE;
    end if;

    if  -9223372036854775807 * intExpr(                  -1) <>  9223372036854775807 or
        -4611686018427387903 * intExpr(                  -2) <>  9223372036854775806 or
        -3074457345618258602 * intExpr(                  -3) <>  9223372036854775806 or
         -838488366986797800 * intExpr(                 -11) <>  9223372036854775800 or
          -10762394442070916 * intExpr(                -857) <>  9223372036854775012 or
           -1988224194191587 * intExpr(               -4639) <>  9223372036854772093 or
            -240989001041328 * intExpr(              -38273) <>  9223372036854746544 or
             -14312161101687 * intExpr(             -644443) <>  9223372036854475341 or
               -933865493037 * intExpr(            -9876553) <>  9223372036851061461 or
               -747094709113 * intExpr(           -12345653) <>  9223372036845035789 or
                -74709312968 * intExpr(          -123456791) <>  9223372036843965688 or
                 -3037000499 * intExpr(         -3037000499) <>  9223372030926249001 or
                  -123456791 * intExpr(        -74709312968) <>  9223372036843965688 or
                   -12345653 * intExpr(       -747094709113) <>  9223372036845035789 or
                    -9876553 * intExpr(       -933865493037) <>  9223372036851061461 or
                     -644443 * intExpr(     -14312161101687) <>  9223372036854475341 or
                      -38273 * intExpr(    -240989001041328) <>  9223372036854746544 or
                       -4639 * intExpr(   -1988224194191587) <>  9223372036854772093 or
                        -857 * intExpr(  -10762394442070916) <>  9223372036854775012 or
                         -11 * intExpr( -838488366986797800) <>  9223372036854775800 or
                          -3 * intExpr(-3074457345618258602) <>  9223372036854775806 or
                          -2 * intExpr(-4611686018427387903) <>  9223372036854775806 or
                          -1 * intExpr(-9223372036854775807) <>  9223372036854775807 or
                   INT64_MIN * intExpr(                   1) <>            INT64_MIN or
        -4611686018427387904 * intExpr(                   2) <>            INT64_MIN or
        -3074457345618258602 * intExpr(                   3) <> -9223372036854775806 or
         -838488366986797800 * intExpr(                  11) <> -9223372036854775800 or
          -10762394442070916 * intExpr(                 857) <> -9223372036854775012 or
           -1988224194191587 * intExpr(                4639) <> -9223372036854772093 or
            -240989001041328 * intExpr(               38273) <> -9223372036854746544 or
             -14312161101687 * intExpr(              644443) <> -9223372036854475341 or
               -933865493037 * intExpr(             9876553) <> -9223372036851061461 or
               -747094709113 * intExpr(            12345653) <> -9223372036845035789 or
                -74709312968 * intExpr(           123456791) <> -9223372036843965688 or
                 -3037000499 * intExpr(          3037000499) <> -9223372030926249001 or
                  -123456791 * intExpr(         74709312968) <> -9223372036843965688 or
                   -12345653 * intExpr(        747094709113) <> -9223372036845035789 or
                    -9876553 * intExpr(        933865493037) <> -9223372036851061461 or
                     -644443 * intExpr(      14312161101687) <> -9223372036854475341 or
                      -38273 * intExpr(     240989001041328) <> -9223372036854746544 or
                       -4639 * intExpr(    1988224194191587) <> -9223372036854772093 or
                        -857 * intExpr(   10762394442070916) <> -9223372036854775012 or
                         -11 * intExpr(  838488366986797800) <> -9223372036854775800 or
                          -3 * intExpr( 3074457345618258602) <> -9223372036854775806 or
                          -2 * intExpr( 4611686018427387904) <>            INT64_MIN or
                          -1 * intExpr( 9223372036854775807) <> -9223372036854775807 or
         9223372036854775807 * intExpr(                  -1) <> -9223372036854775807 or
         4611686018427387904 * intExpr(                  -2) <>            INT64_MIN or
         3074457345618258602 * intExpr(                  -3) <> -9223372036854775806 or
          838488366986797800 * intExpr(                 -11) <> -9223372036854775800 or
           10762394442070916 * intExpr(                -857) <> -9223372036854775012 or
            1988224194191587 * intExpr(               -4639) <> -9223372036854772093 or
             240989001041328 * intExpr(              -38273) <> -9223372036854746544 or
              14312161101687 * intExpr(             -644443) <> -9223372036854475341 or
                933865493037 * intExpr(            -9876553) <> -9223372036851061461 or
                747094709113 * intExpr(           -12345653) <> -9223372036845035789 or
                 74709312968 * intExpr(          -123456791) <> -9223372036843965688 or
                  3037000499 * intExpr(         -3037000499) <> -9223372030926249001 or
                   123456791 * intExpr(        -74709312968) <> -9223372036843965688 or
                    12345653 * intExpr(       -747094709113) <> -9223372036845035789 or
                     9876553 * intExpr(       -933865493037) <> -9223372036851061461 or
                      644443 * intExpr(     -14312161101687) <> -9223372036854475341 or
                       38273 * intExpr(    -240989001041328) <> -9223372036854746544 or
                        4639 * intExpr(   -1988224194191587) <> -9223372036854772093 or
                         857 * intExpr(  -10762394442070916) <> -9223372036854775012 or
                          11 * intExpr( -838488366986797800) <> -9223372036854775800 or
                           3 * intExpr(-3074457345618258602) <> -9223372036854775806 or
                           2 * intExpr(-4611686018427387904) <>            INT64_MIN or
                           1 * intExpr(           INT64_MIN) <>            INT64_MIN or
         9223372036854775807 * intExpr(                   1) <>  9223372036854775807 or
         4611686018427387903 * intExpr(                   2) <>  9223372036854775806 or
         3074457345618258602 * intExpr(                   3) <>  9223372036854775806 or
          838488366986797800 * intExpr(                  11) <>  9223372036854775800 or
           10762394442070916 * intExpr(                 857) <>  9223372036854775012 or
            1988224194191587 * intExpr(                4639) <>  9223372036854772093 or
             240989001041328 * intExpr(               38273) <>  9223372036854746544 or
              14312161101687 * intExpr(              644443) <>  9223372036854475341 or
                933865493037 * intExpr(             9876553) <>  9223372036851061461 or
                747094709113 * intExpr(            12345653) <>  9223372036845035789 or
                 74709312968 * intExpr(           123456791) <>  9223372036843965688 or
                  3037000499 * intExpr(          3037000499) <>  9223372030926249001 or
                   123456791 * intExpr(         74709312968) <>  9223372036843965688 or
                    12345653 * intExpr(        747094709113) <>  9223372036845035789 or
                     9876553 * intExpr(        933865493037) <>  9223372036851061461 or
                      644443 * intExpr(      14312161101687) <>  9223372036854475341 or
                       38273 * intExpr(     240989001041328) <>  9223372036854746544 or
                        4639 * intExpr(    1988224194191587) <>  9223372036854772093 or
                         857 * intExpr(   10762394442070916) <>  9223372036854775012 or
                          11 * intExpr(  838488366986797800) <>  9223372036854775800 or
                           3 * intExpr( 3074457345618258602) <>  9223372036854775806 or
                           2 * intExpr( 4611686018427387903) <>  9223372036854775806 or
                           1 * intExpr( 9223372036854775807) <>  9223372036854775807 then
      writeln(" ***** Multiplication with big products does not work correct. (3)");
      okay := FALSE;
    end if;

    if  intExpr(-9223372036854775807) * intExpr(                  -1) <>  9223372036854775807 or
        intExpr(-4611686018427387903) * intExpr(                  -2) <>  9223372036854775806 or
        intExpr(-3074457345618258602) * intExpr(                  -3) <>  9223372036854775806 or
        intExpr( -838488366986797800) * intExpr(                 -11) <>  9223372036854775800 or
        intExpr(  -10762394442070916) * intExpr(                -857) <>  9223372036854775012 or
        intExpr(   -1988224194191587) * intExpr(               -4639) <>  9223372036854772093 or
        intExpr(    -240989001041328) * intExpr(              -38273) <>  9223372036854746544 or
        intExpr(     -14312161101687) * intExpr(             -644443) <>  9223372036854475341 or
        intExpr(       -933865493037) * intExpr(            -9876553) <>  9223372036851061461 or
        intExpr(       -747094709113) * intExpr(           -12345653) <>  9223372036845035789 or
        intExpr(        -74709312968) * intExpr(          -123456791) <>  9223372036843965688 or
        intExpr(         -3037000499) * intExpr(         -3037000499) <>  9223372030926249001 or
        intExpr(          -123456791) * intExpr(        -74709312968) <>  9223372036843965688 or
        intExpr(           -12345653) * intExpr(       -747094709113) <>  9223372036845035789 or
        intExpr(            -9876553) * intExpr(       -933865493037) <>  9223372036851061461 or
        intExpr(             -644443) * intExpr(     -14312161101687) <>  9223372036854475341 or
        intExpr(              -38273) * intExpr(    -240989001041328) <>  9223372036854746544 or
        intExpr(               -4639) * intExpr(   -1988224194191587) <>  9223372036854772093 or
        intExpr(                -857) * intExpr(  -10762394442070916) <>  9223372036854775012 or
        intExpr(                 -11) * intExpr( -838488366986797800) <>  9223372036854775800 or
        intExpr(                  -3) * intExpr(-3074457345618258602) <>  9223372036854775806 or
        intExpr(                  -2) * intExpr(-4611686018427387903) <>  9223372036854775806 or
        intExpr(                  -1) * intExpr(-9223372036854775807) <>  9223372036854775807 or
        intExpr(           INT64_MIN) * intExpr(                   1) <>            INT64_MIN or
        intExpr(-4611686018427387904) * intExpr(                   2) <>            INT64_MIN or
        intExpr(-3074457345618258602) * intExpr(                   3) <> -9223372036854775806 or
        intExpr( -838488366986797800) * intExpr(                  11) <> -9223372036854775800 or
        intExpr(  -10762394442070916) * intExpr(                 857) <> -9223372036854775012 or
        intExpr(   -1988224194191587) * intExpr(                4639) <> -9223372036854772093 or
        intExpr(    -240989001041328) * intExpr(               38273) <> -9223372036854746544 or
        intExpr(     -14312161101687) * intExpr(              644443) <> -9223372036854475341 or
        intExpr(       -933865493037) * intExpr(             9876553) <> -9223372036851061461 or
        intExpr(       -747094709113) * intExpr(            12345653) <> -9223372036845035789 or
        intExpr(        -74709312968) * intExpr(           123456791) <> -9223372036843965688 or
        intExpr(         -3037000499) * intExpr(          3037000499) <> -9223372030926249001 or
        intExpr(          -123456791) * intExpr(         74709312968) <> -9223372036843965688 or
        intExpr(           -12345653) * intExpr(        747094709113) <> -9223372036845035789 or
        intExpr(            -9876553) * intExpr(        933865493037) <> -9223372036851061461 or
        intExpr(             -644443) * intExpr(      14312161101687) <> -9223372036854475341 or
        intExpr(              -38273) * intExpr(     240989001041328) <> -9223372036854746544 or
        intExpr(               -4639) * intExpr(    1988224194191587) <> -9223372036854772093 or
        intExpr(                -857) * intExpr(   10762394442070916) <> -9223372036854775012 or
        intExpr(                 -11) * intExpr(  838488366986797800) <> -9223372036854775800 or
        intExpr(                  -3) * intExpr( 3074457345618258602) <> -9223372036854775806 or
        intExpr(                  -2) * intExpr( 4611686018427387904) <>            INT64_MIN or
        intExpr(                  -1) * intExpr( 9223372036854775807) <> -9223372036854775807 or
        intExpr( 9223372036854775807) * intExpr(                  -1) <> -9223372036854775807 or
        intExpr( 4611686018427387904) * intExpr(                  -2) <>            INT64_MIN or
        intExpr( 3074457345618258602) * intExpr(                  -3) <> -9223372036854775806 or
        intExpr(  838488366986797800) * intExpr(                 -11) <> -9223372036854775800 or
        intExpr(   10762394442070916) * intExpr(                -857) <> -9223372036854775012 or
        intExpr(    1988224194191587) * intExpr(               -4639) <> -9223372036854772093 or
        intExpr(     240989001041328) * intExpr(              -38273) <> -9223372036854746544 or
        intExpr(      14312161101687) * intExpr(             -644443) <> -9223372036854475341 or
        intExpr(        933865493037) * intExpr(            -9876553) <> -9223372036851061461 or
        intExpr(        747094709113) * intExpr(           -12345653) <> -9223372036845035789 or
        intExpr(         74709312968) * intExpr(          -123456791) <> -9223372036843965688 or
        intExpr(          3037000499) * intExpr(         -3037000499) <> -9223372030926249001 or
        intExpr(           123456791) * intExpr(        -74709312968) <> -9223372036843965688 or
        intExpr(            12345653) * intExpr(       -747094709113) <> -9223372036845035789 or
        intExpr(             9876553) * intExpr(       -933865493037) <> -9223372036851061461 or
        intExpr(              644443) * intExpr(     -14312161101687) <> -9223372036854475341 or
        intExpr(               38273) * intExpr(    -240989001041328) <> -9223372036854746544 or
        intExpr(                4639) * intExpr(   -1988224194191587) <> -9223372036854772093 or
        intExpr(                 857) * intExpr(  -10762394442070916) <> -9223372036854775012 or
        intExpr(                  11) * intExpr( -838488366986797800) <> -9223372036854775800 or
        intExpr(                   3) * intExpr(-3074457345618258602) <> -9223372036854775806 or
        intExpr(                   2) * intExpr(-4611686018427387904) <>            INT64_MIN or
        intExpr(                   1) * intExpr(           INT64_MIN) <>            INT64_MIN or
        intExpr( 9223372036854775807) * intExpr(                   1) <>  9223372036854775807 or
        intExpr( 4611686018427387903) * intExpr(                   2) <>  9223372036854775806 or
        intExpr( 3074457345618258602) * intExpr(                   3) <>  9223372036854775806 or
        intExpr(  838488366986797800) * intExpr(                  11) <>  9223372036854775800 or
        intExpr(   10762394442070916) * intExpr(                 857) <>  9223372036854775012 or
        intExpr(    1988224194191587) * intExpr(                4639) <>  9223372036854772093 or
        intExpr(     240989001041328) * intExpr(               38273) <>  9223372036854746544 or
        intExpr(      14312161101687) * intExpr(              644443) <>  9223372036854475341 or
        intExpr(        933865493037) * intExpr(             9876553) <>  9223372036851061461 or
        intExpr(        747094709113) * intExpr(            12345653) <>  9223372036845035789 or
        intExpr(         74709312968) * intExpr(           123456791) <>  9223372036843965688 or
        intExpr(          3037000499) * intExpr(          3037000499) <>  9223372030926249001 or
        intExpr(           123456791) * intExpr(         74709312968) <>  9223372036843965688 or
        intExpr(            12345653) * intExpr(        747094709113) <>  9223372036845035789 or
        intExpr(             9876553) * intExpr(        933865493037) <>  9223372036851061461 or
        intExpr(              644443) * intExpr(      14312161101687) <>  9223372036854475341 or
        intExpr(               38273) * intExpr(     240989001041328) <>  9223372036854746544 or
        intExpr(                4639) * intExpr(    1988224194191587) <>  9223372036854772093 or
        intExpr(                 857) * intExpr(   10762394442070916) <>  9223372036854775012 or
        intExpr(                  11) * intExpr(  838488366986797800) <>  9223372036854775800 or
        intExpr(                   3) * intExpr( 3074457345618258602) <>  9223372036854775806 or
        intExpr(                   2) * intExpr( 4611686018427387903) <>  9223372036854775806 or
        intExpr(                   1) * intExpr( 9223372036854775807) <>  9223372036854775807 then
      writeln(" ***** Multiplication with big products does not work correct. (4)");
      okay := FALSE;
    end if;

    if not check_reduced_overflow_checking_for_mult then
      okay := FALSE;
    end if;

    if okay then
      writeln("Multiplication works correct for selected values.");
    else
      writeln(" ***** Multiplication does not work correct.");
    end if;
  end func;


const proc: check_mult_assign is func
  local
    var boolean: okay is TRUE;
    var boolean: ok is TRUE;
    var integer: num is 0;
    var array integer: arr is [] (0);
  begin
    num := -2147483648; num *:= -2147483648; ok := ok and num =  4611686018427387904;
    num := -2147483648; num *:= -2147483647; ok := ok and num =  4611686016279904256;
    num := -2147483648; num *:=  2147483647; ok := ok and num = -4611686016279904256;
    num := -2147483648; num *:=  2147483648; ok := ok and num = -4611686018427387904;
    num := -2147483647; num *:= -2147483648; ok := ok and num =  4611686016279904256;
    num := -2147483647; num *:= -2147483647; ok := ok and num =  4611686014132420609;
    num := -2147483647; num *:=  2147483647; ok := ok and num = -4611686014132420609;
    num := -2147483647; num *:=  2147483648; ok := ok and num = -4611686016279904256;
    num :=  2147483647; num *:= -2147483648; ok := ok and num = -4611686016279904256;
    num :=  2147483647; num *:= -2147483647; ok := ok and num = -4611686014132420609;
    num :=  2147483647; num *:=  2147483647; ok := ok and num =  4611686014132420609;
    num :=  2147483647; num *:=  2147483648; ok := ok and num =  4611686016279904256;
    num :=  2147483648; num *:= -2147483648; ok := ok and num = -4611686018427387904;
    num :=  2147483648; num *:= -2147483647; ok := ok and num = -4611686016279904256;
    num :=  2147483648; num *:=  2147483647; ok := ok and num =  4611686016279904256;
    num :=  2147483648; num *:=  2147483648; ok := ok and num =  4611686018427387904;
    if not ok then
      writeln(" ***** Multiplication assignment with big and small factors does not work correct.");
      okay := FALSE;
    end if;

    ok := TRUE;
    num := -9223372036854775807; num *:=                   -1; ok := ok and num =  9223372036854775807;
    num := -4611686018427387903; num *:=                   -2; ok := ok and num =  9223372036854775806;
    num := -3074457345618258602; num *:=                   -3; ok := ok and num =  9223372036854775806;
    num :=  -838488366986797800; num *:=                  -11; ok := ok and num =  9223372036854775800;
    num :=   -10762394442070916; num *:=                 -857; ok := ok and num =  9223372036854775012;
    num :=    -1988224194191587; num *:=                -4639; ok := ok and num =  9223372036854772093;
    num :=     -240989001041328; num *:=               -38273; ok := ok and num =  9223372036854746544;
    num :=      -14312161101687; num *:=              -644443; ok := ok and num =  9223372036854475341;
    num :=        -933865493037; num *:=             -9876553; ok := ok and num =  9223372036851061461;
    num :=        -747094709113; num *:=            -12345653; ok := ok and num =  9223372036845035789;
    num :=         -74709312968; num *:=           -123456791; ok := ok and num =  9223372036843965688;
    num :=          -3037000499; num *:=          -3037000499; ok := ok and num =  9223372030926249001;
    num :=           -123456791; num *:=         -74709312968; ok := ok and num =  9223372036843965688;
    num :=            -12345653; num *:=        -747094709113; ok := ok and num =  9223372036845035789;
    num :=             -9876553; num *:=        -933865493037; ok := ok and num =  9223372036851061461;
    num :=              -644443; num *:=      -14312161101687; ok := ok and num =  9223372036854475341;
    num :=               -38273; num *:=     -240989001041328; ok := ok and num =  9223372036854746544;
    num :=                -4639; num *:=    -1988224194191587; ok := ok and num =  9223372036854772093;
    num :=                 -857; num *:=   -10762394442070916; ok := ok and num =  9223372036854775012;
    num :=                  -11; num *:=  -838488366986797800; ok := ok and num =  9223372036854775800;
    num :=                   -3; num *:= -3074457345618258602; ok := ok and num =  9223372036854775806;
    num :=                   -2; num *:= -4611686018427387903; ok := ok and num =  9223372036854775806;
    num :=                   -1; num *:= -9223372036854775807; ok := ok and num =  9223372036854775807;
    num :=            INT64_MIN; num *:=                    1; ok := ok and num =            INT64_MIN;
    num := -4611686018427387904; num *:=                    2; ok := ok and num =            INT64_MIN;
    num := -3074457345618258602; num *:=                    3; ok := ok and num = -9223372036854775806;
    num :=  -838488366986797800; num *:=                   11; ok := ok and num = -9223372036854775800;
    num :=   -10762394442070916; num *:=                  857; ok := ok and num = -9223372036854775012;
    num :=    -1988224194191587; num *:=                 4639; ok := ok and num = -9223372036854772093;
    num :=     -240989001041328; num *:=                38273; ok := ok and num = -9223372036854746544;
    num :=      -14312161101687; num *:=               644443; ok := ok and num = -9223372036854475341;
    num :=        -933865493037; num *:=              9876553; ok := ok and num = -9223372036851061461;
    num :=        -747094709113; num *:=             12345653; ok := ok and num = -9223372036845035789;
    num :=         -74709312968; num *:=            123456791; ok := ok and num = -9223372036843965688;
    num :=          -3037000499; num *:=           3037000499; ok := ok and num = -9223372030926249001;
    num :=           -123456791; num *:=          74709312968; ok := ok and num = -9223372036843965688;
    num :=            -12345653; num *:=         747094709113; ok := ok and num = -9223372036845035789;
    num :=             -9876553; num *:=         933865493037; ok := ok and num = -9223372036851061461;
    num :=              -644443; num *:=       14312161101687; ok := ok and num = -9223372036854475341;
    num :=               -38273; num *:=      240989001041328; ok := ok and num = -9223372036854746544;
    num :=                -4639; num *:=     1988224194191587; ok := ok and num = -9223372036854772093;
    num :=                 -857; num *:=    10762394442070916; ok := ok and num = -9223372036854775012;
    num :=                  -11; num *:=   838488366986797800; ok := ok and num = -9223372036854775800;
    num :=                   -3; num *:=  3074457345618258602; ok := ok and num = -9223372036854775806;
    num :=                   -2; num *:=  4611686018427387904; ok := ok and num =            INT64_MIN;
    num :=                   -1; num *:=  9223372036854775807; ok := ok and num = -9223372036854775807;
    num :=  9223372036854775807; num *:=                   -1; ok := ok and num = -9223372036854775807;
    num :=  4611686018427387904; num *:=                   -2; ok := ok and num =            INT64_MIN;
    num :=  3074457345618258602; num *:=                   -3; ok := ok and num = -9223372036854775806;
    num :=   838488366986797800; num *:=                  -11; ok := ok and num = -9223372036854775800;
    num :=    10762394442070916; num *:=                 -857; ok := ok and num = -9223372036854775012;
    num :=     1988224194191587; num *:=                -4639; ok := ok and num = -9223372036854772093;
    num :=      240989001041328; num *:=               -38273; ok := ok and num = -9223372036854746544;
    num :=       14312161101687; num *:=              -644443; ok := ok and num = -9223372036854475341;
    num :=         933865493037; num *:=             -9876553; ok := ok and num = -9223372036851061461;
    num :=         747094709113; num *:=            -12345653; ok := ok and num = -9223372036845035789;
    num :=          74709312968; num *:=           -123456791; ok := ok and num = -9223372036843965688;
    num :=           3037000499; num *:=          -3037000499; ok := ok and num = -9223372030926249001;
    num :=            123456791; num *:=         -74709312968; ok := ok and num = -9223372036843965688;
    num :=             12345653; num *:=        -747094709113; ok := ok and num = -9223372036845035789;
    num :=              9876553; num *:=        -933865493037; ok := ok and num = -9223372036851061461;
    num :=               644443; num *:=      -14312161101687; ok := ok and num = -9223372036854475341;
    num :=                38273; num *:=     -240989001041328; ok := ok and num = -9223372036854746544;
    num :=                 4639; num *:=    -1988224194191587; ok := ok and num = -9223372036854772093;
    num :=                  857; num *:=   -10762394442070916; ok := ok and num = -9223372036854775012;
    num :=                   11; num *:=  -838488366986797800; ok := ok and num = -9223372036854775800;
    num :=                    3; num *:= -3074457345618258602; ok := ok and num = -9223372036854775806;
    num :=                    2; num *:= -4611686018427387904; ok := ok and num =            INT64_MIN;
    num :=                    1; num *:=            INT64_MIN; ok := ok and num =            INT64_MIN;
    num :=  9223372036854775807; num *:=                    1; ok := ok and num =  9223372036854775807;
    num :=  4611686018427387903; num *:=                    2; ok := ok and num =  9223372036854775806;
    num :=  3074457345618258602; num *:=                    3; ok := ok and num =  9223372036854775806;
    num :=   838488366986797800; num *:=                   11; ok := ok and num =  9223372036854775800;
    num :=    10762394442070916; num *:=                  857; ok := ok and num =  9223372036854775012;
    num :=     1988224194191587; num *:=                 4639; ok := ok and num =  9223372036854772093;
    num :=      240989001041328; num *:=                38273; ok := ok and num =  9223372036854746544;
    num :=       14312161101687; num *:=               644443; ok := ok and num =  9223372036854475341;
    num :=         933865493037; num *:=              9876553; ok := ok and num =  9223372036851061461;
    num :=         747094709113; num *:=             12345653; ok := ok and num =  9223372036845035789;
    num :=          74709312968; num *:=            123456791; ok := ok and num =  9223372036843965688;
    num :=           3037000499; num *:=           3037000499; ok := ok and num =  9223372030926249001;
    num :=            123456791; num *:=          74709312968; ok := ok and num =  9223372036843965688;
    num :=             12345653; num *:=         747094709113; ok := ok and num =  9223372036845035789;
    num :=              9876553; num *:=         933865493037; ok := ok and num =  9223372036851061461;
    num :=               644443; num *:=       14312161101687; ok := ok and num =  9223372036854475341;
    num :=                38273; num *:=      240989001041328; ok := ok and num =  9223372036854746544;
    num :=                 4639; num *:=     1988224194191587; ok := ok and num =  9223372036854772093;
    num :=                  857; num *:=    10762394442070916; ok := ok and num =  9223372036854775012;
    num :=                   11; num *:=   838488366986797800; ok := ok and num =  9223372036854775800;
    num :=                    3; num *:=  3074457345618258602; ok := ok and num =  9223372036854775806;
    num :=                    2; num *:=  4611686018427387903; ok := ok and num =  9223372036854775806;
    num :=                    1; num *:=  9223372036854775807; ok := ok and num =  9223372036854775807;
    if not ok then
      writeln(" ***** Multiplication assignment with big products does not work correct. (1)");
      okay := FALSE;
    end if;

    ok := TRUE;
    num := -9223372036854775807; num *:= intExpr(                  -1); ok := ok and num =  9223372036854775807;
    num := -4611686018427387903; num *:= intExpr(                  -2); ok := ok and num =  9223372036854775806;
    num := -3074457345618258602; num *:= intExpr(                  -3); ok := ok and num =  9223372036854775806;
    num :=  -838488366986797800; num *:= intExpr(                 -11); ok := ok and num =  9223372036854775800;
    num :=   -10762394442070916; num *:= intExpr(                -857); ok := ok and num =  9223372036854775012;
    num :=    -1988224194191587; num *:= intExpr(               -4639); ok := ok and num =  9223372036854772093;
    num :=     -240989001041328; num *:= intExpr(              -38273); ok := ok and num =  9223372036854746544;
    num :=      -14312161101687; num *:= intExpr(             -644443); ok := ok and num =  9223372036854475341;
    num :=        -933865493037; num *:= intExpr(            -9876553); ok := ok and num =  9223372036851061461;
    num :=        -747094709113; num *:= intExpr(           -12345653); ok := ok and num =  9223372036845035789;
    num :=         -74709312968; num *:= intExpr(          -123456791); ok := ok and num =  9223372036843965688;
    num :=          -3037000499; num *:= intExpr(         -3037000499); ok := ok and num =  9223372030926249001;
    num :=           -123456791; num *:= intExpr(        -74709312968); ok := ok and num =  9223372036843965688;
    num :=            -12345653; num *:= intExpr(       -747094709113); ok := ok and num =  9223372036845035789;
    num :=             -9876553; num *:= intExpr(       -933865493037); ok := ok and num =  9223372036851061461;
    num :=              -644443; num *:= intExpr(     -14312161101687); ok := ok and num =  9223372036854475341;
    num :=               -38273; num *:= intExpr(    -240989001041328); ok := ok and num =  9223372036854746544;
    num :=                -4639; num *:= intExpr(   -1988224194191587); ok := ok and num =  9223372036854772093;
    num :=                 -857; num *:= intExpr(  -10762394442070916); ok := ok and num =  9223372036854775012;
    num :=                  -11; num *:= intExpr( -838488366986797800); ok := ok and num =  9223372036854775800;
    num :=                   -3; num *:= intExpr(-3074457345618258602); ok := ok and num =  9223372036854775806;
    num :=                   -2; num *:= intExpr(-4611686018427387903); ok := ok and num =  9223372036854775806;
    num :=                   -1; num *:= intExpr(-9223372036854775807); ok := ok and num =  9223372036854775807;
    num :=            INT64_MIN; num *:= intExpr(                   1); ok := ok and num =            INT64_MIN;
    num := -4611686018427387904; num *:= intExpr(                   2); ok := ok and num =            INT64_MIN;
    num := -3074457345618258602; num *:= intExpr(                   3); ok := ok and num = -9223372036854775806;
    num :=  -838488366986797800; num *:= intExpr(                  11); ok := ok and num = -9223372036854775800;
    num :=   -10762394442070916; num *:= intExpr(                 857); ok := ok and num = -9223372036854775012;
    num :=    -1988224194191587; num *:= intExpr(                4639); ok := ok and num = -9223372036854772093;
    num :=     -240989001041328; num *:= intExpr(               38273); ok := ok and num = -9223372036854746544;
    num :=      -14312161101687; num *:= intExpr(              644443); ok := ok and num = -9223372036854475341;
    num :=        -933865493037; num *:= intExpr(             9876553); ok := ok and num = -9223372036851061461;
    num :=        -747094709113; num *:= intExpr(            12345653); ok := ok and num = -9223372036845035789;
    num :=         -74709312968; num *:= intExpr(           123456791); ok := ok and num = -9223372036843965688;
    num :=          -3037000499; num *:= intExpr(          3037000499); ok := ok and num = -9223372030926249001;
    num :=           -123456791; num *:= intExpr(         74709312968); ok := ok and num = -9223372036843965688;
    num :=            -12345653; num *:= intExpr(        747094709113); ok := ok and num = -9223372036845035789;
    num :=             -9876553; num *:= intExpr(        933865493037); ok := ok and num = -9223372036851061461;
    num :=              -644443; num *:= intExpr(      14312161101687); ok := ok and num = -9223372036854475341;
    num :=               -38273; num *:= intExpr(     240989001041328); ok := ok and num = -9223372036854746544;
    num :=                -4639; num *:= intExpr(    1988224194191587); ok := ok and num = -9223372036854772093;
    num :=                 -857; num *:= intExpr(   10762394442070916); ok := ok and num = -9223372036854775012;
    num :=                  -11; num *:= intExpr(  838488366986797800); ok := ok and num = -9223372036854775800;
    num :=                   -3; num *:= intExpr( 3074457345618258602); ok := ok and num = -9223372036854775806;
    num :=                   -2; num *:= intExpr( 4611686018427387904); ok := ok and num =            INT64_MIN;
    num :=                   -1; num *:= intExpr( 9223372036854775807); ok := ok and num = -9223372036854775807;
    num :=  9223372036854775807; num *:= intExpr(                  -1); ok := ok and num = -9223372036854775807;
    num :=  4611686018427387904; num *:= intExpr(                  -2); ok := ok and num =            INT64_MIN;
    num :=  3074457345618258602; num *:= intExpr(                  -3); ok := ok and num = -9223372036854775806;
    num :=   838488366986797800; num *:= intExpr(                 -11); ok := ok and num = -9223372036854775800;
    num :=    10762394442070916; num *:= intExpr(                -857); ok := ok and num = -9223372036854775012;
    num :=     1988224194191587; num *:= intExpr(               -4639); ok := ok and num = -9223372036854772093;
    num :=      240989001041328; num *:= intExpr(              -38273); ok := ok and num = -9223372036854746544;
    num :=       14312161101687; num *:= intExpr(             -644443); ok := ok and num = -9223372036854475341;
    num :=         933865493037; num *:= intExpr(            -9876553); ok := ok and num = -9223372036851061461;
    num :=         747094709113; num *:= intExpr(           -12345653); ok := ok and num = -9223372036845035789;
    num :=          74709312968; num *:= intExpr(          -123456791); ok := ok and num = -9223372036843965688;
    num :=           3037000499; num *:= intExpr(         -3037000499); ok := ok and num = -9223372030926249001;
    num :=            123456791; num *:= intExpr(        -74709312968); ok := ok and num = -9223372036843965688;
    num :=             12345653; num *:= intExpr(       -747094709113); ok := ok and num = -9223372036845035789;
    num :=              9876553; num *:= intExpr(       -933865493037); ok := ok and num = -9223372036851061461;
    num :=               644443; num *:= intExpr(     -14312161101687); ok := ok and num = -9223372036854475341;
    num :=                38273; num *:= intExpr(    -240989001041328); ok := ok and num = -9223372036854746544;
    num :=                 4639; num *:= intExpr(   -1988224194191587); ok := ok and num = -9223372036854772093;
    num :=                  857; num *:= intExpr(  -10762394442070916); ok := ok and num = -9223372036854775012;
    num :=                   11; num *:= intExpr( -838488366986797800); ok := ok and num = -9223372036854775800;
    num :=                    3; num *:= intExpr(-3074457345618258602); ok := ok and num = -9223372036854775806;
    num :=                    2; num *:= intExpr(-4611686018427387904); ok := ok and num =            INT64_MIN;
    num :=                    1; num *:= intExpr(           INT64_MIN); ok := ok and num =            INT64_MIN;
    num :=  9223372036854775807; num *:= intExpr(                   1); ok := ok and num =  9223372036854775807;
    num :=  4611686018427387903; num *:= intExpr(                   2); ok := ok and num =  9223372036854775806;
    num :=  3074457345618258602; num *:= intExpr(                   3); ok := ok and num =  9223372036854775806;
    num :=   838488366986797800; num *:= intExpr(                  11); ok := ok and num =  9223372036854775800;
    num :=    10762394442070916; num *:= intExpr(                 857); ok := ok and num =  9223372036854775012;
    num :=     1988224194191587; num *:= intExpr(                4639); ok := ok and num =  9223372036854772093;
    num :=      240989001041328; num *:= intExpr(               38273); ok := ok and num =  9223372036854746544;
    num :=       14312161101687; num *:= intExpr(              644443); ok := ok and num =  9223372036854475341;
    num :=         933865493037; num *:= intExpr(             9876553); ok := ok and num =  9223372036851061461;
    num :=         747094709113; num *:= intExpr(            12345653); ok := ok and num =  9223372036845035789;
    num :=          74709312968; num *:= intExpr(           123456791); ok := ok and num =  9223372036843965688;
    num :=           3037000499; num *:= intExpr(          3037000499); ok := ok and num =  9223372030926249001;
    num :=            123456791; num *:= intExpr(         74709312968); ok := ok and num =  9223372036843965688;
    num :=             12345653; num *:= intExpr(        747094709113); ok := ok and num =  9223372036845035789;
    num :=              9876553; num *:= intExpr(        933865493037); ok := ok and num =  9223372036851061461;
    num :=               644443; num *:= intExpr(      14312161101687); ok := ok and num =  9223372036854475341;
    num :=                38273; num *:= intExpr(     240989001041328); ok := ok and num =  9223372036854746544;
    num :=                 4639; num *:= intExpr(    1988224194191587); ok := ok and num =  9223372036854772093;
    num :=                  857; num *:= intExpr(   10762394442070916); ok := ok and num =  9223372036854775012;
    num :=                   11; num *:= intExpr(  838488366986797800); ok := ok and num =  9223372036854775800;
    num :=                    3; num *:= intExpr( 3074457345618258602); ok := ok and num =  9223372036854775806;
    num :=                    2; num *:= intExpr( 4611686018427387903); ok := ok and num =  9223372036854775806;
    num :=                    1; num *:= intExpr( 9223372036854775807); ok := ok and num =  9223372036854775807;
    if not ok then
      writeln(" ***** Multiplication assignment with big products does not work correct. (2)");
      okay := FALSE;
    end if;

    ok := TRUE;
    arr[1] := -9223372036854775807; arr[1] *:=                   -1; ok := ok and arr[1] =  9223372036854775807;
    arr[1] := -4611686018427387903; arr[1] *:=                   -2; ok := ok and arr[1] =  9223372036854775806;
    arr[1] := -3074457345618258602; arr[1] *:=                   -3; ok := ok and arr[1] =  9223372036854775806;
    arr[1] :=  -838488366986797800; arr[1] *:=                  -11; ok := ok and arr[1] =  9223372036854775800;
    arr[1] :=   -10762394442070916; arr[1] *:=                 -857; ok := ok and arr[1] =  9223372036854775012;
    arr[1] :=    -1988224194191587; arr[1] *:=                -4639; ok := ok and arr[1] =  9223372036854772093;
    arr[1] :=     -240989001041328; arr[1] *:=               -38273; ok := ok and arr[1] =  9223372036854746544;
    arr[1] :=      -14312161101687; arr[1] *:=              -644443; ok := ok and arr[1] =  9223372036854475341;
    arr[1] :=        -933865493037; arr[1] *:=             -9876553; ok := ok and arr[1] =  9223372036851061461;
    arr[1] :=        -747094709113; arr[1] *:=            -12345653; ok := ok and arr[1] =  9223372036845035789;
    arr[1] :=         -74709312968; arr[1] *:=           -123456791; ok := ok and arr[1] =  9223372036843965688;
    arr[1] :=          -3037000499; arr[1] *:=          -3037000499; ok := ok and arr[1] =  9223372030926249001;
    arr[1] :=           -123456791; arr[1] *:=         -74709312968; ok := ok and arr[1] =  9223372036843965688;
    arr[1] :=            -12345653; arr[1] *:=        -747094709113; ok := ok and arr[1] =  9223372036845035789;
    arr[1] :=             -9876553; arr[1] *:=        -933865493037; ok := ok and arr[1] =  9223372036851061461;
    arr[1] :=              -644443; arr[1] *:=      -14312161101687; ok := ok and arr[1] =  9223372036854475341;
    arr[1] :=               -38273; arr[1] *:=     -240989001041328; ok := ok and arr[1] =  9223372036854746544;
    arr[1] :=                -4639; arr[1] *:=    -1988224194191587; ok := ok and arr[1] =  9223372036854772093;
    arr[1] :=                 -857; arr[1] *:=   -10762394442070916; ok := ok and arr[1] =  9223372036854775012;
    arr[1] :=                  -11; arr[1] *:=  -838488366986797800; ok := ok and arr[1] =  9223372036854775800;
    arr[1] :=                   -3; arr[1] *:= -3074457345618258602; ok := ok and arr[1] =  9223372036854775806;
    arr[1] :=                   -2; arr[1] *:= -4611686018427387903; ok := ok and arr[1] =  9223372036854775806;
    arr[1] :=                   -1; arr[1] *:= -9223372036854775807; ok := ok and arr[1] =  9223372036854775807;
    arr[1] :=            INT64_MIN; arr[1] *:=                    1; ok := ok and arr[1] =            INT64_MIN;
    arr[1] := -4611686018427387904; arr[1] *:=                    2; ok := ok and arr[1] =            INT64_MIN;
    arr[1] := -3074457345618258602; arr[1] *:=                    3; ok := ok and arr[1] = -9223372036854775806;
    arr[1] :=  -838488366986797800; arr[1] *:=                   11; ok := ok and arr[1] = -9223372036854775800;
    arr[1] :=   -10762394442070916; arr[1] *:=                  857; ok := ok and arr[1] = -9223372036854775012;
    arr[1] :=    -1988224194191587; arr[1] *:=                 4639; ok := ok and arr[1] = -9223372036854772093;
    arr[1] :=     -240989001041328; arr[1] *:=                38273; ok := ok and arr[1] = -9223372036854746544;
    arr[1] :=      -14312161101687; arr[1] *:=               644443; ok := ok and arr[1] = -9223372036854475341;
    arr[1] :=        -933865493037; arr[1] *:=              9876553; ok := ok and arr[1] = -9223372036851061461;
    arr[1] :=        -747094709113; arr[1] *:=             12345653; ok := ok and arr[1] = -9223372036845035789;
    arr[1] :=         -74709312968; arr[1] *:=            123456791; ok := ok and arr[1] = -9223372036843965688;
    arr[1] :=          -3037000499; arr[1] *:=           3037000499; ok := ok and arr[1] = -9223372030926249001;
    arr[1] :=           -123456791; arr[1] *:=          74709312968; ok := ok and arr[1] = -9223372036843965688;
    arr[1] :=            -12345653; arr[1] *:=         747094709113; ok := ok and arr[1] = -9223372036845035789;
    arr[1] :=             -9876553; arr[1] *:=         933865493037; ok := ok and arr[1] = -9223372036851061461;
    arr[1] :=              -644443; arr[1] *:=       14312161101687; ok := ok and arr[1] = -9223372036854475341;
    arr[1] :=               -38273; arr[1] *:=      240989001041328; ok := ok and arr[1] = -9223372036854746544;
    arr[1] :=                -4639; arr[1] *:=     1988224194191587; ok := ok and arr[1] = -9223372036854772093;
    arr[1] :=                 -857; arr[1] *:=    10762394442070916; ok := ok and arr[1] = -9223372036854775012;
    arr[1] :=                  -11; arr[1] *:=   838488366986797800; ok := ok and arr[1] = -9223372036854775800;
    arr[1] :=                   -3; arr[1] *:=  3074457345618258602; ok := ok and arr[1] = -9223372036854775806;
    arr[1] :=                   -2; arr[1] *:=  4611686018427387904; ok := ok and arr[1] =            INT64_MIN;
    arr[1] :=                   -1; arr[1] *:=  9223372036854775807; ok := ok and arr[1] = -9223372036854775807;
    arr[1] :=  9223372036854775807; arr[1] *:=                   -1; ok := ok and arr[1] = -9223372036854775807;
    arr[1] :=  4611686018427387904; arr[1] *:=                   -2; ok := ok and arr[1] =            INT64_MIN;
    arr[1] :=  3074457345618258602; arr[1] *:=                   -3; ok := ok and arr[1] = -9223372036854775806;
    arr[1] :=   838488366986797800; arr[1] *:=                  -11; ok := ok and arr[1] = -9223372036854775800;
    arr[1] :=    10762394442070916; arr[1] *:=                 -857; ok := ok and arr[1] = -9223372036854775012;
    arr[1] :=     1988224194191587; arr[1] *:=                -4639; ok := ok and arr[1] = -9223372036854772093;
    arr[1] :=      240989001041328; arr[1] *:=               -38273; ok := ok and arr[1] = -9223372036854746544;
    arr[1] :=       14312161101687; arr[1] *:=              -644443; ok := ok and arr[1] = -9223372036854475341;
    arr[1] :=         933865493037; arr[1] *:=             -9876553; ok := ok and arr[1] = -9223372036851061461;
    arr[1] :=         747094709113; arr[1] *:=            -12345653; ok := ok and arr[1] = -9223372036845035789;
    arr[1] :=          74709312968; arr[1] *:=           -123456791; ok := ok and arr[1] = -9223372036843965688;
    arr[1] :=           3037000499; arr[1] *:=          -3037000499; ok := ok and arr[1] = -9223372030926249001;
    arr[1] :=            123456791; arr[1] *:=         -74709312968; ok := ok and arr[1] = -9223372036843965688;
    arr[1] :=             12345653; arr[1] *:=        -747094709113; ok := ok and arr[1] = -9223372036845035789;
    arr[1] :=              9876553; arr[1] *:=        -933865493037; ok := ok and arr[1] = -9223372036851061461;
    arr[1] :=               644443; arr[1] *:=      -14312161101687; ok := ok and arr[1] = -9223372036854475341;
    arr[1] :=                38273; arr[1] *:=     -240989001041328; ok := ok and arr[1] = -9223372036854746544;
    arr[1] :=                 4639; arr[1] *:=    -1988224194191587; ok := ok and arr[1] = -9223372036854772093;
    arr[1] :=                  857; arr[1] *:=   -10762394442070916; ok := ok and arr[1] = -9223372036854775012;
    arr[1] :=                   11; arr[1] *:=  -838488366986797800; ok := ok and arr[1] = -9223372036854775800;
    arr[1] :=                    3; arr[1] *:= -3074457345618258602; ok := ok and arr[1] = -9223372036854775806;
    arr[1] :=                    2; arr[1] *:= -4611686018427387904; ok := ok and arr[1] =            INT64_MIN;
    arr[1] :=                    1; arr[1] *:=            INT64_MIN; ok := ok and arr[1] =            INT64_MIN;
    arr[1] :=  9223372036854775807; arr[1] *:=                    1; ok := ok and arr[1] =  9223372036854775807;
    arr[1] :=  4611686018427387903; arr[1] *:=                    2; ok := ok and arr[1] =  9223372036854775806;
    arr[1] :=  3074457345618258602; arr[1] *:=                    3; ok := ok and arr[1] =  9223372036854775806;
    arr[1] :=   838488366986797800; arr[1] *:=                   11; ok := ok and arr[1] =  9223372036854775800;
    arr[1] :=    10762394442070916; arr[1] *:=                  857; ok := ok and arr[1] =  9223372036854775012;
    arr[1] :=     1988224194191587; arr[1] *:=                 4639; ok := ok and arr[1] =  9223372036854772093;
    arr[1] :=      240989001041328; arr[1] *:=                38273; ok := ok and arr[1] =  9223372036854746544;
    arr[1] :=       14312161101687; arr[1] *:=               644443; ok := ok and arr[1] =  9223372036854475341;
    arr[1] :=         933865493037; arr[1] *:=              9876553; ok := ok and arr[1] =  9223372036851061461;
    arr[1] :=         747094709113; arr[1] *:=             12345653; ok := ok and arr[1] =  9223372036845035789;
    arr[1] :=          74709312968; arr[1] *:=            123456791; ok := ok and arr[1] =  9223372036843965688;
    arr[1] :=           3037000499; arr[1] *:=           3037000499; ok := ok and arr[1] =  9223372030926249001;
    arr[1] :=            123456791; arr[1] *:=          74709312968; ok := ok and arr[1] =  9223372036843965688;
    arr[1] :=             12345653; arr[1] *:=         747094709113; ok := ok and arr[1] =  9223372036845035789;
    arr[1] :=              9876553; arr[1] *:=         933865493037; ok := ok and arr[1] =  9223372036851061461;
    arr[1] :=               644443; arr[1] *:=       14312161101687; ok := ok and arr[1] =  9223372036854475341;
    arr[1] :=                38273; arr[1] *:=      240989001041328; ok := ok and arr[1] =  9223372036854746544;
    arr[1] :=                 4639; arr[1] *:=     1988224194191587; ok := ok and arr[1] =  9223372036854772093;
    arr[1] :=                  857; arr[1] *:=    10762394442070916; ok := ok and arr[1] =  9223372036854775012;
    arr[1] :=                   11; arr[1] *:=   838488366986797800; ok := ok and arr[1] =  9223372036854775800;
    arr[1] :=                    3; arr[1] *:=  3074457345618258602; ok := ok and arr[1] =  9223372036854775806;
    arr[1] :=                    2; arr[1] *:=  4611686018427387903; ok := ok and arr[1] =  9223372036854775806;
    arr[1] :=                    1; arr[1] *:=  9223372036854775807; ok := ok and arr[1] =  9223372036854775807;
    if not ok then
      writeln(" ***** Multiplication assignment with big products does not work correct. (3)");
      okay := FALSE;
    end if;

    ok := TRUE;
    arr[1] := -9223372036854775807; arr[1] *:= intExpr(                  -1); ok := ok and arr[1] =  9223372036854775807;
    arr[1] := -4611686018427387903; arr[1] *:= intExpr(                  -2); ok := ok and arr[1] =  9223372036854775806;
    arr[1] := -3074457345618258602; arr[1] *:= intExpr(                  -3); ok := ok and arr[1] =  9223372036854775806;
    arr[1] :=  -838488366986797800; arr[1] *:= intExpr(                 -11); ok := ok and arr[1] =  9223372036854775800;
    arr[1] :=   -10762394442070916; arr[1] *:= intExpr(                -857); ok := ok and arr[1] =  9223372036854775012;
    arr[1] :=    -1988224194191587; arr[1] *:= intExpr(               -4639); ok := ok and arr[1] =  9223372036854772093;
    arr[1] :=     -240989001041328; arr[1] *:= intExpr(              -38273); ok := ok and arr[1] =  9223372036854746544;
    arr[1] :=      -14312161101687; arr[1] *:= intExpr(             -644443); ok := ok and arr[1] =  9223372036854475341;
    arr[1] :=        -933865493037; arr[1] *:= intExpr(            -9876553); ok := ok and arr[1] =  9223372036851061461;
    arr[1] :=        -747094709113; arr[1] *:= intExpr(           -12345653); ok := ok and arr[1] =  9223372036845035789;
    arr[1] :=         -74709312968; arr[1] *:= intExpr(          -123456791); ok := ok and arr[1] =  9223372036843965688;
    arr[1] :=          -3037000499; arr[1] *:= intExpr(         -3037000499); ok := ok and arr[1] =  9223372030926249001;
    arr[1] :=           -123456791; arr[1] *:= intExpr(        -74709312968); ok := ok and arr[1] =  9223372036843965688;
    arr[1] :=            -12345653; arr[1] *:= intExpr(       -747094709113); ok := ok and arr[1] =  9223372036845035789;
    arr[1] :=             -9876553; arr[1] *:= intExpr(       -933865493037); ok := ok and arr[1] =  9223372036851061461;
    arr[1] :=              -644443; arr[1] *:= intExpr(     -14312161101687); ok := ok and arr[1] =  9223372036854475341;
    arr[1] :=               -38273; arr[1] *:= intExpr(    -240989001041328); ok := ok and arr[1] =  9223372036854746544;
    arr[1] :=                -4639; arr[1] *:= intExpr(   -1988224194191587); ok := ok and arr[1] =  9223372036854772093;
    arr[1] :=                 -857; arr[1] *:= intExpr(  -10762394442070916); ok := ok and arr[1] =  9223372036854775012;
    arr[1] :=                  -11; arr[1] *:= intExpr( -838488366986797800); ok := ok and arr[1] =  9223372036854775800;
    arr[1] :=                   -3; arr[1] *:= intExpr(-3074457345618258602); ok := ok and arr[1] =  9223372036854775806;
    arr[1] :=                   -2; arr[1] *:= intExpr(-4611686018427387903); ok := ok and arr[1] =  9223372036854775806;
    arr[1] :=                   -1; arr[1] *:= intExpr(-9223372036854775807); ok := ok and arr[1] =  9223372036854775807;
    arr[1] :=            INT64_MIN; arr[1] *:= intExpr(                   1); ok := ok and arr[1] =            INT64_MIN;
    arr[1] := -4611686018427387904; arr[1] *:= intExpr(                   2); ok := ok and arr[1] =            INT64_MIN;
    arr[1] := -3074457345618258602; arr[1] *:= intExpr(                   3); ok := ok and arr[1] = -9223372036854775806;
    arr[1] :=  -838488366986797800; arr[1] *:= intExpr(                  11); ok := ok and arr[1] = -9223372036854775800;
    arr[1] :=   -10762394442070916; arr[1] *:= intExpr(                 857); ok := ok and arr[1] = -9223372036854775012;
    arr[1] :=    -1988224194191587; arr[1] *:= intExpr(                4639); ok := ok and arr[1] = -9223372036854772093;
    arr[1] :=     -240989001041328; arr[1] *:= intExpr(               38273); ok := ok and arr[1] = -9223372036854746544;
    arr[1] :=      -14312161101687; arr[1] *:= intExpr(              644443); ok := ok and arr[1] = -9223372036854475341;
    arr[1] :=        -933865493037; arr[1] *:= intExpr(             9876553); ok := ok and arr[1] = -9223372036851061461;
    arr[1] :=        -747094709113; arr[1] *:= intExpr(            12345653); ok := ok and arr[1] = -9223372036845035789;
    arr[1] :=         -74709312968; arr[1] *:= intExpr(           123456791); ok := ok and arr[1] = -9223372036843965688;
    arr[1] :=          -3037000499; arr[1] *:= intExpr(          3037000499); ok := ok and arr[1] = -9223372030926249001;
    arr[1] :=           -123456791; arr[1] *:= intExpr(         74709312968); ok := ok and arr[1] = -9223372036843965688;
    arr[1] :=            -12345653; arr[1] *:= intExpr(        747094709113); ok := ok and arr[1] = -9223372036845035789;
    arr[1] :=             -9876553; arr[1] *:= intExpr(        933865493037); ok := ok and arr[1] = -9223372036851061461;
    arr[1] :=              -644443; arr[1] *:= intExpr(      14312161101687); ok := ok and arr[1] = -9223372036854475341;
    arr[1] :=               -38273; arr[1] *:= intExpr(     240989001041328); ok := ok and arr[1] = -9223372036854746544;
    arr[1] :=                -4639; arr[1] *:= intExpr(    1988224194191587); ok := ok and arr[1] = -9223372036854772093;
    arr[1] :=                 -857; arr[1] *:= intExpr(   10762394442070916); ok := ok and arr[1] = -9223372036854775012;
    arr[1] :=                  -11; arr[1] *:= intExpr(  838488366986797800); ok := ok and arr[1] = -9223372036854775800;
    arr[1] :=                   -3; arr[1] *:= intExpr( 3074457345618258602); ok := ok and arr[1] = -9223372036854775806;
    arr[1] :=                   -2; arr[1] *:= intExpr( 4611686018427387904); ok := ok and arr[1] =            INT64_MIN;
    arr[1] :=                   -1; arr[1] *:= intExpr( 9223372036854775807); ok := ok and arr[1] = -9223372036854775807;
    arr[1] :=  9223372036854775807; arr[1] *:= intExpr(                  -1); ok := ok and arr[1] = -9223372036854775807;
    arr[1] :=  4611686018427387904; arr[1] *:= intExpr(                  -2); ok := ok and arr[1] =            INT64_MIN;
    arr[1] :=  3074457345618258602; arr[1] *:= intExpr(                  -3); ok := ok and arr[1] = -9223372036854775806;
    arr[1] :=   838488366986797800; arr[1] *:= intExpr(                 -11); ok := ok and arr[1] = -9223372036854775800;
    arr[1] :=    10762394442070916; arr[1] *:= intExpr(                -857); ok := ok and arr[1] = -9223372036854775012;
    arr[1] :=     1988224194191587; arr[1] *:= intExpr(               -4639); ok := ok and arr[1] = -9223372036854772093;
    arr[1] :=      240989001041328; arr[1] *:= intExpr(              -38273); ok := ok and arr[1] = -9223372036854746544;
    arr[1] :=       14312161101687; arr[1] *:= intExpr(             -644443); ok := ok and arr[1] = -9223372036854475341;
    arr[1] :=         933865493037; arr[1] *:= intExpr(            -9876553); ok := ok and arr[1] = -9223372036851061461;
    arr[1] :=         747094709113; arr[1] *:= intExpr(           -12345653); ok := ok and arr[1] = -9223372036845035789;
    arr[1] :=          74709312968; arr[1] *:= intExpr(          -123456791); ok := ok and arr[1] = -9223372036843965688;
    arr[1] :=           3037000499; arr[1] *:= intExpr(         -3037000499); ok := ok and arr[1] = -9223372030926249001;
    arr[1] :=            123456791; arr[1] *:= intExpr(        -74709312968); ok := ok and arr[1] = -9223372036843965688;
    arr[1] :=             12345653; arr[1] *:= intExpr(       -747094709113); ok := ok and arr[1] = -9223372036845035789;
    arr[1] :=              9876553; arr[1] *:= intExpr(       -933865493037); ok := ok and arr[1] = -9223372036851061461;
    arr[1] :=               644443; arr[1] *:= intExpr(     -14312161101687); ok := ok and arr[1] = -9223372036854475341;
    arr[1] :=                38273; arr[1] *:= intExpr(    -240989001041328); ok := ok and arr[1] = -9223372036854746544;
    arr[1] :=                 4639; arr[1] *:= intExpr(   -1988224194191587); ok := ok and arr[1] = -9223372036854772093;
    arr[1] :=                  857; arr[1] *:= intExpr(  -10762394442070916); ok := ok and arr[1] = -9223372036854775012;
    arr[1] :=                   11; arr[1] *:= intExpr( -838488366986797800); ok := ok and arr[1] = -9223372036854775800;
    arr[1] :=                    3; arr[1] *:= intExpr(-3074457345618258602); ok := ok and arr[1] = -9223372036854775806;
    arr[1] :=                    2; arr[1] *:= intExpr(-4611686018427387904); ok := ok and arr[1] =            INT64_MIN;
    arr[1] :=                    1; arr[1] *:= intExpr(           INT64_MIN); ok := ok and arr[1] =            INT64_MIN;
    arr[1] :=  9223372036854775807; arr[1] *:= intExpr(                   1); ok := ok and arr[1] =  9223372036854775807;
    arr[1] :=  4611686018427387903; arr[1] *:= intExpr(                   2); ok := ok and arr[1] =  9223372036854775806;
    arr[1] :=  3074457345618258602; arr[1] *:= intExpr(                   3); ok := ok and arr[1] =  9223372036854775806;
    arr[1] :=   838488366986797800; arr[1] *:= intExpr(                  11); ok := ok and arr[1] =  9223372036854775800;
    arr[1] :=    10762394442070916; arr[1] *:= intExpr(                 857); ok := ok and arr[1] =  9223372036854775012;
    arr[1] :=     1988224194191587; arr[1] *:= intExpr(                4639); ok := ok and arr[1] =  9223372036854772093;
    arr[1] :=      240989001041328; arr[1] *:= intExpr(               38273); ok := ok and arr[1] =  9223372036854746544;
    arr[1] :=       14312161101687; arr[1] *:= intExpr(              644443); ok := ok and arr[1] =  9223372036854475341;
    arr[1] :=         933865493037; arr[1] *:= intExpr(             9876553); ok := ok and arr[1] =  9223372036851061461;
    arr[1] :=         747094709113; arr[1] *:= intExpr(            12345653); ok := ok and arr[1] =  9223372036845035789;
    arr[1] :=          74709312968; arr[1] *:= intExpr(           123456791); ok := ok and arr[1] =  9223372036843965688;
    arr[1] :=           3037000499; arr[1] *:= intExpr(          3037000499); ok := ok and arr[1] =  9223372030926249001;
    arr[1] :=            123456791; arr[1] *:= intExpr(         74709312968); ok := ok and arr[1] =  9223372036843965688;
    arr[1] :=             12345653; arr[1] *:= intExpr(        747094709113); ok := ok and arr[1] =  9223372036845035789;
    arr[1] :=              9876553; arr[1] *:= intExpr(        933865493037); ok := ok and arr[1] =  9223372036851061461;
    arr[1] :=               644443; arr[1] *:= intExpr(      14312161101687); ok := ok and arr[1] =  9223372036854475341;
    arr[1] :=                38273; arr[1] *:= intExpr(     240989001041328); ok := ok and arr[1] =  9223372036854746544;
    arr[1] :=                 4639; arr[1] *:= intExpr(    1988224194191587); ok := ok and arr[1] =  9223372036854772093;
    arr[1] :=                  857; arr[1] *:= intExpr(   10762394442070916); ok := ok and arr[1] =  9223372036854775012;
    arr[1] :=                   11; arr[1] *:= intExpr(  838488366986797800); ok := ok and arr[1] =  9223372036854775800;
    arr[1] :=                    3; arr[1] *:= intExpr( 3074457345618258602); ok := ok and arr[1] =  9223372036854775806;
    arr[1] :=                    2; arr[1] *:= intExpr( 4611686018427387903); ok := ok and arr[1] =  9223372036854775806;
    arr[1] :=                    1; arr[1] *:= intExpr( 9223372036854775807); ok := ok and arr[1] =  9223372036854775807;
    if not ok then
      writeln(" ***** Multiplication assignment with big products does not work correct. (4)");
      okay := FALSE;
    end if;

    if okay then
      writeln("Multiplication assignment works correct for selected values.");
    else
      writeln(" ***** Multiplication assignment does not work correct.");
    end if;
  end func;


const proc: check_division is func
  local
    var boolean: okay is TRUE;
    var boolean: p_div_p is FALSE;
    var boolean: n_div_n is FALSE;
    var boolean: p_div_n is FALSE;
    var boolean: n_div_p is FALSE;
    var integer: dividend is 0;
    var integer: divisor is 0;
  begin
    writeln("a div b is integer division and a rem b is integer remainder:");

    if ( 11 div  4) =  2  and  ( 11 rem  4) =  3 then
      if (-11 div -4) =  2  and  (-11 rem -4) = -3 then
        if ( ( 11 div -4) = -2  and  ( 11 rem -4) =  3 ) and
           ( (-11 div  4) = -2  and  (-11 rem  4) = -3 ) then
          writeln("for positive and negative a and b");
        else
          writeln("only if a and b have the same sign");
        end if;
      else
        writeln("only if a and b are positive");
      end if;
    else
      writeln("not even if a and b are positive");
    end if;

    p_div_p := ( 11 div  4) *  4 + ( 11 rem  4) =  11;
    n_div_n := (-11 div -4) * -4 + (-11 rem -4) = -11;
    p_div_n := ( 11 div -4) * -4 + ( 11 rem -4) =  11;
    n_div_p := (-11 div  4) *  4 + (-11 rem  4) = -11;

    write("(a div b) * b + (a rem b) = a  holds ");

    if p_div_p then
      if n_div_n then
        if p_div_n and n_div_p then
          writeln("for positive and negative a and b");
        else
          writeln("only if a and b have the same sign");
        end if;
      else
        writeln("only if a and b are positive");
      end if;
    else
      writeln("not even if a and b are positive");
    end if;

    for dividend range -9 to 9 do
      for divisor range -4 to 4 do
        if divisor <> 0 then
          if (dividend div divisor) * divisor + dividend rem divisor <>
              dividend then
            okay := FALSE;
          end if;
        end if;
      end for;
    end for;
    if okay then
      writeln("Div and rem work correct for selected values.");
    else
      writeln(" ***** div and rem does not work correct.");
    end if;

    okay := TRUE;
    for dividend range -9 to 9 do
      for divisor range -4 to 4 do
        if divisor <> 0 then
          if (dividend mdiv divisor) * divisor + dividend mod divisor <>
              dividend then
            okay := FALSE;
          end if;
        end if;
      end for;
    end for;
    if okay then
      writeln("Mdiv and mod work correct for selected values.");
    else
      writeln(" ***** mdiv and mod does not work correct.");
    end if;
  end func;


const proc: check_div is func
  local
    var boolean: okay is TRUE;
    var integer: zero is 0;
    var integer: zero2 is 0;
    var integer: one is 1;
    var integer: minusOne is -1;
  begin
    if   10 div  5 <>  2 or
          9 div  5 <>  1 or
          8 div  5 <>  1 or
          7 div  5 <>  1 or
          6 div  5 <>  1 or
          5 div  5 <>  1 or
          4 div  5 <>  0 or
          3 div  5 <>  0 or
          2 div  5 <>  0 or
          1 div  5 <>  0 or
          0 div  5 <>  0 or
         -1 div  5 <>  0 or
         -2 div  5 <>  0 or
         -3 div  5 <>  0 or
         -4 div  5 <>  0 or
         -5 div  5 <> -1 or
         -6 div  5 <> -1 or
         -7 div  5 <> -1 or
         -8 div  5 <> -1 or
         -9 div  5 <> -1 or
        -10 div  5 <> -2 or
         10 div  4 <>  2 or
          9 div  4 <>  2 or
          8 div  4 <>  2 or
          7 div  4 <>  1 or
          6 div  4 <>  1 or
          5 div  4 <>  1 or
          4 div  4 <>  1 or
          3 div  4 <>  0 or
          2 div  4 <>  0 or
          1 div  4 <>  0 or
          0 div  4 <>  0 or
         -1 div  4 <>  0 or
         -2 div  4 <>  0 or
         -3 div  4 <>  0 or
         -4 div  4 <> -1 or
         -5 div  4 <> -1 or
         -6 div  4 <> -1 or
         -7 div  4 <> -1 or
         -8 div  4 <> -2 or
         -9 div  4 <> -2 or
        -10 div  4 <> -2 or
         10 div  3 <>  3 or
          9 div  3 <>  3 or
          8 div  3 <>  2 or
          7 div  3 <>  2 or
          6 div  3 <>  2 or
          5 div  3 <>  1 or
          4 div  3 <>  1 or
          3 div  3 <>  1 or
          2 div  3 <>  0 or
          1 div  3 <>  0 or
          0 div  3 <>  0 or
         -1 div  3 <>  0 or
         -2 div  3 <>  0 or
         -3 div  3 <> -1 or
         -4 div  3 <> -1 or
         -5 div  3 <> -1 or
         -6 div  3 <> -2 or
         -7 div  3 <> -2 or
         -8 div  3 <> -2 or
         -9 div  3 <> -3 or
        -10 div  3 <> -3 or
         10 div  2 <>  5 or
          9 div  2 <>  4 or
          8 div  2 <>  4 or
          7 div  2 <>  3 or
          6 div  2 <>  3 or
          5 div  2 <>  2 or
          4 div  2 <>  2 or
          3 div  2 <>  1 or
          2 div  2 <>  1 or
          1 div  2 <>  0 or
          0 div  2 <>  0 or
         -1 div  2 <>  0 or
         -2 div  2 <> -1 or
         -3 div  2 <> -1 or
         -4 div  2 <> -2 or
         -5 div  2 <> -2 or
         -6 div  2 <> -3 or
         -7 div  2 <> -3 or
         -8 div  2 <> -4 or
         -9 div  2 <> -4 or
        -10 div  2 <> -5 or
         10 div  1 <> 10 or
          9 div  1 <>  9 or
          8 div  1 <>  8 or
          7 div  1 <>  7 or
          6 div  1 <>  6 or
          5 div  1 <>  5 or
          4 div  1 <>  4 or
          3 div  1 <>  3 or
          2 div  1 <>  2 or
          1 div  1 <>  1 or
          0 div  1 <>  0 or
         -1 div  1 <> -1 or
         -2 div  1 <> -2 or
         -3 div  1 <> -3 or
         -4 div  1 <> -4 or
         -5 div  1 <> -5 or
         -6 div  1 <> -6 or
         -7 div  1 <> -7 or
         -8 div  1 <> -8 or
         -9 div  1 <> -9 or
        -10 div  1 <> -10 or
         10 div -1 <> -10 or
          9 div -1 <> -9 or
          8 div -1 <> -8 or
          7 div -1 <> -7 or
          6 div -1 <> -6 or
          5 div -1 <> -5 or
          4 div -1 <> -4 or
          3 div -1 <> -3 or
          2 div -1 <> -2 or
          1 div -1 <> -1 or
          0 div -1 <>  0 or
         -1 div -1 <>  1 or
         -2 div -1 <>  2 or
         -3 div -1 <>  3 or
         -4 div -1 <>  4 or
         -5 div -1 <>  5 or
         -6 div -1 <>  6 or
         -7 div -1 <>  7 or
         -8 div -1 <>  8 or
         -9 div -1 <>  9 or
        -10 div -1 <> 10 or
         10 div -2 <> -5 or
          9 div -2 <> -4 or
          8 div -2 <> -4 or
          7 div -2 <> -3 or
          6 div -2 <> -3 or
          5 div -2 <> -2 or
          4 div -2 <> -2 or
          3 div -2 <> -1 or
          2 div -2 <> -1 or
          1 div -2 <>  0 or
          0 div -2 <>  0 or
         -1 div -2 <>  0 or
         -2 div -2 <>  1 or
         -3 div -2 <>  1 or
         -4 div -2 <>  2 or
         -5 div -2 <>  2 or
         -6 div -2 <>  3 or
         -7 div -2 <>  3 or
         -8 div -2 <>  4 or
         -9 div -2 <>  4 or
        -10 div -2 <>  5 or
         10 div -3 <> -3 or
          9 div -3 <> -3 or
          8 div -3 <> -2 or
          7 div -3 <> -2 or
          6 div -3 <> -2 or
          5 div -3 <> -1 or
          4 div -3 <> -1 or
          3 div -3 <> -1 or
          2 div -3 <>  0 or
          1 div -3 <>  0 or
          0 div -3 <>  0 or
         -1 div -3 <>  0 or
         -2 div -3 <>  0 or
         -3 div -3 <>  1 or
         -4 div -3 <>  1 or
         -5 div -3 <>  1 or
         -6 div -3 <>  2 or
         -7 div -3 <>  2 or
         -8 div -3 <>  2 or
         -9 div -3 <>  3 or
        -10 div -3 <>  3 or
         10 div -4 <> -2 or
          9 div -4 <> -2 or
          8 div -4 <> -2 or
          7 div -4 <> -1 or
          6 div -4 <> -1 or
          5 div -4 <> -1 or
          4 div -4 <> -1 or
          3 div -4 <>  0 or
          2 div -4 <>  0 or
          1 div -4 <>  0 or
          0 div -4 <>  0 or
         -1 div -4 <>  0 or
         -2 div -4 <>  0 or
         -3 div -4 <>  0 or
         -4 div -4 <>  1 or
         -5 div -4 <>  1 or
         -6 div -4 <>  1 or
         -7 div -4 <>  1 or
         -8 div -4 <>  2 or
         -9 div -4 <>  2 or
        -10 div -4 <>  2 or
         10 div -5 <> -2 or
          9 div -5 <> -1 or
          8 div -5 <> -1 or
          7 div -5 <> -1 or
          6 div -5 <> -1 or
          5 div -5 <> -1 or
          4 div -5 <>  0 or
          3 div -5 <>  0 or
          2 div -5 <>  0 or
          1 div -5 <>  0 or
          0 div -5 <>  0 or
         -1 div -5 <>  0 or
         -2 div -5 <>  0 or
         -3 div -5 <>  0 or
         -4 div -5 <>  0 or
         -5 div -5 <>  1 or
         -6 div -5 <>  1 or
         -7 div -5 <>  1 or
         -8 div -5 <>  1 or
         -9 div -5 <>  1 or
        -10 div -5 <>  2 then
      writeln(" ***** div with two constants does not work correct.");
      okay := FALSE;
    end if;

    if  intExpr( 10) div  5 <>  2 or
        intExpr(  9) div  5 <>  1 or
        intExpr(  8) div  5 <>  1 or
        intExpr(  7) div  5 <>  1 or
        intExpr(  6) div  5 <>  1 or
        intExpr(  5) div  5 <>  1 or
        intExpr(  4) div  5 <>  0 or
        intExpr(  3) div  5 <>  0 or
        intExpr(  2) div  5 <>  0 or
        intExpr(  1) div  5 <>  0 or
        intExpr(  0) div  5 <>  0 or
        intExpr( -1) div  5 <>  0 or
        intExpr( -2) div  5 <>  0 or
        intExpr( -3) div  5 <>  0 or
        intExpr( -4) div  5 <>  0 or
        intExpr( -5) div  5 <> -1 or
        intExpr( -6) div  5 <> -1 or
        intExpr( -7) div  5 <> -1 or
        intExpr( -8) div  5 <> -1 or
        intExpr( -9) div  5 <> -1 or
        intExpr(-10) div  5 <> -2 or
        intExpr( 10) div  4 <>  2 or
        intExpr(  9) div  4 <>  2 or
        intExpr(  8) div  4 <>  2 or
        intExpr(  7) div  4 <>  1 or
        intExpr(  6) div  4 <>  1 or
        intExpr(  5) div  4 <>  1 or
        intExpr(  4) div  4 <>  1 or
        intExpr(  3) div  4 <>  0 or
        intExpr(  2) div  4 <>  0 or
        intExpr(  1) div  4 <>  0 or
        intExpr(  0) div  4 <>  0 or
        intExpr( -1) div  4 <>  0 or
        intExpr( -2) div  4 <>  0 or
        intExpr( -3) div  4 <>  0 or
        intExpr( -4) div  4 <> -1 or
        intExpr( -5) div  4 <> -1 or
        intExpr( -6) div  4 <> -1 or
        intExpr( -7) div  4 <> -1 or
        intExpr( -8) div  4 <> -2 or
        intExpr( -9) div  4 <> -2 or
        intExpr(-10) div  4 <> -2 or
        intExpr( 10) div  3 <>  3 or
        intExpr(  9) div  3 <>  3 or
        intExpr(  8) div  3 <>  2 or
        intExpr(  7) div  3 <>  2 or
        intExpr(  6) div  3 <>  2 or
        intExpr(  5) div  3 <>  1 or
        intExpr(  4) div  3 <>  1 or
        intExpr(  3) div  3 <>  1 or
        intExpr(  2) div  3 <>  0 or
        intExpr(  1) div  3 <>  0 or
        intExpr(  0) div  3 <>  0 or
        intExpr( -1) div  3 <>  0 or
        intExpr( -2) div  3 <>  0 or
        intExpr( -3) div  3 <> -1 or
        intExpr( -4) div  3 <> -1 or
        intExpr( -5) div  3 <> -1 or
        intExpr( -6) div  3 <> -2 or
        intExpr( -7) div  3 <> -2 or
        intExpr( -8) div  3 <> -2 or
        intExpr( -9) div  3 <> -3 or
        intExpr(-10) div  3 <> -3 or
        intExpr( 10) div  2 <>  5 or
        intExpr(  9) div  2 <>  4 or
        intExpr(  8) div  2 <>  4 or
        intExpr(  7) div  2 <>  3 or
        intExpr(  6) div  2 <>  3 or
        intExpr(  5) div  2 <>  2 or
        intExpr(  4) div  2 <>  2 or
        intExpr(  3) div  2 <>  1 or
        intExpr(  2) div  2 <>  1 or
        intExpr(  1) div  2 <>  0 or
        intExpr(  0) div  2 <>  0 or
        intExpr( -1) div  2 <>  0 or
        intExpr( -2) div  2 <> -1 or
        intExpr( -3) div  2 <> -1 or
        intExpr( -4) div  2 <> -2 or
        intExpr( -5) div  2 <> -2 or
        intExpr( -6) div  2 <> -3 or
        intExpr( -7) div  2 <> -3 or
        intExpr( -8) div  2 <> -4 or
        intExpr( -9) div  2 <> -4 or
        intExpr(-10) div  2 <> -5 or
        intExpr( 10) div  1 <> 10 or
        intExpr(  9) div  1 <>  9 or
        intExpr(  8) div  1 <>  8 or
        intExpr(  7) div  1 <>  7 or
        intExpr(  6) div  1 <>  6 or
        intExpr(  5) div  1 <>  5 or
        intExpr(  4) div  1 <>  4 or
        intExpr(  3) div  1 <>  3 or
        intExpr(  2) div  1 <>  2 or
        intExpr(  1) div  1 <>  1 or
        intExpr(  0) div  1 <>  0 or
        intExpr( -1) div  1 <> -1 or
        intExpr( -2) div  1 <> -2 or
        intExpr( -3) div  1 <> -3 or
        intExpr( -4) div  1 <> -4 or
        intExpr( -5) div  1 <> -5 or
        intExpr( -6) div  1 <> -6 or
        intExpr( -7) div  1 <> -7 or
        intExpr( -8) div  1 <> -8 or
        intExpr( -9) div  1 <> -9 or
        intExpr(-10) div  1 <> -10 or
        intExpr( 10) div -1 <> -10 or
        intExpr(  9) div -1 <> -9 or
        intExpr(  8) div -1 <> -8 or
        intExpr(  7) div -1 <> -7 or
        intExpr(  6) div -1 <> -6 or
        intExpr(  5) div -1 <> -5 or
        intExpr(  4) div -1 <> -4 or
        intExpr(  3) div -1 <> -3 or
        intExpr(  2) div -1 <> -2 or
        intExpr(  1) div -1 <> -1 or
        intExpr(  0) div -1 <>  0 or
        intExpr( -1) div -1 <>  1 or
        intExpr( -2) div -1 <>  2 or
        intExpr( -3) div -1 <>  3 or
        intExpr( -4) div -1 <>  4 or
        intExpr( -5) div -1 <>  5 or
        intExpr( -6) div -1 <>  6 or
        intExpr( -7) div -1 <>  7 or
        intExpr( -8) div -1 <>  8 or
        intExpr( -9) div -1 <>  9 or
        intExpr(-10) div -1 <> 10 or
        intExpr( 10) div -2 <> -5 or
        intExpr(  9) div -2 <> -4 or
        intExpr(  8) div -2 <> -4 or
        intExpr(  7) div -2 <> -3 or
        intExpr(  6) div -2 <> -3 or
        intExpr(  5) div -2 <> -2 or
        intExpr(  4) div -2 <> -2 or
        intExpr(  3) div -2 <> -1 or
        intExpr(  2) div -2 <> -1 or
        intExpr(  1) div -2 <>  0 or
        intExpr(  0) div -2 <>  0 or
        intExpr( -1) div -2 <>  0 or
        intExpr( -2) div -2 <>  1 or
        intExpr( -3) div -2 <>  1 or
        intExpr( -4) div -2 <>  2 or
        intExpr( -5) div -2 <>  2 or
        intExpr( -6) div -2 <>  3 or
        intExpr( -7) div -2 <>  3 or
        intExpr( -8) div -2 <>  4 or
        intExpr( -9) div -2 <>  4 or
        intExpr(-10) div -2 <>  5 or
        intExpr( 10) div -3 <> -3 or
        intExpr(  9) div -3 <> -3 or
        intExpr(  8) div -3 <> -2 or
        intExpr(  7) div -3 <> -2 or
        intExpr(  6) div -3 <> -2 or
        intExpr(  5) div -3 <> -1 or
        intExpr(  4) div -3 <> -1 or
        intExpr(  3) div -3 <> -1 or
        intExpr(  2) div -3 <>  0 or
        intExpr(  1) div -3 <>  0 or
        intExpr(  0) div -3 <>  0 or
        intExpr( -1) div -3 <>  0 or
        intExpr( -2) div -3 <>  0 or
        intExpr( -3) div -3 <>  1 or
        intExpr( -4) div -3 <>  1 or
        intExpr( -5) div -3 <>  1 or
        intExpr( -6) div -3 <>  2 or
        intExpr( -7) div -3 <>  2 or
        intExpr( -8) div -3 <>  2 or
        intExpr( -9) div -3 <>  3 or
        intExpr(-10) div -3 <>  3 or
        intExpr( 10) div -4 <> -2 or
        intExpr(  9) div -4 <> -2 or
        intExpr(  8) div -4 <> -2 or
        intExpr(  7) div -4 <> -1 or
        intExpr(  6) div -4 <> -1 or
        intExpr(  5) div -4 <> -1 or
        intExpr(  4) div -4 <> -1 or
        intExpr(  3) div -4 <>  0 or
        intExpr(  2) div -4 <>  0 or
        intExpr(  1) div -4 <>  0 or
        intExpr(  0) div -4 <>  0 or
        intExpr( -1) div -4 <>  0 or
        intExpr( -2) div -4 <>  0 or
        intExpr( -3) div -4 <>  0 or
        intExpr( -4) div -4 <>  1 or
        intExpr( -5) div -4 <>  1 or
        intExpr( -6) div -4 <>  1 or
        intExpr( -7) div -4 <>  1 or
        intExpr( -8) div -4 <>  2 or
        intExpr( -9) div -4 <>  2 or
        intExpr(-10) div -4 <>  2 or
        intExpr( 10) div -5 <> -2 or
        intExpr(  9) div -5 <> -1 or
        intExpr(  8) div -5 <> -1 or
        intExpr(  7) div -5 <> -1 or
        intExpr(  6) div -5 <> -1 or
        intExpr(  5) div -5 <> -1 or
        intExpr(  4) div -5 <>  0 or
        intExpr(  3) div -5 <>  0 or
        intExpr(  2) div -5 <>  0 or
        intExpr(  1) div -5 <>  0 or
        intExpr(  0) div -5 <>  0 or
        intExpr( -1) div -5 <>  0 or
        intExpr( -2) div -5 <>  0 or
        intExpr( -3) div -5 <>  0 or
        intExpr( -4) div -5 <>  0 or
        intExpr( -5) div -5 <>  1 or
        intExpr( -6) div -5 <>  1 or
        intExpr( -7) div -5 <>  1 or
        intExpr( -8) div -5 <>  1 or
        intExpr( -9) div -5 <>  1 or
        intExpr(-10) div -5 <>  2 then
      writeln(" ***** div with an expression and a constant does not work correct");
      okay := FALSE;
    end if;

    if   10 div intExpr( 5) <>  2 or
          9 div intExpr( 5) <>  1 or
          8 div intExpr( 5) <>  1 or
          7 div intExpr( 5) <>  1 or
          6 div intExpr( 5) <>  1 or
          5 div intExpr( 5) <>  1 or
          4 div intExpr( 5) <>  0 or
          3 div intExpr( 5) <>  0 or
          2 div intExpr( 5) <>  0 or
          1 div intExpr( 5) <>  0 or
          0 div intExpr( 5) <>  0 or
         -1 div intExpr( 5) <>  0 or
         -2 div intExpr( 5) <>  0 or
         -3 div intExpr( 5) <>  0 or
         -4 div intExpr( 5) <>  0 or
         -5 div intExpr( 5) <> -1 or
         -6 div intExpr( 5) <> -1 or
         -7 div intExpr( 5) <> -1 or
         -8 div intExpr( 5) <> -1 or
         -9 div intExpr( 5) <> -1 or
        -10 div intExpr( 5) <> -2 or
         10 div intExpr( 4) <>  2 or
          9 div intExpr( 4) <>  2 or
          8 div intExpr( 4) <>  2 or
          7 div intExpr( 4) <>  1 or
          6 div intExpr( 4) <>  1 or
          5 div intExpr( 4) <>  1 or
          4 div intExpr( 4) <>  1 or
          3 div intExpr( 4) <>  0 or
          2 div intExpr( 4) <>  0 or
          1 div intExpr( 4) <>  0 or
          0 div intExpr( 4) <>  0 or
         -1 div intExpr( 4) <>  0 or
         -2 div intExpr( 4) <>  0 or
         -3 div intExpr( 4) <>  0 or
         -4 div intExpr( 4) <> -1 or
         -5 div intExpr( 4) <> -1 or
         -6 div intExpr( 4) <> -1 or
         -7 div intExpr( 4) <> -1 or
         -8 div intExpr( 4) <> -2 or
         -9 div intExpr( 4) <> -2 or
        -10 div intExpr( 4) <> -2 or
         10 div intExpr( 3) <>  3 or
          9 div intExpr( 3) <>  3 or
          8 div intExpr( 3) <>  2 or
          7 div intExpr( 3) <>  2 or
          6 div intExpr( 3) <>  2 or
          5 div intExpr( 3) <>  1 or
          4 div intExpr( 3) <>  1 or
          3 div intExpr( 3) <>  1 or
          2 div intExpr( 3) <>  0 or
          1 div intExpr( 3) <>  0 or
          0 div intExpr( 3) <>  0 or
         -1 div intExpr( 3) <>  0 or
         -2 div intExpr( 3) <>  0 or
         -3 div intExpr( 3) <> -1 or
         -4 div intExpr( 3) <> -1 or
         -5 div intExpr( 3) <> -1 or
         -6 div intExpr( 3) <> -2 or
         -7 div intExpr( 3) <> -2 or
         -8 div intExpr( 3) <> -2 or
         -9 div intExpr( 3) <> -3 or
        -10 div intExpr( 3) <> -3 or
         10 div intExpr( 2) <>  5 or
          9 div intExpr( 2) <>  4 or
          8 div intExpr( 2) <>  4 or
          7 div intExpr( 2) <>  3 or
          6 div intExpr( 2) <>  3 or
          5 div intExpr( 2) <>  2 or
          4 div intExpr( 2) <>  2 or
          3 div intExpr( 2) <>  1 or
          2 div intExpr( 2) <>  1 or
          1 div intExpr( 2) <>  0 or
          0 div intExpr( 2) <>  0 or
         -1 div intExpr( 2) <>  0 or
         -2 div intExpr( 2) <> -1 or
         -3 div intExpr( 2) <> -1 or
         -4 div intExpr( 2) <> -2 or
         -5 div intExpr( 2) <> -2 or
         -6 div intExpr( 2) <> -3 or
         -7 div intExpr( 2) <> -3 or
         -8 div intExpr( 2) <> -4 or
         -9 div intExpr( 2) <> -4 or
        -10 div intExpr( 2) <> -5 or
         10 div intExpr( 1) <> 10 or
          9 div intExpr( 1) <>  9 or
          8 div intExpr( 1) <>  8 or
          7 div intExpr( 1) <>  7 or
          6 div intExpr( 1) <>  6 or
          5 div intExpr( 1) <>  5 or
          4 div intExpr( 1) <>  4 or
          3 div intExpr( 1) <>  3 or
          2 div intExpr( 1) <>  2 or
          1 div intExpr( 1) <>  1 or
          0 div intExpr( 1) <>  0 or
         -1 div intExpr( 1) <> -1 or
         -2 div intExpr( 1) <> -2 or
         -3 div intExpr( 1) <> -3 or
         -4 div intExpr( 1) <> -4 or
         -5 div intExpr( 1) <> -5 or
         -6 div intExpr( 1) <> -6 or
         -7 div intExpr( 1) <> -7 or
         -8 div intExpr( 1) <> -8 or
         -9 div intExpr( 1) <> -9 or
        -10 div intExpr( 1) <> -10 or
         10 div intExpr(-1) <> -10 or
          9 div intExpr(-1) <> -9 or
          8 div intExpr(-1) <> -8 or
          7 div intExpr(-1) <> -7 or
          6 div intExpr(-1) <> -6 or
          5 div intExpr(-1) <> -5 or
          4 div intExpr(-1) <> -4 or
          3 div intExpr(-1) <> -3 or
          2 div intExpr(-1) <> -2 or
          1 div intExpr(-1) <> -1 or
          0 div intExpr(-1) <>  0 or
         -1 div intExpr(-1) <>  1 or
         -2 div intExpr(-1) <>  2 or
         -3 div intExpr(-1) <>  3 or
         -4 div intExpr(-1) <>  4 or
         -5 div intExpr(-1) <>  5 or
         -6 div intExpr(-1) <>  6 or
         -7 div intExpr(-1) <>  7 or
         -8 div intExpr(-1) <>  8 or
         -9 div intExpr(-1) <>  9 or
        -10 div intExpr(-1) <> 10 or
         10 div intExpr(-2) <> -5 or
          9 div intExpr(-2) <> -4 or
          8 div intExpr(-2) <> -4 or
          7 div intExpr(-2) <> -3 or
          6 div intExpr(-2) <> -3 or
          5 div intExpr(-2) <> -2 or
          4 div intExpr(-2) <> -2 or
          3 div intExpr(-2) <> -1 or
          2 div intExpr(-2) <> -1 or
          1 div intExpr(-2) <>  0 or
          0 div intExpr(-2) <>  0 or
         -1 div intExpr(-2) <>  0 or
         -2 div intExpr(-2) <>  1 or
         -3 div intExpr(-2) <>  1 or
         -4 div intExpr(-2) <>  2 or
         -5 div intExpr(-2) <>  2 or
         -6 div intExpr(-2) <>  3 or
         -7 div intExpr(-2) <>  3 or
         -8 div intExpr(-2) <>  4 or
         -9 div intExpr(-2) <>  4 or
        -10 div intExpr(-2) <>  5 or
         10 div intExpr(-3) <> -3 or
          9 div intExpr(-3) <> -3 or
          8 div intExpr(-3) <> -2 or
          7 div intExpr(-3) <> -2 or
          6 div intExpr(-3) <> -2 or
          5 div intExpr(-3) <> -1 or
          4 div intExpr(-3) <> -1 or
          3 div intExpr(-3) <> -1 or
          2 div intExpr(-3) <>  0 or
          1 div intExpr(-3) <>  0 or
          0 div intExpr(-3) <>  0 or
         -1 div intExpr(-3) <>  0 or
         -2 div intExpr(-3) <>  0 or
         -3 div intExpr(-3) <>  1 or
         -4 div intExpr(-3) <>  1 or
         -5 div intExpr(-3) <>  1 or
         -6 div intExpr(-3) <>  2 or
         -7 div intExpr(-3) <>  2 or
         -8 div intExpr(-3) <>  2 or
         -9 div intExpr(-3) <>  3 or
        -10 div intExpr(-3) <>  3 or
         10 div intExpr(-4) <> -2 or
          9 div intExpr(-4) <> -2 or
          8 div intExpr(-4) <> -2 or
          7 div intExpr(-4) <> -1 or
          6 div intExpr(-4) <> -1 or
          5 div intExpr(-4) <> -1 or
          4 div intExpr(-4) <> -1 or
          3 div intExpr(-4) <>  0 or
          2 div intExpr(-4) <>  0 or
          1 div intExpr(-4) <>  0 or
          0 div intExpr(-4) <>  0 or
         -1 div intExpr(-4) <>  0 or
         -2 div intExpr(-4) <>  0 or
         -3 div intExpr(-4) <>  0 or
         -4 div intExpr(-4) <>  1 or
         -5 div intExpr(-4) <>  1 or
         -6 div intExpr(-4) <>  1 or
         -7 div intExpr(-4) <>  1 or
         -8 div intExpr(-4) <>  2 or
         -9 div intExpr(-4) <>  2 or
        -10 div intExpr(-4) <>  2 or
         10 div intExpr(-5) <> -2 or
          9 div intExpr(-5) <> -1 or
          8 div intExpr(-5) <> -1 or
          7 div intExpr(-5) <> -1 or
          6 div intExpr(-5) <> -1 or
          5 div intExpr(-5) <> -1 or
          4 div intExpr(-5) <>  0 or
          3 div intExpr(-5) <>  0 or
          2 div intExpr(-5) <>  0 or
          1 div intExpr(-5) <>  0 or
          0 div intExpr(-5) <>  0 or
         -1 div intExpr(-5) <>  0 or
         -2 div intExpr(-5) <>  0 or
         -3 div intExpr(-5) <>  0 or
         -4 div intExpr(-5) <>  0 or
         -5 div intExpr(-5) <>  1 or
         -6 div intExpr(-5) <>  1 or
         -7 div intExpr(-5) <>  1 or
         -8 div intExpr(-5) <>  1 or
         -9 div intExpr(-5) <>  1 or
        -10 div intExpr(-5) <>  2 then
      writeln(" ***** div with a constant and an expression does not work correct.");
      okay := FALSE;
    end if;

    if  intExpr( 10) div intExpr( 5) <>  2 or
        intExpr(  9) div intExpr( 5) <>  1 or
        intExpr(  8) div intExpr( 5) <>  1 or
        intExpr(  7) div intExpr( 5) <>  1 or
        intExpr(  6) div intExpr( 5) <>  1 or
        intExpr(  5) div intExpr( 5) <>  1 or
        intExpr(  4) div intExpr( 5) <>  0 or
        intExpr(  3) div intExpr( 5) <>  0 or
        intExpr(  2) div intExpr( 5) <>  0 or
        intExpr(  1) div intExpr( 5) <>  0 or
        intExpr(  0) div intExpr( 5) <>  0 or
        intExpr( -1) div intExpr( 5) <>  0 or
        intExpr( -2) div intExpr( 5) <>  0 or
        intExpr( -3) div intExpr( 5) <>  0 or
        intExpr( -4) div intExpr( 5) <>  0 or
        intExpr( -5) div intExpr( 5) <> -1 or
        intExpr( -6) div intExpr( 5) <> -1 or
        intExpr( -7) div intExpr( 5) <> -1 or
        intExpr( -8) div intExpr( 5) <> -1 or
        intExpr( -9) div intExpr( 5) <> -1 or
        intExpr(-10) div intExpr( 5) <> -2 or
        intExpr( 10) div intExpr( 4) <>  2 or
        intExpr(  9) div intExpr( 4) <>  2 or
        intExpr(  8) div intExpr( 4) <>  2 or
        intExpr(  7) div intExpr( 4) <>  1 or
        intExpr(  6) div intExpr( 4) <>  1 or
        intExpr(  5) div intExpr( 4) <>  1 or
        intExpr(  4) div intExpr( 4) <>  1 or
        intExpr(  3) div intExpr( 4) <>  0 or
        intExpr(  2) div intExpr( 4) <>  0 or
        intExpr(  1) div intExpr( 4) <>  0 or
        intExpr(  0) div intExpr( 4) <>  0 or
        intExpr( -1) div intExpr( 4) <>  0 or
        intExpr( -2) div intExpr( 4) <>  0 or
        intExpr( -3) div intExpr( 4) <>  0 or
        intExpr( -4) div intExpr( 4) <> -1 or
        intExpr( -5) div intExpr( 4) <> -1 or
        intExpr( -6) div intExpr( 4) <> -1 or
        intExpr( -7) div intExpr( 4) <> -1 or
        intExpr( -8) div intExpr( 4) <> -2 or
        intExpr( -9) div intExpr( 4) <> -2 or
        intExpr(-10) div intExpr( 4) <> -2 or
        intExpr( 10) div intExpr( 3) <>  3 or
        intExpr(  9) div intExpr( 3) <>  3 or
        intExpr(  8) div intExpr( 3) <>  2 or
        intExpr(  7) div intExpr( 3) <>  2 or
        intExpr(  6) div intExpr( 3) <>  2 or
        intExpr(  5) div intExpr( 3) <>  1 or
        intExpr(  4) div intExpr( 3) <>  1 or
        intExpr(  3) div intExpr( 3) <>  1 or
        intExpr(  2) div intExpr( 3) <>  0 or
        intExpr(  1) div intExpr( 3) <>  0 or
        intExpr(  0) div intExpr( 3) <>  0 or
        intExpr( -1) div intExpr( 3) <>  0 or
        intExpr( -2) div intExpr( 3) <>  0 or
        intExpr( -3) div intExpr( 3) <> -1 or
        intExpr( -4) div intExpr( 3) <> -1 or
        intExpr( -5) div intExpr( 3) <> -1 or
        intExpr( -6) div intExpr( 3) <> -2 or
        intExpr( -7) div intExpr( 3) <> -2 or
        intExpr( -8) div intExpr( 3) <> -2 or
        intExpr( -9) div intExpr( 3) <> -3 or
        intExpr(-10) div intExpr( 3) <> -3 or
        intExpr( 10) div intExpr( 2) <>  5 or
        intExpr(  9) div intExpr( 2) <>  4 or
        intExpr(  8) div intExpr( 2) <>  4 or
        intExpr(  7) div intExpr( 2) <>  3 or
        intExpr(  6) div intExpr( 2) <>  3 or
        intExpr(  5) div intExpr( 2) <>  2 or
        intExpr(  4) div intExpr( 2) <>  2 or
        intExpr(  3) div intExpr( 2) <>  1 or
        intExpr(  2) div intExpr( 2) <>  1 or
        intExpr(  1) div intExpr( 2) <>  0 or
        intExpr(  0) div intExpr( 2) <>  0 or
        intExpr( -1) div intExpr( 2) <>  0 or
        intExpr( -2) div intExpr( 2) <> -1 or
        intExpr( -3) div intExpr( 2) <> -1 or
        intExpr( -4) div intExpr( 2) <> -2 or
        intExpr( -5) div intExpr( 2) <> -2 or
        intExpr( -6) div intExpr( 2) <> -3 or
        intExpr( -7) div intExpr( 2) <> -3 or
        intExpr( -8) div intExpr( 2) <> -4 or
        intExpr( -9) div intExpr( 2) <> -4 or
        intExpr(-10) div intExpr( 2) <> -5 or
        intExpr( 10) div intExpr( 1) <> 10 or
        intExpr(  9) div intExpr( 1) <>  9 or
        intExpr(  8) div intExpr( 1) <>  8 or
        intExpr(  7) div intExpr( 1) <>  7 or
        intExpr(  6) div intExpr( 1) <>  6 or
        intExpr(  5) div intExpr( 1) <>  5 or
        intExpr(  4) div intExpr( 1) <>  4 or
        intExpr(  3) div intExpr( 1) <>  3 or
        intExpr(  2) div intExpr( 1) <>  2 or
        intExpr(  1) div intExpr( 1) <>  1 or
        intExpr(  0) div intExpr( 1) <>  0 or
        intExpr( -1) div intExpr( 1) <> -1 or
        intExpr( -2) div intExpr( 1) <> -2 or
        intExpr( -3) div intExpr( 1) <> -3 or
        intExpr( -4) div intExpr( 1) <> -4 or
        intExpr( -5) div intExpr( 1) <> -5 or
        intExpr( -6) div intExpr( 1) <> -6 or
        intExpr( -7) div intExpr( 1) <> -7 or
        intExpr( -8) div intExpr( 1) <> -8 or
        intExpr( -9) div intExpr( 1) <> -9 or
        intExpr(-10) div intExpr( 1) <> -10 or
        intExpr( 10) div intExpr(-1) <> -10 or
        intExpr(  9) div intExpr(-1) <> -9 or
        intExpr(  8) div intExpr(-1) <> -8 or
        intExpr(  7) div intExpr(-1) <> -7 or
        intExpr(  6) div intExpr(-1) <> -6 or
        intExpr(  5) div intExpr(-1) <> -5 or
        intExpr(  4) div intExpr(-1) <> -4 or
        intExpr(  3) div intExpr(-1) <> -3 or
        intExpr(  2) div intExpr(-1) <> -2 or
        intExpr(  1) div intExpr(-1) <> -1 or
        intExpr(  0) div intExpr(-1) <>  0 or
        intExpr( -1) div intExpr(-1) <>  1 or
        intExpr( -2) div intExpr(-1) <>  2 or
        intExpr( -3) div intExpr(-1) <>  3 or
        intExpr( -4) div intExpr(-1) <>  4 or
        intExpr( -5) div intExpr(-1) <>  5 or
        intExpr( -6) div intExpr(-1) <>  6 or
        intExpr( -7) div intExpr(-1) <>  7 or
        intExpr( -8) div intExpr(-1) <>  8 or
        intExpr( -9) div intExpr(-1) <>  9 or
        intExpr(-10) div intExpr(-1) <> 10 or
        intExpr( 10) div intExpr(-2) <> -5 or
        intExpr(  9) div intExpr(-2) <> -4 or
        intExpr(  8) div intExpr(-2) <> -4 or
        intExpr(  7) div intExpr(-2) <> -3 or
        intExpr(  6) div intExpr(-2) <> -3 or
        intExpr(  5) div intExpr(-2) <> -2 or
        intExpr(  4) div intExpr(-2) <> -2 or
        intExpr(  3) div intExpr(-2) <> -1 or
        intExpr(  2) div intExpr(-2) <> -1 or
        intExpr(  1) div intExpr(-2) <>  0 or
        intExpr(  0) div intExpr(-2) <>  0 or
        intExpr( -1) div intExpr(-2) <>  0 or
        intExpr( -2) div intExpr(-2) <>  1 or
        intExpr( -3) div intExpr(-2) <>  1 or
        intExpr( -4) div intExpr(-2) <>  2 or
        intExpr( -5) div intExpr(-2) <>  2 or
        intExpr( -6) div intExpr(-2) <>  3 or
        intExpr( -7) div intExpr(-2) <>  3 or
        intExpr( -8) div intExpr(-2) <>  4 or
        intExpr( -9) div intExpr(-2) <>  4 or
        intExpr(-10) div intExpr(-2) <>  5 or
        intExpr( 10) div intExpr(-3) <> -3 or
        intExpr(  9) div intExpr(-3) <> -3 or
        intExpr(  8) div intExpr(-3) <> -2 or
        intExpr(  7) div intExpr(-3) <> -2 or
        intExpr(  6) div intExpr(-3) <> -2 or
        intExpr(  5) div intExpr(-3) <> -1 or
        intExpr(  4) div intExpr(-3) <> -1 or
        intExpr(  3) div intExpr(-3) <> -1 or
        intExpr(  2) div intExpr(-3) <>  0 or
        intExpr(  1) div intExpr(-3) <>  0 or
        intExpr(  0) div intExpr(-3) <>  0 or
        intExpr( -1) div intExpr(-3) <>  0 or
        intExpr( -2) div intExpr(-3) <>  0 or
        intExpr( -3) div intExpr(-3) <>  1 or
        intExpr( -4) div intExpr(-3) <>  1 or
        intExpr( -5) div intExpr(-3) <>  1 or
        intExpr( -6) div intExpr(-3) <>  2 or
        intExpr( -7) div intExpr(-3) <>  2 or
        intExpr( -8) div intExpr(-3) <>  2 or
        intExpr( -9) div intExpr(-3) <>  3 or
        intExpr(-10) div intExpr(-3) <>  3 or
        intExpr( 10) div intExpr(-4) <> -2 or
        intExpr(  9) div intExpr(-4) <> -2 or
        intExpr(  8) div intExpr(-4) <> -2 or
        intExpr(  7) div intExpr(-4) <> -1 or
        intExpr(  6) div intExpr(-4) <> -1 or
        intExpr(  5) div intExpr(-4) <> -1 or
        intExpr(  4) div intExpr(-4) <> -1 or
        intExpr(  3) div intExpr(-4) <>  0 or
        intExpr(  2) div intExpr(-4) <>  0 or
        intExpr(  1) div intExpr(-4) <>  0 or
        intExpr(  0) div intExpr(-4) <>  0 or
        intExpr( -1) div intExpr(-4) <>  0 or
        intExpr( -2) div intExpr(-4) <>  0 or
        intExpr( -3) div intExpr(-4) <>  0 or
        intExpr( -4) div intExpr(-4) <>  1 or
        intExpr( -5) div intExpr(-4) <>  1 or
        intExpr( -6) div intExpr(-4) <>  1 or
        intExpr( -7) div intExpr(-4) <>  1 or
        intExpr( -8) div intExpr(-4) <>  2 or
        intExpr( -9) div intExpr(-4) <>  2 or
        intExpr(-10) div intExpr(-4) <>  2 or
        intExpr( 10) div intExpr(-5) <> -2 or
        intExpr(  9) div intExpr(-5) <> -1 or
        intExpr(  8) div intExpr(-5) <> -1 or
        intExpr(  7) div intExpr(-5) <> -1 or
        intExpr(  6) div intExpr(-5) <> -1 or
        intExpr(  5) div intExpr(-5) <> -1 or
        intExpr(  4) div intExpr(-5) <>  0 or
        intExpr(  3) div intExpr(-5) <>  0 or
        intExpr(  2) div intExpr(-5) <>  0 or
        intExpr(  1) div intExpr(-5) <>  0 or
        intExpr(  0) div intExpr(-5) <>  0 or
        intExpr( -1) div intExpr(-5) <>  0 or
        intExpr( -2) div intExpr(-5) <>  0 or
        intExpr( -3) div intExpr(-5) <>  0 or
        intExpr( -4) div intExpr(-5) <>  0 or
        intExpr( -5) div intExpr(-5) <>  1 or
        intExpr( -6) div intExpr(-5) <>  1 or
        intExpr( -7) div intExpr(-5) <>  1 or
        intExpr( -8) div intExpr(-5) <>  1 or
        intExpr( -9) div intExpr(-5) <>  1 or
        intExpr(-10) div intExpr(-5) <>  2 then
      writeln(" ***** div with two expressions does not work correct.");
      okay := FALSE;
    end if;

    if  INT64_MIN div           INT64_MIN <>                    1 or
        INT64_MIN div         -8589934592 <>           1073741824 or
        INT64_MIN div         -4294967296 <>           2147483648 or
        INT64_MIN div         -2147483649 <>           4294967294 or
        INT64_MIN div           INT32_MIN <>           4294967296 or
        INT64_MIN div         -2147483648 <>           4294967296 or
        INT64_MIN div         -1073741824 <>           8589934592 or
        INT64_MIN div               -1025 <>     8998411743272952 or
        INT64_MIN div               -1024 <>     9007199254740992 or
        INT64_MIN div               -1023 <>     9016003946094600 or
        INT64_MIN div                  -2 <>  4611686018427387904 or
        INT64_MIN div           INT32_MAX <>          -4294967298 or
        INT64_MIN div          2147483648 <>          -4294967296 or
        INT64_MIN div          2147483649 <>          -4294967294 or
        INT64_MIN div          4294967296 <>          -2147483648 or
        INT64_MIN div          4294967297 <>          -2147483647 or
        INT64_MIN div     140737488355327 <>               -65536 or
        INT64_MIN div     140737488355328 <>               -65536 or
        INT64_MIN div     140737488355329 <>               -65535 or
        INT64_MIN div 4611686018427387903 <>                   -2 or
        INT64_MIN div 4611686018427387904 <>                   -2 or
        INT64_MIN div 4611686018427387905 <>                   -1 or
        INT64_MIN div           INT64_MAX <>                   -1 or
        INT64_MAX div           INT64_MIN <>                    0 or
        INT64_MAX div           INT32_MIN <>          -4294967295 or
        INT64_MAX div           INT32_MAX <>           4294967298 or
        INT64_MAX div          2147483648 <>           4294967295 or
        INT64_MAX div          2147483649 <>           4294967294 or
        INT64_MAX div          4294967295 <>           2147483648 or
        INT64_MAX div          4294967296 <>           2147483647 or
        INT64_MAX div     140737488355327 <>                65536 or
        INT64_MAX div     140737488355328 <>                65535 or
        INT64_MAX div     140737488355329 <>                65535 or
        INT64_MAX div 4611686018427387903 <>                    2 or
        INT64_MAX div 4611686018427387904 <>                    1 or
        INT64_MAX div 4611686018427387905 <>                    1 or
        INT64_MAX div           INT64_MAX <>                    1 or
        intExpr(INT64_MIN) div           INT64_MIN <>                    1 or
        intExpr(INT64_MIN) div         -8589934592 <>           1073741824 or
        intExpr(INT64_MIN) div         -4294967296 <>           2147483648 or
        intExpr(INT64_MIN) div         -2147483649 <>           4294967294 or
        intExpr(INT64_MIN) div           INT32_MIN <>           4294967296 or
        intExpr(INT64_MIN) div         -2147483648 <>           4294967296 or
        intExpr(INT64_MIN) div         -1073741824 <>           8589934592 or
        intExpr(INT64_MIN) div               -1025 <>     8998411743272952 or
        intExpr(INT64_MIN) div               -1024 <>     9007199254740992 or
        intExpr(INT64_MIN) div               -1023 <>     9016003946094600 or
        intExpr(INT64_MIN) div                  -2 <>  4611686018427387904 or
        intExpr(INT64_MIN) div           INT32_MAX <>          -4294967298 or
        intExpr(INT64_MIN) div          2147483648 <>          -4294967296 or
        intExpr(INT64_MIN) div          2147483649 <>          -4294967294 or
        intExpr(INT64_MIN) div          4294967296 <>          -2147483648 or
        intExpr(INT64_MIN) div          4294967297 <>          -2147483647 or
        intExpr(INT64_MIN) div     140737488355327 <>               -65536 or
        intExpr(INT64_MIN) div     140737488355328 <>               -65536 or
        intExpr(INT64_MIN) div     140737488355329 <>               -65535 or
        intExpr(INT64_MIN) div 4611686018427387903 <>                   -2 or
        intExpr(INT64_MIN) div 4611686018427387904 <>                   -2 or
        intExpr(INT64_MIN) div 4611686018427387905 <>                   -1 or
        intExpr(INT64_MIN) div           INT64_MAX <>                   -1 or
        intExpr(INT64_MAX) div           INT64_MIN <>                    0 or
        intExpr(INT64_MAX) div           INT32_MIN <>          -4294967295 or
        intExpr(INT64_MAX) div           INT32_MAX <>           4294967298 or
        intExpr(INT64_MAX) div          2147483648 <>           4294967295 or
        intExpr(INT64_MAX) div          2147483649 <>           4294967294 or
        intExpr(INT64_MAX) div          4294967295 <>           2147483648 or
        intExpr(INT64_MAX) div          4294967296 <>           2147483647 or
        intExpr(INT64_MAX) div     140737488355327 <>                65536 or
        intExpr(INT64_MAX) div     140737488355328 <>                65535 or
        intExpr(INT64_MAX) div     140737488355329 <>                65535 or
        intExpr(INT64_MAX) div 4611686018427387903 <>                    2 or
        intExpr(INT64_MAX) div 4611686018427387904 <>                    1 or
        intExpr(INT64_MAX) div 4611686018427387905 <>                    1 or
        intExpr(INT64_MAX) div           INT64_MAX <>                    1 or
        INT64_MIN div intExpr(          INT64_MIN) <>                    1 or
        INT64_MIN div intExpr(        -8589934592) <>           1073741824 or
        INT64_MIN div intExpr(        -4294967296) <>           2147483648 or
        INT64_MIN div intExpr(        -2147483649) <>           4294967294 or
        INT64_MIN div intExpr(          INT32_MIN) <>           4294967296 or
        INT64_MIN div intExpr(        -2147483648) <>           4294967296 or
        INT64_MIN div intExpr(        -1073741824) <>           8589934592 or
        INT64_MIN div intExpr(              -1025) <>     8998411743272952 or
        INT64_MIN div intExpr(              -1024) <>     9007199254740992 or
        INT64_MIN div intExpr(              -1023) <>     9016003946094600 or
        INT64_MIN div intExpr(                 -2) <>  4611686018427387904 or
        INT64_MIN div intExpr(          INT32_MAX) <>          -4294967298 or
        INT64_MIN div intExpr(         2147483648) <>          -4294967296 or
        INT64_MIN div intExpr(         2147483649) <>          -4294967294 or
        INT64_MIN div intExpr(         4294967296) <>          -2147483648 or
        INT64_MIN div intExpr(         4294967297) <>          -2147483647 or
        INT64_MIN div intExpr(    140737488355327) <>               -65536 or
        INT64_MIN div intExpr(    140737488355328) <>               -65536 or
        INT64_MIN div intExpr(    140737488355329) <>               -65535 or
        INT64_MIN div intExpr(4611686018427387903) <>                   -2 or
        INT64_MIN div intExpr(4611686018427387904) <>                   -2 or
        INT64_MIN div intExpr(4611686018427387905) <>                   -1 or
        INT64_MIN div intExpr(          INT64_MAX) <>                   -1 or
        INT64_MAX div intExpr(          INT64_MIN) <>                    0 or
        INT64_MAX div intExpr(          INT32_MIN) <>          -4294967295 or
        INT64_MAX div intExpr(          INT32_MAX) <>           4294967298 or
        INT64_MAX div intExpr(         2147483648) <>           4294967295 or
        INT64_MAX div intExpr(         2147483649) <>           4294967294 or
        INT64_MAX div intExpr(         4294967295) <>           2147483648 or
        INT64_MAX div intExpr(         4294967296) <>           2147483647 or
        INT64_MAX div intExpr(    140737488355327) <>                65536 or
        INT64_MAX div intExpr(    140737488355328) <>                65535 or
        INT64_MAX div intExpr(    140737488355329) <>                65535 or
        INT64_MAX div intExpr(4611686018427387903) <>                    2 or
        INT64_MAX div intExpr(4611686018427387904) <>                    1 or
        INT64_MAX div intExpr(4611686018427387905) <>                    1 or
        INT64_MAX div intExpr(          INT64_MAX) <>                    1 or
        intExpr(INT64_MIN) div intExpr(          INT64_MIN) <>                    1 or
        intExpr(INT64_MIN) div intExpr(        -8589934592) <>           1073741824 or
        intExpr(INT64_MIN) div intExpr(        -4294967296) <>           2147483648 or
        intExpr(INT64_MIN) div intExpr(        -2147483649) <>           4294967294 or
        intExpr(INT64_MIN) div intExpr(          INT32_MIN) <>           4294967296 or
        intExpr(INT64_MIN) div intExpr(        -2147483648) <>           4294967296 or
        intExpr(INT64_MIN) div intExpr(        -1073741824) <>           8589934592 or
        intExpr(INT64_MIN) div intExpr(              -1025) <>     8998411743272952 or
        intExpr(INT64_MIN) div intExpr(              -1024) <>     9007199254740992 or
        intExpr(INT64_MIN) div intExpr(              -1023) <>     9016003946094600 or
        intExpr(INT64_MIN) div intExpr(                 -2) <>  4611686018427387904 or
        intExpr(INT64_MIN) div intExpr(          INT32_MAX) <>          -4294967298 or
        intExpr(INT64_MIN) div intExpr(         2147483648) <>          -4294967296 or
        intExpr(INT64_MIN) div intExpr(         2147483649) <>          -4294967294 or
        intExpr(INT64_MIN) div intExpr(         4294967296) <>          -2147483648 or
        intExpr(INT64_MIN) div intExpr(         4294967297) <>          -2147483647 or
        intExpr(INT64_MIN) div intExpr(    140737488355327) <>               -65536 or
        intExpr(INT64_MIN) div intExpr(    140737488355328) <>               -65536 or
        intExpr(INT64_MIN) div intExpr(    140737488355329) <>               -65535 or
        intExpr(INT64_MIN) div intExpr(4611686018427387903) <>                   -2 or
        intExpr(INT64_MIN) div intExpr(4611686018427387904) <>                   -2 or
        intExpr(INT64_MIN) div intExpr(4611686018427387905) <>                   -1 or
        intExpr(INT64_MIN) div intExpr(          INT64_MAX) <>                   -1 or
        intExpr(INT64_MAX) div intExpr(          INT64_MIN) <>                    0 or
        intExpr(INT64_MAX) div intExpr(          INT32_MIN) <>          -4294967295 or
        intExpr(INT64_MAX) div intExpr(          INT32_MAX) <>           4294967298 or
        intExpr(INT64_MAX) div intExpr(         2147483648) <>           4294967295 or
        intExpr(INT64_MAX) div intExpr(         2147483649) <>           4294967294 or
        intExpr(INT64_MAX) div intExpr(         4294967295) <>           2147483648 or
        intExpr(INT64_MAX) div intExpr(         4294967296) <>           2147483647 or
        intExpr(INT64_MAX) div intExpr(    140737488355327) <>                65536 or
        intExpr(INT64_MAX) div intExpr(    140737488355328) <>                65535 or
        intExpr(INT64_MAX) div intExpr(    140737488355329) <>                65535 or
        intExpr(INT64_MAX) div intExpr(4611686018427387903) <>                    2 or
        intExpr(INT64_MAX) div intExpr(4611686018427387904) <>                    1 or
        intExpr(INT64_MAX) div intExpr(4611686018427387905) <>                    1 or
        intExpr(INT64_MAX) div intExpr(          INT64_MAX) <>                    1 then
      writeln(" ***** div with maximum values does not work correct.");
      okay := FALSE;
    end if;

    if  not raisesNumericError(          INT64_MIN  div         0 ) or
        not raisesNumericError(        -2147483648  div         0 ) or
        not raisesNumericError(                 -1  div         0 ) or
        not raisesNumericError(           minusOne  div         0 ) or
        not raisesNumericError(                  0  div         0 ) or
        not raisesNumericError(              zero2  div         0 ) or
        not raisesNumericError(                  1  div         0 ) or
        not raisesNumericError(                one  div         0 ) or
        not raisesNumericError(         2147483647  div         0 ) or
        not raisesNumericError(          INT64_MAX  div         0 ) or
        not raisesNumericError(intExpr(  INT64_MIN) div         0 ) or
        not raisesNumericError(intExpr(-2147483648) div         0 ) or
        not raisesNumericError(intExpr(         -1) div         0 ) or
        not raisesNumericError(intExpr(          0) div         0 ) or
        not raisesNumericError(intExpr(          1) div         0 ) or
        not raisesNumericError(intExpr( 2147483647) div         0 ) or
        not raisesNumericError(intExpr(  INT64_MAX) div         0 ) or
        not raisesNumericError(          INT64_MIN  div      zero ) or
        not raisesNumericError(        -2147483648  div      zero ) or
        not raisesNumericError(                 -1  div      zero ) or
        not raisesNumericError(           minusOne  div      zero ) or
        not raisesNumericError(                  0  div      zero ) or
        not raisesNumericError(               zero  div      zero ) or
        not raisesNumericError(              zero2  div      zero ) or
        not raisesNumericError(                  1  div      zero ) or
        not raisesNumericError(                one  div      zero ) or
        not raisesNumericError(         2147483647  div      zero ) or
        not raisesNumericError(          INT64_MAX  div      zero ) or
        not raisesNumericError(intExpr(  INT64_MIN) div      zero ) or
        not raisesNumericError(intExpr(-2147483648) div      zero ) or
        not raisesNumericError(intExpr(         -1) div      zero ) or
        not raisesNumericError(intExpr(          0) div      zero ) or
        not raisesNumericError(intExpr(          1) div      zero ) or
        not raisesNumericError(intExpr( 2147483647) div      zero ) or
        not raisesNumericError(intExpr(  INT64_MAX) div      zero ) or
        not raisesNumericError(          INT64_MIN  div intExpr(0)) or
        not raisesNumericError(        -2147483648  div intExpr(0)) or
        not raisesNumericError(                 -1  div intExpr(0)) or
        not raisesNumericError(           minusOne  div intExpr(0)) or
        not raisesNumericError(                  0  div intExpr(0)) or
        not raisesNumericError(              zero2  div intExpr(0)) or
        not raisesNumericError(                  1  div intExpr(0)) or
        not raisesNumericError(                one  div intExpr(0)) or
        not raisesNumericError(         2147483647  div intExpr(0)) or
        not raisesNumericError(          INT64_MAX  div intExpr(0)) or
        not raisesNumericError(intExpr(  INT64_MIN) div intExpr(0)) or
        not raisesNumericError(intExpr(-2147483648) div intExpr(0)) or
        not raisesNumericError(intExpr(         -1) div intExpr(0)) or
        not raisesNumericError(intExpr(          0) div intExpr(0)) or
        not raisesNumericError(intExpr(          1) div intExpr(0)) or
        not raisesNumericError(intExpr( 2147483647) div intExpr(0)) or
        not raisesNumericError(intExpr(  INT64_MAX) div intExpr(0)) then
      writeln(" ***** Division by zero with the div operator does not raise NUMERIC_ERROR.");
      okay := FALSE;
    end if;

    if okay then
      writeln("Div works correct for selected values.");
    else
      writeln(" ***** div does not work correct.");
    end if;
  end func;


const proc: check_rem is func
  local
    var boolean: okay is TRUE;
    var integer: zero is 0;
    var integer: zero2 is 0;
    var integer: one is 1;
    var integer: minusOne is -1;
  begin
    if   10 rem  5 <>  0 or
          9 rem  5 <>  4 or
          8 rem  5 <>  3 or
          7 rem  5 <>  2 or
          6 rem  5 <>  1 or
          5 rem  5 <>  0 or
          4 rem  5 <>  4 or
          3 rem  5 <>  3 or
          2 rem  5 <>  2 or
          1 rem  5 <>  1 or
          0 rem  5 <>  0 or
         -1 rem  5 <> -1 or
         -2 rem  5 <> -2 or
         -3 rem  5 <> -3 or
         -4 rem  5 <> -4 or
         -5 rem  5 <>  0 or
         -6 rem  5 <> -1 or
         -7 rem  5 <> -2 or
         -8 rem  5 <> -3 or
         -9 rem  5 <> -4 or
        -10 rem  5 <>  0 or
         10 rem  4 <>  2 or
          9 rem  4 <>  1 or
          8 rem  4 <>  0 or
          7 rem  4 <>  3 or
          6 rem  4 <>  2 or
          5 rem  4 <>  1 or
          4 rem  4 <>  0 or
          3 rem  4 <>  3 or
          2 rem  4 <>  2 or
          1 rem  4 <>  1 or
          0 rem  4 <>  0 or
         -1 rem  4 <> -1 or
         -2 rem  4 <> -2 or
         -3 rem  4 <> -3 or
         -4 rem  4 <>  0 or
         -5 rem  4 <> -1 or
         -6 rem  4 <> -2 or
         -7 rem  4 <> -3 or
         -8 rem  4 <>  0 or
         -9 rem  4 <> -1 or
        -10 rem  4 <> -2 or
         10 rem  3 <>  1 or
          9 rem  3 <>  0 or
          8 rem  3 <>  2 or
          7 rem  3 <>  1 or
          6 rem  3 <>  0 or
          5 rem  3 <>  2 or
          4 rem  3 <>  1 or
          3 rem  3 <>  0 or
          2 rem  3 <>  2 or
          1 rem  3 <>  1 or
          0 rem  3 <>  0 or
         -1 rem  3 <> -1 or
         -2 rem  3 <> -2 or
         -3 rem  3 <>  0 or
         -4 rem  3 <> -1 or
         -5 rem  3 <> -2 or
         -6 rem  3 <>  0 or
         -7 rem  3 <> -1 or
         -8 rem  3 <> -2 or
         -9 rem  3 <>  0 or
        -10 rem  3 <> -1 or
         10 rem  2 <>  0 or
          9 rem  2 <>  1 or
          8 rem  2 <>  0 or
          7 rem  2 <>  1 or
          6 rem  2 <>  0 or
          5 rem  2 <>  1 or
          4 rem  2 <>  0 or
          3 rem  2 <>  1 or
          2 rem  2 <>  0 or
          1 rem  2 <>  1 or
          0 rem  2 <>  0 or
         -1 rem  2 <> -1 or
         -2 rem  2 <>  0 or
         -3 rem  2 <> -1 or
         -4 rem  2 <>  0 or
         -5 rem  2 <> -1 or
         -6 rem  2 <>  0 or
         -7 rem  2 <> -1 or
         -8 rem  2 <>  0 or
         -9 rem  2 <> -1 or
        -10 rem  2 <>  0 or
         10 rem  1 <>  0 or
          9 rem  1 <>  0 or
          8 rem  1 <>  0 or
          7 rem  1 <>  0 or
          6 rem  1 <>  0 or
          5 rem  1 <>  0 or
          4 rem  1 <>  0 or
          3 rem  1 <>  0 or
          2 rem  1 <>  0 or
          1 rem  1 <>  0 or
          0 rem  1 <>  0 or
         -1 rem  1 <>  0 or
         -2 rem  1 <>  0 or
         -3 rem  1 <>  0 or
         -4 rem  1 <>  0 or
         -5 rem  1 <>  0 or
         -6 rem  1 <>  0 or
         -7 rem  1 <>  0 or
         -8 rem  1 <>  0 or
         -9 rem  1 <>  0 or
        -10 rem  1 <>  0 or
         10 rem -1 <>  0 or
          9 rem -1 <>  0 or
          8 rem -1 <>  0 or
          7 rem -1 <>  0 or
          6 rem -1 <>  0 or
          5 rem -1 <>  0 or
          4 rem -1 <>  0 or
          3 rem -1 <>  0 or
          2 rem -1 <>  0 or
          1 rem -1 <>  0 or
          0 rem -1 <>  0 or
         -1 rem -1 <>  0 or
         -2 rem -1 <>  0 or
         -3 rem -1 <>  0 or
         -4 rem -1 <>  0 or
         -5 rem -1 <>  0 or
         -6 rem -1 <>  0 or
         -7 rem -1 <>  0 or
         -8 rem -1 <>  0 or
         -9 rem -1 <>  0 or
        -10 rem -1 <>  0 or
         10 rem -2 <>  0 or
          9 rem -2 <>  1 or
          8 rem -2 <>  0 or
          7 rem -2 <>  1 or
          6 rem -2 <>  0 or
          5 rem -2 <>  1 or
          4 rem -2 <>  0 or
          3 rem -2 <>  1 or
          2 rem -2 <>  0 or
          1 rem -2 <>  1 or
          0 rem -2 <>  0 or
         -1 rem -2 <> -1 or
         -2 rem -2 <>  0 or
         -3 rem -2 <> -1 or
         -4 rem -2 <>  0 or
         -5 rem -2 <> -1 or
         -6 rem -2 <>  0 or
         -7 rem -2 <> -1 or
         -8 rem -2 <>  0 or
         -9 rem -2 <> -1 or
        -10 rem -2 <>  0 or
         10 rem -3 <>  1 or
          9 rem -3 <>  0 or
          8 rem -3 <>  2 or
          7 rem -3 <>  1 or
          6 rem -3 <>  0 or
          5 rem -3 <>  2 or
          4 rem -3 <>  1 or
          3 rem -3 <>  0 or
          2 rem -3 <>  2 or
          1 rem -3 <>  1 or
          0 rem -3 <>  0 or
         -1 rem -3 <> -1 or
         -2 rem -3 <> -2 or
         -3 rem -3 <>  0 or
         -4 rem -3 <> -1 or
         -5 rem -3 <> -2 or
         -6 rem -3 <>  0 or
         -7 rem -3 <> -1 or
         -8 rem -3 <> -2 or
         -9 rem -3 <>  0 or
        -10 rem -3 <> -1 or
         10 rem -4 <>  2 or
          9 rem -4 <>  1 or
          8 rem -4 <>  0 or
          7 rem -4 <>  3 or
          6 rem -4 <>  2 or
          5 rem -4 <>  1 or
          4 rem -4 <>  0 or
          3 rem -4 <>  3 or
          2 rem -4 <>  2 or
          1 rem -4 <>  1 or
          0 rem -4 <>  0 or
         -1 rem -4 <> -1 or
         -2 rem -4 <> -2 or
         -3 rem -4 <> -3 or
         -4 rem -4 <>  0 or
         -5 rem -4 <> -1 or
         -6 rem -4 <> -2 or
         -7 rem -4 <> -3 or
         -8 rem -4 <>  0 or
         -9 rem -4 <> -1 or
        -10 rem -4 <> -2 or
         10 rem -5 <>  0 or
          9 rem -5 <>  4 or
          8 rem -5 <>  3 or
          7 rem -5 <>  2 or
          6 rem -5 <>  1 or
          5 rem -5 <>  0 or
          4 rem -5 <>  4 or
          3 rem -5 <>  3 or
          2 rem -5 <>  2 or
          1 rem -5 <>  1 or
          0 rem -5 <>  0 or
         -1 rem -5 <> -1 or
         -2 rem -5 <> -2 or
         -3 rem -5 <> -3 or
         -4 rem -5 <> -4 or
         -5 rem -5 <>  0 or
         -6 rem -5 <> -1 or
         -7 rem -5 <> -2 or
         -8 rem -5 <> -3 or
         -9 rem -5 <> -4 or
        -10 rem -5 <>  0 then
      writeln(" ***** rem with two constants does not work correct.");
      okay := FALSE;
    end if;

    if  intExpr( 10) rem  5 <>  0 or
        intExpr(  9) rem  5 <>  4 or
        intExpr(  8) rem  5 <>  3 or
        intExpr(  7) rem  5 <>  2 or
        intExpr(  6) rem  5 <>  1 or
        intExpr(  5) rem  5 <>  0 or
        intExpr(  4) rem  5 <>  4 or
        intExpr(  3) rem  5 <>  3 or
        intExpr(  2) rem  5 <>  2 or
        intExpr(  1) rem  5 <>  1 or
        intExpr(  0) rem  5 <>  0 or
        intExpr( -1) rem  5 <> -1 or
        intExpr( -2) rem  5 <> -2 or
        intExpr( -3) rem  5 <> -3 or
        intExpr( -4) rem  5 <> -4 or
        intExpr( -5) rem  5 <>  0 or
        intExpr( -6) rem  5 <> -1 or
        intExpr( -7) rem  5 <> -2 or
        intExpr( -8) rem  5 <> -3 or
        intExpr( -9) rem  5 <> -4 or
        intExpr(-10) rem  5 <>  0 or
        intExpr( 10) rem  4 <>  2 or
        intExpr(  9) rem  4 <>  1 or
        intExpr(  8) rem  4 <>  0 or
        intExpr(  7) rem  4 <>  3 or
        intExpr(  6) rem  4 <>  2 or
        intExpr(  5) rem  4 <>  1 or
        intExpr(  4) rem  4 <>  0 or
        intExpr(  3) rem  4 <>  3 or
        intExpr(  2) rem  4 <>  2 or
        intExpr(  1) rem  4 <>  1 or
        intExpr(  0) rem  4 <>  0 or
        intExpr( -1) rem  4 <> -1 or
        intExpr( -2) rem  4 <> -2 or
        intExpr( -3) rem  4 <> -3 or
        intExpr( -4) rem  4 <>  0 or
        intExpr( -5) rem  4 <> -1 or
        intExpr( -6) rem  4 <> -2 or
        intExpr( -7) rem  4 <> -3 or
        intExpr( -8) rem  4 <>  0 or
        intExpr( -9) rem  4 <> -1 or
        intExpr(-10) rem  4 <> -2 or
        intExpr( 10) rem  3 <>  1 or
        intExpr(  9) rem  3 <>  0 or
        intExpr(  8) rem  3 <>  2 or
        intExpr(  7) rem  3 <>  1 or
        intExpr(  6) rem  3 <>  0 or
        intExpr(  5) rem  3 <>  2 or
        intExpr(  4) rem  3 <>  1 or
        intExpr(  3) rem  3 <>  0 or
        intExpr(  2) rem  3 <>  2 or
        intExpr(  1) rem  3 <>  1 or
        intExpr(  0) rem  3 <>  0 or
        intExpr( -1) rem  3 <> -1 or
        intExpr( -2) rem  3 <> -2 or
        intExpr( -3) rem  3 <>  0 or
        intExpr( -4) rem  3 <> -1 or
        intExpr( -5) rem  3 <> -2 or
        intExpr( -6) rem  3 <>  0 or
        intExpr( -7) rem  3 <> -1 or
        intExpr( -8) rem  3 <> -2 or
        intExpr( -9) rem  3 <>  0 or
        intExpr(-10) rem  3 <> -1 or
        intExpr( 10) rem  2 <>  0 or
        intExpr(  9) rem  2 <>  1 or
        intExpr(  8) rem  2 <>  0 or
        intExpr(  7) rem  2 <>  1 or
        intExpr(  6) rem  2 <>  0 or
        intExpr(  5) rem  2 <>  1 or
        intExpr(  4) rem  2 <>  0 or
        intExpr(  3) rem  2 <>  1 or
        intExpr(  2) rem  2 <>  0 or
        intExpr(  1) rem  2 <>  1 or
        intExpr(  0) rem  2 <>  0 or
        intExpr( -1) rem  2 <> -1 or
        intExpr( -2) rem  2 <>  0 or
        intExpr( -3) rem  2 <> -1 or
        intExpr( -4) rem  2 <>  0 or
        intExpr( -5) rem  2 <> -1 or
        intExpr( -6) rem  2 <>  0 or
        intExpr( -7) rem  2 <> -1 or
        intExpr( -8) rem  2 <>  0 or
        intExpr( -9) rem  2 <> -1 or
        intExpr(-10) rem  2 <>  0 or
        intExpr( 10) rem  1 <>  0 or
        intExpr(  9) rem  1 <>  0 or
        intExpr(  8) rem  1 <>  0 or
        intExpr(  7) rem  1 <>  0 or
        intExpr(  6) rem  1 <>  0 or
        intExpr(  5) rem  1 <>  0 or
        intExpr(  4) rem  1 <>  0 or
        intExpr(  3) rem  1 <>  0 or
        intExpr(  2) rem  1 <>  0 or
        intExpr(  1) rem  1 <>  0 or
        intExpr(  0) rem  1 <>  0 or
        intExpr( -1) rem  1 <>  0 or
        intExpr( -2) rem  1 <>  0 or
        intExpr( -3) rem  1 <>  0 or
        intExpr( -4) rem  1 <>  0 or
        intExpr( -5) rem  1 <>  0 or
        intExpr( -6) rem  1 <>  0 or
        intExpr( -7) rem  1 <>  0 or
        intExpr( -8) rem  1 <>  0 or
        intExpr( -9) rem  1 <>  0 or
        intExpr(-10) rem  1 <>  0 or
        intExpr( 10) rem -1 <>  0 or
        intExpr(  9) rem -1 <>  0 or
        intExpr(  8) rem -1 <>  0 or
        intExpr(  7) rem -1 <>  0 or
        intExpr(  6) rem -1 <>  0 or
        intExpr(  5) rem -1 <>  0 or
        intExpr(  4) rem -1 <>  0 or
        intExpr(  3) rem -1 <>  0 or
        intExpr(  2) rem -1 <>  0 or
        intExpr(  1) rem -1 <>  0 or
        intExpr(  0) rem -1 <>  0 or
        intExpr( -1) rem -1 <>  0 or
        intExpr( -2) rem -1 <>  0 or
        intExpr( -3) rem -1 <>  0 or
        intExpr( -4) rem -1 <>  0 or
        intExpr( -5) rem -1 <>  0 or
        intExpr( -6) rem -1 <>  0 or
        intExpr( -7) rem -1 <>  0 or
        intExpr( -8) rem -1 <>  0 or
        intExpr( -9) rem -1 <>  0 or
        intExpr(-10) rem -1 <>  0 or
        intExpr( 10) rem -2 <>  0 or
        intExpr(  9) rem -2 <>  1 or
        intExpr(  8) rem -2 <>  0 or
        intExpr(  7) rem -2 <>  1 or
        intExpr(  6) rem -2 <>  0 or
        intExpr(  5) rem -2 <>  1 or
        intExpr(  4) rem -2 <>  0 or
        intExpr(  3) rem -2 <>  1 or
        intExpr(  2) rem -2 <>  0 or
        intExpr(  1) rem -2 <>  1 or
        intExpr(  0) rem -2 <>  0 or
        intExpr( -1) rem -2 <> -1 or
        intExpr( -2) rem -2 <>  0 or
        intExpr( -3) rem -2 <> -1 or
        intExpr( -4) rem -2 <>  0 or
        intExpr( -5) rem -2 <> -1 or
        intExpr( -6) rem -2 <>  0 or
        intExpr( -7) rem -2 <> -1 or
        intExpr( -8) rem -2 <>  0 or
        intExpr( -9) rem -2 <> -1 or
        intExpr(-10) rem -2 <>  0 or
        intExpr( 10) rem -3 <>  1 or
        intExpr(  9) rem -3 <>  0 or
        intExpr(  8) rem -3 <>  2 or
        intExpr(  7) rem -3 <>  1 or
        intExpr(  6) rem -3 <>  0 or
        intExpr(  5) rem -3 <>  2 or
        intExpr(  4) rem -3 <>  1 or
        intExpr(  3) rem -3 <>  0 or
        intExpr(  2) rem -3 <>  2 or
        intExpr(  1) rem -3 <>  1 or
        intExpr(  0) rem -3 <>  0 or
        intExpr( -1) rem -3 <> -1 or
        intExpr( -2) rem -3 <> -2 or
        intExpr( -3) rem -3 <>  0 or
        intExpr( -4) rem -3 <> -1 or
        intExpr( -5) rem -3 <> -2 or
        intExpr( -6) rem -3 <>  0 or
        intExpr( -7) rem -3 <> -1 or
        intExpr( -8) rem -3 <> -2 or
        intExpr( -9) rem -3 <>  0 or
        intExpr(-10) rem -3 <> -1 or
        intExpr( 10) rem -4 <>  2 or
        intExpr(  9) rem -4 <>  1 or
        intExpr(  8) rem -4 <>  0 or
        intExpr(  7) rem -4 <>  3 or
        intExpr(  6) rem -4 <>  2 or
        intExpr(  5) rem -4 <>  1 or
        intExpr(  4) rem -4 <>  0 or
        intExpr(  3) rem -4 <>  3 or
        intExpr(  2) rem -4 <>  2 or
        intExpr(  1) rem -4 <>  1 or
        intExpr(  0) rem -4 <>  0 or
        intExpr( -1) rem -4 <> -1 or
        intExpr( -2) rem -4 <> -2 or
        intExpr( -3) rem -4 <> -3 or
        intExpr( -4) rem -4 <>  0 or
        intExpr( -5) rem -4 <> -1 or
        intExpr( -6) rem -4 <> -2 or
        intExpr( -7) rem -4 <> -3 or
        intExpr( -8) rem -4 <>  0 or
        intExpr( -9) rem -4 <> -1 or
        intExpr(-10) rem -4 <> -2 or
        intExpr( 10) rem -5 <>  0 or
        intExpr(  9) rem -5 <>  4 or
        intExpr(  8) rem -5 <>  3 or
        intExpr(  7) rem -5 <>  2 or
        intExpr(  6) rem -5 <>  1 or
        intExpr(  5) rem -5 <>  0 or
        intExpr(  4) rem -5 <>  4 or
        intExpr(  3) rem -5 <>  3 or
        intExpr(  2) rem -5 <>  2 or
        intExpr(  1) rem -5 <>  1 or
        intExpr(  0) rem -5 <>  0 or
        intExpr( -1) rem -5 <> -1 or
        intExpr( -2) rem -5 <> -2 or
        intExpr( -3) rem -5 <> -3 or
        intExpr( -4) rem -5 <> -4 or
        intExpr( -5) rem -5 <>  0 or
        intExpr( -6) rem -5 <> -1 or
        intExpr( -7) rem -5 <> -2 or
        intExpr( -8) rem -5 <> -3 or
        intExpr( -9) rem -5 <> -4 or
        intExpr(-10) rem -5 <>  0 then
      writeln(" ***** rem with an expression and a constant does not work correct.");
      okay := FALSE;
    end if;

    if   10 rem intExpr( 5) <>  0 or
          9 rem intExpr( 5) <>  4 or
          8 rem intExpr( 5) <>  3 or
          7 rem intExpr( 5) <>  2 or
          6 rem intExpr( 5) <>  1 or
          5 rem intExpr( 5) <>  0 or
          4 rem intExpr( 5) <>  4 or
          3 rem intExpr( 5) <>  3 or
          2 rem intExpr( 5) <>  2 or
          1 rem intExpr( 5) <>  1 or
          0 rem intExpr( 5) <>  0 or
         -1 rem intExpr( 5) <> -1 or
         -2 rem intExpr( 5) <> -2 or
         -3 rem intExpr( 5) <> -3 or
         -4 rem intExpr( 5) <> -4 or
         -5 rem intExpr( 5) <>  0 or
         -6 rem intExpr( 5) <> -1 or
         -7 rem intExpr( 5) <> -2 or
         -8 rem intExpr( 5) <> -3 or
         -9 rem intExpr( 5) <> -4 or
        -10 rem intExpr( 5) <>  0 or
         10 rem intExpr( 4) <>  2 or
          9 rem intExpr( 4) <>  1 or
          8 rem intExpr( 4) <>  0 or
          7 rem intExpr( 4) <>  3 or
          6 rem intExpr( 4) <>  2 or
          5 rem intExpr( 4) <>  1 or
          4 rem intExpr( 4) <>  0 or
          3 rem intExpr( 4) <>  3 or
          2 rem intExpr( 4) <>  2 or
          1 rem intExpr( 4) <>  1 or
          0 rem intExpr( 4) <>  0 or
         -1 rem intExpr( 4) <> -1 or
         -2 rem intExpr( 4) <> -2 or
         -3 rem intExpr( 4) <> -3 or
         -4 rem intExpr( 4) <>  0 or
         -5 rem intExpr( 4) <> -1 or
         -6 rem intExpr( 4) <> -2 or
         -7 rem intExpr( 4) <> -3 or
         -8 rem intExpr( 4) <>  0 or
         -9 rem intExpr( 4) <> -1 or
        -10 rem intExpr( 4) <> -2 or
         10 rem intExpr( 3) <>  1 or
          9 rem intExpr( 3) <>  0 or
          8 rem intExpr( 3) <>  2 or
          7 rem intExpr( 3) <>  1 or
          6 rem intExpr( 3) <>  0 or
          5 rem intExpr( 3) <>  2 or
          4 rem intExpr( 3) <>  1 or
          3 rem intExpr( 3) <>  0 or
          2 rem intExpr( 3) <>  2 or
          1 rem intExpr( 3) <>  1 or
          0 rem intExpr( 3) <>  0 or
         -1 rem intExpr( 3) <> -1 or
         -2 rem intExpr( 3) <> -2 or
         -3 rem intExpr( 3) <>  0 or
         -4 rem intExpr( 3) <> -1 or
         -5 rem intExpr( 3) <> -2 or
         -6 rem intExpr( 3) <>  0 or
         -7 rem intExpr( 3) <> -1 or
         -8 rem intExpr( 3) <> -2 or
         -9 rem intExpr( 3) <>  0 or
        -10 rem intExpr( 3) <> -1 or
         10 rem intExpr( 2) <>  0 or
          9 rem intExpr( 2) <>  1 or
          8 rem intExpr( 2) <>  0 or
          7 rem intExpr( 2) <>  1 or
          6 rem intExpr( 2) <>  0 or
          5 rem intExpr( 2) <>  1 or
          4 rem intExpr( 2) <>  0 or
          3 rem intExpr( 2) <>  1 or
          2 rem intExpr( 2) <>  0 or
          1 rem intExpr( 2) <>  1 or
          0 rem intExpr( 2) <>  0 or
         -1 rem intExpr( 2) <> -1 or
         -2 rem intExpr( 2) <>  0 or
         -3 rem intExpr( 2) <> -1 or
         -4 rem intExpr( 2) <>  0 or
         -5 rem intExpr( 2) <> -1 or
         -6 rem intExpr( 2) <>  0 or
         -7 rem intExpr( 2) <> -1 or
         -8 rem intExpr( 2) <>  0 or
         -9 rem intExpr( 2) <> -1 or
        -10 rem intExpr( 2) <>  0 or
         10 rem intExpr( 1) <>  0 or
          9 rem intExpr( 1) <>  0 or
          8 rem intExpr( 1) <>  0 or
          7 rem intExpr( 1) <>  0 or
          6 rem intExpr( 1) <>  0 or
          5 rem intExpr( 1) <>  0 or
          4 rem intExpr( 1) <>  0 or
          3 rem intExpr( 1) <>  0 or
          2 rem intExpr( 1) <>  0 or
          1 rem intExpr( 1) <>  0 or
          0 rem intExpr( 1) <>  0 or
         -1 rem intExpr( 1) <>  0 or
         -2 rem intExpr( 1) <>  0 or
         -3 rem intExpr( 1) <>  0 or
         -4 rem intExpr( 1) <>  0 or
         -5 rem intExpr( 1) <>  0 or
         -6 rem intExpr( 1) <>  0 or
         -7 rem intExpr( 1) <>  0 or
         -8 rem intExpr( 1) <>  0 or
         -9 rem intExpr( 1) <>  0 or
        -10 rem intExpr( 1) <>  0 or
         10 rem intExpr(-1) <>  0 or
          9 rem intExpr(-1) <>  0 or
          8 rem intExpr(-1) <>  0 or
          7 rem intExpr(-1) <>  0 or
          6 rem intExpr(-1) <>  0 or
          5 rem intExpr(-1) <>  0 or
          4 rem intExpr(-1) <>  0 or
          3 rem intExpr(-1) <>  0 or
          2 rem intExpr(-1) <>  0 or
          1 rem intExpr(-1) <>  0 or
          0 rem intExpr(-1) <>  0 or
         -1 rem intExpr(-1) <>  0 or
         -2 rem intExpr(-1) <>  0 or
         -3 rem intExpr(-1) <>  0 or
         -4 rem intExpr(-1) <>  0 or
         -5 rem intExpr(-1) <>  0 or
         -6 rem intExpr(-1) <>  0 or
         -7 rem intExpr(-1) <>  0 or
         -8 rem intExpr(-1) <>  0 or
         -9 rem intExpr(-1) <>  0 or
        -10 rem intExpr(-1) <>  0 or
         10 rem intExpr(-2) <>  0 or
          9 rem intExpr(-2) <>  1 or
          8 rem intExpr(-2) <>  0 or
          7 rem intExpr(-2) <>  1 or
          6 rem intExpr(-2) <>  0 or
          5 rem intExpr(-2) <>  1 or
          4 rem intExpr(-2) <>  0 or
          3 rem intExpr(-2) <>  1 or
          2 rem intExpr(-2) <>  0 or
          1 rem intExpr(-2) <>  1 or
          0 rem intExpr(-2) <>  0 or
         -1 rem intExpr(-2) <> -1 or
         -2 rem intExpr(-2) <>  0 or
         -3 rem intExpr(-2) <> -1 or
         -4 rem intExpr(-2) <>  0 or
         -5 rem intExpr(-2) <> -1 or
         -6 rem intExpr(-2) <>  0 or
         -7 rem intExpr(-2) <> -1 or
         -8 rem intExpr(-2) <>  0 or
         -9 rem intExpr(-2) <> -1 or
        -10 rem intExpr(-2) <>  0 or
         10 rem intExpr(-3) <>  1 or
          9 rem intExpr(-3) <>  0 or
          8 rem intExpr(-3) <>  2 or
          7 rem intExpr(-3) <>  1 or
          6 rem intExpr(-3) <>  0 or
          5 rem intExpr(-3) <>  2 or
          4 rem intExpr(-3) <>  1 or
          3 rem intExpr(-3) <>  0 or
          2 rem intExpr(-3) <>  2 or
          1 rem intExpr(-3) <>  1 or
          0 rem intExpr(-3) <>  0 or
         -1 rem intExpr(-3) <> -1 or
         -2 rem intExpr(-3) <> -2 or
         -3 rem intExpr(-3) <>  0 or
         -4 rem intExpr(-3) <> -1 or
         -5 rem intExpr(-3) <> -2 or
         -6 rem intExpr(-3) <>  0 or
         -7 rem intExpr(-3) <> -1 or
         -8 rem intExpr(-3) <> -2 or
         -9 rem intExpr(-3) <>  0 or
        -10 rem intExpr(-3) <> -1 or
         10 rem intExpr(-4) <>  2 or
          9 rem intExpr(-4) <>  1 or
          8 rem intExpr(-4) <>  0 or
          7 rem intExpr(-4) <>  3 or
          6 rem intExpr(-4) <>  2 or
          5 rem intExpr(-4) <>  1 or
          4 rem intExpr(-4) <>  0 or
          3 rem intExpr(-4) <>  3 or
          2 rem intExpr(-4) <>  2 or
          1 rem intExpr(-4) <>  1 or
          0 rem intExpr(-4) <>  0 or
         -1 rem intExpr(-4) <> -1 or
         -2 rem intExpr(-4) <> -2 or
         -3 rem intExpr(-4) <> -3 or
         -4 rem intExpr(-4) <>  0 or
         -5 rem intExpr(-4) <> -1 or
         -6 rem intExpr(-4) <> -2 or
         -7 rem intExpr(-4) <> -3 or
         -8 rem intExpr(-4) <>  0 or
         -9 rem intExpr(-4) <> -1 or
        -10 rem intExpr(-4) <> -2 or
         10 rem intExpr(-5) <>  0 or
          9 rem intExpr(-5) <>  4 or
          8 rem intExpr(-5) <>  3 or
          7 rem intExpr(-5) <>  2 or
          6 rem intExpr(-5) <>  1 or
          5 rem intExpr(-5) <>  0 or
          4 rem intExpr(-5) <>  4 or
          3 rem intExpr(-5) <>  3 or
          2 rem intExpr(-5) <>  2 or
          1 rem intExpr(-5) <>  1 or
          0 rem intExpr(-5) <>  0 or
         -1 rem intExpr(-5) <> -1 or
         -2 rem intExpr(-5) <> -2 or
         -3 rem intExpr(-5) <> -3 or
         -4 rem intExpr(-5) <> -4 or
         -5 rem intExpr(-5) <>  0 or
         -6 rem intExpr(-5) <> -1 or
         -7 rem intExpr(-5) <> -2 or
         -8 rem intExpr(-5) <> -3 or
         -9 rem intExpr(-5) <> -4 or
        -10 rem intExpr(-5) <>  0 then
      writeln(" ***** rem with a constant and an expression does not work correct.");
      okay := FALSE;
    end if;

    if  intExpr( 10) rem intExpr( 5) <>  0 or
        intExpr(  9) rem intExpr( 5) <>  4 or
        intExpr(  8) rem intExpr( 5) <>  3 or
        intExpr(  7) rem intExpr( 5) <>  2 or
        intExpr(  6) rem intExpr( 5) <>  1 or
        intExpr(  5) rem intExpr( 5) <>  0 or
        intExpr(  4) rem intExpr( 5) <>  4 or
        intExpr(  3) rem intExpr( 5) <>  3 or
        intExpr(  2) rem intExpr( 5) <>  2 or
        intExpr(  1) rem intExpr( 5) <>  1 or
        intExpr(  0) rem intExpr( 5) <>  0 or
        intExpr( -1) rem intExpr( 5) <> -1 or
        intExpr( -2) rem intExpr( 5) <> -2 or
        intExpr( -3) rem intExpr( 5) <> -3 or
        intExpr( -4) rem intExpr( 5) <> -4 or
        intExpr( -5) rem intExpr( 5) <>  0 or
        intExpr( -6) rem intExpr( 5) <> -1 or
        intExpr( -7) rem intExpr( 5) <> -2 or
        intExpr( -8) rem intExpr( 5) <> -3 or
        intExpr( -9) rem intExpr( 5) <> -4 or
        intExpr(-10) rem intExpr( 5) <>  0 or
        intExpr( 10) rem intExpr( 4) <>  2 or
        intExpr(  9) rem intExpr( 4) <>  1 or
        intExpr(  8) rem intExpr( 4) <>  0 or
        intExpr(  7) rem intExpr( 4) <>  3 or
        intExpr(  6) rem intExpr( 4) <>  2 or
        intExpr(  5) rem intExpr( 4) <>  1 or
        intExpr(  4) rem intExpr( 4) <>  0 or
        intExpr(  3) rem intExpr( 4) <>  3 or
        intExpr(  2) rem intExpr( 4) <>  2 or
        intExpr(  1) rem intExpr( 4) <>  1 or
        intExpr(  0) rem intExpr( 4) <>  0 or
        intExpr( -1) rem intExpr( 4) <> -1 or
        intExpr( -2) rem intExpr( 4) <> -2 or
        intExpr( -3) rem intExpr( 4) <> -3 or
        intExpr( -4) rem intExpr( 4) <>  0 or
        intExpr( -5) rem intExpr( 4) <> -1 or
        intExpr( -6) rem intExpr( 4) <> -2 or
        intExpr( -7) rem intExpr( 4) <> -3 or
        intExpr( -8) rem intExpr( 4) <>  0 or
        intExpr( -9) rem intExpr( 4) <> -1 or
        intExpr(-10) rem intExpr( 4) <> -2 or
        intExpr( 10) rem intExpr( 3) <>  1 or
        intExpr(  9) rem intExpr( 3) <>  0 or
        intExpr(  8) rem intExpr( 3) <>  2 or
        intExpr(  7) rem intExpr( 3) <>  1 or
        intExpr(  6) rem intExpr( 3) <>  0 or
        intExpr(  5) rem intExpr( 3) <>  2 or
        intExpr(  4) rem intExpr( 3) <>  1 or
        intExpr(  3) rem intExpr( 3) <>  0 or
        intExpr(  2) rem intExpr( 3) <>  2 or
        intExpr(  1) rem intExpr( 3) <>  1 or
        intExpr(  0) rem intExpr( 3) <>  0 or
        intExpr( -1) rem intExpr( 3) <> -1 or
        intExpr( -2) rem intExpr( 3) <> -2 or
        intExpr( -3) rem intExpr( 3) <>  0 or
        intExpr( -4) rem intExpr( 3) <> -1 or
        intExpr( -5) rem intExpr( 3) <> -2 or
        intExpr( -6) rem intExpr( 3) <>  0 or
        intExpr( -7) rem intExpr( 3) <> -1 or
        intExpr( -8) rem intExpr( 3) <> -2 or
        intExpr( -9) rem intExpr( 3) <>  0 or
        intExpr(-10) rem intExpr( 3) <> -1 or
        intExpr( 10) rem intExpr( 2) <>  0 or
        intExpr(  9) rem intExpr( 2) <>  1 or
        intExpr(  8) rem intExpr( 2) <>  0 or
        intExpr(  7) rem intExpr( 2) <>  1 or
        intExpr(  6) rem intExpr( 2) <>  0 or
        intExpr(  5) rem intExpr( 2) <>  1 or
        intExpr(  4) rem intExpr( 2) <>  0 or
        intExpr(  3) rem intExpr( 2) <>  1 or
        intExpr(  2) rem intExpr( 2) <>  0 or
        intExpr(  1) rem intExpr( 2) <>  1 or
        intExpr(  0) rem intExpr( 2) <>  0 or
        intExpr( -1) rem intExpr( 2) <> -1 or
        intExpr( -2) rem intExpr( 2) <>  0 or
        intExpr( -3) rem intExpr( 2) <> -1 or
        intExpr( -4) rem intExpr( 2) <>  0 or
        intExpr( -5) rem intExpr( 2) <> -1 or
        intExpr( -6) rem intExpr( 2) <>  0 or
        intExpr( -7) rem intExpr( 2) <> -1 or
        intExpr( -8) rem intExpr( 2) <>  0 or
        intExpr( -9) rem intExpr( 2) <> -1 or
        intExpr(-10) rem intExpr( 2) <>  0 or
        intExpr( 10) rem intExpr( 1) <>  0 or
        intExpr(  9) rem intExpr( 1) <>  0 or
        intExpr(  8) rem intExpr( 1) <>  0 or
        intExpr(  7) rem intExpr( 1) <>  0 or
        intExpr(  6) rem intExpr( 1) <>  0 or
        intExpr(  5) rem intExpr( 1) <>  0 or
        intExpr(  4) rem intExpr( 1) <>  0 or
        intExpr(  3) rem intExpr( 1) <>  0 or
        intExpr(  2) rem intExpr( 1) <>  0 or
        intExpr(  1) rem intExpr( 1) <>  0 or
        intExpr(  0) rem intExpr( 1) <>  0 or
        intExpr( -1) rem intExpr( 1) <>  0 or
        intExpr( -2) rem intExpr( 1) <>  0 or
        intExpr( -3) rem intExpr( 1) <>  0 or
        intExpr( -4) rem intExpr( 1) <>  0 or
        intExpr( -5) rem intExpr( 1) <>  0 or
        intExpr( -6) rem intExpr( 1) <>  0 or
        intExpr( -7) rem intExpr( 1) <>  0 or
        intExpr( -8) rem intExpr( 1) <>  0 or
        intExpr( -9) rem intExpr( 1) <>  0 or
        intExpr(-10) rem intExpr( 1) <>  0 or
        intExpr( 10) rem intExpr(-1) <>  0 or
        intExpr(  9) rem intExpr(-1) <>  0 or
        intExpr(  8) rem intExpr(-1) <>  0 or
        intExpr(  7) rem intExpr(-1) <>  0 or
        intExpr(  6) rem intExpr(-1) <>  0 or
        intExpr(  5) rem intExpr(-1) <>  0 or
        intExpr(  4) rem intExpr(-1) <>  0 or
        intExpr(  3) rem intExpr(-1) <>  0 or
        intExpr(  2) rem intExpr(-1) <>  0 or
        intExpr(  1) rem intExpr(-1) <>  0 or
        intExpr(  0) rem intExpr(-1) <>  0 or
        intExpr( -1) rem intExpr(-1) <>  0 or
        intExpr( -2) rem intExpr(-1) <>  0 or
        intExpr( -3) rem intExpr(-1) <>  0 or
        intExpr( -4) rem intExpr(-1) <>  0 or
        intExpr( -5) rem intExpr(-1) <>  0 or
        intExpr( -6) rem intExpr(-1) <>  0 or
        intExpr( -7) rem intExpr(-1) <>  0 or
        intExpr( -8) rem intExpr(-1) <>  0 or
        intExpr( -9) rem intExpr(-1) <>  0 or
        intExpr(-10) rem intExpr(-1) <>  0 or
        intExpr( 10) rem intExpr(-2) <>  0 or
        intExpr(  9) rem intExpr(-2) <>  1 or
        intExpr(  8) rem intExpr(-2) <>  0 or
        intExpr(  7) rem intExpr(-2) <>  1 or
        intExpr(  6) rem intExpr(-2) <>  0 or
        intExpr(  5) rem intExpr(-2) <>  1 or
        intExpr(  4) rem intExpr(-2) <>  0 or
        intExpr(  3) rem intExpr(-2) <>  1 or
        intExpr(  2) rem intExpr(-2) <>  0 or
        intExpr(  1) rem intExpr(-2) <>  1 or
        intExpr(  0) rem intExpr(-2) <>  0 or
        intExpr( -1) rem intExpr(-2) <> -1 or
        intExpr( -2) rem intExpr(-2) <>  0 or
        intExpr( -3) rem intExpr(-2) <> -1 or
        intExpr( -4) rem intExpr(-2) <>  0 or
        intExpr( -5) rem intExpr(-2) <> -1 or
        intExpr( -6) rem intExpr(-2) <>  0 or
        intExpr( -7) rem intExpr(-2) <> -1 or
        intExpr( -8) rem intExpr(-2) <>  0 or
        intExpr( -9) rem intExpr(-2) <> -1 or
        intExpr(-10) rem intExpr(-2) <>  0 or
        intExpr( 10) rem intExpr(-3) <>  1 or
        intExpr(  9) rem intExpr(-3) <>  0 or
        intExpr(  8) rem intExpr(-3) <>  2 or
        intExpr(  7) rem intExpr(-3) <>  1 or
        intExpr(  6) rem intExpr(-3) <>  0 or
        intExpr(  5) rem intExpr(-3) <>  2 or
        intExpr(  4) rem intExpr(-3) <>  1 or
        intExpr(  3) rem intExpr(-3) <>  0 or
        intExpr(  2) rem intExpr(-3) <>  2 or
        intExpr(  1) rem intExpr(-3) <>  1 or
        intExpr(  0) rem intExpr(-3) <>  0 or
        intExpr( -1) rem intExpr(-3) <> -1 or
        intExpr( -2) rem intExpr(-3) <> -2 or
        intExpr( -3) rem intExpr(-3) <>  0 or
        intExpr( -4) rem intExpr(-3) <> -1 or
        intExpr( -5) rem intExpr(-3) <> -2 or
        intExpr( -6) rem intExpr(-3) <>  0 or
        intExpr( -7) rem intExpr(-3) <> -1 or
        intExpr( -8) rem intExpr(-3) <> -2 or
        intExpr( -9) rem intExpr(-3) <>  0 or
        intExpr(-10) rem intExpr(-3) <> -1 or
        intExpr( 10) rem intExpr(-4) <>  2 or
        intExpr(  9) rem intExpr(-4) <>  1 or
        intExpr(  8) rem intExpr(-4) <>  0 or
        intExpr(  7) rem intExpr(-4) <>  3 or
        intExpr(  6) rem intExpr(-4) <>  2 or
        intExpr(  5) rem intExpr(-4) <>  1 or
        intExpr(  4) rem intExpr(-4) <>  0 or
        intExpr(  3) rem intExpr(-4) <>  3 or
        intExpr(  2) rem intExpr(-4) <>  2 or
        intExpr(  1) rem intExpr(-4) <>  1 or
        intExpr(  0) rem intExpr(-4) <>  0 or
        intExpr( -1) rem intExpr(-4) <> -1 or
        intExpr( -2) rem intExpr(-4) <> -2 or
        intExpr( -3) rem intExpr(-4) <> -3 or
        intExpr( -4) rem intExpr(-4) <>  0 or
        intExpr( -5) rem intExpr(-4) <> -1 or
        intExpr( -6) rem intExpr(-4) <> -2 or
        intExpr( -7) rem intExpr(-4) <> -3 or
        intExpr( -8) rem intExpr(-4) <>  0 or
        intExpr( -9) rem intExpr(-4) <> -1 or
        intExpr(-10) rem intExpr(-4) <> -2 or
        intExpr( 10) rem intExpr(-5) <>  0 or
        intExpr(  9) rem intExpr(-5) <>  4 or
        intExpr(  8) rem intExpr(-5) <>  3 or
        intExpr(  7) rem intExpr(-5) <>  2 or
        intExpr(  6) rem intExpr(-5) <>  1 or
        intExpr(  5) rem intExpr(-5) <>  0 or
        intExpr(  4) rem intExpr(-5) <>  4 or
        intExpr(  3) rem intExpr(-5) <>  3 or
        intExpr(  2) rem intExpr(-5) <>  2 or
        intExpr(  1) rem intExpr(-5) <>  1 or
        intExpr(  0) rem intExpr(-5) <>  0 or
        intExpr( -1) rem intExpr(-5) <> -1 or
        intExpr( -2) rem intExpr(-5) <> -2 or
        intExpr( -3) rem intExpr(-5) <> -3 or
        intExpr( -4) rem intExpr(-5) <> -4 or
        intExpr( -5) rem intExpr(-5) <>  0 or
        intExpr( -6) rem intExpr(-5) <> -1 or
        intExpr( -7) rem intExpr(-5) <> -2 or
        intExpr( -8) rem intExpr(-5) <> -3 or
        intExpr( -9) rem intExpr(-5) <> -4 or
        intExpr(-10) rem intExpr(-5) <>  0 then
      writeln(" ***** rem with two expressions does not work correct.");
      okay := FALSE;
    end if;

    if  INT64_MIN rem           INT64_MIN <>                    0 or
        INT64_MIN rem         -8589934592 <>                    0 or
        INT64_MIN rem         -4294967296 <>                    0 or
        INT64_MIN rem         -2147483649 <>                   -2 or
        INT64_MIN rem           INT32_MIN <>                    0 or
        INT64_MIN rem         -2147483648 <>                    0 or
        INT64_MIN rem         -1073741824 <>                    0 or
        INT64_MIN rem               -1025 <>                   -8 or
        INT64_MIN rem               -1024 <>                    0 or
        INT64_MIN rem               -1023 <>                   -8 or
        INT64_MIN rem                  -2 <>                    0 or
        INT64_MIN rem           INT32_MAX <>                   -2 or
        INT64_MIN rem          2147483648 <>                    0 or
        INT64_MIN rem          2147483649 <>                   -2 or
        INT64_MIN rem          4294967296 <>                    0 or
        INT64_MIN rem          4294967297 <>          -2147483649 or
        INT64_MIN rem     140737488355327 <>               -65536 or
        INT64_MIN rem     140737488355328 <>                    0 or
        INT64_MIN rem     140737488355329 <>     -140737488289793 or
        INT64_MIN rem 4611686018427387903 <>                   -2 or
        INT64_MIN rem 4611686018427387904 <>                    0 or
        INT64_MIN rem 4611686018427387905 <> -4611686018427387903 or
        INT64_MIN rem           INT64_MAX <>                   -1 or
        INT64_MAX rem           INT64_MIN <>  9223372036854775807 or
        INT64_MAX rem           INT32_MIN <>           2147483647 or
        INT64_MAX rem           INT32_MAX <>                    1 or
        INT64_MAX rem          2147483648 <>           2147483647 or
        INT64_MAX rem          2147483649 <>                    1 or
        INT64_MAX rem          4294967295 <>           2147483647 or
        INT64_MAX rem          4294967296 <>           4294967295 or
        INT64_MAX rem     140737488355327 <>                65535 or
        INT64_MAX rem     140737488355328 <>      140737488355327 or
        INT64_MAX rem     140737488355329 <>      140737488289792 or
        INT64_MAX rem 4611686018427387903 <>                    1 or
        INT64_MAX rem 4611686018427387904 <>  4611686018427387903 or
        INT64_MAX rem 4611686018427387905 <>  4611686018427387902 or
        INT64_MAX rem           INT64_MAX <>                    0 or
        intExpr(INT64_MIN) rem           INT64_MIN <>                    0 or
        intExpr(INT64_MIN) rem         -8589934592 <>                    0 or
        intExpr(INT64_MIN) rem         -4294967296 <>                    0 or
        intExpr(INT64_MIN) rem         -2147483649 <>                   -2 or
        intExpr(INT64_MIN) rem           INT32_MIN <>                    0 or
        intExpr(INT64_MIN) rem         -2147483648 <>                    0 or
        intExpr(INT64_MIN) rem         -1073741824 <>                    0 or
        intExpr(INT64_MIN) rem               -1025 <>                   -8 or
        intExpr(INT64_MIN) rem               -1024 <>                    0 or
        intExpr(INT64_MIN) rem               -1023 <>                   -8 or
        intExpr(INT64_MIN) rem                  -2 <>                    0 or
        intExpr(INT64_MIN) rem           INT32_MAX <>                   -2 or
        intExpr(INT64_MIN) rem          2147483648 <>                    0 or
        intExpr(INT64_MIN) rem          2147483649 <>                   -2 or
        intExpr(INT64_MIN) rem          4294967296 <>                    0 or
        intExpr(INT64_MIN) rem          4294967297 <>          -2147483649 or
        intExpr(INT64_MIN) rem     140737488355327 <>               -65536 or
        intExpr(INT64_MIN) rem     140737488355328 <>                    0 or
        intExpr(INT64_MIN) rem     140737488355329 <>     -140737488289793 or
        intExpr(INT64_MIN) rem 4611686018427387903 <>                   -2 or
        intExpr(INT64_MIN) rem 4611686018427387904 <>                    0 or
        intExpr(INT64_MIN) rem 4611686018427387905 <> -4611686018427387903 or
        intExpr(INT64_MIN) rem           INT64_MAX <>                   -1 or
        intExpr(INT64_MAX) rem           INT64_MIN <>  9223372036854775807 or
        intExpr(INT64_MAX) rem           INT32_MIN <>           2147483647 or
        intExpr(INT64_MAX) rem           INT32_MAX <>                    1 or
        intExpr(INT64_MAX) rem          2147483648 <>           2147483647 or
        intExpr(INT64_MAX) rem          2147483649 <>                    1 or
        intExpr(INT64_MAX) rem          4294967295 <>           2147483647 or
        intExpr(INT64_MAX) rem          4294967296 <>           4294967295 or
        intExpr(INT64_MAX) rem     140737488355327 <>                65535 or
        intExpr(INT64_MAX) rem     140737488355328 <>      140737488355327 or
        intExpr(INT64_MAX) rem     140737488355329 <>      140737488289792 or
        intExpr(INT64_MAX) rem 4611686018427387903 <>                    1 or
        intExpr(INT64_MAX) rem 4611686018427387904 <>  4611686018427387903 or
        intExpr(INT64_MAX) rem 4611686018427387905 <>  4611686018427387902 or
        intExpr(INT64_MAX) rem           INT64_MAX <>                    0 or
        INT64_MIN rem intExpr(          INT64_MIN) <>                    0 or
        INT64_MIN rem intExpr(        -8589934592) <>                    0 or
        INT64_MIN rem intExpr(        -4294967296) <>                    0 or
        INT64_MIN rem intExpr(        -2147483649) <>                   -2 or
        INT64_MIN rem intExpr(          INT32_MIN) <>                    0 or
        INT64_MIN rem intExpr(        -2147483648) <>                    0 or
        INT64_MIN rem intExpr(        -1073741824) <>                    0 or
        INT64_MIN rem intExpr(              -1025) <>                   -8 or
        INT64_MIN rem intExpr(              -1024) <>                    0 or
        INT64_MIN rem intExpr(              -1023) <>                   -8 or
        INT64_MIN rem intExpr(                 -2) <>                    0 or
        INT64_MIN rem intExpr(          INT32_MAX) <>                   -2 or
        INT64_MIN rem intExpr(         2147483648) <>                    0 or
        INT64_MIN rem intExpr(         2147483649) <>                   -2 or
        INT64_MIN rem intExpr(         4294967296) <>                    0 or
        INT64_MIN rem intExpr(         4294967297) <>          -2147483649 or
        INT64_MIN rem intExpr(    140737488355327) <>               -65536 or
        INT64_MIN rem intExpr(    140737488355328) <>                    0 or
        INT64_MIN rem intExpr(    140737488355329) <>     -140737488289793 or
        INT64_MIN rem intExpr(4611686018427387903) <>                   -2 or
        INT64_MIN rem intExpr(4611686018427387904) <>                    0 or
        INT64_MIN rem intExpr(4611686018427387905) <> -4611686018427387903 or
        INT64_MIN rem intExpr(          INT64_MAX) <>                   -1 or
        INT64_MAX rem intExpr(          INT64_MIN) <>  9223372036854775807 or
        INT64_MAX rem intExpr(          INT32_MIN) <>           2147483647 or
        INT64_MAX rem intExpr(          INT32_MAX) <>                    1 or
        INT64_MAX rem intExpr(         2147483648) <>           2147483647 or
        INT64_MAX rem intExpr(         2147483649) <>                    1 or
        INT64_MAX rem intExpr(         4294967295) <>           2147483647 or
        INT64_MAX rem intExpr(         4294967296) <>           4294967295 or
        INT64_MAX rem intExpr(    140737488355327) <>                65535 or
        INT64_MAX rem intExpr(    140737488355328) <>      140737488355327 or
        INT64_MAX rem intExpr(    140737488355329) <>      140737488289792 or
        INT64_MAX rem intExpr(4611686018427387903) <>                    1 or
        INT64_MAX rem intExpr(4611686018427387904) <>  4611686018427387903 or
        INT64_MAX rem intExpr(4611686018427387905) <>  4611686018427387902 or
        INT64_MAX rem intExpr(          INT64_MAX) <>                    0 or
        intExpr(INT64_MIN) rem intExpr(          INT64_MIN) <>                    0 or
        intExpr(INT64_MIN) rem intExpr(        -8589934592) <>                    0 or
        intExpr(INT64_MIN) rem intExpr(        -4294967296) <>                    0 or
        intExpr(INT64_MIN) rem intExpr(        -2147483649) <>                   -2 or
        intExpr(INT64_MIN) rem intExpr(          INT32_MIN) <>                    0 or
        intExpr(INT64_MIN) rem intExpr(        -2147483648) <>                    0 or
        intExpr(INT64_MIN) rem intExpr(        -1073741824) <>                    0 or
        intExpr(INT64_MIN) rem intExpr(              -1025) <>                   -8 or
        intExpr(INT64_MIN) rem intExpr(              -1024) <>                    0 or
        intExpr(INT64_MIN) rem intExpr(              -1023) <>                   -8 or
        intExpr(INT64_MIN) rem intExpr(                 -2) <>                    0 or
        intExpr(INT64_MIN) rem intExpr(          INT32_MAX) <>                   -2 or
        intExpr(INT64_MIN) rem intExpr(         2147483648) <>                    0 or
        intExpr(INT64_MIN) rem intExpr(         2147483649) <>                   -2 or
        intExpr(INT64_MIN) rem intExpr(         4294967296) <>                    0 or
        intExpr(INT64_MIN) rem intExpr(         4294967297) <>          -2147483649 or
        intExpr(INT64_MIN) rem intExpr(    140737488355327) <>               -65536 or
        intExpr(INT64_MIN) rem intExpr(    140737488355328) <>                    0 or
        intExpr(INT64_MIN) rem intExpr(    140737488355329) <>     -140737488289793 or
        intExpr(INT64_MIN) rem intExpr(4611686018427387903) <>                   -2 or
        intExpr(INT64_MIN) rem intExpr(4611686018427387904) <>                    0 or
        intExpr(INT64_MIN) rem intExpr(4611686018427387905) <> -4611686018427387903 or
        intExpr(INT64_MIN) rem intExpr(          INT64_MAX) <>                   -1 or
        intExpr(INT64_MAX) rem intExpr(          INT64_MIN) <>  9223372036854775807 or
        intExpr(INT64_MAX) rem intExpr(          INT32_MIN) <>           2147483647 or
        intExpr(INT64_MAX) rem intExpr(          INT32_MAX) <>                    1 or
        intExpr(INT64_MAX) rem intExpr(         2147483648) <>           2147483647 or
        intExpr(INT64_MAX) rem intExpr(         2147483649) <>                    1 or
        intExpr(INT64_MAX) rem intExpr(         4294967295) <>           2147483647 or
        intExpr(INT64_MAX) rem intExpr(         4294967296) <>           4294967295 or
        intExpr(INT64_MAX) rem intExpr(    140737488355327) <>                65535 or
        intExpr(INT64_MAX) rem intExpr(    140737488355328) <>      140737488355327 or
        intExpr(INT64_MAX) rem intExpr(    140737488355329) <>      140737488289792 or
        intExpr(INT64_MAX) rem intExpr(4611686018427387903) <>                    1 or
        intExpr(INT64_MAX) rem intExpr(4611686018427387904) <>  4611686018427387903 or
        intExpr(INT64_MAX) rem intExpr(4611686018427387905) <>  4611686018427387902 or
        intExpr(INT64_MAX) rem intExpr(          INT64_MAX) <>                    0 then
      writeln(" ***** rem with maximum values does not work correct.");
      okay := FALSE;
    end if;

    if  not raisesNumericError(          INT64_MIN  rem         0 ) or
        not raisesNumericError(        -2147483648  rem         0 ) or
        not raisesNumericError(                 -1  rem         0 ) or
        not raisesNumericError(           minusOne  rem         0 ) or
        not raisesNumericError(                  0  rem         0 ) or
        not raisesNumericError(              zero2  rem         0 ) or
        not raisesNumericError(                  1  rem         0 ) or
        not raisesNumericError(                one  rem         0 ) or
        not raisesNumericError(         2147483647  rem         0 ) or
        not raisesNumericError(          INT64_MAX  rem         0 ) or
        not raisesNumericError(intExpr(  INT64_MIN) rem         0 ) or
        not raisesNumericError(intExpr(-2147483648) rem         0 ) or
        not raisesNumericError(intExpr(         -1) rem         0 ) or
        not raisesNumericError(intExpr(          0) rem         0 ) or
        not raisesNumericError(intExpr(          1) rem         0 ) or
        not raisesNumericError(intExpr( 2147483647) rem         0 ) or
        not raisesNumericError(intExpr(  INT64_MAX) rem         0 ) or
        not raisesNumericError(          INT64_MIN  rem      zero ) or
        not raisesNumericError(        -2147483648  rem      zero ) or
        not raisesNumericError(                 -1  rem      zero ) or
        not raisesNumericError(           minusOne  rem      zero ) or
        not raisesNumericError(                  0  rem      zero ) or
        not raisesNumericError(               zero  rem      zero ) or
        not raisesNumericError(              zero2  rem      zero ) or
        not raisesNumericError(                  1  rem      zero ) or
        not raisesNumericError(                one  rem      zero ) or
        not raisesNumericError(         2147483647  rem      zero ) or
        not raisesNumericError(          INT64_MAX  rem      zero ) or
        not raisesNumericError(intExpr(  INT64_MIN) rem      zero ) or
        not raisesNumericError(intExpr(-2147483648) rem      zero ) or
        not raisesNumericError(intExpr(         -1) rem      zero ) or
        not raisesNumericError(intExpr(          0) rem      zero ) or
        not raisesNumericError(intExpr(          1) rem      zero ) or
        not raisesNumericError(intExpr( 2147483647) rem      zero ) or
        not raisesNumericError(intExpr(  INT64_MAX) rem      zero ) or
        not raisesNumericError(          INT64_MIN  rem intExpr(0)) or
        not raisesNumericError(        -2147483648  rem intExpr(0)) or
        not raisesNumericError(                 -1  rem intExpr(0)) or
        not raisesNumericError(           minusOne  rem intExpr(0)) or
        not raisesNumericError(                  0  rem intExpr(0)) or
        not raisesNumericError(              zero2  rem intExpr(0)) or
        not raisesNumericError(                  1  rem intExpr(0)) or
        not raisesNumericError(                one  rem intExpr(0)) or
        not raisesNumericError(         2147483647  rem intExpr(0)) or
        not raisesNumericError(          INT64_MAX  rem intExpr(0)) or
        not raisesNumericError(intExpr(  INT64_MIN) rem intExpr(0)) or
        not raisesNumericError(intExpr(-2147483648) rem intExpr(0)) or
        not raisesNumericError(intExpr(         -1) rem intExpr(0)) or
        not raisesNumericError(intExpr(          0) rem intExpr(0)) or
        not raisesNumericError(intExpr(          1) rem intExpr(0)) or
        not raisesNumericError(intExpr( 2147483647) rem intExpr(0)) or
        not raisesNumericError(intExpr(  INT64_MAX) rem intExpr(0)) then
      writeln(" ***** Division by zero with the rem operator does not raise NUMERIC_ERROR.");
      okay := FALSE;
    end if;

    if okay then
      writeln("Rem works correct for selected values.");
    else
      writeln(" ***** rem does not work correct.");
    end if;
  end func;


const func boolean: check_mdiv_min_max is func
  result
    var boolean: okay is TRUE;
  begin
    if         2109876543  mdiv           INT32_MIN  <>          -1 or
               2109876543  mdiv         -1073741824  <>          -2 or
               2109876543  mdiv          -536870912  <>          -4 or
               2109876543  mdiv          -268435456  <>          -8 or
               2109876543  mdiv          -134217728  <>         -16 or
               2109876543  mdiv           -67108864  <>         -32 or
               2109876543  mdiv           -33554432  <>         -63 or
               2109876543  mdiv           -16777216  <>        -126 or
               2109876543  mdiv            -8388608  <>        -252 or
               2109876543  mdiv            -4194304  <>        -504 or
               2109876543  mdiv            -2097152  <>       -1007 or
               2109876543  mdiv            -1048576  <>       -2013 or
               2109876543  mdiv             -524288  <>       -4025 or
               2109876543  mdiv             -262144  <>       -8049 or
               2109876543  mdiv             -131072  <>      -16098 or
               2109876543  mdiv              -65536  <>      -32195 or
               2109876543  mdiv              -32768  <>      -64389 or
               2109876543  mdiv              -16384  <>     -128777 or
               2109876543  mdiv               -8192  <>     -257554 or
               2109876543  mdiv               -4096  <>     -515107 or
               2109876543  mdiv               -2048  <>    -1030214 or
               2109876543  mdiv               -1024  <>    -2060427 or
               2109876543  mdiv                -512  <>    -4120853 or
               2109876543  mdiv                -256  <>    -8241706 or
               2109876543  mdiv                -128  <>   -16483411 or
               2109876543  mdiv                 -64  <>   -32966821 or
               2109876543  mdiv                 -32  <>   -65933642 or
               2109876543  mdiv                 -16  <>  -131867284 or
               2109876543  mdiv                  -8  <>  -263734568 or
               2109876543  mdiv                  -4  <>  -527469136 or
               2109876543  mdiv                  -2  <> -1054938272 or
               2109876543  mdiv                   2  <>  1054938271 or
               2109876543  mdiv                   4  <>   527469135 or
               2109876543  mdiv                   8  <>   263734567 or
               2109876543  mdiv                  16  <>   131867283 or
               2109876543  mdiv                  32  <>    65933641 or
               2109876543  mdiv                  64  <>    32966820 or
               2109876543  mdiv                 128  <>    16483410 or
               2109876543  mdiv                 256  <>     8241705 or
               2109876543  mdiv                 512  <>     4120852 or
               2109876543  mdiv                1024  <>     2060426 or
               2109876543  mdiv                2048  <>     1030213 or
               2109876543  mdiv                4096  <>      515106 or
               2109876543  mdiv                8192  <>      257553 or
               2109876543  mdiv               16384  <>      128776 or
               2109876543  mdiv               32768  <>       64388 or
               2109876543  mdiv               65536  <>       32194 or
               2109876543  mdiv              131072  <>       16097 or
               2109876543  mdiv              262144  <>        8048 or
               2109876543  mdiv              524288  <>        4024 or
               2109876543  mdiv             1048576  <>        2012 or
               2109876543  mdiv             2097152  <>        1006 or
               2109876543  mdiv             4194304  <>         503 or
               2109876543  mdiv             8388608  <>         251 or
               2109876543  mdiv            16777216  <>         125 or
               2109876543  mdiv            33554432  <>          62 or
               2109876543  mdiv            67108864  <>          31 or
               2109876543  mdiv           134217728  <>          15 or
               2109876543  mdiv           268435456  <>           7 or
               2109876543  mdiv           536870912  <>           3 or
               2109876543  mdiv          1073741824  <>           1 or
       intExpr(2109876543) mdiv           INT32_MIN  <>          -1 or
       intExpr(2109876543) mdiv         -1073741824  <>          -2 or
       intExpr(2109876543) mdiv          -536870912  <>          -4 or
       intExpr(2109876543) mdiv          -268435456  <>          -8 or
       intExpr(2109876543) mdiv          -134217728  <>         -16 or
       intExpr(2109876543) mdiv           -67108864  <>         -32 or
       intExpr(2109876543) mdiv           -33554432  <>         -63 or
       intExpr(2109876543) mdiv           -16777216  <>        -126 or
       intExpr(2109876543) mdiv            -8388608  <>        -252 or
       intExpr(2109876543) mdiv            -4194304  <>        -504 or
       intExpr(2109876543) mdiv            -2097152  <>       -1007 or
       intExpr(2109876543) mdiv            -1048576  <>       -2013 or
       intExpr(2109876543) mdiv             -524288  <>       -4025 or
       intExpr(2109876543) mdiv             -262144  <>       -8049 or
       intExpr(2109876543) mdiv             -131072  <>      -16098 or
       intExpr(2109876543) mdiv              -65536  <>      -32195 or
       intExpr(2109876543) mdiv              -32768  <>      -64389 or
       intExpr(2109876543) mdiv              -16384  <>     -128777 or
       intExpr(2109876543) mdiv               -8192  <>     -257554 or
       intExpr(2109876543) mdiv               -4096  <>     -515107 or
       intExpr(2109876543) mdiv               -2048  <>    -1030214 or
       intExpr(2109876543) mdiv               -1024  <>    -2060427 or
       intExpr(2109876543) mdiv                -512  <>    -4120853 or
       intExpr(2109876543) mdiv                -256  <>    -8241706 or
       intExpr(2109876543) mdiv                -128  <>   -16483411 or
       intExpr(2109876543) mdiv                 -64  <>   -32966821 or
       intExpr(2109876543) mdiv                 -32  <>   -65933642 or
       intExpr(2109876543) mdiv                 -16  <>  -131867284 or
       intExpr(2109876543) mdiv                  -8  <>  -263734568 or
       intExpr(2109876543) mdiv                  -4  <>  -527469136 or
       intExpr(2109876543) mdiv                  -2  <> -1054938272 or
       intExpr(2109876543) mdiv                   2  <>  1054938271 or
       intExpr(2109876543) mdiv                   4  <>   527469135 or
       intExpr(2109876543) mdiv                   8  <>   263734567 or
       intExpr(2109876543) mdiv                  16  <>   131867283 or
       intExpr(2109876543) mdiv                  32  <>    65933641 or
       intExpr(2109876543) mdiv                  64  <>    32966820 or
       intExpr(2109876543) mdiv                 128  <>    16483410 or
       intExpr(2109876543) mdiv                 256  <>     8241705 or
       intExpr(2109876543) mdiv                 512  <>     4120852 or
       intExpr(2109876543) mdiv                1024  <>     2060426 or
       intExpr(2109876543) mdiv                2048  <>     1030213 or
       intExpr(2109876543) mdiv                4096  <>      515106 or
       intExpr(2109876543) mdiv                8192  <>      257553 or
       intExpr(2109876543) mdiv               16384  <>      128776 or
       intExpr(2109876543) mdiv               32768  <>       64388 or
       intExpr(2109876543) mdiv               65536  <>       32194 or
       intExpr(2109876543) mdiv              131072  <>       16097 or
       intExpr(2109876543) mdiv              262144  <>        8048 or
       intExpr(2109876543) mdiv              524288  <>        4024 or
       intExpr(2109876543) mdiv             1048576  <>        2012 or
       intExpr(2109876543) mdiv             2097152  <>        1006 or
       intExpr(2109876543) mdiv             4194304  <>         503 or
       intExpr(2109876543) mdiv             8388608  <>         251 or
       intExpr(2109876543) mdiv            16777216  <>         125 or
       intExpr(2109876543) mdiv            33554432  <>          62 or
       intExpr(2109876543) mdiv            67108864  <>          31 or
       intExpr(2109876543) mdiv           134217728  <>          15 or
       intExpr(2109876543) mdiv           268435456  <>           7 or
       intExpr(2109876543) mdiv           536870912  <>           3 or
       intExpr(2109876543) mdiv          1073741824  <>           1 or
               2109876543  mdiv intExpr(  INT32_MIN) <>          -1 or
               2109876543  mdiv intExpr(-1073741824) <>          -2 or
               2109876543  mdiv intExpr( -536870912) <>          -4 or
               2109876543  mdiv intExpr( -268435456) <>          -8 or
               2109876543  mdiv intExpr( -134217728) <>         -16 or
               2109876543  mdiv intExpr(  -67108864) <>         -32 or
               2109876543  mdiv intExpr(  -33554432) <>         -63 or
               2109876543  mdiv intExpr(  -16777216) <>        -126 or
               2109876543  mdiv intExpr(   -8388608) <>        -252 or
               2109876543  mdiv intExpr(   -4194304) <>        -504 or
               2109876543  mdiv intExpr(   -2097152) <>       -1007 or
               2109876543  mdiv intExpr(   -1048576) <>       -2013 or
               2109876543  mdiv intExpr(    -524288) <>       -4025 or
               2109876543  mdiv intExpr(    -262144) <>       -8049 or
               2109876543  mdiv intExpr(    -131072) <>      -16098 or
               2109876543  mdiv intExpr(     -65536) <>      -32195 or
               2109876543  mdiv intExpr(     -32768) <>      -64389 or
               2109876543  mdiv intExpr(     -16384) <>     -128777 or
               2109876543  mdiv intExpr(      -8192) <>     -257554 or
               2109876543  mdiv intExpr(      -4096) <>     -515107 or
               2109876543  mdiv intExpr(      -2048) <>    -1030214 or
               2109876543  mdiv intExpr(      -1024) <>    -2060427 or
               2109876543  mdiv intExpr(       -512) <>    -4120853 or
               2109876543  mdiv intExpr(       -256) <>    -8241706 or
               2109876543  mdiv intExpr(       -128) <>   -16483411 or
               2109876543  mdiv intExpr(        -64) <>   -32966821 or
               2109876543  mdiv intExpr(        -32) <>   -65933642 or
               2109876543  mdiv intExpr(        -16) <>  -131867284 or
               2109876543  mdiv intExpr(         -8) <>  -263734568 or
               2109876543  mdiv intExpr(         -4) <>  -527469136 or
               2109876543  mdiv intExpr(         -2) <> -1054938272 or
               2109876543  mdiv intExpr(          2) <>  1054938271 or
               2109876543  mdiv intExpr(          4) <>   527469135 or
               2109876543  mdiv intExpr(          8) <>   263734567 or
               2109876543  mdiv intExpr(         16) <>   131867283 or
               2109876543  mdiv intExpr(         32) <>    65933641 or
               2109876543  mdiv intExpr(         64) <>    32966820 or
               2109876543  mdiv intExpr(        128) <>    16483410 or
               2109876543  mdiv intExpr(        256) <>     8241705 or
               2109876543  mdiv intExpr(        512) <>     4120852 or
               2109876543  mdiv intExpr(       1024) <>     2060426 or
               2109876543  mdiv intExpr(       2048) <>     1030213 or
               2109876543  mdiv intExpr(       4096) <>      515106 or
               2109876543  mdiv intExpr(       8192) <>      257553 or
               2109876543  mdiv intExpr(      16384) <>      128776 or
               2109876543  mdiv intExpr(      32768) <>       64388 or
               2109876543  mdiv intExpr(      65536) <>       32194 or
               2109876543  mdiv intExpr(     131072) <>       16097 or
               2109876543  mdiv intExpr(     262144) <>        8048 or
               2109876543  mdiv intExpr(     524288) <>        4024 or
               2109876543  mdiv intExpr(    1048576) <>        2012 or
               2109876543  mdiv intExpr(    2097152) <>        1006 or
               2109876543  mdiv intExpr(    4194304) <>         503 or
               2109876543  mdiv intExpr(    8388608) <>         251 or
               2109876543  mdiv intExpr(   16777216) <>         125 or
               2109876543  mdiv intExpr(   33554432) <>          62 or
               2109876543  mdiv intExpr(   67108864) <>          31 or
               2109876543  mdiv intExpr(  134217728) <>          15 or
               2109876543  mdiv intExpr(  268435456) <>           7 or
               2109876543  mdiv intExpr(  536870912) <>           3 or
               2109876543  mdiv intExpr( 1073741824) <>           1 or
       intExpr(2109876543) mdiv intExpr(  INT32_MIN) <>          -1 or
       intExpr(2109876543) mdiv intExpr(-1073741824) <>          -2 or
       intExpr(2109876543) mdiv intExpr( -536870912) <>          -4 or
       intExpr(2109876543) mdiv intExpr( -268435456) <>          -8 or
       intExpr(2109876543) mdiv intExpr( -134217728) <>         -16 or
       intExpr(2109876543) mdiv intExpr(  -67108864) <>         -32 or
       intExpr(2109876543) mdiv intExpr(  -33554432) <>         -63 or
       intExpr(2109876543) mdiv intExpr(  -16777216) <>        -126 or
       intExpr(2109876543) mdiv intExpr(   -8388608) <>        -252 or
       intExpr(2109876543) mdiv intExpr(   -4194304) <>        -504 or
       intExpr(2109876543) mdiv intExpr(   -2097152) <>       -1007 or
       intExpr(2109876543) mdiv intExpr(   -1048576) <>       -2013 or
       intExpr(2109876543) mdiv intExpr(    -524288) <>       -4025 or
       intExpr(2109876543) mdiv intExpr(    -262144) <>       -8049 or
       intExpr(2109876543) mdiv intExpr(    -131072) <>      -16098 or
       intExpr(2109876543) mdiv intExpr(     -65536) <>      -32195 or
       intExpr(2109876543) mdiv intExpr(     -32768) <>      -64389 or
       intExpr(2109876543) mdiv intExpr(     -16384) <>     -128777 or
       intExpr(2109876543) mdiv intExpr(      -8192) <>     -257554 or
       intExpr(2109876543) mdiv intExpr(      -4096) <>     -515107 or
       intExpr(2109876543) mdiv intExpr(      -2048) <>    -1030214 or
       intExpr(2109876543) mdiv intExpr(      -1024) <>    -2060427 or
       intExpr(2109876543) mdiv intExpr(       -512) <>    -4120853 or
       intExpr(2109876543) mdiv intExpr(       -256) <>    -8241706 or
       intExpr(2109876543) mdiv intExpr(       -128) <>   -16483411 or
       intExpr(2109876543) mdiv intExpr(        -64) <>   -32966821 or
       intExpr(2109876543) mdiv intExpr(        -32) <>   -65933642 or
       intExpr(2109876543) mdiv intExpr(        -16) <>  -131867284 or
       intExpr(2109876543) mdiv intExpr(         -8) <>  -263734568 or
       intExpr(2109876543) mdiv intExpr(         -4) <>  -527469136 or
       intExpr(2109876543) mdiv intExpr(         -2) <> -1054938272 or
       intExpr(2109876543) mdiv intExpr(          2) <>  1054938271 or
       intExpr(2109876543) mdiv intExpr(          4) <>   527469135 or
       intExpr(2109876543) mdiv intExpr(          8) <>   263734567 or
       intExpr(2109876543) mdiv intExpr(         16) <>   131867283 or
       intExpr(2109876543) mdiv intExpr(         32) <>    65933641 or
       intExpr(2109876543) mdiv intExpr(         64) <>    32966820 or
       intExpr(2109876543) mdiv intExpr(        128) <>    16483410 or
       intExpr(2109876543) mdiv intExpr(        256) <>     8241705 or
       intExpr(2109876543) mdiv intExpr(        512) <>     4120852 or
       intExpr(2109876543) mdiv intExpr(       1024) <>     2060426 or
       intExpr(2109876543) mdiv intExpr(       2048) <>     1030213 or
       intExpr(2109876543) mdiv intExpr(       4096) <>      515106 or
       intExpr(2109876543) mdiv intExpr(       8192) <>      257553 or
       intExpr(2109876543) mdiv intExpr(      16384) <>      128776 or
       intExpr(2109876543) mdiv intExpr(      32768) <>       64388 or
       intExpr(2109876543) mdiv intExpr(      65536) <>       32194 or
       intExpr(2109876543) mdiv intExpr(     131072) <>       16097 or
       intExpr(2109876543) mdiv intExpr(     262144) <>        8048 or
       intExpr(2109876543) mdiv intExpr(     524288) <>        4024 or
       intExpr(2109876543) mdiv intExpr(    1048576) <>        2012 or
       intExpr(2109876543) mdiv intExpr(    2097152) <>        1006 or
       intExpr(2109876543) mdiv intExpr(    4194304) <>         503 or
       intExpr(2109876543) mdiv intExpr(    8388608) <>         251 or
       intExpr(2109876543) mdiv intExpr(   16777216) <>         125 or
       intExpr(2109876543) mdiv intExpr(   33554432) <>          62 or
       intExpr(2109876543) mdiv intExpr(   67108864) <>          31 or
       intExpr(2109876543) mdiv intExpr(  134217728) <>          15 or
       intExpr(2109876543) mdiv intExpr(  268435456) <>           7 or
       intExpr(2109876543) mdiv intExpr(  536870912) <>           3 or
       intExpr(2109876543) mdiv intExpr( 1073741824) <>           1 then
      writeln(" ***** mdiv with powers of two does not work correct.");
      okay := FALSE;
    end if;

    if  INT64_MIN mdiv           INT64_MIN <>                    1 or
        INT64_MIN mdiv         -8589934592 <>           1073741824 or
        INT64_MIN mdiv         -4294967296 <>           2147483648 or
        INT64_MIN mdiv         -2147483649 <>           4294967294 or
        INT64_MIN mdiv           INT32_MIN <>           4294967296 or
        INT64_MIN mdiv         -2147483648 <>           4294967296 or
        INT64_MIN mdiv         -1073741824 <>           8589934592 or
        INT64_MIN mdiv               -1025 <>     8998411743272952 or
        INT64_MIN mdiv               -1024 <>     9007199254740992 or
        INT64_MIN mdiv               -1023 <>     9016003946094600 or
        INT64_MIN mdiv                  -2 <>  4611686018427387904 or
        INT64_MIN mdiv           INT32_MAX <>          -4294967299 or
        INT64_MIN mdiv          2147483648 <>          -4294967296 or
        INT64_MIN mdiv          2147483649 <>          -4294967295 or
        INT64_MIN mdiv          4294967296 <>          -2147483648 or
        INT64_MIN mdiv          4294967297 <>          -2147483648 or
        INT64_MIN mdiv     140737488355327 <>               -65537 or
        INT64_MIN mdiv     140737488355328 <>               -65536 or
        INT64_MIN mdiv     140737488355329 <>               -65536 or
        INT64_MIN mdiv 4611686018427387903 <>                   -3 or
        INT64_MIN mdiv 4611686018427387904 <>                   -2 or
        INT64_MIN mdiv 4611686018427387905 <>                   -2 or
        INT64_MIN mdiv           INT64_MAX <>                   -2 or
        INT64_MAX mdiv           INT64_MIN <>                   -1 or
        INT64_MAX mdiv           INT32_MIN <>          -4294967296 or
        INT64_MAX mdiv           INT32_MAX <>           4294967298 or
        INT64_MAX mdiv          2147483648 <>           4294967295 or
        INT64_MAX mdiv          2147483649 <>           4294967294 or
        INT64_MAX mdiv          4294967295 <>           2147483648 or
        INT64_MAX mdiv          4294967296 <>           2147483647 or
        INT64_MAX mdiv     140737488355327 <>                65536 or
        INT64_MAX mdiv     140737488355328 <>                65535 or
        INT64_MAX mdiv     140737488355329 <>                65535 or
        INT64_MAX mdiv 4611686018427387903 <>                    2 or
        INT64_MAX mdiv 4611686018427387904 <>                    1 or
        INT64_MAX mdiv 4611686018427387905 <>                    1 or
        INT64_MAX mdiv           INT64_MAX <>                    1 or
        intExpr(INT64_MIN) mdiv           INT64_MIN <>                    1 or
        intExpr(INT64_MIN) mdiv         -8589934592 <>           1073741824 or
        intExpr(INT64_MIN) mdiv         -4294967296 <>           2147483648 or
        intExpr(INT64_MIN) mdiv         -2147483649 <>           4294967294 or
        intExpr(INT64_MIN) mdiv           INT32_MIN <>           4294967296 or
        intExpr(INT64_MIN) mdiv         -2147483648 <>           4294967296 or
        intExpr(INT64_MIN) mdiv         -1073741824 <>           8589934592 or
        intExpr(INT64_MIN) mdiv               -1025 <>     8998411743272952 or
        intExpr(INT64_MIN) mdiv               -1024 <>     9007199254740992 or
        intExpr(INT64_MIN) mdiv               -1023 <>     9016003946094600 or
        intExpr(INT64_MIN) mdiv                  -2 <>  4611686018427387904 or
        intExpr(INT64_MIN) mdiv           INT32_MAX <>          -4294967299 or
        intExpr(INT64_MIN) mdiv          2147483648 <>          -4294967296 or
        intExpr(INT64_MIN) mdiv          2147483649 <>          -4294967295 or
        intExpr(INT64_MIN) mdiv          4294967296 <>          -2147483648 or
        intExpr(INT64_MIN) mdiv          4294967297 <>          -2147483648 or
        intExpr(INT64_MIN) mdiv     140737488355327 <>               -65537 or
        intExpr(INT64_MIN) mdiv     140737488355328 <>               -65536 or
        intExpr(INT64_MIN) mdiv     140737488355329 <>               -65536 or
        intExpr(INT64_MIN) mdiv 4611686018427387903 <>                   -3 or
        intExpr(INT64_MIN) mdiv 4611686018427387904 <>                   -2 or
        intExpr(INT64_MIN) mdiv 4611686018427387905 <>                   -2 or
        intExpr(INT64_MIN) mdiv           INT64_MAX <>                   -2 or
        intExpr(INT64_MAX) mdiv           INT64_MIN <>                   -1 or
        intExpr(INT64_MAX) mdiv           INT32_MIN <>          -4294967296 or
        intExpr(INT64_MAX) mdiv           INT32_MAX <>           4294967298 or
        intExpr(INT64_MAX) mdiv          2147483648 <>           4294967295 or
        intExpr(INT64_MAX) mdiv          2147483649 <>           4294967294 or
        intExpr(INT64_MAX) mdiv          4294967295 <>           2147483648 or
        intExpr(INT64_MAX) mdiv          4294967296 <>           2147483647 or
        intExpr(INT64_MAX) mdiv     140737488355327 <>                65536 or
        intExpr(INT64_MAX) mdiv     140737488355328 <>                65535 or
        intExpr(INT64_MAX) mdiv     140737488355329 <>                65535 or
        intExpr(INT64_MAX) mdiv 4611686018427387903 <>                    2 or
        intExpr(INT64_MAX) mdiv 4611686018427387904 <>                    1 or
        intExpr(INT64_MAX) mdiv 4611686018427387905 <>                    1 or
        intExpr(INT64_MAX) mdiv           INT64_MAX <>                    1 or
        INT64_MIN mdiv intExpr(          INT64_MIN) <>                    1 or
        INT64_MIN mdiv intExpr(        -8589934592) <>           1073741824 or
        INT64_MIN mdiv intExpr(        -4294967296) <>           2147483648 or
        INT64_MIN mdiv intExpr(        -2147483649) <>           4294967294 or
        INT64_MIN mdiv intExpr(          INT32_MIN) <>           4294967296 or
        INT64_MIN mdiv intExpr(        -2147483648) <>           4294967296 or
        INT64_MIN mdiv intExpr(        -1073741824) <>           8589934592 or
        INT64_MIN mdiv intExpr(              -1025) <>     8998411743272952 or
        INT64_MIN mdiv intExpr(              -1024) <>     9007199254740992 or
        INT64_MIN mdiv intExpr(              -1023) <>     9016003946094600 or
        INT64_MIN mdiv intExpr(                 -2) <>  4611686018427387904 or
        INT64_MIN mdiv intExpr(          INT32_MAX) <>          -4294967299 or
        INT64_MIN mdiv intExpr(         2147483648) <>          -4294967296 or
        INT64_MIN mdiv intExpr(         2147483649) <>          -4294967295 or
        INT64_MIN mdiv intExpr(         4294967296) <>          -2147483648 or
        INT64_MIN mdiv intExpr(         4294967297) <>          -2147483648 or
        INT64_MIN mdiv intExpr(    140737488355327) <>               -65537 or
        INT64_MIN mdiv intExpr(    140737488355328) <>               -65536 or
        INT64_MIN mdiv intExpr(    140737488355329) <>               -65536 or
        INT64_MIN mdiv intExpr(4611686018427387903) <>                   -3 or
        INT64_MIN mdiv intExpr(4611686018427387904) <>                   -2 or
        INT64_MIN mdiv intExpr(4611686018427387905) <>                   -2 or
        INT64_MIN mdiv intExpr(          INT64_MAX) <>                   -2 or
        INT64_MAX mdiv intExpr(          INT64_MIN) <>                   -1 or
        INT64_MAX mdiv intExpr(          INT32_MIN) <>          -4294967296 or
        INT64_MAX mdiv intExpr(          INT32_MAX) <>           4294967298 or
        INT64_MAX mdiv intExpr(         2147483648) <>           4294967295 or
        INT64_MAX mdiv intExpr(         2147483649) <>           4294967294 or
        INT64_MAX mdiv intExpr(         4294967295) <>           2147483648 or
        INT64_MAX mdiv intExpr(         4294967296) <>           2147483647 or
        INT64_MAX mdiv intExpr(    140737488355327) <>                65536 or
        INT64_MAX mdiv intExpr(    140737488355328) <>                65535 or
        INT64_MAX mdiv intExpr(    140737488355329) <>                65535 or
        INT64_MAX mdiv intExpr(4611686018427387903) <>                    2 or
        INT64_MAX mdiv intExpr(4611686018427387904) <>                    1 or
        INT64_MAX mdiv intExpr(4611686018427387905) <>                    1 or
        INT64_MAX mdiv intExpr(          INT64_MAX) <>                    1 or
        intExpr(INT64_MIN) mdiv intExpr(          INT64_MIN) <>           1 or
        intExpr(INT64_MIN) mdiv intExpr(        -8589934592) <>           1073741824 or
        intExpr(INT64_MIN) mdiv intExpr(        -4294967296) <>           2147483648 or
        intExpr(INT64_MIN) mdiv intExpr(        -2147483649) <>           4294967294 or
        intExpr(INT64_MIN) mdiv intExpr(          INT32_MIN) <>           4294967296 or
        intExpr(INT64_MIN) mdiv intExpr(        -2147483648) <>           4294967296 or
        intExpr(INT64_MIN) mdiv intExpr(        -1073741824) <>           8589934592 or
        intExpr(INT64_MIN) mdiv intExpr(              -1025) <>     8998411743272952 or
        intExpr(INT64_MIN) mdiv intExpr(              -1024) <>     9007199254740992 or
        intExpr(INT64_MIN) mdiv intExpr(              -1023) <>     9016003946094600 or
        intExpr(INT64_MIN) mdiv intExpr(                 -2) <>  4611686018427387904 or
        intExpr(INT64_MIN) mdiv intExpr(          INT32_MAX) <>          -4294967299 or
        intExpr(INT64_MIN) mdiv intExpr(         2147483648) <>          -4294967296 or
        intExpr(INT64_MIN) mdiv intExpr(         2147483649) <>          -4294967295 or
        intExpr(INT64_MIN) mdiv intExpr(         4294967296) <>          -2147483648 or
        intExpr(INT64_MIN) mdiv intExpr(         4294967297) <>          -2147483648 or
        intExpr(INT64_MIN) mdiv intExpr(    140737488355327) <>               -65537 or
        intExpr(INT64_MIN) mdiv intExpr(    140737488355328) <>               -65536 or
        intExpr(INT64_MIN) mdiv intExpr(    140737488355329) <>               -65536 or
        intExpr(INT64_MIN) mdiv intExpr(4611686018427387903) <>                   -3 or
        intExpr(INT64_MIN) mdiv intExpr(4611686018427387904) <>                   -2 or
        intExpr(INT64_MIN) mdiv intExpr(4611686018427387905) <>                   -2 or
        intExpr(INT64_MIN) mdiv intExpr(          INT64_MAX) <>                   -2 or
        intExpr(INT64_MAX) mdiv intExpr(          INT64_MIN) <>                   -1 or
        intExpr(INT64_MAX) mdiv intExpr(          INT32_MIN) <>          -4294967296 or
        intExpr(INT64_MAX) mdiv intExpr(          INT32_MAX) <>           4294967298 or
        intExpr(INT64_MAX) mdiv intExpr(         2147483648) <>           4294967295 or
        intExpr(INT64_MAX) mdiv intExpr(         2147483649) <>           4294967294 or
        intExpr(INT64_MAX) mdiv intExpr(         4294967295) <>           2147483648 or
        intExpr(INT64_MAX) mdiv intExpr(         4294967296) <>           2147483647 or
        intExpr(INT64_MAX) mdiv intExpr(    140737488355327) <>                65536 or
        intExpr(INT64_MAX) mdiv intExpr(    140737488355328) <>                65535 or
        intExpr(INT64_MAX) mdiv intExpr(    140737488355329) <>                65535 or
        intExpr(INT64_MAX) mdiv intExpr(4611686018427387903) <>                    2 or
        intExpr(INT64_MAX) mdiv intExpr(4611686018427387904) <>                    1 or
        intExpr(INT64_MAX) mdiv intExpr(4611686018427387905) <>                    1 or
        intExpr(INT64_MAX) mdiv intExpr(          INT64_MAX) <>                    1 then
      writeln(" ***** mdiv with maximum values does not work correct.");
      okay := FALSE;
    end if;
  end func;


const func boolean: check_mdiv_by_zero is func
  result
    var boolean: okay is TRUE;
  local
    var integer: zero is 0;
    var integer: zero2 is 0;
    var integer: one is 1;
    var integer: minusOne is -1;
  begin
    if  not raisesNumericError(          INT64_MIN  mdiv         0 ) or
        not raisesNumericError(        -2147483648  mdiv         0 ) or
        not raisesNumericError(                 -1  mdiv         0 ) or
        not raisesNumericError(           minusOne  mdiv         0 ) or
        not raisesNumericError(                  0  mdiv         0 ) or
        not raisesNumericError(              zero2  mdiv         0 ) or
        not raisesNumericError(                  1  mdiv         0 ) or
        not raisesNumericError(                one  mdiv         0 ) or
        not raisesNumericError(         2147483647  mdiv         0 ) or
        not raisesNumericError(          INT64_MAX  mdiv         0 ) or
        not raisesNumericError(intExpr(  INT64_MIN) mdiv         0 ) or
        not raisesNumericError(intExpr(-2147483648) mdiv         0 ) or
        not raisesNumericError(intExpr(         -1) mdiv         0 ) or
        not raisesNumericError(intExpr(          0) mdiv         0 ) or
        not raisesNumericError(intExpr(          1) mdiv         0 ) or
        not raisesNumericError(intExpr( 2147483647) mdiv         0 ) or
        not raisesNumericError(intExpr(  INT64_MAX) mdiv         0 ) or
        not raisesNumericError(          INT64_MIN  mdiv      zero ) or
        not raisesNumericError(        -2147483648  mdiv      zero ) or
        not raisesNumericError(                 -1  mdiv      zero ) or
        not raisesNumericError(           minusOne  mdiv      zero ) or
        not raisesNumericError(                  0  mdiv      zero ) or
        not raisesNumericError(               zero  mdiv      zero ) or
        not raisesNumericError(              zero2  mdiv      zero ) or
        not raisesNumericError(                  1  mdiv      zero ) or
        not raisesNumericError(                one  mdiv      zero ) or
        not raisesNumericError(         2147483647  mdiv      zero ) or
        not raisesNumericError(          INT64_MAX  mdiv      zero ) or
        not raisesNumericError(intExpr(  INT64_MIN) mdiv      zero ) or
        not raisesNumericError(intExpr(-2147483648) mdiv      zero ) or
        not raisesNumericError(intExpr(         -1) mdiv      zero ) or
        not raisesNumericError(intExpr(          0) mdiv      zero ) or
        not raisesNumericError(intExpr(          1) mdiv      zero ) or
        not raisesNumericError(intExpr( 2147483647) mdiv      zero ) or
        not raisesNumericError(intExpr(  INT64_MAX) mdiv      zero ) or
        not raisesNumericError(          INT64_MIN  mdiv intExpr(0)) or
        not raisesNumericError(        -2147483648  mdiv intExpr(0)) or
        not raisesNumericError(                 -1  mdiv intExpr(0)) or
        not raisesNumericError(           minusOne  mdiv intExpr(0)) or
        not raisesNumericError(                  0  mdiv intExpr(0)) or
        not raisesNumericError(              zero2  mdiv intExpr(0)) or
        not raisesNumericError(                  1  mdiv intExpr(0)) or
        not raisesNumericError(                one  mdiv intExpr(0)) or
        not raisesNumericError(         2147483647  mdiv intExpr(0)) or
        not raisesNumericError(          INT64_MAX  mdiv intExpr(0)) or
        not raisesNumericError(intExpr(  INT64_MIN) mdiv intExpr(0)) or
        not raisesNumericError(intExpr(-2147483648) mdiv intExpr(0)) or
        not raisesNumericError(intExpr(         -1) mdiv intExpr(0)) or
        not raisesNumericError(intExpr(          0) mdiv intExpr(0)) or
        not raisesNumericError(intExpr(          1) mdiv intExpr(0)) or
        not raisesNumericError(intExpr( 2147483647) mdiv intExpr(0)) or
        not raisesNumericError(intExpr(  INT64_MAX) mdiv intExpr(0)) then
      writeln(" ***** Division by zero with the mdiv operator does not raise NUMERIC_ERROR.");
      okay := FALSE;
    end if;
  end func;


const proc: check_mdiv is func
  local
    var boolean: okay is TRUE;
  begin
    if   10 mdiv  5 <>  2 or
          9 mdiv  5 <>  1 or
          8 mdiv  5 <>  1 or
          7 mdiv  5 <>  1 or
          6 mdiv  5 <>  1 or
          5 mdiv  5 <>  1 or
          4 mdiv  5 <>  0 or
          3 mdiv  5 <>  0 or
          2 mdiv  5 <>  0 or
          1 mdiv  5 <>  0 or
          0 mdiv  5 <>  0 or
         -1 mdiv  5 <> -1 or
         -2 mdiv  5 <> -1 or
         -3 mdiv  5 <> -1 or
         -4 mdiv  5 <> -1 or
         -5 mdiv  5 <> -1 or
         -6 mdiv  5 <> -2 or
         -7 mdiv  5 <> -2 or
         -8 mdiv  5 <> -2 or
         -9 mdiv  5 <> -2 or
        -10 mdiv  5 <> -2 or
         10 mdiv  4 <>  2 or
          9 mdiv  4 <>  2 or
          8 mdiv  4 <>  2 or
          7 mdiv  4 <>  1 or
          6 mdiv  4 <>  1 or
          5 mdiv  4 <>  1 or
          4 mdiv  4 <>  1 or
          3 mdiv  4 <>  0 or
          2 mdiv  4 <>  0 or
          1 mdiv  4 <>  0 or
          0 mdiv  4 <>  0 or
         -1 mdiv  4 <> -1 or
         -2 mdiv  4 <> -1 or
         -3 mdiv  4 <> -1 or
         -4 mdiv  4 <> -1 or
         -5 mdiv  4 <> -2 or
         -6 mdiv  4 <> -2 or
         -7 mdiv  4 <> -2 or
         -8 mdiv  4 <> -2 or
         -9 mdiv  4 <> -3 or
        -10 mdiv  4 <> -3 or
         10 mdiv  3 <>  3 or
          9 mdiv  3 <>  3 or
          8 mdiv  3 <>  2 or
          7 mdiv  3 <>  2 or
          6 mdiv  3 <>  2 or
          5 mdiv  3 <>  1 or
          4 mdiv  3 <>  1 or
          3 mdiv  3 <>  1 or
          2 mdiv  3 <>  0 or
          1 mdiv  3 <>  0 or
          0 mdiv  3 <>  0 or
         -1 mdiv  3 <> -1 or
         -2 mdiv  3 <> -1 or
         -3 mdiv  3 <> -1 or
         -4 mdiv  3 <> -2 or
         -5 mdiv  3 <> -2 or
         -6 mdiv  3 <> -2 or
         -7 mdiv  3 <> -3 or
         -8 mdiv  3 <> -3 or
         -9 mdiv  3 <> -3 or
        -10 mdiv  3 <> -4 or
         10 mdiv  2 <>  5 or
          9 mdiv  2 <>  4 or
          8 mdiv  2 <>  4 or
          7 mdiv  2 <>  3 or
          6 mdiv  2 <>  3 or
          5 mdiv  2 <>  2 or
          4 mdiv  2 <>  2 or
          3 mdiv  2 <>  1 or
          2 mdiv  2 <>  1 or
          1 mdiv  2 <>  0 or
          0 mdiv  2 <>  0 or
         -1 mdiv  2 <> -1 or
         -2 mdiv  2 <> -1 or
         -3 mdiv  2 <> -2 or
         -4 mdiv  2 <> -2 or
         -5 mdiv  2 <> -3 or
         -6 mdiv  2 <> -3 or
         -7 mdiv  2 <> -4 or
         -8 mdiv  2 <> -4 or
         -9 mdiv  2 <> -5 or
        -10 mdiv  2 <> -5 or
         10 mdiv  1 <> 10 or
          9 mdiv  1 <>  9 or
          8 mdiv  1 <>  8 or
          7 mdiv  1 <>  7 or
          6 mdiv  1 <>  6 or
          5 mdiv  1 <>  5 or
          4 mdiv  1 <>  4 or
          3 mdiv  1 <>  3 or
          2 mdiv  1 <>  2 or
          1 mdiv  1 <>  1 or
          0 mdiv  1 <>  0 or
         -1 mdiv  1 <> -1 or
         -2 mdiv  1 <> -2 or
         -3 mdiv  1 <> -3 or
         -4 mdiv  1 <> -4 or
         -5 mdiv  1 <> -5 or
         -6 mdiv  1 <> -6 or
         -7 mdiv  1 <> -7 or
         -8 mdiv  1 <> -8 or
         -9 mdiv  1 <> -9 or
        -10 mdiv  1 <> -10 or
         10 mdiv -1 <> -10 or
          9 mdiv -1 <> -9 or
          8 mdiv -1 <> -8 or
          7 mdiv -1 <> -7 or
          6 mdiv -1 <> -6 or
          5 mdiv -1 <> -5 or
          4 mdiv -1 <> -4 or
          3 mdiv -1 <> -3 or
          2 mdiv -1 <> -2 or
          1 mdiv -1 <> -1 or
          0 mdiv -1 <>  0 or
         -1 mdiv -1 <>  1 or
         -2 mdiv -1 <>  2 or
         -3 mdiv -1 <>  3 or
         -4 mdiv -1 <>  4 or
         -5 mdiv -1 <>  5 or
         -6 mdiv -1 <>  6 or
         -7 mdiv -1 <>  7 or
         -8 mdiv -1 <>  8 or
         -9 mdiv -1 <>  9 or
        -10 mdiv -1 <> 10 or
         10 mdiv -2 <> -5 or
          9 mdiv -2 <> -5 or
          8 mdiv -2 <> -4 or
          7 mdiv -2 <> -4 or
          6 mdiv -2 <> -3 or
          5 mdiv -2 <> -3 or
          4 mdiv -2 <> -2 or
          3 mdiv -2 <> -2 or
          2 mdiv -2 <> -1 or
          1 mdiv -2 <> -1 or
          0 mdiv -2 <>  0 or
         -1 mdiv -2 <>  0 or
         -2 mdiv -2 <>  1 or
         -3 mdiv -2 <>  1 or
         -4 mdiv -2 <>  2 or
         -5 mdiv -2 <>  2 or
         -6 mdiv -2 <>  3 or
         -7 mdiv -2 <>  3 or
         -8 mdiv -2 <>  4 or
         -9 mdiv -2 <>  4 or
        -10 mdiv -2 <>  5 or
         10 mdiv -3 <> -4 or
          9 mdiv -3 <> -3 or
          8 mdiv -3 <> -3 or
          7 mdiv -3 <> -3 or
          6 mdiv -3 <> -2 or
          5 mdiv -3 <> -2 or
          4 mdiv -3 <> -2 or
          3 mdiv -3 <> -1 or
          2 mdiv -3 <> -1 or
          1 mdiv -3 <> -1 or
          0 mdiv -3 <>  0 or
         -1 mdiv -3 <>  0 or
         -2 mdiv -3 <>  0 or
         -3 mdiv -3 <>  1 or
         -4 mdiv -3 <>  1 or
         -5 mdiv -3 <>  1 or
         -6 mdiv -3 <>  2 or
         -7 mdiv -3 <>  2 or
         -8 mdiv -3 <>  2 or
         -9 mdiv -3 <>  3 or
        -10 mdiv -3 <>  3 or
         10 mdiv -4 <> -3 or
          9 mdiv -4 <> -3 or
          8 mdiv -4 <> -2 or
          7 mdiv -4 <> -2 or
          6 mdiv -4 <> -2 or
          5 mdiv -4 <> -2 or
          4 mdiv -4 <> -1 or
          3 mdiv -4 <> -1 or
          2 mdiv -4 <> -1 or
          1 mdiv -4 <> -1 or
          0 mdiv -4 <>  0 or
         -1 mdiv -4 <>  0 or
         -2 mdiv -4 <>  0 or
         -3 mdiv -4 <>  0 or
         -4 mdiv -4 <>  1 or
         -5 mdiv -4 <>  1 or
         -6 mdiv -4 <>  1 or
         -7 mdiv -4 <>  1 or
         -8 mdiv -4 <>  2 or
         -9 mdiv -4 <>  2 or
        -10 mdiv -4 <>  2 or
         10 mdiv -5 <> -2 or
          9 mdiv -5 <> -2 or
          8 mdiv -5 <> -2 or
          7 mdiv -5 <> -2 or
          6 mdiv -5 <> -2 or
          5 mdiv -5 <> -1 or
          4 mdiv -5 <> -1 or
          3 mdiv -5 <> -1 or
          2 mdiv -5 <> -1 or
          1 mdiv -5 <> -1 or
          0 mdiv -5 <>  0 or
         -1 mdiv -5 <>  0 or
         -2 mdiv -5 <>  0 or
         -3 mdiv -5 <>  0 or
         -4 mdiv -5 <>  0 or
         -5 mdiv -5 <>  1 or
         -6 mdiv -5 <>  1 or
         -7 mdiv -5 <>  1 or
         -8 mdiv -5 <>  1 or
         -9 mdiv -5 <>  1 or
        -10 mdiv -5 <>  2 then
      writeln(" ***** mdiv with two constants does not work correct.");
      okay := FALSE;
    end if;

    if  intExpr( 10) mdiv  5 <>  2 or
        intExpr(  9) mdiv  5 <>  1 or
        intExpr(  8) mdiv  5 <>  1 or
        intExpr(  7) mdiv  5 <>  1 or
        intExpr(  6) mdiv  5 <>  1 or
        intExpr(  5) mdiv  5 <>  1 or
        intExpr(  4) mdiv  5 <>  0 or
        intExpr(  3) mdiv  5 <>  0 or
        intExpr(  2) mdiv  5 <>  0 or
        intExpr(  1) mdiv  5 <>  0 or
        intExpr(  0) mdiv  5 <>  0 or
        intExpr( -1) mdiv  5 <> -1 or
        intExpr( -2) mdiv  5 <> -1 or
        intExpr( -3) mdiv  5 <> -1 or
        intExpr( -4) mdiv  5 <> -1 or
        intExpr( -5) mdiv  5 <> -1 or
        intExpr( -6) mdiv  5 <> -2 or
        intExpr( -7) mdiv  5 <> -2 or
        intExpr( -8) mdiv  5 <> -2 or
        intExpr( -9) mdiv  5 <> -2 or
        intExpr(-10) mdiv  5 <> -2 or
        intExpr( 10) mdiv  4 <>  2 or
        intExpr(  9) mdiv  4 <>  2 or
        intExpr(  8) mdiv  4 <>  2 or
        intExpr(  7) mdiv  4 <>  1 or
        intExpr(  6) mdiv  4 <>  1 or
        intExpr(  5) mdiv  4 <>  1 or
        intExpr(  4) mdiv  4 <>  1 or
        intExpr(  3) mdiv  4 <>  0 or
        intExpr(  2) mdiv  4 <>  0 or
        intExpr(  1) mdiv  4 <>  0 or
        intExpr(  0) mdiv  4 <>  0 or
        intExpr( -1) mdiv  4 <> -1 or
        intExpr( -2) mdiv  4 <> -1 or
        intExpr( -3) mdiv  4 <> -1 or
        intExpr( -4) mdiv  4 <> -1 or
        intExpr( -5) mdiv  4 <> -2 or
        intExpr( -6) mdiv  4 <> -2 or
        intExpr( -7) mdiv  4 <> -2 or
        intExpr( -8) mdiv  4 <> -2 or
        intExpr( -9) mdiv  4 <> -3 or
        intExpr(-10) mdiv  4 <> -3 or
        intExpr( 10) mdiv  3 <>  3 or
        intExpr(  9) mdiv  3 <>  3 or
        intExpr(  8) mdiv  3 <>  2 or
        intExpr(  7) mdiv  3 <>  2 or
        intExpr(  6) mdiv  3 <>  2 or
        intExpr(  5) mdiv  3 <>  1 or
        intExpr(  4) mdiv  3 <>  1 or
        intExpr(  3) mdiv  3 <>  1 or
        intExpr(  2) mdiv  3 <>  0 or
        intExpr(  1) mdiv  3 <>  0 or
        intExpr(  0) mdiv  3 <>  0 or
        intExpr( -1) mdiv  3 <> -1 or
        intExpr( -2) mdiv  3 <> -1 or
        intExpr( -3) mdiv  3 <> -1 or
        intExpr( -4) mdiv  3 <> -2 or
        intExpr( -5) mdiv  3 <> -2 or
        intExpr( -6) mdiv  3 <> -2 or
        intExpr( -7) mdiv  3 <> -3 or
        intExpr( -8) mdiv  3 <> -3 or
        intExpr( -9) mdiv  3 <> -3 or
        intExpr(-10) mdiv  3 <> -4 or
        intExpr( 10) mdiv  2 <>  5 or
        intExpr(  9) mdiv  2 <>  4 or
        intExpr(  8) mdiv  2 <>  4 or
        intExpr(  7) mdiv  2 <>  3 or
        intExpr(  6) mdiv  2 <>  3 or
        intExpr(  5) mdiv  2 <>  2 or
        intExpr(  4) mdiv  2 <>  2 or
        intExpr(  3) mdiv  2 <>  1 or
        intExpr(  2) mdiv  2 <>  1 or
        intExpr(  1) mdiv  2 <>  0 or
        intExpr(  0) mdiv  2 <>  0 or
        intExpr( -1) mdiv  2 <> -1 or
        intExpr( -2) mdiv  2 <> -1 or
        intExpr( -3) mdiv  2 <> -2 or
        intExpr( -4) mdiv  2 <> -2 or
        intExpr( -5) mdiv  2 <> -3 or
        intExpr( -6) mdiv  2 <> -3 or
        intExpr( -7) mdiv  2 <> -4 or
        intExpr( -8) mdiv  2 <> -4 or
        intExpr( -9) mdiv  2 <> -5 or
        intExpr(-10) mdiv  2 <> -5 or
        intExpr( 10) mdiv  1 <> 10 or
        intExpr(  9) mdiv  1 <>  9 or
        intExpr(  8) mdiv  1 <>  8 or
        intExpr(  7) mdiv  1 <>  7 or
        intExpr(  6) mdiv  1 <>  6 or
        intExpr(  5) mdiv  1 <>  5 or
        intExpr(  4) mdiv  1 <>  4 or
        intExpr(  3) mdiv  1 <>  3 or
        intExpr(  2) mdiv  1 <>  2 or
        intExpr(  1) mdiv  1 <>  1 or
        intExpr(  0) mdiv  1 <>  0 or
        intExpr( -1) mdiv  1 <> -1 or
        intExpr( -2) mdiv  1 <> -2 or
        intExpr( -3) mdiv  1 <> -3 or
        intExpr( -4) mdiv  1 <> -4 or
        intExpr( -5) mdiv  1 <> -5 or
        intExpr( -6) mdiv  1 <> -6 or
        intExpr( -7) mdiv  1 <> -7 or
        intExpr( -8) mdiv  1 <> -8 or
        intExpr( -9) mdiv  1 <> -9 or
        intExpr(-10) mdiv  1 <> -10 or
        intExpr( 10) mdiv -1 <> -10 or
        intExpr(  9) mdiv -1 <> -9 or
        intExpr(  8) mdiv -1 <> -8 or
        intExpr(  7) mdiv -1 <> -7 or
        intExpr(  6) mdiv -1 <> -6 or
        intExpr(  5) mdiv -1 <> -5 or
        intExpr(  4) mdiv -1 <> -4 or
        intExpr(  3) mdiv -1 <> -3 or
        intExpr(  2) mdiv -1 <> -2 or
        intExpr(  1) mdiv -1 <> -1 or
        intExpr(  0) mdiv -1 <>  0 or
        intExpr( -1) mdiv -1 <>  1 or
        intExpr( -2) mdiv -1 <>  2 or
        intExpr( -3) mdiv -1 <>  3 or
        intExpr( -4) mdiv -1 <>  4 or
        intExpr( -5) mdiv -1 <>  5 or
        intExpr( -6) mdiv -1 <>  6 or
        intExpr( -7) mdiv -1 <>  7 or
        intExpr( -8) mdiv -1 <>  8 or
        intExpr( -9) mdiv -1 <>  9 or
        intExpr(-10) mdiv -1 <> 10 or
        intExpr( 10) mdiv -2 <> -5 or
        intExpr(  9) mdiv -2 <> -5 or
        intExpr(  8) mdiv -2 <> -4 or
        intExpr(  7) mdiv -2 <> -4 or
        intExpr(  6) mdiv -2 <> -3 or
        intExpr(  5) mdiv -2 <> -3 or
        intExpr(  4) mdiv -2 <> -2 or
        intExpr(  3) mdiv -2 <> -2 or
        intExpr(  2) mdiv -2 <> -1 or
        intExpr(  1) mdiv -2 <> -1 or
        intExpr(  0) mdiv -2 <>  0 or
        intExpr( -1) mdiv -2 <>  0 or
        intExpr( -2) mdiv -2 <>  1 or
        intExpr( -3) mdiv -2 <>  1 or
        intExpr( -4) mdiv -2 <>  2 or
        intExpr( -5) mdiv -2 <>  2 or
        intExpr( -6) mdiv -2 <>  3 or
        intExpr( -7) mdiv -2 <>  3 or
        intExpr( -8) mdiv -2 <>  4 or
        intExpr( -9) mdiv -2 <>  4 or
        intExpr(-10) mdiv -2 <>  5 or
        intExpr( 10) mdiv -3 <> -4 or
        intExpr(  9) mdiv -3 <> -3 or
        intExpr(  8) mdiv -3 <> -3 or
        intExpr(  7) mdiv -3 <> -3 or
        intExpr(  6) mdiv -3 <> -2 or
        intExpr(  5) mdiv -3 <> -2 or
        intExpr(  4) mdiv -3 <> -2 or
        intExpr(  3) mdiv -3 <> -1 or
        intExpr(  2) mdiv -3 <> -1 or
        intExpr(  1) mdiv -3 <> -1 or
        intExpr(  0) mdiv -3 <>  0 or
        intExpr( -1) mdiv -3 <>  0 or
        intExpr( -2) mdiv -3 <>  0 or
        intExpr( -3) mdiv -3 <>  1 or
        intExpr( -4) mdiv -3 <>  1 or
        intExpr( -5) mdiv -3 <>  1 or
        intExpr( -6) mdiv -3 <>  2 or
        intExpr( -7) mdiv -3 <>  2 or
        intExpr( -8) mdiv -3 <>  2 or
        intExpr( -9) mdiv -3 <>  3 or
        intExpr(-10) mdiv -3 <>  3 or
        intExpr( 10) mdiv -4 <> -3 or
        intExpr(  9) mdiv -4 <> -3 or
        intExpr(  8) mdiv -4 <> -2 or
        intExpr(  7) mdiv -4 <> -2 or
        intExpr(  6) mdiv -4 <> -2 or
        intExpr(  5) mdiv -4 <> -2 or
        intExpr(  4) mdiv -4 <> -1 or
        intExpr(  3) mdiv -4 <> -1 or
        intExpr(  2) mdiv -4 <> -1 or
        intExpr(  1) mdiv -4 <> -1 or
        intExpr(  0) mdiv -4 <>  0 or
        intExpr( -1) mdiv -4 <>  0 or
        intExpr( -2) mdiv -4 <>  0 or
        intExpr( -3) mdiv -4 <>  0 or
        intExpr( -4) mdiv -4 <>  1 or
        intExpr( -5) mdiv -4 <>  1 or
        intExpr( -6) mdiv -4 <>  1 or
        intExpr( -7) mdiv -4 <>  1 or
        intExpr( -8) mdiv -4 <>  2 or
        intExpr( -9) mdiv -4 <>  2 or
        intExpr(-10) mdiv -4 <>  2 or
        intExpr( 10) mdiv -5 <> -2 or
        intExpr(  9) mdiv -5 <> -2 or
        intExpr(  8) mdiv -5 <> -2 or
        intExpr(  7) mdiv -5 <> -2 or
        intExpr(  6) mdiv -5 <> -2 or
        intExpr(  5) mdiv -5 <> -1 or
        intExpr(  4) mdiv -5 <> -1 or
        intExpr(  3) mdiv -5 <> -1 or
        intExpr(  2) mdiv -5 <> -1 or
        intExpr(  1) mdiv -5 <> -1 or
        intExpr(  0) mdiv -5 <>  0 or
        intExpr( -1) mdiv -5 <>  0 or
        intExpr( -2) mdiv -5 <>  0 or
        intExpr( -3) mdiv -5 <>  0 or
        intExpr( -4) mdiv -5 <>  0 or
        intExpr( -5) mdiv -5 <>  1 or
        intExpr( -6) mdiv -5 <>  1 or
        intExpr( -7) mdiv -5 <>  1 or
        intExpr( -8) mdiv -5 <>  1 or
        intExpr( -9) mdiv -5 <>  1 or
        intExpr(-10) mdiv -5 <>  2 then
      writeln(" ***** mdiv with an expression and a constant does not work correct");
      okay := FALSE;
    end if;

    if   10 mdiv intExpr( 5) <>  2 or
          9 mdiv intExpr( 5) <>  1 or
          8 mdiv intExpr( 5) <>  1 or
          7 mdiv intExpr( 5) <>  1 or
          6 mdiv intExpr( 5) <>  1 or
          5 mdiv intExpr( 5) <>  1 or
          4 mdiv intExpr( 5) <>  0 or
          3 mdiv intExpr( 5) <>  0 or
          2 mdiv intExpr( 5) <>  0 or
          1 mdiv intExpr( 5) <>  0 or
          0 mdiv intExpr( 5) <>  0 or
         -1 mdiv intExpr( 5) <> -1 or
         -2 mdiv intExpr( 5) <> -1 or
         -3 mdiv intExpr( 5) <> -1 or
         -4 mdiv intExpr( 5) <> -1 or
         -5 mdiv intExpr( 5) <> -1 or
         -6 mdiv intExpr( 5) <> -2 or
         -7 mdiv intExpr( 5) <> -2 or
         -8 mdiv intExpr( 5) <> -2 or
         -9 mdiv intExpr( 5) <> -2 or
        -10 mdiv intExpr( 5) <> -2 or
         10 mdiv intExpr( 4) <>  2 or
          9 mdiv intExpr( 4) <>  2 or
          8 mdiv intExpr( 4) <>  2 or
          7 mdiv intExpr( 4) <>  1 or
          6 mdiv intExpr( 4) <>  1 or
          5 mdiv intExpr( 4) <>  1 or
          4 mdiv intExpr( 4) <>  1 or
          3 mdiv intExpr( 4) <>  0 or
          2 mdiv intExpr( 4) <>  0 or
          1 mdiv intExpr( 4) <>  0 or
          0 mdiv intExpr( 4) <>  0 or
         -1 mdiv intExpr( 4) <> -1 or
         -2 mdiv intExpr( 4) <> -1 or
         -3 mdiv intExpr( 4) <> -1 or
         -4 mdiv intExpr( 4) <> -1 or
         -5 mdiv intExpr( 4) <> -2 or
         -6 mdiv intExpr( 4) <> -2 or
         -7 mdiv intExpr( 4) <> -2 or
         -8 mdiv intExpr( 4) <> -2 or
         -9 mdiv intExpr( 4) <> -3 or
        -10 mdiv intExpr( 4) <> -3 or
         10 mdiv intExpr( 3) <>  3 or
          9 mdiv intExpr( 3) <>  3 or
          8 mdiv intExpr( 3) <>  2 or
          7 mdiv intExpr( 3) <>  2 or
          6 mdiv intExpr( 3) <>  2 or
          5 mdiv intExpr( 3) <>  1 or
          4 mdiv intExpr( 3) <>  1 or
          3 mdiv intExpr( 3) <>  1 or
          2 mdiv intExpr( 3) <>  0 or
          1 mdiv intExpr( 3) <>  0 or
          0 mdiv intExpr( 3) <>  0 or
         -1 mdiv intExpr( 3) <> -1 or
         -2 mdiv intExpr( 3) <> -1 or
         -3 mdiv intExpr( 3) <> -1 or
         -4 mdiv intExpr( 3) <> -2 or
         -5 mdiv intExpr( 3) <> -2 or
         -6 mdiv intExpr( 3) <> -2 or
         -7 mdiv intExpr( 3) <> -3 or
         -8 mdiv intExpr( 3) <> -3 or
         -9 mdiv intExpr( 3) <> -3 or
        -10 mdiv intExpr( 3) <> -4 or
         10 mdiv intExpr( 2) <>  5 or
          9 mdiv intExpr( 2) <>  4 or
          8 mdiv intExpr( 2) <>  4 or
          7 mdiv intExpr( 2) <>  3 or
          6 mdiv intExpr( 2) <>  3 or
          5 mdiv intExpr( 2) <>  2 or
          4 mdiv intExpr( 2) <>  2 or
          3 mdiv intExpr( 2) <>  1 or
          2 mdiv intExpr( 2) <>  1 or
          1 mdiv intExpr( 2) <>  0 or
          0 mdiv intExpr( 2) <>  0 or
         -1 mdiv intExpr( 2) <> -1 or
         -2 mdiv intExpr( 2) <> -1 or
         -3 mdiv intExpr( 2) <> -2 or
         -4 mdiv intExpr( 2) <> -2 or
         -5 mdiv intExpr( 2) <> -3 or
         -6 mdiv intExpr( 2) <> -3 or
         -7 mdiv intExpr( 2) <> -4 or
         -8 mdiv intExpr( 2) <> -4 or
         -9 mdiv intExpr( 2) <> -5 or
        -10 mdiv intExpr( 2) <> -5 or
         10 mdiv intExpr( 1) <> 10 or
          9 mdiv intExpr( 1) <>  9 or
          8 mdiv intExpr( 1) <>  8 or
          7 mdiv intExpr( 1) <>  7 or
          6 mdiv intExpr( 1) <>  6 or
          5 mdiv intExpr( 1) <>  5 or
          4 mdiv intExpr( 1) <>  4 or
          3 mdiv intExpr( 1) <>  3 or
          2 mdiv intExpr( 1) <>  2 or
          1 mdiv intExpr( 1) <>  1 or
          0 mdiv intExpr( 1) <>  0 or
         -1 mdiv intExpr( 1) <> -1 or
         -2 mdiv intExpr( 1) <> -2 or
         -3 mdiv intExpr( 1) <> -3 or
         -4 mdiv intExpr( 1) <> -4 or
         -5 mdiv intExpr( 1) <> -5 or
         -6 mdiv intExpr( 1) <> -6 or
         -7 mdiv intExpr( 1) <> -7 or
         -8 mdiv intExpr( 1) <> -8 or
         -9 mdiv intExpr( 1) <> -9 or
        -10 mdiv intExpr( 1) <> -10 or
         10 mdiv intExpr(-1) <> -10 or
          9 mdiv intExpr(-1) <> -9 or
          8 mdiv intExpr(-1) <> -8 or
          7 mdiv intExpr(-1) <> -7 or
          6 mdiv intExpr(-1) <> -6 or
          5 mdiv intExpr(-1) <> -5 or
          4 mdiv intExpr(-1) <> -4 or
          3 mdiv intExpr(-1) <> -3 or
          2 mdiv intExpr(-1) <> -2 or
          1 mdiv intExpr(-1) <> -1 or
          0 mdiv intExpr(-1) <>  0 or
         -1 mdiv intExpr(-1) <>  1 or
         -2 mdiv intExpr(-1) <>  2 or
         -3 mdiv intExpr(-1) <>  3 or
         -4 mdiv intExpr(-1) <>  4 or
         -5 mdiv intExpr(-1) <>  5 or
         -6 mdiv intExpr(-1) <>  6 or
         -7 mdiv intExpr(-1) <>  7 or
         -8 mdiv intExpr(-1) <>  8 or
         -9 mdiv intExpr(-1) <>  9 or
        -10 mdiv intExpr(-1) <> 10 or
         10 mdiv intExpr(-2) <> -5 or
          9 mdiv intExpr(-2) <> -5 or
          8 mdiv intExpr(-2) <> -4 or
          7 mdiv intExpr(-2) <> -4 or
          6 mdiv intExpr(-2) <> -3 or
          5 mdiv intExpr(-2) <> -3 or
          4 mdiv intExpr(-2) <> -2 or
          3 mdiv intExpr(-2) <> -2 or
          2 mdiv intExpr(-2) <> -1 or
          1 mdiv intExpr(-2) <> -1 or
          0 mdiv intExpr(-2) <>  0 or
         -1 mdiv intExpr(-2) <>  0 or
         -2 mdiv intExpr(-2) <>  1 or
         -3 mdiv intExpr(-2) <>  1 or
         -4 mdiv intExpr(-2) <>  2 or
         -5 mdiv intExpr(-2) <>  2 or
         -6 mdiv intExpr(-2) <>  3 or
         -7 mdiv intExpr(-2) <>  3 or
         -8 mdiv intExpr(-2) <>  4 or
         -9 mdiv intExpr(-2) <>  4 or
        -10 mdiv intExpr(-2) <>  5 or
         10 mdiv intExpr(-3) <> -4 or
          9 mdiv intExpr(-3) <> -3 or
          8 mdiv intExpr(-3) <> -3 or
          7 mdiv intExpr(-3) <> -3 or
          6 mdiv intExpr(-3) <> -2 or
          5 mdiv intExpr(-3) <> -2 or
          4 mdiv intExpr(-3) <> -2 or
          3 mdiv intExpr(-3) <> -1 or
          2 mdiv intExpr(-3) <> -1 or
          1 mdiv intExpr(-3) <> -1 or
          0 mdiv intExpr(-3) <>  0 or
         -1 mdiv intExpr(-3) <>  0 or
         -2 mdiv intExpr(-3) <>  0 or
         -3 mdiv intExpr(-3) <>  1 or
         -4 mdiv intExpr(-3) <>  1 or
         -5 mdiv intExpr(-3) <>  1 or
         -6 mdiv intExpr(-3) <>  2 or
         -7 mdiv intExpr(-3) <>  2 or
         -8 mdiv intExpr(-3) <>  2 or
         -9 mdiv intExpr(-3) <>  3 or
        -10 mdiv intExpr(-3) <>  3 or
         10 mdiv intExpr(-4) <> -3 or
          9 mdiv intExpr(-4) <> -3 or
          8 mdiv intExpr(-4) <> -2 or
          7 mdiv intExpr(-4) <> -2 or
          6 mdiv intExpr(-4) <> -2 or
          5 mdiv intExpr(-4) <> -2 or
          4 mdiv intExpr(-4) <> -1 or
          3 mdiv intExpr(-4) <> -1 or
          2 mdiv intExpr(-4) <> -1 or
          1 mdiv intExpr(-4) <> -1 or
          0 mdiv intExpr(-4) <>  0 or
         -1 mdiv intExpr(-4) <>  0 or
         -2 mdiv intExpr(-4) <>  0 or
         -3 mdiv intExpr(-4) <>  0 or
         -4 mdiv intExpr(-4) <>  1 or
         -5 mdiv intExpr(-4) <>  1 or
         -6 mdiv intExpr(-4) <>  1 or
         -7 mdiv intExpr(-4) <>  1 or
         -8 mdiv intExpr(-4) <>  2 or
         -9 mdiv intExpr(-4) <>  2 or
        -10 mdiv intExpr(-4) <>  2 or
         10 mdiv intExpr(-5) <> -2 or
          9 mdiv intExpr(-5) <> -2 or
          8 mdiv intExpr(-5) <> -2 or
          7 mdiv intExpr(-5) <> -2 or
          6 mdiv intExpr(-5) <> -2 or
          5 mdiv intExpr(-5) <> -1 or
          4 mdiv intExpr(-5) <> -1 or
          3 mdiv intExpr(-5) <> -1 or
          2 mdiv intExpr(-5) <> -1 or
          1 mdiv intExpr(-5) <> -1 or
          0 mdiv intExpr(-5) <>  0 or
         -1 mdiv intExpr(-5) <>  0 or
         -2 mdiv intExpr(-5) <>  0 or
         -3 mdiv intExpr(-5) <>  0 or
         -4 mdiv intExpr(-5) <>  0 or
         -5 mdiv intExpr(-5) <>  1 or
         -6 mdiv intExpr(-5) <>  1 or
         -7 mdiv intExpr(-5) <>  1 or
         -8 mdiv intExpr(-5) <>  1 or
         -9 mdiv intExpr(-5) <>  1 or
        -10 mdiv intExpr(-5) <>  2 then
      writeln(" ***** mdiv with a constant and an expression does not work correct.");
      okay := FALSE;
    end if;

    if  intExpr( 10) mdiv intExpr( 5) <>  2 or
        intExpr(  9) mdiv intExpr( 5) <>  1 or
        intExpr(  8) mdiv intExpr( 5) <>  1 or
        intExpr(  7) mdiv intExpr( 5) <>  1 or
        intExpr(  6) mdiv intExpr( 5) <>  1 or
        intExpr(  5) mdiv intExpr( 5) <>  1 or
        intExpr(  4) mdiv intExpr( 5) <>  0 or
        intExpr(  3) mdiv intExpr( 5) <>  0 or
        intExpr(  2) mdiv intExpr( 5) <>  0 or
        intExpr(  1) mdiv intExpr( 5) <>  0 or
        intExpr(  0) mdiv intExpr( 5) <>  0 or
        intExpr( -1) mdiv intExpr( 5) <> -1 or
        intExpr( -2) mdiv intExpr( 5) <> -1 or
        intExpr( -3) mdiv intExpr( 5) <> -1 or
        intExpr( -4) mdiv intExpr( 5) <> -1 or
        intExpr( -5) mdiv intExpr( 5) <> -1 or
        intExpr( -6) mdiv intExpr( 5) <> -2 or
        intExpr( -7) mdiv intExpr( 5) <> -2 or
        intExpr( -8) mdiv intExpr( 5) <> -2 or
        intExpr( -9) mdiv intExpr( 5) <> -2 or
        intExpr(-10) mdiv intExpr( 5) <> -2 or
        intExpr( 10) mdiv intExpr( 4) <>  2 or
        intExpr(  9) mdiv intExpr( 4) <>  2 or
        intExpr(  8) mdiv intExpr( 4) <>  2 or
        intExpr(  7) mdiv intExpr( 4) <>  1 or
        intExpr(  6) mdiv intExpr( 4) <>  1 or
        intExpr(  5) mdiv intExpr( 4) <>  1 or
        intExpr(  4) mdiv intExpr( 4) <>  1 or
        intExpr(  3) mdiv intExpr( 4) <>  0 or
        intExpr(  2) mdiv intExpr( 4) <>  0 or
        intExpr(  1) mdiv intExpr( 4) <>  0 or
        intExpr(  0) mdiv intExpr( 4) <>  0 or
        intExpr( -1) mdiv intExpr( 4) <> -1 or
        intExpr( -2) mdiv intExpr( 4) <> -1 or
        intExpr( -3) mdiv intExpr( 4) <> -1 or
        intExpr( -4) mdiv intExpr( 4) <> -1 or
        intExpr( -5) mdiv intExpr( 4) <> -2 or
        intExpr( -6) mdiv intExpr( 4) <> -2 or
        intExpr( -7) mdiv intExpr( 4) <> -2 or
        intExpr( -8) mdiv intExpr( 4) <> -2 or
        intExpr( -9) mdiv intExpr( 4) <> -3 or
        intExpr(-10) mdiv intExpr( 4) <> -3 or
        intExpr( 10) mdiv intExpr( 3) <>  3 or
        intExpr(  9) mdiv intExpr( 3) <>  3 or
        intExpr(  8) mdiv intExpr( 3) <>  2 or
        intExpr(  7) mdiv intExpr( 3) <>  2 or
        intExpr(  6) mdiv intExpr( 3) <>  2 or
        intExpr(  5) mdiv intExpr( 3) <>  1 or
        intExpr(  4) mdiv intExpr( 3) <>  1 or
        intExpr(  3) mdiv intExpr( 3) <>  1 or
        intExpr(  2) mdiv intExpr( 3) <>  0 or
        intExpr(  1) mdiv intExpr( 3) <>  0 or
        intExpr(  0) mdiv intExpr( 3) <>  0 or
        intExpr( -1) mdiv intExpr( 3) <> -1 or
        intExpr( -2) mdiv intExpr( 3) <> -1 or
        intExpr( -3) mdiv intExpr( 3) <> -1 or
        intExpr( -4) mdiv intExpr( 3) <> -2 or
        intExpr( -5) mdiv intExpr( 3) <> -2 or
        intExpr( -6) mdiv intExpr( 3) <> -2 or
        intExpr( -7) mdiv intExpr( 3) <> -3 or
        intExpr( -8) mdiv intExpr( 3) <> -3 or
        intExpr( -9) mdiv intExpr( 3) <> -3 or
        intExpr(-10) mdiv intExpr( 3) <> -4 or
        intExpr( 10) mdiv intExpr( 2) <>  5 or
        intExpr(  9) mdiv intExpr( 2) <>  4 or
        intExpr(  8) mdiv intExpr( 2) <>  4 or
        intExpr(  7) mdiv intExpr( 2) <>  3 or
        intExpr(  6) mdiv intExpr( 2) <>  3 or
        intExpr(  5) mdiv intExpr( 2) <>  2 or
        intExpr(  4) mdiv intExpr( 2) <>  2 or
        intExpr(  3) mdiv intExpr( 2) <>  1 or
        intExpr(  2) mdiv intExpr( 2) <>  1 or
        intExpr(  1) mdiv intExpr( 2) <>  0 or
        intExpr(  0) mdiv intExpr( 2) <>  0 or
        intExpr( -1) mdiv intExpr( 2) <> -1 or
        intExpr( -2) mdiv intExpr( 2) <> -1 or
        intExpr( -3) mdiv intExpr( 2) <> -2 or
        intExpr( -4) mdiv intExpr( 2) <> -2 or
        intExpr( -5) mdiv intExpr( 2) <> -3 or
        intExpr( -6) mdiv intExpr( 2) <> -3 or
        intExpr( -7) mdiv intExpr( 2) <> -4 or
        intExpr( -8) mdiv intExpr( 2) <> -4 or
        intExpr( -9) mdiv intExpr( 2) <> -5 or
        intExpr(-10) mdiv intExpr( 2) <> -5 or
        intExpr( 10) mdiv intExpr( 1) <> 10 or
        intExpr(  9) mdiv intExpr( 1) <>  9 or
        intExpr(  8) mdiv intExpr( 1) <>  8 or
        intExpr(  7) mdiv intExpr( 1) <>  7 or
        intExpr(  6) mdiv intExpr( 1) <>  6 or
        intExpr(  5) mdiv intExpr( 1) <>  5 or
        intExpr(  4) mdiv intExpr( 1) <>  4 or
        intExpr(  3) mdiv intExpr( 1) <>  3 or
        intExpr(  2) mdiv intExpr( 1) <>  2 or
        intExpr(  1) mdiv intExpr( 1) <>  1 or
        intExpr(  0) mdiv intExpr( 1) <>  0 or
        intExpr( -1) mdiv intExpr( 1) <> -1 or
        intExpr( -2) mdiv intExpr( 1) <> -2 or
        intExpr( -3) mdiv intExpr( 1) <> -3 or
        intExpr( -4) mdiv intExpr( 1) <> -4 or
        intExpr( -5) mdiv intExpr( 1) <> -5 or
        intExpr( -6) mdiv intExpr( 1) <> -6 or
        intExpr( -7) mdiv intExpr( 1) <> -7 or
        intExpr( -8) mdiv intExpr( 1) <> -8 or
        intExpr( -9) mdiv intExpr( 1) <> -9 or
        intExpr(-10) mdiv intExpr( 1) <> -10 or
        intExpr( 10) mdiv intExpr(-1) <> -10 or
        intExpr(  9) mdiv intExpr(-1) <> -9 or
        intExpr(  8) mdiv intExpr(-1) <> -8 or
        intExpr(  7) mdiv intExpr(-1) <> -7 or
        intExpr(  6) mdiv intExpr(-1) <> -6 or
        intExpr(  5) mdiv intExpr(-1) <> -5 or
        intExpr(  4) mdiv intExpr(-1) <> -4 or
        intExpr(  3) mdiv intExpr(-1) <> -3 or
        intExpr(  2) mdiv intExpr(-1) <> -2 or
        intExpr(  1) mdiv intExpr(-1) <> -1 or
        intExpr(  0) mdiv intExpr(-1) <>  0 or
        intExpr( -1) mdiv intExpr(-1) <>  1 or
        intExpr( -2) mdiv intExpr(-1) <>  2 or
        intExpr( -3) mdiv intExpr(-1) <>  3 or
        intExpr( -4) mdiv intExpr(-1) <>  4 or
        intExpr( -5) mdiv intExpr(-1) <>  5 or
        intExpr( -6) mdiv intExpr(-1) <>  6 or
        intExpr( -7) mdiv intExpr(-1) <>  7 or
        intExpr( -8) mdiv intExpr(-1) <>  8 or
        intExpr( -9) mdiv intExpr(-1) <>  9 or
        intExpr(-10) mdiv intExpr(-1) <> 10 or
        intExpr( 10) mdiv intExpr(-2) <> -5 or
        intExpr(  9) mdiv intExpr(-2) <> -5 or
        intExpr(  8) mdiv intExpr(-2) <> -4 or
        intExpr(  7) mdiv intExpr(-2) <> -4 or
        intExpr(  6) mdiv intExpr(-2) <> -3 or
        intExpr(  5) mdiv intExpr(-2) <> -3 or
        intExpr(  4) mdiv intExpr(-2) <> -2 or
        intExpr(  3) mdiv intExpr(-2) <> -2 or
        intExpr(  2) mdiv intExpr(-2) <> -1 or
        intExpr(  1) mdiv intExpr(-2) <> -1 or
        intExpr(  0) mdiv intExpr(-2) <>  0 or
        intExpr( -1) mdiv intExpr(-2) <>  0 or
        intExpr( -2) mdiv intExpr(-2) <>  1 or
        intExpr( -3) mdiv intExpr(-2) <>  1 or
        intExpr( -4) mdiv intExpr(-2) <>  2 or
        intExpr( -5) mdiv intExpr(-2) <>  2 or
        intExpr( -6) mdiv intExpr(-2) <>  3 or
        intExpr( -7) mdiv intExpr(-2) <>  3 or
        intExpr( -8) mdiv intExpr(-2) <>  4 or
        intExpr( -9) mdiv intExpr(-2) <>  4 or
        intExpr(-10) mdiv intExpr(-2) <>  5 or
        intExpr( 10) mdiv intExpr(-3) <> -4 or
        intExpr(  9) mdiv intExpr(-3) <> -3 or
        intExpr(  8) mdiv intExpr(-3) <> -3 or
        intExpr(  7) mdiv intExpr(-3) <> -3 or
        intExpr(  6) mdiv intExpr(-3) <> -2 or
        intExpr(  5) mdiv intExpr(-3) <> -2 or
        intExpr(  4) mdiv intExpr(-3) <> -2 or
        intExpr(  3) mdiv intExpr(-3) <> -1 or
        intExpr(  2) mdiv intExpr(-3) <> -1 or
        intExpr(  1) mdiv intExpr(-3) <> -1 or
        intExpr(  0) mdiv intExpr(-3) <>  0 or
        intExpr( -1) mdiv intExpr(-3) <>  0 or
        intExpr( -2) mdiv intExpr(-3) <>  0 or
        intExpr( -3) mdiv intExpr(-3) <>  1 or
        intExpr( -4) mdiv intExpr(-3) <>  1 or
        intExpr( -5) mdiv intExpr(-3) <>  1 or
        intExpr( -6) mdiv intExpr(-3) <>  2 or
        intExpr( -7) mdiv intExpr(-3) <>  2 or
        intExpr( -8) mdiv intExpr(-3) <>  2 or
        intExpr( -9) mdiv intExpr(-3) <>  3 or
        intExpr(-10) mdiv intExpr(-3) <>  3 or
        intExpr( 10) mdiv intExpr(-4) <> -3 or
        intExpr(  9) mdiv intExpr(-4) <> -3 or
        intExpr(  8) mdiv intExpr(-4) <> -2 or
        intExpr(  7) mdiv intExpr(-4) <> -2 or
        intExpr(  6) mdiv intExpr(-4) <> -2 or
        intExpr(  5) mdiv intExpr(-4) <> -2 or
        intExpr(  4) mdiv intExpr(-4) <> -1 or
        intExpr(  3) mdiv intExpr(-4) <> -1 or
        intExpr(  2) mdiv intExpr(-4) <> -1 or
        intExpr(  1) mdiv intExpr(-4) <> -1 or
        intExpr(  0) mdiv intExpr(-4) <>  0 or
        intExpr( -1) mdiv intExpr(-4) <>  0 or
        intExpr( -2) mdiv intExpr(-4) <>  0 or
        intExpr( -3) mdiv intExpr(-4) <>  0 or
        intExpr( -4) mdiv intExpr(-4) <>  1 or
        intExpr( -5) mdiv intExpr(-4) <>  1 or
        intExpr( -6) mdiv intExpr(-4) <>  1 or
        intExpr( -7) mdiv intExpr(-4) <>  1 or
        intExpr( -8) mdiv intExpr(-4) <>  2 or
        intExpr( -9) mdiv intExpr(-4) <>  2 or
        intExpr(-10) mdiv intExpr(-4) <>  2 or
        intExpr( 10) mdiv intExpr(-5) <> -2 or
        intExpr(  9) mdiv intExpr(-5) <> -2 or
        intExpr(  8) mdiv intExpr(-5) <> -2 or
        intExpr(  7) mdiv intExpr(-5) <> -2 or
        intExpr(  6) mdiv intExpr(-5) <> -2 or
        intExpr(  5) mdiv intExpr(-5) <> -1 or
        intExpr(  4) mdiv intExpr(-5) <> -1 or
        intExpr(  3) mdiv intExpr(-5) <> -1 or
        intExpr(  2) mdiv intExpr(-5) <> -1 or
        intExpr(  1) mdiv intExpr(-5) <> -1 or
        intExpr(  0) mdiv intExpr(-5) <>  0 or
        intExpr( -1) mdiv intExpr(-5) <>  0 or
        intExpr( -2) mdiv intExpr(-5) <>  0 or
        intExpr( -3) mdiv intExpr(-5) <>  0 or
        intExpr( -4) mdiv intExpr(-5) <>  0 or
        intExpr( -5) mdiv intExpr(-5) <>  1 or
        intExpr( -6) mdiv intExpr(-5) <>  1 or
        intExpr( -7) mdiv intExpr(-5) <>  1 or
        intExpr( -8) mdiv intExpr(-5) <>  1 or
        intExpr( -9) mdiv intExpr(-5) <>  1 or
        intExpr(-10) mdiv intExpr(-5) <>  2 then
      writeln(" ***** mdiv with two expressions does not work correct.");
      okay := FALSE;
    end if;

    if not check_mdiv_min_max then
      okay := FALSE;
    end if;

    if not check_mdiv_by_zero then
      okay := FALSE;
    end if;

    if okay then
      writeln("Mdiv works correct for selected values.");
    else
      writeln(" ***** mdiv does not work correct.");
    end if;
  end func;


const func boolean: check_mod_min_max is func
  result
    var boolean: okay is TRUE;
  begin
    if         2109876543  mod           INT32_MIN  <>   -37607105 or
               2109876543  mod         -1073741824  <>   -37607105 or
               2109876543  mod          -536870912  <>   -37607105 or
               2109876543  mod          -268435456  <>   -37607105 or
               2109876543  mod          -134217728  <>   -37607105 or
               2109876543  mod           -67108864  <>   -37607105 or
               2109876543  mod           -33554432  <>    -4052673 or
               2109876543  mod           -16777216  <>    -4052673 or
               2109876543  mod            -8388608  <>    -4052673 or
               2109876543  mod            -4194304  <>    -4052673 or
               2109876543  mod            -2097152  <>    -1955521 or
               2109876543  mod            -1048576  <>     -906945 or
               2109876543  mod             -524288  <>     -382657 or
               2109876543  mod             -262144  <>     -120513 or
               2109876543  mod             -131072  <>     -120513 or
               2109876543  mod              -65536  <>      -54977 or
               2109876543  mod              -32768  <>      -22209 or
               2109876543  mod              -16384  <>       -5825 or
               2109876543  mod               -8192  <>       -5825 or
               2109876543  mod               -4096  <>       -1729 or
               2109876543  mod               -2048  <>       -1729 or
               2109876543  mod               -1024  <>        -705 or
               2109876543  mod                -512  <>        -193 or
               2109876543  mod                -256  <>        -193 or
               2109876543  mod                -128  <>         -65 or
               2109876543  mod                 -64  <>          -1 or
               2109876543  mod                 -32  <>          -1 or
               2109876543  mod                 -16  <>          -1 or
               2109876543  mod                  -8  <>          -1 or
               2109876543  mod                  -4  <>          -1 or
               2109876543  mod                  -2  <>          -1 or
               2109876543  mod                   2  <>           1 or
               2109876543  mod                   4  <>           3 or
               2109876543  mod                   8  <>           7 or
               2109876543  mod                  16  <>          15 or
               2109876543  mod                  32  <>          31 or
               2109876543  mod                  64  <>          63 or
               2109876543  mod                 128  <>          63 or
               2109876543  mod                 256  <>          63 or
               2109876543  mod                 512  <>         319 or
               2109876543  mod                1024  <>         319 or
               2109876543  mod                2048  <>         319 or
               2109876543  mod                4096  <>        2367 or
               2109876543  mod                8192  <>        2367 or
               2109876543  mod               16384  <>       10559 or
               2109876543  mod               32768  <>       10559 or
               2109876543  mod               65536  <>       10559 or
               2109876543  mod              131072  <>       10559 or
               2109876543  mod              262144  <>      141631 or
               2109876543  mod              524288  <>      141631 or
               2109876543  mod             1048576  <>      141631 or
               2109876543  mod             2097152  <>      141631 or
               2109876543  mod             4194304  <>      141631 or
               2109876543  mod             8388608  <>     4335935 or
               2109876543  mod            16777216  <>    12724543 or
               2109876543  mod            33554432  <>    29501759 or
               2109876543  mod            67108864  <>    29501759 or
               2109876543  mod           134217728  <>    96610623 or
               2109876543  mod           268435456  <>   230828351 or
               2109876543  mod           536870912  <>   499263807 or
               2109876543  mod          1073741824  <>  1036134719 or
       intExpr(2109876543) mod           INT32_MIN  <>   -37607105 or
       intExpr(2109876543) mod         -1073741824  <>   -37607105 or
       intExpr(2109876543) mod          -536870912  <>   -37607105 or
       intExpr(2109876543) mod          -268435456  <>   -37607105 or
       intExpr(2109876543) mod          -134217728  <>   -37607105 or
       intExpr(2109876543) mod           -67108864  <>   -37607105 or
       intExpr(2109876543) mod           -33554432  <>    -4052673 or
       intExpr(2109876543) mod           -16777216  <>    -4052673 or
       intExpr(2109876543) mod            -8388608  <>    -4052673 or
       intExpr(2109876543) mod            -4194304  <>    -4052673 or
       intExpr(2109876543) mod            -2097152  <>    -1955521 or
       intExpr(2109876543) mod            -1048576  <>     -906945 or
       intExpr(2109876543) mod             -524288  <>     -382657 or
       intExpr(2109876543) mod             -262144  <>     -120513 or
       intExpr(2109876543) mod             -131072  <>     -120513 or
       intExpr(2109876543) mod              -65536  <>      -54977 or
       intExpr(2109876543) mod              -32768  <>      -22209 or
       intExpr(2109876543) mod              -16384  <>       -5825 or
       intExpr(2109876543) mod               -8192  <>       -5825 or
       intExpr(2109876543) mod               -4096  <>       -1729 or
       intExpr(2109876543) mod               -2048  <>       -1729 or
       intExpr(2109876543) mod               -1024  <>        -705 or
       intExpr(2109876543) mod                -512  <>        -193 or
       intExpr(2109876543) mod                -256  <>        -193 or
       intExpr(2109876543) mod                -128  <>         -65 or
       intExpr(2109876543) mod                 -64  <>          -1 or
       intExpr(2109876543) mod                 -32  <>          -1 or
       intExpr(2109876543) mod                 -16  <>          -1 or
       intExpr(2109876543) mod                  -8  <>          -1 or
       intExpr(2109876543) mod                  -4  <>          -1 or
       intExpr(2109876543) mod                  -2  <>          -1 or
       intExpr(2109876543) mod                   2  <>           1 or
       intExpr(2109876543) mod                   4  <>           3 or
       intExpr(2109876543) mod                   8  <>           7 or
       intExpr(2109876543) mod                  16  <>          15 or
       intExpr(2109876543) mod                  32  <>          31 or
       intExpr(2109876543) mod                  64  <>          63 or
       intExpr(2109876543) mod                 128  <>          63 or
       intExpr(2109876543) mod                 256  <>          63 or
       intExpr(2109876543) mod                 512  <>         319 or
       intExpr(2109876543) mod                1024  <>         319 or
       intExpr(2109876543) mod                2048  <>         319 or
       intExpr(2109876543) mod                4096  <>        2367 or
       intExpr(2109876543) mod                8192  <>        2367 or
       intExpr(2109876543) mod               16384  <>       10559 or
       intExpr(2109876543) mod               32768  <>       10559 or
       intExpr(2109876543) mod               65536  <>       10559 or
       intExpr(2109876543) mod              131072  <>       10559 or
       intExpr(2109876543) mod              262144  <>      141631 or
       intExpr(2109876543) mod              524288  <>      141631 or
       intExpr(2109876543) mod             1048576  <>      141631 or
       intExpr(2109876543) mod             2097152  <>      141631 or
       intExpr(2109876543) mod             4194304  <>      141631 or
       intExpr(2109876543) mod             8388608  <>     4335935 or
       intExpr(2109876543) mod            16777216  <>    12724543 or
       intExpr(2109876543) mod            33554432  <>    29501759 or
       intExpr(2109876543) mod            67108864  <>    29501759 or
       intExpr(2109876543) mod           134217728  <>    96610623 or
       intExpr(2109876543) mod           268435456  <>   230828351 or
       intExpr(2109876543) mod           536870912  <>   499263807 or
       intExpr(2109876543) mod          1073741824  <>  1036134719 or
               2109876543  mod intExpr(  INT32_MIN) <>   -37607105 or
               2109876543  mod intExpr(-1073741824) <>   -37607105 or
               2109876543  mod intExpr( -536870912) <>   -37607105 or
               2109876543  mod intExpr( -268435456) <>   -37607105 or
               2109876543  mod intExpr( -134217728) <>   -37607105 or
               2109876543  mod intExpr(  -67108864) <>   -37607105 or
               2109876543  mod intExpr(  -33554432) <>    -4052673 or
               2109876543  mod intExpr(  -16777216) <>    -4052673 or
               2109876543  mod intExpr(   -8388608) <>    -4052673 or
               2109876543  mod intExpr(   -4194304) <>    -4052673 or
               2109876543  mod intExpr(   -2097152) <>    -1955521 or
               2109876543  mod intExpr(   -1048576) <>     -906945 or
               2109876543  mod intExpr(    -524288) <>     -382657 or
               2109876543  mod intExpr(    -262144) <>     -120513 or
               2109876543  mod intExpr(    -131072) <>     -120513 or
               2109876543  mod intExpr(     -65536) <>      -54977 or
               2109876543  mod intExpr(     -32768) <>      -22209 or
               2109876543  mod intExpr(     -16384) <>       -5825 or
               2109876543  mod intExpr(      -8192) <>       -5825 or
               2109876543  mod intExpr(      -4096) <>       -1729 or
               2109876543  mod intExpr(      -2048) <>       -1729 or
               2109876543  mod intExpr(      -1024) <>        -705 or
               2109876543  mod intExpr(       -512) <>        -193 or
               2109876543  mod intExpr(       -256) <>        -193 or
               2109876543  mod intExpr(       -128) <>         -65 or
               2109876543  mod intExpr(        -64) <>          -1 or
               2109876543  mod intExpr(        -32) <>          -1 or
               2109876543  mod intExpr(        -16) <>          -1 or
               2109876543  mod intExpr(         -8) <>          -1 or
               2109876543  mod intExpr(         -4) <>          -1 or
               2109876543  mod intExpr(         -2) <>          -1 or
               2109876543  mod intExpr(          2) <>           1 or
               2109876543  mod intExpr(          4) <>           3 or
               2109876543  mod intExpr(          8) <>           7 or
               2109876543  mod intExpr(         16) <>          15 or
               2109876543  mod intExpr(         32) <>          31 or
               2109876543  mod intExpr(         64) <>          63 or
               2109876543  mod intExpr(        128) <>          63 or
               2109876543  mod intExpr(        256) <>          63 or
               2109876543  mod intExpr(        512) <>         319 or
               2109876543  mod intExpr(       1024) <>         319 or
               2109876543  mod intExpr(       2048) <>         319 or
               2109876543  mod intExpr(       4096) <>        2367 or
               2109876543  mod intExpr(       8192) <>        2367 or
               2109876543  mod intExpr(      16384) <>       10559 or
               2109876543  mod intExpr(      32768) <>       10559 or
               2109876543  mod intExpr(      65536) <>       10559 or
               2109876543  mod intExpr(     131072) <>       10559 or
               2109876543  mod intExpr(     262144) <>      141631 or
               2109876543  mod intExpr(     524288) <>      141631 or
               2109876543  mod intExpr(    1048576) <>      141631 or
               2109876543  mod intExpr(    2097152) <>      141631 or
               2109876543  mod intExpr(    4194304) <>      141631 or
               2109876543  mod intExpr(    8388608) <>     4335935 or
               2109876543  mod intExpr(   16777216) <>    12724543 or
               2109876543  mod intExpr(   33554432) <>    29501759 or
               2109876543  mod intExpr(   67108864) <>    29501759 or
               2109876543  mod intExpr(  134217728) <>    96610623 or
               2109876543  mod intExpr(  268435456) <>   230828351 or
               2109876543  mod intExpr(  536870912) <>   499263807 or
               2109876543  mod intExpr( 1073741824) <>  1036134719 or
       intExpr(2109876543) mod intExpr(  INT32_MIN) <>   -37607105 or
       intExpr(2109876543) mod intExpr(-1073741824) <>   -37607105 or
       intExpr(2109876543) mod intExpr( -536870912) <>   -37607105 or
       intExpr(2109876543) mod intExpr( -268435456) <>   -37607105 or
       intExpr(2109876543) mod intExpr( -134217728) <>   -37607105 or
       intExpr(2109876543) mod intExpr(  -67108864) <>   -37607105 or
       intExpr(2109876543) mod intExpr(  -33554432) <>    -4052673 or
       intExpr(2109876543) mod intExpr(  -16777216) <>    -4052673 or
       intExpr(2109876543) mod intExpr(   -8388608) <>    -4052673 or
       intExpr(2109876543) mod intExpr(   -4194304) <>    -4052673 or
       intExpr(2109876543) mod intExpr(   -2097152) <>    -1955521 or
       intExpr(2109876543) mod intExpr(   -1048576) <>     -906945 or
       intExpr(2109876543) mod intExpr(    -524288) <>     -382657 or
       intExpr(2109876543) mod intExpr(    -262144) <>     -120513 or
       intExpr(2109876543) mod intExpr(    -131072) <>     -120513 or
       intExpr(2109876543) mod intExpr(     -65536) <>      -54977 or
       intExpr(2109876543) mod intExpr(     -32768) <>      -22209 or
       intExpr(2109876543) mod intExpr(     -16384) <>       -5825 or
       intExpr(2109876543) mod intExpr(      -8192) <>       -5825 or
       intExpr(2109876543) mod intExpr(      -4096) <>       -1729 or
       intExpr(2109876543) mod intExpr(      -2048) <>       -1729 or
       intExpr(2109876543) mod intExpr(      -1024) <>        -705 or
       intExpr(2109876543) mod intExpr(       -512) <>        -193 or
       intExpr(2109876543) mod intExpr(       -256) <>        -193 or
       intExpr(2109876543) mod intExpr(       -128) <>         -65 or
       intExpr(2109876543) mod intExpr(        -64) <>          -1 or
       intExpr(2109876543) mod intExpr(        -32) <>          -1 or
       intExpr(2109876543) mod intExpr(        -16) <>          -1 or
       intExpr(2109876543) mod intExpr(         -8) <>          -1 or
       intExpr(2109876543) mod intExpr(         -4) <>          -1 or
       intExpr(2109876543) mod intExpr(         -2) <>          -1 or
       intExpr(2109876543) mod intExpr(          2) <>           1 or
       intExpr(2109876543) mod intExpr(          4) <>           3 or
       intExpr(2109876543) mod intExpr(          8) <>           7 or
       intExpr(2109876543) mod intExpr(         16) <>          15 or
       intExpr(2109876543) mod intExpr(         32) <>          31 or
       intExpr(2109876543) mod intExpr(         64) <>          63 or
       intExpr(2109876543) mod intExpr(        128) <>          63 or
       intExpr(2109876543) mod intExpr(        256) <>          63 or
       intExpr(2109876543) mod intExpr(        512) <>         319 or
       intExpr(2109876543) mod intExpr(       1024) <>         319 or
       intExpr(2109876543) mod intExpr(       2048) <>         319 or
       intExpr(2109876543) mod intExpr(       4096) <>        2367 or
       intExpr(2109876543) mod intExpr(       8192) <>        2367 or
       intExpr(2109876543) mod intExpr(      16384) <>       10559 or
       intExpr(2109876543) mod intExpr(      32768) <>       10559 or
       intExpr(2109876543) mod intExpr(      65536) <>       10559 or
       intExpr(2109876543) mod intExpr(     131072) <>       10559 or
       intExpr(2109876543) mod intExpr(     262144) <>      141631 or
       intExpr(2109876543) mod intExpr(     524288) <>      141631 or
       intExpr(2109876543) mod intExpr(    1048576) <>      141631 or
       intExpr(2109876543) mod intExpr(    2097152) <>      141631 or
       intExpr(2109876543) mod intExpr(    4194304) <>      141631 or
       intExpr(2109876543) mod intExpr(    8388608) <>     4335935 or
       intExpr(2109876543) mod intExpr(   16777216) <>    12724543 or
       intExpr(2109876543) mod intExpr(   33554432) <>    29501759 or
       intExpr(2109876543) mod intExpr(   67108864) <>    29501759 or
       intExpr(2109876543) mod intExpr(  134217728) <>    96610623 or
       intExpr(2109876543) mod intExpr(  268435456) <>   230828351 or
       intExpr(2109876543) mod intExpr(  536870912) <>   499263807 or
       intExpr(2109876543) mod intExpr( 1073741824) <>  1036134719 then
      writeln(" ***** mod with powers of two does not work correct.");
      okay := FALSE;
    end if;

    if  INT64_MIN mod           INT64_MIN <>                   0 or
        INT64_MIN mod         -8589934592 <>                   0 or
        INT64_MIN mod         -4294967296 <>                   0 or
        INT64_MIN mod         -2147483649 <>                  -2 or
        INT64_MIN mod           INT32_MIN <>                   0 or
        INT64_MIN mod         -2147483648 <>                   0 or
        INT64_MIN mod         -1073741824 <>                   0 or
        INT64_MIN mod               -1025 <>                  -8 or
        INT64_MIN mod               -1024 <>                   0 or
        INT64_MIN mod               -1023 <>                  -8 or
        INT64_MIN mod                  -2 <>                   0 or
        INT64_MIN mod           INT32_MAX <>          2147483645 or
        INT64_MIN mod          2147483648 <>                   0 or
        INT64_MIN mod          2147483649 <>          2147483647 or
        INT64_MIN mod          4294967296 <>                   0 or
        INT64_MIN mod          4294967297 <>          2147483648 or
        INT64_MIN mod     140737488355327 <>     140737488289791 or
        INT64_MIN mod     140737488355328 <>                   0 or
        INT64_MIN mod     140737488355329 <>               65536 or
        INT64_MIN mod 4611686018427387903 <> 4611686018427387901 or
        INT64_MIN mod 4611686018427387904 <>                   0 or
        INT64_MIN mod 4611686018427387905 <>                   2 or
        INT64_MIN mod           INT64_MAX <> 9223372036854775806 or
        INT64_MAX mod           INT64_MIN <>                  -1 or
        INT64_MAX mod           INT32_MIN <>                  -1 or
        INT64_MAX mod           INT32_MAX <>                   1 or
        INT64_MAX mod          2147483648 <>          2147483647 or
        INT64_MAX mod          2147483649 <>                   1 or
        INT64_MAX mod          4294967295 <>          2147483647 or
        INT64_MAX mod          4294967296 <>          4294967295 or
        INT64_MAX mod     140737488355327 <>               65535 or
        INT64_MAX mod     140737488355328 <>     140737488355327 or
        INT64_MAX mod     140737488355329 <>     140737488289792 or
        INT64_MAX mod 4611686018427387903 <>                   1 or
        INT64_MAX mod 4611686018427387904 <> 4611686018427387903 or
        INT64_MAX mod 4611686018427387905 <> 4611686018427387902 or
        INT64_MAX mod           INT64_MAX <>                   0 or
        intExpr(INT64_MIN) mod           INT64_MIN <>                   0 or
        intExpr(INT64_MIN) mod         -8589934592 <>                   0 or
        intExpr(INT64_MIN) mod         -4294967296 <>                   0 or
        intExpr(INT64_MIN) mod         -2147483649 <>                  -2 or
        intExpr(INT64_MIN) mod           INT32_MIN <>                   0 or
        intExpr(INT64_MIN) mod         -2147483648 <>                   0 or
        intExpr(INT64_MIN) mod         -1073741824 <>                   0 or
        intExpr(INT64_MIN) mod               -1025 <>                  -8 or
        intExpr(INT64_MIN) mod               -1024 <>                   0 or
        intExpr(INT64_MIN) mod               -1023 <>                  -8 or
        intExpr(INT64_MIN) mod                  -2 <>                   0 or
        intExpr(INT64_MIN) mod           INT32_MAX <>          2147483645 or
        intExpr(INT64_MIN) mod          2147483648 <>                   0 or
        intExpr(INT64_MIN) mod          2147483649 <>          2147483647 or
        intExpr(INT64_MIN) mod          4294967296 <>                   0 or
        intExpr(INT64_MIN) mod          4294967297 <>          2147483648 or
        intExpr(INT64_MIN) mod     140737488355327 <>     140737488289791 or
        intExpr(INT64_MIN) mod     140737488355328 <>                   0 or
        intExpr(INT64_MIN) mod     140737488355329 <>               65536 or
        intExpr(INT64_MIN) mod 4611686018427387903 <> 4611686018427387901 or
        intExpr(INT64_MIN) mod 4611686018427387904 <>                   0 or
        intExpr(INT64_MIN) mod 4611686018427387905 <>                   2 or
        intExpr(INT64_MIN) mod           INT64_MAX <> 9223372036854775806 or
        intExpr(INT64_MAX) mod           INT64_MIN <>                  -1 or
        intExpr(INT64_MAX) mod           INT32_MIN <>                  -1 or
        intExpr(INT64_MAX) mod           INT32_MAX <>                   1 or
        intExpr(INT64_MAX) mod          2147483648 <>          2147483647 or
        intExpr(INT64_MAX) mod          2147483649 <>                   1 or
        intExpr(INT64_MAX) mod          4294967295 <>          2147483647 or
        intExpr(INT64_MAX) mod          4294967296 <>          4294967295 or
        intExpr(INT64_MAX) mod     140737488355327 <>               65535 or
        intExpr(INT64_MAX) mod     140737488355328 <>     140737488355327 or
        intExpr(INT64_MAX) mod     140737488355329 <>     140737488289792 or
        intExpr(INT64_MAX) mod 4611686018427387903 <>                   1 or
        intExpr(INT64_MAX) mod 4611686018427387904 <> 4611686018427387903 or
        intExpr(INT64_MAX) mod 4611686018427387905 <> 4611686018427387902 or
        intExpr(INT64_MAX) mod           INT64_MAX <>                   0 or
        INT64_MIN mod intExpr(          INT64_MIN) <>                   0 or
        INT64_MIN mod intExpr(        -8589934592) <>                   0 or
        INT64_MIN mod intExpr(        -4294967296) <>                   0 or
        INT64_MIN mod intExpr(        -2147483649) <>                  -2 or
        INT64_MIN mod intExpr(          INT32_MIN) <>                   0 or
        INT64_MIN mod intExpr(        -2147483648) <>                   0 or
        INT64_MIN mod intExpr(        -1073741824) <>                   0 or
        INT64_MIN mod intExpr(              -1025) <>                  -8 or
        INT64_MIN mod intExpr(              -1024) <>                   0 or
        INT64_MIN mod intExpr(              -1023) <>                  -8 or
        INT64_MIN mod intExpr(                 -2) <>                   0 or
        INT64_MIN mod intExpr(          INT32_MAX) <>          2147483645 or
        INT64_MIN mod intExpr(         2147483648) <>                   0 or
        INT64_MIN mod intExpr(         2147483649) <>          2147483647 or
        INT64_MIN mod intExpr(         4294967296) <>                   0 or
        INT64_MIN mod intExpr(         4294967297) <>          2147483648 or
        INT64_MIN mod intExpr(    140737488355327) <>     140737488289791 or
        INT64_MIN mod intExpr(    140737488355328) <>                   0 or
        INT64_MIN mod intExpr(    140737488355329) <>               65536 or
        INT64_MIN mod intExpr(4611686018427387903) <> 4611686018427387901 or
        INT64_MIN mod intExpr(4611686018427387904) <>                   0 or
        INT64_MIN mod intExpr(4611686018427387905) <>                   2 or
        INT64_MIN mod intExpr(          INT64_MAX) <> 9223372036854775806 or
        INT64_MAX mod intExpr(          INT64_MIN) <>                  -1 or
        INT64_MAX mod intExpr(          INT32_MIN) <>                  -1 or
        INT64_MAX mod intExpr(          INT32_MAX) <>                   1 or
        INT64_MAX mod intExpr(         2147483648) <>          2147483647 or
        INT64_MAX mod intExpr(         2147483649) <>                   1 or
        INT64_MAX mod intExpr(         4294967295) <>          2147483647 or
        INT64_MAX mod intExpr(         4294967296) <>          4294967295 or
        INT64_MAX mod intExpr(    140737488355327) <>               65535 or
        INT64_MAX mod intExpr(    140737488355328) <>     140737488355327 or
        INT64_MAX mod intExpr(    140737488355329) <>     140737488289792 or
        INT64_MAX mod intExpr(4611686018427387903) <>                   1 or
        INT64_MAX mod intExpr(4611686018427387904) <> 4611686018427387903 or
        INT64_MAX mod intExpr(4611686018427387905) <> 4611686018427387902 or
        INT64_MAX mod intExpr(          INT64_MAX) <>                   0 or
        intExpr(INT64_MIN) mod intExpr(          INT64_MIN) <>                   0 or
        intExpr(INT64_MIN) mod intExpr(        -8589934592) <>                   0 or
        intExpr(INT64_MIN) mod intExpr(        -4294967296) <>                   0 or
        intExpr(INT64_MIN) mod intExpr(        -2147483649) <>                  -2 or
        intExpr(INT64_MIN) mod intExpr(          INT32_MIN) <>                   0 or
        intExpr(INT64_MIN) mod intExpr(        -2147483648) <>                   0 or
        intExpr(INT64_MIN) mod intExpr(        -1073741824) <>                   0 or
        intExpr(INT64_MIN) mod intExpr(              -1025) <>                  -8 or
        intExpr(INT64_MIN) mod intExpr(              -1024) <>                   0 or
        intExpr(INT64_MIN) mod intExpr(              -1023) <>                  -8 or
        intExpr(INT64_MIN) mod intExpr(                 -2) <>                   0 or
        intExpr(INT64_MIN) mod intExpr(          INT32_MAX) <>          2147483645 or
        intExpr(INT64_MIN) mod intExpr(         2147483648) <>                   0 or
        intExpr(INT64_MIN) mod intExpr(         2147483649) <>          2147483647 or
        intExpr(INT64_MIN) mod intExpr(         4294967296) <>                   0 or
        intExpr(INT64_MIN) mod intExpr(         4294967297) <>          2147483648 or
        intExpr(INT64_MIN) mod intExpr(    140737488355327) <>     140737488289791 or
        intExpr(INT64_MIN) mod intExpr(    140737488355328) <>                   0 or
        intExpr(INT64_MIN) mod intExpr(    140737488355329) <>               65536 or
        intExpr(INT64_MIN) mod intExpr(4611686018427387903) <> 4611686018427387901 or
        intExpr(INT64_MIN) mod intExpr(4611686018427387904) <>                   0 or
        intExpr(INT64_MIN) mod intExpr(4611686018427387905) <>                   2 or
        intExpr(INT64_MIN) mod intExpr(          INT64_MAX) <> 9223372036854775806 or
        intExpr(INT64_MAX) mod intExpr(          INT64_MIN) <>                  -1 or
        intExpr(INT64_MAX) mod intExpr(          INT32_MIN) <>                  -1 or
        intExpr(INT64_MAX) mod intExpr(          INT32_MAX) <>                   1 or
        intExpr(INT64_MAX) mod intExpr(         2147483648) <>          2147483647 or
        intExpr(INT64_MAX) mod intExpr(         2147483649) <>                   1 or
        intExpr(INT64_MAX) mod intExpr(         4294967295) <>          2147483647 or
        intExpr(INT64_MAX) mod intExpr(         4294967296) <>          4294967295 or
        intExpr(INT64_MAX) mod intExpr(    140737488355327) <>               65535 or
        intExpr(INT64_MAX) mod intExpr(    140737488355328) <>     140737488355327 or
        intExpr(INT64_MAX) mod intExpr(    140737488355329) <>     140737488289792 or
        intExpr(INT64_MAX) mod intExpr(4611686018427387903) <>                   1 or
        intExpr(INT64_MAX) mod intExpr(4611686018427387904) <> 4611686018427387903 or
        intExpr(INT64_MAX) mod intExpr(4611686018427387905) <> 4611686018427387902 or
        intExpr(INT64_MAX) mod intExpr(          INT64_MAX) <>                   0 then
      writeln(" ***** mod with maximum values does not work correct.");
      okay := FALSE;
    end if;
  end func;


const func boolean: check_mod_by_power_of_two_optimization is func
  result
    var boolean: okay is TRUE;
  begin
    if  (intExpr(-1234567890123456789) <<  1) mod                   2 <>                   0 or
        (intExpr(                  -1) << 61) mod                   2 <>                   0 or
        (intExpr(                  -2) << 62) mod                   2 <>                   0 or
        (intExpr(                  -1) << 63) mod                   2 <>                   0 or
        (intExpr(-1234567890123456789) <<  1) mod                   4 <>                   2 or
        (intExpr(-1234567890123456789) <<  2) mod                   4 <>                   0 or
        (intExpr(                  -1) << 61) mod                   4 <>                   0 or
        (intExpr(                  -2) << 62) mod                   4 <>                   0 or
        (intExpr(                  -1) << 63) mod                   4 <>                   0 or
        (intExpr(-1234567890123456789) <<  1) mod            16#20000 <>               64982 or
        (intExpr( -123456789012345678) <<  4) mod            16#20000 <>               52000 or
        (intExpr(  -12345678901234567) <<  7) mod            16#20000 <>               15488 or
        (intExpr(   -1234567890123456) << 10) mod            16#20000 <>               65536 or
        (intExpr(    -123456789012345) << 14) mod            16#20000 <>              114688 or
        (intExpr(    -123456789012345) << 16) mod            16#20000 <>               65536 or
        (intExpr(     -12345678901234) << 17) mod            16#20000 <>                   0 or
        (intExpr(         -1234567890) << 31) mod            16#20000 <>                   0 or
        (intExpr(             -123456) << 45) mod            16#20000 <>                   0 or
        (intExpr(                  -1) << 61) mod            16#20000 <>                   0 or
        (intExpr(                  -2) << 62) mod            16#20000 <>                   0 or
        (intExpr(                  -1) << 63) mod            16#20000 <>                   0 or
        (intExpr(-1234567890123456789) <<  1) mod        16#100000000 <>            70057430 or
        (intExpr( -123456789012345678) <<  4) mod        16#100000000 <>          2633026336 or
        (intExpr(  -12345678901234567) <<  8) mod        16#100000000 <>          2494855424 or
        (intExpr(   -1234567890123456) << 12) mod        16#100000000 <>          1414791168 or
        (intExpr(    -123456789012345) << 16) mod        16#100000000 <>           545718272 or
        (intExpr(      -1234567890123) << 20) mod        16#100000000 <>          3008364544 or
        (intExpr(       -123456789012) << 24) mod        16#100000000 <>          3959422976 or
        (intExpr(         -1234567890) << 30) mod        16#100000000 <>          2147483648 or
        (intExpr(         -1234567890) << 31) mod        16#100000000 <>                   0 or
        (intExpr(             -123456) << 45) mod        16#100000000 <>                   0 or
        (intExpr(                  -1) << 61) mod        16#100000000 <>                   0 or
        (intExpr(                  -2) << 62) mod        16#100000000 <>                   0 or
        (intExpr(                  -1) << 63) mod        16#100000000 <>                   0 or
        (intExpr(-1234567890123456789) <<  1) mod 16#4000000000000000 <> 2142550238180474326 or
        (intExpr( -123456789012345678) <<  5) mod 16#4000000000000000 <>  661068770032326208 or
        (intExpr(   -1234567890123456) << 11) mod 16#4000000000000000 <> 2083290979454550016 or
        (intExpr(     -12345678901234) << 17) mod 16#4000000000000000 <> 2993513193484845056 or
        (intExpr(       -123456789012) << 23) mod 16#4000000000000000 <> 3576055410467012608 or
        (intExpr(        -12345678901) << 29) mod 16#4000000000000000 <> 2595336146015748096 or
        (intExpr(           -12345678) << 37) mod 16#4000000000000000 <> 2914908954205093888 or
        (intExpr(              -12345) << 47) mod 16#4000000000000000 <> 2874281724680863744 or
        (intExpr(                -123) << 53) mod 16#4000000000000000 <> 3503800510094245888 or
        (intExpr(                  -1) << 61) mod 16#4000000000000000 <> 2305843009213693952 or
        (intExpr(                  -2) << 62) mod 16#4000000000000000 <>                   0 or
        (intExpr(                  -1) << 63) mod 16#4000000000000000 <>                   0 then
      writeln(" ***** mod of left shifted negative values does not work correct.");
      okay := FALSE;
    end if;

    if  (intExpr(1234567890123456789) <<  1) mod                   2 <>                   0 or
        (intExpr(                  1) << 61) mod                   2 <>                   0 or
        (intExpr(                  1) << 62) mod                   2 <>                   0 or
        (intExpr(1234567890123456789) <<  1) mod                   4 <>                   2 or
        (intExpr(1234567890123456789) <<  2) mod                   4 <>                   0 or
        (intExpr(                  1) << 61) mod                   4 <>                   0 or
        (intExpr(                  1) << 62) mod                   4 <>                   0 or
        (intExpr(1234567890123456789) <<  1) mod            16#20000 <>               66090 or
        (intExpr( 123456789012345678) <<  4) mod            16#20000 <>               79072 or
        (intExpr(  12345678901234567) <<  7) mod            16#20000 <>              115584 or
        (intExpr(   1234567890123456) << 10) mod            16#20000 <>               65536 or
        (intExpr(    123456789012345) << 14) mod            16#20000 <>               16384 or
        (intExpr(    123456789012345) << 16) mod            16#20000 <>               65536 or
        (intExpr(     12345678901234) << 17) mod            16#20000 <>                   0 or
        (intExpr(         1234567890) << 31) mod            16#20000 <>                   0 or
        (intExpr(             123456) << 45) mod            16#20000 <>                   0 or
        (intExpr(                  1) << 61) mod            16#20000 <>                   0 or
        (intExpr(                  1) << 62) mod            16#20000 <>                   0 or
        (intExpr(1234567890123456789) <<  1) mod        16#100000000 <>          4224909866 or
        (intExpr( 123456789012345678) <<  4) mod        16#100000000 <>          1661940960 or
        (intExpr(  12345678901234567) <<  8) mod        16#100000000 <>          1800111872 or
        (intExpr(   1234567890123456) << 12) mod        16#100000000 <>          2880176128 or
        (intExpr(    123456789012345) << 16) mod        16#100000000 <>          3749249024 or
        (intExpr(      1234567890123) << 20) mod        16#100000000 <>          1286602752 or
        (intExpr(       123456789012) << 24) mod        16#100000000 <>           335544320 or
        (intExpr(         1234567890) << 30) mod        16#100000000 <>          2147483648 or
        (intExpr(         1234567890) << 31) mod        16#100000000 <>                   0 or
        (intExpr(             123456) << 45) mod        16#100000000 <>                   0 or
        (intExpr(                  1) << 61) mod        16#100000000 <>                   0 or
        (intExpr(                  1) << 62) mod        16#100000000 <>                   0 or
        (intExpr(5678901234567890123) <<  0) mod 16#4000000000000000 <> 1067215216140502219 or
        (intExpr(3456789012345678901) <<  1) mod 16#4000000000000000 <> 2301892006263969898 or
        (intExpr( 234567890123456789) <<  5) mod 16#4000000000000000 <> 2894486465523229344 or
        (intExpr(   3456789012345678) << 11) mod 16#4000000000000000 <> 2467817878856560640 or
        (intExpr(     45678901234567) << 17) mod 16#4000000000000000 <> 1375538924189777920 or
        (intExpr(       678901234567) << 23) mod 16#4000000000000000 <> 1083350309071224832 or
        (intExpr(        12345678901) << 29) mod 16#4000000000000000 <> 2016349872411639808 or
        (intExpr(           45678901) << 37) mod 16#4000000000000000 <> 1666374330763706368 or
        (intExpr(              56789) << 47) mod 16#4000000000000000 <> 3380655207783333888 or
        (intExpr(                890) << 53) mod 16#4000000000000000 <> 3404721318292094976 or
        (intExpr(                  3) << 61) mod 16#4000000000000000 <> 2305843009213693952 or
        (intExpr(                  1) << 62) mod 16#4000000000000000 <>                   0 then
      writeln(" ***** mod of left shifted positive values does not work correct.");
      okay := FALSE;
    end if;

    if  (        1234567890123456789  +         1234567890123456789 ) mod                   4 <>                   2 or
        (        1234567890123456789  + intExpr(1234567890123456789)) mod                   4 <>                   2 or
        (intExpr(1234567890123456789) +         1234567890123456789 ) mod                   4 <>                   2 or
        (intExpr(1234567890123456789) + intExpr(1234567890123456789)) mod                   4 <>                   2 or
        (        1234567890123456789  -          987654321098765432 ) mod                   4 <>                   1 or
        (        1234567890123456789  - intExpr( 987654321098765432)) mod                   4 <>                   1 or
        (intExpr(1234567890123456789) -          987654321098765432 ) mod                   4 <>                   1 or
        (intExpr(1234567890123456789) - intExpr( 987654321098765432)) mod                   4 <>                   1 or
        (        1234567890123456789  -         1987654321098765432 ) mod                   4 <>                   1 or
        (        1234567890123456789  - intExpr(1987654321098765432)) mod                   4 <>                   1 or
        (intExpr(1234567890123456789) -         1987654321098765432 ) mod                   4 <>                   1 or
        (intExpr(1234567890123456789) - intExpr(1987654321098765432)) mod                   4 <>                   1 or
        (        1234567890123456789  +         1234567890123456789 ) mod            16#20000 <>               66090 or
        (        1234567890123456789  + intExpr(1234567890123456789)) mod            16#20000 <>               66090 or
        (intExpr(1234567890123456789) +         1234567890123456789 ) mod            16#20000 <>               66090 or
        (intExpr(1234567890123456789) + intExpr(1234567890123456789)) mod            16#20000 <>               66090 or
        (        1234567890123456789  -          987654321098765432 ) mod            16#20000 <>               52381 or
        (        1234567890123456789  - intExpr( 987654321098765432)) mod            16#20000 <>               52381 or
        (intExpr(1234567890123456789) -          987654321098765432 ) mod            16#20000 <>               52381 or
        (intExpr(1234567890123456789) - intExpr( 987654321098765432)) mod            16#20000 <>               52381 or
        (        1234567890123456789  -         1987654321098765432 ) mod            16#20000 <>               52381 or
        (        1234567890123456789  - intExpr(1987654321098765432)) mod            16#20000 <>               52381 or
        (intExpr(1234567890123456789) -         1987654321098765432 ) mod            16#20000 <>               52381 or
        (intExpr(1234567890123456789) - intExpr(1987654321098765432)) mod            16#20000 <>               52381 or
        (        1234567890123456789  +         1234567890123456789 ) mod        16#100000000 <>          4224909866 or
        (        1234567890123456789  + intExpr(1234567890123456789)) mod        16#100000000 <>          4224909866 or
        (intExpr(1234567890123456789) +         1234567890123456789 ) mod        16#100000000 <>          4224909866 or
        (intExpr(1234567890123456789) + intExpr(1234567890123456789)) mod        16#100000000 <>          4224909866 or
        (        1234567890123456789  -          987654321098765432 ) mod        16#100000000 <>           871419037 or
        (        1234567890123456789  - intExpr( 987654321098765432)) mod        16#100000000 <>           871419037 or
        (intExpr(1234567890123456789) -          987654321098765432 ) mod        16#100000000 <>           871419037 or
        (intExpr(1234567890123456789) - intExpr( 987654321098765432)) mod        16#100000000 <>           871419037 or
        (        1234567890123456789  -         1987654321098765432 ) mod        16#100000000 <>          2358037661 or
        (        1234567890123456789  - intExpr(1987654321098765432)) mod        16#100000000 <>          2358037661 or
        (intExpr(1234567890123456789) -         1987654321098765432 ) mod        16#100000000 <>          2358037661 or
        (intExpr(1234567890123456789) - intExpr(1987654321098765432)) mod        16#100000000 <>          2358037661 or
        (        2345678901234567890  +         2345678901234567890 ) mod 16#4000000000000000 <>   79671784041747876 or
        (        2345678901234567890  + intExpr(2345678901234567890)) mod 16#4000000000000000 <>   79671784041747876 or
        (intExpr(2345678901234567890) +         2345678901234567890 ) mod 16#4000000000000000 <>   79671784041747876 or
        (intExpr(2345678901234567890) + intExpr(2345678901234567890)) mod 16#4000000000000000 <>   79671784041747876 or
        (        5678901234567890123  -          987654321098765432 ) mod 16#4000000000000000 <>   79560895041736787 or
        (        5678901234567890123  - intExpr( 987654321098765432)) mod 16#4000000000000000 <>   79560895041736787 or
        (intExpr(5678901234567890123) -          987654321098765432 ) mod 16#4000000000000000 <>   79560895041736787 or
        (intExpr(5678901234567890123) - intExpr( 987654321098765432)) mod 16#4000000000000000 <>   79560895041736787 or
        (        1234567890123456789  -         1987654321098765432 ) mod 16#4000000000000000 <> 3858599587452079261 or
        (        1234567890123456789  - intExpr(1987654321098765432)) mod 16#4000000000000000 <> 3858599587452079261 or
        (intExpr(1234567890123456789) -         1987654321098765432 ) mod 16#4000000000000000 <> 3858599587452079261 or
        (intExpr(1234567890123456789) - intExpr(1987654321098765432)) mod 16#4000000000000000 <> 3858599587452079261 then
      writeln(" ***** mod of sum does not work correct. (1)");
      okay := FALSE;
    end if;

    if  (        1  +         2  +         3  +         4 ) mod 4 <> 2 or
        (        1  +         2  +         3  + intExpr(4)) mod 4 <> 2 or
        (        1  +         2  + intExpr(3) +         4 ) mod 4 <> 2 or
        (        1  +         2  + intExpr(3) + intExpr(4)) mod 4 <> 2 or
        (        1  + intExpr(2) +         3  +         4 ) mod 4 <> 2 or
        (        1  + intExpr(2) +         3  + intExpr(4)) mod 4 <> 2 or
        (        1  + intExpr(2) + intExpr(3) +         4 ) mod 4 <> 2 or
        (        1  + intExpr(2) + intExpr(3) + intExpr(4)) mod 4 <> 2 or
        (intExpr(1) +         2  +         3  +         4 ) mod 4 <> 2 or
        (intExpr(1) +         2  +         3  + intExpr(4)) mod 4 <> 2 or
        (intExpr(1) +         2  + intExpr(3) +         4 ) mod 4 <> 2 or
        (intExpr(1) +         2  + intExpr(3) + intExpr(4)) mod 4 <> 2 or
        (intExpr(1) + intExpr(2) +         3  +         4 ) mod 4 <> 2 or
        (intExpr(1) + intExpr(2) +         3  + intExpr(4)) mod 4 <> 2 or
        (intExpr(1) + intExpr(2) + intExpr(3) +         4 ) mod 4 <> 2 or
        (intExpr(1) + intExpr(2) + intExpr(3) + intExpr(4)) mod 4 <> 2 then
      writeln(" ***** mod of sum does not work correct. (2)");
      okay := FALSE;
    end if;

    if  (        2  *         3  +         5  *         7 ) mod 32 <> 9 or
        (        2  *         3  +         5  * intExpr(7)) mod 32 <> 9 or
        (        2  *         3  + intExpr(5) *         7 ) mod 32 <> 9 or
        (        2  *         3  + intExpr(5) * intExpr(7)) mod 32 <> 9 or
        (        2  *         3  + intExpr(5  *         7)) mod 32 <> 9 or
        (        2  * intExpr(3) +         5  *         7 ) mod 32 <> 9 or
        (        2  * intExpr(3) +         5  * intExpr(7)) mod 32 <> 9 or
        (        2  * intExpr(3) + intExpr(5) *         7 ) mod 32 <> 9 or
        (        2  * intExpr(3) + intExpr(5) * intExpr(7)) mod 32 <> 9 or
        (        2  * intExpr(3) + intExpr(5  *         7)) mod 32 <> 9 or
        (intExpr(2) *         3  +         5  *         7 ) mod 32 <> 9 or
        (intExpr(2) *         3  +         5  * intExpr(7)) mod 32 <> 9 or
        (intExpr(2) *         3  + intExpr(5) *         7 ) mod 32 <> 9 or
        (intExpr(2) *         3  + intExpr(5) * intExpr(7)) mod 32 <> 9 or
        (intExpr(2) *         3  + intExpr(5  *         7)) mod 32 <> 9 or
        (intExpr(2) * intExpr(3) +         5  *         7 ) mod 32 <> 9 or
        (intExpr(2) * intExpr(3) +         5  * intExpr(7)) mod 32 <> 9 or
        (intExpr(2) * intExpr(3) + intExpr(5) *         7 ) mod 32 <> 9 or
        (intExpr(2) * intExpr(3) + intExpr(5) * intExpr(7)) mod 32 <> 9 or
        (intExpr(2) * intExpr(3) + intExpr(5  *         7)) mod 32 <> 9 or
        (intExpr(2  *         3) +         5  *         7 ) mod 32 <> 9 or
        (intExpr(2  *         3) +         5  * intExpr(7)) mod 32 <> 9 or
        (intExpr(2  *         3) + intExpr(5) *         7 ) mod 32 <> 9 or
        (intExpr(2  *         3) + intExpr(5) * intExpr(7)) mod 32 <> 9 or
        (intExpr(2  *         3) + intExpr(5  *         7)) mod 32 <> 9 then
      writeln(" ***** mod of sum does not work correct. (3)");
      okay := FALSE;
    end if;

    if  ((        7  <<         5 ) + (        3  <<         2 )) mod 32 <> 12 or
        ((        7  <<         5 ) + (        3  << intExpr(2))) mod 32 <> 12 or
        ((        7  <<         5 ) + (intExpr(3) <<         2 )) mod 32 <> 12 or
        ((        7  <<         5 ) + (intExpr(3) << intExpr(2))) mod 32 <> 12 or
        ((        7  <<         5 ) +  intExpr(3  <<         2) ) mod 32 <> 12 or
        ((        7  << intExpr(5)) + (        3  <<         2 )) mod 32 <> 12 or
        ((        7  << intExpr(5)) + (        3  << intExpr(2))) mod 32 <> 12 or
        ((        7  << intExpr(5)) + (intExpr(3) <<         2 )) mod 32 <> 12 or
        ((        7  << intExpr(5)) + (intExpr(3) << intExpr(2))) mod 32 <> 12 or
        ((        7  << intExpr(5)) +  intExpr(3  <<         2) ) mod 32 <> 12 or
        ((intExpr(7) <<         5 ) + (        3  <<         2 )) mod 32 <> 12 or
        ((intExpr(7) <<         5 ) + (        3  << intExpr(2))) mod 32 <> 12 or
        ((intExpr(7) <<         5 ) + (intExpr(3) <<         2 )) mod 32 <> 12 or
        ((intExpr(7) <<         5 ) + (intExpr(3) << intExpr(2))) mod 32 <> 12 or
        ((intExpr(7) <<         5 ) +  intExpr(3  <<         2) ) mod 32 <> 12 or
        ((intExpr(7) << intExpr(5)) + (        3  <<         2 )) mod 32 <> 12 or
        ((intExpr(7) << intExpr(5)) + (        3  << intExpr(2))) mod 32 <> 12 or
        ((intExpr(7) << intExpr(5)) + (intExpr(3) <<         2 )) mod 32 <> 12 or
        ((intExpr(7) << intExpr(5)) + (intExpr(3) << intExpr(2))) mod 32 <> 12 or
        ((intExpr(7) << intExpr(5)) +  intExpr(3  <<         2) ) mod 32 <> 12 or
        ( intExpr(7  <<         5)  + (        3  <<         2 )) mod 32 <> 12 or
        ( intExpr(7  <<         5)  + (        3  << intExpr(2))) mod 32 <> 12 or
        ( intExpr(7  <<         5)  + (intExpr(3) <<         2 )) mod 32 <> 12 or
        ( intExpr(7  <<         5)  + (intExpr(3) << intExpr(2))) mod 32 <> 12 or
        ( intExpr(7  <<         5)  +  intExpr(3  <<         2) ) mod 32 <> 12 then
      writeln(" ***** mod of sum does not work correct. (4)");
      okay := FALSE;
    end if;

    if (        integer.first  + (        0  <<         63 )) mod 64 <>  0 or
       (        integer.first  + (        0  << intExpr(63))) mod 64 <>  0 or
       (        integer.first  + (intExpr(0) <<         63 )) mod 64 <>  0 or
       (        integer.first  + (intExpr(0) << intExpr(63))) mod 64 <>  0 or
       (        integer.first  + (intExpr(0  <<         63))) mod 64 <>  0 or
       (intExpr(integer.first) + (        0  <<         63 )) mod 64 <>  0 or
       (intExpr(integer.first) + (        0  << intExpr(63))) mod 64 <>  0 or
       (intExpr(integer.first) + (intExpr(0) <<         63 )) mod 64 <>  0 or
       (intExpr(integer.first) + (intExpr(0) << intExpr(63))) mod 64 <>  0 or
       (intExpr(integer.first) + (intExpr(0  <<         63))) mod 64 <>  0 or
       (        integer.last   + (        0  <<         63 )) mod 64 <> 63 or
       (        integer.last   + (        0  << intExpr(63))) mod 64 <> 63 or
       (        integer.last   + (intExpr(0) <<         63 )) mod 64 <> 63 or
       (        integer.last   + (intExpr(0) << intExpr(63))) mod 64 <> 63 or
       (        integer.last   + (intExpr(0  <<         63))) mod 64 <> 63 or
       (intExpr(integer.last)  + (        0  <<         63 )) mod 64 <> 63 or
       (intExpr(integer.last)  + (        0  << intExpr(63))) mod 64 <> 63 or
       (intExpr(integer.last)  + (intExpr(0) <<         63 )) mod 64 <> 63 or
       (intExpr(integer.last)  + (intExpr(0) << intExpr(63))) mod 64 <> 63 or
       (intExpr(integer.last)  + (intExpr(0  <<         63))) mod 64 <> 63 then
      writeln(" ***** mod of sum does not work correct. (5)");
      okay := FALSE;
    end if;

    if  pred(-5678901234567890123) mod 16#4000000000000000 <> 3544470802286885684 or
        succ(-5678901234567890123) mod 16#4000000000000000 <> 3544470802286885686 or
        succ(-4611686018427387906) mod 16#4000000000000000 <> 4611686018427387903 or
        succ(-4611686018427387905) mod 16#4000000000000000 <>                   0 or
        pred(-4611686018427387904) mod 16#4000000000000000 <> 4611686018427387903 or
        pred(-4611686018427387903) mod 16#4000000000000000 <>                   0 or
        succ( 4611686018427387902) mod 16#4000000000000000 <> 4611686018427387903 or
        succ( 4611686018427387903) mod 16#4000000000000000 <>                   0 or
        pred( 4611686018427387904) mod 16#4000000000000000 <> 4611686018427387903 or
        pred( 4611686018427387905) mod 16#4000000000000000 <>                   0 or
        pred( 5678901234567890123) mod 16#4000000000000000 <> 1067215216140502218 or
        succ( 5678901234567890123) mod 16#4000000000000000 <> 1067215216140502220 or
        pred(intExpr(-5678901234567890123)) mod 16#4000000000000000 <> 3544470802286885684 or
        succ(intExpr(-5678901234567890123)) mod 16#4000000000000000 <> 3544470802286885686 or
        succ(intExpr(-4611686018427387906)) mod 16#4000000000000000 <> 4611686018427387903 or
        succ(intExpr(-4611686018427387905)) mod 16#4000000000000000 <>                   0 or
        pred(intExpr(-4611686018427387904)) mod 16#4000000000000000 <> 4611686018427387903 or
        pred(intExpr(-4611686018427387903)) mod 16#4000000000000000 <>                   0 or
        succ(intExpr( 4611686018427387902)) mod 16#4000000000000000 <> 4611686018427387903 or
        succ(intExpr( 4611686018427387903)) mod 16#4000000000000000 <>                   0 or
        pred(intExpr( 4611686018427387904)) mod 16#4000000000000000 <> 4611686018427387903 or
        pred(intExpr( 4611686018427387905)) mod 16#4000000000000000 <>                   0 or
        pred(intExpr( 5678901234567890123)) mod 16#4000000000000000 <> 1067215216140502218 or
        succ(intExpr( 5678901234567890123)) mod 16#4000000000000000 <> 1067215216140502220 then
      writeln(" ***** mod of succ() and pred() does not work correct.");
      okay := FALSE;
    end if;

    if           1234567890  *          6789012345  mod            16#20000 <>               97090 or
                 1234567890  * intExpr( 6789012345) mod            16#20000 <>               97090 or
        intExpr( 1234567890) *          6789012345  mod            16#20000 <>               97090 or
        intExpr( 1234567890) * intExpr( 6789012345) mod            16#20000 <>               97090 or
                 1234567890  *         -6789012345  mod            16#20000 <>               33982 or
                 1234567890  * intExpr(-6789012345) mod            16#20000 <>               33982 or
        intExpr( 1234567890) *         -6789012345  mod            16#20000 <>               33982 or
        intExpr( 1234567890) * intExpr(-6789012345) mod            16#20000 <>               33982 or
                -1234567890  *          6789012345  mod            16#20000 <>               33982 or
                -1234567890  * intExpr( 6789012345) mod            16#20000 <>               33982 or
        intExpr(-1234567890) *          6789012345  mod            16#20000 <>               33982 or
        intExpr(-1234567890) * intExpr( 6789012345) mod            16#20000 <>               33982 or
                -1234567890  *         -6789012345  mod            16#20000 <>               97090 or
                -1234567890  * intExpr(-6789012345) mod            16#20000 <>               97090 or
        intExpr(-1234567890) *         -6789012345  mod            16#20000 <>               97090 or
        intExpr(-1234567890) * intExpr(-6789012345) mod            16#20000 <>               97090 or
                 1234567890  *          6789012345  mod        16#100000000 <>          3691215682 or
                 1234567890  * intExpr( 6789012345) mod        16#100000000 <>          3691215682 or
        intExpr( 1234567890) *          6789012345  mod        16#100000000 <>          3691215682 or
        intExpr( 1234567890) * intExpr( 6789012345) mod        16#100000000 <>          3691215682 or
                 1234567890  *         -6789012345  mod        16#100000000 <>           603751614 or
                 1234567890  * intExpr(-6789012345) mod        16#100000000 <>           603751614 or
        intExpr( 1234567890) *         -6789012345  mod        16#100000000 <>           603751614 or
        intExpr( 1234567890) * intExpr(-6789012345) mod        16#100000000 <>           603751614 or
                -1234567890  *          6789012345  mod        16#100000000 <>           603751614 or
                -1234567890  * intExpr( 6789012345) mod        16#100000000 <>           603751614 or
        intExpr(-1234567890) *          6789012345  mod        16#100000000 <>           603751614 or
        intExpr(-1234567890) * intExpr( 6789012345) mod        16#100000000 <>           603751614 or
                -1234567890  *         -6789012345  mod        16#100000000 <>          3691215682 or
                -1234567890  * intExpr(-6789012345) mod        16#100000000 <>          3691215682 or
        intExpr(-1234567890) *         -6789012345  mod        16#100000000 <>          3691215682 or
        intExpr(-1234567890) * intExpr(-6789012345) mod        16#100000000 <>          3691215682 or
                 1234567890  *          6789012345  mod 16#4000000000000000 <> 3769810627523214146 or
                 1234567890  * intExpr( 6789012345) mod 16#4000000000000000 <> 3769810627523214146 or
        intExpr( 1234567890) *          6789012345  mod 16#4000000000000000 <> 3769810627523214146 or
        intExpr( 1234567890) * intExpr( 6789012345) mod 16#4000000000000000 <> 3769810627523214146 or
                 1234567890  *         -6789012345  mod 16#4000000000000000 <>  841875390904173758 or
                 1234567890  * intExpr(-6789012345) mod 16#4000000000000000 <>  841875390904173758 or
        intExpr( 1234567890) *         -6789012345  mod 16#4000000000000000 <>  841875390904173758 or
        intExpr( 1234567890) * intExpr(-6789012345) mod 16#4000000000000000 <>  841875390904173758 or
                -1234567890  *          6789012345  mod 16#4000000000000000 <>  841875390904173758 or
                -1234567890  * intExpr( 6789012345) mod 16#4000000000000000 <>  841875390904173758 or
        intExpr(-1234567890) *          6789012345  mod 16#4000000000000000 <>  841875390904173758 or
        intExpr(-1234567890) * intExpr( 6789012345) mod 16#4000000000000000 <>  841875390904173758 or
                -1234567890  *         -6789012345  mod 16#4000000000000000 <> 3769810627523214146 or
                -1234567890  * intExpr(-6789012345) mod 16#4000000000000000 <> 3769810627523214146 or
        intExpr(-1234567890) *         -6789012345  mod 16#4000000000000000 <> 3769810627523214146 or
        intExpr(-1234567890) * intExpr(-6789012345) mod 16#4000000000000000 <> 3769810627523214146 then
      writeln(" ***** mod of product does not work correct.");
      okay := FALSE;
    end if;
  end func;


const func boolean: check_mod_by_computed_power_of_two_optimization is func
  result
    var boolean: okay is TRUE;
  begin
    if  5678901234567890123 mod (1 <<  0) <>                   0 or
        5678901234567890123 mod (1 <<  1) <>                   1 or
        5678901234567890123 mod (1 <<  3) <>                   3 or
        5678901234567890123 mod (1 <<  7) <>                  75 or
        5678901234567890123 mod (1 << 11) <>                1227 or
        5678901234567890123 mod (1 << 17) <>               17611 or
        5678901234567890123 mod (1 << 23) <>             7488715 or
        5678901234567890123 mod (1 << 29) <>           284312779 or
        5678901234567890123 mod (1 << 37) <>         93162980555 or
        5678901234567890123 mod (1 << 41) <>        642918794443 or
        5678901234567890123 mod (1 << 47) <>       2841942049995 or
        5678901234567890123 mod (1 << 53) <>    4365704081065163 or
        5678901234567890123 mod (1 << 59) <>  490754463837078731 or
        5678901234567890123 mod (1 << 62) <> 1067215216140502219 or
        5678901234567890123 mod (1 << intExpr( 0)) <>                   0 or
        5678901234567890123 mod (1 << intExpr( 1)) <>                   1 or
        5678901234567890123 mod (1 << intExpr( 3)) <>                   3 or
        5678901234567890123 mod (1 << intExpr( 7)) <>                  75 or
        5678901234567890123 mod (1 << intExpr(11)) <>                1227 or
        5678901234567890123 mod (1 << intExpr(17)) <>               17611 or
        5678901234567890123 mod (1 << intExpr(23)) <>             7488715 or
        5678901234567890123 mod (1 << intExpr(29)) <>           284312779 or
        5678901234567890123 mod (1 << intExpr(37)) <>         93162980555 or
        5678901234567890123 mod (1 << intExpr(41)) <>        642918794443 or
        5678901234567890123 mod (1 << intExpr(47)) <>       2841942049995 or
        5678901234567890123 mod (1 << intExpr(53)) <>    4365704081065163 or
        5678901234567890123 mod (1 << intExpr(59)) <>  490754463837078731 or
        5678901234567890123 mod (1 << intExpr(62)) <> 1067215216140502219 or
        intExpr(5678901234567890123) mod (1 <<  0) <>                   0 or
        intExpr(5678901234567890123) mod (1 <<  1) <>                   1 or
        intExpr(5678901234567890123) mod (1 <<  3) <>                   3 or
        intExpr(5678901234567890123) mod (1 <<  7) <>                  75 or
        intExpr(5678901234567890123) mod (1 << 11) <>                1227 or
        intExpr(5678901234567890123) mod (1 << 17) <>               17611 or
        intExpr(5678901234567890123) mod (1 << 23) <>             7488715 or
        intExpr(5678901234567890123) mod (1 << 29) <>           284312779 or
        intExpr(5678901234567890123) mod (1 << 37) <>         93162980555 or
        intExpr(5678901234567890123) mod (1 << 41) <>        642918794443 or
        intExpr(5678901234567890123) mod (1 << 47) <>       2841942049995 or
        intExpr(5678901234567890123) mod (1 << 53) <>    4365704081065163 or
        intExpr(5678901234567890123) mod (1 << 59) <>  490754463837078731 or
        intExpr(5678901234567890123) mod (1 << 62) <> 1067215216140502219 or
        intExpr(5678901234567890123) mod (1 << intExpr( 0)) <>                   0 or
        intExpr(5678901234567890123) mod (1 << intExpr( 1)) <>                   1 or
        intExpr(5678901234567890123) mod (1 << intExpr( 3)) <>                   3 or
        intExpr(5678901234567890123) mod (1 << intExpr( 7)) <>                  75 or
        intExpr(5678901234567890123) mod (1 << intExpr(11)) <>                1227 or
        intExpr(5678901234567890123) mod (1 << intExpr(17)) <>               17611 or
        intExpr(5678901234567890123) mod (1 << intExpr(23)) <>             7488715 or
        intExpr(5678901234567890123) mod (1 << intExpr(29)) <>           284312779 or
        intExpr(5678901234567890123) mod (1 << intExpr(37)) <>         93162980555 or
        intExpr(5678901234567890123) mod (1 << intExpr(41)) <>        642918794443 or
        intExpr(5678901234567890123) mod (1 << intExpr(47)) <>       2841942049995 or
        intExpr(5678901234567890123) mod (1 << intExpr(53)) <>    4365704081065163 or
        intExpr(5678901234567890123) mod (1 << intExpr(59)) <>  490754463837078731 or
        intExpr(5678901234567890123) mod (1 << intExpr(62)) <> 1067215216140502219 then
      writeln(" ***** mod by computed power of two does not work correct. (1)");
      okay := FALSE;
    end if;

    if  (        5  *         7 ) mod (1 << 5) <> 3 or
        (        5  * intExpr(7)) mod (1 << 5) <> 3 or
        (intExpr(5) *         7 ) mod (1 << 5) <> 3 or
        (intExpr(5) * intExpr(7)) mod (1 << 5) <> 3 or
        (        5  *         7 ) mod (1 << intExpr(5)) <> 3 or
        (        5  * intExpr(7)) mod (1 << intExpr(5)) <> 3 or
        (intExpr(5) *         7 ) mod (1 << intExpr(5)) <> 3 or
        (intExpr(5) * intExpr(7)) mod (1 << intExpr(5)) <> 3 then
      writeln(" ***** mod by computed power of two does not work correct. (2)");
      okay := FALSE;
    end if;

    if  (        13  +         5  *         7 ) mod (1 << 5) <> 16 or
        (        13  +         5  * intExpr(7)) mod (1 << 5) <> 16 or
        (        13  + intExpr(5) *         7 ) mod (1 << 5) <> 16 or
        (        13  + intExpr(5) * intExpr(7)) mod (1 << 5) <> 16 or
        (        13  +         5  *         7 ) mod (1 << intExpr(5)) <> 16 or
        (        13  +         5  * intExpr(7)) mod (1 << intExpr(5)) <> 16 or
        (        13  + intExpr(5) *         7 ) mod (1 << intExpr(5)) <> 16 or
        (        13  + intExpr(5) * intExpr(7)) mod (1 << intExpr(5)) <> 16 or
        (intExpr(13) +         5  *         7 ) mod (1 << 5) <> 16 or
        (intExpr(13) +         5  * intExpr(7)) mod (1 << 5) <> 16 or
        (intExpr(13) + intExpr(5) *         7 ) mod (1 << 5) <> 16 or
        (intExpr(13) + intExpr(5) * intExpr(7)) mod (1 << 5) <> 16 or
        (intExpr(13) +         5  *         7 ) mod (1 << intExpr(5)) <> 16 or
        (intExpr(13) +         5  * intExpr(7)) mod (1 << intExpr(5)) <> 16 or
        (intExpr(13) + intExpr(5) *         7 ) mod (1 << intExpr(5)) <> 16 or
        (intExpr(13) + intExpr(5) * intExpr(7)) mod (1 << intExpr(5)) <> 16 then
      writeln(" ***** mod by computed power of two does not work correct. (3)");
      okay := FALSE;
    end if;

    if  (        7  <<         3 ) mod (1 << 5) <> 24 or
        (        7  << intExpr(3)) mod (1 << 5) <> 24 or
        (intExpr(7) <<         3 ) mod (1 << 5) <> 24 or
        (intExpr(7) << intExpr(3)) mod (1 << 5) <> 24 or
        (        7  <<         3 ) mod (1 << intExpr(5)) <> 24 or
        (        7  << intExpr(3)) mod (1 << intExpr(5)) <> 24 or
        (intExpr(7) <<         3 ) mod (1 << intExpr(5)) <> 24 or
        (intExpr(7) << intExpr(3)) mod (1 << intExpr(5)) <> 24 or
        (        1  <<         62 ) mod (1 << 62) <> 0 or
        (        1  << intExpr(62)) mod (1 << 62) <> 0 or
        (intExpr(1) <<         62 ) mod (1 << 62) <> 0 or
        (intExpr(1) << intExpr(62)) mod (1 << 62) <> 0 or
        (        1  <<         62 ) mod (1 << intExpr(62)) <> 0 or
        (        1  << intExpr(62)) mod (1 << intExpr(62)) <> 0 or
        (intExpr(1) <<         62 ) mod (1 << intExpr(62)) <> 0 or
        (intExpr(1) << intExpr(62)) mod (1 << intExpr(62)) <> 0 then
      writeln(" ***** mod by computed power of two does not work correct. (4)");
      okay := FALSE;
    end if;

    if  (        11  + (        7  <<         3 )) mod (1 << 5) <> 3 or
        (        11  + (        7  << intExpr(3))) mod (1 << 5) <> 3 or
        (        11  + (intExpr(7) <<         3 )) mod (1 << 5) <> 3 or
        (        11  + (intExpr(7) << intExpr(3))) mod (1 << 5) <> 3 or
        (        11  + (        7  <<         3 )) mod (1 << intExpr(5)) <> 3 or
        (        11  + (        7  << intExpr(3))) mod (1 << intExpr(5)) <> 3 or
        (        11  + (intExpr(7) <<         3 )) mod (1 << intExpr(5)) <> 3 or
        (        11  + (intExpr(7) << intExpr(3))) mod (1 << intExpr(5)) <> 3 or
        (        11  + (        1  <<         62 )) mod (1 << 62) <> 11 or
        (        11  + (        1  << intExpr(62))) mod (1 << 62) <> 11 or
        (        11  + (intExpr(1) <<         62 )) mod (1 << 62) <> 11 or
        (        11  + (intExpr(1) << intExpr(62))) mod (1 << 62) <> 11 or
        (        11  + (        1  <<         62 )) mod (1 << intExpr(62)) <> 11 or
        (        11  + (        1  << intExpr(62))) mod (1 << intExpr(62)) <> 11 or
        (        11  + (intExpr(1) <<         62 )) mod (1 << intExpr(62)) <> 11 or
        (        11  + (intExpr(1) << intExpr(62))) mod (1 << intExpr(62)) <> 11 or
        (intExpr(11) + (        7  <<         3 )) mod (1 << 5) <> 3 or
        (intExpr(11) + (        7  << intExpr(3))) mod (1 << 5) <> 3 or
        (intExpr(11) + (intExpr(7) <<         3 )) mod (1 << 5) <> 3 or
        (intExpr(11) + (intExpr(7) << intExpr(3))) mod (1 << 5) <> 3 or
        (intExpr(11) + (        7  <<         3 )) mod (1 << intExpr(5)) <> 3 or
        (intExpr(11) + (        7  << intExpr(3))) mod (1 << intExpr(5)) <> 3 or
        (intExpr(11) + (intExpr(7) <<         3 )) mod (1 << intExpr(5)) <> 3 or
        (intExpr(11) + (intExpr(7) << intExpr(3))) mod (1 << intExpr(5)) <> 3 or
        (intExpr(11) + (        1  <<         62 )) mod (1 << 62) <> 11 or
        (intExpr(11) + (        1  << intExpr(62))) mod (1 << 62) <> 11 or
        (intExpr(11) + (intExpr(1) <<         62 )) mod (1 << 62) <> 11 or
        (intExpr(11) + (intExpr(1) << intExpr(62))) mod (1 << 62) <> 11 or
        (intExpr(11) + (        1  <<         62 )) mod (1 << intExpr(62)) <> 11 or
        (intExpr(11) + (        1  << intExpr(62))) mod (1 << intExpr(62)) <> 11 or
        (intExpr(11) + (intExpr(1) <<         62 )) mod (1 << intExpr(62)) <> 11 or
        (intExpr(11) + (intExpr(1) << intExpr(62))) mod (1 << intExpr(62)) <> 11 then
      writeln(" ***** mod by computed power of two does not work correct. (5)");
      okay := FALSE;
    end if;

    if  (        2  +         3  *         5  + (        7  <<         5 )) mod (1 << 7) <> 113 or
        (        2  +         3  *         5  + (        7  << intExpr(5))) mod (1 << 7) <> 113 or
        (        2  +         3  *         5  + (intExpr(7) <<         5 )) mod (1 << 7) <> 113 or
        (        2  +         3  *         5  + (intExpr(7) << intExpr(5))) mod (1 << 7) <> 113 or
        (        2  +         3  * intExpr(5) + (        7  <<         5 )) mod (1 << 7) <> 113 or
        (        2  +         3  * intExpr(5) + (        7  << intExpr(5))) mod (1 << 7) <> 113 or
        (        2  +         3  * intExpr(5) + (intExpr(7) <<         5 )) mod (1 << 7) <> 113 or
        (        2  +         3  * intExpr(5) + (intExpr(7) << intExpr(5))) mod (1 << 7) <> 113 or
        (        2  + intExpr(3) *         5  + (        7  <<         5 )) mod (1 << 7) <> 113 or
        (        2  + intExpr(3) *         5  + (        7  << intExpr(5))) mod (1 << 7) <> 113 or
        (        2  + intExpr(3) *         5  + (intExpr(7) <<         5 )) mod (1 << 7) <> 113 or
        (        2  + intExpr(3) *         5  + (intExpr(7) << intExpr(5))) mod (1 << 7) <> 113 or
        (        2  + intExpr(3) * intExpr(5) + (        7  <<         5 )) mod (1 << 7) <> 113 or
        (        2  + intExpr(3) * intExpr(5) + (        7  << intExpr(5))) mod (1 << 7) <> 113 or
        (        2  + intExpr(3) * intExpr(5) + (intExpr(7) <<         5 )) mod (1 << 7) <> 113 or
        (        2  + intExpr(3) * intExpr(5) + (intExpr(7) << intExpr(5))) mod (1 << 7) <> 113 or
        (intExpr(2) +         3  *         5  + (        7  <<         5 )) mod (1 << 7) <> 113 or
        (intExpr(2) +         3  *         5  + (        7  << intExpr(5))) mod (1 << 7) <> 113 or
        (intExpr(2) +         3  *         5  + (intExpr(7) <<         5 )) mod (1 << 7) <> 113 or
        (intExpr(2) +         3  *         5  + (intExpr(7) << intExpr(5))) mod (1 << 7) <> 113 or
        (intExpr(2) +         3  * intExpr(5) + (        7  <<         5 )) mod (1 << 7) <> 113 or
        (intExpr(2) +         3  * intExpr(5) + (        7  << intExpr(5))) mod (1 << 7) <> 113 or
        (intExpr(2) +         3  * intExpr(5) + (intExpr(7) <<         5 )) mod (1 << 7) <> 113 or
        (intExpr(2) +         3  * intExpr(5) + (intExpr(7) << intExpr(5))) mod (1 << 7) <> 113 or
        (intExpr(2) + intExpr(3) *         5  + (        7  <<         5 )) mod (1 << 7) <> 113 or
        (intExpr(2) + intExpr(3) *         5  + (        7  << intExpr(5))) mod (1 << 7) <> 113 or
        (intExpr(2) + intExpr(3) *         5  + (intExpr(7) <<         5 )) mod (1 << 7) <> 113 or
        (intExpr(2) + intExpr(3) *         5  + (intExpr(7) << intExpr(5))) mod (1 << 7) <> 113 or
        (intExpr(2) + intExpr(3) * intExpr(5) + (        7  <<         5 )) mod (1 << 7) <> 113 or
        (intExpr(2) + intExpr(3) * intExpr(5) + (        7  << intExpr(5))) mod (1 << 7) <> 113 or
        (intExpr(2) + intExpr(3) * intExpr(5) + (intExpr(7) <<         5 )) mod (1 << 7) <> 113 or
        (intExpr(2) + intExpr(3) * intExpr(5) + (intExpr(7) << intExpr(5))) mod (1 << 7) <> 113 or
        (        2  +         3  *         5  + (        7  <<         5 )) mod (1 << intExpr(7)) <> 113 or
        (        2  +         3  *         5  + (        7  << intExpr(5))) mod (1 << intExpr(7)) <> 113 or
        (        2  +         3  *         5  + (intExpr(7) <<         5 )) mod (1 << intExpr(7)) <> 113 or
        (        2  +         3  *         5  + (intExpr(7) << intExpr(5))) mod (1 << intExpr(7)) <> 113 or
        (        2  +         3  * intExpr(5) + (        7  <<         5 )) mod (1 << intExpr(7)) <> 113 or
        (        2  +         3  * intExpr(5) + (        7  << intExpr(5))) mod (1 << intExpr(7)) <> 113 or
        (        2  +         3  * intExpr(5) + (intExpr(7) <<         5 )) mod (1 << intExpr(7)) <> 113 or
        (        2  +         3  * intExpr(5) + (intExpr(7) << intExpr(5))) mod (1 << intExpr(7)) <> 113 or
        (        2  + intExpr(3) *         5  + (        7  <<         5 )) mod (1 << intExpr(7)) <> 113 or
        (        2  + intExpr(3) *         5  + (        7  << intExpr(5))) mod (1 << intExpr(7)) <> 113 or
        (        2  + intExpr(3) *         5  + (intExpr(7) <<         5 )) mod (1 << intExpr(7)) <> 113 or
        (        2  + intExpr(3) *         5  + (intExpr(7) << intExpr(5))) mod (1 << intExpr(7)) <> 113 or
        (        2  + intExpr(3) * intExpr(5) + (        7  <<         5 )) mod (1 << intExpr(7)) <> 113 or
        (        2  + intExpr(3) * intExpr(5) + (        7  << intExpr(5))) mod (1 << intExpr(7)) <> 113 or
        (        2  + intExpr(3) * intExpr(5) + (intExpr(7) <<         5 )) mod (1 << intExpr(7)) <> 113 or
        (        2  + intExpr(3) * intExpr(5) + (intExpr(7) << intExpr(5))) mod (1 << intExpr(7)) <> 113 or
        (intExpr(2) +         3  *         5  + (        7  <<         5 )) mod (1 << intExpr(7)) <> 113 or
        (intExpr(2) +         3  *         5  + (        7  << intExpr(5))) mod (1 << intExpr(7)) <> 113 or
        (intExpr(2) +         3  *         5  + (intExpr(7) <<         5 )) mod (1 << intExpr(7)) <> 113 or
        (intExpr(2) +         3  *         5  + (intExpr(7) << intExpr(5))) mod (1 << intExpr(7)) <> 113 or
        (intExpr(2) +         3  * intExpr(5) + (        7  <<         5 )) mod (1 << intExpr(7)) <> 113 or
        (intExpr(2) +         3  * intExpr(5) + (        7  << intExpr(5))) mod (1 << intExpr(7)) <> 113 or
        (intExpr(2) +         3  * intExpr(5) + (intExpr(7) <<         5 )) mod (1 << intExpr(7)) <> 113 or
        (intExpr(2) +         3  * intExpr(5) + (intExpr(7) << intExpr(5))) mod (1 << intExpr(7)) <> 113 or
        (intExpr(2) + intExpr(3) *         5  + (        7  <<         5 )) mod (1 << intExpr(7)) <> 113 or
        (intExpr(2) + intExpr(3) *         5  + (        7  << intExpr(5))) mod (1 << intExpr(7)) <> 113 or
        (intExpr(2) + intExpr(3) *         5  + (intExpr(7) <<         5 )) mod (1 << intExpr(7)) <> 113 or
        (intExpr(2) + intExpr(3) *         5  + (intExpr(7) << intExpr(5))) mod (1 << intExpr(7)) <> 113 or
        (intExpr(2) + intExpr(3) * intExpr(5) + (        7  <<         5 )) mod (1 << intExpr(7)) <> 113 or
        (intExpr(2) + intExpr(3) * intExpr(5) + (        7  << intExpr(5))) mod (1 << intExpr(7)) <> 113 or
        (intExpr(2) + intExpr(3) * intExpr(5) + (intExpr(7) <<         5 )) mod (1 << intExpr(7)) <> 113 or
        (intExpr(2) + intExpr(3) * intExpr(5) + (intExpr(7) << intExpr(5))) mod (1 << intExpr(7)) <> 113 then
      writeln(" ***** mod by computed power of two does not work correct. (6)");
      okay := FALSE;
    end if;

    if  5678901234567890123 mod (2 **  0) <>                   0 or
        5678901234567890123 mod (2 **  1) <>                   1 or
        5678901234567890123 mod (2 **  3) <>                   3 or
        5678901234567890123 mod (2 **  7) <>                  75 or
        5678901234567890123 mod (2 ** 11) <>                1227 or
        5678901234567890123 mod (2 ** 17) <>               17611 or
        5678901234567890123 mod (2 ** 23) <>             7488715 or
        5678901234567890123 mod (2 ** 29) <>           284312779 or
        5678901234567890123 mod (2 ** 37) <>         93162980555 or
        5678901234567890123 mod (2 ** 41) <>        642918794443 or
        5678901234567890123 mod (2 ** 47) <>       2841942049995 or
        5678901234567890123 mod (2 ** 53) <>    4365704081065163 or
        5678901234567890123 mod (2 ** 59) <>  490754463837078731 or
        5678901234567890123 mod (2 ** 62) <> 1067215216140502219 or
        5678901234567890123 mod (2 ** intExpr( 0)) <>                   0 or
        5678901234567890123 mod (2 ** intExpr( 1)) <>                   1 or
        5678901234567890123 mod (2 ** intExpr( 3)) <>                   3 or
        5678901234567890123 mod (2 ** intExpr( 7)) <>                  75 or
        5678901234567890123 mod (2 ** intExpr(11)) <>                1227 or
        5678901234567890123 mod (2 ** intExpr(17)) <>               17611 or
        5678901234567890123 mod (2 ** intExpr(23)) <>             7488715 or
        5678901234567890123 mod (2 ** intExpr(29)) <>           284312779 or
        5678901234567890123 mod (2 ** intExpr(37)) <>         93162980555 or
        5678901234567890123 mod (2 ** intExpr(41)) <>        642918794443 or
        5678901234567890123 mod (2 ** intExpr(47)) <>       2841942049995 or
        5678901234567890123 mod (2 ** intExpr(53)) <>    4365704081065163 or
        5678901234567890123 mod (2 ** intExpr(59)) <>  490754463837078731 or
        5678901234567890123 mod (2 ** intExpr(62)) <> 1067215216140502219 or
        intExpr(5678901234567890123) mod (2 **  0) <>                   0 or
        intExpr(5678901234567890123) mod (2 **  1) <>                   1 or
        intExpr(5678901234567890123) mod (2 **  3) <>                   3 or
        intExpr(5678901234567890123) mod (2 **  7) <>                  75 or
        intExpr(5678901234567890123) mod (2 ** 11) <>                1227 or
        intExpr(5678901234567890123) mod (2 ** 17) <>               17611 or
        intExpr(5678901234567890123) mod (2 ** 23) <>             7488715 or
        intExpr(5678901234567890123) mod (2 ** 29) <>           284312779 or
        intExpr(5678901234567890123) mod (2 ** 37) <>         93162980555 or
        intExpr(5678901234567890123) mod (2 ** 41) <>        642918794443 or
        intExpr(5678901234567890123) mod (2 ** 47) <>       2841942049995 or
        intExpr(5678901234567890123) mod (2 ** 53) <>    4365704081065163 or
        intExpr(5678901234567890123) mod (2 ** 59) <>  490754463837078731 or
        intExpr(5678901234567890123) mod (2 ** 62) <> 1067215216140502219 or
        intExpr(5678901234567890123) mod (2 ** intExpr( 0)) <>                   0 or
        intExpr(5678901234567890123) mod (2 ** intExpr( 1)) <>                   1 or
        intExpr(5678901234567890123) mod (2 ** intExpr( 3)) <>                   3 or
        intExpr(5678901234567890123) mod (2 ** intExpr( 7)) <>                  75 or
        intExpr(5678901234567890123) mod (2 ** intExpr(11)) <>                1227 or
        intExpr(5678901234567890123) mod (2 ** intExpr(17)) <>               17611 or
        intExpr(5678901234567890123) mod (2 ** intExpr(23)) <>             7488715 or
        intExpr(5678901234567890123) mod (2 ** intExpr(29)) <>           284312779 or
        intExpr(5678901234567890123) mod (2 ** intExpr(37)) <>         93162980555 or
        intExpr(5678901234567890123) mod (2 ** intExpr(41)) <>        642918794443 or
        intExpr(5678901234567890123) mod (2 ** intExpr(47)) <>       2841942049995 or
        intExpr(5678901234567890123) mod (2 ** intExpr(53)) <>    4365704081065163 or
        intExpr(5678901234567890123) mod (2 ** intExpr(59)) <>  490754463837078731 or
        intExpr(5678901234567890123) mod (2 ** intExpr(62)) <> 1067215216140502219 then
      writeln(" ***** mod by computed power of two does not work correct. (7)");
      okay := FALSE;
    end if;

    if  (        5  *         7 ) mod (2 ** 5) <> 3 or
        (        5  * intExpr(7)) mod (2 ** 5) <> 3 or
        (intExpr(5) *         7 ) mod (2 ** 5) <> 3 or
        (intExpr(5) * intExpr(7)) mod (2 ** 5) <> 3 or
        (        5  *         7 ) mod (2 ** intExpr(5)) <> 3 or
        (        5  * intExpr(7)) mod (2 ** intExpr(5)) <> 3 or
        (intExpr(5) *         7 ) mod (2 ** intExpr(5)) <> 3 or
        (intExpr(5) * intExpr(7)) mod (2 ** intExpr(5)) <> 3 then
      writeln(" ***** mod by computed power of two does not work correct. (8)");
      okay := FALSE;
    end if;

    if  (        13  +         5  *         7 ) mod (2 ** 5) <> 16 or
        (        13  +         5  * intExpr(7)) mod (2 ** 5) <> 16 or
        (        13  + intExpr(5) *         7 ) mod (2 ** 5) <> 16 or
        (        13  + intExpr(5) * intExpr(7)) mod (2 ** 5) <> 16 or
        (        13  +         5  *         7 ) mod (2 ** intExpr(5)) <> 16 or
        (        13  +         5  * intExpr(7)) mod (2 ** intExpr(5)) <> 16 or
        (        13  + intExpr(5) *         7 ) mod (2 ** intExpr(5)) <> 16 or
        (        13  + intExpr(5) * intExpr(7)) mod (2 ** intExpr(5)) <> 16 or
        (intExpr(13) +         5  *         7 ) mod (2 ** 5) <> 16 or
        (intExpr(13) +         5  * intExpr(7)) mod (2 ** 5) <> 16 or
        (intExpr(13) + intExpr(5) *         7 ) mod (2 ** 5) <> 16 or
        (intExpr(13) + intExpr(5) * intExpr(7)) mod (2 ** 5) <> 16 or
        (intExpr(13) +         5  *         7 ) mod (2 ** intExpr(5)) <> 16 or
        (intExpr(13) +         5  * intExpr(7)) mod (2 ** intExpr(5)) <> 16 or
        (intExpr(13) + intExpr(5) *         7 ) mod (2 ** intExpr(5)) <> 16 or
        (intExpr(13) + intExpr(5) * intExpr(7)) mod (2 ** intExpr(5)) <> 16 then
      writeln(" ***** mod by computed power of two does not work correct. (9)");
      okay := FALSE;
    end if;

    if  (        7  <<         3 ) mod (2 ** 5) <> 24 or
        (        7  << intExpr(3)) mod (2 ** 5) <> 24 or
        (intExpr(7) <<         3 ) mod (2 ** 5) <> 24 or
        (intExpr(7) << intExpr(3)) mod (2 ** 5) <> 24 or
        (        7  <<         3 ) mod (2 ** intExpr(5)) <> 24 or
        (        7  << intExpr(3)) mod (2 ** intExpr(5)) <> 24 or
        (intExpr(7) <<         3 ) mod (2 ** intExpr(5)) <> 24 or
        (intExpr(7) << intExpr(3)) mod (2 ** intExpr(5)) <> 24 or
        (        1  <<         62 ) mod (2 ** 62) <> 0 or
        (        1  << intExpr(62)) mod (2 ** 62) <> 0 or
        (intExpr(1) <<         62 ) mod (2 ** 62) <> 0 or
        (intExpr(1) << intExpr(62)) mod (2 ** 62) <> 0 or
        (        1  <<         62 ) mod (2 ** intExpr(62)) <> 0 or
        (        1  << intExpr(62)) mod (2 ** intExpr(62)) <> 0 or
        (intExpr(1) <<         62 ) mod (2 ** intExpr(62)) <> 0 or
        (intExpr(1) << intExpr(62)) mod (2 ** intExpr(62)) <> 0 then
      writeln(" ***** mod by computed power of two does not work correct. (10)");
      okay := FALSE;
    end if;

    if  (        11  + (        7  <<         3 )) mod (2 ** 5) <> 3 or
        (        11  + (        7  << intExpr(3))) mod (2 ** 5) <> 3 or
        (        11  + (intExpr(7) <<         3 )) mod (2 ** 5) <> 3 or
        (        11  + (intExpr(7) << intExpr(3))) mod (2 ** 5) <> 3 or
        (        11  + (        7  <<         3 )) mod (2 ** intExpr(5)) <> 3 or
        (        11  + (        7  << intExpr(3))) mod (2 ** intExpr(5)) <> 3 or
        (        11  + (intExpr(7) <<         3 )) mod (2 ** intExpr(5)) <> 3 or
        (        11  + (intExpr(7) << intExpr(3))) mod (2 ** intExpr(5)) <> 3 or
        (        11  + (        1  <<         62 )) mod (2 ** 62) <> 11 or
        (        11  + (        1  << intExpr(62))) mod (2 ** 62) <> 11 or
        (        11  + (intExpr(1) <<         62 )) mod (2 ** 62) <> 11 or
        (        11  + (intExpr(1) << intExpr(62))) mod (2 ** 62) <> 11 or
        (        11  + (        1  <<         62 )) mod (2 ** intExpr(62)) <> 11 or
        (        11  + (        1  << intExpr(62))) mod (2 ** intExpr(62)) <> 11 or
        (        11  + (intExpr(1) <<         62 )) mod (2 ** intExpr(62)) <> 11 or
        (        11  + (intExpr(1) << intExpr(62))) mod (2 ** intExpr(62)) <> 11 or
        (intExpr(11) + (        7  <<         3 )) mod (2 ** 5) <> 3 or
        (intExpr(11) + (        7  << intExpr(3))) mod (2 ** 5) <> 3 or
        (intExpr(11) + (intExpr(7) <<         3 )) mod (2 ** 5) <> 3 or
        (intExpr(11) + (intExpr(7) << intExpr(3))) mod (2 ** 5) <> 3 or
        (intExpr(11) + (        7  <<         3 )) mod (2 ** intExpr(5)) <> 3 or
        (intExpr(11) + (        7  << intExpr(3))) mod (2 ** intExpr(5)) <> 3 or
        (intExpr(11) + (intExpr(7) <<         3 )) mod (2 ** intExpr(5)) <> 3 or
        (intExpr(11) + (intExpr(7) << intExpr(3))) mod (2 ** intExpr(5)) <> 3 or
        (intExpr(11) + (        1  <<         62 )) mod (2 ** 62) <> 11 or
        (intExpr(11) + (        1  << intExpr(62))) mod (2 ** 62) <> 11 or
        (intExpr(11) + (intExpr(1) <<         62 )) mod (2 ** 62) <> 11 or
        (intExpr(11) + (intExpr(1) << intExpr(62))) mod (2 ** 62) <> 11 or
        (intExpr(11) + (        1  <<         62 )) mod (2 ** intExpr(62)) <> 11 or
        (intExpr(11) + (        1  << intExpr(62))) mod (2 ** intExpr(62)) <> 11 or
        (intExpr(11) + (intExpr(1) <<         62 )) mod (2 ** intExpr(62)) <> 11 or
        (intExpr(11) + (intExpr(1) << intExpr(62))) mod (2 ** intExpr(62)) <> 11 then
      writeln(" ***** mod by computed power of two does not work correct. (11)");
      okay := FALSE;
    end if;

    if  (        2  +         3  *         5  + (        7  <<         5 )) mod (2 ** 7) <> 113 or
        (        2  +         3  *         5  + (        7  << intExpr(5))) mod (2 ** 7) <> 113 or
        (        2  +         3  *         5  + (intExpr(7) <<         5 )) mod (2 ** 7) <> 113 or
        (        2  +         3  *         5  + (intExpr(7) << intExpr(5))) mod (2 ** 7) <> 113 or
        (        2  +         3  * intExpr(5) + (        7  <<         5 )) mod (2 ** 7) <> 113 or
        (        2  +         3  * intExpr(5) + (        7  << intExpr(5))) mod (2 ** 7) <> 113 or
        (        2  +         3  * intExpr(5) + (intExpr(7) <<         5 )) mod (2 ** 7) <> 113 or
        (        2  +         3  * intExpr(5) + (intExpr(7) << intExpr(5))) mod (2 ** 7) <> 113 or
        (        2  + intExpr(3) *         5  + (        7  <<         5 )) mod (2 ** 7) <> 113 or
        (        2  + intExpr(3) *         5  + (        7  << intExpr(5))) mod (2 ** 7) <> 113 or
        (        2  + intExpr(3) *         5  + (intExpr(7) <<         5 )) mod (2 ** 7) <> 113 or
        (        2  + intExpr(3) *         5  + (intExpr(7) << intExpr(5))) mod (2 ** 7) <> 113 or
        (        2  + intExpr(3) * intExpr(5) + (        7  <<         5 )) mod (2 ** 7) <> 113 or
        (        2  + intExpr(3) * intExpr(5) + (        7  << intExpr(5))) mod (2 ** 7) <> 113 or
        (        2  + intExpr(3) * intExpr(5) + (intExpr(7) <<         5 )) mod (2 ** 7) <> 113 or
        (        2  + intExpr(3) * intExpr(5) + (intExpr(7) << intExpr(5))) mod (2 ** 7) <> 113 or
        (intExpr(2) +         3  *         5  + (        7  <<         5 )) mod (2 ** 7) <> 113 or
        (intExpr(2) +         3  *         5  + (        7  << intExpr(5))) mod (2 ** 7) <> 113 or
        (intExpr(2) +         3  *         5  + (intExpr(7) <<         5 )) mod (2 ** 7) <> 113 or
        (intExpr(2) +         3  *         5  + (intExpr(7) << intExpr(5))) mod (2 ** 7) <> 113 or
        (intExpr(2) +         3  * intExpr(5) + (        7  <<         5 )) mod (2 ** 7) <> 113 or
        (intExpr(2) +         3  * intExpr(5) + (        7  << intExpr(5))) mod (2 ** 7) <> 113 or
        (intExpr(2) +         3  * intExpr(5) + (intExpr(7) <<         5 )) mod (2 ** 7) <> 113 or
        (intExpr(2) +         3  * intExpr(5) + (intExpr(7) << intExpr(5))) mod (2 ** 7) <> 113 or
        (intExpr(2) + intExpr(3) *         5  + (        7  <<         5 )) mod (2 ** 7) <> 113 or
        (intExpr(2) + intExpr(3) *         5  + (        7  << intExpr(5))) mod (2 ** 7) <> 113 or
        (intExpr(2) + intExpr(3) *         5  + (intExpr(7) <<         5 )) mod (2 ** 7) <> 113 or
        (intExpr(2) + intExpr(3) *         5  + (intExpr(7) << intExpr(5))) mod (2 ** 7) <> 113 or
        (intExpr(2) + intExpr(3) * intExpr(5) + (        7  <<         5 )) mod (2 ** 7) <> 113 or
        (intExpr(2) + intExpr(3) * intExpr(5) + (        7  << intExpr(5))) mod (2 ** 7) <> 113 or
        (intExpr(2) + intExpr(3) * intExpr(5) + (intExpr(7) <<         5 )) mod (2 ** 7) <> 113 or
        (intExpr(2) + intExpr(3) * intExpr(5) + (intExpr(7) << intExpr(5))) mod (2 ** 7) <> 113 or
        (        2  +         3  *         5  + (        7  <<         5 )) mod (2 ** intExpr(7)) <> 113 or
        (        2  +         3  *         5  + (        7  << intExpr(5))) mod (2 ** intExpr(7)) <> 113 or
        (        2  +         3  *         5  + (intExpr(7) <<         5 )) mod (2 ** intExpr(7)) <> 113 or
        (        2  +         3  *         5  + (intExpr(7) << intExpr(5))) mod (2 ** intExpr(7)) <> 113 or
        (        2  +         3  * intExpr(5) + (        7  <<         5 )) mod (2 ** intExpr(7)) <> 113 or
        (        2  +         3  * intExpr(5) + (        7  << intExpr(5))) mod (2 ** intExpr(7)) <> 113 or
        (        2  +         3  * intExpr(5) + (intExpr(7) <<         5 )) mod (2 ** intExpr(7)) <> 113 or
        (        2  +         3  * intExpr(5) + (intExpr(7) << intExpr(5))) mod (2 ** intExpr(7)) <> 113 or
        (        2  + intExpr(3) *         5  + (        7  <<         5 )) mod (2 ** intExpr(7)) <> 113 or
        (        2  + intExpr(3) *         5  + (        7  << intExpr(5))) mod (2 ** intExpr(7)) <> 113 or
        (        2  + intExpr(3) *         5  + (intExpr(7) <<         5 )) mod (2 ** intExpr(7)) <> 113 or
        (        2  + intExpr(3) *         5  + (intExpr(7) << intExpr(5))) mod (2 ** intExpr(7)) <> 113 or
        (        2  + intExpr(3) * intExpr(5) + (        7  <<         5 )) mod (2 ** intExpr(7)) <> 113 or
        (        2  + intExpr(3) * intExpr(5) + (        7  << intExpr(5))) mod (2 ** intExpr(7)) <> 113 or
        (        2  + intExpr(3) * intExpr(5) + (intExpr(7) <<         5 )) mod (2 ** intExpr(7)) <> 113 or
        (        2  + intExpr(3) * intExpr(5) + (intExpr(7) << intExpr(5))) mod (2 ** intExpr(7)) <> 113 or
        (intExpr(2) +         3  *         5  + (        7  <<         5 )) mod (2 ** intExpr(7)) <> 113 or
        (intExpr(2) +         3  *         5  + (        7  << intExpr(5))) mod (2 ** intExpr(7)) <> 113 or
        (intExpr(2) +         3  *         5  + (intExpr(7) <<         5 )) mod (2 ** intExpr(7)) <> 113 or
        (intExpr(2) +         3  *         5  + (intExpr(7) << intExpr(5))) mod (2 ** intExpr(7)) <> 113 or
        (intExpr(2) +         3  * intExpr(5) + (        7  <<         5 )) mod (2 ** intExpr(7)) <> 113 or
        (intExpr(2) +         3  * intExpr(5) + (        7  << intExpr(5))) mod (2 ** intExpr(7)) <> 113 or
        (intExpr(2) +         3  * intExpr(5) + (intExpr(7) <<         5 )) mod (2 ** intExpr(7)) <> 113 or
        (intExpr(2) +         3  * intExpr(5) + (intExpr(7) << intExpr(5))) mod (2 ** intExpr(7)) <> 113 or
        (intExpr(2) + intExpr(3) *         5  + (        7  <<         5 )) mod (2 ** intExpr(7)) <> 113 or
        (intExpr(2) + intExpr(3) *         5  + (        7  << intExpr(5))) mod (2 ** intExpr(7)) <> 113 or
        (intExpr(2) + intExpr(3) *         5  + (intExpr(7) <<         5 )) mod (2 ** intExpr(7)) <> 113 or
        (intExpr(2) + intExpr(3) *         5  + (intExpr(7) << intExpr(5))) mod (2 ** intExpr(7)) <> 113 or
        (intExpr(2) + intExpr(3) * intExpr(5) + (        7  <<         5 )) mod (2 ** intExpr(7)) <> 113 or
        (intExpr(2) + intExpr(3) * intExpr(5) + (        7  << intExpr(5))) mod (2 ** intExpr(7)) <> 113 or
        (intExpr(2) + intExpr(3) * intExpr(5) + (intExpr(7) <<         5 )) mod (2 ** intExpr(7)) <> 113 or
        (intExpr(2) + intExpr(3) * intExpr(5) + (intExpr(7) << intExpr(5))) mod (2 ** intExpr(7)) <> 113 then
      writeln(" ***** mod by computed power of two does not work correct. (12)");
      okay := FALSE;
    end if;

    if  not raisesNumericError(        5678901234567890123  mod (2 **        (-1))) or
        not raisesNumericError(        5678901234567890123  mod (2 ** intExpr(-1))) or
        not raisesNumericError(intExpr(5678901234567890123) mod (2 **        (-1))) or
        not raisesNumericError(intExpr(5678901234567890123) mod (2 ** intExpr(-1))) then
      writeln(" ***** mod by computed power of two does not raise NUMERIC_ERROR.");
      okay := FALSE;
    end if;
  end func;


const func boolean: check_mod_by_zero is func
  result
    var boolean: okay is TRUE;
  local
    var integer: zero is 0;
    var integer: zero2 is 0;
    var integer: one is 1;
    var integer: minusOne is -1;
  begin
    if  not raisesNumericError(          INT64_MIN  mod         0 ) or
        not raisesNumericError(        -2147483648  mod         0 ) or
        not raisesNumericError(                 -1  mod         0 ) or
        not raisesNumericError(           minusOne  mod         0 ) or
        not raisesNumericError(                  0  mod         0 ) or
        not raisesNumericError(              zero2  mod         0 ) or
        not raisesNumericError(                  1  mod         0 ) or
        not raisesNumericError(                one  mod         0 ) or
        not raisesNumericError(         2147483647  mod         0 ) or
        not raisesNumericError(          INT64_MAX  mod         0 ) or
        not raisesNumericError(intExpr(  INT64_MIN) mod         0 ) or
        not raisesNumericError(intExpr(-2147483648) mod         0 ) or
        not raisesNumericError(intExpr(         -1) mod         0 ) or
        not raisesNumericError(intExpr(          0) mod         0 ) or
        not raisesNumericError(intExpr(          1) mod         0 ) or
        not raisesNumericError(intExpr( 2147483647) mod         0 ) or
        not raisesNumericError(intExpr(  INT64_MAX) mod         0 ) or
        not raisesNumericError(          INT64_MIN  mod      zero ) or
        not raisesNumericError(        -2147483648  mod      zero ) or
        not raisesNumericError(                 -1  mod      zero ) or
        not raisesNumericError(           minusOne  mod      zero ) or
        not raisesNumericError(                  0  mod      zero ) or
        not raisesNumericError(               zero  mod      zero ) or
        not raisesNumericError(              zero2  mod      zero ) or
        not raisesNumericError(                  1  mod      zero ) or
        not raisesNumericError(                one  mod      zero ) or
        not raisesNumericError(         2147483647  mod      zero ) or
        not raisesNumericError(          INT64_MAX  mod      zero ) or
        not raisesNumericError(intExpr(  INT64_MIN) mod      zero ) or
        not raisesNumericError(intExpr(-2147483648) mod      zero ) or
        not raisesNumericError(intExpr(         -1) mod      zero ) or
        not raisesNumericError(intExpr(          0) mod      zero ) or
        not raisesNumericError(intExpr(          1) mod      zero ) or
        not raisesNumericError(intExpr( 2147483647) mod      zero ) or
        not raisesNumericError(intExpr(  INT64_MAX) mod      zero ) or
        not raisesNumericError(          INT64_MIN  mod intExpr(0)) or
        not raisesNumericError(        -2147483648  mod intExpr(0)) or
        not raisesNumericError(                 -1  mod intExpr(0)) or
        not raisesNumericError(           minusOne  mod intExpr(0)) or
        not raisesNumericError(                  0  mod intExpr(0)) or
        not raisesNumericError(              zero2  mod intExpr(0)) or
        not raisesNumericError(                  1  mod intExpr(0)) or
        not raisesNumericError(                one  mod intExpr(0)) or
        not raisesNumericError(         2147483647  mod intExpr(0)) or
        not raisesNumericError(          INT64_MAX  mod intExpr(0)) or
        not raisesNumericError(intExpr(  INT64_MIN) mod intExpr(0)) or
        not raisesNumericError(intExpr(-2147483648) mod intExpr(0)) or
        not raisesNumericError(intExpr(         -1) mod intExpr(0)) or
        not raisesNumericError(intExpr(          0) mod intExpr(0)) or
        not raisesNumericError(intExpr(          1) mod intExpr(0)) or
        not raisesNumericError(intExpr( 2147483647) mod intExpr(0)) or
        not raisesNumericError(intExpr(  INT64_MAX) mod intExpr(0)) then
      writeln(" ***** Division by zero with the mod operator does not raise NUMERIC_ERROR.");
      okay := FALSE;
    end if;
  end func;


const proc: check_mod is func
  local
    var boolean: okay is TRUE;
  begin
    if   10 mod  5 <>  0 or
          9 mod  5 <>  4 or
          8 mod  5 <>  3 or
          7 mod  5 <>  2 or
          6 mod  5 <>  1 or
          5 mod  5 <>  0 or
          4 mod  5 <>  4 or
          3 mod  5 <>  3 or
          2 mod  5 <>  2 or
          1 mod  5 <>  1 or
          0 mod  5 <>  0 or
         -1 mod  5 <>  4 or
         -2 mod  5 <>  3 or
         -3 mod  5 <>  2 or
         -4 mod  5 <>  1 or
         -5 mod  5 <>  0 or
         -6 mod  5 <>  4 or
         -7 mod  5 <>  3 or
         -8 mod  5 <>  2 or
         -9 mod  5 <>  1 or
        -10 mod  5 <>  0 or
         10 mod  4 <>  2 or
          9 mod  4 <>  1 or
          8 mod  4 <>  0 or
          7 mod  4 <>  3 or
          6 mod  4 <>  2 or
          5 mod  4 <>  1 or
          4 mod  4 <>  0 or
          3 mod  4 <>  3 or
          2 mod  4 <>  2 or
          1 mod  4 <>  1 or
          0 mod  4 <>  0 or
         -1 mod  4 <>  3 or
         -2 mod  4 <>  2 or
         -3 mod  4 <>  1 or
         -4 mod  4 <>  0 or
         -5 mod  4 <>  3 or
         -6 mod  4 <>  2 or
         -7 mod  4 <>  1 or
         -8 mod  4 <>  0 or
         -9 mod  4 <>  3 or
        -10 mod  4 <>  2 or
         10 mod  3 <>  1 or
          9 mod  3 <>  0 or
          8 mod  3 <>  2 or
          7 mod  3 <>  1 or
          6 mod  3 <>  0 or
          5 mod  3 <>  2 or
          4 mod  3 <>  1 or
          3 mod  3 <>  0 or
          2 mod  3 <>  2 or
          1 mod  3 <>  1 or
          0 mod  3 <>  0 or
         -1 mod  3 <>  2 or
         -2 mod  3 <>  1 or
         -3 mod  3 <>  0 or
         -4 mod  3 <>  2 or
         -5 mod  3 <>  1 or
         -6 mod  3 <>  0 or
         -7 mod  3 <>  2 or
         -8 mod  3 <>  1 or
         -9 mod  3 <>  0 or
        -10 mod  3 <>  2 or
         10 mod  2 <>  0 or
          9 mod  2 <>  1 or
          8 mod  2 <>  0 or
          7 mod  2 <>  1 or
          6 mod  2 <>  0 or
          5 mod  2 <>  1 or
          4 mod  2 <>  0 or
          3 mod  2 <>  1 or
          2 mod  2 <>  0 or
          1 mod  2 <>  1 or
          0 mod  2 <>  0 or
         -1 mod  2 <>  1 or
         -2 mod  2 <>  0 or
         -3 mod  2 <>  1 or
         -4 mod  2 <>  0 or
         -5 mod  2 <>  1 or
         -6 mod  2 <>  0 or
         -7 mod  2 <>  1 or
         -8 mod  2 <>  0 or
         -9 mod  2 <>  1 or
        -10 mod  2 <>  0 or
         10 mod  1 <>  0 or
          9 mod  1 <>  0 or
          8 mod  1 <>  0 or
          7 mod  1 <>  0 or
          6 mod  1 <>  0 or
          5 mod  1 <>  0 or
          4 mod  1 <>  0 or
          3 mod  1 <>  0 or
          2 mod  1 <>  0 or
          1 mod  1 <>  0 or
          0 mod  1 <>  0 or
         -1 mod  1 <>  0 or
         -2 mod  1 <>  0 or
         -3 mod  1 <>  0 or
         -4 mod  1 <>  0 or
         -5 mod  1 <>  0 or
         -6 mod  1 <>  0 or
         -7 mod  1 <>  0 or
         -8 mod  1 <>  0 or
         -9 mod  1 <>  0 or
        -10 mod  1 <>  0 or
         10 mod -1 <>  0 or
          9 mod -1 <>  0 or
          8 mod -1 <>  0 or
          7 mod -1 <>  0 or
          6 mod -1 <>  0 or
          5 mod -1 <>  0 or
          4 mod -1 <>  0 or
          3 mod -1 <>  0 or
          2 mod -1 <>  0 or
          1 mod -1 <>  0 or
          0 mod -1 <>  0 or
         -1 mod -1 <>  0 or
         -2 mod -1 <>  0 or
         -3 mod -1 <>  0 or
         -4 mod -1 <>  0 or
         -5 mod -1 <>  0 or
         -6 mod -1 <>  0 or
         -7 mod -1 <>  0 or
         -8 mod -1 <>  0 or
         -9 mod -1 <>  0 or
        -10 mod -1 <>  0 or
         10 mod -2 <>  0 or
          9 mod -2 <> -1 or
          8 mod -2 <>  0 or
          7 mod -2 <> -1 or
          6 mod -2 <>  0 or
          5 mod -2 <> -1 or
          4 mod -2 <>  0 or
          3 mod -2 <> -1 or
          2 mod -2 <>  0 or
          1 mod -2 <> -1 or
          0 mod -2 <>  0 or
         -1 mod -2 <> -1 or
         -2 mod -2 <>  0 or
         -3 mod -2 <> -1 or
         -4 mod -2 <>  0 or
         -5 mod -2 <> -1 or
         -6 mod -2 <>  0 or
         -7 mod -2 <> -1 or
         -8 mod -2 <>  0 or
         -9 mod -2 <> -1 or
        -10 mod -2 <>  0 or
         10 mod -3 <> -2 or
          9 mod -3 <>  0 or
          8 mod -3 <> -1 or
          7 mod -3 <> -2 or
          6 mod -3 <>  0 or
          5 mod -3 <> -1 or
          4 mod -3 <> -2 or
          3 mod -3 <>  0 or
          2 mod -3 <> -1 or
          1 mod -3 <> -2 or
          0 mod -3 <>  0 or
         -1 mod -3 <> -1 or
         -2 mod -3 <> -2 or
         -3 mod -3 <>  0 or
         -4 mod -3 <> -1 or
         -5 mod -3 <> -2 or
         -6 mod -3 <>  0 or
         -7 mod -3 <> -1 or
         -8 mod -3 <> -2 or
         -9 mod -3 <>  0 or
        -10 mod -3 <> -1 or
         10 mod -4 <> -2 or
          9 mod -4 <> -3 or
          8 mod -4 <>  0 or
          7 mod -4 <> -1 or
          6 mod -4 <> -2 or
          5 mod -4 <> -3 or
          4 mod -4 <>  0 or
          3 mod -4 <> -1 or
          2 mod -4 <> -2 or
          1 mod -4 <> -3 or
          0 mod -4 <>  0 or
         -1 mod -4 <> -1 or
         -2 mod -4 <> -2 or
         -3 mod -4 <> -3 or
         -4 mod -4 <>  0 or
         -5 mod -4 <> -1 or
         -6 mod -4 <> -2 or
         -7 mod -4 <> -3 or
         -8 mod -4 <>  0 or
         -9 mod -4 <> -1 or
        -10 mod -4 <> -2 or
         10 mod -5 <> -0 or
          9 mod -5 <> -1 or
          8 mod -5 <> -2 or
          7 mod -5 <> -3 or
          6 mod -5 <> -4 or
          5 mod -5 <>  0 or
          4 mod -5 <> -1 or
          3 mod -5 <> -2 or
          2 mod -5 <> -3 or
          1 mod -5 <> -4 or
          0 mod -5 <>  0 or
         -1 mod -5 <> -1 or
         -2 mod -5 <> -2 or
         -3 mod -5 <> -3 or
         -4 mod -5 <> -4 or
         -5 mod -5 <>  0 or
         -6 mod -5 <> -1 or
         -7 mod -5 <> -2 or
         -8 mod -5 <> -3 or
         -9 mod -5 <> -4 or
        -10 mod -5 <>  0 then
      writeln(" ***** mod with two constants does not work correct.");
      okay := FALSE;
    end if;

    if  intExpr( 10) mod  5 <>  0 or
        intExpr(  9) mod  5 <>  4 or
        intExpr(  8) mod  5 <>  3 or
        intExpr(  7) mod  5 <>  2 or
        intExpr(  6) mod  5 <>  1 or
        intExpr(  5) mod  5 <>  0 or
        intExpr(  4) mod  5 <>  4 or
        intExpr(  3) mod  5 <>  3 or
        intExpr(  2) mod  5 <>  2 or
        intExpr(  1) mod  5 <>  1 or
        intExpr(  0) mod  5 <>  0 or
        intExpr( -1) mod  5 <>  4 or
        intExpr( -2) mod  5 <>  3 or
        intExpr( -3) mod  5 <>  2 or
        intExpr( -4) mod  5 <>  1 or
        intExpr( -5) mod  5 <>  0 or
        intExpr( -6) mod  5 <>  4 or
        intExpr( -7) mod  5 <>  3 or
        intExpr( -8) mod  5 <>  2 or
        intExpr( -9) mod  5 <>  1 or
        intExpr(-10) mod  5 <>  0 or
        intExpr( 10) mod  4 <>  2 or
        intExpr(  9) mod  4 <>  1 or
        intExpr(  8) mod  4 <>  0 or
        intExpr(  7) mod  4 <>  3 or
        intExpr(  6) mod  4 <>  2 or
        intExpr(  5) mod  4 <>  1 or
        intExpr(  4) mod  4 <>  0 or
        intExpr(  3) mod  4 <>  3 or
        intExpr(  2) mod  4 <>  2 or
        intExpr(  1) mod  4 <>  1 or
        intExpr(  0) mod  4 <>  0 or
        intExpr( -1) mod  4 <>  3 or
        intExpr( -2) mod  4 <>  2 or
        intExpr( -3) mod  4 <>  1 or
        intExpr( -4) mod  4 <>  0 or
        intExpr( -5) mod  4 <>  3 or
        intExpr( -6) mod  4 <>  2 or
        intExpr( -7) mod  4 <>  1 or
        intExpr( -8) mod  4 <>  0 or
        intExpr( -9) mod  4 <>  3 or
        intExpr(-10) mod  4 <>  2 or
        intExpr( 10) mod  3 <>  1 or
        intExpr(  9) mod  3 <>  0 or
        intExpr(  8) mod  3 <>  2 or
        intExpr(  7) mod  3 <>  1 or
        intExpr(  6) mod  3 <>  0 or
        intExpr(  5) mod  3 <>  2 or
        intExpr(  4) mod  3 <>  1 or
        intExpr(  3) mod  3 <>  0 or
        intExpr(  2) mod  3 <>  2 or
        intExpr(  1) mod  3 <>  1 or
        intExpr(  0) mod  3 <>  0 or
        intExpr( -1) mod  3 <>  2 or
        intExpr( -2) mod  3 <>  1 or
        intExpr( -3) mod  3 <>  0 or
        intExpr( -4) mod  3 <>  2 or
        intExpr( -5) mod  3 <>  1 or
        intExpr( -6) mod  3 <>  0 or
        intExpr( -7) mod  3 <>  2 or
        intExpr( -8) mod  3 <>  1 or
        intExpr( -9) mod  3 <>  0 or
        intExpr(-10) mod  3 <>  2 or
        intExpr( 10) mod  2 <>  0 or
        intExpr(  9) mod  2 <>  1 or
        intExpr(  8) mod  2 <>  0 or
        intExpr(  7) mod  2 <>  1 or
        intExpr(  6) mod  2 <>  0 or
        intExpr(  5) mod  2 <>  1 or
        intExpr(  4) mod  2 <>  0 or
        intExpr(  3) mod  2 <>  1 or
        intExpr(  2) mod  2 <>  0 or
        intExpr(  1) mod  2 <>  1 or
        intExpr(  0) mod  2 <>  0 or
        intExpr( -1) mod  2 <>  1 or
        intExpr( -2) mod  2 <>  0 or
        intExpr( -3) mod  2 <>  1 or
        intExpr( -4) mod  2 <>  0 or
        intExpr( -5) mod  2 <>  1 or
        intExpr( -6) mod  2 <>  0 or
        intExpr( -7) mod  2 <>  1 or
        intExpr( -8) mod  2 <>  0 or
        intExpr( -9) mod  2 <>  1 or
        intExpr(-10) mod  2 <>  0 or
        intExpr( 10) mod  1 <>  0 or
        intExpr(  9) mod  1 <>  0 or
        intExpr(  8) mod  1 <>  0 or
        intExpr(  7) mod  1 <>  0 or
        intExpr(  6) mod  1 <>  0 or
        intExpr(  5) mod  1 <>  0 or
        intExpr(  4) mod  1 <>  0 or
        intExpr(  3) mod  1 <>  0 or
        intExpr(  2) mod  1 <>  0 or
        intExpr(  1) mod  1 <>  0 or
        intExpr(  0) mod  1 <>  0 or
        intExpr( -1) mod  1 <>  0 or
        intExpr( -2) mod  1 <>  0 or
        intExpr( -3) mod  1 <>  0 or
        intExpr( -4) mod  1 <>  0 or
        intExpr( -5) mod  1 <>  0 or
        intExpr( -6) mod  1 <>  0 or
        intExpr( -7) mod  1 <>  0 or
        intExpr( -8) mod  1 <>  0 or
        intExpr( -9) mod  1 <>  0 or
        intExpr(-10) mod  1 <>  0 or
        intExpr( 10) mod -1 <>  0 or
        intExpr(  9) mod -1 <>  0 or
        intExpr(  8) mod -1 <>  0 or
        intExpr(  7) mod -1 <>  0 or
        intExpr(  6) mod -1 <>  0 or
        intExpr(  5) mod -1 <>  0 or
        intExpr(  4) mod -1 <>  0 or
        intExpr(  3) mod -1 <>  0 or
        intExpr(  2) mod -1 <>  0 or
        intExpr(  1) mod -1 <>  0 or
        intExpr(  0) mod -1 <>  0 or
        intExpr( -1) mod -1 <>  0 or
        intExpr( -2) mod -1 <>  0 or
        intExpr( -3) mod -1 <>  0 or
        intExpr( -4) mod -1 <>  0 or
        intExpr( -5) mod -1 <>  0 or
        intExpr( -6) mod -1 <>  0 or
        intExpr( -7) mod -1 <>  0 or
        intExpr( -8) mod -1 <>  0 or
        intExpr( -9) mod -1 <>  0 or
        intExpr(-10) mod -1 <>  0 or
        intExpr( 10) mod -2 <>  0 or
        intExpr(  9) mod -2 <> -1 or
        intExpr(  8) mod -2 <>  0 or
        intExpr(  7) mod -2 <> -1 or
        intExpr(  6) mod -2 <>  0 or
        intExpr(  5) mod -2 <> -1 or
        intExpr(  4) mod -2 <>  0 or
        intExpr(  3) mod -2 <> -1 or
        intExpr(  2) mod -2 <>  0 or
        intExpr(  1) mod -2 <> -1 or
        intExpr(  0) mod -2 <>  0 or
        intExpr( -1) mod -2 <> -1 or
        intExpr( -2) mod -2 <>  0 or
        intExpr( -3) mod -2 <> -1 or
        intExpr( -4) mod -2 <>  0 or
        intExpr( -5) mod -2 <> -1 or
        intExpr( -6) mod -2 <>  0 or
        intExpr( -7) mod -2 <> -1 or
        intExpr( -8) mod -2 <>  0 or
        intExpr( -9) mod -2 <> -1 or
        intExpr(-10) mod -2 <>  0 or
        intExpr( 10) mod -3 <> -2 or
        intExpr(  9) mod -3 <>  0 or
        intExpr(  8) mod -3 <> -1 or
        intExpr(  7) mod -3 <> -2 or
        intExpr(  6) mod -3 <>  0 or
        intExpr(  5) mod -3 <> -1 or
        intExpr(  4) mod -3 <> -2 or
        intExpr(  3) mod -3 <>  0 or
        intExpr(  2) mod -3 <> -1 or
        intExpr(  1) mod -3 <> -2 or
        intExpr(  0) mod -3 <>  0 or
        intExpr( -1) mod -3 <> -1 or
        intExpr( -2) mod -3 <> -2 or
        intExpr( -3) mod -3 <>  0 or
        intExpr( -4) mod -3 <> -1 or
        intExpr( -5) mod -3 <> -2 or
        intExpr( -6) mod -3 <>  0 or
        intExpr( -7) mod -3 <> -1 or
        intExpr( -8) mod -3 <> -2 or
        intExpr( -9) mod -3 <>  0 or
        intExpr(-10) mod -3 <> -1 or
        intExpr( 10) mod -4 <> -2 or
        intExpr(  9) mod -4 <> -3 or
        intExpr(  8) mod -4 <>  0 or
        intExpr(  7) mod -4 <> -1 or
        intExpr(  6) mod -4 <> -2 or
        intExpr(  5) mod -4 <> -3 or
        intExpr(  4) mod -4 <>  0 or
        intExpr(  3) mod -4 <> -1 or
        intExpr(  2) mod -4 <> -2 or
        intExpr(  1) mod -4 <> -3 or
        intExpr(  0) mod -4 <>  0 or
        intExpr( -1) mod -4 <> -1 or
        intExpr( -2) mod -4 <> -2 or
        intExpr( -3) mod -4 <> -3 or
        intExpr( -4) mod -4 <>  0 or
        intExpr( -5) mod -4 <> -1 or
        intExpr( -6) mod -4 <> -2 or
        intExpr( -7) mod -4 <> -3 or
        intExpr( -8) mod -4 <>  0 or
        intExpr( -9) mod -4 <> -1 or
        intExpr(-10) mod -4 <> -2 or
        intExpr( 10) mod -5 <> -0 or
        intExpr(  9) mod -5 <> -1 or
        intExpr(  8) mod -5 <> -2 or
        intExpr(  7) mod -5 <> -3 or
        intExpr(  6) mod -5 <> -4 or
        intExpr(  5) mod -5 <>  0 or
        intExpr(  4) mod -5 <> -1 or
        intExpr(  3) mod -5 <> -2 or
        intExpr(  2) mod -5 <> -3 or
        intExpr(  1) mod -5 <> -4 or
        intExpr(  0) mod -5 <>  0 or
        intExpr( -1) mod -5 <> -1 or
        intExpr( -2) mod -5 <> -2 or
        intExpr( -3) mod -5 <> -3 or
        intExpr( -4) mod -5 <> -4 or
        intExpr( -5) mod -5 <>  0 or
        intExpr( -6) mod -5 <> -1 or
        intExpr( -7) mod -5 <> -2 or
        intExpr( -8) mod -5 <> -3 or
        intExpr( -9) mod -5 <> -4 or
        intExpr(-10) mod -5 <>  0 then
      writeln(" ***** mod with an expression and a constant does not work correct.");
      okay := FALSE;
    end if;

    if   10 mod intExpr( 5) <>  0 or
          9 mod intExpr( 5) <>  4 or
          8 mod intExpr( 5) <>  3 or
          7 mod intExpr( 5) <>  2 or
          6 mod intExpr( 5) <>  1 or
          5 mod intExpr( 5) <>  0 or
          4 mod intExpr( 5) <>  4 or
          3 mod intExpr( 5) <>  3 or
          2 mod intExpr( 5) <>  2 or
          1 mod intExpr( 5) <>  1 or
          0 mod intExpr( 5) <>  0 or
         -1 mod intExpr( 5) <>  4 or
         -2 mod intExpr( 5) <>  3 or
         -3 mod intExpr( 5) <>  2 or
         -4 mod intExpr( 5) <>  1 or
         -5 mod intExpr( 5) <>  0 or
         -6 mod intExpr( 5) <>  4 or
         -7 mod intExpr( 5) <>  3 or
         -8 mod intExpr( 5) <>  2 or
         -9 mod intExpr( 5) <>  1 or
        -10 mod intExpr( 5) <>  0 or
         10 mod intExpr( 4) <>  2 or
          9 mod intExpr( 4) <>  1 or
          8 mod intExpr( 4) <>  0 or
          7 mod intExpr( 4) <>  3 or
          6 mod intExpr( 4) <>  2 or
          5 mod intExpr( 4) <>  1 or
          4 mod intExpr( 4) <>  0 or
          3 mod intExpr( 4) <>  3 or
          2 mod intExpr( 4) <>  2 or
          1 mod intExpr( 4) <>  1 or
          0 mod intExpr( 4) <>  0 or
         -1 mod intExpr( 4) <>  3 or
         -2 mod intExpr( 4) <>  2 or
         -3 mod intExpr( 4) <>  1 or
         -4 mod intExpr( 4) <>  0 or
         -5 mod intExpr( 4) <>  3 or
         -6 mod intExpr( 4) <>  2 or
         -7 mod intExpr( 4) <>  1 or
         -8 mod intExpr( 4) <>  0 or
         -9 mod intExpr( 4) <>  3 or
        -10 mod intExpr( 4) <>  2 or
         10 mod intExpr( 3) <>  1 or
          9 mod intExpr( 3) <>  0 or
          8 mod intExpr( 3) <>  2 or
          7 mod intExpr( 3) <>  1 or
          6 mod intExpr( 3) <>  0 or
          5 mod intExpr( 3) <>  2 or
          4 mod intExpr( 3) <>  1 or
          3 mod intExpr( 3) <>  0 or
          2 mod intExpr( 3) <>  2 or
          1 mod intExpr( 3) <>  1 or
          0 mod intExpr( 3) <>  0 or
         -1 mod intExpr( 3) <>  2 or
         -2 mod intExpr( 3) <>  1 or
         -3 mod intExpr( 3) <>  0 or
         -4 mod intExpr( 3) <>  2 or
         -5 mod intExpr( 3) <>  1 or
         -6 mod intExpr( 3) <>  0 or
         -7 mod intExpr( 3) <>  2 or
         -8 mod intExpr( 3) <>  1 or
         -9 mod intExpr( 3) <>  0 or
        -10 mod intExpr( 3) <>  2 or
         10 mod intExpr( 2) <>  0 or
          9 mod intExpr( 2) <>  1 or
          8 mod intExpr( 2) <>  0 or
          7 mod intExpr( 2) <>  1 or
          6 mod intExpr( 2) <>  0 or
          5 mod intExpr( 2) <>  1 or
          4 mod intExpr( 2) <>  0 or
          3 mod intExpr( 2) <>  1 or
          2 mod intExpr( 2) <>  0 or
          1 mod intExpr( 2) <>  1 or
          0 mod intExpr( 2) <>  0 or
         -1 mod intExpr( 2) <>  1 or
         -2 mod intExpr( 2) <>  0 or
         -3 mod intExpr( 2) <>  1 or
         -4 mod intExpr( 2) <>  0 or
         -5 mod intExpr( 2) <>  1 or
         -6 mod intExpr( 2) <>  0 or
         -7 mod intExpr( 2) <>  1 or
         -8 mod intExpr( 2) <>  0 or
         -9 mod intExpr( 2) <>  1 or
        -10 mod intExpr( 2) <>  0 or
         10 mod intExpr( 1) <>  0 or
          9 mod intExpr( 1) <>  0 or
          8 mod intExpr( 1) <>  0 or
          7 mod intExpr( 1) <>  0 or
          6 mod intExpr( 1) <>  0 or
          5 mod intExpr( 1) <>  0 or
          4 mod intExpr( 1) <>  0 or
          3 mod intExpr( 1) <>  0 or
          2 mod intExpr( 1) <>  0 or
          1 mod intExpr( 1) <>  0 or
          0 mod intExpr( 1) <>  0 or
         -1 mod intExpr( 1) <>  0 or
         -2 mod intExpr( 1) <>  0 or
         -3 mod intExpr( 1) <>  0 or
         -4 mod intExpr( 1) <>  0 or
         -5 mod intExpr( 1) <>  0 or
         -6 mod intExpr( 1) <>  0 or
         -7 mod intExpr( 1) <>  0 or
         -8 mod intExpr( 1) <>  0 or
         -9 mod intExpr( 1) <>  0 or
        -10 mod intExpr( 1) <>  0 or
         10 mod intExpr(-1) <>  0 or
          9 mod intExpr(-1) <>  0 or
          8 mod intExpr(-1) <>  0 or
          7 mod intExpr(-1) <>  0 or
          6 mod intExpr(-1) <>  0 or
          5 mod intExpr(-1) <>  0 or
          4 mod intExpr(-1) <>  0 or
          3 mod intExpr(-1) <>  0 or
          2 mod intExpr(-1) <>  0 or
          1 mod intExpr(-1) <>  0 or
          0 mod intExpr(-1) <>  0 or
         -1 mod intExpr(-1) <>  0 or
         -2 mod intExpr(-1) <>  0 or
         -3 mod intExpr(-1) <>  0 or
         -4 mod intExpr(-1) <>  0 or
         -5 mod intExpr(-1) <>  0 or
         -6 mod intExpr(-1) <>  0 or
         -7 mod intExpr(-1) <>  0 or
         -8 mod intExpr(-1) <>  0 or
         -9 mod intExpr(-1) <>  0 or
        -10 mod intExpr(-1) <>  0 or
         10 mod intExpr(-2) <>  0 or
          9 mod intExpr(-2) <> -1 or
          8 mod intExpr(-2) <>  0 or
          7 mod intExpr(-2) <> -1 or
          6 mod intExpr(-2) <>  0 or
          5 mod intExpr(-2) <> -1 or
          4 mod intExpr(-2) <>  0 or
          3 mod intExpr(-2) <> -1 or
          2 mod intExpr(-2) <>  0 or
          1 mod intExpr(-2) <> -1 or
          0 mod intExpr(-2) <>  0 or
         -1 mod intExpr(-2) <> -1 or
         -2 mod intExpr(-2) <>  0 or
         -3 mod intExpr(-2) <> -1 or
         -4 mod intExpr(-2) <>  0 or
         -5 mod intExpr(-2) <> -1 or
         -6 mod intExpr(-2) <>  0 or
         -7 mod intExpr(-2) <> -1 or
         -8 mod intExpr(-2) <>  0 or
         -9 mod intExpr(-2) <> -1 or
        -10 mod intExpr(-2) <>  0 or
         10 mod intExpr(-3) <> -2 or
          9 mod intExpr(-3) <>  0 or
          8 mod intExpr(-3) <> -1 or
          7 mod intExpr(-3) <> -2 or
          6 mod intExpr(-3) <>  0 or
          5 mod intExpr(-3) <> -1 or
          4 mod intExpr(-3) <> -2 or
          3 mod intExpr(-3) <>  0 or
          2 mod intExpr(-3) <> -1 or
          1 mod intExpr(-3) <> -2 or
          0 mod intExpr(-3) <>  0 or
         -1 mod intExpr(-3) <> -1 or
         -2 mod intExpr(-3) <> -2 or
         -3 mod intExpr(-3) <>  0 or
         -4 mod intExpr(-3) <> -1 or
         -5 mod intExpr(-3) <> -2 or
         -6 mod intExpr(-3) <>  0 or
         -7 mod intExpr(-3) <> -1 or
         -8 mod intExpr(-3) <> -2 or
         -9 mod intExpr(-3) <>  0 or
        -10 mod intExpr(-3) <> -1 or
         10 mod intExpr(-4) <> -2 or
          9 mod intExpr(-4) <> -3 or
          8 mod intExpr(-4) <>  0 or
          7 mod intExpr(-4) <> -1 or
          6 mod intExpr(-4) <> -2 or
          5 mod intExpr(-4) <> -3 or
          4 mod intExpr(-4) <>  0 or
          3 mod intExpr(-4) <> -1 or
          2 mod intExpr(-4) <> -2 or
          1 mod intExpr(-4) <> -3 or
          0 mod intExpr(-4) <>  0 or
         -1 mod intExpr(-4) <> -1 or
         -2 mod intExpr(-4) <> -2 or
         -3 mod intExpr(-4) <> -3 or
         -4 mod intExpr(-4) <>  0 or
         -5 mod intExpr(-4) <> -1 or
         -6 mod intExpr(-4) <> -2 or
         -7 mod intExpr(-4) <> -3 or
         -8 mod intExpr(-4) <>  0 or
         -9 mod intExpr(-4) <> -1 or
        -10 mod intExpr(-4) <> -2 or
         10 mod intExpr(-5) <> -0 or
          9 mod intExpr(-5) <> -1 or
          8 mod intExpr(-5) <> -2 or
          7 mod intExpr(-5) <> -3 or
          6 mod intExpr(-5) <> -4 or
          5 mod intExpr(-5) <>  0 or
          4 mod intExpr(-5) <> -1 or
          3 mod intExpr(-5) <> -2 or
          2 mod intExpr(-5) <> -3 or
          1 mod intExpr(-5) <> -4 or
          0 mod intExpr(-5) <>  0 or
         -1 mod intExpr(-5) <> -1 or
         -2 mod intExpr(-5) <> -2 or
         -3 mod intExpr(-5) <> -3 or
         -4 mod intExpr(-5) <> -4 or
         -5 mod intExpr(-5) <>  0 or
         -6 mod intExpr(-5) <> -1 or
         -7 mod intExpr(-5) <> -2 or
         -8 mod intExpr(-5) <> -3 or
         -9 mod intExpr(-5) <> -4 or
        -10 mod intExpr(-5) <>  0 then
      writeln(" ***** mod with a constant and an expression does not work correct.");
      okay := FALSE;
    end if;

    if  intExpr( 10) mod intExpr( 5) <>  0 or
        intExpr(  9) mod intExpr( 5) <>  4 or
        intExpr(  8) mod intExpr( 5) <>  3 or
        intExpr(  7) mod intExpr( 5) <>  2 or
        intExpr(  6) mod intExpr( 5) <>  1 or
        intExpr(  5) mod intExpr( 5) <>  0 or
        intExpr(  4) mod intExpr( 5) <>  4 or
        intExpr(  3) mod intExpr( 5) <>  3 or
        intExpr(  2) mod intExpr( 5) <>  2 or
        intExpr(  1) mod intExpr( 5) <>  1 or
        intExpr(  0) mod intExpr( 5) <>  0 or
        intExpr( -1) mod intExpr( 5) <>  4 or
        intExpr( -2) mod intExpr( 5) <>  3 or
        intExpr( -3) mod intExpr( 5) <>  2 or
        intExpr( -4) mod intExpr( 5) <>  1 or
        intExpr( -5) mod intExpr( 5) <>  0 or
        intExpr( -6) mod intExpr( 5) <>  4 or
        intExpr( -7) mod intExpr( 5) <>  3 or
        intExpr( -8) mod intExpr( 5) <>  2 or
        intExpr( -9) mod intExpr( 5) <>  1 or
        intExpr(-10) mod intExpr( 5) <>  0 or
        intExpr( 10) mod intExpr( 4) <>  2 or
        intExpr(  9) mod intExpr( 4) <>  1 or
        intExpr(  8) mod intExpr( 4) <>  0 or
        intExpr(  7) mod intExpr( 4) <>  3 or
        intExpr(  6) mod intExpr( 4) <>  2 or
        intExpr(  5) mod intExpr( 4) <>  1 or
        intExpr(  4) mod intExpr( 4) <>  0 or
        intExpr(  3) mod intExpr( 4) <>  3 or
        intExpr(  2) mod intExpr( 4) <>  2 or
        intExpr(  1) mod intExpr( 4) <>  1 or
        intExpr(  0) mod intExpr( 4) <>  0 or
        intExpr( -1) mod intExpr( 4) <>  3 or
        intExpr( -2) mod intExpr( 4) <>  2 or
        intExpr( -3) mod intExpr( 4) <>  1 or
        intExpr( -4) mod intExpr( 4) <>  0 or
        intExpr( -5) mod intExpr( 4) <>  3 or
        intExpr( -6) mod intExpr( 4) <>  2 or
        intExpr( -7) mod intExpr( 4) <>  1 or
        intExpr( -8) mod intExpr( 4) <>  0 or
        intExpr( -9) mod intExpr( 4) <>  3 or
        intExpr(-10) mod intExpr( 4) <>  2 or
        intExpr( 10) mod intExpr( 3) <>  1 or
        intExpr(  9) mod intExpr( 3) <>  0 or
        intExpr(  8) mod intExpr( 3) <>  2 or
        intExpr(  7) mod intExpr( 3) <>  1 or
        intExpr(  6) mod intExpr( 3) <>  0 or
        intExpr(  5) mod intExpr( 3) <>  2 or
        intExpr(  4) mod intExpr( 3) <>  1 or
        intExpr(  3) mod intExpr( 3) <>  0 or
        intExpr(  2) mod intExpr( 3) <>  2 or
        intExpr(  1) mod intExpr( 3) <>  1 or
        intExpr(  0) mod intExpr( 3) <>  0 or
        intExpr( -1) mod intExpr( 3) <>  2 or
        intExpr( -2) mod intExpr( 3) <>  1 or
        intExpr( -3) mod intExpr( 3) <>  0 or
        intExpr( -4) mod intExpr( 3) <>  2 or
        intExpr( -5) mod intExpr( 3) <>  1 or
        intExpr( -6) mod intExpr( 3) <>  0 or
        intExpr( -7) mod intExpr( 3) <>  2 or
        intExpr( -8) mod intExpr( 3) <>  1 or
        intExpr( -9) mod intExpr( 3) <>  0 or
        intExpr(-10) mod intExpr( 3) <>  2 or
        intExpr( 10) mod intExpr( 2) <>  0 or
        intExpr(  9) mod intExpr( 2) <>  1 or
        intExpr(  8) mod intExpr( 2) <>  0 or
        intExpr(  7) mod intExpr( 2) <>  1 or
        intExpr(  6) mod intExpr( 2) <>  0 or
        intExpr(  5) mod intExpr( 2) <>  1 or
        intExpr(  4) mod intExpr( 2) <>  0 or
        intExpr(  3) mod intExpr( 2) <>  1 or
        intExpr(  2) mod intExpr( 2) <>  0 or
        intExpr(  1) mod intExpr( 2) <>  1 or
        intExpr(  0) mod intExpr( 2) <>  0 or
        intExpr( -1) mod intExpr( 2) <>  1 or
        intExpr( -2) mod intExpr( 2) <>  0 or
        intExpr( -3) mod intExpr( 2) <>  1 or
        intExpr( -4) mod intExpr( 2) <>  0 or
        intExpr( -5) mod intExpr( 2) <>  1 or
        intExpr( -6) mod intExpr( 2) <>  0 or
        intExpr( -7) mod intExpr( 2) <>  1 or
        intExpr( -8) mod intExpr( 2) <>  0 or
        intExpr( -9) mod intExpr( 2) <>  1 or
        intExpr(-10) mod intExpr( 2) <>  0 or
        intExpr( 10) mod intExpr( 1) <>  0 or
        intExpr(  9) mod intExpr( 1) <>  0 or
        intExpr(  8) mod intExpr( 1) <>  0 or
        intExpr(  7) mod intExpr( 1) <>  0 or
        intExpr(  6) mod intExpr( 1) <>  0 or
        intExpr(  5) mod intExpr( 1) <>  0 or
        intExpr(  4) mod intExpr( 1) <>  0 or
        intExpr(  3) mod intExpr( 1) <>  0 or
        intExpr(  2) mod intExpr( 1) <>  0 or
        intExpr(  1) mod intExpr( 1) <>  0 or
        intExpr(  0) mod intExpr( 1) <>  0 or
        intExpr( -1) mod intExpr( 1) <>  0 or
        intExpr( -2) mod intExpr( 1) <>  0 or
        intExpr( -3) mod intExpr( 1) <>  0 or
        intExpr( -4) mod intExpr( 1) <>  0 or
        intExpr( -5) mod intExpr( 1) <>  0 or
        intExpr( -6) mod intExpr( 1) <>  0 or
        intExpr( -7) mod intExpr( 1) <>  0 or
        intExpr( -8) mod intExpr( 1) <>  0 or
        intExpr( -9) mod intExpr( 1) <>  0 or
        intExpr(-10) mod intExpr( 1) <>  0 or
        intExpr( 10) mod intExpr(-1) <>  0 or
        intExpr(  9) mod intExpr(-1) <>  0 or
        intExpr(  8) mod intExpr(-1) <>  0 or
        intExpr(  7) mod intExpr(-1) <>  0 or
        intExpr(  6) mod intExpr(-1) <>  0 or
        intExpr(  5) mod intExpr(-1) <>  0 or
        intExpr(  4) mod intExpr(-1) <>  0 or
        intExpr(  3) mod intExpr(-1) <>  0 or
        intExpr(  2) mod intExpr(-1) <>  0 or
        intExpr(  1) mod intExpr(-1) <>  0 or
        intExpr(  0) mod intExpr(-1) <>  0 or
        intExpr( -1) mod intExpr(-1) <>  0 or
        intExpr( -2) mod intExpr(-1) <>  0 or
        intExpr( -3) mod intExpr(-1) <>  0 or
        intExpr( -4) mod intExpr(-1) <>  0 or
        intExpr( -5) mod intExpr(-1) <>  0 or
        intExpr( -6) mod intExpr(-1) <>  0 or
        intExpr( -7) mod intExpr(-1) <>  0 or
        intExpr( -8) mod intExpr(-1) <>  0 or
        intExpr( -9) mod intExpr(-1) <>  0 or
        intExpr(-10) mod intExpr(-1) <>  0 or
        intExpr( 10) mod intExpr(-2) <>  0 or
        intExpr(  9) mod intExpr(-2) <> -1 or
        intExpr(  8) mod intExpr(-2) <>  0 or
        intExpr(  7) mod intExpr(-2) <> -1 or
        intExpr(  6) mod intExpr(-2) <>  0 or
        intExpr(  5) mod intExpr(-2) <> -1 or
        intExpr(  4) mod intExpr(-2) <>  0 or
        intExpr(  3) mod intExpr(-2) <> -1 or
        intExpr(  2) mod intExpr(-2) <>  0 or
        intExpr(  1) mod intExpr(-2) <> -1 or
        intExpr(  0) mod intExpr(-2) <>  0 or
        intExpr( -1) mod intExpr(-2) <> -1 or
        intExpr( -2) mod intExpr(-2) <>  0 or
        intExpr( -3) mod intExpr(-2) <> -1 or
        intExpr( -4) mod intExpr(-2) <>  0 or
        intExpr( -5) mod intExpr(-2) <> -1 or
        intExpr( -6) mod intExpr(-2) <>  0 or
        intExpr( -7) mod intExpr(-2) <> -1 or
        intExpr( -8) mod intExpr(-2) <>  0 or
        intExpr( -9) mod intExpr(-2) <> -1 or
        intExpr(-10) mod intExpr(-2) <>  0 or
        intExpr( 10) mod intExpr(-3) <> -2 or
        intExpr(  9) mod intExpr(-3) <>  0 or
        intExpr(  8) mod intExpr(-3) <> -1 or
        intExpr(  7) mod intExpr(-3) <> -2 or
        intExpr(  6) mod intExpr(-3) <>  0 or
        intExpr(  5) mod intExpr(-3) <> -1 or
        intExpr(  4) mod intExpr(-3) <> -2 or
        intExpr(  3) mod intExpr(-3) <>  0 or
        intExpr(  2) mod intExpr(-3) <> -1 or
        intExpr(  1) mod intExpr(-3) <> -2 or
        intExpr(  0) mod intExpr(-3) <>  0 or
        intExpr( -1) mod intExpr(-3) <> -1 or
        intExpr( -2) mod intExpr(-3) <> -2 or
        intExpr( -3) mod intExpr(-3) <>  0 or
        intExpr( -4) mod intExpr(-3) <> -1 or
        intExpr( -5) mod intExpr(-3) <> -2 or
        intExpr( -6) mod intExpr(-3) <>  0 or
        intExpr( -7) mod intExpr(-3) <> -1 or
        intExpr( -8) mod intExpr(-3) <> -2 or
        intExpr( -9) mod intExpr(-3) <>  0 or
        intExpr(-10) mod intExpr(-3) <> -1 or
        intExpr( 10) mod intExpr(-4) <> -2 or
        intExpr(  9) mod intExpr(-4) <> -3 or
        intExpr(  8) mod intExpr(-4) <>  0 or
        intExpr(  7) mod intExpr(-4) <> -1 or
        intExpr(  6) mod intExpr(-4) <> -2 or
        intExpr(  5) mod intExpr(-4) <> -3 or
        intExpr(  4) mod intExpr(-4) <>  0 or
        intExpr(  3) mod intExpr(-4) <> -1 or
        intExpr(  2) mod intExpr(-4) <> -2 or
        intExpr(  1) mod intExpr(-4) <> -3 or
        intExpr(  0) mod intExpr(-4) <>  0 or
        intExpr( -1) mod intExpr(-4) <> -1 or
        intExpr( -2) mod intExpr(-4) <> -2 or
        intExpr( -3) mod intExpr(-4) <> -3 or
        intExpr( -4) mod intExpr(-4) <>  0 or
        intExpr( -5) mod intExpr(-4) <> -1 or
        intExpr( -6) mod intExpr(-4) <> -2 or
        intExpr( -7) mod intExpr(-4) <> -3 or
        intExpr( -8) mod intExpr(-4) <>  0 or
        intExpr( -9) mod intExpr(-4) <> -1 or
        intExpr(-10) mod intExpr(-4) <> -2 or
        intExpr( 10) mod intExpr(-5) <> -0 or
        intExpr(  9) mod intExpr(-5) <> -1 or
        intExpr(  8) mod intExpr(-5) <> -2 or
        intExpr(  7) mod intExpr(-5) <> -3 or
        intExpr(  6) mod intExpr(-5) <> -4 or
        intExpr(  5) mod intExpr(-5) <>  0 or
        intExpr(  4) mod intExpr(-5) <> -1 or
        intExpr(  3) mod intExpr(-5) <> -2 or
        intExpr(  2) mod intExpr(-5) <> -3 or
        intExpr(  1) mod intExpr(-5) <> -4 or
        intExpr(  0) mod intExpr(-5) <>  0 or
        intExpr( -1) mod intExpr(-5) <> -1 or
        intExpr( -2) mod intExpr(-5) <> -2 or
        intExpr( -3) mod intExpr(-5) <> -3 or
        intExpr( -4) mod intExpr(-5) <> -4 or
        intExpr( -5) mod intExpr(-5) <>  0 or
        intExpr( -6) mod intExpr(-5) <> -1 or
        intExpr( -7) mod intExpr(-5) <> -2 or
        intExpr( -8) mod intExpr(-5) <> -3 or
        intExpr( -9) mod intExpr(-5) <> -4 or
        intExpr(-10) mod intExpr(-5) <>  0 then
      writeln(" ***** mod with two expressions does not work correct.");
      okay := FALSE;
    end if;

    if not check_mod_min_max then
      okay := FALSE;
    end if;

    if not check_mod_by_power_of_two_optimization then
      okay := FALSE;
    end if;

    if not check_mod_by_computed_power_of_two_optimization then
      okay := FALSE;
    end if;

    if not check_mod_by_zero then
      okay := FALSE;
    end if;

    if okay then
      writeln("Mod works correct for selected values.");
    else
      writeln(" ***** mod does not work correct.");
    end if;
  end func;


const proc: check_odd is func
  local
    var boolean: okay is TRUE;
    var boolean: is_odd is FALSE;
    var integer: number is 0;
  begin
    for number range -20 to 20 do
      if is_odd <> odd(number) then
        okay := FALSE;
      end if;
      is_odd := not is_odd;
    end for;
    if okay then
      writeln("odd(i) works correct in the range -20 to 20.");
    else
      writeln(" ***** odd(i) does not work correct.");
    end if;
  end func;


const proc: check_fact is func
  local
    var boolean: okay is TRUE;
    var integer: number is 0;
    var integer: fact is 0;
  begin
    if !0 <> 1 then
      okay := FALSE;
    else
      fact := 1;
      for number range 1 to 12 do
        fact *:= number;
        if !number <> fact then
          write(" ***** !");
          write(number);
          writeln(" is not correct computed.");
          okay := FALSE;
        end if;
      end for;
    end if;

    if  not raisesNumericError(!        (         -1)) or
        not raisesNumericError(!        (-2147483647)) or
        not raisesNumericError(!        (-2147483648)) or
        not raisesNumericError(!        (-4294967295)) or
        not raisesNumericError(!        (-4294967296)) or
        not raisesNumericError(!        (  INT64_MIN)) or
        not raisesNumericError(! intExpr(         -1)) or
        not raisesNumericError(! intExpr(-2147483647)) or
        not raisesNumericError(! intExpr(-2147483648)) or
        not raisesNumericError(! intExpr(-4294967295)) or
        not raisesNumericError(! intExpr(-4294967296)) or
        not raisesNumericError(! intExpr(  INT64_MIN)) then
      writeln(" ***** Factorial of negative number does not raise NUMERIC_ERROR.");
      okay := FALSE;
    end if;

    if okay then
      writeln("!i works correct for i in the range 0 to 12.");
    end if;
  end func;


const proc: check_binom is func
  local
    var boolean: okay is TRUE;
    var integer: n is 0;
    var integer: k is 0;
    var integer: j is 0;
    var integer: binom_result is 0;
    var boolean: overflow is FALSE;
  begin
    for n range 0 to 20 do
      for k range 0 to n do
        if n ! k <> !n div (!(n - k) * !k) then
          write(" ***** ");
          write(n);
          write(" ! ");
          write(k);
          writeln(" is not correct computed.");
          okay := FALSE;
        end if;
      end for;
    end for;
    for n range 1 to 66 do
      for k range -100 to -1 do
        if n ! k <> 0 then
          write(" ***** ");
          write(n);
          write(" ! ");
          write(k);
          writeln(" is not correct computed.");
          okay := FALSE;
        end if;
      end for;
      for k range 0 to n do
        if n ! k <> pred(n) ! pred(k) + pred(n) ! k then
          write(" ***** ");
          write(n);
          write(" ! ");
          write(k);
          writeln(" is not correct computed.");
          write(pred(n) ! pred(k));
          write(" ");
          write(pred(n) ! k);
          write(" ");
          write(pred(n) ! pred(k) + pred(n) ! k);
          write(" ");
          writeln(n ! k);
          okay := FALSE;
        end if;
      end for;
      for k range succ(n) to 100 do
        if n ! k <> 0 then
          write(" ***** ");
          write(n);
          write(" ! ");
          write(k);
          writeln(" is not correct computed.");
          okay := FALSE;
        end if;
      end for;
    end for;
    for n range -1 downto -62 do
      for k range 0 to 62 + n do
        binom_result := 1;
        overflow := FALSE;
        for j range 1 to k do
          if abs(n + 1 - j) > integer.last div abs(binom_result) then
            # writeln(" *** overflow: " <& n <& "!" <& k);
            overflow := TRUE;
            j := k;
          else
            binom_result *:= (n + 1 - j);
            binom_result := binom_result div j;
          end if;
        end for;
        if not overflow and n ! k <> binom_result then
          write(" ***** ");
          write(n);
          write(" ! ");
          write(k);
          writeln(" is not correct computed.");
          write(binom_result);
          write(" ");
          writeln(n ! k);
          okay := FALSE;
        end if;
      end for;
    end for;

    if         (-1) !         INT64_MIN  <>  0 or
               (-1) !            (-1234) <>  0 or
               (-1) !               (-2) <>  0 or
               (-1) !               (-1) <>  0 or
               (-1) !                 0  <>  1 or
               (-1) !                 1  <> -1 or
               (-1) !                 2  <>  1 or
               (-1) !            123456  <>  1 or
               (-1) !            654321  <> -1 or
               (-1) !         INT64_MAX  <> -1 or
                 0  !         INT64_MIN  <>  0 or
                 0  !            (-1234) <>  0 or
                 0  !               (-2) <>  0 or
                 0  !               (-1) <>  0 or
                 0  !                 0  <>  1 or
                 0  !                 1  <>  0 or
                 0  !                 2  <>  0 or
                 0  !            123456  <>  0 or
                 0  !            654321  <>  0 or
                 0  !         INT64_MAX  <>  0 or
                 1  !         INT64_MIN  <>  0 or
                 1  !            (-1234) <>  0 or
                 1  !               (-2) <>  0 or
                 1  !               (-1) <>  0 or
                 1  !                 0  <>  1 or
                 1  !                 1  <>  1 or
                 1  !                 2  <>  0 or
                 1  !            123456  <>  0 or
                 1  !            654321  <>  0 or
                 1  !         INT64_MAX  <>  0 or
        intExpr(-1) !         INT64_MIN  <>  0 or
        intExpr(-1) !            (-1234) <>  0 or
        intExpr(-1) !               (-2) <>  0 or
        intExpr(-1) !               (-1) <>  0 or
        intExpr(-1) !                 0  <>  1 or
        intExpr(-1) !                 1  <> -1 or
        intExpr(-1) !                 2  <>  1 or
        intExpr(-1) !            123456  <>  1 or
        intExpr(-1) !            654321  <> -1 or
        intExpr(-1) !         INT64_MAX  <> -1 or
        intExpr( 0) !         INT64_MIN  <>  0 or
        intExpr( 0) !            (-1234) <>  0 or
        intExpr( 0) !               (-2) <>  0 or
        intExpr( 0) !               (-1) <>  0 or
        intExpr( 0) !                 0  <>  1 or
        intExpr( 0) !                 1  <>  0 or
        intExpr( 0) !                 2  <>  0 or
        intExpr( 0) !            123456  <>  0 or
        intExpr( 0) !            654321  <>  0 or
        intExpr( 0) !         INT64_MAX  <>  0 or
        intExpr( 1) !         INT64_MIN  <>  0 or
        intExpr( 1) !            (-1234) <>  0 or
        intExpr( 1) !               (-2) <>  0 or
        intExpr( 1) !               (-1) <>  0 or
        intExpr( 1) !                 0  <>  1 or
        intExpr( 1) !                 1  <>  1 or
        intExpr( 1) !                 2  <>  0 or
        intExpr( 1) !            123456  <>  0 or
        intExpr( 1) !            654321  <>  0 or
        intExpr( 1) !         INT64_MAX  <>  0 or
               (-1) ! intExpr(INT64_MIN) <>  0 or
               (-1) ! intExpr(    -1234) <>  0 or
               (-1) ! intExpr(       -2) <>  0 or
               (-1) ! intExpr(       -1) <>  0 or
               (-1) ! intExpr(        0) <>  1 or
               (-1) ! intExpr(        1) <> -1 or
               (-1) ! intExpr(        2) <>  1 or
               (-1) ! intExpr(   123456) <>  1 or
               (-1) ! intExpr(   654321) <> -1 or
               (-1) ! intExpr(INT64_MAX) <> -1 or
                 0  ! intExpr(INT64_MIN) <>  0 or
                 0  ! intExpr(    -1234) <>  0 or
                 0  ! intExpr(       -2) <>  0 or
                 0  ! intExpr(       -1) <>  0 or
                 0  ! intExpr(        0) <>  1 or
                 0  ! intExpr(        1) <>  0 or
                 0  ! intExpr(        2) <>  0 or
                 0  ! intExpr(   123456) <>  0 or
                 0  ! intExpr(   654321) <>  0 or
                 0  ! intExpr(INT64_MAX) <>  0 or
                 1  ! intExpr(INT64_MIN) <>  0 or
                 1  ! intExpr(    -1234) <>  0 or
                 1  ! intExpr(       -2) <>  0 or
                 1  ! intExpr(       -1) <>  0 or
                 1  ! intExpr(        0) <>  1 or
                 1  ! intExpr(        1) <>  1 or
                 1  ! intExpr(        2) <>  0 or
                 1  ! intExpr(   123456) <>  0 or
                 1  ! intExpr(   654321) <>  0 or
                 1  ! intExpr(INT64_MAX) <>  0 or
        intExpr(-1) ! intExpr(INT64_MIN) <>  0 or
        intExpr(-1) ! intExpr(    -1234) <>  0 or
        intExpr(-1) ! intExpr(       -2) <>  0 or
        intExpr(-1) ! intExpr(       -1) <>  0 or
        intExpr(-1) ! intExpr(        0) <>  1 or
        intExpr(-1) ! intExpr(        1) <> -1 or
        intExpr(-1) ! intExpr(        2) <>  1 or
        intExpr(-1) ! intExpr(   123456) <>  1 or
        intExpr(-1) ! intExpr(   654321) <> -1 or
        intExpr(-1) ! intExpr(INT64_MAX) <> -1 or
        intExpr( 0) ! intExpr(INT64_MIN) <>  0 or
        intExpr( 0) ! intExpr(    -1234) <>  0 or
        intExpr( 0) ! intExpr(       -2) <>  0 or
        intExpr( 0) ! intExpr(       -1) <>  0 or
        intExpr( 0) ! intExpr(        0) <>  1 or
        intExpr( 0) ! intExpr(        1) <>  0 or
        intExpr( 0) ! intExpr(        2) <>  0 or
        intExpr( 0) ! intExpr(   123456) <>  0 or
        intExpr( 0) ! intExpr(   654321) <>  0 or
        intExpr( 0) ! intExpr(INT64_MAX) <>  0 or
        intExpr( 1) ! intExpr(INT64_MIN) <>  0 or
        intExpr( 1) ! intExpr(    -1234) <>  0 or
        intExpr( 1) ! intExpr(       -2) <>  0 or
        intExpr( 1) ! intExpr(       -1) <>  0 or
        intExpr( 1) ! intExpr(        0) <>  1 or
        intExpr( 1) ! intExpr(        1) <>  1 or
        intExpr( 1) ! intExpr(        2) <>  0 or
        intExpr( 1) ! intExpr(   123456) <>  0 or
        intExpr( 1) ! intExpr(   654321) <>  0 or
        intExpr( 1) ! intExpr(INT64_MAX) <>  0 then
      writeln(" ***** Computing binomial coefficient with small constants does not work correct.");
      okay := FALSE;
    end if;

    if          30  !         INT64_MIN  <>                   0 or
                30  !            (-1234) <>                   0 or
                30  !               (-2) <>                   0 or
                30  !               (-1) <>                   0 or
                30  !                 0  <>                   1 or
                30  !                 1  <>                  30 or
                30  !                 2  <>                 435 or
                30  !                 5  <>              142506 or
                30  !                10  <>            30045015 or
                30  !                15  <>           155117520 or
                30  !                20  <>            30045015 or
                30  !                25  <>              142506 or
                30  !                28  <>                 435 or
                30  !                29  <>                  30 or
                30  !                30  <>                   1 or
                30  !                31  <>                   0 or
                30  !            123456  <>                   0 or
                30  !            654321  <>                   0 or
                30  !         INT64_MAX  <>                   0 or
                31  !         INT64_MIN  <>                   0 or
                31  !            (-1234) <>                   0 or
                31  !               (-2) <>                   0 or
                31  !               (-1) <>                   0 or
                31  !                 0  <>                   1 or
                31  !                 1  <>                  31 or
                31  !                 2  <>                 465 or
                31  !                 5  <>              169911 or
                31  !                10  <>            44352165 or
                31  !                15  <>           300540195 or
                31  !                16  <>           300540195 or
                31  !                20  <>            84672315 or
                31  !                25  <>              736281 or
                31  !                29  <>                 465 or
                31  !                30  <>                  31 or
                31  !                31  <>                   1 or
                31  !                32  <>                   0 or
                31  !            123456  <>                   0 or
                31  !            654321  <>                   0 or
                31  !         INT64_MAX  <>                   0 or
                45  !         INT64_MIN  <>                   0 or
                45  !            (-1234) <>                   0 or
                45  !               (-2) <>                   0 or
                45  !               (-1) <>                   0 or
                45  !                 0  <>                   1 or
                45  !                 1  <>                  45 or
                45  !                 2  <>                 990 or
                45  !                 5  <>             1221759 or
                45  !                10  <>          3190187286 or
                45  !                15  <>        344867425584 or
                45  !                20  <>       3169870830126 or
                45  !                22  <>       4116715363800 or
                45  !                23  <>       4116715363800 or
                45  !                25  <>       3169870830126 or
                45  !                30  <>        344867425584 or
                45  !                35  <>          3190187286 or
                45  !                40  <>             1221759 or
                45  !                43  <>                 990 or
                45  !                44  <>                  45 or
                45  !                45  <>                   1 or
                45  !                46  <>                   0 or
                45  !            123456  <>                   0 or
                45  !            654321  <>                   0 or
                45  !         INT64_MAX  <>                   0 or
                62  !         INT64_MIN  <>                   0 or
                62  !            (-1234) <>                   0 or
                62  !               (-2) <>                   0 or
                62  !               (-1) <>                   0 or
                62  !                 0  <>                   1 or
                62  !                 1  <>                  62 or
                62  !                 2  <>                1891 or
                62  !                 5  <>             6471002 or
                62  !                10  <>        107518933731 or
                62  !                15  <>      93052749919920 or
                62  !                20  <>    9206478467454345 or
                62  !                25  <>  147405545359541742 or
                62  !                30  <>  450883717216034179 or
                62  !                31  <>  465428353255261088 or
                62  !                32  <>  450883717216034179 or
                62  !                35  <>  279692573246309972 or
                62  !                40  <>   34315056105966195 or
                62  !                45  <>     739632519584070 or
                62  !                50  <>       2160153123141 or
                62  !                55  <>           491796152 or
                62  !                60  <>                1891 or
                62  !                61  <>                  62 or
                62  !                62  <>                   1 or
                62  !                63  <>                   0 or
                62  !            123456  <>                   0 or
                62  !            654321  <>                   0 or
                62  !         INT64_MAX  <>                   0 or
                63  !         INT64_MIN  <>                   0 or
                63  !            (-1234) <>                   0 or
                63  !               (-2) <>                   0 or
                63  !               (-1) <>                   0 or
                63  !                 0  <>                   1 or
                63  !                 1  <>                  63 or
                63  !                 2  <>                1953 or
                63  !                 5  <>             7028847 or
                63  !                10  <>        127805525001 or
                63  !                15  <>     122131734269895 or
                63  !                20  <>   13488561475572645 or
                63  !                25  <>  244382877832924467 or
                63  !                30  <>  860778005594247069 or
                63  !                31  <>  916312070471295267 or
                63  !                32  <>  916312070471295267 or
                63  !                35  <>  629308289804197437 or
                63  !                40  <>   93993414551124795 or
                63  !                45  <>    2588713818544245 or
                63  !                50  <>      10468434365991 or
                63  !                55  <>          3872894697 or
                63  !                60  <>               39711 or
                63  !                61  <>                1953 or
                63  !                62  <>                  63 or
                63  !                63  <>                   1 or
                63  !                64  <>                   0 or
                63  !            123456  <>                   0 or
                63  !            654321  <>                   0 or
                63  !         INT64_MAX  <>                   0 or
                66  !         INT64_MIN  <>                   0 or
                66  !            (-1234) <>                   0 or
                66  !               (-2) <>                   0 or
                66  !               (-1) <>                   0 or
                66  !                 0  <>                   1 or
                66  !                 1  <>                  66 or
                66  !                 2  <>                2145 or
                66  !                 5  <>             8936928 or
                66  !                10  <>        210980549208 or
                66  !                15  <>     268367258592576 or
                66  !                20  <>   40661170824914640 or
                66  !                25  <> 1049058207282797712 or
                66  !                30  <> 5516694892996182896 or
                66  !                31  <> 6406484391866534976 or
                66  !                32  <> 7007092303604022630 or
                66  !                33  <> 7219428434016265740 or
                66  !                34  <> 7007092303604022630 or
                66  !                35  <> 6406484391866534976 or
                66  !                40  <> 1654284096099796392 or
                66  !                45  <>   89067326568860640 or
                66  !                50  <>     855420636763836 or
                66  !                55  <>       1074082795968 or
                66  !                60  <>            90858768 or
                66  !                64  <>                2145 or
                66  !                65  <>                  66 or
                66  !                66  <>                   1 or
                66  !                67  <>                   0 or
                66  !            123456  <>                   0 or
                66  !            654321  <>                   0 or
                66  !         INT64_MAX  <>                   0 or
                67  !         INT64_MIN  <>                   0 or
                67  !            (-1234) <>                   0 or
                67  !               (-2) <>                   0 or
                67  !               (-1) <>                   0 or
                67  !                 0  <>                   1 or
                67  !                 1  <>                  67 or
                67  !                 2  <>                2211 or
                67  !                 5  <>             9657648 or
                67  !                10  <>        247994680648 or
                67  !                15  <>     345780890878896 or
                67  !                20  <>   57963796707857040 or
                67  !                25  <> 1673497616379701112 or
                67  !                29  <> 7886597962249166160 or
                # The values 67 ! 30 to 67 ! 37 raise OVERFLOW_ERROR
                67  !                38  <> 7886597962249166160 or
                67  !                40  <> 4105075349580976232 or
                67  !                45  <>  271250494550621040 or
                67  !                50  <>    3371363686069236 or
                67  !                55  <>       5996962277488 or
                67  !                60  <>           869648208 or
                67  !                65  <>                2211 or
                67  !                66  <>                  67 or
                67  !                67  <>                   1 or
                67  !                68  <>                   0 or
                67  !            123456  <>                   0 or
                67  !            654321  <>                   0 or
                67  !         INT64_MAX  <>                   0 or
        intExpr(30) !         INT64_MIN  <>                   0 or
        intExpr(30) !            (-1234) <>                   0 or
        intExpr(30) !               (-2) <>                   0 or
        intExpr(30) !               (-1) <>                   0 or
        intExpr(30) !                 0  <>                   1 or
        intExpr(30) !                 1  <>                  30 or
        intExpr(30) !                 2  <>                 435 or
        intExpr(30) !                 5  <>              142506 or
        intExpr(30) !                10  <>            30045015 or
        intExpr(30) !                15  <>           155117520 or
        intExpr(30) !                20  <>            30045015 or
        intExpr(30) !                25  <>              142506 or
        intExpr(30) !                28  <>                 435 or
        intExpr(30) !                29  <>                  30 or
        intExpr(30) !                30  <>                   1 or
        intExpr(30) !                31  <>                   0 or
        intExpr(30) !            123456  <>                   0 or
        intExpr(30) !            654321  <>                   0 or
        intExpr(30) !         INT64_MAX  <>                   0 or
        intExpr(31) !         INT64_MIN  <>                   0 or
        intExpr(31) !            (-1234) <>                   0 or
        intExpr(31) !               (-2) <>                   0 or
        intExpr(31) !               (-1) <>                   0 or
        intExpr(31) !                 0  <>                   1 or
        intExpr(31) !                 1  <>                  31 or
        intExpr(31) !                 2  <>                 465 or
        intExpr(31) !                 5  <>              169911 or
        intExpr(31) !                10  <>            44352165 or
        intExpr(31) !                15  <>           300540195 or
        intExpr(31) !                16  <>           300540195 or
        intExpr(31) !                20  <>            84672315 or
        intExpr(31) !                25  <>              736281 or
        intExpr(31) !                29  <>                 465 or
        intExpr(31) !                30  <>                  31 or
        intExpr(31) !                31  <>                   1 or
        intExpr(31) !                32  <>                   0 or
        intExpr(31) !            123456  <>                   0 or
        intExpr(31) !            654321  <>                   0 or
        intExpr(31) !         INT64_MAX  <>                   0 or
        intExpr(45) !         INT64_MIN  <>                   0 or
        intExpr(45) !            (-1234) <>                   0 or
        intExpr(45) !               (-2) <>                   0 or
        intExpr(45) !               (-1) <>                   0 or
        intExpr(45) !                 0  <>                   1 or
        intExpr(45) !                 1  <>                  45 or
        intExpr(45) !                 2  <>                 990 or
        intExpr(45) !                 5  <>             1221759 or
        intExpr(45) !                10  <>          3190187286 or
        intExpr(45) !                15  <>        344867425584 or
        intExpr(45) !                20  <>       3169870830126 or
        intExpr(45) !                22  <>       4116715363800 or
        intExpr(45) !                23  <>       4116715363800 or
        intExpr(45) !                25  <>       3169870830126 or
        intExpr(45) !                30  <>        344867425584 or
        intExpr(45) !                35  <>          3190187286 or
        intExpr(45) !                40  <>             1221759 or
        intExpr(45) !                43  <>                 990 or
        intExpr(45) !                44  <>                  45 or
        intExpr(45) !                45  <>                   1 or
        intExpr(45) !                46  <>                   0 or
        intExpr(45) !            123456  <>                   0 or
        intExpr(45) !            654321  <>                   0 or
        intExpr(45) !         INT64_MAX  <>                   0 or
        intExpr(62) !         INT64_MIN  <>                   0 or
        intExpr(62) !            (-1234) <>                   0 or
        intExpr(62) !               (-2) <>                   0 or
        intExpr(62) !               (-1) <>                   0 or
        intExpr(62) !                 0  <>                   1 or
        intExpr(62) !                 1  <>                  62 or
        intExpr(62) !                 2  <>                1891 or
        intExpr(62) !                 5  <>             6471002 or
        intExpr(62) !                10  <>        107518933731 or
        intExpr(62) !                15  <>      93052749919920 or
        intExpr(62) !                20  <>    9206478467454345 or
        intExpr(62) !                25  <>  147405545359541742 or
        intExpr(62) !                30  <>  450883717216034179 or
        intExpr(62) !                31  <>  465428353255261088 or
        intExpr(62) !                32  <>  450883717216034179 or
        intExpr(62) !                35  <>  279692573246309972 or
        intExpr(62) !                40  <>   34315056105966195 or
        intExpr(62) !                45  <>     739632519584070 or
        intExpr(62) !                50  <>       2160153123141 or
        intExpr(62) !                55  <>           491796152 or
        intExpr(62) !                60  <>                1891 or
        intExpr(62) !                61  <>                  62 or
        intExpr(62) !                62  <>                   1 or
        intExpr(62) !                63  <>                   0 or
        intExpr(62) !            123456  <>                   0 or
        intExpr(62) !            654321  <>                   0 or
        intExpr(62) !         INT64_MAX  <>                   0 or
        intExpr(63) !         INT64_MIN  <>                   0 or
        intExpr(63) !            (-1234) <>                   0 or
        intExpr(63) !               (-2) <>                   0 or
        intExpr(63) !               (-1) <>                   0 or
        intExpr(63) !                 0  <>                   1 or
        intExpr(63) !                 1  <>                  63 or
        intExpr(63) !                 2  <>                1953 or
        intExpr(63) !                 5  <>             7028847 or
        intExpr(63) !                10  <>        127805525001 or
        intExpr(63) !                15  <>     122131734269895 or
        intExpr(63) !                20  <>   13488561475572645 or
        intExpr(63) !                25  <>  244382877832924467 or
        intExpr(63) !                30  <>  860778005594247069 or
        intExpr(63) !                31  <>  916312070471295267 or
        intExpr(63) !                32  <>  916312070471295267 or
        intExpr(63) !                35  <>  629308289804197437 or
        intExpr(63) !                40  <>   93993414551124795 or
        intExpr(63) !                45  <>    2588713818544245 or
        intExpr(63) !                50  <>      10468434365991 or
        intExpr(63) !                55  <>          3872894697 or
        intExpr(63) !                60  <>               39711 or
        intExpr(63) !                61  <>                1953 or
        intExpr(63) !                62  <>                  63 or
        intExpr(63) !                63  <>                   1 or
        intExpr(63) !                64  <>                   0 or
        intExpr(63) !            123456  <>                   0 or
        intExpr(63) !            654321  <>                   0 or
        intExpr(63) !         INT64_MAX  <>                   0 or
        intExpr(66) !         INT64_MIN  <>                   0 or
        intExpr(66) !            (-1234) <>                   0 or
        intExpr(66) !               (-2) <>                   0 or
        intExpr(66) !               (-1) <>                   0 or
        intExpr(66) !                 0  <>                   1 or
        intExpr(66) !                 1  <>                  66 or
        intExpr(66) !                 2  <>                2145 or
        intExpr(66) !                 5  <>             8936928 or
        intExpr(66) !                10  <>        210980549208 or
        intExpr(66) !                15  <>     268367258592576 or
        intExpr(66) !                20  <>   40661170824914640 or
        intExpr(66) !                25  <> 1049058207282797712 or
        intExpr(66) !                30  <> 5516694892996182896 or
        intExpr(66) !                31  <> 6406484391866534976 or
        intExpr(66) !                32  <> 7007092303604022630 or
        intExpr(66) !                33  <> 7219428434016265740 or
        intExpr(66) !                34  <> 7007092303604022630 or
        intExpr(66) !                35  <> 6406484391866534976 or
        intExpr(66) !                40  <> 1654284096099796392 or
        intExpr(66) !                45  <>   89067326568860640 or
        intExpr(66) !                50  <>     855420636763836 or
        intExpr(66) !                55  <>       1074082795968 or
        intExpr(66) !                60  <>            90858768 or
        intExpr(66) !                64  <>                2145 or
        intExpr(66) !                65  <>                  66 or
        intExpr(66) !                66  <>                   1 or
        intExpr(66) !                67  <>                   0 or
        intExpr(66) !            123456  <>                   0 or
        intExpr(66) !            654321  <>                   0 or
        intExpr(66) !         INT64_MAX  <>                   0 or
        intExpr(67) !         INT64_MIN  <>                   0 or
        intExpr(67) !            (-1234) <>                   0 or
        intExpr(67) !               (-2) <>                   0 or
        intExpr(67) !               (-1) <>                   0 or
        intExpr(67) !                 0  <>                   1 or
        intExpr(67) !                 1  <>                  67 or
        intExpr(67) !                 2  <>                2211 or
        intExpr(67) !                 5  <>             9657648 or
        intExpr(67) !                10  <>        247994680648 or
        intExpr(67) !                15  <>     345780890878896 or
        intExpr(67) !                20  <>   57963796707857040 or
        intExpr(67) !                25  <> 1673497616379701112 or
        intExpr(67) !                29  <> 7886597962249166160 or
                # The values 67 ! 30 to 67 ! 37 raise OVERFLOW_ERROR
        intExpr(67) !                38  <> 7886597962249166160 or
        intExpr(67) !                40  <> 4105075349580976232 or
        intExpr(67) !                45  <>  271250494550621040 or
        intExpr(67) !                50  <>    3371363686069236 or
        intExpr(67) !                55  <>       5996962277488 or
        intExpr(67) !                60  <>           869648208 or
        intExpr(67) !                65  <>                2211 or
        intExpr(67) !                66  <>                  67 or
        intExpr(67) !                67  <>                   1 or
        intExpr(67) !                68  <>                   0 or
        intExpr(67) !            123456  <>                   0 or
        intExpr(67) !            654321  <>                   0 or
        intExpr(67) !         INT64_MAX  <>                   0 or
                30  ! intExpr(INT64_MIN) <>                   0 or
                30  ! intExpr(    -1234) <>                   0 or
                30  ! intExpr(       -2) <>                   0 or
                30  ! intExpr(       -1) <>                   0 or
                30  ! intExpr(        0) <>                   1 or
                30  ! intExpr(        1) <>                  30 or
                30  ! intExpr(        2) <>                 435 or
                30  ! intExpr(        5) <>              142506 or
                30  ! intExpr(       10) <>            30045015 or
                30  ! intExpr(       15) <>           155117520 or
                30  ! intExpr(       20) <>            30045015 or
                30  ! intExpr(       25) <>              142506 or
                30  ! intExpr(       28) <>                 435 or
                30  ! intExpr(       29) <>                  30 or
                30  ! intExpr(       30) <>                   1 or
                30  ! intExpr(       31) <>                   0 or
                30  ! intExpr(   123456) <>                   0 or
                30  ! intExpr(   654321) <>                   0 or
                30  ! intExpr(INT64_MAX) <>                   0 or
                31  ! intExpr(INT64_MIN) <>                   0 or
                31  ! intExpr(    -1234) <>                   0 or
                31  ! intExpr(       -2) <>                   0 or
                31  ! intExpr(       -1) <>                   0 or
                31  ! intExpr(        0) <>                   1 or
                31  ! intExpr(        1) <>                  31 or
                31  ! intExpr(        2) <>                 465 or
                31  ! intExpr(        5) <>              169911 or
                31  ! intExpr(       10) <>            44352165 or
                31  ! intExpr(       15) <>           300540195 or
                31  ! intExpr(       16) <>           300540195 or
                31  ! intExpr(       20) <>            84672315 or
                31  ! intExpr(       25) <>              736281 or
                31  ! intExpr(       29) <>                 465 or
                31  ! intExpr(       30) <>                  31 or
                31  ! intExpr(       31) <>                   1 or
                31  ! intExpr(       32) <>                   0 or
                31  ! intExpr(   123456) <>                   0 or
                31  ! intExpr(   654321) <>                   0 or
                31  ! intExpr(INT64_MAX) <>                   0 or
                45  ! intExpr(INT64_MIN) <>                   0 or
                45  ! intExpr(    -1234) <>                   0 or
                45  ! intExpr(       -2) <>                   0 or
                45  ! intExpr(       -1) <>                   0 or
                45  ! intExpr(        0) <>                   1 or
                45  ! intExpr(        1) <>                  45 or
                45  ! intExpr(        2) <>                 990 or
                45  ! intExpr(        5) <>             1221759 or
                45  ! intExpr(       10) <>          3190187286 or
                45  ! intExpr(       15) <>        344867425584 or
                45  ! intExpr(       20) <>       3169870830126 or
                45  ! intExpr(       22) <>       4116715363800 or
                45  ! intExpr(       23) <>       4116715363800 or
                45  ! intExpr(       25) <>       3169870830126 or
                45  ! intExpr(       30) <>        344867425584 or
                45  ! intExpr(       35) <>          3190187286 or
                45  ! intExpr(       40) <>             1221759 or
                45  ! intExpr(       43) <>                 990 or
                45  ! intExpr(       44) <>                  45 or
                45  ! intExpr(       45) <>                   1 or
                45  ! intExpr(       46) <>                   0 or
                45  ! intExpr(   123456) <>                   0 or
                45  ! intExpr(   654321) <>                   0 or
                45  ! intExpr(INT64_MAX) <>                   0 or
                62  ! intExpr(INT64_MIN) <>                   0 or
                62  ! intExpr(    -1234) <>                   0 or
                62  ! intExpr(       -2) <>                   0 or
                62  ! intExpr(       -1) <>                   0 or
                62  ! intExpr(        0) <>                   1 or
                62  ! intExpr(        1) <>                  62 or
                62  ! intExpr(        2) <>                1891 or
                62  ! intExpr(        5) <>             6471002 or
                62  ! intExpr(       10) <>        107518933731 or
                62  ! intExpr(       15) <>      93052749919920 or
                62  ! intExpr(       20) <>    9206478467454345 or
                62  ! intExpr(       25) <>  147405545359541742 or
                62  ! intExpr(       30) <>  450883717216034179 or
                62  ! intExpr(       31) <>  465428353255261088 or
                62  ! intExpr(       32) <>  450883717216034179 or
                62  ! intExpr(       35) <>  279692573246309972 or
                62  ! intExpr(       40) <>   34315056105966195 or
                62  ! intExpr(       45) <>     739632519584070 or
                62  ! intExpr(       50) <>       2160153123141 or
                62  ! intExpr(       55) <>           491796152 or
                62  ! intExpr(       60) <>                1891 or
                62  ! intExpr(       61) <>                  62 or
                62  ! intExpr(       62) <>                   1 or
                62  ! intExpr(       63) <>                   0 or
                62  ! intExpr(   123456) <>                   0 or
                62  ! intExpr(   654321) <>                   0 or
                62  ! intExpr(INT64_MAX) <>                   0 or
                63  ! intExpr(INT64_MIN) <>                   0 or
                63  ! intExpr(    -1234) <>                   0 or
                63  ! intExpr(       -2) <>                   0 or
                63  ! intExpr(       -1) <>                   0 or
                63  ! intExpr(        0) <>                   1 or
                63  ! intExpr(        1) <>                  63 or
                63  ! intExpr(        2) <>                1953 or
                63  ! intExpr(        5) <>             7028847 or
                63  ! intExpr(       10) <>        127805525001 or
                63  ! intExpr(       15) <>     122131734269895 or
                63  ! intExpr(       20) <>   13488561475572645 or
                63  ! intExpr(       25) <>  244382877832924467 or
                63  ! intExpr(       30) <>  860778005594247069 or
                63  ! intExpr(       31) <>  916312070471295267 or
                63  ! intExpr(       32) <>  916312070471295267 or
                63  ! intExpr(       35) <>  629308289804197437 or
                63  ! intExpr(       40) <>   93993414551124795 or
                63  ! intExpr(       45) <>    2588713818544245 or
                63  ! intExpr(       50) <>      10468434365991 or
                63  ! intExpr(       55) <>          3872894697 or
                63  ! intExpr(       60) <>               39711 or
                63  ! intExpr(       61) <>                1953 or
                63  ! intExpr(       62) <>                  63 or
                63  ! intExpr(       63) <>                   1 or
                63  ! intExpr(       64) <>                   0 or
                63  ! intExpr(   123456) <>                   0 or
                63  ! intExpr(   654321) <>                   0 or
                63  ! intExpr(INT64_MAX) <>                   0 or
                66  ! intExpr(INT64_MIN) <>                   0 or
                66  ! intExpr(    -1234) <>                   0 or
                66  ! intExpr(       -2) <>                   0 or
                66  ! intExpr(       -1) <>                   0 or
                66  ! intExpr(        0) <>                   1 or
                66  ! intExpr(        1) <>                  66 or
                66  ! intExpr(        2) <>                2145 or
                66  ! intExpr(        5) <>             8936928 or
                66  ! intExpr(       10) <>        210980549208 or
                66  ! intExpr(       15) <>     268367258592576 or
                66  ! intExpr(       20) <>   40661170824914640 or
                66  ! intExpr(       25) <> 1049058207282797712 or
                66  ! intExpr(       30) <> 5516694892996182896 or
                66  ! intExpr(       31) <> 6406484391866534976 or
                66  ! intExpr(       32) <> 7007092303604022630 or
                66  ! intExpr(       33) <> 7219428434016265740 or
                66  ! intExpr(       34) <> 7007092303604022630 or
                66  ! intExpr(       35) <> 6406484391866534976 or
                66  ! intExpr(       40) <> 1654284096099796392 or
                66  ! intExpr(       45) <>   89067326568860640 or
                66  ! intExpr(       50) <>     855420636763836 or
                66  ! intExpr(       55) <>       1074082795968 or
                66  ! intExpr(       60) <>            90858768 or
                66  ! intExpr(       64) <>                2145 or
                66  ! intExpr(       65) <>                  66 or
                66  ! intExpr(       66) <>                   1 or
                66  ! intExpr(       67) <>                   0 or
                66  ! intExpr(   123456) <>                   0 or
                66  ! intExpr(   654321) <>                   0 or
                66  ! intExpr(INT64_MAX) <>                   0 or
                67  ! intExpr(INT64_MIN) <>                   0 or
                67  ! intExpr(    -1234) <>                   0 or
                67  ! intExpr(       -2) <>                   0 or
                67  ! intExpr(       -1) <>                   0 or
                67  ! intExpr(        0) <>                   1 or
                67  ! intExpr(        1) <>                  67 or
                67  ! intExpr(        2) <>                2211 or
                67  ! intExpr(        5) <>             9657648 or
                67  ! intExpr(       10) <>        247994680648 or
                67  ! intExpr(       15) <>     345780890878896 or
                67  ! intExpr(       20) <>   57963796707857040 or
                67  ! intExpr(       25) <> 1673497616379701112 or
                67  ! intExpr(       29) <> 7886597962249166160 or
                # The values 67 ! 30 to 67 ! 37 raise OVERFLOW_ERROR
                67  ! intExpr(       38) <> 7886597962249166160 or
                67  ! intExpr(       40) <> 4105075349580976232 or
                67  ! intExpr(       45) <>  271250494550621040 or
                67  ! intExpr(       50) <>    3371363686069236 or
                67  ! intExpr(       55) <>       5996962277488 or
                67  ! intExpr(       60) <>           869648208 or
                67  ! intExpr(       65) <>                2211 or
                67  ! intExpr(       66) <>                  67 or
                67  ! intExpr(       67) <>                   1 or
                67  ! intExpr(       68) <>                   0 or
                67  ! intExpr(   123456) <>                   0 or
                67  ! intExpr(   654321) <>                   0 or
                67  ! intExpr(INT64_MAX) <>                   0 or
        intExpr(30) ! intExpr(INT64_MIN) <>                   0 or
        intExpr(30) ! intExpr(    -1234) <>                   0 or
        intExpr(30) ! intExpr(       -2) <>                   0 or
        intExpr(30) ! intExpr(       -1) <>                   0 or
        intExpr(30) ! intExpr(        0) <>                   1 or
        intExpr(30) ! intExpr(        1) <>                  30 or
        intExpr(30) ! intExpr(        2) <>                 435 or
        intExpr(30) ! intExpr(        5) <>              142506 or
        intExpr(30) ! intExpr(       10) <>            30045015 or
        intExpr(30) ! intExpr(       15) <>           155117520 or
        intExpr(30) ! intExpr(       20) <>            30045015 or
        intExpr(30) ! intExpr(       25) <>              142506 or
        intExpr(30) ! intExpr(       28) <>                 435 or
        intExpr(30) ! intExpr(       29) <>                  30 or
        intExpr(30) ! intExpr(       30) <>                   1 or
        intExpr(30) ! intExpr(       31) <>                   0 or
        intExpr(30) ! intExpr(   123456) <>                   0 or
        intExpr(30) ! intExpr(   654321) <>                   0 or
        intExpr(30) ! intExpr(INT64_MAX) <>                   0 or
        intExpr(31) ! intExpr(INT64_MIN) <>                   0 or
        intExpr(31) ! intExpr(    -1234) <>                   0 or
        intExpr(31) ! intExpr(       -2) <>                   0 or
        intExpr(31) ! intExpr(       -1) <>                   0 or
        intExpr(31) ! intExpr(        0) <>                   1 or
        intExpr(31) ! intExpr(        1) <>                  31 or
        intExpr(31) ! intExpr(        2) <>                 465 or
        intExpr(31) ! intExpr(        5) <>              169911 or
        intExpr(31) ! intExpr(       10) <>            44352165 or
        intExpr(31) ! intExpr(       15) <>           300540195 or
        intExpr(31) ! intExpr(       16) <>           300540195 or
        intExpr(31) ! intExpr(       20) <>            84672315 or
        intExpr(31) ! intExpr(       25) <>              736281 or
        intExpr(31) ! intExpr(       29) <>                 465 or
        intExpr(31) ! intExpr(       30) <>                  31 or
        intExpr(31) ! intExpr(       31) <>                   1 or
        intExpr(31) ! intExpr(       32) <>                   0 or
        intExpr(31) ! intExpr(   123456) <>                   0 or
        intExpr(31) ! intExpr(   654321) <>                   0 or
        intExpr(31) ! intExpr(INT64_MAX) <>                   0 or
        intExpr(45) ! intExpr(INT64_MIN) <>                   0 or
        intExpr(45) ! intExpr(    -1234) <>                   0 or
        intExpr(45) ! intExpr(       -2) <>                   0 or
        intExpr(45) ! intExpr(       -1) <>                   0 or
        intExpr(45) ! intExpr(        0) <>                   1 or
        intExpr(45) ! intExpr(        1) <>                  45 or
        intExpr(45) ! intExpr(        2) <>                 990 or
        intExpr(45) ! intExpr(        5) <>             1221759 or
        intExpr(45) ! intExpr(       10) <>          3190187286 or
        intExpr(45) ! intExpr(       15) <>        344867425584 or
        intExpr(45) ! intExpr(       20) <>       3169870830126 or
        intExpr(45) ! intExpr(       22) <>       4116715363800 or
        intExpr(45) ! intExpr(       23) <>       4116715363800 or
        intExpr(45) ! intExpr(       25) <>       3169870830126 or
        intExpr(45) ! intExpr(       30) <>        344867425584 or
        intExpr(45) ! intExpr(       35) <>          3190187286 or
        intExpr(45) ! intExpr(       40) <>             1221759 or
        intExpr(45) ! intExpr(       43) <>                 990 or
        intExpr(45) ! intExpr(       44) <>                  45 or
        intExpr(45) ! intExpr(       45) <>                   1 or
        intExpr(45) ! intExpr(       46) <>                   0 or
        intExpr(45) ! intExpr(   123456) <>                   0 or
        intExpr(45) ! intExpr(   654321) <>                   0 or
        intExpr(45) ! intExpr(INT64_MAX) <>                   0 or
        intExpr(62) ! intExpr(INT64_MIN) <>                   0 or
        intExpr(62) ! intExpr(    -1234) <>                   0 or
        intExpr(62) ! intExpr(       -2) <>                   0 or
        intExpr(62) ! intExpr(       -1) <>                   0 or
        intExpr(62) ! intExpr(        0) <>                   1 or
        intExpr(62) ! intExpr(        1) <>                  62 or
        intExpr(62) ! intExpr(        2) <>                1891 or
        intExpr(62) ! intExpr(        5) <>             6471002 or
        intExpr(62) ! intExpr(       10) <>        107518933731 or
        intExpr(62) ! intExpr(       15) <>      93052749919920 or
        intExpr(62) ! intExpr(       20) <>    9206478467454345 or
        intExpr(62) ! intExpr(       25) <>  147405545359541742 or
        intExpr(62) ! intExpr(       30) <>  450883717216034179 or
        intExpr(62) ! intExpr(       31) <>  465428353255261088 or
        intExpr(62) ! intExpr(       32) <>  450883717216034179 or
        intExpr(62) ! intExpr(       35) <>  279692573246309972 or
        intExpr(62) ! intExpr(       40) <>   34315056105966195 or
        intExpr(62) ! intExpr(       45) <>     739632519584070 or
        intExpr(62) ! intExpr(       50) <>       2160153123141 or
        intExpr(62) ! intExpr(       55) <>           491796152 or
        intExpr(62) ! intExpr(       60) <>                1891 or
        intExpr(62) ! intExpr(       61) <>                  62 or
        intExpr(62) ! intExpr(       62) <>                   1 or
        intExpr(62) ! intExpr(       63) <>                   0 or
        intExpr(62) ! intExpr(   123456) <>                   0 or
        intExpr(62) ! intExpr(   654321) <>                   0 or
        intExpr(62) ! intExpr(INT64_MAX) <>                   0 or
        intExpr(63) ! intExpr(INT64_MIN) <>                   0 or
        intExpr(63) ! intExpr(    -1234) <>                   0 or
        intExpr(63) ! intExpr(       -2) <>                   0 or
        intExpr(63) ! intExpr(       -1) <>                   0 or
        intExpr(63) ! intExpr(        0) <>                   1 or
        intExpr(63) ! intExpr(        1) <>                  63 or
        intExpr(63) ! intExpr(        2) <>                1953 or
        intExpr(63) ! intExpr(        5) <>             7028847 or
        intExpr(63) ! intExpr(       10) <>        127805525001 or
        intExpr(63) ! intExpr(       15) <>     122131734269895 or
        intExpr(63) ! intExpr(       20) <>   13488561475572645 or
        intExpr(63) ! intExpr(       25) <>  244382877832924467 or
        intExpr(63) ! intExpr(       30) <>  860778005594247069 or
        intExpr(63) ! intExpr(       31) <>  916312070471295267 or
        intExpr(63) ! intExpr(       32) <>  916312070471295267 or
        intExpr(63) ! intExpr(       35) <>  629308289804197437 or
        intExpr(63) ! intExpr(       40) <>   93993414551124795 or
        intExpr(63) ! intExpr(       45) <>    2588713818544245 or
        intExpr(63) ! intExpr(       50) <>      10468434365991 or
        intExpr(63) ! intExpr(       55) <>          3872894697 or
        intExpr(63) ! intExpr(       60) <>               39711 or
        intExpr(63) ! intExpr(       61) <>                1953 or
        intExpr(63) ! intExpr(       62) <>                  63 or
        intExpr(63) ! intExpr(       63) <>                   1 or
        intExpr(63) ! intExpr(       64) <>                   0 or
        intExpr(63) ! intExpr(   123456) <>                   0 or
        intExpr(63) ! intExpr(   654321) <>                   0 or
        intExpr(63) ! intExpr(INT64_MAX) <>                   0 or
        intExpr(66) ! intExpr(INT64_MIN) <>                   0 or
        intExpr(66) ! intExpr(    -1234) <>                   0 or
        intExpr(66) ! intExpr(       -2) <>                   0 or
        intExpr(66) ! intExpr(       -1) <>                   0 or
        intExpr(66) ! intExpr(        0) <>                   1 or
        intExpr(66) ! intExpr(        1) <>                  66 or
        intExpr(66) ! intExpr(        2) <>                2145 or
        intExpr(66) ! intExpr(        5) <>             8936928 or
        intExpr(66) ! intExpr(       10) <>        210980549208 or
        intExpr(66) ! intExpr(       15) <>     268367258592576 or
        intExpr(66) ! intExpr(       20) <>   40661170824914640 or
        intExpr(66) ! intExpr(       25) <> 1049058207282797712 or
        intExpr(66) ! intExpr(       30) <> 5516694892996182896 or
        intExpr(66) ! intExpr(       31) <> 6406484391866534976 or
        intExpr(66) ! intExpr(       32) <> 7007092303604022630 or
        intExpr(66) ! intExpr(       33) <> 7219428434016265740 or
        intExpr(66) ! intExpr(       34) <> 7007092303604022630 or
        intExpr(66) ! intExpr(       35) <> 6406484391866534976 or
        intExpr(66) ! intExpr(       40) <> 1654284096099796392 or
        intExpr(66) ! intExpr(       45) <>   89067326568860640 or
        intExpr(66) ! intExpr(       50) <>     855420636763836 or
        intExpr(66) ! intExpr(       55) <>       1074082795968 or
        intExpr(66) ! intExpr(       60) <>            90858768 or
        intExpr(66) ! intExpr(       64) <>                2145 or
        intExpr(66) ! intExpr(       65) <>                  66 or
        intExpr(66) ! intExpr(       66) <>                   1 or
        intExpr(66) ! intExpr(       67) <>                   0 or
        intExpr(66) ! intExpr(   123456) <>                   0 or
        intExpr(66) ! intExpr(   654321) <>                   0 or
        intExpr(66) ! intExpr(INT64_MAX) <>                   0 or
        intExpr(67) ! intExpr(INT64_MIN) <>                   0 or
        intExpr(67) ! intExpr(    -1234) <>                   0 or
        intExpr(67) ! intExpr(       -2) <>                   0 or
        intExpr(67) ! intExpr(       -1) <>                   0 or
        intExpr(67) ! intExpr(        0) <>                   1 or
        intExpr(67) ! intExpr(        1) <>                  67 or
        intExpr(67) ! intExpr(        2) <>                2211 or
        intExpr(67) ! intExpr(        5) <>             9657648 or
        intExpr(67) ! intExpr(       10) <>        247994680648 or
        intExpr(67) ! intExpr(       15) <>     345780890878896 or
        intExpr(67) ! intExpr(       20) <>   57963796707857040 or
        intExpr(67) ! intExpr(       25) <> 1673497616379701112 or
        intExpr(67) ! intExpr(       29) <> 7886597962249166160 or
                # The values 67 ! 30 to 67 ! 37 raise OVERFLOW_ERROR
        intExpr(67) ! intExpr(       38) <> 7886597962249166160 or
        intExpr(67) ! intExpr(       40) <> 4105075349580976232 or
        intExpr(67) ! intExpr(       45) <>  271250494550621040 or
        intExpr(67) ! intExpr(       50) <>    3371363686069236 or
        intExpr(67) ! intExpr(       55) <>       5996962277488 or
        intExpr(67) ! intExpr(       60) <>           869648208 or
        intExpr(67) ! intExpr(       65) <>                2211 or
        intExpr(67) ! intExpr(       66) <>                  67 or
        intExpr(67) ! intExpr(       67) <>                   1 or
        intExpr(67) ! intExpr(       68) <>                   0 or
        intExpr(67) ! intExpr(   123456) <>                   0 or
        intExpr(67) ! intExpr(   654321) <>                   0 or
        intExpr(67) ! intExpr(INT64_MAX) <>                   0 then
      writeln(" ***** Computing binomial coefficient with constants does not work correct.");
      okay := FALSE;
    end if;

    if  (-99) !         15 <> -1809960172844903640 or
        (-98) !         15 <> -1569699972909739440 or
        (-97) !         15 <> -1359472297966470765 or
        (-96) !         16 <>  8156833787798824590 or
        (-95) !         16 <>  6981073962530525550 or
        (-94) !         16 <>  5965645022526085470 or
        (-93) !         16 <>  5089954010045192190 or
        (-92) !         16 <>  4335886749297756310 or
        (-91) !         16 <>  3687529852206503030 or
        (-90) !         16 <>  3130921572628162950 or
        (-89) !         16 <>  2653828761561014310 or
        (-88) !         16 <>  2245547413628550570 or
        (-87) !         16 <>  1896724514424115530 or
        (-86) !         16 <>  1599199100396803290 or
        (-85) !         17 <> -7995995501984016450 or
        (-84) !         17 <> -6650134872937201800 or
        (-83) !         17 <> -5519611944537877494 or
        (-82) !         17 <> -4571799792445514692 or
        (-81) !         17 <> -3778732481511088674 or
        (-80) !         17 <> -3116480397122547360 or
        (-79) !         17 <> -2564603660132096265 or
        (-78) !         17 <> -2105674584108457986 or
        (-77) !         18 <>  9007607943130625829 or
        (-76) !         18 <>  7282746847637527266 or
        (-75) !         18 <>  5873182941643167150 or
        (-74) !         18 <>  4724081931321677925 or
        (-73) !         18 <>  3789648142708598775 or
        (-72) !         18 <>  3031718514166879020 or
        (-71) !         18 <>  2418561960739869780 or
        (-70) !         19 <> -8910491434304783400 or
        (-69) !         19 <> -6986635329170796075 or
        (-68) !         19 <> -5460818418202461300 or
        (-67) !         19 <> -4254358535111219850 or
        (-66) !         19 <> -3303384274321653060 or
        (-65) !         19 <> -2556190212272707725 or
        (-64) !         20 <>  8179808679272664720 or
        (-63) !         20 <>  6208770443303347920 or
        (-62) !         20 <>  4694436188839116720 or
        (-61) !         20 <>  3535316142212174320 or
        (-60) !         20 <>  2651487106659130740 or
        (-59) !         21 <> -7449416156804224460 or
        (-58) !         21 <> -5469191608792974920 or
        (-57) !         21 <> -3996716944887173980 or
        (-56) !         21 <> -2906703232645217440 or
        (-55) !         22 <>  7266758081613043600 or
        (-54) !         22 <>  5163222847461899400 or
        (-53) !         22 <>  3648677478873075576 or
        (-52) !         23 <> -8249183865278257824 or
        (-51) !         23 <> -5685248339583664176 or
        (-50) !         23 <> -3894005712043605600 or
        (-49) !         24 <>  7950261662089028100 or
        (-48) !         24 <>  5300174441392685400 or
        (-47) !         24 <>  3508566179513467800 or
        (-46) !         25 <> -6455761770304780752 or
        (-45) !         25 <> -4150132566624501912 or
        (-44) !         26 <>  7023301266595310928 or
        (-43) !         26 <>  4376839919762295216 or
        (-42) !         27 <> -6808417652963570336 or
        (-41) !         27 <> -4105075349580976232 or
        (-40) !         28 <>  5864393356544251760 or
        (-39) !         29 <> -7886597962249166160 or
        (-38) !         29 <> -4472995859186094240 or
        (-37) !         30 <>  5516694892996182896 or
        (-36) !         31 <> -6406484391866534976 or
        (-35) !         32 <>  7007092303604022630 or
        (-34) !         33 <> -7219428434016265740 or
        (-33) !         34 <>  7007092303604022630 or
        (-32) !         35 <> -6406484391866534976 or
        (-31) !         36 <>  5516694892996182896 or
        (-30) !         38 <>  7886597962249166160 or
        (-29) !         39 <> -5864393356544251760 or
        (-28) !         41 <> -6808417652963570336 or
        (-27) !         43 <> -7023301266595310928 or
        (-26) !         45 <> -6455761770304780752 or
        (-25) !         48 <>  7950261662089028100 or
        (-24) !         51 <> -8249183865278257824 or
        (-23) !         54 <>  7266758081613043600 or
        (-22) !         58 <>  7449416156804224460 or
        (-21) !         63 <> -8179808679272664720 or
        (-20) !         69 <> -8910491434304783400 or
        (-19) !         76 <>  9007607943130625829 or
        (-18) !         84 <>  7995995501984016450 or
        (-17) !         95 <> -8156833787798824590 or
        (-16) !        110 <>  9064807833193439800 or
        (-15) !        129 <> -8887821571512103935 or
        (-14) !        156 <>  9176358300744339432 or
        (-13) !        194 <>  8795548359217331075 or
        (-12) !        254 <>  9187507719876570240 or
        (-11) !        351 <> -9134638038697149616 or
        (-10) !        525 <> -9092292741062601356 or
        ( -9) !        879 <> -9207044098280898870 or
        ( -8) !       1726 <>  9202167919706100768 or
        ( -7) !       4331 <> -9210884681005865704 or
        ( -6) !      16170 <>  9220865312154653235 or
        ( -5) !     121973 <> -9223148185681446450 or
        ( -4) !    3810776 <>  9223371416043870029 or
        ( -3) ! 4294967294 <>  9223372034707292160 or
        intExpr(-99) !         15 <> -1809960172844903640 or
        intExpr(-98) !         15 <> -1569699972909739440 or
        intExpr(-97) !         15 <> -1359472297966470765 or
        intExpr(-96) !         16 <>  8156833787798824590 or
        intExpr(-95) !         16 <>  6981073962530525550 or
        intExpr(-94) !         16 <>  5965645022526085470 or
        intExpr(-93) !         16 <>  5089954010045192190 or
        intExpr(-92) !         16 <>  4335886749297756310 or
        intExpr(-91) !         16 <>  3687529852206503030 or
        intExpr(-90) !         16 <>  3130921572628162950 or
        intExpr(-89) !         16 <>  2653828761561014310 or
        intExpr(-88) !         16 <>  2245547413628550570 or
        intExpr(-87) !         16 <>  1896724514424115530 or
        intExpr(-86) !         16 <>  1599199100396803290 or
        intExpr(-85) !         17 <> -7995995501984016450 or
        intExpr(-84) !         17 <> -6650134872937201800 or
        intExpr(-83) !         17 <> -5519611944537877494 or
        intExpr(-82) !         17 <> -4571799792445514692 or
        intExpr(-81) !         17 <> -3778732481511088674 or
        intExpr(-80) !         17 <> -3116480397122547360 or
        intExpr(-79) !         17 <> -2564603660132096265 or
        intExpr(-78) !         17 <> -2105674584108457986 or
        intExpr(-77) !         18 <>  9007607943130625829 or
        intExpr(-76) !         18 <>  7282746847637527266 or
        intExpr(-75) !         18 <>  5873182941643167150 or
        intExpr(-74) !         18 <>  4724081931321677925 or
        intExpr(-73) !         18 <>  3789648142708598775 or
        intExpr(-72) !         18 <>  3031718514166879020 or
        intExpr(-71) !         18 <>  2418561960739869780 or
        intExpr(-70) !         19 <> -8910491434304783400 or
        intExpr(-69) !         19 <> -6986635329170796075 or
        intExpr(-68) !         19 <> -5460818418202461300 or
        intExpr(-67) !         19 <> -4254358535111219850 or
        intExpr(-66) !         19 <> -3303384274321653060 or
        intExpr(-65) !         19 <> -2556190212272707725 or
        intExpr(-64) !         20 <>  8179808679272664720 or
        intExpr(-63) !         20 <>  6208770443303347920 or
        intExpr(-62) !         20 <>  4694436188839116720 or
        intExpr(-61) !         20 <>  3535316142212174320 or
        intExpr(-60) !         20 <>  2651487106659130740 or
        intExpr(-59) !         21 <> -7449416156804224460 or
        intExpr(-58) !         21 <> -5469191608792974920 or
        intExpr(-57) !         21 <> -3996716944887173980 or
        intExpr(-56) !         21 <> -2906703232645217440 or
        intExpr(-55) !         22 <>  7266758081613043600 or
        intExpr(-54) !         22 <>  5163222847461899400 or
        intExpr(-53) !         22 <>  3648677478873075576 or
        intExpr(-52) !         23 <> -8249183865278257824 or
        intExpr(-51) !         23 <> -5685248339583664176 or
        intExpr(-50) !         23 <> -3894005712043605600 or
        intExpr(-49) !         24 <>  7950261662089028100 or
        intExpr(-48) !         24 <>  5300174441392685400 or
        intExpr(-47) !         24 <>  3508566179513467800 or
        intExpr(-46) !         25 <> -6455761770304780752 or
        intExpr(-45) !         25 <> -4150132566624501912 or
        intExpr(-44) !         26 <>  7023301266595310928 or
        intExpr(-43) !         26 <>  4376839919762295216 or
        intExpr(-42) !         27 <> -6808417652963570336 or
        intExpr(-41) !         27 <> -4105075349580976232 or
        intExpr(-40) !         28 <>  5864393356544251760 or
        intExpr(-39) !         29 <> -7886597962249166160 or
        intExpr(-38) !         29 <> -4472995859186094240 or
        intExpr(-37) !         30 <>  5516694892996182896 or
        intExpr(-36) !         31 <> -6406484391866534976 or
        intExpr(-35) !         32 <>  7007092303604022630 or
        intExpr(-34) !         33 <> -7219428434016265740 or
        intExpr(-33) !         34 <>  7007092303604022630 or
        intExpr(-32) !         35 <> -6406484391866534976 or
        intExpr(-31) !         36 <>  5516694892996182896 or
        intExpr(-30) !         38 <>  7886597962249166160 or
        intExpr(-29) !         39 <> -5864393356544251760 or
        intExpr(-28) !         41 <> -6808417652963570336 or
        intExpr(-27) !         43 <> -7023301266595310928 or
        intExpr(-26) !         45 <> -6455761770304780752 or
        intExpr(-25) !         48 <>  7950261662089028100 or
        intExpr(-24) !         51 <> -8249183865278257824 or
        intExpr(-23) !         54 <>  7266758081613043600 or
        intExpr(-22) !         58 <>  7449416156804224460 or
        intExpr(-21) !         63 <> -8179808679272664720 or
        intExpr(-20) !         69 <> -8910491434304783400 or
        intExpr(-19) !         76 <>  9007607943130625829 or
        intExpr(-18) !         84 <>  7995995501984016450 or
        intExpr(-17) !         95 <> -8156833787798824590 or
        intExpr(-16) !        110 <>  9064807833193439800 or
        intExpr(-15) !        129 <> -8887821571512103935 or
        intExpr(-14) !        156 <>  9176358300744339432 or
        intExpr(-13) !        194 <>  8795548359217331075 or
        intExpr(-12) !        254 <>  9187507719876570240 or
        intExpr(-11) !        351 <> -9134638038697149616 or
        intExpr(-10) !        525 <> -9092292741062601356 or
        intExpr( -9) !        879 <> -9207044098280898870 or
        intExpr( -8) !       1726 <>  9202167919706100768 or
        intExpr( -7) !       4331 <> -9210884681005865704 or
        intExpr( -6) !      16170 <>  9220865312154653235 or
        intExpr( -5) !     121973 <> -9223148185681446450 or
        intExpr( -4) !    3810776 <>  9223371416043870029 or
        intExpr( -3) ! 4294967294 <>  9223372034707292160 or
        (-99) ! intExpr(        15) <> -1809960172844903640 or
        (-98) ! intExpr(        15) <> -1569699972909739440 or
        (-97) ! intExpr(        15) <> -1359472297966470765 or
        (-96) ! intExpr(        16) <>  8156833787798824590 or
        (-95) ! intExpr(        16) <>  6981073962530525550 or
        (-94) ! intExpr(        16) <>  5965645022526085470 or
        (-93) ! intExpr(        16) <>  5089954010045192190 or
        (-92) ! intExpr(        16) <>  4335886749297756310 or
        (-91) ! intExpr(        16) <>  3687529852206503030 or
        (-90) ! intExpr(        16) <>  3130921572628162950 or
        (-89) ! intExpr(        16) <>  2653828761561014310 or
        (-88) ! intExpr(        16) <>  2245547413628550570 or
        (-87) ! intExpr(        16) <>  1896724514424115530 or
        (-86) ! intExpr(        16) <>  1599199100396803290 or
        (-85) ! intExpr(        17) <> -7995995501984016450 or
        (-84) ! intExpr(        17) <> -6650134872937201800 or
        (-83) ! intExpr(        17) <> -5519611944537877494 or
        (-82) ! intExpr(        17) <> -4571799792445514692 or
        (-81) ! intExpr(        17) <> -3778732481511088674 or
        (-80) ! intExpr(        17) <> -3116480397122547360 or
        (-79) ! intExpr(        17) <> -2564603660132096265 or
        (-78) ! intExpr(        17) <> -2105674584108457986 or
        (-77) ! intExpr(        18) <>  9007607943130625829 or
        (-76) ! intExpr(        18) <>  7282746847637527266 or
        (-75) ! intExpr(        18) <>  5873182941643167150 or
        (-74) ! intExpr(        18) <>  4724081931321677925 or
        (-73) ! intExpr(        18) <>  3789648142708598775 or
        (-72) ! intExpr(        18) <>  3031718514166879020 or
        (-71) ! intExpr(        18) <>  2418561960739869780 or
        (-70) ! intExpr(        19) <> -8910491434304783400 or
        (-69) ! intExpr(        19) <> -6986635329170796075 or
        (-68) ! intExpr(        19) <> -5460818418202461300 or
        (-67) ! intExpr(        19) <> -4254358535111219850 or
        (-66) ! intExpr(        19) <> -3303384274321653060 or
        (-65) ! intExpr(        19) <> -2556190212272707725 or
        (-64) ! intExpr(        20) <>  8179808679272664720 or
        (-63) ! intExpr(        20) <>  6208770443303347920 or
        (-62) ! intExpr(        20) <>  4694436188839116720 or
        (-61) ! intExpr(        20) <>  3535316142212174320 or
        (-60) ! intExpr(        20) <>  2651487106659130740 or
        (-59) ! intExpr(        21) <> -7449416156804224460 or
        (-58) ! intExpr(        21) <> -5469191608792974920 or
        (-57) ! intExpr(        21) <> -3996716944887173980 or
        (-56) ! intExpr(        21) <> -2906703232645217440 or
        (-55) ! intExpr(        22) <>  7266758081613043600 or
        (-54) ! intExpr(        22) <>  5163222847461899400 or
        (-53) ! intExpr(        22) <>  3648677478873075576 or
        (-52) ! intExpr(        23) <> -8249183865278257824 or
        (-51) ! intExpr(        23) <> -5685248339583664176 or
        (-50) ! intExpr(        23) <> -3894005712043605600 or
        (-49) ! intExpr(        24) <>  7950261662089028100 or
        (-48) ! intExpr(        24) <>  5300174441392685400 or
        (-47) ! intExpr(        24) <>  3508566179513467800 or
        (-46) ! intExpr(        25) <> -6455761770304780752 or
        (-45) ! intExpr(        25) <> -4150132566624501912 or
        (-44) ! intExpr(        26) <>  7023301266595310928 or
        (-43) ! intExpr(        26) <>  4376839919762295216 or
        (-42) ! intExpr(        27) <> -6808417652963570336 or
        (-41) ! intExpr(        27) <> -4105075349580976232 or
        (-40) ! intExpr(        28) <>  5864393356544251760 or
        (-39) ! intExpr(        29) <> -7886597962249166160 or
        (-38) ! intExpr(        29) <> -4472995859186094240 or
        (-37) ! intExpr(        30) <>  5516694892996182896 or
        (-36) ! intExpr(        31) <> -6406484391866534976 or
        (-35) ! intExpr(        32) <>  7007092303604022630 or
        (-34) ! intExpr(        33) <> -7219428434016265740 or
        (-33) ! intExpr(        34) <>  7007092303604022630 or
        (-32) ! intExpr(        35) <> -6406484391866534976 or
        (-31) ! intExpr(        36) <>  5516694892996182896 or
        (-30) ! intExpr(        38) <>  7886597962249166160 or
        (-29) ! intExpr(        39) <> -5864393356544251760 or
        (-28) ! intExpr(        41) <> -6808417652963570336 or
        (-27) ! intExpr(        43) <> -7023301266595310928 or
        (-26) ! intExpr(        45) <> -6455761770304780752 or
        (-25) ! intExpr(        48) <>  7950261662089028100 or
        (-24) ! intExpr(        51) <> -8249183865278257824 or
        (-23) ! intExpr(        54) <>  7266758081613043600 or
        (-22) ! intExpr(        58) <>  7449416156804224460 or
        (-21) ! intExpr(        63) <> -8179808679272664720 or
        (-20) ! intExpr(        69) <> -8910491434304783400 or
        (-19) ! intExpr(        76) <>  9007607943130625829 or
        (-18) ! intExpr(        84) <>  7995995501984016450 or
        (-17) ! intExpr(        95) <> -8156833787798824590 or
        (-16) ! intExpr(       110) <>  9064807833193439800 or
        (-15) ! intExpr(       129) <> -8887821571512103935 or
        (-14) ! intExpr(       156) <>  9176358300744339432 or
        (-13) ! intExpr(       194) <>  8795548359217331075 or
        (-12) ! intExpr(       254) <>  9187507719876570240 or
        (-11) ! intExpr(       351) <> -9134638038697149616 or
        (-10) ! intExpr(       525) <> -9092292741062601356 or
        ( -9) ! intExpr(       879) <> -9207044098280898870 or
        ( -8) ! intExpr(      1726) <>  9202167919706100768 or
        ( -7) ! intExpr(      4331) <> -9210884681005865704 or
        ( -6) ! intExpr(     16170) <>  9220865312154653235 or
        ( -5) ! intExpr(    121973) <> -9223148185681446450 or
        ( -4) ! intExpr(   3810776) <>  9223371416043870029 or
        ( -3) ! intExpr(4294967294) <>  9223372034707292160 or
        intExpr(-99) ! intExpr(        15) <> -1809960172844903640 or
        intExpr(-98) ! intExpr(        15) <> -1569699972909739440 or
        intExpr(-97) ! intExpr(        15) <> -1359472297966470765 or
        intExpr(-96) ! intExpr(        16) <>  8156833787798824590 or
        intExpr(-95) ! intExpr(        16) <>  6981073962530525550 or
        intExpr(-94) ! intExpr(        16) <>  5965645022526085470 or
        intExpr(-93) ! intExpr(        16) <>  5089954010045192190 or
        intExpr(-92) ! intExpr(        16) <>  4335886749297756310 or
        intExpr(-91) ! intExpr(        16) <>  3687529852206503030 or
        intExpr(-90) ! intExpr(        16) <>  3130921572628162950 or
        intExpr(-89) ! intExpr(        16) <>  2653828761561014310 or
        intExpr(-88) ! intExpr(        16) <>  2245547413628550570 or
        intExpr(-87) ! intExpr(        16) <>  1896724514424115530 or
        intExpr(-86) ! intExpr(        16) <>  1599199100396803290 or
        intExpr(-85) ! intExpr(        17) <> -7995995501984016450 or
        intExpr(-84) ! intExpr(        17) <> -6650134872937201800 or
        intExpr(-83) ! intExpr(        17) <> -5519611944537877494 or
        intExpr(-82) ! intExpr(        17) <> -4571799792445514692 or
        intExpr(-81) ! intExpr(        17) <> -3778732481511088674 or
        intExpr(-80) ! intExpr(        17) <> -3116480397122547360 or
        intExpr(-79) ! intExpr(        17) <> -2564603660132096265 or
        intExpr(-78) ! intExpr(        17) <> -2105674584108457986 or
        intExpr(-77) ! intExpr(        18) <>  9007607943130625829 or
        intExpr(-76) ! intExpr(        18) <>  7282746847637527266 or
        intExpr(-75) ! intExpr(        18) <>  5873182941643167150 or
        intExpr(-74) ! intExpr(        18) <>  4724081931321677925 or
        intExpr(-73) ! intExpr(        18) <>  3789648142708598775 or
        intExpr(-72) ! intExpr(        18) <>  3031718514166879020 or
        intExpr(-71) ! intExpr(        18) <>  2418561960739869780 or
        intExpr(-70) ! intExpr(        19) <> -8910491434304783400 or
        intExpr(-69) ! intExpr(        19) <> -6986635329170796075 or
        intExpr(-68) ! intExpr(        19) <> -5460818418202461300 or
        intExpr(-67) ! intExpr(        19) <> -4254358535111219850 or
        intExpr(-66) ! intExpr(        19) <> -3303384274321653060 or
        intExpr(-65) ! intExpr(        19) <> -2556190212272707725 or
        intExpr(-64) ! intExpr(        20) <>  8179808679272664720 or
        intExpr(-63) ! intExpr(        20) <>  6208770443303347920 or
        intExpr(-62) ! intExpr(        20) <>  4694436188839116720 or
        intExpr(-61) ! intExpr(        20) <>  3535316142212174320 or
        intExpr(-60) ! intExpr(        20) <>  2651487106659130740 or
        intExpr(-59) ! intExpr(        21) <> -7449416156804224460 or
        intExpr(-58) ! intExpr(        21) <> -5469191608792974920 or
        intExpr(-57) ! intExpr(        21) <> -3996716944887173980 or
        intExpr(-56) ! intExpr(        21) <> -2906703232645217440 or
        intExpr(-55) ! intExpr(        22) <>  7266758081613043600 or
        intExpr(-54) ! intExpr(        22) <>  5163222847461899400 or
        intExpr(-53) ! intExpr(        22) <>  3648677478873075576 or
        intExpr(-52) ! intExpr(        23) <> -8249183865278257824 or
        intExpr(-51) ! intExpr(        23) <> -5685248339583664176 or
        intExpr(-50) ! intExpr(        23) <> -3894005712043605600 or
        intExpr(-49) ! intExpr(        24) <>  7950261662089028100 or
        intExpr(-48) ! intExpr(        24) <>  5300174441392685400 or
        intExpr(-47) ! intExpr(        24) <>  3508566179513467800 or
        intExpr(-46) ! intExpr(        25) <> -6455761770304780752 or
        intExpr(-45) ! intExpr(        25) <> -4150132566624501912 or
        intExpr(-44) ! intExpr(        26) <>  7023301266595310928 or
        intExpr(-43) ! intExpr(        26) <>  4376839919762295216 or
        intExpr(-42) ! intExpr(        27) <> -6808417652963570336 or
        intExpr(-41) ! intExpr(        27) <> -4105075349580976232 or
        intExpr(-40) ! intExpr(        28) <>  5864393356544251760 or
        intExpr(-39) ! intExpr(        29) <> -7886597962249166160 or
        intExpr(-38) ! intExpr(        29) <> -4472995859186094240 or
        intExpr(-37) ! intExpr(        30) <>  5516694892996182896 or
        intExpr(-36) ! intExpr(        31) <> -6406484391866534976 or
        intExpr(-35) ! intExpr(        32) <>  7007092303604022630 or
        intExpr(-34) ! intExpr(        33) <> -7219428434016265740 or
        intExpr(-33) ! intExpr(        34) <>  7007092303604022630 or
        intExpr(-32) ! intExpr(        35) <> -6406484391866534976 or
        intExpr(-31) ! intExpr(        36) <>  5516694892996182896 or
        intExpr(-30) ! intExpr(        38) <>  7886597962249166160 or
        intExpr(-29) ! intExpr(        39) <> -5864393356544251760 or
        intExpr(-28) ! intExpr(        41) <> -6808417652963570336 or
        intExpr(-27) ! intExpr(        43) <> -7023301266595310928 or
        intExpr(-26) ! intExpr(        45) <> -6455761770304780752 or
        intExpr(-25) ! intExpr(        48) <>  7950261662089028100 or
        intExpr(-24) ! intExpr(        51) <> -8249183865278257824 or
        intExpr(-23) ! intExpr(        54) <>  7266758081613043600 or
        intExpr(-22) ! intExpr(        58) <>  7449416156804224460 or
        intExpr(-21) ! intExpr(        63) <> -8179808679272664720 or
        intExpr(-20) ! intExpr(        69) <> -8910491434304783400 or
        intExpr(-19) ! intExpr(        76) <>  9007607943130625829 or
        intExpr(-18) ! intExpr(        84) <>  7995995501984016450 or
        intExpr(-17) ! intExpr(        95) <> -8156833787798824590 or
        intExpr(-16) ! intExpr(       110) <>  9064807833193439800 or
        intExpr(-15) ! intExpr(       129) <> -8887821571512103935 or
        intExpr(-14) ! intExpr(       156) <>  9176358300744339432 or
        intExpr(-13) ! intExpr(       194) <>  8795548359217331075 or
        intExpr(-12) ! intExpr(       254) <>  9187507719876570240 or
        intExpr(-11) ! intExpr(       351) <> -9134638038697149616 or
        intExpr(-10) ! intExpr(       525) <> -9092292741062601356 or
        intExpr( -9) ! intExpr(       879) <> -9207044098280898870 or
        intExpr( -8) ! intExpr(      1726) <>  9202167919706100768 or
        intExpr( -7) ! intExpr(      4331) <> -9210884681005865704 or
        intExpr( -6) ! intExpr(     16170) <>  9220865312154653235 or
        intExpr( -5) ! intExpr(    121973) <> -9223148185681446450 or
        intExpr( -4) ! intExpr(   3810776) <>  9223371416043870029 or
        intExpr( -3) ! intExpr(4294967294) <>  9223372034707292160 then
      writeln(" ***** Binomial coefficient with negative n not correct for big values.");
      okay := FALSE;
    end if;

    if 4294967296 !  2 <> 9223372034707292160 or
          3810779 !  3 <> 9223371416043870029 or
           121977 !  4 <> 9223148185681446450 or
            16175 !  5 <> 9220865312154653235 or
             4337 !  6 <> 9210884681005865704 or
             1733 !  7 <> 9202167919706100768 or
              887 !  8 <> 9207044098280898870 or
              534 !  9 <> 9092292741062601356 or
              361 ! 10 <> 9134638038697149616 or
              265 ! 11 <> 9187507719876570240 or
              206 ! 12 <> 8795548359217331075 or
              169 ! 13 <> 9176358300744339432 or
              143 ! 14 <> 8887821571512103935 or
              125 ! 15 <> 9064807833193439800 or
              111 ! 16 <> 8156833787798824590 or
              101 ! 17 <> 7995995501984016450 or
               94 ! 18 <> 9007607943130625829 or
               88 ! 19 <> 8910491434304783400 or
               83 ! 20 <> 8179808679272664720 or
               79 ! 21 <> 7449416156804224460 or
               76 ! 22 <> 7266758081613043600 or
               74 ! 23 <> 8249183865278257824 or
               72 ! 24 <> 7950261662089028100 or
               70 ! 25 <> 6455761770304780752 or
               69 ! 26 <> 7023301266595310928 or
               68 ! 27 <> 6808417652963570336 or
               67 ! 28 <> 5864393356544251760 or
               67 ! 29 <> 7886597962249166160 or
               66 ! 30 <> 5516694892996182896 or
               66 ! 31 <> 6406484391866534976 or
               66 ! 32 <> 7007092303604022630 or
               66 ! 33 <> 7219428434016265740 or
               66 ! 34 <> 7007092303604022630 or
               66 ! 35 <> 6406484391866534976 or
               66 ! 36 <> 5516694892996182896 or
               66 ! 37 <> 4472995859186094240 or
               67 ! 38 <> 7886597962249166160 or
               67 ! 39 <> 5864393356544251760 or
               67 ! 40 <> 4105075349580976232 or
               68 ! 41 <> 6808417652963570336 or
               68 ! 42 <> 4376839919762295216 or
               69 ! 43 <> 7023301266595310928 or
               69 ! 44 <> 4150132566624501912 or
               70 ! 45 <> 6455761770304780752 or
               70 ! 46 <> 3508566179513467800 or
               71 ! 47 <> 5300174441392685400 or
               72 ! 48 <> 7950261662089028100 or
               72 ! 49 <> 3894005712043605600 or
               73 ! 50 <> 5685248339583664176 or
               74 ! 51 <> 8249183865278257824 or
               74 ! 52 <> 3648677478873075576 or
               75 ! 53 <> 5163222847461899400 or
               76 ! 54 <> 7266758081613043600 or
               76 ! 55 <> 2906703232645217440 or
               77 ! 56 <> 3996716944887173980 or
               78 ! 57 <> 5469191608792974920 or
               79 ! 58 <> 7449416156804224460 or
               79 ! 59 <> 2651487106659130740 or
               80 ! 60 <> 3535316142212174320 or
               81 ! 61 <> 4694436188839116720 or
               82 ! 62 <> 6208770443303347920 or
               83 ! 63 <> 8179808679272664720 or
               83 ! 64 <> 2556190212272707725 or
               84 ! 65 <> 3303384274321653060 or
               85 ! 66 <> 4254358535111219850 or
               86 ! 67 <> 5460818418202461300 or
               87 ! 68 <> 6986635329170796075 or
               88 ! 69 <> 8910491434304783400 or
               88 ! 70 <> 2418561960739869780 or
               89 ! 71 <> 3031718514166879020 or
               90 ! 72 <> 3789648142708598775 or
               91 ! 73 <> 4724081931321677925 or
               92 ! 74 <> 5873182941643167150 or
               93 ! 75 <> 7282746847637527266 or
               94 ! 76 <> 9007607943130625829 or
               94 ! 77 <> 2105674584108457986 or
               95 ! 78 <> 2564603660132096265 or
               96 ! 79 <> 3116480397122547360 or
               97 ! 80 <> 3778732481511088674 or
               98 ! 81 <> 4571799792445514692 or
               99 ! 82 <> 5519611944537877494 or
              100 ! 83 <> 6650134872937201800 or
              101 ! 84 <> 7995995501984016450 or
              101 ! 85 <> 1599199100396803290 or
              102 ! 86 <> 1896724514424115530 or
              103 ! 87 <> 2245547413628550570 or
              104 ! 88 <> 2653828761561014310 or
              105 ! 89 <> 3130921572628162950 or
              106 ! 90 <> 3687529852206503030 or
              107 ! 91 <> 4335886749297756310 or
              108 ! 92 <> 5089954010045192190 or
              109 ! 93 <> 5965645022526085470 or
              110 ! 94 <> 6981073962530525550 or
              111 ! 95 <> 8156833787798824590 or
              111 ! 96 <> 1359472297966470765 or
              112 ! 97 <> 1569699972909739440 or
              113 ! 98 <> 1809960172844903640 or
              114 ! 99 <> 2084196562669889040 or
        intExpr(4294967296) !  2 <> 9223372034707292160 or
        intExpr(   3810779) !  3 <> 9223371416043870029 or
        intExpr(    121977) !  4 <> 9223148185681446450 or
        intExpr(     16175) !  5 <> 9220865312154653235 or
        intExpr(      4337) !  6 <> 9210884681005865704 or
        intExpr(      1733) !  7 <> 9202167919706100768 or
        intExpr(       887) !  8 <> 9207044098280898870 or
        intExpr(       534) !  9 <> 9092292741062601356 or
        intExpr(       361) ! 10 <> 9134638038697149616 or
        intExpr(       265) ! 11 <> 9187507719876570240 or
        intExpr(       206) ! 12 <> 8795548359217331075 or
        intExpr(       169) ! 13 <> 9176358300744339432 or
        intExpr(       143) ! 14 <> 8887821571512103935 or
        intExpr(       125) ! 15 <> 9064807833193439800 or
        intExpr(       111) ! 16 <> 8156833787798824590 or
        intExpr(       101) ! 17 <> 7995995501984016450 or
        intExpr(        94) ! 18 <> 9007607943130625829 or
        intExpr(        88) ! 19 <> 8910491434304783400 or
        intExpr(        83) ! 20 <> 8179808679272664720 or
        intExpr(        79) ! 21 <> 7449416156804224460 or
        intExpr(        76) ! 22 <> 7266758081613043600 or
        intExpr(        74) ! 23 <> 8249183865278257824 or
        intExpr(        72) ! 24 <> 7950261662089028100 or
        intExpr(        70) ! 25 <> 6455761770304780752 or
        intExpr(        69) ! 26 <> 7023301266595310928 or
        intExpr(        68) ! 27 <> 6808417652963570336 or
        intExpr(        67) ! 28 <> 5864393356544251760 or
        intExpr(        67) ! 29 <> 7886597962249166160 or
        intExpr(        66) ! 30 <> 5516694892996182896 or
        intExpr(        66) ! 31 <> 6406484391866534976 or
        intExpr(        66) ! 32 <> 7007092303604022630 or
        intExpr(        66) ! 33 <> 7219428434016265740 or
        intExpr(        66) ! 34 <> 7007092303604022630 or
        intExpr(        66) ! 35 <> 6406484391866534976 or
        intExpr(        66) ! 36 <> 5516694892996182896 or
        intExpr(        66) ! 37 <> 4472995859186094240 or
        intExpr(        67) ! 38 <> 7886597962249166160 or
        intExpr(        67) ! 39 <> 5864393356544251760 or
        intExpr(        67) ! 40 <> 4105075349580976232 or
        intExpr(        68) ! 41 <> 6808417652963570336 or
        intExpr(        68) ! 42 <> 4376839919762295216 or
        intExpr(        69) ! 43 <> 7023301266595310928 or
        intExpr(        69) ! 44 <> 4150132566624501912 or
        intExpr(        70) ! 45 <> 6455761770304780752 or
        intExpr(        70) ! 46 <> 3508566179513467800 or
        intExpr(        71) ! 47 <> 5300174441392685400 or
        intExpr(        72) ! 48 <> 7950261662089028100 or
        intExpr(        72) ! 49 <> 3894005712043605600 or
        intExpr(        73) ! 50 <> 5685248339583664176 or
        intExpr(        74) ! 51 <> 8249183865278257824 or
        intExpr(        74) ! 52 <> 3648677478873075576 or
        intExpr(        75) ! 53 <> 5163222847461899400 or
        intExpr(        76) ! 54 <> 7266758081613043600 or
        intExpr(        76) ! 55 <> 2906703232645217440 or
        intExpr(        77) ! 56 <> 3996716944887173980 or
        intExpr(        78) ! 57 <> 5469191608792974920 or
        intExpr(        79) ! 58 <> 7449416156804224460 or
        intExpr(        79) ! 59 <> 2651487106659130740 or
        intExpr(        80) ! 60 <> 3535316142212174320 or
        intExpr(        81) ! 61 <> 4694436188839116720 or
        intExpr(        82) ! 62 <> 6208770443303347920 or
        intExpr(        83) ! 63 <> 8179808679272664720 or
        intExpr(        83) ! 64 <> 2556190212272707725 or
        intExpr(        84) ! 65 <> 3303384274321653060 or
        intExpr(        85) ! 66 <> 4254358535111219850 or
        intExpr(        86) ! 67 <> 5460818418202461300 or
        intExpr(        87) ! 68 <> 6986635329170796075 or
        intExpr(        88) ! 69 <> 8910491434304783400 or
        intExpr(        88) ! 70 <> 2418561960739869780 or
        intExpr(        89) ! 71 <> 3031718514166879020 or
        intExpr(        90) ! 72 <> 3789648142708598775 or
        intExpr(        91) ! 73 <> 4724081931321677925 or
        intExpr(        92) ! 74 <> 5873182941643167150 or
        intExpr(        93) ! 75 <> 7282746847637527266 or
        intExpr(        94) ! 76 <> 9007607943130625829 or
        intExpr(        94) ! 77 <> 2105674584108457986 or
        intExpr(        95) ! 78 <> 2564603660132096265 or
        intExpr(        96) ! 79 <> 3116480397122547360 or
        intExpr(        97) ! 80 <> 3778732481511088674 or
        intExpr(        98) ! 81 <> 4571799792445514692 or
        intExpr(        99) ! 82 <> 5519611944537877494 or
        intExpr(       100) ! 83 <> 6650134872937201800 or
        intExpr(       101) ! 84 <> 7995995501984016450 or
        intExpr(       101) ! 85 <> 1599199100396803290 or
        intExpr(       102) ! 86 <> 1896724514424115530 or
        intExpr(       103) ! 87 <> 2245547413628550570 or
        intExpr(       104) ! 88 <> 2653828761561014310 or
        intExpr(       105) ! 89 <> 3130921572628162950 or
        intExpr(       106) ! 90 <> 3687529852206503030 or
        intExpr(       107) ! 91 <> 4335886749297756310 or
        intExpr(       108) ! 92 <> 5089954010045192190 or
        intExpr(       109) ! 93 <> 5965645022526085470 or
        intExpr(       110) ! 94 <> 6981073962530525550 or
        intExpr(       111) ! 95 <> 8156833787798824590 or
        intExpr(       111) ! 96 <> 1359472297966470765 or
        intExpr(       112) ! 97 <> 1569699972909739440 or
        intExpr(       113) ! 98 <> 1809960172844903640 or
        intExpr(       114) ! 99 <> 2084196562669889040 or
        4294967296 ! intExpr( 2) <> 9223372034707292160 or
           3810779 ! intExpr( 3) <> 9223371416043870029 or
            121977 ! intExpr( 4) <> 9223148185681446450 or
             16175 ! intExpr( 5) <> 9220865312154653235 or
              4337 ! intExpr( 6) <> 9210884681005865704 or
              1733 ! intExpr( 7) <> 9202167919706100768 or
               887 ! intExpr( 8) <> 9207044098280898870 or
               534 ! intExpr( 9) <> 9092292741062601356 or
               361 ! intExpr(10) <> 9134638038697149616 or
               265 ! intExpr(11) <> 9187507719876570240 or
               206 ! intExpr(12) <> 8795548359217331075 or
               169 ! intExpr(13) <> 9176358300744339432 or
               143 ! intExpr(14) <> 8887821571512103935 or
               125 ! intExpr(15) <> 9064807833193439800 or
               111 ! intExpr(16) <> 8156833787798824590 or
               101 ! intExpr(17) <> 7995995501984016450 or
                94 ! intExpr(18) <> 9007607943130625829 or
                88 ! intExpr(19) <> 8910491434304783400 or
                83 ! intExpr(20) <> 8179808679272664720 or
                79 ! intExpr(21) <> 7449416156804224460 or
                76 ! intExpr(22) <> 7266758081613043600 or
                74 ! intExpr(23) <> 8249183865278257824 or
                72 ! intExpr(24) <> 7950261662089028100 or
                70 ! intExpr(25) <> 6455761770304780752 or
                69 ! intExpr(26) <> 7023301266595310928 or
                68 ! intExpr(27) <> 6808417652963570336 or
                67 ! intExpr(28) <> 5864393356544251760 or
                67 ! intExpr(29) <> 7886597962249166160 or
                66 ! intExpr(30) <> 5516694892996182896 or
                66 ! intExpr(31) <> 6406484391866534976 or
                66 ! intExpr(32) <> 7007092303604022630 or
                66 ! intExpr(33) <> 7219428434016265740 or
                66 ! intExpr(34) <> 7007092303604022630 or
                66 ! intExpr(35) <> 6406484391866534976 or
                66 ! intExpr(36) <> 5516694892996182896 or
                66 ! intExpr(37) <> 4472995859186094240 or
                67 ! intExpr(38) <> 7886597962249166160 or
                67 ! intExpr(39) <> 5864393356544251760 or
                67 ! intExpr(40) <> 4105075349580976232 or
                68 ! intExpr(41) <> 6808417652963570336 or
                68 ! intExpr(42) <> 4376839919762295216 or
                69 ! intExpr(43) <> 7023301266595310928 or
                69 ! intExpr(44) <> 4150132566624501912 or
                70 ! intExpr(45) <> 6455761770304780752 or
                70 ! intExpr(46) <> 3508566179513467800 or
                71 ! intExpr(47) <> 5300174441392685400 or
                72 ! intExpr(48) <> 7950261662089028100 or
                72 ! intExpr(49) <> 3894005712043605600 or
                73 ! intExpr(50) <> 5685248339583664176 or
                74 ! intExpr(51) <> 8249183865278257824 or
                74 ! intExpr(52) <> 3648677478873075576 or
                75 ! intExpr(53) <> 5163222847461899400 or
                76 ! intExpr(54) <> 7266758081613043600 or
                76 ! intExpr(55) <> 2906703232645217440 or
                77 ! intExpr(56) <> 3996716944887173980 or
                78 ! intExpr(57) <> 5469191608792974920 or
                79 ! intExpr(58) <> 7449416156804224460 or
                79 ! intExpr(59) <> 2651487106659130740 or
                80 ! intExpr(60) <> 3535316142212174320 or
                81 ! intExpr(61) <> 4694436188839116720 or
                82 ! intExpr(62) <> 6208770443303347920 or
                83 ! intExpr(63) <> 8179808679272664720 or
                83 ! intExpr(64) <> 2556190212272707725 or
                84 ! intExpr(65) <> 3303384274321653060 or
                85 ! intExpr(66) <> 4254358535111219850 or
                86 ! intExpr(67) <> 5460818418202461300 or
                87 ! intExpr(68) <> 6986635329170796075 or
                88 ! intExpr(69) <> 8910491434304783400 or
                88 ! intExpr(70) <> 2418561960739869780 or
                89 ! intExpr(71) <> 3031718514166879020 or
                90 ! intExpr(72) <> 3789648142708598775 or
                91 ! intExpr(73) <> 4724081931321677925 or
                92 ! intExpr(74) <> 5873182941643167150 or
                93 ! intExpr(75) <> 7282746847637527266 or
                94 ! intExpr(76) <> 9007607943130625829 or
                94 ! intExpr(77) <> 2105674584108457986 or
                95 ! intExpr(78) <> 2564603660132096265 or
                96 ! intExpr(79) <> 3116480397122547360 or
                97 ! intExpr(80) <> 3778732481511088674 or
                98 ! intExpr(81) <> 4571799792445514692 or
                99 ! intExpr(82) <> 5519611944537877494 or
               100 ! intExpr(83) <> 6650134872937201800 or
               101 ! intExpr(84) <> 7995995501984016450 or
               101 ! intExpr(85) <> 1599199100396803290 or
               102 ! intExpr(86) <> 1896724514424115530 or
               103 ! intExpr(87) <> 2245547413628550570 or
               104 ! intExpr(88) <> 2653828761561014310 or
               105 ! intExpr(89) <> 3130921572628162950 or
               106 ! intExpr(90) <> 3687529852206503030 or
               107 ! intExpr(91) <> 4335886749297756310 or
               108 ! intExpr(92) <> 5089954010045192190 or
               109 ! intExpr(93) <> 5965645022526085470 or
               110 ! intExpr(94) <> 6981073962530525550 or
               111 ! intExpr(95) <> 8156833787798824590 or
               111 ! intExpr(96) <> 1359472297966470765 or
               112 ! intExpr(97) <> 1569699972909739440 or
               113 ! intExpr(98) <> 1809960172844903640 or
               114 ! intExpr(99) <> 2084196562669889040 or
        intExpr(4294967296) ! intExpr( 2) <> 9223372034707292160 or
        intExpr(   3810779) ! intExpr( 3) <> 9223371416043870029 or
        intExpr(    121977) ! intExpr( 4) <> 9223148185681446450 or
        intExpr(     16175) ! intExpr( 5) <> 9220865312154653235 or
        intExpr(      4337) ! intExpr( 6) <> 9210884681005865704 or
        intExpr(      1733) ! intExpr( 7) <> 9202167919706100768 or
        intExpr(       887) ! intExpr( 8) <> 9207044098280898870 or
        intExpr(       534) ! intExpr( 9) <> 9092292741062601356 or
        intExpr(       361) ! intExpr(10) <> 9134638038697149616 or
        intExpr(       265) ! intExpr(11) <> 9187507719876570240 or
        intExpr(       206) ! intExpr(12) <> 8795548359217331075 or
        intExpr(       169) ! intExpr(13) <> 9176358300744339432 or
        intExpr(       143) ! intExpr(14) <> 8887821571512103935 or
        intExpr(       125) ! intExpr(15) <> 9064807833193439800 or
        intExpr(       111) ! intExpr(16) <> 8156833787798824590 or
        intExpr(       101) ! intExpr(17) <> 7995995501984016450 or
        intExpr(        94) ! intExpr(18) <> 9007607943130625829 or
        intExpr(        88) ! intExpr(19) <> 8910491434304783400 or
        intExpr(        83) ! intExpr(20) <> 8179808679272664720 or
        intExpr(        79) ! intExpr(21) <> 7449416156804224460 or
        intExpr(        76) ! intExpr(22) <> 7266758081613043600 or
        intExpr(        74) ! intExpr(23) <> 8249183865278257824 or
        intExpr(        72) ! intExpr(24) <> 7950261662089028100 or
        intExpr(        70) ! intExpr(25) <> 6455761770304780752 or
        intExpr(        69) ! intExpr(26) <> 7023301266595310928 or
        intExpr(        68) ! intExpr(27) <> 6808417652963570336 or
        intExpr(        67) ! intExpr(28) <> 5864393356544251760 or
        intExpr(        67) ! intExpr(29) <> 7886597962249166160 or
        intExpr(        66) ! intExpr(30) <> 5516694892996182896 or
        intExpr(        66) ! intExpr(31) <> 6406484391866534976 or
        intExpr(        66) ! intExpr(32) <> 7007092303604022630 or
        intExpr(        66) ! intExpr(33) <> 7219428434016265740 or
        intExpr(        66) ! intExpr(34) <> 7007092303604022630 or
        intExpr(        66) ! intExpr(35) <> 6406484391866534976 or
        intExpr(        66) ! intExpr(36) <> 5516694892996182896 or
        intExpr(        66) ! intExpr(37) <> 4472995859186094240 or
        intExpr(        67) ! intExpr(38) <> 7886597962249166160 or
        intExpr(        67) ! intExpr(39) <> 5864393356544251760 or
        intExpr(        67) ! intExpr(40) <> 4105075349580976232 or
        intExpr(        68) ! intExpr(41) <> 6808417652963570336 or
        intExpr(        68) ! intExpr(42) <> 4376839919762295216 or
        intExpr(        69) ! intExpr(43) <> 7023301266595310928 or
        intExpr(        69) ! intExpr(44) <> 4150132566624501912 or
        intExpr(        70) ! intExpr(45) <> 6455761770304780752 or
        intExpr(        70) ! intExpr(46) <> 3508566179513467800 or
        intExpr(        71) ! intExpr(47) <> 5300174441392685400 or
        intExpr(        72) ! intExpr(48) <> 7950261662089028100 or
        intExpr(        72) ! intExpr(49) <> 3894005712043605600 or
        intExpr(        73) ! intExpr(50) <> 5685248339583664176 or
        intExpr(        74) ! intExpr(51) <> 8249183865278257824 or
        intExpr(        74) ! intExpr(52) <> 3648677478873075576 or
        intExpr(        75) ! intExpr(53) <> 5163222847461899400 or
        intExpr(        76) ! intExpr(54) <> 7266758081613043600 or
        intExpr(        76) ! intExpr(55) <> 2906703232645217440 or
        intExpr(        77) ! intExpr(56) <> 3996716944887173980 or
        intExpr(        78) ! intExpr(57) <> 5469191608792974920 or
        intExpr(        79) ! intExpr(58) <> 7449416156804224460 or
        intExpr(        79) ! intExpr(59) <> 2651487106659130740 or
        intExpr(        80) ! intExpr(60) <> 3535316142212174320 or
        intExpr(        81) ! intExpr(61) <> 4694436188839116720 or
        intExpr(        82) ! intExpr(62) <> 6208770443303347920 or
        intExpr(        83) ! intExpr(63) <> 8179808679272664720 or
        intExpr(        83) ! intExpr(64) <> 2556190212272707725 or
        intExpr(        84) ! intExpr(65) <> 3303384274321653060 or
        intExpr(        85) ! intExpr(66) <> 4254358535111219850 or
        intExpr(        86) ! intExpr(67) <> 5460818418202461300 or
        intExpr(        87) ! intExpr(68) <> 6986635329170796075 or
        intExpr(        88) ! intExpr(69) <> 8910491434304783400 or
        intExpr(        88) ! intExpr(70) <> 2418561960739869780 or
        intExpr(        89) ! intExpr(71) <> 3031718514166879020 or
        intExpr(        90) ! intExpr(72) <> 3789648142708598775 or
        intExpr(        91) ! intExpr(73) <> 4724081931321677925 or
        intExpr(        92) ! intExpr(74) <> 5873182941643167150 or
        intExpr(        93) ! intExpr(75) <> 7282746847637527266 or
        intExpr(        94) ! intExpr(76) <> 9007607943130625829 or
        intExpr(        94) ! intExpr(77) <> 2105674584108457986 or
        intExpr(        95) ! intExpr(78) <> 2564603660132096265 or
        intExpr(        96) ! intExpr(79) <> 3116480397122547360 or
        intExpr(        97) ! intExpr(80) <> 3778732481511088674 or
        intExpr(        98) ! intExpr(81) <> 4571799792445514692 or
        intExpr(        99) ! intExpr(82) <> 5519611944537877494 or
        intExpr(       100) ! intExpr(83) <> 6650134872937201800 or
        intExpr(       101) ! intExpr(84) <> 7995995501984016450 or
        intExpr(       101) ! intExpr(85) <> 1599199100396803290 or
        intExpr(       102) ! intExpr(86) <> 1896724514424115530 or
        intExpr(       103) ! intExpr(87) <> 2245547413628550570 or
        intExpr(       104) ! intExpr(88) <> 2653828761561014310 or
        intExpr(       105) ! intExpr(89) <> 3130921572628162950 or
        intExpr(       106) ! intExpr(90) <> 3687529852206503030 or
        intExpr(       107) ! intExpr(91) <> 4335886749297756310 or
        intExpr(       108) ! intExpr(92) <> 5089954010045192190 or
        intExpr(       109) ! intExpr(93) <> 5965645022526085470 or
        intExpr(       110) ! intExpr(94) <> 6981073962530525550 or
        intExpr(       111) ! intExpr(95) <> 8156833787798824590 or
        intExpr(       111) ! intExpr(96) <> 1359472297966470765 or
        intExpr(       112) ! intExpr(97) <> 1569699972909739440 or
        intExpr(       113) ! intExpr(98) <> 1809960172844903640 or
        intExpr(       114) ! intExpr(99) <> 2084196562669889040 then
      writeln(" ***** Binomial coefficient with positive n not correct for big values.");
      okay := FALSE;
    end if;

    if okay then
      writeln("The binomial coefficient (n ! k) works correct for selected values.");
    end if;
  end func;


const proc: check_power is func
  local
    var boolean: okay is TRUE;
  begin
    if  (-3037000499) **  0 <>                    1 or
        (-3037000499) **  1 <>          -3037000499 or
        (-3037000499) **  2 <>  9223372030926249001 or
        (-2147483648) **  0 <>                    1 or
        (-2147483648) **  1 <>          -2147483648 or
        (-2147483648) **  2 <>  4611686018427387904 or
           (-2097152) **  0 <>                    1 or
           (-2097152) **  1 <>             -2097152 or
           (-2097152) **  2 <>        4398046511104 or
           (-2097152) **  3 <>            INT64_MIN or
           (-2097151) **  0 <>                    1 or
           (-2097151) **  1 <>             -2097151 or
           (-2097151) **  2 <>        4398042316801 or
           (-2097151) **  3 <> -9223358842721533951 or
           (-1234577) **  0 <>                    1 or
           (-1234577) **  1 <>             -1234577 or
           (-1234577) **  2 <>        1524180368929 or
           (-1234577) **  3 <> -1881718027331258033 or
            (-123457) **  0 <>                    1 or
            (-123457) **  1 <>              -123457 or
            (-123457) **  2 <>          15241630849 or
            (-123457) **  3 <>    -1881686019724993 or
             (-55108) **  0 <>                    1 or
             (-55108) **  1 <>               -55108 or
             (-55108) **  2 <>           3036891664 or
             (-55108) **  3 <>     -167357025819712 or
             (-55108) **  4 <>  9222710978872688896 or
             (-32768) **  0 <>                    1 or
             (-32768) **  1 <>               -32768 or
             (-32768) **  2 <>           1073741824 or
             (-32768) **  3 <>      -35184372088832 or
             (-32768) **  4 <>  1152921504606846976 or
             (-32767) **  0 <>                    1 or
             (-32767) **  1 <>               -32767 or
             (-32767) **  2 <>           1073676289 or
             (-32767) **  3 <>      -35181150961663 or
             (-32767) **  4 <>  1152780773560811521 or
              (-6208) **  0 <>                    1 or
              (-6208) **  1 <>                -6208 or
              (-6208) **  2 <>             38539264 or
              (-6208) **  3 <>        -239251750912 or
              (-6208) **  4 <>     1485274869661696 or
              (-6208) **  5 <> -9220586390859808768 or
              (-1448) **  0 <>                    1 or
              (-1448) **  1 <>                -1448 or
              (-1448) **  2 <>              2096704 or
              (-1448) **  3 <>          -3036027392 or
              (-1448) **  4 <>        4396167663616 or
              (-1448) **  5 <>    -6365650776915968 or
              (-1448) **  6 <>  9217462324974321664 or
               (-512) **  0 <>                    1 or
               (-512) **  1 <>                 -512 or
               (-512) **  2 <>               262144 or
               (-512) **  3 <>           -134217728 or
               (-512) **  4 <>          68719476736 or
               (-512) **  5 <>      -35184372088832 or
               (-512) **  6 <>    18014398509481984 or
               (-512) **  7 <>            INT64_MIN or
               (-511) **  0 <>                    1 or
               (-511) **  1 <>                 -511 or
               (-511) **  2 <>               261121 or
               (-511) **  3 <>           -133432831 or
               (-511) **  4 <>          68184176641 or
               (-511) **  5 <>      -34842114263551 or
               (-511) **  6 <>    17804320388674561 or
               (-511) **  7 <> -9098007718612700671 or
                (-97) **  0 <>                    1 or
                (-97) **  1 <>                  -97 or
                (-97) **  2 <>                 9409 or
                (-97) **  3 <>              -912673 or
                (-97) **  4 <>             88529281 or
                (-97) **  8 <>     7837433594376961 or
                (-97) **  9 <>  -760231058654565217 or
                 (-5) **  0 <>                    1 or
                 (-5) **  1 <>                   -5 or
                 (-5) **  2 <>                   25 or
                 (-5) **  3 <>                 -125 or
                 (-5) **  4 <>                  625 or
                 (-5) **  5 <>                -3125 or
                 (-5) **  6 <>                15625 or
                 (-5) **  7 <>               -78125 or
                 (-5) **  8 <>               390625 or
                 (-5) **  9 <>             -1953125 or
                 (-5) ** 10 <>              9765625 or
                 (-5) ** 11 <>            -48828125 or
                 (-5) ** 12 <>            244140625 or
                 (-5) ** 13 <>          -1220703125 or
                 (-5) ** 14 <>           6103515625 or
                 (-5) ** 15 <>         -30517578125 or
                 (-5) ** 16 <>         152587890625 or
                 (-5) ** 17 <>        -762939453125 or
                 (-5) ** 18 <>        3814697265625 or
                 (-5) ** 19 <>      -19073486328125 or
                 (-5) ** 20 <>       95367431640625 or
                 (-5) ** 21 <>     -476837158203125 or
                 (-5) ** 22 <>     2384185791015625 or
                 (-5) ** 23 <>   -11920928955078125 or
                 (-5) ** 24 <>    59604644775390625 or
                 (-5) ** 25 <>  -298023223876953125 or
                 (-5) ** 26 <>  1490116119384765625 or
                 (-5) ** 27 <> -7450580596923828125 or
                 (-4) **  0 <>                    1 or
                 (-4) **  1 <>                   -4 or
                 (-4) **  2 <>                   16 or
                 (-4) **  3 <>                  -64 or
                 (-4) **  4 <>                  256 or
                 (-4) **  5 <>                -1024 or
                 (-4) ** 10 <>              1048576 or
                 (-4) ** 15 <>          -1073741824 or
                 (-4) ** 20 <>        1099511627776 or
                 (-4) ** 25 <>    -1125899906842624 or
                 (-4) ** 30 <>  1152921504606846976 or
                 (-4) ** 31 <> -4611686018427387904 or
                 (-3) **  0 <>                    1 or
                 (-3) **  1 <>                   -3 or
                 (-3) **  2 <>                    9 or
                 (-3) **  3 <>                  -27 or
                 (-3) **  4 <>                   81 or
                 (-3) **  5 <>                 -243 or
                 (-3) ** 10 <>                59049 or
                 (-3) ** 15 <>            -14348907 or
                 (-3) ** 20 <>           3486784401 or
                 (-3) ** 25 <>        -847288609443 or
                 (-3) ** 30 <>      205891132094649 or
                 (-3) ** 35 <>   -50031545098999707 or
                 (-3) ** 39 <> -4052555153018976267 or
                 (-2) **  0 <>                    1 or
                 (-2) **  1 <>                   -2 or
                 (-2) **  2 <>                    4 or
                 (-2) **  3 <>                   -8 or
                 (-2) **  4 <>                   16 or
                 (-2) **  5 <>                  -32 or
                 (-2) ** 10 <>                 1024 or
                 (-2) ** 15 <>               -32768 or
                 (-2) ** 16 <>                65536 or
                 (-2) ** 20 <>              1048576 or
                 (-2) ** 25 <>            -33554432 or
                 (-2) ** 30 <>           1073741824 or
                 (-2) ** 31 <>          -2147483648 or
                 (-2) ** 32 <>           4294967296 or
                 (-2) ** 35 <>         -34359738368 or
                 (-2) ** 40 <>        1099511627776 or
                 (-2) ** 45 <>      -35184372088832 or
                 (-2) ** 50 <>     1125899906842624 or
                 (-2) ** 55 <>   -36028797018963968 or
                 (-2) ** 60 <>  1152921504606846976 or
                 (-2) ** 61 <> -2305843009213693952 or
                 (-2) ** 62 <>  4611686018427387904 or
                 (-2) ** 63 <>            INT64_MIN or
                 (-1) **                   0 <>   1 or
                 (-1) **                   1 <>  -1 or
                 (-1) **                   2 <>   1 or
                 (-1) **                   3 <>  -1 or
                 (-1) **                  99 <>  -1 or
                 (-1) **                 999 <>  -1 or
                 (-1) **           999999999 <>  -1 or
                 (-1) **          2147483647 <>  -1 or
                 (-1) **          2147483648 <>   1 or
                 (-1) ** 9223372036854775806 <>   1 or
                 (-1) ** 9223372036854775807 <>  -1 or
                   0  **                   0 <>   1 or
                   0  **                   1 <>   0 or
                   0  **                   2 <>   0 or
                   0  **                   3 <>   0 or
                   0  **                  99 <>   0 or
                   0  **                 999 <>   0 or
                   0  **           999999999 <>   0 or
                   0  **          2147483647 <>   0 or
                   0  **          2147483648 <>   0 or
                   0  ** 9223372036854775806 <>   0 or
                   0  ** 9223372036854775807 <>   0 or
                   1  **                   0 <>   1 or
                   1  **                   1 <>   1 or
                   1  **                   2 <>   1 or
                   1  **                   3 <>   1 or
                   1  **                  99 <>   1 or
                   1  **                 999 <>   1 or
                   1  **           999999999 <>   1 or
                   1  **          2147483647 <>   1 or
                   1  **          2147483648 <>   1 or
                   1  ** 9223372036854775806 <>   1 or
                   1  ** 9223372036854775807 <>   1 or
                   2  **  0 <>                    1 or
                   2  **  1 <>                    2 or
                   2  **  2 <>                    4 or
                   2  **  3 <>                    8 or
                   2  **  4 <>                   16 or
                   2  **  5 <>                   32 or
                   2  ** 10 <>                 1024 or
                   2  ** 15 <>                32768 or
                   2  ** 16 <>                65536 or
                   2  ** 20 <>              1048576 or
                   2  ** 25 <>             33554432 or
                   2  ** 30 <>           1073741824 or
                   2  ** 31 <>           2147483648 or
                   2  ** 32 <>           4294967296 or
                   2  ** 35 <>          34359738368 or
                   2  ** 40 <>        1099511627776 or
                   2  ** 45 <>       35184372088832 or
                   2  ** 50 <>     1125899906842624 or
                   2  ** 55 <>    36028797018963968 or
                   2  ** 60 <>  1152921504606846976 or
                   2  ** 61 <>  2305843009213693952 or
                   2  ** 62 <>  4611686018427387904 or
                   3  **  0 <>                    1 or
                   3  **  1 <>                    3 or
                   3  **  2 <>                    9 or
                   3  **  3 <>                   27 or
                   3  **  4 <>                   81 or
                   3  **  5 <>                  243 or
                   3  ** 10 <>                59049 or
                   3  ** 15 <>             14348907 or
                   3  ** 20 <>           3486784401 or
                   3  ** 25 <>         847288609443 or
                   3  ** 30 <>      205891132094649 or
                   3  ** 35 <>    50031545098999707 or
                   3  ** 39 <>  4052555153018976267 or
                   4  **  0 <>                    1 or
                   4  **  1 <>                    4 or
                   4  **  2 <>                   16 or
                   4  **  3 <>                   64 or
                   4  **  4 <>                  256 or
                   4  **  5 <>                 1024 or
                   4  ** 10 <>              1048576 or
                   4  ** 15 <>           1073741824 or
                   4  ** 20 <>        1099511627776 or
                   4  ** 25 <>     1125899906842624 or
                   4  ** 30 <>  1152921504606846976 or
                   4  ** 31 <>  4611686018427387904 or
                   5  **  0 <>                    1 or
                   5  **  1 <>                    5 or
                   5  **  2 <>                   25 or
                   5  **  3 <>                  125 or
                   5  **  4 <>                  625 or
                   5  **  5 <>                 3125 or
                   5  **  6 <>                15625 or
                   5  **  7 <>                78125 or
                   5  **  8 <>               390625 or
                   5  **  9 <>              1953125 or
                   5  ** 10 <>              9765625 or
                   5  ** 11 <>             48828125 or
                   5  ** 12 <>            244140625 or
                   5  ** 13 <>           1220703125 or
                   5  ** 14 <>           6103515625 or
                   5  ** 15 <>          30517578125 or
                   5  ** 16 <>         152587890625 or
                   5  ** 17 <>         762939453125 or
                   5  ** 18 <>        3814697265625 or
                   5  ** 19 <>       19073486328125 or
                   5  ** 20 <>       95367431640625 or
                   5  ** 21 <>      476837158203125 or
                   5  ** 22 <>     2384185791015625 or
                   5  ** 23 <>    11920928955078125 or
                   5  ** 24 <>    59604644775390625 or
                   5  ** 25 <>   298023223876953125 or
                   5  ** 26 <>  1490116119384765625 or
                   5  ** 27 <>  7450580596923828125 or
                  97  **  0 <>                    1 or
                  97  **  1 <>                   97 or
                  97  **  2 <>                 9409 or
                  97  **  3 <>               912673 or
                  97  **  4 <>             88529281 or
                  97  **  8 <>     7837433594376961 or
                  97  **  9 <>   760231058654565217 or
                 511  **  0 <>                    1 or
                 511  **  1 <>                  511 or
                 511  **  2 <>               261121 or
                 511  **  3 <>            133432831 or
                 511  **  4 <>          68184176641 or
                 511  **  5 <>       34842114263551 or
                 511  **  6 <>    17804320388674561 or
                 511  **  7 <>  9098007718612700671 or
                 512  **  0 <>                    1 or
                 512  **  1 <>                  512 or
                 512  **  2 <>               262144 or
                 512  **  3 <>            134217728 or
                 512  **  4 <>          68719476736 or
                 512  **  5 <>       35184372088832 or
                 512  **  6 <>    18014398509481984 or
                1448  **  0 <>                    1 or
                1448  **  1 <>                 1448 or
                1448  **  2 <>              2096704 or
                1448  **  3 <>           3036027392 or
                1448  **  4 <>        4396167663616 or
                1448  **  5 <>     6365650776915968 or
                1448  **  6 <>  9217462324974321664 or
                6208  **  0 <>                    1 or
                6208  **  1 <>                 6208 or
                6208  **  2 <>             38539264 or
                6208  **  3 <>         239251750912 or
                6208  **  4 <>     1485274869661696 or
                6208  **  5 <>  9220586390859808768 or
               32767  **  0 <>                    1 or
               32767  **  1 <>                32767 or
               32767  **  2 <>           1073676289 or
               32767  **  3 <>       35181150961663 or
               32767  **  4 <>  1152780773560811521 or
               32768  **  0 <>                    1 or
               32768  **  1 <>                32768 or
               32768  **  2 <>           1073741824 or
               32768  **  3 <>       35184372088832 or
               32768  **  4 <>  1152921504606846976 or
               55108  **  0 <>                    1 or
               55108  **  1 <>                55108 or
               55108  **  2 <>           3036891664 or
               55108  **  3 <>      167357025819712 or
               55108  **  4 <>  9222710978872688896 or
              123457  **  0 <>                    1 or
              123457  **  1 <>               123457 or
              123457  **  2 <>          15241630849 or
              123457  **  3 <>     1881686019724993 or
             1234577  **  0 <>                    1 or
             1234577  **  1 <>              1234577 or
             1234577  **  2 <>        1524180368929 or
             1234577  **  3 <>  1881718027331258033 or
             2097151  **  0 <>                    1 or
             2097151  **  1 <>              2097151 or
             2097151  **  2 <>        4398042316801 or
             2097151  **  3 <>  9223358842721533951 or
             2097152  **  0 <>                    1 or
             2097152  **  1 <>              2097152 or
             2097152  **  2 <>        4398046511104 or
          2147483648  **  0 <>                    1 or
          2147483648  **  1 <>           2147483648 or
          2147483648  **  2 <>  4611686018427387904 or
          3037000499  **  0 <>                    1 or
          3037000499  **  1 <>           3037000499 or
          3037000499  **  2 <>  9223372030926249001 then
      writeln(" ***** Computing power with constants does not work correct.");
      okay := FALSE;
    end if;

    if  intExpr(-3037000499) **  0 <>                    1 or
        intExpr(-3037000499) **  1 <>          -3037000499 or
        intExpr(-3037000499) **  2 <>  9223372030926249001 or
        intExpr(-2147483648) **  0 <>                    1 or
        intExpr(-2147483648) **  1 <>          -2147483648 or
        intExpr(-2147483648) **  2 <>  4611686018427387904 or
        intExpr(   -2097152) **  0 <>                    1 or
        intExpr(   -2097152) **  1 <>             -2097152 or
        intExpr(   -2097152) **  2 <>        4398046511104 or
        intExpr(   -2097152) **  3 <>            INT64_MIN or
        intExpr(   -2097151) **  0 <>                    1 or
        intExpr(   -2097151) **  1 <>             -2097151 or
        intExpr(   -2097151) **  2 <>        4398042316801 or
        intExpr(   -2097151) **  3 <> -9223358842721533951 or
        intExpr(   -1234577) **  0 <>                    1 or
        intExpr(   -1234577) **  1 <>             -1234577 or
        intExpr(   -1234577) **  2 <>        1524180368929 or
        intExpr(   -1234577) **  3 <> -1881718027331258033 or
        intExpr(    -123457) **  0 <>                    1 or
        intExpr(    -123457) **  1 <>              -123457 or
        intExpr(    -123457) **  2 <>          15241630849 or
        intExpr(    -123457) **  3 <>    -1881686019724993 or
        intExpr(     -55108) **  0 <>                    1 or
        intExpr(     -55108) **  1 <>               -55108 or
        intExpr(     -55108) **  2 <>           3036891664 or
        intExpr(     -55108) **  3 <>     -167357025819712 or
        intExpr(     -55108) **  4 <>  9222710978872688896 or
        intExpr(     -32768) **  0 <>                    1 or
        intExpr(     -32768) **  1 <>               -32768 or
        intExpr(     -32768) **  2 <>           1073741824 or
        intExpr(     -32768) **  3 <>      -35184372088832 or
        intExpr(     -32768) **  4 <>  1152921504606846976 or
        intExpr(     -32767) **  0 <>                    1 or
        intExpr(     -32767) **  1 <>               -32767 or
        intExpr(     -32767) **  2 <>           1073676289 or
        intExpr(     -32767) **  3 <>      -35181150961663 or
        intExpr(     -32767) **  4 <>  1152780773560811521 or
        intExpr(      -6208) **  0 <>                    1 or
        intExpr(      -6208) **  1 <>                -6208 or
        intExpr(      -6208) **  2 <>             38539264 or
        intExpr(      -6208) **  3 <>        -239251750912 or
        intExpr(      -6208) **  4 <>     1485274869661696 or
        intExpr(      -6208) **  5 <> -9220586390859808768 or
        intExpr(      -1448) **  0 <>                    1 or
        intExpr(      -1448) **  1 <>                -1448 or
        intExpr(      -1448) **  2 <>              2096704 or
        intExpr(      -1448) **  3 <>          -3036027392 or
        intExpr(      -1448) **  4 <>        4396167663616 or
        intExpr(      -1448) **  5 <>    -6365650776915968 or
        intExpr(      -1448) **  6 <>  9217462324974321664 or
        intExpr(       -512) **  0 <>                    1 or
        intExpr(       -512) **  1 <>                 -512 or
        intExpr(       -512) **  2 <>               262144 or
        intExpr(       -512) **  3 <>           -134217728 or
        intExpr(       -512) **  4 <>          68719476736 or
        intExpr(       -512) **  5 <>      -35184372088832 or
        intExpr(       -512) **  6 <>    18014398509481984 or
        intExpr(       -512) **  7 <>            INT64_MIN or
        intExpr(       -511) **  0 <>                    1 or
        intExpr(       -511) **  1 <>                 -511 or
        intExpr(       -511) **  2 <>               261121 or
        intExpr(       -511) **  3 <>           -133432831 or
        intExpr(       -511) **  4 <>          68184176641 or
        intExpr(       -511) **  5 <>      -34842114263551 or
        intExpr(       -511) **  6 <>    17804320388674561 or
        intExpr(       -511) **  7 <> -9098007718612700671 or
        intExpr(        -97) **  0 <>                    1 or
        intExpr(        -97) **  1 <>                  -97 or
        intExpr(        -97) **  2 <>                 9409 or
        intExpr(        -97) **  3 <>              -912673 or
        intExpr(        -97) **  4 <>             88529281 or
        intExpr(        -97) **  8 <>     7837433594376961 or
        intExpr(        -97) **  9 <>  -760231058654565217 or
        intExpr(         -5) **  0 <>                    1 or
        intExpr(         -5) **  1 <>                   -5 or
        intExpr(         -5) **  2 <>                   25 or
        intExpr(         -5) **  3 <>                 -125 or
        intExpr(         -5) **  4 <>                  625 or
        intExpr(         -5) **  5 <>                -3125 or
        intExpr(         -5) **  6 <>                15625 or
        intExpr(         -5) **  7 <>               -78125 or
        intExpr(         -5) **  8 <>               390625 or
        intExpr(         -5) **  9 <>             -1953125 or
        intExpr(         -5) ** 10 <>              9765625 or
        intExpr(         -5) ** 11 <>            -48828125 or
        intExpr(         -5) ** 12 <>            244140625 or
        intExpr(         -5) ** 13 <>          -1220703125 or
        intExpr(         -5) ** 14 <>           6103515625 or
        intExpr(         -5) ** 15 <>         -30517578125 or
        intExpr(         -5) ** 16 <>         152587890625 or
        intExpr(         -5) ** 17 <>        -762939453125 or
        intExpr(         -5) ** 18 <>        3814697265625 or
        intExpr(         -5) ** 19 <>      -19073486328125 or
        intExpr(         -5) ** 20 <>       95367431640625 or
        intExpr(         -5) ** 21 <>     -476837158203125 or
        intExpr(         -5) ** 22 <>     2384185791015625 or
        intExpr(         -5) ** 23 <>   -11920928955078125 or
        intExpr(         -5) ** 24 <>    59604644775390625 or
        intExpr(         -5) ** 25 <>  -298023223876953125 or
        intExpr(         -5) ** 26 <>  1490116119384765625 or
        intExpr(         -5) ** 27 <> -7450580596923828125 or
        intExpr(         -4) **  0 <>                    1 or
        intExpr(         -4) **  1 <>                   -4 or
        intExpr(         -4) **  2 <>                   16 or
        intExpr(         -4) **  3 <>                  -64 or
        intExpr(         -4) **  4 <>                  256 or
        intExpr(         -4) **  5 <>                -1024 or
        intExpr(         -4) ** 10 <>              1048576 or
        intExpr(         -4) ** 15 <>          -1073741824 or
        intExpr(         -4) ** 20 <>        1099511627776 or
        intExpr(         -4) ** 25 <>    -1125899906842624 or
        intExpr(         -4) ** 30 <>  1152921504606846976 or
        intExpr(         -4) ** 31 <> -4611686018427387904 or
        intExpr(         -3) **  0 <>                    1 or
        intExpr(         -3) **  1 <>                   -3 or
        intExpr(         -3) **  2 <>                    9 or
        intExpr(         -3) **  3 <>                  -27 or
        intExpr(         -3) **  4 <>                   81 or
        intExpr(         -3) **  5 <>                 -243 or
        intExpr(         -3) ** 10 <>                59049 or
        intExpr(         -3) ** 15 <>            -14348907 or
        intExpr(         -3) ** 20 <>           3486784401 or
        intExpr(         -3) ** 25 <>        -847288609443 or
        intExpr(         -3) ** 30 <>      205891132094649 or
        intExpr(         -3) ** 35 <>   -50031545098999707 or
        intExpr(         -3) ** 39 <> -4052555153018976267 or
        intExpr(         -2) **  0 <>                    1 or
        intExpr(         -2) **  1 <>                   -2 or
        intExpr(         -2) **  2 <>                    4 or
        intExpr(         -2) **  3 <>                   -8 or
        intExpr(         -2) **  4 <>                   16 or
        intExpr(         -2) **  5 <>                  -32 or
        intExpr(         -2) ** 10 <>                 1024 or
        intExpr(         -2) ** 15 <>               -32768 or
        intExpr(         -2) ** 16 <>                65536 or
        intExpr(         -2) ** 20 <>              1048576 or
        intExpr(         -2) ** 25 <>            -33554432 or
        intExpr(         -2) ** 30 <>           1073741824 or
        intExpr(         -2) ** 31 <>          -2147483648 or
        intExpr(         -2) ** 32 <>           4294967296 or
        intExpr(         -2) ** 35 <>         -34359738368 or
        intExpr(         -2) ** 40 <>        1099511627776 or
        intExpr(         -2) ** 45 <>      -35184372088832 or
        intExpr(         -2) ** 50 <>     1125899906842624 or
        intExpr(         -2) ** 55 <>   -36028797018963968 or
        intExpr(         -2) ** 60 <>  1152921504606846976 or
        intExpr(         -2) ** 61 <> -2305843009213693952 or
        intExpr(         -2) ** 62 <>  4611686018427387904 or
        intExpr(         -2) ** 63 <>            INT64_MIN or
        intExpr(         -1) **                   0 <>   1 or
        intExpr(         -1) **                   1 <>  -1 or
        intExpr(         -1) **                   2 <>   1 or
        intExpr(         -1) **                   3 <>  -1 or
        intExpr(         -1) **                  99 <>  -1 or
        intExpr(         -1) **                 999 <>  -1 or
        intExpr(         -1) **           999999999 <>  -1 or
        intExpr(         -1) **          2147483647 <>  -1 or
        intExpr(         -1) **          2147483648 <>   1 or
        intExpr(         -1) ** 9223372036854775806 <>   1 or
        intExpr(         -1) ** 9223372036854775807 <>  -1 or
        intExpr(          0) **                   0 <>   1 or
        intExpr(          0) **                   1 <>   0 or
        intExpr(          0) **                   2 <>   0 or
        intExpr(          0) **                   3 <>   0 or
        intExpr(          0) **                  99 <>   0 or
        intExpr(          0) **                 999 <>   0 or
        intExpr(          0) **           999999999 <>   0 or
        intExpr(          0) **          2147483647 <>   0 or
        intExpr(          0) **          2147483648 <>   0 or
        intExpr(          0) ** 9223372036854775806 <>   0 or
        intExpr(          0) ** 9223372036854775807 <>   0 or
        intExpr(          1) **                   0 <>   1 or
        intExpr(          1) **                   1 <>   1 or
        intExpr(          1) **                   2 <>   1 or
        intExpr(          1) **                   3 <>   1 or
        intExpr(          1) **                  99 <>   1 or
        intExpr(          1) **                 999 <>   1 or
        intExpr(          1) **           999999999 <>   1 or
        intExpr(          1) **          2147483647 <>   1 or
        intExpr(          1) **          2147483648 <>   1 or
        intExpr(          1) ** 9223372036854775806 <>   1 or
        intExpr(          1) ** 9223372036854775807 <>   1 or
        intExpr(          2) **  0 <>                    1 or
        intExpr(          2) **  1 <>                    2 or
        intExpr(          2) **  2 <>                    4 or
        intExpr(          2) **  3 <>                    8 or
        intExpr(          2) **  4 <>                   16 or
        intExpr(          2) **  5 <>                   32 or
        intExpr(          2) ** 10 <>                 1024 or
        intExpr(          2) ** 15 <>                32768 or
        intExpr(          2) ** 16 <>                65536 or
        intExpr(          2) ** 20 <>              1048576 or
        intExpr(          2) ** 25 <>             33554432 or
        intExpr(          2) ** 30 <>           1073741824 or
        intExpr(          2) ** 31 <>           2147483648 or
        intExpr(          2) ** 32 <>           4294967296 or
        intExpr(          2) ** 35 <>          34359738368 or
        intExpr(          2) ** 40 <>        1099511627776 or
        intExpr(          2) ** 45 <>       35184372088832 or
        intExpr(          2) ** 50 <>     1125899906842624 or
        intExpr(          2) ** 55 <>    36028797018963968 or
        intExpr(          2) ** 60 <>  1152921504606846976 or
        intExpr(          2) ** 61 <>  2305843009213693952 or
        intExpr(          2) ** 62 <>  4611686018427387904 or
        intExpr(          3) **  0 <>                    1 or
        intExpr(          3) **  1 <>                    3 or
        intExpr(          3) **  2 <>                    9 or
        intExpr(          3) **  3 <>                   27 or
        intExpr(          3) **  4 <>                   81 or
        intExpr(          3) **  5 <>                  243 or
        intExpr(          3) ** 10 <>                59049 or
        intExpr(          3) ** 15 <>             14348907 or
        intExpr(          3) ** 20 <>           3486784401 or
        intExpr(          3) ** 25 <>         847288609443 or
        intExpr(          3) ** 30 <>      205891132094649 or
        intExpr(          3) ** 35 <>    50031545098999707 or
        intExpr(          3) ** 39 <>  4052555153018976267 or
        intExpr(          4) **  0 <>                    1 or
        intExpr(          4) **  1 <>                    4 or
        intExpr(          4) **  2 <>                   16 or
        intExpr(          4) **  3 <>                   64 or
        intExpr(          4) **  4 <>                  256 or
        intExpr(          4) **  5 <>                 1024 or
        intExpr(          4) ** 10 <>              1048576 or
        intExpr(          4) ** 15 <>           1073741824 or
        intExpr(          4) ** 20 <>        1099511627776 or
        intExpr(          4) ** 25 <>     1125899906842624 or
        intExpr(          4) ** 30 <>  1152921504606846976 or
        intExpr(          4) ** 31 <>  4611686018427387904 or
        intExpr(          5) **  0 <>                    1 or
        intExpr(          5) **  1 <>                    5 or
        intExpr(          5) **  2 <>                   25 or
        intExpr(          5) **  3 <>                  125 or
        intExpr(          5) **  4 <>                  625 or
        intExpr(          5) **  5 <>                 3125 or
        intExpr(          5) **  6 <>                15625 or
        intExpr(          5) **  7 <>                78125 or
        intExpr(          5) **  8 <>               390625 or
        intExpr(          5) **  9 <>              1953125 or
        intExpr(          5) ** 10 <>              9765625 or
        intExpr(          5) ** 11 <>             48828125 or
        intExpr(          5) ** 12 <>            244140625 or
        intExpr(          5) ** 13 <>           1220703125 or
        intExpr(          5) ** 14 <>           6103515625 or
        intExpr(          5) ** 15 <>          30517578125 or
        intExpr(          5) ** 16 <>         152587890625 or
        intExpr(          5) ** 17 <>         762939453125 or
        intExpr(          5) ** 18 <>        3814697265625 or
        intExpr(          5) ** 19 <>       19073486328125 or
        intExpr(          5) ** 20 <>       95367431640625 or
        intExpr(          5) ** 21 <>      476837158203125 or
        intExpr(          5) ** 22 <>     2384185791015625 or
        intExpr(          5) ** 23 <>    11920928955078125 or
        intExpr(          5) ** 24 <>    59604644775390625 or
        intExpr(          5) ** 25 <>   298023223876953125 or
        intExpr(          5) ** 26 <>  1490116119384765625 or
        intExpr(          5) ** 27 <>  7450580596923828125 or
        intExpr(         97) **  0 <>                    1 or
        intExpr(         97) **  1 <>                   97 or
        intExpr(         97) **  2 <>                 9409 or
        intExpr(         97) **  3 <>               912673 or
        intExpr(         97) **  4 <>             88529281 or
        intExpr(         97) **  8 <>     7837433594376961 or
        intExpr(         97) **  9 <>   760231058654565217 or
        intExpr(        511) **  0 <>                    1 or
        intExpr(        511) **  1 <>                  511 or
        intExpr(        511) **  2 <>               261121 or
        intExpr(        511) **  3 <>            133432831 or
        intExpr(        511) **  4 <>          68184176641 or
        intExpr(        511) **  5 <>       34842114263551 or
        intExpr(        511) **  6 <>    17804320388674561 or
        intExpr(        511) **  7 <>  9098007718612700671 or
        intExpr(        512) **  0 <>                    1 or
        intExpr(        512) **  1 <>                  512 or
        intExpr(        512) **  2 <>               262144 or
        intExpr(        512) **  3 <>            134217728 or
        intExpr(        512) **  4 <>          68719476736 or
        intExpr(        512) **  5 <>       35184372088832 or
        intExpr(        512) **  6 <>    18014398509481984 or
        intExpr(       1448) **  0 <>                    1 or
        intExpr(       1448) **  1 <>                 1448 or
        intExpr(       1448) **  2 <>              2096704 or
        intExpr(       1448) **  3 <>           3036027392 or
        intExpr(       1448) **  4 <>        4396167663616 or
        intExpr(       1448) **  5 <>     6365650776915968 or
        intExpr(       1448) **  6 <>  9217462324974321664 or
        intExpr(       6208) **  0 <>                    1 or
        intExpr(       6208) **  1 <>                 6208 or
        intExpr(       6208) **  2 <>             38539264 or
        intExpr(       6208) **  3 <>         239251750912 or
        intExpr(       6208) **  4 <>     1485274869661696 or
        intExpr(       6208) **  5 <>  9220586390859808768 or
        intExpr(      32767) **  0 <>                    1 or
        intExpr(      32767) **  1 <>                32767 or
        intExpr(      32767) **  2 <>           1073676289 or
        intExpr(      32767) **  3 <>       35181150961663 or
        intExpr(      32767) **  4 <>  1152780773560811521 or
        intExpr(      32768) **  0 <>                    1 or
        intExpr(      32768) **  1 <>                32768 or
        intExpr(      32768) **  2 <>           1073741824 or
        intExpr(      32768) **  3 <>       35184372088832 or
        intExpr(      32768) **  4 <>  1152921504606846976 or
        intExpr(      55108) **  0 <>                    1 or
        intExpr(      55108) **  1 <>                55108 or
        intExpr(      55108) **  2 <>           3036891664 or
        intExpr(      55108) **  3 <>      167357025819712 or
        intExpr(      55108) **  4 <>  9222710978872688896 or
        intExpr(     123457) **  0 <>                    1 or
        intExpr(     123457) **  1 <>               123457 or
        intExpr(     123457) **  2 <>          15241630849 or
        intExpr(     123457) **  3 <>     1881686019724993 or
        intExpr(    1234577) **  0 <>                    1 or
        intExpr(    1234577) **  1 <>              1234577 or
        intExpr(    1234577) **  2 <>        1524180368929 or
        intExpr(    1234577) **  3 <>  1881718027331258033 or
        intExpr(    2097151) **  0 <>                    1 or
        intExpr(    2097151) **  1 <>              2097151 or
        intExpr(    2097151) **  2 <>        4398042316801 or
        intExpr(    2097151) **  3 <>  9223358842721533951 or
        intExpr(    2097152) **  0 <>                    1 or
        intExpr(    2097152) **  1 <>              2097152 or
        intExpr(    2097152) **  2 <>        4398046511104 or
        intExpr( 2147483648) **  0 <>                    1 or
        intExpr( 2147483648) **  1 <>           2147483648 or
        intExpr( 2147483648) **  2 <>  4611686018427387904 or
        intExpr( 3037000499) **  0 <>                    1 or
        intExpr( 3037000499) **  1 <>           3037000499 or
        intExpr( 3037000499) **  2 <>  9223372030926249001 then
      writeln(" ***** Computing power with a constant exponent does not work correct.");
      okay := FALSE;
    end if;

    if  (-3037000499) ** intExpr( 0) <>                    1 or
        (-3037000499) ** intExpr( 1) <>          -3037000499 or
        (-3037000499) ** intExpr( 2) <>  9223372030926249001 or
        (-2147483648) ** intExpr( 0) <>                    1 or
        (-2147483648) ** intExpr( 1) <>          -2147483648 or
        (-2147483648) ** intExpr( 2) <>  4611686018427387904 or
           (-2097152) ** intExpr( 0) <>                    1 or
           (-2097152) ** intExpr( 1) <>             -2097152 or
           (-2097152) ** intExpr( 2) <>        4398046511104 or
           (-2097152) ** intExpr( 3) <>            INT64_MIN or
           (-2097151) ** intExpr( 0) <>                    1 or
           (-2097151) ** intExpr( 1) <>             -2097151 or
           (-2097151) ** intExpr( 2) <>        4398042316801 or
           (-2097151) ** intExpr( 3) <> -9223358842721533951 or
           (-1234577) ** intExpr( 0) <>                    1 or
           (-1234577) ** intExpr( 1) <>             -1234577 or
           (-1234577) ** intExpr( 2) <>        1524180368929 or
           (-1234577) ** intExpr( 3) <> -1881718027331258033 or
            (-123457) ** intExpr( 0) <>                    1 or
            (-123457) ** intExpr( 1) <>              -123457 or
            (-123457) ** intExpr( 2) <>          15241630849 or
            (-123457) ** intExpr( 3) <>    -1881686019724993 or
             (-55108) ** intExpr( 0) <>                    1 or
             (-55108) ** intExpr( 1) <>               -55108 or
             (-55108) ** intExpr( 2) <>           3036891664 or
             (-55108) ** intExpr( 3) <>     -167357025819712 or
             (-55108) ** intExpr( 4) <>  9222710978872688896 or
             (-32768) ** intExpr( 0) <>                    1 or
             (-32768) ** intExpr( 1) <>               -32768 or
             (-32768) ** intExpr( 2) <>           1073741824 or
             (-32768) ** intExpr( 3) <>      -35184372088832 or
             (-32768) ** intExpr( 4) <>  1152921504606846976 or
             (-32767) ** intExpr( 0) <>                    1 or
             (-32767) ** intExpr( 1) <>               -32767 or
             (-32767) ** intExpr( 2) <>           1073676289 or
             (-32767) ** intExpr( 3) <>      -35181150961663 or
             (-32767) ** intExpr( 4) <>  1152780773560811521 or
              (-6208) ** intExpr( 0) <>                    1 or
              (-6208) ** intExpr( 1) <>                -6208 or
              (-6208) ** intExpr( 2) <>             38539264 or
              (-6208) ** intExpr( 3) <>        -239251750912 or
              (-6208) ** intExpr( 4) <>     1485274869661696 or
              (-6208) ** intExpr( 5) <> -9220586390859808768 or
              (-1448) ** intExpr( 0) <>                    1 or
              (-1448) ** intExpr( 1) <>                -1448 or
              (-1448) ** intExpr( 2) <>              2096704 or
              (-1448) ** intExpr( 3) <>          -3036027392 or
              (-1448) ** intExpr( 4) <>        4396167663616 or
              (-1448) ** intExpr( 5) <>    -6365650776915968 or
              (-1448) ** intExpr( 6) <>  9217462324974321664 or
               (-512) ** intExpr( 0) <>                    1 or
               (-512) ** intExpr( 1) <>                 -512 or
               (-512) ** intExpr( 2) <>               262144 or
               (-512) ** intExpr( 3) <>           -134217728 or
               (-512) ** intExpr( 4) <>          68719476736 or
               (-512) ** intExpr( 5) <>      -35184372088832 or
               (-512) ** intExpr( 6) <>    18014398509481984 or
               (-512) ** intExpr( 7) <>            INT64_MIN or
               (-511) ** intExpr( 0) <>                    1 or
               (-511) ** intExpr( 1) <>                 -511 or
               (-511) ** intExpr( 2) <>               261121 or
               (-511) ** intExpr( 3) <>           -133432831 or
               (-511) ** intExpr( 4) <>          68184176641 or
               (-511) ** intExpr( 5) <>      -34842114263551 or
               (-511) ** intExpr( 6) <>    17804320388674561 or
               (-511) ** intExpr( 7) <> -9098007718612700671 or
                (-97) ** intExpr( 0) <>                    1 or
                (-97) ** intExpr( 1) <>                  -97 or
                (-97) ** intExpr( 2) <>                 9409 or
                (-97) ** intExpr( 3) <>              -912673 or
                (-97) ** intExpr( 4) <>             88529281 or
                (-97) ** intExpr( 8) <>     7837433594376961 or
                (-97) ** intExpr( 9) <>  -760231058654565217 or
                 (-5) ** intExpr( 0) <>                    1 or
                 (-5) ** intExpr( 1) <>                   -5 or
                 (-5) ** intExpr( 2) <>                   25 or
                 (-5) ** intExpr( 3) <>                 -125 or
                 (-5) ** intExpr( 4) <>                  625 or
                 (-5) ** intExpr( 5) <>                -3125 or
                 (-5) ** intExpr( 6) <>                15625 or
                 (-5) ** intExpr( 7) <>               -78125 or
                 (-5) ** intExpr( 8) <>               390625 or
                 (-5) ** intExpr( 9) <>             -1953125 or
                 (-5) ** intExpr(10) <>              9765625 or
                 (-5) ** intExpr(11) <>            -48828125 or
                 (-5) ** intExpr(12) <>            244140625 or
                 (-5) ** intExpr(13) <>          -1220703125 or
                 (-5) ** intExpr(14) <>           6103515625 or
                 (-5) ** intExpr(15) <>         -30517578125 or
                 (-5) ** intExpr(16) <>         152587890625 or
                 (-5) ** intExpr(17) <>        -762939453125 or
                 (-5) ** intExpr(18) <>        3814697265625 or
                 (-5) ** intExpr(19) <>      -19073486328125 or
                 (-5) ** intExpr(20) <>       95367431640625 or
                 (-5) ** intExpr(21) <>     -476837158203125 or
                 (-5) ** intExpr(22) <>     2384185791015625 or
                 (-5) ** intExpr(23) <>   -11920928955078125 or
                 (-5) ** intExpr(24) <>    59604644775390625 or
                 (-5) ** intExpr(25) <>  -298023223876953125 or
                 (-5) ** intExpr(26) <>  1490116119384765625 or
                 (-5) ** intExpr(27) <> -7450580596923828125 or
                 (-4) ** intExpr( 0) <>                    1 or
                 (-4) ** intExpr( 1) <>                   -4 or
                 (-4) ** intExpr( 2) <>                   16 or
                 (-4) ** intExpr( 3) <>                  -64 or
                 (-4) ** intExpr( 4) <>                  256 or
                 (-4) ** intExpr( 5) <>                -1024 or
                 (-4) ** intExpr(10) <>              1048576 or
                 (-4) ** intExpr(15) <>          -1073741824 or
                 (-4) ** intExpr(20) <>        1099511627776 or
                 (-4) ** intExpr(25) <>    -1125899906842624 or
                 (-4) ** intExpr(30) <>  1152921504606846976 or
                 (-4) ** intExpr(31) <> -4611686018427387904 or
                 (-3) ** intExpr( 0) <>                    1 or
                 (-3) ** intExpr( 1) <>                   -3 or
                 (-3) ** intExpr( 2) <>                    9 or
                 (-3) ** intExpr( 3) <>                  -27 or
                 (-3) ** intExpr( 4) <>                   81 or
                 (-3) ** intExpr( 5) <>                 -243 or
                 (-3) ** intExpr(10) <>                59049 or
                 (-3) ** intExpr(15) <>            -14348907 or
                 (-3) ** intExpr(20) <>           3486784401 or
                 (-3) ** intExpr(25) <>        -847288609443 or
                 (-3) ** intExpr(30) <>      205891132094649 or
                 (-3) ** intExpr(35) <>   -50031545098999707 or
                 (-3) ** intExpr(39) <> -4052555153018976267 or
                 (-2) ** intExpr( 0) <>                    1 or
                 (-2) ** intExpr( 1) <>                   -2 or
                 (-2) ** intExpr( 2) <>                    4 or
                 (-2) ** intExpr( 3) <>                   -8 or
                 (-2) ** intExpr( 4) <>                   16 or
                 (-2) ** intExpr( 5) <>                  -32 or
                 (-2) ** intExpr(10) <>                 1024 or
                 (-2) ** intExpr(15) <>               -32768 or
                 (-2) ** intExpr(16) <>                65536 or
                 (-2) ** intExpr(20) <>              1048576 or
                 (-2) ** intExpr(25) <>            -33554432 or
                 (-2) ** intExpr(30) <>           1073741824 or
                 (-2) ** intExpr(31) <>          -2147483648 or
                 (-2) ** intExpr(32) <>           4294967296 or
                 (-2) ** intExpr(35) <>         -34359738368 or
                 (-2) ** intExpr(40) <>        1099511627776 or
                 (-2) ** intExpr(45) <>      -35184372088832 or
                 (-2) ** intExpr(50) <>     1125899906842624 or
                 (-2) ** intExpr(55) <>   -36028797018963968 or
                 (-2) ** intExpr(60) <>  1152921504606846976 or
                 (-2) ** intExpr(61) <> -2305843009213693952 or
                 (-2) ** intExpr(62) <>  4611686018427387904 or
                 (-2) ** intExpr(63) <>            INT64_MIN or
                 (-1) ** intExpr(                  0) <>   1 or
                 (-1) ** intExpr(                  1) <>  -1 or
                 (-1) ** intExpr(                  2) <>   1 or
                 (-1) ** intExpr(                  3) <>  -1 or
                 (-1) ** intExpr(                 99) <>  -1 or
                 (-1) ** intExpr(                999) <>  -1 or
                 (-1) ** intExpr(          999999999) <>  -1 or
                 (-1) ** intExpr(         2147483647) <>  -1 or
                 (-1) ** intExpr(         2147483648) <>   1 or
                 (-1) ** intExpr(9223372036854775806) <>   1 or
                 (-1) ** intExpr(9223372036854775807) <>  -1 or
                   0  ** intExpr(                  0) <>   1 or
                   0  ** intExpr(                  1) <>   0 or
                   0  ** intExpr(                  2) <>   0 or
                   0  ** intExpr(                  3) <>   0 or
                   0  ** intExpr(                 99) <>   0 or
                   0  ** intExpr(                999) <>   0 or
                   0  ** intExpr(          999999999) <>   0 or
                   0  ** intExpr(         2147483647) <>   0 or
                   0  ** intExpr(         2147483648) <>   0 or
                   0  ** intExpr(9223372036854775806) <>   0 or
                   0  ** intExpr(9223372036854775807) <>   0 or
                   1  ** intExpr(                  0) <>   1 or
                   1  ** intExpr(                  1) <>   1 or
                   1  ** intExpr(                  2) <>   1 or
                   1  ** intExpr(                  3) <>   1 or
                   1  ** intExpr(                 99) <>   1 or
                   1  ** intExpr(                999) <>   1 or
                   1  ** intExpr(          999999999) <>   1 or
                   1  ** intExpr(         2147483647) <>   1 or
                   1  ** intExpr(         2147483648) <>   1 or
                   1  ** intExpr(9223372036854775806) <>   1 or
                   1  ** intExpr(9223372036854775807) <>   1 or
                   2  ** intExpr( 0) <>                    1 or
                   2  ** intExpr( 1) <>                    2 or
                   2  ** intExpr( 2) <>                    4 or
                   2  ** intExpr( 3) <>                    8 or
                   2  ** intExpr( 4) <>                   16 or
                   2  ** intExpr( 5) <>                   32 or
                   2  ** intExpr(10) <>                 1024 or
                   2  ** intExpr(15) <>                32768 or
                   2  ** intExpr(16) <>                65536 or
                   2  ** intExpr(20) <>              1048576 or
                   2  ** intExpr(25) <>             33554432 or
                   2  ** intExpr(30) <>           1073741824 or
                   2  ** intExpr(31) <>           2147483648 or
                   2  ** intExpr(32) <>           4294967296 or
                   2  ** intExpr(35) <>          34359738368 or
                   2  ** intExpr(40) <>        1099511627776 or
                   2  ** intExpr(45) <>       35184372088832 or
                   2  ** intExpr(50) <>     1125899906842624 or
                   2  ** intExpr(55) <>    36028797018963968 or
                   2  ** intExpr(60) <>  1152921504606846976 or
                   2  ** intExpr(61) <>  2305843009213693952 or
                   2  ** intExpr(62) <>  4611686018427387904 or
                   3  ** intExpr( 0) <>                    1 or
                   3  ** intExpr( 1) <>                    3 or
                   3  ** intExpr( 2) <>                    9 or
                   3  ** intExpr( 3) <>                   27 or
                   3  ** intExpr( 4) <>                   81 or
                   3  ** intExpr( 5) <>                  243 or
                   3  ** intExpr(10) <>                59049 or
                   3  ** intExpr(15) <>             14348907 or
                   3  ** intExpr(20) <>           3486784401 or
                   3  ** intExpr(25) <>         847288609443 or
                   3  ** intExpr(30) <>      205891132094649 or
                   3  ** intExpr(35) <>    50031545098999707 or
                   3  ** intExpr(39) <>  4052555153018976267 or
                   4  ** intExpr( 0) <>                    1 or
                   4  ** intExpr( 1) <>                    4 or
                   4  ** intExpr( 2) <>                   16 or
                   4  ** intExpr( 3) <>                   64 or
                   4  ** intExpr( 4) <>                  256 or
                   4  ** intExpr( 5) <>                 1024 or
                   4  ** intExpr(10) <>              1048576 or
                   4  ** intExpr(15) <>           1073741824 or
                   4  ** intExpr(20) <>        1099511627776 or
                   4  ** intExpr(25) <>     1125899906842624 or
                   4  ** intExpr(30) <>  1152921504606846976 or
                   4  ** intExpr(31) <>  4611686018427387904 or
                   5  ** intExpr( 0) <>                    1 or
                   5  ** intExpr( 1) <>                    5 or
                   5  ** intExpr( 2) <>                   25 or
                   5  ** intExpr( 3) <>                  125 or
                   5  ** intExpr( 4) <>                  625 or
                   5  ** intExpr( 5) <>                 3125 or
                   5  ** intExpr( 6) <>                15625 or
                   5  ** intExpr( 7) <>                78125 or
                   5  ** intExpr( 8) <>               390625 or
                   5  ** intExpr( 9) <>              1953125 or
                   5  ** intExpr(10) <>              9765625 or
                   5  ** intExpr(11) <>             48828125 or
                   5  ** intExpr(12) <>            244140625 or
                   5  ** intExpr(13) <>           1220703125 or
                   5  ** intExpr(14) <>           6103515625 or
                   5  ** intExpr(15) <>          30517578125 or
                   5  ** intExpr(16) <>         152587890625 or
                   5  ** intExpr(17) <>         762939453125 or
                   5  ** intExpr(18) <>        3814697265625 or
                   5  ** intExpr(19) <>       19073486328125 or
                   5  ** intExpr(20) <>       95367431640625 or
                   5  ** intExpr(21) <>      476837158203125 or
                   5  ** intExpr(22) <>     2384185791015625 or
                   5  ** intExpr(23) <>    11920928955078125 or
                   5  ** intExpr(24) <>    59604644775390625 or
                   5  ** intExpr(25) <>   298023223876953125 or
                   5  ** intExpr(26) <>  1490116119384765625 or
                   5  ** intExpr(27) <>  7450580596923828125 or
                  97  ** intExpr( 0) <>                    1 or
                  97  ** intExpr( 1) <>                   97 or
                  97  ** intExpr( 2) <>                 9409 or
                  97  ** intExpr( 3) <>               912673 or
                  97  ** intExpr( 4) <>             88529281 or
                  97  ** intExpr( 8) <>     7837433594376961 or
                  97  ** intExpr( 9) <>   760231058654565217 or
                 511  ** intExpr( 0) <>                    1 or
                 511  ** intExpr( 1) <>                  511 or
                 511  ** intExpr( 2) <>               261121 or
                 511  ** intExpr( 3) <>            133432831 or
                 511  ** intExpr( 4) <>          68184176641 or
                 511  ** intExpr( 5) <>       34842114263551 or
                 511  ** intExpr( 6) <>    17804320388674561 or
                 511  ** intExpr( 7) <>  9098007718612700671 or
                 512  ** intExpr( 0) <>                    1 or
                 512  ** intExpr( 1) <>                  512 or
                 512  ** intExpr( 2) <>               262144 or
                 512  ** intExpr( 3) <>            134217728 or
                 512  ** intExpr( 4) <>          68719476736 or
                 512  ** intExpr( 5) <>       35184372088832 or
                 512  ** intExpr( 6) <>    18014398509481984 or
                1448  ** intExpr( 0) <>                    1 or
                1448  ** intExpr( 1) <>                 1448 or
                1448  ** intExpr( 2) <>              2096704 or
                1448  ** intExpr( 3) <>           3036027392 or
                1448  ** intExpr( 4) <>        4396167663616 or
                1448  ** intExpr( 5) <>     6365650776915968 or
                1448  ** intExpr( 6) <>  9217462324974321664 or
                6208  ** intExpr( 0) <>                    1 or
                6208  ** intExpr( 1) <>                 6208 or
                6208  ** intExpr( 2) <>             38539264 or
                6208  ** intExpr( 3) <>         239251750912 or
                6208  ** intExpr( 4) <>     1485274869661696 or
                6208  ** intExpr( 5) <>  9220586390859808768 or
               32767  ** intExpr( 0) <>                    1 or
               32767  ** intExpr( 1) <>                32767 or
               32767  ** intExpr( 2) <>           1073676289 or
               32767  ** intExpr( 3) <>       35181150961663 or
               32767  ** intExpr( 4) <>  1152780773560811521 or
               32768  ** intExpr( 0) <>                    1 or
               32768  ** intExpr( 1) <>                32768 or
               32768  ** intExpr( 2) <>           1073741824 or
               32768  ** intExpr( 3) <>       35184372088832 or
               32768  ** intExpr( 4) <>  1152921504606846976 or
               55108  ** intExpr( 0) <>                    1 or
               55108  ** intExpr( 1) <>                55108 or
               55108  ** intExpr( 2) <>           3036891664 or
               55108  ** intExpr( 3) <>      167357025819712 or
               55108  ** intExpr( 4) <>  9222710978872688896 or
              123457  ** intExpr( 0) <>                    1 or
              123457  ** intExpr( 1) <>               123457 or
              123457  ** intExpr( 2) <>          15241630849 or
              123457  ** intExpr( 3) <>     1881686019724993 or
             1234577  ** intExpr( 0) <>                    1 or
             1234577  ** intExpr( 1) <>              1234577 or
             1234577  ** intExpr( 2) <>        1524180368929 or
             1234577  ** intExpr( 3) <>  1881718027331258033 or
             2097151  ** intExpr( 0) <>                    1 or
             2097151  ** intExpr( 1) <>              2097151 or
             2097151  ** intExpr( 2) <>        4398042316801 or
             2097151  ** intExpr( 3) <>  9223358842721533951 or
             2097152  ** intExpr( 0) <>                    1 or
             2097152  ** intExpr( 1) <>              2097152 or
             2097152  ** intExpr( 2) <>        4398046511104 or
          2147483648  ** intExpr( 0) <>                    1 or
          2147483648  ** intExpr( 1) <>           2147483648 or
          2147483648  ** intExpr( 2) <>  4611686018427387904 or
          3037000499  ** intExpr( 0) <>                    1 or
          3037000499  ** intExpr( 1) <>           3037000499 or
          3037000499  ** intExpr( 2) <>  9223372030926249001 then
      writeln(" ***** Computing power with a constant base does not work correct.");
      okay := FALSE;
    end if;

    if  intExpr(-3037000499) ** intExpr( 0) <>                    1 or
        intExpr(-3037000499) ** intExpr( 1) <>          -3037000499 or
        intExpr(-3037000499) ** intExpr( 2) <>  9223372030926249001 or
        intExpr(-2147483648) ** intExpr( 0) <>                    1 or
        intExpr(-2147483648) ** intExpr( 1) <>          -2147483648 or
        intExpr(-2147483648) ** intExpr( 2) <>  4611686018427387904 or
        intExpr(   -2097152) ** intExpr( 0) <>                    1 or
        intExpr(   -2097152) ** intExpr( 1) <>             -2097152 or
        intExpr(   -2097152) ** intExpr( 2) <>        4398046511104 or
        intExpr(   -2097152) ** intExpr( 3) <>            INT64_MIN or
        intExpr(   -2097151) ** intExpr( 0) <>                    1 or
        intExpr(   -2097151) ** intExpr( 1) <>             -2097151 or
        intExpr(   -2097151) ** intExpr( 2) <>        4398042316801 or
        intExpr(   -2097151) ** intExpr( 3) <> -9223358842721533951 or
        intExpr(   -1234577) ** intExpr( 0) <>                    1 or
        intExpr(   -1234577) ** intExpr( 1) <>             -1234577 or
        intExpr(   -1234577) ** intExpr( 2) <>        1524180368929 or
        intExpr(   -1234577) ** intExpr( 3) <> -1881718027331258033 or
        intExpr(    -123457) ** intExpr( 0) <>                    1 or
        intExpr(    -123457) ** intExpr( 1) <>              -123457 or
        intExpr(    -123457) ** intExpr( 2) <>          15241630849 or
        intExpr(    -123457) ** intExpr( 3) <>    -1881686019724993 or
        intExpr(     -55108) ** intExpr( 0) <>                    1 or
        intExpr(     -55108) ** intExpr( 1) <>               -55108 or
        intExpr(     -55108) ** intExpr( 2) <>           3036891664 or
        intExpr(     -55108) ** intExpr( 3) <>     -167357025819712 or
        intExpr(     -55108) ** intExpr( 4) <>  9222710978872688896 or
        intExpr(     -32768) ** intExpr( 0) <>                    1 or
        intExpr(     -32768) ** intExpr( 1) <>               -32768 or
        intExpr(     -32768) ** intExpr( 2) <>           1073741824 or
        intExpr(     -32768) ** intExpr( 3) <>      -35184372088832 or
        intExpr(     -32768) ** intExpr( 4) <>  1152921504606846976 or
        intExpr(     -32767) ** intExpr( 0) <>                    1 or
        intExpr(     -32767) ** intExpr( 1) <>               -32767 or
        intExpr(     -32767) ** intExpr( 2) <>           1073676289 or
        intExpr(     -32767) ** intExpr( 3) <>      -35181150961663 or
        intExpr(     -32767) ** intExpr( 4) <>  1152780773560811521 or
        intExpr(      -6208) ** intExpr( 0) <>                    1 or
        intExpr(      -6208) ** intExpr( 1) <>                -6208 or
        intExpr(      -6208) ** intExpr( 2) <>             38539264 or
        intExpr(      -6208) ** intExpr( 3) <>        -239251750912 or
        intExpr(      -6208) ** intExpr( 4) <>     1485274869661696 or
        intExpr(      -6208) ** intExpr( 5) <> -9220586390859808768 or
        intExpr(      -1448) ** intExpr( 0) <>                    1 or
        intExpr(      -1448) ** intExpr( 1) <>                -1448 or
        intExpr(      -1448) ** intExpr( 2) <>              2096704 or
        intExpr(      -1448) ** intExpr( 3) <>          -3036027392 or
        intExpr(      -1448) ** intExpr( 4) <>        4396167663616 or
        intExpr(      -1448) ** intExpr( 5) <>    -6365650776915968 or
        intExpr(      -1448) ** intExpr( 6) <>  9217462324974321664 or
        intExpr(       -512) ** intExpr( 0) <>                    1 or
        intExpr(       -512) ** intExpr( 1) <>                 -512 or
        intExpr(       -512) ** intExpr( 2) <>               262144 or
        intExpr(       -512) ** intExpr( 3) <>           -134217728 or
        intExpr(       -512) ** intExpr( 4) <>          68719476736 or
        intExpr(       -512) ** intExpr( 5) <>      -35184372088832 or
        intExpr(       -512) ** intExpr( 6) <>    18014398509481984 or
        intExpr(       -512) ** intExpr( 7) <>            INT64_MIN or
        intExpr(       -511) ** intExpr( 0) <>                    1 or
        intExpr(       -511) ** intExpr( 1) <>                 -511 or
        intExpr(       -511) ** intExpr( 2) <>               261121 or
        intExpr(       -511) ** intExpr( 3) <>           -133432831 or
        intExpr(       -511) ** intExpr( 4) <>          68184176641 or
        intExpr(       -511) ** intExpr( 5) <>      -34842114263551 or
        intExpr(       -511) ** intExpr( 6) <>    17804320388674561 or
        intExpr(       -511) ** intExpr( 7) <> -9098007718612700671 or
        intExpr(        -97) ** intExpr( 0) <>                    1 or
        intExpr(        -97) ** intExpr( 1) <>                  -97 or
        intExpr(        -97) ** intExpr( 2) <>                 9409 or
        intExpr(        -97) ** intExpr( 3) <>              -912673 or
        intExpr(        -97) ** intExpr( 4) <>             88529281 or
        intExpr(        -97) ** intExpr( 8) <>     7837433594376961 or
        intExpr(        -97) ** intExpr( 9) <>  -760231058654565217 or
        intExpr(         -5) ** intExpr( 0) <>                    1 or
        intExpr(         -5) ** intExpr( 1) <>                   -5 or
        intExpr(         -5) ** intExpr( 2) <>                   25 or
        intExpr(         -5) ** intExpr( 3) <>                 -125 or
        intExpr(         -5) ** intExpr( 4) <>                  625 or
        intExpr(         -5) ** intExpr( 5) <>                -3125 or
        intExpr(         -5) ** intExpr( 6) <>                15625 or
        intExpr(         -5) ** intExpr( 7) <>               -78125 or
        intExpr(         -5) ** intExpr( 8) <>               390625 or
        intExpr(         -5) ** intExpr( 9) <>             -1953125 or
        intExpr(         -5) ** intExpr(10) <>              9765625 or
        intExpr(         -5) ** intExpr(11) <>            -48828125 or
        intExpr(         -5) ** intExpr(12) <>            244140625 or
        intExpr(         -5) ** intExpr(13) <>          -1220703125 or
        intExpr(         -5) ** intExpr(14) <>           6103515625 or
        intExpr(         -5) ** intExpr(15) <>         -30517578125 or
        intExpr(         -5) ** intExpr(16) <>         152587890625 or
        intExpr(         -5) ** intExpr(17) <>        -762939453125 or
        intExpr(         -5) ** intExpr(18) <>        3814697265625 or
        intExpr(         -5) ** intExpr(19) <>      -19073486328125 or
        intExpr(         -5) ** intExpr(20) <>       95367431640625 or
        intExpr(         -5) ** intExpr(21) <>     -476837158203125 or
        intExpr(         -5) ** intExpr(22) <>     2384185791015625 or
        intExpr(         -5) ** intExpr(23) <>   -11920928955078125 or
        intExpr(         -5) ** intExpr(24) <>    59604644775390625 or
        intExpr(         -5) ** intExpr(25) <>  -298023223876953125 or
        intExpr(         -5) ** intExpr(26) <>  1490116119384765625 or
        intExpr(         -5) ** intExpr(27) <> -7450580596923828125 or
        intExpr(         -4) ** intExpr( 0) <>                    1 or
        intExpr(         -4) ** intExpr( 1) <>                   -4 or
        intExpr(         -4) ** intExpr( 2) <>                   16 or
        intExpr(         -4) ** intExpr( 3) <>                  -64 or
        intExpr(         -4) ** intExpr( 4) <>                  256 or
        intExpr(         -4) ** intExpr( 5) <>                -1024 or
        intExpr(         -4) ** intExpr(10) <>              1048576 or
        intExpr(         -4) ** intExpr(15) <>          -1073741824 or
        intExpr(         -4) ** intExpr(20) <>        1099511627776 or
        intExpr(         -4) ** intExpr(25) <>    -1125899906842624 or
        intExpr(         -4) ** intExpr(30) <>  1152921504606846976 or
        intExpr(         -4) ** intExpr(31) <> -4611686018427387904 or
        intExpr(         -3) ** intExpr( 0) <>                    1 or
        intExpr(         -3) ** intExpr( 1) <>                   -3 or
        intExpr(         -3) ** intExpr( 2) <>                    9 or
        intExpr(         -3) ** intExpr( 3) <>                  -27 or
        intExpr(         -3) ** intExpr( 4) <>                   81 or
        intExpr(         -3) ** intExpr( 5) <>                 -243 or
        intExpr(         -3) ** intExpr(10) <>                59049 or
        intExpr(         -3) ** intExpr(15) <>            -14348907 or
        intExpr(         -3) ** intExpr(20) <>           3486784401 or
        intExpr(         -3) ** intExpr(25) <>        -847288609443 or
        intExpr(         -3) ** intExpr(30) <>      205891132094649 or
        intExpr(         -3) ** intExpr(35) <>   -50031545098999707 or
        intExpr(         -3) ** intExpr(39) <> -4052555153018976267 or
        intExpr(         -2) ** intExpr( 0) <>                    1 or
        intExpr(         -2) ** intExpr( 1) <>                   -2 or
        intExpr(         -2) ** intExpr( 2) <>                    4 or
        intExpr(         -2) ** intExpr( 3) <>                   -8 or
        intExpr(         -2) ** intExpr( 4) <>                   16 or
        intExpr(         -2) ** intExpr( 5) <>                  -32 or
        intExpr(         -2) ** intExpr(10) <>                 1024 or
        intExpr(         -2) ** intExpr(15) <>               -32768 or
        intExpr(         -2) ** intExpr(16) <>                65536 or
        intExpr(         -2) ** intExpr(20) <>              1048576 or
        intExpr(         -2) ** intExpr(25) <>            -33554432 or
        intExpr(         -2) ** intExpr(30) <>           1073741824 or
        intExpr(         -2) ** intExpr(31) <>          -2147483648 or
        intExpr(         -2) ** intExpr(32) <>           4294967296 or
        intExpr(         -2) ** intExpr(35) <>         -34359738368 or
        intExpr(         -2) ** intExpr(40) <>        1099511627776 or
        intExpr(         -2) ** intExpr(45) <>      -35184372088832 or
        intExpr(         -2) ** intExpr(50) <>     1125899906842624 or
        intExpr(         -2) ** intExpr(55) <>   -36028797018963968 or
        intExpr(         -2) ** intExpr(60) <>  1152921504606846976 or
        intExpr(         -2) ** intExpr(61) <> -2305843009213693952 or
        intExpr(         -2) ** intExpr(62) <>  4611686018427387904 or
        intExpr(         -2) ** intExpr(63) <>            INT64_MIN or
        intExpr(         -1) ** intExpr(                  0) <>   1 or
        intExpr(         -1) ** intExpr(                  1) <>  -1 or
        intExpr(         -1) ** intExpr(                  2) <>   1 or
        intExpr(         -1) ** intExpr(                  3) <>  -1 or
        intExpr(         -1) ** intExpr(                 99) <>  -1 or
        intExpr(         -1) ** intExpr(                999) <>  -1 or
        intExpr(         -1) ** intExpr(          999999999) <>  -1 or
        intExpr(         -1) ** intExpr(         2147483647) <>  -1 or
        intExpr(         -1) ** intExpr(         2147483648) <>   1 or
        intExpr(         -1) ** intExpr(9223372036854775806) <>   1 or
        intExpr(         -1) ** intExpr(9223372036854775807) <>  -1 or
        intExpr(          0) ** intExpr(                  0) <>   1 or
        intExpr(          0) ** intExpr(                  1) <>   0 or
        intExpr(          0) ** intExpr(                  2) <>   0 or
        intExpr(          0) ** intExpr(                  3) <>   0 or
        intExpr(          0) ** intExpr(                 99) <>   0 or
        intExpr(          0) ** intExpr(                999) <>   0 or
        intExpr(          0) ** intExpr(          999999999) <>   0 or
        intExpr(          0) ** intExpr(         2147483647) <>   0 or
        intExpr(          0) ** intExpr(         2147483648) <>   0 or
        intExpr(          0) ** intExpr(9223372036854775806) <>   0 or
        intExpr(          0) ** intExpr(9223372036854775807) <>   0 or
        intExpr(          1) ** intExpr(                  0) <>   1 or
        intExpr(          1) ** intExpr(                  1) <>   1 or
        intExpr(          1) ** intExpr(                  2) <>   1 or
        intExpr(          1) ** intExpr(                  3) <>   1 or
        intExpr(          1) ** intExpr(                 99) <>   1 or
        intExpr(          1) ** intExpr(                999) <>   1 or
        intExpr(          1) ** intExpr(          999999999) <>   1 or
        intExpr(          1) ** intExpr(         2147483647) <>   1 or
        intExpr(          1) ** intExpr(         2147483648) <>   1 or
        intExpr(          1) ** intExpr(9223372036854775806) <>   1 or
        intExpr(          1) ** intExpr(9223372036854775807) <>   1 or
        intExpr(          2) ** intExpr( 0) <>                    1 or
        intExpr(          2) ** intExpr( 1) <>                    2 or
        intExpr(          2) ** intExpr( 2) <>                    4 or
        intExpr(          2) ** intExpr( 3) <>                    8 or
        intExpr(          2) ** intExpr( 4) <>                   16 or
        intExpr(          2) ** intExpr( 5) <>                   32 or
        intExpr(          2) ** intExpr(10) <>                 1024 or
        intExpr(          2) ** intExpr(15) <>                32768 or
        intExpr(          2) ** intExpr(16) <>                65536 or
        intExpr(          2) ** intExpr(20) <>              1048576 or
        intExpr(          2) ** intExpr(25) <>             33554432 or
        intExpr(          2) ** intExpr(30) <>           1073741824 or
        intExpr(          2) ** intExpr(31) <>           2147483648 or
        intExpr(          2) ** intExpr(32) <>           4294967296 or
        intExpr(          2) ** intExpr(35) <>          34359738368 or
        intExpr(          2) ** intExpr(40) <>        1099511627776 or
        intExpr(          2) ** intExpr(45) <>       35184372088832 or
        intExpr(          2) ** intExpr(50) <>     1125899906842624 or
        intExpr(          2) ** intExpr(55) <>    36028797018963968 or
        intExpr(          2) ** intExpr(60) <>  1152921504606846976 or
        intExpr(          2) ** intExpr(61) <>  2305843009213693952 or
        intExpr(          2) ** intExpr(62) <>  4611686018427387904 or
        intExpr(          3) ** intExpr( 0) <>                    1 or
        intExpr(          3) ** intExpr( 1) <>                    3 or
        intExpr(          3) ** intExpr( 2) <>                    9 or
        intExpr(          3) ** intExpr( 3) <>                   27 or
        intExpr(          3) ** intExpr( 4) <>                   81 or
        intExpr(          3) ** intExpr( 5) <>                  243 or
        intExpr(          3) ** intExpr(10) <>                59049 or
        intExpr(          3) ** intExpr(15) <>             14348907 or
        intExpr(          3) ** intExpr(20) <>           3486784401 or
        intExpr(          3) ** intExpr(25) <>         847288609443 or
        intExpr(          3) ** intExpr(30) <>      205891132094649 or
        intExpr(          3) ** intExpr(35) <>    50031545098999707 or
        intExpr(          3) ** intExpr(39) <>  4052555153018976267 or
        intExpr(          4) ** intExpr( 0) <>                    1 or
        intExpr(          4) ** intExpr( 1) <>                    4 or
        intExpr(          4) ** intExpr( 2) <>                   16 or
        intExpr(          4) ** intExpr( 3) <>                   64 or
        intExpr(          4) ** intExpr( 4) <>                  256 or
        intExpr(          4) ** intExpr( 5) <>                 1024 or
        intExpr(          4) ** intExpr(10) <>              1048576 or
        intExpr(          4) ** intExpr(15) <>           1073741824 or
        intExpr(          4) ** intExpr(20) <>        1099511627776 or
        intExpr(          4) ** intExpr(25) <>     1125899906842624 or
        intExpr(          4) ** intExpr(30) <>  1152921504606846976 or
        intExpr(          4) ** intExpr(31) <>  4611686018427387904 or
        intExpr(          5) ** intExpr( 0) <>                    1 or
        intExpr(          5) ** intExpr( 1) <>                    5 or
        intExpr(          5) ** intExpr( 2) <>                   25 or
        intExpr(          5) ** intExpr( 3) <>                  125 or
        intExpr(          5) ** intExpr( 4) <>                  625 or
        intExpr(          5) ** intExpr( 5) <>                 3125 or
        intExpr(          5) ** intExpr( 6) <>                15625 or
        intExpr(          5) ** intExpr( 7) <>                78125 or
        intExpr(          5) ** intExpr( 8) <>               390625 or
        intExpr(          5) ** intExpr( 9) <>              1953125 or
        intExpr(          5) ** intExpr(10) <>              9765625 or
        intExpr(          5) ** intExpr(11) <>             48828125 or
        intExpr(          5) ** intExpr(12) <>            244140625 or
        intExpr(          5) ** intExpr(13) <>           1220703125 or
        intExpr(          5) ** intExpr(14) <>           6103515625 or
        intExpr(          5) ** intExpr(15) <>          30517578125 or
        intExpr(          5) ** intExpr(16) <>         152587890625 or
        intExpr(          5) ** intExpr(17) <>         762939453125 or
        intExpr(          5) ** intExpr(18) <>        3814697265625 or
        intExpr(          5) ** intExpr(19) <>       19073486328125 or
        intExpr(          5) ** intExpr(20) <>       95367431640625 or
        intExpr(          5) ** intExpr(21) <>      476837158203125 or
        intExpr(          5) ** intExpr(22) <>     2384185791015625 or
        intExpr(          5) ** intExpr(23) <>    11920928955078125 or
        intExpr(          5) ** intExpr(24) <>    59604644775390625 or
        intExpr(          5) ** intExpr(25) <>   298023223876953125 or
        intExpr(          5) ** intExpr(26) <>  1490116119384765625 or
        intExpr(          5) ** intExpr(27) <>  7450580596923828125 or
        intExpr(         97) ** intExpr( 0) <>                    1 or
        intExpr(         97) ** intExpr( 1) <>                   97 or
        intExpr(         97) ** intExpr( 2) <>                 9409 or
        intExpr(         97) ** intExpr( 3) <>               912673 or
        intExpr(         97) ** intExpr( 4) <>             88529281 or
        intExpr(         97) ** intExpr( 8) <>     7837433594376961 or
        intExpr(         97) ** intExpr( 9) <>   760231058654565217 or
        intExpr(        511) ** intExpr( 0) <>                    1 or
        intExpr(        511) ** intExpr( 1) <>                  511 or
        intExpr(        511) ** intExpr( 2) <>               261121 or
        intExpr(        511) ** intExpr( 3) <>            133432831 or
        intExpr(        511) ** intExpr( 4) <>          68184176641 or
        intExpr(        511) ** intExpr( 5) <>       34842114263551 or
        intExpr(        511) ** intExpr( 6) <>    17804320388674561 or
        intExpr(        511) ** intExpr( 7) <>  9098007718612700671 or
        intExpr(        512) ** intExpr( 0) <>                    1 or
        intExpr(        512) ** intExpr( 1) <>                  512 or
        intExpr(        512) ** intExpr( 2) <>               262144 or
        intExpr(        512) ** intExpr( 3) <>            134217728 or
        intExpr(        512) ** intExpr( 4) <>          68719476736 or
        intExpr(        512) ** intExpr( 5) <>       35184372088832 or
        intExpr(        512) ** intExpr( 6) <>    18014398509481984 or
        intExpr(       1448) ** intExpr( 0) <>                    1 or
        intExpr(       1448) ** intExpr( 1) <>                 1448 or
        intExpr(       1448) ** intExpr( 2) <>              2096704 or
        intExpr(       1448) ** intExpr( 3) <>           3036027392 or
        intExpr(       1448) ** intExpr( 4) <>        4396167663616 or
        intExpr(       1448) ** intExpr( 5) <>     6365650776915968 or
        intExpr(       1448) ** intExpr( 6) <>  9217462324974321664 or
        intExpr(       6208) ** intExpr( 0) <>                    1 or
        intExpr(       6208) ** intExpr( 1) <>                 6208 or
        intExpr(       6208) ** intExpr( 2) <>             38539264 or
        intExpr(       6208) ** intExpr( 3) <>         239251750912 or
        intExpr(       6208) ** intExpr( 4) <>     1485274869661696 or
        intExpr(       6208) ** intExpr( 5) <>  9220586390859808768 or
        intExpr(      32767) ** intExpr( 0) <>                    1 or
        intExpr(      32767) ** intExpr( 1) <>                32767 or
        intExpr(      32767) ** intExpr( 2) <>           1073676289 or
        intExpr(      32767) ** intExpr( 3) <>       35181150961663 or
        intExpr(      32767) ** intExpr( 4) <>  1152780773560811521 or
        intExpr(      32768) ** intExpr( 0) <>                    1 or
        intExpr(      32768) ** intExpr( 1) <>                32768 or
        intExpr(      32768) ** intExpr( 2) <>           1073741824 or
        intExpr(      32768) ** intExpr( 3) <>       35184372088832 or
        intExpr(      32768) ** intExpr( 4) <>  1152921504606846976 or
        intExpr(      55108) ** intExpr( 0) <>                    1 or
        intExpr(      55108) ** intExpr( 1) <>                55108 or
        intExpr(      55108) ** intExpr( 2) <>           3036891664 or
        intExpr(      55108) ** intExpr( 3) <>      167357025819712 or
        intExpr(      55108) ** intExpr( 4) <>  9222710978872688896 or
        intExpr(     123457) ** intExpr( 0) <>                    1 or
        intExpr(     123457) ** intExpr( 1) <>               123457 or
        intExpr(     123457) ** intExpr( 2) <>          15241630849 or
        intExpr(     123457) ** intExpr( 3) <>     1881686019724993 or
        intExpr(    1234577) ** intExpr( 0) <>                    1 or
        intExpr(    1234577) ** intExpr( 1) <>              1234577 or
        intExpr(    1234577) ** intExpr( 2) <>        1524180368929 or
        intExpr(    1234577) ** intExpr( 3) <>  1881718027331258033 or
        intExpr(    2097151) ** intExpr( 0) <>                    1 or
        intExpr(    2097151) ** intExpr( 1) <>              2097151 or
        intExpr(    2097151) ** intExpr( 2) <>        4398042316801 or
        intExpr(    2097151) ** intExpr( 3) <>  9223358842721533951 or
        intExpr(    2097152) ** intExpr( 0) <>                    1 or
        intExpr(    2097152) ** intExpr( 1) <>              2097152 or
        intExpr(    2097152) ** intExpr( 2) <>        4398046511104 or
        intExpr( 2147483648) ** intExpr( 0) <>                    1 or
        intExpr( 2147483648) ** intExpr( 1) <>           2147483648 or
        intExpr( 2147483648) ** intExpr( 2) <>  4611686018427387904 or
        intExpr( 3037000499) ** intExpr( 0) <>                    1 or
        intExpr( 3037000499) ** intExpr( 1) <>           3037000499 or
        intExpr( 3037000499) ** intExpr( 2) <>  9223372030926249001 then
      writeln(" ***** Computing power with two expressions does not work correct.");
      okay := FALSE;
    end if;

    if intExpr(7) **  0 <>                   1 or
       intExpr(7) **  1 <>                   7 or
       intExpr(7) **  2 <>                  49 or
       intExpr(7) **  3 <>                 343 or
       intExpr(7) **  4 <>                2401 or
       intExpr(7) **  5 <>               16807 or
       intExpr(7) **  6 <>              117649 or
       intExpr(7) **  7 <>              823543 or
       intExpr(7) **  8 <>             5764801 or
       intExpr(7) **  9 <>            40353607 or
       intExpr(7) ** 10 <>           282475249 or
       intExpr(7) ** 11 <>          1977326743 or
       intExpr(7) ** 12 <>         13841287201 or
       intExpr(7) ** 13 <>         96889010407 or
       intExpr(7) ** 14 <>        678223072849 or
       intExpr(7) ** 15 <>       4747561509943 or
       intExpr(7) ** 16 <>      33232930569601 or
       intExpr(7) ** 17 <>     232630513987207 or
       intExpr(7) ** 18 <>    1628413597910449 or
       intExpr(7) ** 19 <>   11398895185373143 or
       intExpr(7) ** 20 <>   79792266297612001 or
       intExpr(7) ** 21 <>  558545864083284007 or
       intExpr(7) ** 22 <> 3909821048582988049 then
      writeln(" ***** Computing power of 7 with exponents up to 22 does not work correct.");
      okay := FALSE;
    end if;

    if intExpr(11) **  0 <>                   1 or
       intExpr(11) **  1 <>                  11 or
       intExpr(11) **  2 <>                 121 or
       intExpr(11) **  3 <>                1331 or
       intExpr(11) **  4 <>               14641 or
       intExpr(11) **  5 <>              161051 or
       intExpr(11) **  6 <>             1771561 or
       intExpr(11) **  7 <>            19487171 or
       intExpr(11) **  8 <>           214358881 or
       intExpr(11) **  9 <>          2357947691 or
       intExpr(11) ** 10 <>         25937424601 or
       intExpr(11) ** 11 <>        285311670611 or
       intExpr(11) ** 12 <>       3138428376721 or
       intExpr(11) ** 13 <>      34522712143931 or
       intExpr(11) ** 14 <>     379749833583241 or
       intExpr(11) ** 15 <>    4177248169415651 or
       intExpr(11) ** 16 <>   45949729863572161 or
       intExpr(11) ** 17 <>  505447028499293771 or
       intExpr(11) ** 18 <> 5559917313492231481 then
      writeln(" ***** Computing power of 11 with exponents up to 18 does not work correct.");
      okay := FALSE;
    end if;

    if  not raisesNumericError(integer.first **        (-1)) or
        not raisesNumericError(         (-9) **        (-1)) or
        not raisesNumericError(         (-8) **        (-1)) or
        not raisesNumericError(         (-7) **        (-1)) or
        not raisesNumericError(         (-4) **        (-1)) or
        not raisesNumericError(         (-2) **        (-1)) or
        not raisesNumericError(         (-1) **        (-1)) or
        not raisesNumericError(            0 **        (-1)) or
        not raisesNumericError(            1 **        (-1)) or
        not raisesNumericError(            2 **        (-1)) or
        not raisesNumericError(            4 **        (-1)) or
        not raisesNumericError(            7 **        (-1)) or
        not raisesNumericError(            8 **        (-1)) or
        not raisesNumericError(            9 **        (-1)) or
        not raisesNumericError( integer.last **        (-1)) or
        not raisesNumericError(integer.first ** intExpr(-1)) or
        not raisesNumericError(         (-9) ** intExpr(-1)) or
        not raisesNumericError(         (-8) ** intExpr(-1)) or
        not raisesNumericError(         (-7) ** intExpr(-1)) or
        not raisesNumericError(         (-4) ** intExpr(-1)) or
        not raisesNumericError(         (-2) ** intExpr(-1)) or
        not raisesNumericError(         (-1) ** intExpr(-1)) or
        not raisesNumericError(            0 ** intExpr(-1)) or
        not raisesNumericError(            1 ** intExpr(-1)) or
        not raisesNumericError(            2 ** intExpr(-1)) or
        not raisesNumericError(            4 ** intExpr(-1)) or
        not raisesNumericError(            7 ** intExpr(-1)) or
        not raisesNumericError(            8 ** intExpr(-1)) or
        not raisesNumericError(            9 ** intExpr(-1)) or
        not raisesNumericError( integer.last ** intExpr(-1)) or
        not raisesNumericError(intExpr(integer.first) **        (-1)) or
        not raisesNumericError(intExpr(         (-9)) **        (-1)) or
        not raisesNumericError(intExpr(         (-8)) **        (-1)) or
        not raisesNumericError(intExpr(         (-7)) **        (-1)) or
        not raisesNumericError(intExpr(         (-4)) **        (-1)) or
        not raisesNumericError(intExpr(         (-2)) **        (-1)) or
        not raisesNumericError(intExpr(         (-1)) **        (-1)) or
        not raisesNumericError(intExpr(            0) **        (-1)) or
        not raisesNumericError(intExpr(            1) **        (-1)) or
        not raisesNumericError(intExpr(            2) **        (-1)) or
        not raisesNumericError(intExpr(            4) **        (-1)) or
        not raisesNumericError(intExpr(            7) **        (-1)) or
        not raisesNumericError(intExpr(            8) **        (-1)) or
        not raisesNumericError(intExpr(            9) **        (-1)) or
        not raisesNumericError(intExpr( integer.last) **        (-1)) or
        not raisesNumericError(intExpr(integer.first) ** intExpr(-1)) or
        not raisesNumericError(intExpr(         (-9)) ** intExpr(-1)) or
        not raisesNumericError(intExpr(         (-8)) ** intExpr(-1)) or
        not raisesNumericError(intExpr(         (-7)) ** intExpr(-1)) or
        not raisesNumericError(intExpr(         (-4)) ** intExpr(-1)) or
        not raisesNumericError(intExpr(         (-2)) ** intExpr(-1)) or
        not raisesNumericError(intExpr(         (-1)) ** intExpr(-1)) or
        not raisesNumericError(intExpr(            0) ** intExpr(-1)) or
        not raisesNumericError(intExpr(            1) ** intExpr(-1)) or
        not raisesNumericError(intExpr(            2) ** intExpr(-1)) or
        not raisesNumericError(intExpr(            4) ** intExpr(-1)) or
        not raisesNumericError(intExpr(            7) ** intExpr(-1)) or
        not raisesNumericError(intExpr(            8) ** intExpr(-1)) or
        not raisesNumericError(intExpr(            9) ** intExpr(-1)) or
        not raisesNumericError(intExpr( integer.last) ** intExpr(-1)) then
      writeln(" ***** Computing power with negative exponent does not raise NUMERIC_ERROR.");
      okay := FALSE;
    end if;

    if okay then
      writeln("Power works correct for selected values.");
    else
      writeln(" ***** Power does not work correct.");
    end if;
  end func;


const proc: check_abs is func
  local
    var boolean: okay is TRUE;
  begin
    if  abs(-9223372036854775807) <> 9223372036854775807 or
        abs(         -4294967296) <>          4294967296 or
        abs(         -4294967295) <>          4294967295 or
        abs(         -2147483648) <>          2147483648 or
        abs(         -2147483647) <>          2147483647 or
        abs(                  -1) <>                   1 or
        abs(                   0) <>                   0 or
        abs(                   1) <>                   1 or
        abs(          2147483647) <>          2147483647 or
        abs(          2147483648) <>          2147483648 or
        abs(          4294967295) <>          4294967295 or
        abs(          4294967296) <>          4294967296 or
        abs( 9223372036854775807) <> 9223372036854775807 or
        abs(intExpr(-9223372036854775807)) <> 9223372036854775807 or
        abs(intExpr(         -4294967296)) <>          4294967296 or
        abs(intExpr(         -4294967295)) <>          4294967295 or
        abs(intExpr(         -2147483648)) <>          2147483648 or
        abs(intExpr(         -2147483647)) <>          2147483647 or
        abs(intExpr(                  -1)) <>                   1 or
        abs(intExpr(                   0)) <>                   0 or
        abs(intExpr(                   1)) <>                   1 or
        abs(intExpr(          2147483647)) <>          2147483647 or
        abs(intExpr(          2147483648)) <>          2147483648 or
        abs(intExpr(          4294967295)) <>          4294967295 or
        abs(intExpr(          4294967296)) <>          4294967296 or
        abs(intExpr( 9223372036854775807)) <> 9223372036854775807 then
      writeln("The integer abs function does not work correct.");
      okay := FALSE;
    end if;

    if okay then
      writeln("The integer abs function works correct.");
    else
      writeln(" ***** The integer abs function does not work correct.");
      writeln;
    end if;
  end func;


const proc: check_rand is func
  local
    var boolean: okay is TRUE;
    var integer: number is 0;
    var integer: random is 0;
  begin
    for number range 0 to 1000 do
      random := rand(0, 0);
      okay := okay and random = 0;
      random := rand(0, 1);
      okay := okay and random >= 0 and random <= 1;
      random := rand(0, 2);
      okay := okay and random >= 0 and random <= 2;
      random := rand(0, 3);
      okay := okay and random >= 0 and random <= 3;
      random := rand(0, 4);
      okay := okay and random >= 0 and random <= 4;
      random := rand(0, 5);
      okay := okay and random >= 0 and random <= 5;
      random := rand(0, 6);
      okay := okay and random >= 0 and random <= 6;
      random := rand(0, 7);
      okay := okay and random >= 0 and random <= 7;
      random := rand(1, 1);
      okay := okay and random = 1;
      random := rand(2, 3);
      okay := okay and random >= 2 and random <= 3;
      random := rand(3, 5);
      okay := okay and random >= 3 and random <= 5;
      random := rand(4, 7);
      okay := okay and random >= 4 and random <= 7;
      random := rand(5, 9);
      okay := okay and random >= 5 and random <= 9;
      random := rand(6, 11);
      okay := okay and random >= 6 and random <= 11;
      random := rand(7, 13);
      okay := okay and random >= 7 and random <= 13;
      random := rand(8, 15);
      okay := okay and random >= 8 and random <= 15;
    end for;

    random := rand(-576460752303423487, 576460752303423487);
    okay := okay and random >= -576460752303423487 and random <= 576460752303423487;
    random := rand(-576460752303423488, 576460752303423487);
    okay := okay and random >= -576460752303423488 and random <= 576460752303423487;
    random := rand(-576460752303423488, 576460752303423488);
    okay := okay and random >= -576460752303423488 and random <= 576460752303423488;
    random := rand(-1152921504606846975, 1152921504606846975);
    okay := okay and random >= -1152921504606846975 and random <= 1152921504606846975;
    random := rand(-1152921504606846976, 1152921504606846975);
    okay := okay and random >= -1152921504606846976 and random <= 1152921504606846975;
    random := rand(-1152921504606846976, 1152921504606846976);
    okay := okay and random >= -1152921504606846976 and random <= 1152921504606846976;
    random := rand(-2305843009213693951, 2305843009213693951);
    okay := okay and random >= -2305843009213693951 and random <= 2305843009213693951;
    random := rand(-2305843009213693952, 2305843009213693951);
    okay := okay and random >= -2305843009213693952 and random <= 2305843009213693951;
    random := rand(-2305843009213693952, 2305843009213693952);
    okay := okay and random >= -2305843009213693952 and random <= 2305843009213693952;
    random := rand(-4611686018427387903, 4611686018427387903);
    okay := okay and random >= -4611686018427387903 and random <= 4611686018427387903;
    random := rand(-4611686018427387904, 4611686018427387903);
    okay := okay and random >= -4611686018427387904 and random <= 4611686018427387903;
    random := rand(-4611686018427387904, 4611686018427387904);
    okay := okay and random >= -4611686018427387904 and random <= 4611686018427387904;
    random := rand(-9223372036854775807, 9223372036854775807);
    okay := okay and random >= -9223372036854775807 and random <= 9223372036854775807;
    random := rand(-9223372036854775807 - 1, 9223372036854775807);
    okay := okay and random >= integer.first and random <= 9223372036854775807;

    if  not raisesRangeError(rand(        1,          0 )) or
        not raisesRangeError(rand(        1,  intExpr(0))) or
        not raisesRangeError(rand(intExpr(1),         0 )) or
        not raisesRangeError(rand(intExpr(1), intExpr(0))) then
      writeln(" ***** Integer rand with empty range does not raise RANGE_ERROR.");
      okay := FALSE;
    end if;

    if okay then
      writeln("Integer rand is correct for selected values.");
    else
      writeln(" ***** The integer rand function does not work correct.");
      writeln;
    end if;
  end func;


const proc: check_sqrt is func
  local
    var integer: number is 0;
    var integer: sqrt_num is 0;
    var integer: count is 0;
    var boolean: okay is TRUE;
    var boolean: ok is TRUE;
  begin
    for number range 0 to 1000 do
      sqrt_num := sqrt(number);
      if sqrt_num * sqrt_num > number or
          (sqrt_num + 1) * (sqrt_num + 1) <= number then
        write("sqrt(");
        write(number);
        write(") = ");
        write(sqrt_num);
        writeln(" is NOT OKAY");
        ok := FALSE;
      end if;
    end for;
    okay := okay and ok;

    ok := TRUE;
    for count range 1 to 10000 do
      number := rand(0, 2147395599);
      sqrt_num := sqrt(number);
      if sqrt_num * sqrt_num > number or
          (sqrt_num + 1) * (sqrt_num + 1) <= number then
        write("sqrt(");
        write(number);
        write(") = ");
        write(sqrt_num);
        writeln(" is NOT OKAY");
        ok := FALSE;
      end if;
    end for;
    for count range 1 to 1000 do
      number := rand(2147395600, 2147483647);
      sqrt_num := sqrt(number);
      if sqrt_num <> 46340 then
        write("sqrt(");
        write(number);
        write(") = ");
        write(sqrt_num);
        writeln(" is NOT OKAY");
        ok := FALSE;
      end if;
    end for;
    okay := okay and ok;

    if  sqrt(                  0) <>          0 or
        sqrt(                  1) <>          1 or
        sqrt(                  2) <>          1 or
        sqrt(                  3) <>          1 or
        sqrt(                  4) <>          2 or
        sqrt(                  5) <>          2 or
        sqrt(                  8) <>          2 or
        sqrt(                  9) <>          3 or
        sqrt(                 15) <>          3 or
        sqrt(                 16) <>          4 or
        sqrt(                 24) <>          4 or
        sqrt(                 25) <>          5 or
        sqrt(                 35) <>          5 or
        sqrt(                 36) <>          6 or
        sqrt(                 48) <>          6 or
        sqrt(                 49) <>          7 or
        sqrt(                 63) <>          7 or
        sqrt(                 64) <>          8 or
        sqrt(                 80) <>          8 or
        sqrt(                 81) <>          9 or
        sqrt(                128) <>         11 or
        sqrt(                129) <>         11 or
        sqrt(                255) <>         15 or
        sqrt(                256) <>         16 or
        sqrt(                257) <>         16 or
        sqrt(               1000) <>         31 or
        sqrt(              10000) <>        100 or
        sqrt(              32767) <>        181 or
        sqrt(              32768) <>        181 or
        sqrt(              32769) <>        181 or
        sqrt(              65535) <>        255 or
        sqrt(              65536) <>        256 or
        sqrt(              65537) <>        256 or
        sqrt(             100000) <>        316 or
        sqrt(            1000000) <>       1000 or
        sqrt(           10000000) <>       3162 or
        sqrt(          100000000) <>      10000 or
        sqrt(         1000000000) <>      31622 or
        sqrt(         2147483647) <>      46340 or
        sqrt(         2147483648) <>      46340 or
        sqrt(         2147483649) <>      46340 or
        sqrt(         4294967295) <>      65535 or
        sqrt(         4294967296) <>      65536 or
        sqrt(         4294967297) <>      65536 or
        sqrt(        10000000000) <>     100000 or
        sqrt(       100000000000) <>     316227 or
        sqrt(      1000000000000) <>    1000000 or
        sqrt(     10000000000000) <>    3162277 or
        sqrt(    100000000000000) <>   10000000 or
        sqrt(   1000000000000000) <>   31622776 or
        sqrt(  10000000000000000) <>  100000000 or
        sqrt( 100000000000000000) <>  316227766 or
        sqrt(1000000000000000000) <> 1000000000 or
        sqrt(9223372030926249000) <> 3037000498 or
        sqrt(9223372030926249001) <> 3037000499 or
        sqrt(9223372036854775807) <> 3037000499 then
      writeln("The integer square root does not work correct.");
      okay := FALSE;
    end if;

    if  sqrt(intExpr(                  0)) <>          0 or
        sqrt(intExpr(                  1)) <>          1 or
        sqrt(intExpr(                  2)) <>          1 or
        sqrt(intExpr(                  3)) <>          1 or
        sqrt(intExpr(                  4)) <>          2 or
        sqrt(intExpr(                  5)) <>          2 or
        sqrt(intExpr(                  8)) <>          2 or
        sqrt(intExpr(                  9)) <>          3 or
        sqrt(intExpr(                 15)) <>          3 or
        sqrt(intExpr(                 16)) <>          4 or
        sqrt(intExpr(                 24)) <>          4 or
        sqrt(intExpr(                 25)) <>          5 or
        sqrt(intExpr(                 35)) <>          5 or
        sqrt(intExpr(                 36)) <>          6 or
        sqrt(intExpr(                 48)) <>          6 or
        sqrt(intExpr(                 49)) <>          7 or
        sqrt(intExpr(                 63)) <>          7 or
        sqrt(intExpr(                 64)) <>          8 or
        sqrt(intExpr(                 80)) <>          8 or
        sqrt(intExpr(                 81)) <>          9 or
        sqrt(intExpr(                128)) <>         11 or
        sqrt(intExpr(                129)) <>         11 or
        sqrt(intExpr(                255)) <>         15 or
        sqrt(intExpr(                256)) <>         16 or
        sqrt(intExpr(                257)) <>         16 or
        sqrt(intExpr(               1000)) <>         31 or
        sqrt(intExpr(              10000)) <>        100 or
        sqrt(intExpr(              32767)) <>        181 or
        sqrt(intExpr(              32768)) <>        181 or
        sqrt(intExpr(              32769)) <>        181 or
        sqrt(intExpr(              65535)) <>        255 or
        sqrt(intExpr(              65536)) <>        256 or
        sqrt(intExpr(              65537)) <>        256 or
        sqrt(intExpr(             100000)) <>        316 or
        sqrt(intExpr(            1000000)) <>       1000 or
        sqrt(intExpr(           10000000)) <>       3162 or
        sqrt(intExpr(          100000000)) <>      10000 or
        sqrt(intExpr(         1000000000)) <>      31622 or
        sqrt(intExpr(         2147483647)) <>      46340 or
        sqrt(intExpr(         2147483648)) <>      46340 or
        sqrt(intExpr(         2147483649)) <>      46340 or
        sqrt(intExpr(         4294967295)) <>      65535 or
        sqrt(intExpr(         4294967296)) <>      65536 or
        sqrt(intExpr(         4294967297)) <>      65536 or
        sqrt(intExpr(        10000000000)) <>     100000 or
        sqrt(intExpr(       100000000000)) <>     316227 or
        sqrt(intExpr(      1000000000000)) <>    1000000 or
        sqrt(intExpr(     10000000000000)) <>    3162277 or
        sqrt(intExpr(    100000000000000)) <>   10000000 or
        sqrt(intExpr(   1000000000000000)) <>   31622776 or
        sqrt(intExpr(  10000000000000000)) <>  100000000 or
        sqrt(intExpr( 100000000000000000)) <>  316227766 or
        sqrt(intExpr(1000000000000000000)) <> 1000000000 or
        sqrt(intExpr(9223372030926249000)) <> 3037000498 or
        sqrt(intExpr(9223372030926249001)) <> 3037000499 or
        sqrt(intExpr(9223372036854775807)) <> 3037000499 then
      writeln("The integer square root of expressions does not work correct.");
      okay := FALSE;
    end if;

    if  not raisesNumericError(sqrt(                  -1)) or
        not raisesNumericError(sqrt(                  -2)) or
        not raisesNumericError(sqrt(                  -3)) or
        not raisesNumericError(sqrt(                  -4)) or
        not raisesNumericError(sqrt(                  -5)) or
        not raisesNumericError(sqrt(                  -8)) or
        not raisesNumericError(sqrt(                  -9)) or
        not raisesNumericError(sqrt(                 -15)) or
        not raisesNumericError(sqrt(                 -16)) or
        not raisesNumericError(sqrt(                 -24)) or
        not raisesNumericError(sqrt(                 -25)) or
        not raisesNumericError(sqrt(                 -35)) or
        not raisesNumericError(sqrt(                 -36)) or
        not raisesNumericError(sqrt(                 -48)) or
        not raisesNumericError(sqrt(                 -49)) or
        not raisesNumericError(sqrt(                 -63)) or
        not raisesNumericError(sqrt(                 -64)) or
        not raisesNumericError(sqrt(                 -80)) or
        not raisesNumericError(sqrt(                 -81)) or
        not raisesNumericError(sqrt(                -128)) or
        not raisesNumericError(sqrt(                -129)) or
        not raisesNumericError(sqrt(                -255)) or
        not raisesNumericError(sqrt(                -256)) or
        not raisesNumericError(sqrt(                -257)) or
        not raisesNumericError(sqrt(               -1000)) or
        not raisesNumericError(sqrt(              -10000)) or
        not raisesNumericError(sqrt(              -32767)) or
        not raisesNumericError(sqrt(              -32768)) or
        not raisesNumericError(sqrt(              -32769)) or
        not raisesNumericError(sqrt(              -65535)) or
        not raisesNumericError(sqrt(              -65536)) or
        not raisesNumericError(sqrt(              -65537)) or
        not raisesNumericError(sqrt(             -100000)) or
        not raisesNumericError(sqrt(            -1000000)) or
        not raisesNumericError(sqrt(           -10000000)) or
        not raisesNumericError(sqrt(          -100000000)) or
        not raisesNumericError(sqrt(         -1000000000)) or
        not raisesNumericError(sqrt(         -2147483647)) or
        not raisesNumericError(sqrt(         -2147483648)) or
        not raisesNumericError(sqrt(         -2147483649)) or
        not raisesNumericError(sqrt(         -4294967295)) or
        not raisesNumericError(sqrt(         -4294967296)) or
        not raisesNumericError(sqrt(         -4294967297)) or
        not raisesNumericError(sqrt(        -10000000000)) or
        not raisesNumericError(sqrt(       -100000000000)) or
        not raisesNumericError(sqrt(      -1000000000000)) or
        not raisesNumericError(sqrt(     -10000000000000)) or
        not raisesNumericError(sqrt(    -100000000000000)) or
        not raisesNumericError(sqrt(   -1000000000000000)) or
        not raisesNumericError(sqrt(  -10000000000000000)) or
        not raisesNumericError(sqrt( -100000000000000000)) or
        not raisesNumericError(sqrt(-1000000000000000000)) or
        not raisesNumericError(sqrt(-9223372030926249000)) or
        not raisesNumericError(sqrt(-9223372030926249001)) or
        not raisesNumericError(sqrt(       integer.first)) then
      writeln(" ***** The integer square root of a negative number does not raise NUMERIC_ERROR.");
      okay := FALSE;
    end if;

    if  not raisesNumericError(sqrt(intExpr(                  -1))) or
        not raisesNumericError(sqrt(intExpr(                  -2))) or
        not raisesNumericError(sqrt(intExpr(                  -3))) or
        not raisesNumericError(sqrt(intExpr(                  -4))) or
        not raisesNumericError(sqrt(intExpr(                  -5))) or
        not raisesNumericError(sqrt(intExpr(                  -8))) or
        not raisesNumericError(sqrt(intExpr(                  -9))) or
        not raisesNumericError(sqrt(intExpr(                 -15))) or
        not raisesNumericError(sqrt(intExpr(                 -16))) or
        not raisesNumericError(sqrt(intExpr(                 -24))) or
        not raisesNumericError(sqrt(intExpr(                 -25))) or
        not raisesNumericError(sqrt(intExpr(                 -35))) or
        not raisesNumericError(sqrt(intExpr(                 -36))) or
        not raisesNumericError(sqrt(intExpr(                 -48))) or
        not raisesNumericError(sqrt(intExpr(                 -49))) or
        not raisesNumericError(sqrt(intExpr(                 -63))) or
        not raisesNumericError(sqrt(intExpr(                 -64))) or
        not raisesNumericError(sqrt(intExpr(                 -80))) or
        not raisesNumericError(sqrt(intExpr(                 -81))) or
        not raisesNumericError(sqrt(intExpr(                -128))) or
        not raisesNumericError(sqrt(intExpr(                -129))) or
        not raisesNumericError(sqrt(intExpr(                -255))) or
        not raisesNumericError(sqrt(intExpr(                -256))) or
        not raisesNumericError(sqrt(intExpr(                -257))) or
        not raisesNumericError(sqrt(intExpr(               -1000))) or
        not raisesNumericError(sqrt(intExpr(              -10000))) or
        not raisesNumericError(sqrt(intExpr(              -32767))) or
        not raisesNumericError(sqrt(intExpr(              -32768))) or
        not raisesNumericError(sqrt(intExpr(              -32769))) or
        not raisesNumericError(sqrt(intExpr(              -65535))) or
        not raisesNumericError(sqrt(intExpr(              -65536))) or
        not raisesNumericError(sqrt(intExpr(              -65537))) or
        not raisesNumericError(sqrt(intExpr(             -100000))) or
        not raisesNumericError(sqrt(intExpr(            -1000000))) or
        not raisesNumericError(sqrt(intExpr(           -10000000))) or
        not raisesNumericError(sqrt(intExpr(          -100000000))) or
        not raisesNumericError(sqrt(intExpr(         -1000000000))) or
        not raisesNumericError(sqrt(intExpr(         -2147483647))) or
        not raisesNumericError(sqrt(intExpr(         -2147483648))) or
        not raisesNumericError(sqrt(intExpr(         -2147483649))) or
        not raisesNumericError(sqrt(intExpr(         -4294967295))) or
        not raisesNumericError(sqrt(intExpr(         -4294967296))) or
        not raisesNumericError(sqrt(intExpr(         -4294967297))) or
        not raisesNumericError(sqrt(intExpr(        -10000000000))) or
        not raisesNumericError(sqrt(intExpr(       -100000000000))) or
        not raisesNumericError(sqrt(intExpr(      -1000000000000))) or
        not raisesNumericError(sqrt(intExpr(     -10000000000000))) or
        not raisesNumericError(sqrt(intExpr(    -100000000000000))) or
        not raisesNumericError(sqrt(intExpr(   -1000000000000000))) or
        not raisesNumericError(sqrt(intExpr(  -10000000000000000))) or
        not raisesNumericError(sqrt(intExpr( -100000000000000000))) or
        not raisesNumericError(sqrt(intExpr(-1000000000000000000))) or
        not raisesNumericError(sqrt(intExpr(-9223372030926249000))) or
        not raisesNumericError(sqrt(intExpr(-9223372030926249001))) or
        not raisesNumericError(sqrt(intExpr(       integer.first))) then
      writeln(" ***** The integer square root of a negative expression does not raise NUMERIC_ERROR.");
      okay := FALSE;
    end if;

    if okay then
      writeln("The integer square root works correct.");
    else
      writeln(" ***** The integer square root does not work correct.");
      writeln;
    end if;
  end func;


const proc: check_log2 is func
  local
    var boolean: okay is TRUE;
    var boolean: okay2 is TRUE;
    var integer: number is 0;
    var integer: power_of_two is 0;
    var integer: counter is 0;
    var integer: log2_arg is 0;
    var integer: log2_num is 0;
  begin
    if  log2(                  0) <>  -1 or
        log2(                  1) <>   0 or
        log2(                  2) <>   1 or
        log2(                  3) <>   1 or
        log2(                  4) <>   2 or
        log2(                  5) <>   2 or
        log2(                  6) <>   2 or
        log2(                  7) <>   2 or
        log2(                  8) <>   3 or
        log2(                  9) <>   3 or
        log2(                 10) <>   3 or
        log2(                 15) <>   3 or
        log2(                 16) <>   4 or
        log2(                 25) <>   4 or
        log2(                 31) <>   4 or
        log2(                 32) <>   5 or
        log2(                 50) <>   5 or
        log2(                 63) <>   5 or
        log2(                 64) <>   6 or
        log2(                 71) <>   6 or
        log2(                127) <>   6 or
        log2(                128) <>   7 or
        log2(                243) <>   7 or
        log2(                255) <>   7 or
        log2(                256) <>   8 or
        log2(                467) <>   8 or
        log2(                511) <>   8 or
        log2(                512) <>   9 or
        log2(                873) <>   9 or
        log2(               1023) <>   9 or
        log2(               1024) <>  10 or
        log2(               1715) <>  10 or
        log2(               2047) <>  10 or
        log2(               2048) <>  11 or
        log2(               3761) <>  11 or
        log2(               4095) <>  11 or
        log2(               4096) <>  12 or
        log2(               5965) <>  12 or
        log2(               8191) <>  12 or
        log2(               8192) <>  13 or
        log2(              10445) <>  13 or
        log2(              16383) <>  13 or
        log2(              16384) <>  14 or
        log2(              22490) <>  14 or
        log2(              32767) <>  14 or
        log2(              32768) <>  15 or
        log2(              46524) <>  15 or
        log2(              65535) <>  15 or
        log2(              65536) <>  16 or
        log2(             106275) <>  16 or
        log2(             131071) <>  16 or
        log2(             131072) <>  17 or
        log2(             206206) <>  17 or
        log2(             262143) <>  17 or
        log2(             262144) <>  18 or
        log2(             415694) <>  18 or
        log2(             524287) <>  18 or
        log2(             524288) <>  19 or
        log2(             923667) <>  19 or
        log2(            1048575) <>  19 or
        log2(            1048576) <>  20 or
        log2(            1430124) <>  20 or
        log2(            2097151) <>  20 or
        log2(            2097152) <>  21 or
        log2(            3297211) <>  21 or
        log2(            4194303) <>  21 or
        log2(            4194304) <>  22 or
        log2(            5622078) <>  22 or
        log2(            8388607) <>  22 or
        log2(            8388608) <>  23 or
        log2(           11404725) <>  23 or
        log2(           16777215) <>  23 or
        log2(           16777216) <>  24 or
        log2(           23839458) <>  24 or
        log2(           33554431) <>  24 or
        log2(           33554432) <>  25 or
        log2(           51314883) <>  25 or
        log2(           67108863) <>  25 or
        log2(           67108864) <>  26 or
        log2(          118996825) <>  26 or
        log2(          134217727) <>  26 or
        log2(          134217728) <>  27 or
        log2(          226885284) <>  27 or
        log2(          268435455) <>  27 or
        log2(          268435456) <>  28 or
        log2(          374980260) <>  28 or
        log2(          536870911) <>  28 or
        log2(          536870912) <>  29 or
        log2(          697499480) <>  29 or
        log2(         1073741823) <>  29 or
        log2(         1073741824) <>  30 or
        log2(         1597096129) <>  30 or
        log2(         2147483647) <>  30 or
        log2(         2147483648) <>  31 or
        log2(         3073770207) <>  31 or
        log2(         4294967295) <>  31 or
        log2(         4294967296) <>  32 or
        log2(         6469698993) <>  32 or
        log2(         8589934591) <>  32 or
        log2(         8589934592) <>  33 or
        log2(        13650611573) <>  33 or
        log2(        17179869183) <>  33 or
        log2(        17179869184) <>  34 or
        log2(        25287317515) <>  34 or
        log2(        34359738367) <>  34 or
        log2(        34359738368) <>  35 or
        log2(        34937365876) <>  35 or
        log2(        68719476735) <>  35 or
        log2(        68719476736) <>  36 or
        log2(       130647586224) <>  36 or
        log2(       137438953471) <>  36 or
        log2(       137438953472) <>  37 or
        log2(       237256050880) <>  37 or
        log2(       274877906943) <>  37 or
        log2(       274877906944) <>  38 or
        log2(       421334752930) <>  38 or
        log2(       549755813887) <>  38 or
        log2(       549755813888) <>  39 or
        log2(       831060064087) <>  39 or
        log2(      1099511627775) <>  39 or
        log2(      1099511627776) <>  40 or
        log2(      1872306393824) <>  40 or
        log2(      2199023255551) <>  40 or
        log2(      2199023255552) <>  41 or
        log2(      3817804165435) <>  41 or
        log2(      4398046511103) <>  41 or
        log2(      4398046511104) <>  42 or
        log2(      4470677607017) <>  42 or
        log2(      8796093022207) <>  42 or
        log2(      8796093022208) <>  43 or
        log2(     10425849001579) <>  43 or
        log2(     17592186044415) <>  43 or
        log2(     17592186044416) <>  44 or
        log2(     19482147609919) <>  44 or
        log2(     35184372088831) <>  44 or
        log2(     35184372088832) <>  45 or
        log2(     66834682939110) <>  45 or
        log2(     70368744177663) <>  45 or
        log2(     70368744177664) <>  46 or
        log2(     82108268360545) <>  46 or
        log2(    140737488355327) <>  46 or
        log2(    140737488355328) <>  47 or
        log2(    206038244745902) <>  47 or
        log2(    281474976710655) <>  47 or
        log2(    281474976710656) <>  48 or
        log2(    544184170812622) <>  48 or
        log2(    562949953421311) <>  48 or
        log2(    562949953421312) <>  49 or
        log2(    603954099898818) <>  49 or
        log2(   1125899906842623) <>  49 or
        log2(   1125899906842624) <>  50 or
        log2(   1511254381298056) <>  50 or
        log2(   2251799813685247) <>  50 or
        log2(   2251799813685248) <>  51 or
        log2(   2421662232362017) <>  51 or
        log2(   4503599627370495) <>  51 or
        log2(   4503599627370496) <>  52 or
        log2(   5024025365870990) <>  52 or
        log2(   9007199254740991) <>  52 or
        log2(   9007199254740992) <>  53 or
        log2(  16073745370364365) <>  53 or
        log2(  18014398509481983) <>  53 or
        log2(  18014398509481984) <>  54 or
        log2(  24311821029932255) <>  54 or
        log2(  36028797018963967) <>  54 or
        log2(  36028797018963968) <>  55 or
        log2(  56759843666346693) <>  55 or
        log2(  72057594037927935) <>  55 or
        log2(  72057594037927936) <>  56 or
        log2( 113417824017025917) <>  56 or
        log2( 144115188075855871) <>  56 or
        log2( 144115188075855872) <>  57 or
        log2( 176271357130037000) <>  57 or
        log2( 288230376151711743) <>  57 or
        log2( 288230376151711744) <>  58 or
        log2( 497522024285611367) <>  58 or
        log2( 576460752303423487) <>  58 or
        log2( 576460752303423488) <>  59 or
        log2( 644824263403665048) <>  59 or
        log2(1152921504606846975) <>  59 or
        log2(1152921504606846976) <>  60 or
        log2(2059329953095273116) <>  60 or
        log2(2305843009213693951) <>  60 or
        log2(2305843009213693952) <>  61 or
        log2(4164578334614561140) <>  61 or
        log2(4611686018427387903) <>  61 or
        log2(4611686018427387904) <>  62 or
        log2(5807647918387067678) <>  62 or
        log2(9223372036854775807) <>  62 then
      writeln("The integer log2 function does not work correct.");
      okay := FALSE;
    end if;

    power_of_two := 1;
    for number range 0 to 62 do
      for counter range 1 to 200 do
        log2_arg := power_of_two + rand(0, power_of_two div 2);
        log2_num := log2(log2_arg);
        if log2_num <> number then
          write("log2(");
          write(log2_arg);
          write(") = ");
          write(log2_num);
          write(" instead of ");
          writeln(number);
          okay2 := FALSE;
        end if;
      end for;
      if number < 62 then
        power_of_two := power_of_two * 2;
      end if;
    end for;
    if not okay2 then
      writeln("The integer log2 function does not work correct for random values.");
      okay := FALSE;
    end if;

    if  not raisesNumericError(log2(                    INT64_MIN )) or
        not raisesNumericError(log2(         -9223372036854775807 )) or
        not raisesNumericError(log2(                  -4294967296 )) or
        not raisesNumericError(log2(                  -4294967295 )) or
        not raisesNumericError(log2(                  -2147483648 )) or
        not raisesNumericError(log2(                  -2147483647 )) or
        not raisesNumericError(log2(                       -65536 )) or
        not raisesNumericError(log2(                       -65535 )) or
        not raisesNumericError(log2(                       -32768 )) or
        not raisesNumericError(log2(                       -32767 )) or
        not raisesNumericError(log2(                         -256 )) or
        not raisesNumericError(log2(                         -255 )) or
        not raisesNumericError(log2(                         -128 )) or
        not raisesNumericError(log2(                         -127 )) or
        not raisesNumericError(log2(                           -1 )) or
        not raisesNumericError(log2(intExpr(            INT64_MIN))) or
        not raisesNumericError(log2(intExpr( -9223372036854775807))) or
        not raisesNumericError(log2(intExpr(          -4294967296))) or
        not raisesNumericError(log2(intExpr(          -4294967295))) or
        not raisesNumericError(log2(intExpr(          -2147483648))) or
        not raisesNumericError(log2(intExpr(          -2147483647))) or
        not raisesNumericError(log2(intExpr(               -65536))) or
        not raisesNumericError(log2(intExpr(               -65535))) or
        not raisesNumericError(log2(intExpr(               -32768))) or
        not raisesNumericError(log2(intExpr(               -32767))) or
        not raisesNumericError(log2(intExpr(                 -256))) or
        not raisesNumericError(log2(intExpr(                 -255))) or
        not raisesNumericError(log2(intExpr(                 -128))) or
        not raisesNumericError(log2(intExpr(                 -127))) or
        not raisesNumericError(log2(intExpr(                   -1))) then
      writeln(" ***** The integer log2 of negative number does not raise NUMERIC_ERROR.");
      okay := FALSE;
    end if;

    if okay then
      writeln("The integer log2 function works correct.");
    else
      writeln(" ***** The integer log2 function does not work correct.");
      writeln;
    end if;
  end func;


const proc: check_log10 is func
  local
    var boolean: okay is TRUE;
  begin
    if  log10(                  0) <> -1 or
        log10(                  1) <>  0 or
        log10(                  9) <>  0 or
        log10(                 10) <>  1 or
        log10(                 99) <>  1 or
        log10(                100) <>  2 or
        log10(                999) <>  2 or
        log10(               1000) <>  3 or
        log10(               9999) <>  3 or
        log10(              10000) <>  4 or
        log10(              99999) <>  4 or
        log10(             100000) <>  5 or
        log10(             999999) <>  5 or
        log10(            1000000) <>  6 or
        log10(            9999999) <>  6 or
        log10(           10000000) <>  7 or
        log10(           99999999) <>  7 or
        log10(          100000000) <>  8 or
        log10(          999999999) <>  8 or
        log10(         1000000000) <>  9 or
        log10(         9999999999) <>  9 or
        log10(        10000000000) <> 10 or
        log10(        99999999999) <> 10 or
        log10(       100000000000) <> 11 or
        log10(       999999999999) <> 11 or
        log10(      1000000000000) <> 12 or
        log10(      9999999999999) <> 12 or
        log10(     10000000000000) <> 13 or
        log10(     99999999999999) <> 13 or
        log10(    100000000000000) <> 14 or
        log10(    999999999999999) <> 14 or
        log10(   1000000000000000) <> 15 or
        log10(   9999999999999999) <> 15 or
        log10(  10000000000000000) <> 16 or
        log10(  99999999999999999) <> 16 or
        log10( 100000000000000000) <> 17 or
        log10( 999999999999999999) <> 17 or
        log10(1000000000000000000) <> 18 or
        log10(9223372036854775807) <> 18 then
      writeln("The integer log10 function does not work correct.");
      okay := FALSE;
    end if;

    if  not raisesNumericError(log10(                    INT64_MIN )) or
        not raisesNumericError(log10(         -9223372036854775807 )) or
        not raisesNumericError(log10(                  -4294967296 )) or
        not raisesNumericError(log10(                  -4294967295 )) or
        not raisesNumericError(log10(                  -2147483648 )) or
        not raisesNumericError(log10(                  -2147483647 )) or
        not raisesNumericError(log10(                       -65536 )) or
        not raisesNumericError(log10(                       -65535 )) or
        not raisesNumericError(log10(                       -32768 )) or
        not raisesNumericError(log10(                       -32767 )) or
        not raisesNumericError(log10(                         -256 )) or
        not raisesNumericError(log10(                         -255 )) or
        not raisesNumericError(log10(                         -128 )) or
        not raisesNumericError(log10(                         -127 )) or
        not raisesNumericError(log10(                           -1 )) or
        not raisesNumericError(log10(intExpr(            INT64_MIN))) or
        not raisesNumericError(log10(intExpr( -9223372036854775807))) or
        not raisesNumericError(log10(intExpr(          -4294967296))) or
        not raisesNumericError(log10(intExpr(          -4294967295))) or
        not raisesNumericError(log10(intExpr(          -2147483648))) or
        not raisesNumericError(log10(intExpr(          -2147483647))) or
        not raisesNumericError(log10(intExpr(               -65536))) or
        not raisesNumericError(log10(intExpr(               -65535))) or
        not raisesNumericError(log10(intExpr(               -32768))) or
        not raisesNumericError(log10(intExpr(               -32767))) or
        not raisesNumericError(log10(intExpr(                 -256))) or
        not raisesNumericError(log10(intExpr(                 -255))) or
        not raisesNumericError(log10(intExpr(                 -128))) or
        not raisesNumericError(log10(intExpr(                 -127))) or
        not raisesNumericError(log10(intExpr(                   -1))) then
      writeln(" ***** The integer log10 of negative number does not raise NUMERIC_ERROR.");
      okay := FALSE;
    end if;

    if okay then
      writeln("The integer log10 function works correct.");
    else
      writeln(" ***** The integer log10 function does not work correct.");
      writeln;
    end if;
  end func;


(**
 *  Tests for the compiler optimization to reduce overflow checking
 *  for lshift.
 *)
const func boolean: check_reduced_overflow_checking_for_lshift is func
  result
    var boolean: okay is TRUE;
  begin
    if  (intExpr(integer.first) >>  0) <<  0 <>       integer.first or
        (intExpr(integer.first) >>  1) <<  1 <>       integer.first or
        (intExpr(integer.first) >> 30) << 30 <>       integer.first or
        (intExpr(integer.first) >> 62) << 62 <>       integer.first or
        (intExpr(integer.first) >> 63) << 63 <>       integer.first then
      writeln(" ***** Reduced overflow check for lshift failed: Minimum rshift result if the shift amount is known.");
      okay := FALSE;
    end if;

    if  (intExpr( integer.last) >>  0) <<  0 <>        integer.last or
        (intExpr( integer.last) >>  1) <<  1 <> 9223372036854775806 or
        (intExpr( integer.last) >> 30) << 30 <> 9223372035781033984 or
        (intExpr( integer.last) >> 62) << 62 <> 4611686018427387904 or
        (intExpr( integer.last) >> 63) << 63 <>                   0 then
      writeln(" ***** Reduced overflow check for lshift failed: Maximum rshift result if the shift amount is known.");
      okay := FALSE;
    end if;

    if  (       integer.first >> intExpr( 0)) <<  0 <>        integer.first or
        (       integer.first >> intExpr(63)) <<  0 <>                   -1 or
        (       -integer.last >> intExpr( 0)) <<  0 <>        -integer.last or
        (       -integer.last >> intExpr(63)) <<  0 <>                   -1 or
        (-4611686018427387905 >> intExpr( 0)) <<  0 <> -4611686018427387905 or
        (-4611686018427387905 >> intExpr(63)) <<  0 <>                   -1 or
        (-4611686018427387904 >> intExpr( 0)) <<  1 <>        integer.first or
        (-4611686018427387904 >> intExpr(62)) <<  1 <>                   -2 or
        (         -8589934593 >> intExpr( 0)) << 29 <> -4611686018964258816 or
        (         -8589934593 >> intExpr(34)) << 29 <>           -536870912 or
        (         -8589934592 >> intExpr( 0)) << 30 <>        integer.first or
        (         -8589934592 >> intExpr(33)) << 30 <>          -1073741824 or
        (         -1234567890 >> intExpr( 0)) << 32 <> -5302428712241725440 or
        (         -1234567890 >> intExpr(31)) << 32 <>          -4294967296 or
        (                  -2 >> intExpr( 0)) << 62 <>        integer.first or
        (                  -2 >> intExpr( 1)) << 62 <> -4611686018427387904 or
        (                  -1 >> intExpr( 0)) << 63 <>        integer.first then
      writeln(" ***** Reduced overflow check for lshift failed: Minimum rshift result if the shifted value is known.");
      okay := FALSE;
    end if;

    if  (                   0 >> intExpr( 0)) << 63 <>                    0 or
        (                   1 >> intExpr( 0)) << 62 <>  4611686018427387904 or
        (                   1 >> intExpr( 1)) << 62 <>                    0 or
        (                   2 >> intExpr( 0)) << 61 <>  4611686018427387904 or
        (                   2 >> intExpr( 2)) << 61 <>                    0 or
        (          1234567890 >> intExpr( 0)) << 32 <>  5302428712241725440 or
        (          1234567890 >> intExpr(31)) << 32 <>                    0 or
        (          8589934591 >> intExpr( 0)) << 30 <>  9223372035781033984 or
        (          8589934591 >> intExpr(33)) << 30 <>                    0 or
        (          8589934592 >> intExpr( 0)) << 29 <>  4611686018427387904 or
        (          8589934592 >> intExpr(34)) << 29 <>                    0 or
        ( 4611686018427387903 >> intExpr( 0)) <<  1 <>  9223372036854775806 or
        ( 4611686018427387903 >> intExpr(62)) <<  1 <>                    0 or
        ( 4611686018427387904 >> intExpr( 0)) <<  0 <>  4611686018427387904 or
        ( 4611686018427387904 >> intExpr(63)) <<  0 <>                    0 or
        (        integer.last >> intExpr( 0)) <<  0 <>         integer.last or
        (        integer.last >> intExpr(63)) <<  0 <>                    0 then
      writeln(" ***** Reduced overflow check for lshift failed: Maximum rshift result if the shifted value is known.");
      okay := FALSE;
    end if;
  end func;


const func boolean: chkLShift (in integer: number, in integer: lshift,
    in integer: checkValue) is func
  result
    var boolean: wrong is FALSE;
  local
    var integer: intVar is 0;
  begin
    wrong := number << lshift <> checkValue;
    if not wrong then
      intVar := number;
      intVar <<:= lshift;
      wrong := intVar <> checkValue;
    end if;
  end func;


const func boolean: chkLShift (in integer: number, in integer: lshift) is func
  result
    var boolean: wrong is FALSE;
  begin
    if lshift = 31 and number = 0 then
      # writeln(number <& " << " <& lshift);
      wrong := chkLShift(number, lshift, 0);
    elsif lshift = 31 and number = -1 then
      # writeln(number <& " << " <& lshift);
      wrong := chkLShift(number, lshift, INT32_MIN);
    elsif lshift <= 30 and
        number <= 2147483647 mdiv 2 ** lshift and
        number >= INT32_MIN mdiv 2 ** lshift then
      # writeln(number <& " << " <& lshift);
      wrong := chkLShift(number, lshift, number * 2 ** lshift);
    end if;
  end func;


const proc: chkLShift (in integer: lshift, inout boolean: okay) is func
  begin
    if  chkLShift( 2147483647, lshift) or
        chkLShift( 1073741824, lshift) or
        chkLShift( 1073741823, lshift) or
        chkLShift( 1000000000, lshift) or
        chkLShift(  100000000, lshift) or
        chkLShift(   10000000, lshift) or
        chkLShift(    1000000, lshift) or
        chkLShift(     100000, lshift) or
        chkLShift(      65536, lshift) or
        chkLShift(      65535, lshift) or
        chkLShift(      32768, lshift) or
        chkLShift(      32767, lshift) or
        chkLShift(      10000, lshift) or
        chkLShift(       1000, lshift) or
        chkLShift(        256, lshift) or
        chkLShift(        255, lshift) or
        chkLShift(        128, lshift) or
        chkLShift(        127, lshift) or
        chkLShift(        100, lshift) or
        chkLShift(         17, lshift) or
        chkLShift(         16, lshift) or
        chkLShift(         15, lshift) or
        chkLShift(         10, lshift) or
        chkLShift(          9, lshift) or
        chkLShift(          8, lshift) or
        chkLShift(          7, lshift) or
        chkLShift(          5, lshift) or
        chkLShift(          4, lshift) or
        chkLShift(          3, lshift) or
        chkLShift(          2, lshift) or
        chkLShift(          1, lshift) or
        chkLShift(          0, lshift) or
        chkLShift(         -1, lshift) or
        chkLShift(         -2, lshift) or
        chkLShift(         -3, lshift) or
        chkLShift(         -4, lshift) or
        chkLShift(         -5, lshift) or
        chkLShift(         -7, lshift) or
        chkLShift(         -8, lshift) or
        chkLShift(         -9, lshift) or
        chkLShift(        -10, lshift) or
        chkLShift(        -15, lshift) or
        chkLShift(        -16, lshift) or
        chkLShift(        -17, lshift) or
        chkLShift(       -100, lshift) or
        chkLShift(       -128, lshift) or
        chkLShift(       -129, lshift) or
        chkLShift(       -256, lshift) or
        chkLShift(       -257, lshift) or
        chkLShift(      -1000, lshift) or
        chkLShift(     -10000, lshift) or
        chkLShift(     -32768, lshift) or
        chkLShift(     -32769, lshift) or
        chkLShift(     -65536, lshift) or
        chkLShift(     -65537, lshift) or
        chkLShift(    -100000, lshift) or
        chkLShift(   -1000000, lshift) or
        chkLShift(  -10000000, lshift) or
        chkLShift( -100000000, lshift) or
        chkLShift(-1000000000, lshift) or
        chkLShift(-1073741824, lshift) or
        chkLShift(-1073741825, lshift) or
        chkLShift(-2147483647, lshift) or
        chkLShift(  INT32_MIN, lshift) then
      writeln("The integer << or <<:= with " <& lshift <& " does not work correct.");
      okay := FALSE;
    end if;
  end func;


const proc: check_lShift is func
  local
    var boolean: okay is TRUE;
    var integer: lshift is 0;
    var boolean: ok is TRUE;
    var integer: num is 0;
    var array integer: arr is [] (0);
  begin
    for lshift range 0 to 31 do
      chkLShift(lshift, okay);
    end for;

    if  -9223372036854775807 <<  0 <> -9223372036854775807 or
        -4611686018427387903 <<  1 <> -9223372036854775806 or
        -2305843009213693951 <<  2 <> -9223372036854775804 or
        -1152921504606846975 <<  3 <> -9223372036854775800 or
         -576460752303423487 <<  4 <> -9223372036854775792 or
         -288230376151711743 <<  5 <> -9223372036854775776 or
           -9007199254740991 << 10 <> -9223372036854774784 or
            -281474976710655 << 15 <> -9223372036854743040 or
              -8796093022207 << 20 <> -9223372036853727232 or
               -274877906943 << 25 <> -9223372036821221376 or
                 -8589934591 << 30 <> -9223372035781033984 or
                  -268435455 << 35 <> -9223372002495037440 or
                    -8388607 << 40 <> -9223370937343148032 or
                     -262143 << 45 <> -9223336852482686976 or
                       -8191 << 50 <> -9222246136947933184 or
                        -255 << 55 <> -9187343239835811840 or
                          -7 << 60 <> -8070450532247928832 or
                          -3 << 61 <> -6917529027641081856 or
                          -1 << 62 <> -4611686018427387904 or
                           0 << 63 <>                    0 or
                           1 << 62 <>  4611686018427387904 or
                           3 << 61 <>  6917529027641081856 or
                           7 << 60 <>  8070450532247928832 or
                         255 << 55 <>  9187343239835811840 or
                        8191 << 50 <>  9222246136947933184 or
                      262143 << 45 <>  9223336852482686976 or
                     8388607 << 40 <>  9223370937343148032 or
                   268435455 << 35 <>  9223372002495037440 or
                  8589934591 << 30 <>  9223372035781033984 or
                274877906943 << 25 <>  9223372036821221376 or
               8796093022207 << 20 <>  9223372036853727232 or
             281474976710655 << 15 <>  9223372036854743040 or
            9007199254740991 << 10 <>  9223372036854774784 or
          288230376151711743 <<  5 <>  9223372036854775776 or
          576460752303423487 <<  4 <>  9223372036854775792 or
         1152921504606846975 <<  3 <>  9223372036854775800 or
         2305843009213693951 <<  2 <>  9223372036854775804 or
         4611686018427387903 <<  1 <>  9223372036854775806 or
         9223372036854775807 <<  0 <>  9223372036854775807 or
        intExpr(-9223372036854775807) <<  0 <> -9223372036854775807 or
        intExpr(-4611686018427387903) <<  1 <> -9223372036854775806 or
        intExpr(-2305843009213693951) <<  2 <> -9223372036854775804 or
        intExpr(-1152921504606846975) <<  3 <> -9223372036854775800 or
        intExpr( -576460752303423487) <<  4 <> -9223372036854775792 or
        intExpr( -288230376151711743) <<  5 <> -9223372036854775776 or
        intExpr(   -9007199254740991) << 10 <> -9223372036854774784 or
        intExpr(    -281474976710655) << 15 <> -9223372036854743040 or
        intExpr(      -8796093022207) << 20 <> -9223372036853727232 or
        intExpr(       -274877906943) << 25 <> -9223372036821221376 or
        intExpr(         -8589934591) << 30 <> -9223372035781033984 or
        intExpr(          -268435455) << 35 <> -9223372002495037440 or
        intExpr(            -8388607) << 40 <> -9223370937343148032 or
        intExpr(             -262143) << 45 <> -9223336852482686976 or
        intExpr(               -8191) << 50 <> -9222246136947933184 or
        intExpr(                -255) << 55 <> -9187343239835811840 or
        intExpr(                  -7) << 60 <> -8070450532247928832 or
        intExpr(                  -3) << 61 <> -6917529027641081856 or
        intExpr(                  -1) << 62 <> -4611686018427387904 or
        intExpr(                   0) << 63 <>                    0 or
        intExpr(                   1) << 62 <>  4611686018427387904 or
        intExpr(                   3) << 61 <>  6917529027641081856 or
        intExpr(                   7) << 60 <>  8070450532247928832 or
        intExpr(                 255) << 55 <>  9187343239835811840 or
        intExpr(                8191) << 50 <>  9222246136947933184 or
        intExpr(              262143) << 45 <>  9223336852482686976 or
        intExpr(             8388607) << 40 <>  9223370937343148032 or
        intExpr(           268435455) << 35 <>  9223372002495037440 or
        intExpr(          8589934591) << 30 <>  9223372035781033984 or
        intExpr(        274877906943) << 25 <>  9223372036821221376 or
        intExpr(       8796093022207) << 20 <>  9223372036853727232 or
        intExpr(     281474976710655) << 15 <>  9223372036854743040 or
        intExpr(    9007199254740991) << 10 <>  9223372036854774784 or
        intExpr(  288230376151711743) <<  5 <>  9223372036854775776 or
        intExpr(  576460752303423487) <<  4 <>  9223372036854775792 or
        intExpr( 1152921504606846975) <<  3 <>  9223372036854775800 or
        intExpr( 2305843009213693951) <<  2 <>  9223372036854775804 or
        intExpr( 4611686018427387903) <<  1 <>  9223372036854775806 or
        intExpr( 9223372036854775807) <<  0 <>  9223372036854775807 or
        -9223372036854775807 << intExpr( 0) <> -9223372036854775807 or
        -4611686018427387903 << intExpr( 1) <> -9223372036854775806 or
        -2305843009213693951 << intExpr( 2) <> -9223372036854775804 or
        -1152921504606846975 << intExpr( 3) <> -9223372036854775800 or
         -576460752303423487 << intExpr( 4) <> -9223372036854775792 or
         -288230376151711743 << intExpr( 5) <> -9223372036854775776 or
           -9007199254740991 << intExpr(10) <> -9223372036854774784 or
            -281474976710655 << intExpr(15) <> -9223372036854743040 or
              -8796093022207 << intExpr(20) <> -9223372036853727232 or
               -274877906943 << intExpr(25) <> -9223372036821221376 or
                 -8589934591 << intExpr(30) <> -9223372035781033984 or
                  -268435455 << intExpr(35) <> -9223372002495037440 or
                    -8388607 << intExpr(40) <> -9223370937343148032 or
                     -262143 << intExpr(45) <> -9223336852482686976 or
                       -8191 << intExpr(50) <> -9222246136947933184 or
                        -255 << intExpr(55) <> -9187343239835811840 or
                          -7 << intExpr(60) <> -8070450532247928832 or
                          -3 << intExpr(61) <> -6917529027641081856 or
                          -1 << intExpr(62) <> -4611686018427387904 or
                           0 << intExpr(63) <>                    0 or
                           1 << intExpr(62) <>  4611686018427387904 or
                           3 << intExpr(61) <>  6917529027641081856 or
                           7 << intExpr(60) <>  8070450532247928832 or
                         255 << intExpr(55) <>  9187343239835811840 or
                        8191 << intExpr(50) <>  9222246136947933184 or
                      262143 << intExpr(45) <>  9223336852482686976 or
                     8388607 << intExpr(40) <>  9223370937343148032 or
                   268435455 << intExpr(35) <>  9223372002495037440 or
                  8589934591 << intExpr(30) <>  9223372035781033984 or
                274877906943 << intExpr(25) <>  9223372036821221376 or
               8796093022207 << intExpr(20) <>  9223372036853727232 or
             281474976710655 << intExpr(15) <>  9223372036854743040 or
            9007199254740991 << intExpr(10) <>  9223372036854774784 or
          288230376151711743 << intExpr( 5) <>  9223372036854775776 or
          576460752303423487 << intExpr( 4) <>  9223372036854775792 or
         1152921504606846975 << intExpr( 3) <>  9223372036854775800 or
         2305843009213693951 << intExpr( 2) <>  9223372036854775804 or
         4611686018427387903 << intExpr( 1) <>  9223372036854775806 or
         9223372036854775807 << intExpr( 0) <>  9223372036854775807 or
        intExpr(-9223372036854775807) << intExpr( 0) <> -9223372036854775807 or
        intExpr(-4611686018427387903) << intExpr( 1) <> -9223372036854775806 or
        intExpr(-2305843009213693951) << intExpr( 2) <> -9223372036854775804 or
        intExpr(-1152921504606846975) << intExpr( 3) <> -9223372036854775800 or
        intExpr( -576460752303423487) << intExpr( 4) <> -9223372036854775792 or
        intExpr( -288230376151711743) << intExpr( 5) <> -9223372036854775776 or
        intExpr(   -9007199254740991) << intExpr(10) <> -9223372036854774784 or
        intExpr(    -281474976710655) << intExpr(15) <> -9223372036854743040 or
        intExpr(      -8796093022207) << intExpr(20) <> -9223372036853727232 or
        intExpr(       -274877906943) << intExpr(25) <> -9223372036821221376 or
        intExpr(         -8589934591) << intExpr(30) <> -9223372035781033984 or
        intExpr(          -268435455) << intExpr(35) <> -9223372002495037440 or
        intExpr(            -8388607) << intExpr(40) <> -9223370937343148032 or
        intExpr(             -262143) << intExpr(45) <> -9223336852482686976 or
        intExpr(               -8191) << intExpr(50) <> -9222246136947933184 or
        intExpr(                -255) << intExpr(55) <> -9187343239835811840 or
        intExpr(                  -7) << intExpr(60) <> -8070450532247928832 or
        intExpr(                  -3) << intExpr(61) <> -6917529027641081856 or
        intExpr(                  -1) << intExpr(62) <> -4611686018427387904 or
        intExpr(                   0) << intExpr(63) <>                    0 or
        intExpr(                   1) << intExpr(62) <>  4611686018427387904 or
        intExpr(                   3) << intExpr(61) <>  6917529027641081856 or
        intExpr(                   7) << intExpr(60) <>  8070450532247928832 or
        intExpr(                 255) << intExpr(55) <>  9187343239835811840 or
        intExpr(                8191) << intExpr(50) <>  9222246136947933184 or
        intExpr(              262143) << intExpr(45) <>  9223336852482686976 or
        intExpr(             8388607) << intExpr(40) <>  9223370937343148032 or
        intExpr(           268435455) << intExpr(35) <>  9223372002495037440 or
        intExpr(          8589934591) << intExpr(30) <>  9223372035781033984 or
        intExpr(        274877906943) << intExpr(25) <>  9223372036821221376 or
        intExpr(       8796093022207) << intExpr(20) <>  9223372036853727232 or
        intExpr(     281474976710655) << intExpr(15) <>  9223372036854743040 or
        intExpr(    9007199254740991) << intExpr(10) <>  9223372036854774784 or
        intExpr(  288230376151711743) << intExpr( 5) <>  9223372036854775776 or
        intExpr(  576460752303423487) << intExpr( 4) <>  9223372036854775792 or
        intExpr( 1152921504606846975) << intExpr( 3) <>  9223372036854775800 or
        intExpr( 2305843009213693951) << intExpr( 2) <>  9223372036854775804 or
        intExpr( 4611686018427387903) << intExpr( 1) <>  9223372036854775806 or
        intExpr( 9223372036854775807) << intExpr( 0) <>  9223372036854775807 then
      writeln(" ***** Left shift where bitLength(result) is 63 does not work correct.");
      okay := FALSE;
    end if;

    if             INT64_MIN <<  0 <>            INT64_MIN or
        -4611686018427387904 <<  1 <>            INT64_MIN or
        -2305843009213693952 <<  2 <>            INT64_MIN or
        -1152921504606846976 <<  3 <>            INT64_MIN or
         -576460752303423488 <<  4 <>            INT64_MIN or
         -288230376151711744 <<  5 <>            INT64_MIN or
           -9007199254740992 << 10 <>            INT64_MIN or
            -281474976710656 << 15 <>            INT64_MIN or
              -8796093022208 << 20 <>            INT64_MIN or
               -274877906944 << 25 <>            INT64_MIN or
                 -8589934592 << 30 <>            INT64_MIN or
                  -268435456 << 35 <>            INT64_MIN or
                    -8388608 << 40 <>            INT64_MIN or
                     -262144 << 45 <>            INT64_MIN or
                       -8192 << 50 <>            INT64_MIN or
                        -256 << 55 <>            INT64_MIN or
                          -8 << 60 <>            INT64_MIN or
                          -4 << 61 <>            INT64_MIN or
                          -2 << 62 <>            INT64_MIN or
                          -1 << 63 <>            INT64_MIN or
                           0 << 63 <>                    0 or
                           1 << 62 <>  4611686018427387904 or
                           2 << 61 <>  4611686018427387904 or
                           4 << 60 <>  4611686018427387904 or
                         128 << 55 <>  4611686018427387904 or
                        4096 << 50 <>  4611686018427387904 or
                      131072 << 45 <>  4611686018427387904 or
                     4194304 << 40 <>  4611686018427387904 or
                   134217728 << 35 <>  4611686018427387904 or
                  4294967296 << 30 <>  4611686018427387904 or
                137438953472 << 25 <>  4611686018427387904 or
               4398046511104 << 20 <>  4611686018427387904 or
             140737488355328 << 15 <>  4611686018427387904 or
            4503599627370496 << 10 <>  4611686018427387904 or
          144115188075855872 <<  5 <>  4611686018427387904 or
          288230376151711744 <<  4 <>  4611686018427387904 or
          576460752303423488 <<  3 <>  4611686018427387904 or
         1152921504606846976 <<  2 <>  4611686018427387904 or
         2305843009213693952 <<  1 <>  4611686018427387904 or
         4611686018427387904 <<  0 <>  4611686018427387904 or
        intExpr(           INT64_MIN) <<  0 <>            INT64_MIN or
        intExpr(-4611686018427387904) <<  1 <>            INT64_MIN or
        intExpr(-2305843009213693952) <<  2 <>            INT64_MIN or
        intExpr(-1152921504606846976) <<  3 <>            INT64_MIN or
        intExpr( -576460752303423488) <<  4 <>            INT64_MIN or
        intExpr( -288230376151711744) <<  5 <>            INT64_MIN or
        intExpr(   -9007199254740992) << 10 <>            INT64_MIN or
        intExpr(    -281474976710656) << 15 <>            INT64_MIN or
        intExpr(      -8796093022208) << 20 <>            INT64_MIN or
        intExpr(       -274877906944) << 25 <>            INT64_MIN or
        intExpr(         -8589934592) << 30 <>            INT64_MIN or
        intExpr(          -268435456) << 35 <>            INT64_MIN or
        intExpr(            -8388608) << 40 <>            INT64_MIN or
        intExpr(             -262144) << 45 <>            INT64_MIN or
        intExpr(               -8192) << 50 <>            INT64_MIN or
        intExpr(                -256) << 55 <>            INT64_MIN or
        intExpr(                  -8) << 60 <>            INT64_MIN or
        intExpr(                  -4) << 61 <>            INT64_MIN or
        intExpr(                  -2) << 62 <>            INT64_MIN or
        intExpr(                  -1) << 63 <>            INT64_MIN or
        intExpr(                   0) << 63 <>                    0 or
        intExpr(                   1) << 62 <>  4611686018427387904 or
        intExpr(                   2) << 61 <>  4611686018427387904 or
        intExpr(                   4) << 60 <>  4611686018427387904 or
        intExpr(                 128) << 55 <>  4611686018427387904 or
        intExpr(                4096) << 50 <>  4611686018427387904 or
        intExpr(              131072) << 45 <>  4611686018427387904 or
        intExpr(             4194304) << 40 <>  4611686018427387904 or
        intExpr(           134217728) << 35 <>  4611686018427387904 or
        intExpr(          4294967296) << 30 <>  4611686018427387904 or
        intExpr(        137438953472) << 25 <>  4611686018427387904 or
        intExpr(       4398046511104) << 20 <>  4611686018427387904 or
        intExpr(     140737488355328) << 15 <>  4611686018427387904 or
        intExpr(    4503599627370496) << 10 <>  4611686018427387904 or
        intExpr(  144115188075855872) <<  5 <>  4611686018427387904 or
        intExpr(  288230376151711744) <<  4 <>  4611686018427387904 or
        intExpr(  576460752303423488) <<  3 <>  4611686018427387904 or
        intExpr( 1152921504606846976) <<  2 <>  4611686018427387904 or
        intExpr( 2305843009213693952) <<  1 <>  4611686018427387904 or
        intExpr( 4611686018427387904) <<  0 <>  4611686018427387904 or
                   INT64_MIN << intExpr( 0) <>            INT64_MIN or
        -4611686018427387904 << intExpr( 1) <>            INT64_MIN or
        -2305843009213693952 << intExpr( 2) <>            INT64_MIN or
        -1152921504606846976 << intExpr( 3) <>            INT64_MIN or
         -576460752303423488 << intExpr( 4) <>            INT64_MIN or
         -288230376151711744 << intExpr( 5) <>            INT64_MIN or
           -9007199254740992 << intExpr(10) <>            INT64_MIN or
            -281474976710656 << intExpr(15) <>            INT64_MIN or
              -8796093022208 << intExpr(20) <>            INT64_MIN or
               -274877906944 << intExpr(25) <>            INT64_MIN or
                 -8589934592 << intExpr(30) <>            INT64_MIN or
                  -268435456 << intExpr(35) <>            INT64_MIN or
                    -8388608 << intExpr(40) <>            INT64_MIN or
                     -262144 << intExpr(45) <>            INT64_MIN or
                       -8192 << intExpr(50) <>            INT64_MIN or
                        -256 << intExpr(55) <>            INT64_MIN or
                          -8 << intExpr(60) <>            INT64_MIN or
                          -4 << intExpr(61) <>            INT64_MIN or
                          -2 << intExpr(62) <>            INT64_MIN or
                          -1 << intExpr(63) <>            INT64_MIN or
                           0 << intExpr(63) <>                    0 or
                           1 << intExpr(62) <>  4611686018427387904 or
                           2 << intExpr(61) <>  4611686018427387904 or
                           4 << intExpr(60) <>  4611686018427387904 or
                         128 << intExpr(55) <>  4611686018427387904 or
                        4096 << intExpr(50) <>  4611686018427387904 or
                      131072 << intExpr(45) <>  4611686018427387904 or
                     4194304 << intExpr(40) <>  4611686018427387904 or
                   134217728 << intExpr(35) <>  4611686018427387904 or
                  4294967296 << intExpr(30) <>  4611686018427387904 or
                137438953472 << intExpr(25) <>  4611686018427387904 or
               4398046511104 << intExpr(20) <>  4611686018427387904 or
             140737488355328 << intExpr(15) <>  4611686018427387904 or
            4503599627370496 << intExpr(10) <>  4611686018427387904 or
          144115188075855872 << intExpr( 5) <>  4611686018427387904 or
          288230376151711744 << intExpr( 4) <>  4611686018427387904 or
          576460752303423488 << intExpr( 3) <>  4611686018427387904 or
         1152921504606846976 << intExpr( 2) <>  4611686018427387904 or
         2305843009213693952 << intExpr( 1) <>  4611686018427387904 or
         4611686018427387904 << intExpr( 0) <>  4611686018427387904 or
        intExpr(           INT64_MIN) << intExpr( 0) <>            INT64_MIN or
        intExpr(-4611686018427387904) << intExpr( 1) <>            INT64_MIN or
        intExpr(-2305843009213693952) << intExpr( 2) <>            INT64_MIN or
        intExpr(-1152921504606846976) << intExpr( 3) <>            INT64_MIN or
        intExpr( -576460752303423488) << intExpr( 4) <>            INT64_MIN or
        intExpr( -288230376151711744) << intExpr( 5) <>            INT64_MIN or
        intExpr(   -9007199254740992) << intExpr(10) <>            INT64_MIN or
        intExpr(    -281474976710656) << intExpr(15) <>            INT64_MIN or
        intExpr(      -8796093022208) << intExpr(20) <>            INT64_MIN or
        intExpr(       -274877906944) << intExpr(25) <>            INT64_MIN or
        intExpr(         -8589934592) << intExpr(30) <>            INT64_MIN or
        intExpr(          -268435456) << intExpr(35) <>            INT64_MIN or
        intExpr(            -8388608) << intExpr(40) <>            INT64_MIN or
        intExpr(             -262144) << intExpr(45) <>            INT64_MIN or
        intExpr(               -8192) << intExpr(50) <>            INT64_MIN or
        intExpr(                -256) << intExpr(55) <>            INT64_MIN or
        intExpr(                  -8) << intExpr(60) <>            INT64_MIN or
        intExpr(                  -4) << intExpr(61) <>            INT64_MIN or
        intExpr(                  -2) << intExpr(62) <>            INT64_MIN or
        intExpr(                  -1) << intExpr(63) <>            INT64_MIN or
        intExpr(                   0) << intExpr(63) <>                    0 or
        intExpr(                   1) << intExpr(62) <>  4611686018427387904 or
        intExpr(                   2) << intExpr(61) <>  4611686018427387904 or
        intExpr(                   4) << intExpr(60) <>  4611686018427387904 or
        intExpr(                 128) << intExpr(55) <>  4611686018427387904 or
        intExpr(                4096) << intExpr(50) <>  4611686018427387904 or
        intExpr(              131072) << intExpr(45) <>  4611686018427387904 or
        intExpr(             4194304) << intExpr(40) <>  4611686018427387904 or
        intExpr(           134217728) << intExpr(35) <>  4611686018427387904 or
        intExpr(          4294967296) << intExpr(30) <>  4611686018427387904 or
        intExpr(        137438953472) << intExpr(25) <>  4611686018427387904 or
        intExpr(       4398046511104) << intExpr(20) <>  4611686018427387904 or
        intExpr(     140737488355328) << intExpr(15) <>  4611686018427387904 or
        intExpr(    4503599627370496) << intExpr(10) <>  4611686018427387904 or
        intExpr(  144115188075855872) << intExpr( 5) <>  4611686018427387904 or
        intExpr(  288230376151711744) << intExpr( 4) <>  4611686018427387904 or
        intExpr(  576460752303423488) << intExpr( 3) <>  4611686018427387904 or
        intExpr( 1152921504606846976) << intExpr( 2) <>  4611686018427387904 or
        intExpr( 2305843009213693952) << intExpr( 1) <>  4611686018427387904 or
        intExpr( 4611686018427387904) << intExpr( 0) <>  4611686018427387904 then
      writeln(" ***** Left shift with result of the biggest power of two does not work correct.");
      okay := FALSE;
    end if;

    if not check_reduced_overflow_checking_for_lshift then
      okay := FALSE;
    end if;

    num := -9223372036854775807; num <<:=  0; ok := ok and num = -9223372036854775807;
    num := -4611686018427387903; num <<:=  1; ok := ok and num = -9223372036854775806;
    num := -2305843009213693951; num <<:=  2; ok := ok and num = -9223372036854775804;
    num := -1152921504606846975; num <<:=  3; ok := ok and num = -9223372036854775800;
    num :=  -576460752303423487; num <<:=  4; ok := ok and num = -9223372036854775792;
    num :=  -288230376151711743; num <<:=  5; ok := ok and num = -9223372036854775776;
    num :=    -9007199254740991; num <<:= 10; ok := ok and num = -9223372036854774784;
    num :=     -281474976710655; num <<:= 15; ok := ok and num = -9223372036854743040;
    num :=       -8796093022207; num <<:= 20; ok := ok and num = -9223372036853727232;
    num :=        -274877906943; num <<:= 25; ok := ok and num = -9223372036821221376;
    num :=          -8589934591; num <<:= 30; ok := ok and num = -9223372035781033984;
    num :=           -268435455; num <<:= 35; ok := ok and num = -9223372002495037440;
    num :=             -8388607; num <<:= 40; ok := ok and num = -9223370937343148032;
    num :=              -262143; num <<:= 45; ok := ok and num = -9223336852482686976;
    num :=                -8191; num <<:= 50; ok := ok and num = -9222246136947933184;
    num :=                 -255; num <<:= 55; ok := ok and num = -9187343239835811840;
    num :=                   -7; num <<:= 60; ok := ok and num = -8070450532247928832;
    num :=                   -3; num <<:= 61; ok := ok and num = -6917529027641081856;
    num :=                   -1; num <<:= 62; ok := ok and num = -4611686018427387904;
    num :=                    0; num <<:= 63; ok := ok and num =                    0;
    num :=                    1; num <<:= 62; ok := ok and num =  4611686018427387904;
    num :=                    3; num <<:= 61; ok := ok and num =  6917529027641081856;
    num :=                    7; num <<:= 60; ok := ok and num =  8070450532247928832;
    num :=                  255; num <<:= 55; ok := ok and num =  9187343239835811840;
    num :=                 8191; num <<:= 50; ok := ok and num =  9222246136947933184;
    num :=               262143; num <<:= 45; ok := ok and num =  9223336852482686976;
    num :=              8388607; num <<:= 40; ok := ok and num =  9223370937343148032;
    num :=            268435455; num <<:= 35; ok := ok and num =  9223372002495037440;
    num :=           8589934591; num <<:= 30; ok := ok and num =  9223372035781033984;
    num :=         274877906943; num <<:= 25; ok := ok and num =  9223372036821221376;
    num :=        8796093022207; num <<:= 20; ok := ok and num =  9223372036853727232;
    num :=      281474976710655; num <<:= 15; ok := ok and num =  9223372036854743040;
    num :=     9007199254740991; num <<:= 10; ok := ok and num =  9223372036854774784;
    num :=   288230376151711743; num <<:=  5; ok := ok and num =  9223372036854775776;
    num :=   576460752303423487; num <<:=  4; ok := ok and num =  9223372036854775792;
    num :=  1152921504606846975; num <<:=  3; ok := ok and num =  9223372036854775800;
    num :=  2305843009213693951; num <<:=  2; ok := ok and num =  9223372036854775804;
    num :=  4611686018427387903; num <<:=  1; ok := ok and num =  9223372036854775806;
    num :=  9223372036854775807; num <<:=  0; ok := ok and num =  9223372036854775807;
    num := -9223372036854775807; num <<:= intExpr( 0); ok := ok and num = -9223372036854775807;
    num := -4611686018427387903; num <<:= intExpr( 1); ok := ok and num = -9223372036854775806;
    num := -2305843009213693951; num <<:= intExpr( 2); ok := ok and num = -9223372036854775804;
    num := -1152921504606846975; num <<:= intExpr( 3); ok := ok and num = -9223372036854775800;
    num :=  -576460752303423487; num <<:= intExpr( 4); ok := ok and num = -9223372036854775792;
    num :=  -288230376151711743; num <<:= intExpr( 5); ok := ok and num = -9223372036854775776;
    num :=    -9007199254740991; num <<:= intExpr(10); ok := ok and num = -9223372036854774784;
    num :=     -281474976710655; num <<:= intExpr(15); ok := ok and num = -9223372036854743040;
    num :=       -8796093022207; num <<:= intExpr(20); ok := ok and num = -9223372036853727232;
    num :=        -274877906943; num <<:= intExpr(25); ok := ok and num = -9223372036821221376;
    num :=          -8589934591; num <<:= intExpr(30); ok := ok and num = -9223372035781033984;
    num :=           -268435455; num <<:= intExpr(35); ok := ok and num = -9223372002495037440;
    num :=             -8388607; num <<:= intExpr(40); ok := ok and num = -9223370937343148032;
    num :=              -262143; num <<:= intExpr(45); ok := ok and num = -9223336852482686976;
    num :=                -8191; num <<:= intExpr(50); ok := ok and num = -9222246136947933184;
    num :=                 -255; num <<:= intExpr(55); ok := ok and num = -9187343239835811840;
    num :=                   -7; num <<:= intExpr(60); ok := ok and num = -8070450532247928832;
    num :=                   -3; num <<:= intExpr(61); ok := ok and num = -6917529027641081856;
    num :=                   -1; num <<:= intExpr(62); ok := ok and num = -4611686018427387904;
    num :=                    0; num <<:= intExpr(63); ok := ok and num =                    0;
    num :=                    1; num <<:= intExpr(62); ok := ok and num =  4611686018427387904;
    num :=                    3; num <<:= intExpr(61); ok := ok and num =  6917529027641081856;
    num :=                    7; num <<:= intExpr(60); ok := ok and num =  8070450532247928832;
    num :=                  255; num <<:= intExpr(55); ok := ok and num =  9187343239835811840;
    num :=                 8191; num <<:= intExpr(50); ok := ok and num =  9222246136947933184;
    num :=               262143; num <<:= intExpr(45); ok := ok and num =  9223336852482686976;
    num :=              8388607; num <<:= intExpr(40); ok := ok and num =  9223370937343148032;
    num :=            268435455; num <<:= intExpr(35); ok := ok and num =  9223372002495037440;
    num :=           8589934591; num <<:= intExpr(30); ok := ok and num =  9223372035781033984;
    num :=         274877906943; num <<:= intExpr(25); ok := ok and num =  9223372036821221376;
    num :=        8796093022207; num <<:= intExpr(20); ok := ok and num =  9223372036853727232;
    num :=      281474976710655; num <<:= intExpr(15); ok := ok and num =  9223372036854743040;
    num :=     9007199254740991; num <<:= intExpr(10); ok := ok and num =  9223372036854774784;
    num :=   288230376151711743; num <<:= intExpr( 5); ok := ok and num =  9223372036854775776;
    num :=   576460752303423487; num <<:= intExpr( 4); ok := ok and num =  9223372036854775792;
    num :=  1152921504606846975; num <<:= intExpr( 3); ok := ok and num =  9223372036854775800;
    num :=  2305843009213693951; num <<:= intExpr( 2); ok := ok and num =  9223372036854775804;
    num :=  4611686018427387903; num <<:= intExpr( 1); ok := ok and num =  9223372036854775806;
    num :=  9223372036854775807; num <<:= intExpr( 0); ok := ok and num =  9223372036854775807;
    arr[1] := -9223372036854775807; arr[1] <<:=  0; ok := ok and arr[1] = -9223372036854775807;
    arr[1] := -4611686018427387903; arr[1] <<:=  1; ok := ok and arr[1] = -9223372036854775806;
    arr[1] := -2305843009213693951; arr[1] <<:=  2; ok := ok and arr[1] = -9223372036854775804;
    arr[1] := -1152921504606846975; arr[1] <<:=  3; ok := ok and arr[1] = -9223372036854775800;
    arr[1] :=  -576460752303423487; arr[1] <<:=  4; ok := ok and arr[1] = -9223372036854775792;
    arr[1] :=  -288230376151711743; arr[1] <<:=  5; ok := ok and arr[1] = -9223372036854775776;
    arr[1] :=    -9007199254740991; arr[1] <<:= 10; ok := ok and arr[1] = -9223372036854774784;
    arr[1] :=     -281474976710655; arr[1] <<:= 15; ok := ok and arr[1] = -9223372036854743040;
    arr[1] :=       -8796093022207; arr[1] <<:= 20; ok := ok and arr[1] = -9223372036853727232;
    arr[1] :=        -274877906943; arr[1] <<:= 25; ok := ok and arr[1] = -9223372036821221376;
    arr[1] :=          -8589934591; arr[1] <<:= 30; ok := ok and arr[1] = -9223372035781033984;
    arr[1] :=           -268435455; arr[1] <<:= 35; ok := ok and arr[1] = -9223372002495037440;
    arr[1] :=             -8388607; arr[1] <<:= 40; ok := ok and arr[1] = -9223370937343148032;
    arr[1] :=              -262143; arr[1] <<:= 45; ok := ok and arr[1] = -9223336852482686976;
    arr[1] :=                -8191; arr[1] <<:= 50; ok := ok and arr[1] = -9222246136947933184;
    arr[1] :=                 -255; arr[1] <<:= 55; ok := ok and arr[1] = -9187343239835811840;
    arr[1] :=                   -7; arr[1] <<:= 60; ok := ok and arr[1] = -8070450532247928832;
    arr[1] :=                   -3; arr[1] <<:= 61; ok := ok and arr[1] = -6917529027641081856;
    arr[1] :=                   -1; arr[1] <<:= 62; ok := ok and arr[1] = -4611686018427387904;
    arr[1] :=                    0; arr[1] <<:= 63; ok := ok and arr[1] =                    0;
    arr[1] :=                    1; arr[1] <<:= 62; ok := ok and arr[1] =  4611686018427387904;
    arr[1] :=                    3; arr[1] <<:= 61; ok := ok and arr[1] =  6917529027641081856;
    arr[1] :=                    7; arr[1] <<:= 60; ok := ok and arr[1] =  8070450532247928832;
    arr[1] :=                  255; arr[1] <<:= 55; ok := ok and arr[1] =  9187343239835811840;
    arr[1] :=                 8191; arr[1] <<:= 50; ok := ok and arr[1] =  9222246136947933184;
    arr[1] :=               262143; arr[1] <<:= 45; ok := ok and arr[1] =  9223336852482686976;
    arr[1] :=              8388607; arr[1] <<:= 40; ok := ok and arr[1] =  9223370937343148032;
    arr[1] :=            268435455; arr[1] <<:= 35; ok := ok and arr[1] =  9223372002495037440;
    arr[1] :=           8589934591; arr[1] <<:= 30; ok := ok and arr[1] =  9223372035781033984;
    arr[1] :=         274877906943; arr[1] <<:= 25; ok := ok and arr[1] =  9223372036821221376;
    arr[1] :=        8796093022207; arr[1] <<:= 20; ok := ok and arr[1] =  9223372036853727232;
    arr[1] :=      281474976710655; arr[1] <<:= 15; ok := ok and arr[1] =  9223372036854743040;
    arr[1] :=     9007199254740991; arr[1] <<:= 10; ok := ok and arr[1] =  9223372036854774784;
    arr[1] :=   288230376151711743; arr[1] <<:=  5; ok := ok and arr[1] =  9223372036854775776;
    arr[1] :=   576460752303423487; arr[1] <<:=  4; ok := ok and arr[1] =  9223372036854775792;
    arr[1] :=  1152921504606846975; arr[1] <<:=  3; ok := ok and arr[1] =  9223372036854775800;
    arr[1] :=  2305843009213693951; arr[1] <<:=  2; ok := ok and arr[1] =  9223372036854775804;
    arr[1] :=  4611686018427387903; arr[1] <<:=  1; ok := ok and arr[1] =  9223372036854775806;
    arr[1] :=  9223372036854775807; arr[1] <<:=  0; ok := ok and arr[1] =  9223372036854775807;
    arr[1] := -9223372036854775807; arr[1] <<:= intExpr( 0); ok := ok and arr[1] = -9223372036854775807;
    arr[1] := -4611686018427387903; arr[1] <<:= intExpr( 1); ok := ok and arr[1] = -9223372036854775806;
    arr[1] := -2305843009213693951; arr[1] <<:= intExpr( 2); ok := ok and arr[1] = -9223372036854775804;
    arr[1] := -1152921504606846975; arr[1] <<:= intExpr( 3); ok := ok and arr[1] = -9223372036854775800;
    arr[1] :=  -576460752303423487; arr[1] <<:= intExpr( 4); ok := ok and arr[1] = -9223372036854775792;
    arr[1] :=  -288230376151711743; arr[1] <<:= intExpr( 5); ok := ok and arr[1] = -9223372036854775776;
    arr[1] :=    -9007199254740991; arr[1] <<:= intExpr(10); ok := ok and arr[1] = -9223372036854774784;
    arr[1] :=     -281474976710655; arr[1] <<:= intExpr(15); ok := ok and arr[1] = -9223372036854743040;
    arr[1] :=       -8796093022207; arr[1] <<:= intExpr(20); ok := ok and arr[1] = -9223372036853727232;
    arr[1] :=        -274877906943; arr[1] <<:= intExpr(25); ok := ok and arr[1] = -9223372036821221376;
    arr[1] :=          -8589934591; arr[1] <<:= intExpr(30); ok := ok and arr[1] = -9223372035781033984;
    arr[1] :=           -268435455; arr[1] <<:= intExpr(35); ok := ok and arr[1] = -9223372002495037440;
    arr[1] :=             -8388607; arr[1] <<:= intExpr(40); ok := ok and arr[1] = -9223370937343148032;
    arr[1] :=              -262143; arr[1] <<:= intExpr(45); ok := ok and arr[1] = -9223336852482686976;
    arr[1] :=                -8191; arr[1] <<:= intExpr(50); ok := ok and arr[1] = -9222246136947933184;
    arr[1] :=                 -255; arr[1] <<:= intExpr(55); ok := ok and arr[1] = -9187343239835811840;
    arr[1] :=                   -7; arr[1] <<:= intExpr(60); ok := ok and arr[1] = -8070450532247928832;
    arr[1] :=                   -3; arr[1] <<:= intExpr(61); ok := ok and arr[1] = -6917529027641081856;
    arr[1] :=                   -1; arr[1] <<:= intExpr(62); ok := ok and arr[1] = -4611686018427387904;
    arr[1] :=                    0; arr[1] <<:= intExpr(63); ok := ok and arr[1] =                    0;
    arr[1] :=                    1; arr[1] <<:= intExpr(62); ok := ok and arr[1] =  4611686018427387904;
    arr[1] :=                    3; arr[1] <<:= intExpr(61); ok := ok and arr[1] =  6917529027641081856;
    arr[1] :=                    7; arr[1] <<:= intExpr(60); ok := ok and arr[1] =  8070450532247928832;
    arr[1] :=                  255; arr[1] <<:= intExpr(55); ok := ok and arr[1] =  9187343239835811840;
    arr[1] :=                 8191; arr[1] <<:= intExpr(50); ok := ok and arr[1] =  9222246136947933184;
    arr[1] :=               262143; arr[1] <<:= intExpr(45); ok := ok and arr[1] =  9223336852482686976;
    arr[1] :=              8388607; arr[1] <<:= intExpr(40); ok := ok and arr[1] =  9223370937343148032;
    arr[1] :=            268435455; arr[1] <<:= intExpr(35); ok := ok and arr[1] =  9223372002495037440;
    arr[1] :=           8589934591; arr[1] <<:= intExpr(30); ok := ok and arr[1] =  9223372035781033984;
    arr[1] :=         274877906943; arr[1] <<:= intExpr(25); ok := ok and arr[1] =  9223372036821221376;
    arr[1] :=        8796093022207; arr[1] <<:= intExpr(20); ok := ok and arr[1] =  9223372036853727232;
    arr[1] :=      281474976710655; arr[1] <<:= intExpr(15); ok := ok and arr[1] =  9223372036854743040;
    arr[1] :=     9007199254740991; arr[1] <<:= intExpr(10); ok := ok and arr[1] =  9223372036854774784;
    arr[1] :=   288230376151711743; arr[1] <<:= intExpr( 5); ok := ok and arr[1] =  9223372036854775776;
    arr[1] :=   576460752303423487; arr[1] <<:= intExpr( 4); ok := ok and arr[1] =  9223372036854775792;
    arr[1] :=  1152921504606846975; arr[1] <<:= intExpr( 3); ok := ok and arr[1] =  9223372036854775800;
    arr[1] :=  2305843009213693951; arr[1] <<:= intExpr( 2); ok := ok and arr[1] =  9223372036854775804;
    arr[1] :=  4611686018427387903; arr[1] <<:= intExpr( 1); ok := ok and arr[1] =  9223372036854775806;
    arr[1] :=  9223372036854775807; arr[1] <<:= intExpr( 0); ok := ok and arr[1] =  9223372036854775807;
    if not ok then
      writeln(" ***** Left shift assignment where bitLength(result) is 63 does not work correct.");
      okay := FALSE;
    end if;

    ok := TRUE;
    num :=            INT64_MIN; num <<:=  0; ok := ok and num =            INT64_MIN;
    num := -4611686018427387904; num <<:=  1; ok := ok and num =            INT64_MIN;
    num := -2305843009213693952; num <<:=  2; ok := ok and num =            INT64_MIN;
    num := -1152921504606846976; num <<:=  3; ok := ok and num =            INT64_MIN;
    num :=  -576460752303423488; num <<:=  4; ok := ok and num =            INT64_MIN;
    num :=  -288230376151711744; num <<:=  5; ok := ok and num =            INT64_MIN;
    num :=    -9007199254740992; num <<:= 10; ok := ok and num =            INT64_MIN;
    num :=     -281474976710656; num <<:= 15; ok := ok and num =            INT64_MIN;
    num :=       -8796093022208; num <<:= 20; ok := ok and num =            INT64_MIN;
    num :=        -274877906944; num <<:= 25; ok := ok and num =            INT64_MIN;
    num :=          -8589934592; num <<:= 30; ok := ok and num =            INT64_MIN;
    num :=           -268435456; num <<:= 35; ok := ok and num =            INT64_MIN;
    num :=             -8388608; num <<:= 40; ok := ok and num =            INT64_MIN;
    num :=              -262144; num <<:= 45; ok := ok and num =            INT64_MIN;
    num :=                -8192; num <<:= 50; ok := ok and num =            INT64_MIN;
    num :=                 -256; num <<:= 55; ok := ok and num =            INT64_MIN;
    num :=                   -8; num <<:= 60; ok := ok and num =            INT64_MIN;
    num :=                   -4; num <<:= 61; ok := ok and num =            INT64_MIN;
    num :=                   -2; num <<:= 62; ok := ok and num =            INT64_MIN;
    num :=                   -1; num <<:= 63; ok := ok and num =            INT64_MIN;
    num :=                    0; num <<:= 63; ok := ok and num =                    0;
    num :=                    1; num <<:= 62; ok := ok and num =  4611686018427387904;
    num :=                    2; num <<:= 61; ok := ok and num =  4611686018427387904;
    num :=                    4; num <<:= 60; ok := ok and num =  4611686018427387904;
    num :=                  128; num <<:= 55; ok := ok and num =  4611686018427387904;
    num :=                 4096; num <<:= 50; ok := ok and num =  4611686018427387904;
    num :=               131072; num <<:= 45; ok := ok and num =  4611686018427387904;
    num :=              4194304; num <<:= 40; ok := ok and num =  4611686018427387904;
    num :=            134217728; num <<:= 35; ok := ok and num =  4611686018427387904;
    num :=           4294967296; num <<:= 30; ok := ok and num =  4611686018427387904;
    num :=         137438953472; num <<:= 25; ok := ok and num =  4611686018427387904;
    num :=        4398046511104; num <<:= 20; ok := ok and num =  4611686018427387904;
    num :=      140737488355328; num <<:= 15; ok := ok and num =  4611686018427387904;
    num :=     4503599627370496; num <<:= 10; ok := ok and num =  4611686018427387904;
    num :=   144115188075855872; num <<:=  5; ok := ok and num =  4611686018427387904;
    num :=   288230376151711744; num <<:=  4; ok := ok and num =  4611686018427387904;
    num :=   576460752303423488; num <<:=  3; ok := ok and num =  4611686018427387904;
    num :=  1152921504606846976; num <<:=  2; ok := ok and num =  4611686018427387904;
    num :=  2305843009213693952; num <<:=  1; ok := ok and num =  4611686018427387904;
    num :=  4611686018427387904; num <<:=  0; ok := ok and num =  4611686018427387904;
    num :=            INT64_MIN; num <<:= intExpr( 0); ok := ok and num =            INT64_MIN;
    num := -4611686018427387904; num <<:= intExpr( 1); ok := ok and num =            INT64_MIN;
    num := -2305843009213693952; num <<:= intExpr( 2); ok := ok and num =            INT64_MIN;
    num := -1152921504606846976; num <<:= intExpr( 3); ok := ok and num =            INT64_MIN;
    num :=  -576460752303423488; num <<:= intExpr( 4); ok := ok and num =            INT64_MIN;
    num :=  -288230376151711744; num <<:= intExpr( 5); ok := ok and num =            INT64_MIN;
    num :=    -9007199254740992; num <<:= intExpr(10); ok := ok and num =            INT64_MIN;
    num :=     -281474976710656; num <<:= intExpr(15); ok := ok and num =            INT64_MIN;
    num :=       -8796093022208; num <<:= intExpr(20); ok := ok and num =            INT64_MIN;
    num :=        -274877906944; num <<:= intExpr(25); ok := ok and num =            INT64_MIN;
    num :=          -8589934592; num <<:= intExpr(30); ok := ok and num =            INT64_MIN;
    num :=           -268435456; num <<:= intExpr(35); ok := ok and num =            INT64_MIN;
    num :=             -8388608; num <<:= intExpr(40); ok := ok and num =            INT64_MIN;
    num :=              -262144; num <<:= intExpr(45); ok := ok and num =            INT64_MIN;
    num :=                -8192; num <<:= intExpr(50); ok := ok and num =            INT64_MIN;
    num :=                 -256; num <<:= intExpr(55); ok := ok and num =            INT64_MIN;
    num :=                   -8; num <<:= intExpr(60); ok := ok and num =            INT64_MIN;
    num :=                   -4; num <<:= intExpr(61); ok := ok and num =            INT64_MIN;
    num :=                   -2; num <<:= intExpr(62); ok := ok and num =            INT64_MIN;
    num :=                   -1; num <<:= intExpr(63); ok := ok and num =            INT64_MIN;
    num :=                    0; num <<:= intExpr(63); ok := ok and num =                    0;
    num :=                    1; num <<:= intExpr(62); ok := ok and num =  4611686018427387904;
    num :=                    2; num <<:= intExpr(61); ok := ok and num =  4611686018427387904;
    num :=                    4; num <<:= intExpr(60); ok := ok and num =  4611686018427387904;
    num :=                  128; num <<:= intExpr(55); ok := ok and num =  4611686018427387904;
    num :=                 4096; num <<:= intExpr(50); ok := ok and num =  4611686018427387904;
    num :=               131072; num <<:= intExpr(45); ok := ok and num =  4611686018427387904;
    num :=              4194304; num <<:= intExpr(40); ok := ok and num =  4611686018427387904;
    num :=            134217728; num <<:= intExpr(35); ok := ok and num =  4611686018427387904;
    num :=           4294967296; num <<:= intExpr(30); ok := ok and num =  4611686018427387904;
    num :=         137438953472; num <<:= intExpr(25); ok := ok and num =  4611686018427387904;
    num :=        4398046511104; num <<:= intExpr(20); ok := ok and num =  4611686018427387904;
    num :=      140737488355328; num <<:= intExpr(15); ok := ok and num =  4611686018427387904;
    num :=     4503599627370496; num <<:= intExpr(10); ok := ok and num =  4611686018427387904;
    num :=   144115188075855872; num <<:= intExpr( 5); ok := ok and num =  4611686018427387904;
    num :=   288230376151711744; num <<:= intExpr( 4); ok := ok and num =  4611686018427387904;
    num :=   576460752303423488; num <<:= intExpr( 3); ok := ok and num =  4611686018427387904;
    num :=  1152921504606846976; num <<:= intExpr( 2); ok := ok and num =  4611686018427387904;
    num :=  2305843009213693952; num <<:= intExpr( 1); ok := ok and num =  4611686018427387904;
    num :=  4611686018427387904; num <<:= intExpr( 0); ok := ok and num =  4611686018427387904;
    arr[1] :=            INT64_MIN; arr[1] <<:=  0; ok := ok and arr[1] =            INT64_MIN;
    arr[1] := -4611686018427387904; arr[1] <<:=  1; ok := ok and arr[1] =            INT64_MIN;
    arr[1] := -2305843009213693952; arr[1] <<:=  2; ok := ok and arr[1] =            INT64_MIN;
    arr[1] := -1152921504606846976; arr[1] <<:=  3; ok := ok and arr[1] =            INT64_MIN;
    arr[1] :=  -576460752303423488; arr[1] <<:=  4; ok := ok and arr[1] =            INT64_MIN;
    arr[1] :=  -288230376151711744; arr[1] <<:=  5; ok := ok and arr[1] =            INT64_MIN;
    arr[1] :=    -9007199254740992; arr[1] <<:= 10; ok := ok and arr[1] =            INT64_MIN;
    arr[1] :=     -281474976710656; arr[1] <<:= 15; ok := ok and arr[1] =            INT64_MIN;
    arr[1] :=       -8796093022208; arr[1] <<:= 20; ok := ok and arr[1] =            INT64_MIN;
    arr[1] :=        -274877906944; arr[1] <<:= 25; ok := ok and arr[1] =            INT64_MIN;
    arr[1] :=          -8589934592; arr[1] <<:= 30; ok := ok and arr[1] =            INT64_MIN;
    arr[1] :=           -268435456; arr[1] <<:= 35; ok := ok and arr[1] =            INT64_MIN;
    arr[1] :=             -8388608; arr[1] <<:= 40; ok := ok and arr[1] =            INT64_MIN;
    arr[1] :=              -262144; arr[1] <<:= 45; ok := ok and arr[1] =            INT64_MIN;
    arr[1] :=                -8192; arr[1] <<:= 50; ok := ok and arr[1] =            INT64_MIN;
    arr[1] :=                 -256; arr[1] <<:= 55; ok := ok and arr[1] =            INT64_MIN;
    arr[1] :=                   -8; arr[1] <<:= 60; ok := ok and arr[1] =            INT64_MIN;
    arr[1] :=                   -4; arr[1] <<:= 61; ok := ok and arr[1] =            INT64_MIN;
    arr[1] :=                   -2; arr[1] <<:= 62; ok := ok and arr[1] =            INT64_MIN;
    arr[1] :=                   -1; arr[1] <<:= 63; ok := ok and arr[1] =            INT64_MIN;
    arr[1] :=                    0; arr[1] <<:= 63; ok := ok and arr[1] =                    0;
    arr[1] :=                    1; arr[1] <<:= 62; ok := ok and arr[1] =  4611686018427387904;
    arr[1] :=                    2; arr[1] <<:= 61; ok := ok and arr[1] =  4611686018427387904;
    arr[1] :=                    4; arr[1] <<:= 60; ok := ok and arr[1] =  4611686018427387904;
    arr[1] :=                  128; arr[1] <<:= 55; ok := ok and arr[1] =  4611686018427387904;
    arr[1] :=                 4096; arr[1] <<:= 50; ok := ok and arr[1] =  4611686018427387904;
    arr[1] :=               131072; arr[1] <<:= 45; ok := ok and arr[1] =  4611686018427387904;
    arr[1] :=              4194304; arr[1] <<:= 40; ok := ok and arr[1] =  4611686018427387904;
    arr[1] :=            134217728; arr[1] <<:= 35; ok := ok and arr[1] =  4611686018427387904;
    arr[1] :=           4294967296; arr[1] <<:= 30; ok := ok and arr[1] =  4611686018427387904;
    arr[1] :=         137438953472; arr[1] <<:= 25; ok := ok and arr[1] =  4611686018427387904;
    arr[1] :=        4398046511104; arr[1] <<:= 20; ok := ok and arr[1] =  4611686018427387904;
    arr[1] :=      140737488355328; arr[1] <<:= 15; ok := ok and arr[1] =  4611686018427387904;
    arr[1] :=     4503599627370496; arr[1] <<:= 10; ok := ok and arr[1] =  4611686018427387904;
    arr[1] :=   144115188075855872; arr[1] <<:=  5; ok := ok and arr[1] =  4611686018427387904;
    arr[1] :=   288230376151711744; arr[1] <<:=  4; ok := ok and arr[1] =  4611686018427387904;
    arr[1] :=   576460752303423488; arr[1] <<:=  3; ok := ok and arr[1] =  4611686018427387904;
    arr[1] :=  1152921504606846976; arr[1] <<:=  2; ok := ok and arr[1] =  4611686018427387904;
    arr[1] :=  2305843009213693952; arr[1] <<:=  1; ok := ok and arr[1] =  4611686018427387904;
    arr[1] :=  4611686018427387904; arr[1] <<:=  0; ok := ok and arr[1] =  4611686018427387904;
    arr[1] :=            INT64_MIN; arr[1] <<:= intExpr( 0); ok := ok and arr[1] =            INT64_MIN;
    arr[1] := -4611686018427387904; arr[1] <<:= intExpr( 1); ok := ok and arr[1] =            INT64_MIN;
    arr[1] := -2305843009213693952; arr[1] <<:= intExpr( 2); ok := ok and arr[1] =            INT64_MIN;
    arr[1] := -1152921504606846976; arr[1] <<:= intExpr( 3); ok := ok and arr[1] =            INT64_MIN;
    arr[1] :=  -576460752303423488; arr[1] <<:= intExpr( 4); ok := ok and arr[1] =            INT64_MIN;
    arr[1] :=  -288230376151711744; arr[1] <<:= intExpr( 5); ok := ok and arr[1] =            INT64_MIN;
    arr[1] :=    -9007199254740992; arr[1] <<:= intExpr(10); ok := ok and arr[1] =            INT64_MIN;
    arr[1] :=     -281474976710656; arr[1] <<:= intExpr(15); ok := ok and arr[1] =            INT64_MIN;
    arr[1] :=       -8796093022208; arr[1] <<:= intExpr(20); ok := ok and arr[1] =            INT64_MIN;
    arr[1] :=        -274877906944; arr[1] <<:= intExpr(25); ok := ok and arr[1] =            INT64_MIN;
    arr[1] :=          -8589934592; arr[1] <<:= intExpr(30); ok := ok and arr[1] =            INT64_MIN;
    arr[1] :=           -268435456; arr[1] <<:= intExpr(35); ok := ok and arr[1] =            INT64_MIN;
    arr[1] :=             -8388608; arr[1] <<:= intExpr(40); ok := ok and arr[1] =            INT64_MIN;
    arr[1] :=              -262144; arr[1] <<:= intExpr(45); ok := ok and arr[1] =            INT64_MIN;
    arr[1] :=                -8192; arr[1] <<:= intExpr(50); ok := ok and arr[1] =            INT64_MIN;
    arr[1] :=                 -256; arr[1] <<:= intExpr(55); ok := ok and arr[1] =            INT64_MIN;
    arr[1] :=                   -8; arr[1] <<:= intExpr(60); ok := ok and arr[1] =            INT64_MIN;
    arr[1] :=                   -4; arr[1] <<:= intExpr(61); ok := ok and arr[1] =            INT64_MIN;
    arr[1] :=                   -2; arr[1] <<:= intExpr(62); ok := ok and arr[1] =            INT64_MIN;
    arr[1] :=                   -1; arr[1] <<:= intExpr(63); ok := ok and arr[1] =            INT64_MIN;
    arr[1] :=                    0; arr[1] <<:= intExpr(63); ok := ok and arr[1] =                    0;
    arr[1] :=                    1; arr[1] <<:= intExpr(62); ok := ok and arr[1] =  4611686018427387904;
    arr[1] :=                    2; arr[1] <<:= intExpr(61); ok := ok and arr[1] =  4611686018427387904;
    arr[1] :=                    4; arr[1] <<:= intExpr(60); ok := ok and arr[1] =  4611686018427387904;
    arr[1] :=                  128; arr[1] <<:= intExpr(55); ok := ok and arr[1] =  4611686018427387904;
    arr[1] :=                 4096; arr[1] <<:= intExpr(50); ok := ok and arr[1] =  4611686018427387904;
    arr[1] :=               131072; arr[1] <<:= intExpr(45); ok := ok and arr[1] =  4611686018427387904;
    arr[1] :=              4194304; arr[1] <<:= intExpr(40); ok := ok and arr[1] =  4611686018427387904;
    arr[1] :=            134217728; arr[1] <<:= intExpr(35); ok := ok and arr[1] =  4611686018427387904;
    arr[1] :=           4294967296; arr[1] <<:= intExpr(30); ok := ok and arr[1] =  4611686018427387904;
    arr[1] :=         137438953472; arr[1] <<:= intExpr(25); ok := ok and arr[1] =  4611686018427387904;
    arr[1] :=        4398046511104; arr[1] <<:= intExpr(20); ok := ok and arr[1] =  4611686018427387904;
    arr[1] :=      140737488355328; arr[1] <<:= intExpr(15); ok := ok and arr[1] =  4611686018427387904;
    arr[1] :=     4503599627370496; arr[1] <<:= intExpr(10); ok := ok and arr[1] =  4611686018427387904;
    arr[1] :=   144115188075855872; arr[1] <<:= intExpr( 5); ok := ok and arr[1] =  4611686018427387904;
    arr[1] :=   288230376151711744; arr[1] <<:= intExpr( 4); ok := ok and arr[1] =  4611686018427387904;
    arr[1] :=   576460752303423488; arr[1] <<:= intExpr( 3); ok := ok and arr[1] =  4611686018427387904;
    arr[1] :=  1152921504606846976; arr[1] <<:= intExpr( 2); ok := ok and arr[1] =  4611686018427387904;
    arr[1] :=  2305843009213693952; arr[1] <<:= intExpr( 1); ok := ok and arr[1] =  4611686018427387904;
    arr[1] :=  4611686018427387904; arr[1] <<:= intExpr( 0); ok := ok and arr[1] =  4611686018427387904;
    if not ok then
      writeln(" ***** Left shift assignment with result of the biggest power of two does not work correct.");
      okay := FALSE;
    end if;

    if okay then
      writeln("The integer << and <<:= works correct.");
    else
      writeln(" ***** The integer << or <<:= does not work correct.");
      writeln;
    end if;
  end func;


const func boolean: chkRShift (in integer: number, in integer: rshift,
    in integer: check) is func
  result
    var boolean: wrong is FALSE;
  local
    var integer: intVar is 0;
  begin
    wrong := number >> rshift <> check;
    if not wrong then
      intVar := number;
      intVar >>:= rshift;
      wrong := intVar <> check;
    end if;
  end func;


const func boolean: chkRShift (in integer: number, in integer: rshift) is func
  result
    var boolean: wrong is FALSE;
  begin
    if rshift < 31 then
      wrong := chkRShift(number, rshift, number mdiv 2 ** rshift);
    elsif number < 0 then
      wrong := chkRShift(number, rshift, -1);
    else
      wrong := chkRShift(number, rshift, 0);
    end if;
  end func;


const proc: chkRShift (in integer: rshift, inout boolean: okay) is func
  begin
    if  chkRShift( 2147483647, rshift) or
        chkRShift( 1073741824, rshift) or
        chkRShift( 1073741823, rshift) or
        chkRShift( 1000000000, rshift) or
        chkRShift(  100000000, rshift) or
        chkRShift(   10000000, rshift) or
        chkRShift(    1000000, rshift) or
        chkRShift(     100000, rshift) or
        chkRShift(      65536, rshift) or
        chkRShift(      65535, rshift) or
        chkRShift(      32768, rshift) or
        chkRShift(      32767, rshift) or
        chkRShift(      10000, rshift) or
        chkRShift(       1000, rshift) or
        chkRShift(        256, rshift) or
        chkRShift(        255, rshift) or
        chkRShift(        128, rshift) or
        chkRShift(        127, rshift) or
        chkRShift(        100, rshift) or
        chkRShift(         10, rshift) or
        chkRShift(          1, rshift) or
        chkRShift(          0, rshift) or
        chkRShift(         -1, rshift) or
        chkRShift(        -10, rshift) or
        chkRShift(       -100, rshift) or
        chkRShift(       -128, rshift) or
        chkRShift(       -129, rshift) or
        chkRShift(       -256, rshift) or
        chkRShift(       -257, rshift) or
        chkRShift(      -1000, rshift) or
        chkRShift(     -10000, rshift) or
        chkRShift(     -32768, rshift) or
        chkRShift(     -32769, rshift) or
        chkRShift(     -65536, rshift) or
        chkRShift(     -65537, rshift) or
        chkRShift(    -100000, rshift) or
        chkRShift(   -1000000, rshift) or
        chkRShift(  -10000000, rshift) or
        chkRShift( -100000000, rshift) or
        chkRShift(-1000000000, rshift) or
        chkRShift(-1073741824, rshift) or
        chkRShift(-1073741825, rshift) or
        chkRShift(-2147483647, rshift) or
        chkRShift(  INT32_MIN, rshift) then
      writeln("The integer >> or >>:= with " <& rshift <& " does not work correct.");
      okay := FALSE;
    end if;
  end func;


const proc: check_rShift is func
  local
    var boolean: okay is TRUE;
    var integer: rshift is 0;
  begin
    for rshift range 0 to 31 do
      chkRShift(rshift, okay);
    end for;

    if okay then
      writeln("The integer >> and >>:= works correct.");
    else
      writeln(" ***** The integer >> or >>:= does not work correct.");
      writeln;
    end if;
  end func;


const func string: strFunction (in integer: num) is
  return str(num);


const proc: check_str is func
  local
    var boolean: okay is TRUE;
    var boolean: ok is TRUE;
    var string: stri is "";
  begin
    if  str(                  0) <>                   "0" or
        str(                  1) <>                   "1" or
        str(                  2) <>                   "2" or
        str(                  8) <>                   "8" or
        str(                  9) <>                   "9" or
        str(                 10) <>                  "10" or
        str(                 11) <>                  "11" or
        str(                 99) <>                  "99" or
        str(                100) <>                 "100" or
        str(                127) <>                 "127" or
        str(                128) <>                 "128" or
        str(                200) <>                 "200" or
        str(                255) <>                 "255" or
        str(                256) <>                 "256" or
        str(                999) <>                 "999" or
        str(               1000) <>                "1000" or
        str(               1001) <>                "1001" or
        str(               2000) <>                "2000" or
        str(               9999) <>                "9999" or
        str(              10000) <>               "10000" or
        str(              10001) <>               "10001" or
        str(              10002) <>               "10002" or
        str(              32767) <>               "32767" or
        str(              32768) <>               "32768" or
        str(              65535) <>               "65535" or
        str(              65536) <>               "65536" or
        str(              99999) <>               "99999" or
        str(             100000) <>              "100000" or
        str(             999999) <>              "999999" or
        str(            1000000) <>             "1000000" or
        str(            8388607) <>             "8388607" or
        str(            8388608) <>             "8388608" or
        str(            9999999) <>             "9999999" or
        str(           10000000) <>            "10000000" or
        str(           16777215) <>            "16777215" or
        str(           16777216) <>            "16777216" or
        str(           99999999) <>            "99999999" or
        str(          100000000) <>           "100000000" or
        str(          999999999) <>           "999999999" or
        str(         1000000000) <>          "1000000000" or
        str(         2147483647) <>          "2147483647" or
        str(         2147483648) <>          "2147483648" or
        str(         4294967295) <>          "4294967295" or
        str(         4294967296) <>          "4294967296" or
        str(         9999999999) <>          "9999999999" or
        str(        10000000000) <>         "10000000000" or
        str(        99999999999) <>         "99999999999" or
        str(       100000000000) <>        "100000000000" or
        str(       549755813887) <>        "549755813887" or
        str(       549755813888) <>        "549755813888" or
        str(       999999999999) <>        "999999999999" or
        str(      1000000000000) <>       "1000000000000" or
        str(      1099511627775) <>       "1099511627775" or
        str(      1099511627776) <>       "1099511627776" or
        str(      9999999999999) <>       "9999999999999" or
        str(     10000000000000) <>      "10000000000000" or
        str(     99999999999999) <>      "99999999999999" or
        str(    100000000000000) <>     "100000000000000" or
        str(    140737488355327) <>     "140737488355327" or
        str(    140737488355328) <>     "140737488355328" or
        str(    281474976710655) <>     "281474976710655" or
        str(    281474976710656) <>     "281474976710656" or
        str(    999999999999999) <>     "999999999999999" or
        str(   1000000000000000) <>    "1000000000000000" or
        str(   9999999999999999) <>    "9999999999999999" or
        str(  10000000000000000) <>   "10000000000000000" or
        str(  36028797018963967) <>   "36028797018963967" or
        str(  36028797018963968) <>   "36028797018963968" or
        str(  72057594037927935) <>   "72057594037927935" or
        str(  72057594037927936) <>   "72057594037927936" or
        str(  99999999999999999) <>   "99999999999999999" or
        str( 100000000000000000) <>  "100000000000000000" or
        str( 999999999000000000) <>  "999999999000000000" or
        str(1000000000000000000) <> "1000000000000000000" or
        str(9223372036854775806) <> "9223372036854775806" or
        str(9223372036854775807) <> "9223372036854775807" then
      writeln(" ***** Integer str of a positive integer does not work correct.");
      okay := FALSE;
    end if;

    if  str(                  -1) <>                   "-1" or
        str(                  -2) <>                   "-2" or
        str(                  -8) <>                   "-8" or
        str(                  -9) <>                   "-9" or
        str(                 -10) <>                  "-10" or
        str(                 -11) <>                  "-11" or
        str(                 -99) <>                  "-99" or
        str(                -100) <>                 "-100" or
        str(                -127) <>                 "-127" or
        str(                -128) <>                 "-128" or
        str(                -200) <>                 "-200" or
        str(                -255) <>                 "-255" or
        str(                -256) <>                 "-256" or
        str(                -999) <>                 "-999" or
        str(               -1000) <>                "-1000" or
        str(               -1001) <>                "-1001" or
        str(               -2000) <>                "-2000" or
        str(               -9999) <>                "-9999" or
        str(              -10000) <>               "-10000" or
        str(              -10001) <>               "-10001" or
        str(              -10002) <>               "-10002" or
        str(              -32767) <>               "-32767" or
        str(              -32768) <>               "-32768" or
        str(              -65535) <>               "-65535" or
        str(              -65536) <>               "-65536" or
        str(              -99999) <>               "-99999" or
        str(             -100000) <>              "-100000" or
        str(             -999999) <>              "-999999" or
        str(            -1000000) <>             "-1000000" or
        str(            -8388607) <>             "-8388607" or
        str(            -8388608) <>             "-8388608" or
        str(            -9999999) <>             "-9999999" or
        str(           -10000000) <>            "-10000000" or
        str(           -16777215) <>            "-16777215" or
        str(           -16777216) <>            "-16777216" or
        str(           -99999999) <>            "-99999999" or
        str(          -100000000) <>           "-100000000" or
        str(          -999999999) <>           "-999999999" or
        str(         -1000000000) <>          "-1000000000" or
        str(         -2147483647) <>          "-2147483647" or
        str(         -2147483648) <>          "-2147483648" or
        str(         -4294967295) <>          "-4294967295" or
        str(         -4294967296) <>          "-4294967296" or
        str(         -9999999999) <>          "-9999999999" or
        str(        -10000000000) <>         "-10000000000" or
        str(        -99999999999) <>         "-99999999999" or
        str(       -100000000000) <>        "-100000000000" or
        str(       -549755813887) <>        "-549755813887" or
        str(       -549755813888) <>        "-549755813888" or
        str(       -999999999999) <>        "-999999999999" or
        str(      -1000000000000) <>       "-1000000000000" or
        str(      -1099511627775) <>       "-1099511627775" or
        str(      -1099511627776) <>       "-1099511627776" or
        str(      -9999999999999) <>       "-9999999999999" or
        str(     -10000000000000) <>      "-10000000000000" or
        str(     -99999999999999) <>      "-99999999999999" or
        str(    -100000000000000) <>     "-100000000000000" or
        str(    -140737488355327) <>     "-140737488355327" or
        str(    -140737488355328) <>     "-140737488355328" or
        str(    -281474976710655) <>     "-281474976710655" or
        str(    -281474976710656) <>     "-281474976710656" or
        str(    -999999999999999) <>     "-999999999999999" or
        str(   -1000000000000000) <>    "-1000000000000000" or
        str(   -9999999999999999) <>    "-9999999999999999" or
        str(  -10000000000000000) <>   "-10000000000000000" or
        str(  -36028797018963967) <>   "-36028797018963967" or
        str(  -36028797018963968) <>   "-36028797018963968" or
        str(  -72057594037927935) <>   "-72057594037927935" or
        str(  -72057594037927936) <>   "-72057594037927936" or
        str(  -99999999999999999) <>   "-99999999999999999" or
        str( -100000000000000000) <>  "-100000000000000000" or
        str( -999999999000000000) <>  "-999999999000000000" or
        str(-1000000000000000000) <> "-1000000000000000000" or
        str(-9223372036854775806) <> "-9223372036854775806" or
        str(-9223372036854775807) <> "-9223372036854775807" or
        str(INT64_MIN)            <> "-9223372036854775808" then
      writeln(" ***** Integer str of a negative integer does not work correct.");
      okay := FALSE;
    end if;

    if  str(intExpr(                  0)) <>                   "0" or
        str(intExpr(                  1)) <>                   "1" or
        str(intExpr(                  2)) <>                   "2" or
        str(intExpr(                  8)) <>                   "8" or
        str(intExpr(                  9)) <>                   "9" or
        str(intExpr(                 10)) <>                  "10" or
        str(intExpr(                 11)) <>                  "11" or
        str(intExpr(                 99)) <>                  "99" or
        str(intExpr(                100)) <>                 "100" or
        str(intExpr(                127)) <>                 "127" or
        str(intExpr(                128)) <>                 "128" or
        str(intExpr(                200)) <>                 "200" or
        str(intExpr(                255)) <>                 "255" or
        str(intExpr(                256)) <>                 "256" or
        str(intExpr(                999)) <>                 "999" or
        str(intExpr(               1000)) <>                "1000" or
        str(intExpr(               1001)) <>                "1001" or
        str(intExpr(               2000)) <>                "2000" or
        str(intExpr(               9999)) <>                "9999" or
        str(intExpr(              10000)) <>               "10000" or
        str(intExpr(              10001)) <>               "10001" or
        str(intExpr(              10002)) <>               "10002" or
        str(intExpr(              32767)) <>               "32767" or
        str(intExpr(              32768)) <>               "32768" or
        str(intExpr(              65535)) <>               "65535" or
        str(intExpr(              65536)) <>               "65536" or
        str(intExpr(              99999)) <>               "99999" or
        str(intExpr(             100000)) <>              "100000" or
        str(intExpr(             999999)) <>              "999999" or
        str(intExpr(            1000000)) <>             "1000000" or
        str(intExpr(            8388607)) <>             "8388607" or
        str(intExpr(            8388608)) <>             "8388608" or
        str(intExpr(            9999999)) <>             "9999999" or
        str(intExpr(           10000000)) <>            "10000000" or
        str(intExpr(           16777215)) <>            "16777215" or
        str(intExpr(           16777216)) <>            "16777216" or
        str(intExpr(           99999999)) <>            "99999999" or
        str(intExpr(          100000000)) <>           "100000000" or
        str(intExpr(          999999999)) <>           "999999999" or
        str(intExpr(         1000000000)) <>          "1000000000" or
        str(intExpr(         2147483647)) <>          "2147483647" or
        str(intExpr(         2147483648)) <>          "2147483648" or
        str(intExpr(         4294967295)) <>          "4294967295" or
        str(intExpr(         4294967296)) <>          "4294967296" or
        str(intExpr(         9999999999)) <>          "9999999999" or
        str(intExpr(        10000000000)) <>         "10000000000" or
        str(intExpr(        99999999999)) <>         "99999999999" or
        str(intExpr(       100000000000)) <>        "100000000000" or
        str(intExpr(       549755813887)) <>        "549755813887" or
        str(intExpr(       549755813888)) <>        "549755813888" or
        str(intExpr(       999999999999)) <>        "999999999999" or
        str(intExpr(      1000000000000)) <>       "1000000000000" or
        str(intExpr(      1099511627775)) <>       "1099511627775" or
        str(intExpr(      1099511627776)) <>       "1099511627776" or
        str(intExpr(      9999999999999)) <>       "9999999999999" or
        str(intExpr(     10000000000000)) <>      "10000000000000" or
        str(intExpr(     99999999999999)) <>      "99999999999999" or
        str(intExpr(    100000000000000)) <>     "100000000000000" or
        str(intExpr(    140737488355327)) <>     "140737488355327" or
        str(intExpr(    140737488355328)) <>     "140737488355328" or
        str(intExpr(    281474976710655)) <>     "281474976710655" or
        str(intExpr(    281474976710656)) <>     "281474976710656" or
        str(intExpr(    999999999999999)) <>     "999999999999999" or
        str(intExpr(   1000000000000000)) <>    "1000000000000000" or
        str(intExpr(   9999999999999999)) <>    "9999999999999999" or
        str(intExpr(  10000000000000000)) <>   "10000000000000000" or
        str(intExpr(  36028797018963967)) <>   "36028797018963967" or
        str(intExpr(  36028797018963968)) <>   "36028797018963968" or
        str(intExpr(  72057594037927935)) <>   "72057594037927935" or
        str(intExpr(  72057594037927936)) <>   "72057594037927936" or
        str(intExpr(  99999999999999999)) <>   "99999999999999999" or
        str(intExpr( 100000000000000000)) <>  "100000000000000000" or
        str(intExpr( 999999999000000000)) <>  "999999999000000000" or
        str(intExpr(1000000000000000000)) <> "1000000000000000000" or
        str(intExpr(9223372036854775806)) <> "9223372036854775806" or
        str(intExpr(9223372036854775807)) <> "9223372036854775807" then
      writeln(" ***** Integer str of a positive integer expression does not work correct.");
      okay := FALSE;
    end if;

    if  str(intExpr(                  -1)) <>                   "-1" or
        str(intExpr(                  -2)) <>                   "-2" or
        str(intExpr(                  -8)) <>                   "-8" or
        str(intExpr(                  -9)) <>                   "-9" or
        str(intExpr(                 -10)) <>                  "-10" or
        str(intExpr(                 -11)) <>                  "-11" or
        str(intExpr(                 -99)) <>                  "-99" or
        str(intExpr(                -100)) <>                 "-100" or
        str(intExpr(                -127)) <>                 "-127" or
        str(intExpr(                -128)) <>                 "-128" or
        str(intExpr(                -200)) <>                 "-200" or
        str(intExpr(                -255)) <>                 "-255" or
        str(intExpr(                -256)) <>                 "-256" or
        str(intExpr(                -999)) <>                 "-999" or
        str(intExpr(               -1000)) <>                "-1000" or
        str(intExpr(               -1001)) <>                "-1001" or
        str(intExpr(               -2000)) <>                "-2000" or
        str(intExpr(               -9999)) <>                "-9999" or
        str(intExpr(              -10000)) <>               "-10000" or
        str(intExpr(              -10001)) <>               "-10001" or
        str(intExpr(              -10002)) <>               "-10002" or
        str(intExpr(              -32767)) <>               "-32767" or
        str(intExpr(              -32768)) <>               "-32768" or
        str(intExpr(              -65535)) <>               "-65535" or
        str(intExpr(              -65536)) <>               "-65536" or
        str(intExpr(              -99999)) <>               "-99999" or
        str(intExpr(             -100000)) <>              "-100000" or
        str(intExpr(             -999999)) <>              "-999999" or
        str(intExpr(            -1000000)) <>             "-1000000" or
        str(intExpr(            -8388607)) <>             "-8388607" or
        str(intExpr(            -8388608)) <>             "-8388608" or
        str(intExpr(            -9999999)) <>             "-9999999" or
        str(intExpr(           -10000000)) <>            "-10000000" or
        str(intExpr(           -16777215)) <>            "-16777215" or
        str(intExpr(           -16777216)) <>            "-16777216" or
        str(intExpr(           -99999999)) <>            "-99999999" or
        str(intExpr(          -100000000)) <>           "-100000000" or
        str(intExpr(          -999999999)) <>           "-999999999" or
        str(intExpr(         -1000000000)) <>          "-1000000000" or
        str(intExpr(         -2147483647)) <>          "-2147483647" or
        str(intExpr(         -2147483648)) <>          "-2147483648" or
        str(intExpr(         -4294967295)) <>          "-4294967295" or
        str(intExpr(         -4294967296)) <>          "-4294967296" or
        str(intExpr(         -9999999999)) <>          "-9999999999" or
        str(intExpr(        -10000000000)) <>         "-10000000000" or
        str(intExpr(        -99999999999)) <>         "-99999999999" or
        str(intExpr(       -100000000000)) <>        "-100000000000" or
        str(intExpr(       -549755813887)) <>        "-549755813887" or
        str(intExpr(       -549755813888)) <>        "-549755813888" or
        str(intExpr(       -999999999999)) <>        "-999999999999" or
        str(intExpr(      -1000000000000)) <>       "-1000000000000" or
        str(intExpr(      -1099511627775)) <>       "-1099511627775" or
        str(intExpr(      -1099511627776)) <>       "-1099511627776" or
        str(intExpr(      -9999999999999)) <>       "-9999999999999" or
        str(intExpr(     -10000000000000)) <>      "-10000000000000" or
        str(intExpr(     -99999999999999)) <>      "-99999999999999" or
        str(intExpr(    -100000000000000)) <>     "-100000000000000" or
        str(intExpr(    -140737488355327)) <>     "-140737488355327" or
        str(intExpr(    -140737488355328)) <>     "-140737488355328" or
        str(intExpr(    -281474976710655)) <>     "-281474976710655" or
        str(intExpr(    -281474976710656)) <>     "-281474976710656" or
        str(intExpr(    -999999999999999)) <>     "-999999999999999" or
        str(intExpr(   -1000000000000000)) <>    "-1000000000000000" or
        str(intExpr(   -9999999999999999)) <>    "-9999999999999999" or
        str(intExpr(  -10000000000000000)) <>   "-10000000000000000" or
        str(intExpr(  -36028797018963967)) <>   "-36028797018963967" or
        str(intExpr(  -36028797018963968)) <>   "-36028797018963968" or
        str(intExpr(  -72057594037927935)) <>   "-72057594037927935" or
        str(intExpr(  -72057594037927936)) <>   "-72057594037927936" or
        str(intExpr(  -99999999999999999)) <>   "-99999999999999999" or
        str(intExpr( -100000000000000000)) <>  "-100000000000000000" or
        str(intExpr( -999999999000000000)) <>  "-999999999000000000" or
        str(intExpr(-1000000000000000000)) <> "-1000000000000000000" or
        str(intExpr(-9223372036854775806)) <> "-9223372036854775806" or
        str(intExpr(-9223372036854775807)) <> "-9223372036854775807" or
        str(intExpr(INT64_MIN))            <> "-9223372036854775808" then
      writeln(" ***** Integer str of a negative integer expression does not work correct.");
      okay := FALSE;
    end if;

    stri := str(          INT64_MIN); ok := ok and stri = "-9223372036854775808";
    stri := str(   -123456789012345); ok := ok and stri =     "-123456789012345";
    stri := str(                 -1); ok := ok and stri =                   "-1";
    stri := str(                  0); ok := ok and stri =                    "0";
    stri := str(                  1); ok := ok and stri =                    "1";
    stri := str(    123456789012345); ok := ok and stri =      "123456789012345";
    stri := str(9223372036854775807); ok := ok and stri =  "9223372036854775807";
    stri := str(intExpr(          INT64_MIN)); ok := ok and stri = "-9223372036854775808";
    stri := str(intExpr(   -123456789012345)); ok := ok and stri =     "-123456789012345";
    stri := str(intExpr(                 -1)); ok := ok and stri =                   "-1";
    stri := str(intExpr(                  0)); ok := ok and stri =                    "0";
    stri := str(intExpr(                  1)); ok := ok and stri =                    "1";
    stri := str(intExpr(    123456789012345)); ok := ok and stri =      "123456789012345";
    stri := str(intExpr(9223372036854775807)); ok := ok and stri =  "9223372036854775807";
    if not ok then
      writeln(" ***** Integer str assigned to a variable does not work correct.");
      okay := FALSE;
    end if;

    if  strFunction(          INT64_MIN) <> "-9223372036854775808" or
        strFunction(   -123456789012345) <>     "-123456789012345" or
        strFunction(                 -1) <>                   "-1" or
        strFunction(                  0) <>                    "0" or
        strFunction(                  1) <>                    "1" or
        strFunction(    123456789012345) <>      "123456789012345" or
        strFunction(9223372036854775807) <>  "9223372036854775807" or
        strFunction(intExpr(          INT64_MIN)) <> "-9223372036854775808" or
        strFunction(intExpr(   -123456789012345)) <>     "-123456789012345" or
        strFunction(intExpr(                 -1)) <>                   "-1" or
        strFunction(intExpr(                  0)) <>                    "0" or
        strFunction(intExpr(                  1)) <>                    "1" or
        strFunction(intExpr(    123456789012345)) <>      "123456789012345" or
        strFunction(intExpr(9223372036854775807)) <>  "9223372036854775807" then
      writeln(" ***** Integer str called via a function does not work correct.");
      okay := FALSE;
    end if;

    if  (1000000 radix  2) <> "11110100001001000000" or
        (1000000 radix  3) <> "1212210202001" or
        (1000000 radix  4) <> "3310021000" or
        (1000000 radix  5) <> "224000000" or
        (1000000 radix  6) <> "33233344" or
        (1000000 radix  7) <> "11333311" or
        (1000000 radix  8) <> "3641100" or
        (1000000 radix  9) <> "1783661" or
        (1000000 radix 10) <> "1000000" or
        (1000000 radix 11) <> "623351" or
        (1000000 radix 12) <> "402854" or
        (1000000 radix 13) <> "290221" or
        (1000000 radix 14) <> "1c0608" or
        (1000000 radix 15) <> "14b46a" or
        (1000000 radix 16) <> "f4240" or
        (1000000 radix 17) <> "bg939" or
        (1000000 radix 18) <> "9987a" or
        (1000000 radix 19) <> "7cf1b" or
        (1000000 radix 20) <> "65000" or
        (1000000 radix 21) <> "52kc1" or
        (1000000 radix 22) <> "45k2c" or
        (1000000 radix 23) <> "3d486" or
        (1000000 radix 24) <> "3082g" or
        (1000000 radix 25) <> "2e000" or
        (1000000 radix 26) <> "24n7e" or
        (1000000 radix 27) <> "1nlk1" or
        (1000000 radix 28) <> "1hfe8" or
        (1000000 radix 29) <> "1c01m" or
        (1000000 radix 30) <> "1713a" or
        (1000000 radix 31) <> "12hi2" or
        (1000000 radix 32) <> "ugi0" or
        (1000000 radix 33) <> "rr91" or
        (1000000 radix 34) <> "pf1q" or
        (1000000 radix 35) <> "nbbf" or
        (1000000 radix 36) <> "lfls" then
      writeln(" ***** The radix operator does not work correct.");
      okay := FALSE;
    end if;
    if  (intExpr(1000000) radix  2) <> "11110100001001000000" or
        (intExpr(1000000) radix  3) <> "1212210202001" or
        (intExpr(1000000) radix  4) <> "3310021000" or
        (intExpr(1000000) radix  5) <> "224000000" or
        (intExpr(1000000) radix  6) <> "33233344" or
        (intExpr(1000000) radix  7) <> "11333311" or
        (intExpr(1000000) radix  8) <> "3641100" or
        (intExpr(1000000) radix  9) <> "1783661" or
        (intExpr(1000000) radix 10) <> "1000000" or
        (intExpr(1000000) radix 11) <> "623351" or
        (intExpr(1000000) radix 12) <> "402854" or
        (intExpr(1000000) radix 13) <> "290221" or
        (intExpr(1000000) radix 14) <> "1c0608" or
        (intExpr(1000000) radix 15) <> "14b46a" or
        (intExpr(1000000) radix 16) <> "f4240" or
        (intExpr(1000000) radix 17) <> "bg939" or
        (intExpr(1000000) radix 18) <> "9987a" or
        (intExpr(1000000) radix 19) <> "7cf1b" or
        (intExpr(1000000) radix 20) <> "65000" or
        (intExpr(1000000) radix 21) <> "52kc1" or
        (intExpr(1000000) radix 22) <> "45k2c" or
        (intExpr(1000000) radix 23) <> "3d486" or
        (intExpr(1000000) radix 24) <> "3082g" or
        (intExpr(1000000) radix 25) <> "2e000" or
        (intExpr(1000000) radix 26) <> "24n7e" or
        (intExpr(1000000) radix 27) <> "1nlk1" or
        (intExpr(1000000) radix 28) <> "1hfe8" or
        (intExpr(1000000) radix 29) <> "1c01m" or
        (intExpr(1000000) radix 30) <> "1713a" or
        (intExpr(1000000) radix 31) <> "12hi2" or
        (intExpr(1000000) radix 32) <> "ugi0" or
        (intExpr(1000000) radix 33) <> "rr91" or
        (intExpr(1000000) radix 34) <> "pf1q" or
        (intExpr(1000000) radix 35) <> "nbbf" or
        (intExpr(1000000) radix 36) <> "lfls" then
      writeln(" ***** The radix operator does not work correct.");
      okay := FALSE;
    end if;
    if  (1000000 radix intExpr( 2)) <> "11110100001001000000" or
        (1000000 radix intExpr( 3)) <> "1212210202001" or
        (1000000 radix intExpr( 4)) <> "3310021000" or
        (1000000 radix intExpr( 5)) <> "224000000" or
        (1000000 radix intExpr( 6)) <> "33233344" or
        (1000000 radix intExpr( 7)) <> "11333311" or
        (1000000 radix intExpr( 8)) <> "3641100" or
        (1000000 radix intExpr( 9)) <> "1783661" or
        (1000000 radix intExpr(10)) <> "1000000" or
        (1000000 radix intExpr(11)) <> "623351" or
        (1000000 radix intExpr(12)) <> "402854" or
        (1000000 radix intExpr(13)) <> "290221" or
        (1000000 radix intExpr(14)) <> "1c0608" or
        (1000000 radix intExpr(15)) <> "14b46a" or
        (1000000 radix intExpr(16)) <> "f4240" or
        (1000000 radix intExpr(17)) <> "bg939" or
        (1000000 radix intExpr(18)) <> "9987a" or
        (1000000 radix intExpr(19)) <> "7cf1b" or
        (1000000 radix intExpr(20)) <> "65000" or
        (1000000 radix intExpr(21)) <> "52kc1" or
        (1000000 radix intExpr(22)) <> "45k2c" or
        (1000000 radix intExpr(23)) <> "3d486" or
        (1000000 radix intExpr(24)) <> "3082g" or
        (1000000 radix intExpr(25)) <> "2e000" or
        (1000000 radix intExpr(26)) <> "24n7e" or
        (1000000 radix intExpr(27)) <> "1nlk1" or
        (1000000 radix intExpr(28)) <> "1hfe8" or
        (1000000 radix intExpr(29)) <> "1c01m" or
        (1000000 radix intExpr(30)) <> "1713a" or
        (1000000 radix intExpr(31)) <> "12hi2" or
        (1000000 radix intExpr(32)) <> "ugi0" or
        (1000000 radix intExpr(33)) <> "rr91" or
        (1000000 radix intExpr(34)) <> "pf1q" or
        (1000000 radix intExpr(35)) <> "nbbf" or
        (1000000 radix intExpr(36)) <> "lfls" then
      writeln(" ***** The radix operator does not work correct.");
      okay := FALSE;
    end if;
    if  (intExpr(1000000) radix intExpr( 2)) <> "11110100001001000000" or
        (intExpr(1000000) radix intExpr( 3)) <> "1212210202001" or
        (intExpr(1000000) radix intExpr( 4)) <> "3310021000" or
        (intExpr(1000000) radix intExpr( 5)) <> "224000000" or
        (intExpr(1000000) radix intExpr( 6)) <> "33233344" or
        (intExpr(1000000) radix intExpr( 7)) <> "11333311" or
        (intExpr(1000000) radix intExpr( 8)) <> "3641100" or
        (intExpr(1000000) radix intExpr( 9)) <> "1783661" or
        (intExpr(1000000) radix intExpr(10)) <> "1000000" or
        (intExpr(1000000) radix intExpr(11)) <> "623351" or
        (intExpr(1000000) radix intExpr(12)) <> "402854" or
        (intExpr(1000000) radix intExpr(13)) <> "290221" or
        (intExpr(1000000) radix intExpr(14)) <> "1c0608" or
        (intExpr(1000000) radix intExpr(15)) <> "14b46a" or
        (intExpr(1000000) radix intExpr(16)) <> "f4240" or
        (intExpr(1000000) radix intExpr(17)) <> "bg939" or
        (intExpr(1000000) radix intExpr(18)) <> "9987a" or
        (intExpr(1000000) radix intExpr(19)) <> "7cf1b" or
        (intExpr(1000000) radix intExpr(20)) <> "65000" or
        (intExpr(1000000) radix intExpr(21)) <> "52kc1" or
        (intExpr(1000000) radix intExpr(22)) <> "45k2c" or
        (intExpr(1000000) radix intExpr(23)) <> "3d486" or
        (intExpr(1000000) radix intExpr(24)) <> "3082g" or
        (intExpr(1000000) radix intExpr(25)) <> "2e000" or
        (intExpr(1000000) radix intExpr(26)) <> "24n7e" or
        (intExpr(1000000) radix intExpr(27)) <> "1nlk1" or
        (intExpr(1000000) radix intExpr(28)) <> "1hfe8" or
        (intExpr(1000000) radix intExpr(29)) <> "1c01m" or
        (intExpr(1000000) radix intExpr(30)) <> "1713a" or
        (intExpr(1000000) radix intExpr(31)) <> "12hi2" or
        (intExpr(1000000) radix intExpr(32)) <> "ugi0" or
        (intExpr(1000000) radix intExpr(33)) <> "rr91" or
        (intExpr(1000000) radix intExpr(34)) <> "pf1q" or
        (intExpr(1000000) radix intExpr(35)) <> "nbbf" or
        (intExpr(1000000) radix intExpr(36)) <> "lfls" then
      writeln(" ***** The radix operator does not work correct.");
      okay := FALSE;
    end if;
    if  (1000000 RADIX  2) <> "11110100001001000000" or
        (1000000 RADIX  3) <> "1212210202001" or
        (1000000 RADIX  4) <> "3310021000" or
        (1000000 RADIX  5) <> "224000000" or
        (1000000 RADIX  6) <> "33233344" or
        (1000000 RADIX  7) <> "11333311" or
        (1000000 RADIX  8) <> "3641100" or
        (1000000 RADIX  9) <> "1783661" or
        (1000000 RADIX 10) <> "1000000" or
        (1000000 RADIX 11) <> "623351" or
        (1000000 RADIX 12) <> "402854" or
        (1000000 RADIX 13) <> "290221" or
        (1000000 RADIX 14) <> "1C0608" or
        (1000000 RADIX 15) <> "14B46A" or
        (1000000 RADIX 16) <> "F4240" or
        (1000000 RADIX 17) <> "BG939" or
        (1000000 RADIX 18) <> "9987A" or
        (1000000 RADIX 19) <> "7CF1B" or
        (1000000 RADIX 20) <> "65000" or
        (1000000 RADIX 21) <> "52KC1" or
        (1000000 RADIX 22) <> "45K2C" or
        (1000000 RADIX 23) <> "3D486" or
        (1000000 RADIX 24) <> "3082G" or
        (1000000 RADIX 25) <> "2E000" or
        (1000000 RADIX 26) <> "24N7E" or
        (1000000 RADIX 27) <> "1NLK1" or
        (1000000 RADIX 28) <> "1HFE8" or
        (1000000 RADIX 29) <> "1C01M" or
        (1000000 RADIX 30) <> "1713A" or
        (1000000 RADIX 31) <> "12HI2" or
        (1000000 RADIX 32) <> "UGI0" or
        (1000000 RADIX 33) <> "RR91" or
        (1000000 RADIX 34) <> "PF1Q" or
        (1000000 RADIX 35) <> "NBBF" or
        (1000000 RADIX 36) <> "LFLS" then
      writeln(" ***** The RADIX operator does not work correct.");
      okay := FALSE;
    end if;
    if  (intExpr(1000000) RADIX  2) <> "11110100001001000000" or
        (intExpr(1000000) RADIX  3) <> "1212210202001" or
        (intExpr(1000000) RADIX  4) <> "3310021000" or
        (intExpr(1000000) RADIX  5) <> "224000000" or
        (intExpr(1000000) RADIX  6) <> "33233344" or
        (intExpr(1000000) RADIX  7) <> "11333311" or
        (intExpr(1000000) RADIX  8) <> "3641100" or
        (intExpr(1000000) RADIX  9) <> "1783661" or
        (intExpr(1000000) RADIX 10) <> "1000000" or
        (intExpr(1000000) RADIX 11) <> "623351" or
        (intExpr(1000000) RADIX 12) <> "402854" or
        (intExpr(1000000) RADIX 13) <> "290221" or
        (intExpr(1000000) RADIX 14) <> "1C0608" or
        (intExpr(1000000) RADIX 15) <> "14B46A" or
        (intExpr(1000000) RADIX 16) <> "F4240" or
        (intExpr(1000000) RADIX 17) <> "BG939" or
        (intExpr(1000000) RADIX 18) <> "9987A" or
        (intExpr(1000000) RADIX 19) <> "7CF1B" or
        (intExpr(1000000) RADIX 20) <> "65000" or
        (intExpr(1000000) RADIX 21) <> "52KC1" or
        (intExpr(1000000) RADIX 22) <> "45K2C" or
        (intExpr(1000000) RADIX 23) <> "3D486" or
        (intExpr(1000000) RADIX 24) <> "3082G" or
        (intExpr(1000000) RADIX 25) <> "2E000" or
        (intExpr(1000000) RADIX 26) <> "24N7E" or
        (intExpr(1000000) RADIX 27) <> "1NLK1" or
        (intExpr(1000000) RADIX 28) <> "1HFE8" or
        (intExpr(1000000) RADIX 29) <> "1C01M" or
        (intExpr(1000000) RADIX 30) <> "1713A" or
        (intExpr(1000000) RADIX 31) <> "12HI2" or
        (intExpr(1000000) RADIX 32) <> "UGI0" or
        (intExpr(1000000) RADIX 33) <> "RR91" or
        (intExpr(1000000) RADIX 34) <> "PF1Q" or
        (intExpr(1000000) RADIX 35) <> "NBBF" or
        (intExpr(1000000) RADIX 36) <> "LFLS" then
      writeln(" ***** The RADIX operator does not work correct.");
      okay := FALSE;
    end if;
    if  (1000000 RADIX intExpr( 2)) <> "11110100001001000000" or
        (1000000 RADIX intExpr( 3)) <> "1212210202001" or
        (1000000 RADIX intExpr( 4)) <> "3310021000" or
        (1000000 RADIX intExpr( 5)) <> "224000000" or
        (1000000 RADIX intExpr( 6)) <> "33233344" or
        (1000000 RADIX intExpr( 7)) <> "11333311" or
        (1000000 RADIX intExpr( 8)) <> "3641100" or
        (1000000 RADIX intExpr( 9)) <> "1783661" or
        (1000000 RADIX intExpr(10)) <> "1000000" or
        (1000000 RADIX intExpr(11)) <> "623351" or
        (1000000 RADIX intExpr(12)) <> "402854" or
        (1000000 RADIX intExpr(13)) <> "290221" or
        (1000000 RADIX intExpr(14)) <> "1C0608" or
        (1000000 RADIX intExpr(15)) <> "14B46A" or
        (1000000 RADIX intExpr(16)) <> "F4240" or
        (1000000 RADIX intExpr(17)) <> "BG939" or
        (1000000 RADIX intExpr(18)) <> "9987A" or
        (1000000 RADIX intExpr(19)) <> "7CF1B" or
        (1000000 RADIX intExpr(20)) <> "65000" or
        (1000000 RADIX intExpr(21)) <> "52KC1" or
        (1000000 RADIX intExpr(22)) <> "45K2C" or
        (1000000 RADIX intExpr(23)) <> "3D486" or
        (1000000 RADIX intExpr(24)) <> "3082G" or
        (1000000 RADIX intExpr(25)) <> "2E000" or
        (1000000 RADIX intExpr(26)) <> "24N7E" or
        (1000000 RADIX intExpr(27)) <> "1NLK1" or
        (1000000 RADIX intExpr(28)) <> "1HFE8" or
        (1000000 RADIX intExpr(29)) <> "1C01M" or
        (1000000 RADIX intExpr(30)) <> "1713A" or
        (1000000 RADIX intExpr(31)) <> "12HI2" or
        (1000000 RADIX intExpr(32)) <> "UGI0" or
        (1000000 RADIX intExpr(33)) <> "RR91" or
        (1000000 RADIX intExpr(34)) <> "PF1Q" or
        (1000000 RADIX intExpr(35)) <> "NBBF" or
        (1000000 RADIX intExpr(36)) <> "LFLS" then
      writeln(" ***** The RADIX operator does not work correct.");
      okay := FALSE;
    end if;
    if  (intExpr(1000000) RADIX intExpr( 2)) <> "11110100001001000000" or
        (intExpr(1000000) RADIX intExpr( 3)) <> "1212210202001" or
        (intExpr(1000000) RADIX intExpr( 4)) <> "3310021000" or
        (intExpr(1000000) RADIX intExpr( 5)) <> "224000000" or
        (intExpr(1000000) RADIX intExpr( 6)) <> "33233344" or
        (intExpr(1000000) RADIX intExpr( 7)) <> "11333311" or
        (intExpr(1000000) RADIX intExpr( 8)) <> "3641100" or
        (intExpr(1000000) RADIX intExpr( 9)) <> "1783661" or
        (intExpr(1000000) RADIX intExpr(10)) <> "1000000" or
        (intExpr(1000000) RADIX intExpr(11)) <> "623351" or
        (intExpr(1000000) RADIX intExpr(12)) <> "402854" or
        (intExpr(1000000) RADIX intExpr(13)) <> "290221" or
        (intExpr(1000000) RADIX intExpr(14)) <> "1C0608" or
        (intExpr(1000000) RADIX intExpr(15)) <> "14B46A" or
        (intExpr(1000000) RADIX intExpr(16)) <> "F4240" or
        (intExpr(1000000) RADIX intExpr(17)) <> "BG939" or
        (intExpr(1000000) RADIX intExpr(18)) <> "9987A" or
        (intExpr(1000000) RADIX intExpr(19)) <> "7CF1B" or
        (intExpr(1000000) RADIX intExpr(20)) <> "65000" or
        (intExpr(1000000) RADIX intExpr(21)) <> "52KC1" or
        (intExpr(1000000) RADIX intExpr(22)) <> "45K2C" or
        (intExpr(1000000) RADIX intExpr(23)) <> "3D486" or
        (intExpr(1000000) RADIX intExpr(24)) <> "3082G" or
        (intExpr(1000000) RADIX intExpr(25)) <> "2E000" or
        (intExpr(1000000) RADIX intExpr(26)) <> "24N7E" or
        (intExpr(1000000) RADIX intExpr(27)) <> "1NLK1" or
        (intExpr(1000000) RADIX intExpr(28)) <> "1HFE8" or
        (intExpr(1000000) RADIX intExpr(29)) <> "1C01M" or
        (intExpr(1000000) RADIX intExpr(30)) <> "1713A" or
        (intExpr(1000000) RADIX intExpr(31)) <> "12HI2" or
        (intExpr(1000000) RADIX intExpr(32)) <> "UGI0" or
        (intExpr(1000000) RADIX intExpr(33)) <> "RR91" or
        (intExpr(1000000) RADIX intExpr(34)) <> "PF1Q" or
        (intExpr(1000000) RADIX intExpr(35)) <> "NBBF" or
        (intExpr(1000000) RADIX intExpr(36)) <> "LFLS" then
      writeln(" ***** The RADIX operator does not work correct.");
      okay := FALSE;
    end if;

    if  (        INT64_MIN            radix         2 ) <> "-1000000000000000000000000000000000000000000000000000000000000000" or
        (intExpr(INT64_MIN)           radix         2 ) <> "-1000000000000000000000000000000000000000000000000000000000000000" or
        (        INT64_MIN            radix intExpr(2)) <> "-1000000000000000000000000000000000000000000000000000000000000000" or
        (intExpr(INT64_MIN)           radix intExpr(2)) <> "-1000000000000000000000000000000000000000000000000000000000000000" or
        (        INT32_MIN            radix         2 ) <>                                 "-10000000000000000000000000000000" or
        (intExpr(INT32_MIN)           radix         2 ) <>                                 "-10000000000000000000000000000000" or
        (        INT32_MIN            radix intExpr(2)) <>                                 "-10000000000000000000000000000000" or
        (intExpr(INT32_MIN)           radix intExpr(2)) <>                                 "-10000000000000000000000000000000" or
        (                 2147483647  radix         2 ) <>                                   "1111111111111111111111111111111" or
        (intExpr(         2147483647) radix         2 ) <>                                   "1111111111111111111111111111111" or
        (                 2147483647  radix intExpr(2)) <>                                   "1111111111111111111111111111111" or
        (intExpr(         2147483647) radix intExpr(2)) <>                                   "1111111111111111111111111111111" or
        (        9223372036854775807  radix         2 ) <>   "111111111111111111111111111111111111111111111111111111111111111" or
        (intExpr(9223372036854775807) radix         2 ) <>   "111111111111111111111111111111111111111111111111111111111111111" or
        (        9223372036854775807  radix intExpr(2)) <>   "111111111111111111111111111111111111111111111111111111111111111" or
        (intExpr(9223372036854775807) radix intExpr(2)) <>   "111111111111111111111111111111111111111111111111111111111111111" then
      writeln(" ***** The radix operator with base 2 does not work correct.");
      okay := FALSE;
    end if;

    if  not raisesRangeError(        123  radix         integer.first ) or
        not raisesRangeError(        123  radix                    -1 ) or
        not raisesRangeError(        123  radix                     0 ) or
        not raisesRangeError(        123  radix                     1 ) or
        not raisesRangeError(        123  radix                    37 ) or
        not raisesRangeError(        123  radix                    38 ) or
        not raisesRangeError(        123  radix          integer.last ) or
        not raisesRangeError(intExpr(123) radix         integer.first ) or
        not raisesRangeError(intExpr(123) radix                    -1 ) or
        not raisesRangeError(intExpr(123) radix                     0 ) or
        not raisesRangeError(intExpr(123) radix                     1 ) or
        not raisesRangeError(intExpr(123) radix                    37 ) or
        not raisesRangeError(intExpr(123) radix                    38 ) or
        not raisesRangeError(intExpr(123) radix          integer.last ) or
        not raisesRangeError(        123  radix intExpr(integer.first)) or
        not raisesRangeError(        123  radix intExpr(           -1)) or
        not raisesRangeError(        123  radix intExpr(            0)) or
        not raisesRangeError(        123  radix intExpr(            1)) or
        not raisesRangeError(        123  radix intExpr(           37)) or
        not raisesRangeError(        123  radix intExpr(           38)) or
        not raisesRangeError(        123  radix intExpr( integer.last)) or
        not raisesRangeError(intExpr(123) radix intExpr(integer.first)) or
        not raisesRangeError(intExpr(123) radix intExpr(           -1)) or
        not raisesRangeError(intExpr(123) radix intExpr(            0)) or
        not raisesRangeError(intExpr(123) radix intExpr(            1)) or
        not raisesRangeError(intExpr(123) radix intExpr(           37)) or
        not raisesRangeError(intExpr(123) radix intExpr(           38)) or
        not raisesRangeError(intExpr(123) radix intExpr( integer.last)) then
      writeln(" ***** The radix operator does not raise RANGE_ERROR for an illegal base.");
      okay := FALSE;
    end if;

    if  not raisesRangeError(        123  RADIX         integer.first ) or
        not raisesRangeError(        123  RADIX                    -1 ) or
        not raisesRangeError(        123  RADIX                     0 ) or
        not raisesRangeError(        123  RADIX                     1 ) or
        not raisesRangeError(        123  RADIX                    37 ) or
        not raisesRangeError(        123  RADIX                    38 ) or
        not raisesRangeError(        123  RADIX          integer.last ) or
        not raisesRangeError(intExpr(123) RADIX         integer.first ) or
        not raisesRangeError(intExpr(123) RADIX                    -1 ) or
        not raisesRangeError(intExpr(123) RADIX                     0 ) or
        not raisesRangeError(intExpr(123) RADIX                     1 ) or
        not raisesRangeError(intExpr(123) RADIX                    37 ) or
        not raisesRangeError(intExpr(123) RADIX                    38 ) or
        not raisesRangeError(intExpr(123) RADIX          integer.last ) or
        not raisesRangeError(        123  RADIX intExpr(integer.first)) or
        not raisesRangeError(        123  RADIX intExpr(           -1)) or
        not raisesRangeError(        123  RADIX intExpr(            0)) or
        not raisesRangeError(        123  RADIX intExpr(            1)) or
        not raisesRangeError(        123  RADIX intExpr(           37)) or
        not raisesRangeError(        123  RADIX intExpr(           38)) or
        not raisesRangeError(        123  RADIX intExpr( integer.last)) or
        not raisesRangeError(intExpr(123) RADIX intExpr(integer.first)) or
        not raisesRangeError(intExpr(123) RADIX intExpr(           -1)) or
        not raisesRangeError(intExpr(123) RADIX intExpr(            0)) or
        not raisesRangeError(intExpr(123) RADIX intExpr(            1)) or
        not raisesRangeError(intExpr(123) RADIX intExpr(           37)) or
        not raisesRangeError(intExpr(123) RADIX intExpr(           38)) or
        not raisesRangeError(intExpr(123) RADIX intExpr( integer.last)) then
      writeln(" ***** The RADIX operator does not raise RANGE_ERROR for an illegal base.");
      okay := FALSE;
    end if;

    if okay then
      writeln("Integer str does work correct.");
    end if;
  end func;


const proc: check_sci is func
  local
    var boolean: okay is TRUE;
  begin
    if  (-9223372036854775807 sci  0) <> "-9e+18" or
        (-9223372036854775807 sci  1) <> "-9.2e+18" or
        (-9223372036854775807 sci  2) <> "-9.22e+18" or
        (-9223372036854775807 sci  3) <> "-9.223e+18" or
        (-9223372036854775807 sci 10) <> "-9.2233720369e+18" or
        (-9223372036854775807 sci 15) <> "-9.223372036854776e+18" or
        (-9223372036854775807 sci 18) <> "-9.223372036854775807e+18" or
        (-9223372036854775807 sci 19) <> "-9.2233720368547758070e+18" or
        (-9223372036854775807 sci 30) <> "-9.223372036854775807000000000000e+18" or
        (       -123456789015 sci  0) <> "-1e+11" or
        (       -123456789015 sci  1) <> "-1.2e+11" or
        (       -123456789015 sci  2) <> "-1.23e+11" or
        (       -123456789015 sci  3) <> "-1.235e+11" or
        (       -123456789015 sci 10) <> "-1.2345678902e+11" or
        (       -123456789015 sci 15) <> "-1.234567890150000e+11" or
        (       -123456789015 sci 18) <> "-1.234567890150000000e+11" or
        (       -123456789015 sci 19) <> "-1.2345678901500000000e+11" or
        (       -123456789015 sci 30) <> "-1.234567890150000000000000000000e+11" or
        (       -123456789014 sci  0) <> "-1e+11" or
        (       -123456789014 sci  1) <> "-1.2e+11" or
        (       -123456789014 sci  2) <> "-1.23e+11" or
        (       -123456789014 sci  3) <> "-1.235e+11" or
        (       -123456789014 sci 10) <> "-1.2345678901e+11" or
        (       -123456789014 sci 15) <> "-1.234567890140000e+11" or
        (       -123456789014 sci 18) <> "-1.234567890140000000e+11" or
        (       -123456789014 sci 19) <> "-1.2345678901400000000e+11" or
        (       -123456789014 sci 30) <> "-1.234567890140000000000000000000e+11" or
        (        -12345678901 sci  0) <> "-1e+10" or
        (        -12345678901 sci  1) <> "-1.2e+10" or
        (        -12345678901 sci  2) <> "-1.23e+10" or
        (        -12345678901 sci  3) <> "-1.235e+10" or
        (        -12345678901 sci 10) <> "-1.2345678901e+10" or
        (        -12345678901 sci 15) <> "-1.234567890100000e+10" or
        (        -12345678901 sci 18) <> "-1.234567890100000000e+10" or
        (        -12345678901 sci 19) <> "-1.2345678901000000000e+10" or
        (        -12345678901 sci 30) <> "-1.234567890100000000000000000000e+10" or
        (         -1234567890 sci  0) <> "-1e+9" or
        (         -1234567890 sci  1) <> "-1.2e+9" or
        (         -1234567890 sci  2) <> "-1.23e+9" or
        (         -1234567890 sci  3) <> "-1.235e+9" or
        (         -1234567890 sci 10) <> "-1.2345678900e+9" or
        (         -1234567890 sci 15) <> "-1.234567890000000e+9" or
        (         -1234567890 sci 18) <> "-1.234567890000000000e+9" or
        (         -1234567890 sci 19) <> "-1.2345678900000000000e+9" or
        (         -1234567890 sci 30) <> "-1.234567890000000000000000000000e+9" or
        (          -123456789 sci  0) <> "-1e+8" or
        (          -123456789 sci  1) <> "-1.2e+8" or
        (          -123456789 sci  2) <> "-1.23e+8" or
        (          -123456789 sci  3) <> "-1.235e+8" or
        (          -123456789 sci 10) <> "-1.2345678900e+8" or
        (          -123456789 sci 15) <> "-1.234567890000000e+8" or
        (          -123456789 sci 18) <> "-1.234567890000000000e+8" or
        (          -123456789 sci 19) <> "-1.2345678900000000000e+8" or
        (          -123456789 sci 30) <> "-1.234567890000000000000000000000e+8" or
        (           -12345678 sci  0) <> "-1e+7" or
        (           -12345678 sci  1) <> "-1.2e+7" or
        (           -12345678 sci  2) <> "-1.23e+7" or
        (           -12345678 sci  3) <> "-1.235e+7" or
        (           -12345678 sci 10) <> "-1.2345678000e+7" or
        (           -12345678 sci 15) <> "-1.234567800000000e+7" or
        (           -12345678 sci 18) <> "-1.234567800000000000e+7" or
        (           -12345678 sci 19) <> "-1.2345678000000000000e+7" or
        (           -12345678 sci 30) <> "-1.234567800000000000000000000000e+7" or
        (            -1234567 sci  0) <> "-1e+6" or
        (            -1234567 sci  1) <> "-1.2e+6" or
        (            -1234567 sci  2) <> "-1.23e+6" or
        (            -1234567 sci  3) <> "-1.235e+6" or
        (            -1234567 sci 10) <> "-1.2345670000e+6" or
        (            -1234567 sci 15) <> "-1.234567000000000e+6" or
        (            -1234567 sci 18) <> "-1.234567000000000000e+6" or
        (            -1234567 sci 19) <> "-1.2345670000000000000e+6" or
        (            -1234567 sci 30) <> "-1.234567000000000000000000000000e+6" or
        (             -123456 sci  0) <> "-1e+5" or
        (             -123456 sci  1) <> "-1.2e+5" or
        (             -123456 sci  2) <> "-1.23e+5" or
        (             -123456 sci  3) <> "-1.235e+5" or
        (             -123456 sci 10) <> "-1.2345600000e+5" or
        (             -123456 sci 15) <> "-1.234560000000000e+5" or
        (             -123456 sci 18) <> "-1.234560000000000000e+5" or
        (             -123456 sci 19) <> "-1.2345600000000000000e+5" or
        (             -123456 sci 30) <> "-1.234560000000000000000000000000e+5" or
        (              -12345 sci  0) <> "-1e+4" or
        (              -12345 sci  1) <> "-1.2e+4" or
        (              -12345 sci  2) <> "-1.23e+4" or
        (              -12345 sci  3) <> "-1.235e+4" or
        (              -12345 sci 10) <> "-1.2345000000e+4" or
        (              -12345 sci 15) <> "-1.234500000000000e+4" or
        (              -12345 sci 18) <> "-1.234500000000000000e+4" or
        (              -12345 sci 19) <> "-1.2345000000000000000e+4" or
        (              -12345 sci 30) <> "-1.234500000000000000000000000000e+4" or
        (              -10000 sci  0) <> "-1e+4" or
        (              -10000 sci  1) <> "-1.0e+4" or
        (              -10000 sci  2) <> "-1.00e+4" or
        (              -10000 sci  3) <> "-1.000e+4" or
        (              -10000 sci 10) <> "-1.0000000000e+4" or
        (              -10000 sci 15) <> "-1.000000000000000e+4" or
        (              -10000 sci 18) <> "-1.000000000000000000e+4" or
        (              -10000 sci 19) <> "-1.0000000000000000000e+4" or
        (              -10000 sci 30) <> "-1.000000000000000000000000000000e+4" or
        (               -9999 sci  0) <> "-1e+4" or
        (               -9999 sci  1) <> "-1.0e+4" or
        (               -9999 sci  2) <> "-1.00e+4" or
        (               -9999 sci  3) <> "-9.999e+3" or
        (               -9999 sci 10) <> "-9.9990000000e+3" or
        (               -9999 sci 15) <> "-9.999000000000000e+3" or
        (               -9999 sci 18) <> "-9.999000000000000000e+3" or
        (               -9999 sci 19) <> "-9.9990000000000000000e+3" or
        (               -9999 sci 30) <> "-9.999000000000000000000000000000e+3" or
        (               -4567 sci  0) <> "-5e+3" or
        (               -4567 sci  1) <> "-4.6e+3" or
        (               -4567 sci  2) <> "-4.57e+3" or
        (               -4567 sci  3) <> "-4.567e+3" or
        (               -4567 sci 10) <> "-4.5670000000e+3" or
        (               -4567 sci 15) <> "-4.567000000000000e+3" or
        (               -4567 sci 18) <> "-4.567000000000000000e+3" or
        (               -4567 sci 19) <> "-4.5670000000000000000e+3" or
        (               -4567 sci 30) <> "-4.567000000000000000000000000000e+3" or
        (               -3456 sci  0) <> "-3e+3" or
        (               -3456 sci  1) <> "-3.5e+3" or
        (               -3456 sci  2) <> "-3.46e+3" or
        (               -3456 sci  3) <> "-3.456e+3" or
        (               -3456 sci 10) <> "-3.4560000000e+3" or
        (               -3456 sci 15) <> "-3.456000000000000e+3" or
        (               -3456 sci 18) <> "-3.456000000000000000e+3" or
        (               -3456 sci 19) <> "-3.4560000000000000000e+3" or
        (               -3456 sci 30) <> "-3.456000000000000000000000000000e+3" or
        (               -2345 sci  0) <> "-2e+3" or
        (               -2345 sci  1) <> "-2.3e+3" or
        (               -2345 sci  2) <> "-2.35e+3" or
        (               -2345 sci  3) <> "-2.345e+3" or
        (               -2345 sci 10) <> "-2.3450000000e+3" or
        (               -2345 sci 15) <> "-2.345000000000000e+3" or
        (               -2345 sci 18) <> "-2.345000000000000000e+3" or
        (               -2345 sci 19) <> "-2.3450000000000000000e+3" or
        (               -2345 sci 30) <> "-2.345000000000000000000000000000e+3" or
        (               -1234 sci  0) <> "-1e+3" or
        (               -1234 sci  1) <> "-1.2e+3" or
        (               -1234 sci  2) <> "-1.23e+3" or
        (               -1234 sci  3) <> "-1.234e+3" or
        (               -1234 sci 10) <> "-1.2340000000e+3" or
        (               -1234 sci 15) <> "-1.234000000000000e+3" or
        (               -1234 sci 18) <> "-1.234000000000000000e+3" or
        (               -1234 sci 19) <> "-1.2340000000000000000e+3" or
        (               -1234 sci 30) <> "-1.234000000000000000000000000000e+3" or
        (               -1000 sci  0) <> "-1e+3" or
        (               -1000 sci  1) <> "-1.0e+3" or
        (               -1000 sci  2) <> "-1.00e+3" or
        (               -1000 sci  3) <> "-1.000e+3" or
        (               -1000 sci 10) <> "-1.0000000000e+3" or
        (               -1000 sci 15) <> "-1.000000000000000e+3" or
        (               -1000 sci 18) <> "-1.000000000000000000e+3" or
        (               -1000 sci 19) <> "-1.0000000000000000000e+3" or
        (               -1000 sci 30) <> "-1.000000000000000000000000000000e+3" or
        (                -999 sci  0) <> "-1e+3" or
        (                -999 sci  1) <> "-1.0e+3" or
        (                -999 sci  2) <> "-9.99e+2" or
        (                -999 sci  3) <> "-9.990e+2" or
        (                -999 sci 10) <> "-9.9900000000e+2" or
        (                -999 sci 15) <> "-9.990000000000000e+2" or
        (                -999 sci 18) <> "-9.990000000000000000e+2" or
        (                -999 sci 19) <> "-9.9900000000000000000e+2" or
        (                -999 sci 30) <> "-9.990000000000000000000000000000e+2" or
        (                -555 sci  0) <> "-6e+2" or
        (                -555 sci  1) <> "-5.6e+2" or
        (                -555 sci  2) <> "-5.55e+2" or
        (                -555 sci  3) <> "-5.550e+2" or
        (                -555 sci 10) <> "-5.5500000000e+2" or
        (                -555 sci 15) <> "-5.550000000000000e+2" or
        (                -555 sci 18) <> "-5.550000000000000000e+2" or
        (                -555 sci 19) <> "-5.5500000000000000000e+2" or
        (                -555 sci 30) <> "-5.550000000000000000000000000000e+2" or
        (                -454 sci  0) <> "-5e+2" or
        (                -454 sci  1) <> "-4.5e+2" or
        (                -454 sci  2) <> "-4.54e+2" or
        (                -454 sci  3) <> "-4.540e+2" or
        (                -454 sci 10) <> "-4.5400000000e+2" or
        (                -454 sci 15) <> "-4.540000000000000e+2" or
        (                -454 sci 18) <> "-4.540000000000000000e+2" or
        (                -454 sci 19) <> "-4.5400000000000000000e+2" or
        (                -454 sci 30) <> "-4.540000000000000000000000000000e+2" or
        (                -345 sci  0) <> "-3e+2" or
        (                -345 sci  1) <> "-3.5e+2" or
        (                -345 sci  2) <> "-3.45e+2" or
        (                -345 sci  3) <> "-3.450e+2" or
        (                -345 sci 10) <> "-3.4500000000e+2" or
        (                -345 sci 15) <> "-3.450000000000000e+2" or
        (                -345 sci 18) <> "-3.450000000000000000e+2" or
        (                -345 sci 19) <> "-3.4500000000000000000e+2" or
        (                -345 sci 30) <> "-3.450000000000000000000000000000e+2" or
        (                -234 sci  0) <> "-2e+2" or
        (                -234 sci  1) <> "-2.3e+2" or
        (                -234 sci  2) <> "-2.34e+2" or
        (                -234 sci  3) <> "-2.340e+2" or
        (                -234 sci 10) <> "-2.3400000000e+2" or
        (                -234 sci 15) <> "-2.340000000000000e+2" or
        (                -234 sci 18) <> "-2.340000000000000000e+2" or
        (                -234 sci 19) <> "-2.3400000000000000000e+2" or
        (                -234 sci 30) <> "-2.340000000000000000000000000000e+2" or
        (                -100 sci  0) <> "-1e+2" or
        (                -100 sci  1) <> "-1.0e+2" or
        (                -100 sci  2) <> "-1.00e+2" or
        (                -100 sci  3) <> "-1.000e+2" or
        (                -100 sci 10) <> "-1.0000000000e+2" or
        (                -100 sci 15) <> "-1.000000000000000e+2" or
        (                -100 sci 18) <> "-1.000000000000000000e+2" or
        (                -100 sci 19) <> "-1.0000000000000000000e+2" or
        (                -100 sci 30) <> "-1.000000000000000000000000000000e+2" or
        (                 -99 sci  0) <> "-1e+2" or
        (                 -99 sci  1) <> "-9.9e+1" or
        (                 -99 sci  2) <> "-9.90e+1" or
        (                 -99 sci  3) <> "-9.900e+1" or
        (                 -99 sci 10) <> "-9.9000000000e+1" or
        (                 -99 sci 15) <> "-9.900000000000000e+1" or
        (                 -99 sci 18) <> "-9.900000000000000000e+1" or
        (                 -99 sci 19) <> "-9.9000000000000000000e+1" or
        (                 -99 sci 30) <> "-9.900000000000000000000000000000e+1" or
        (                 -65 sci  0) <> "-7e+1" or
        (                 -65 sci  1) <> "-6.5e+1" or
        (                 -65 sci  2) <> "-6.50e+1" or
        (                 -65 sci  3) <> "-6.500e+1" or
        (                 -65 sci 10) <> "-6.5000000000e+1" or
        (                 -65 sci 15) <> "-6.500000000000000e+1" or
        (                 -65 sci 18) <> "-6.500000000000000000e+1" or
        (                 -65 sci 19) <> "-6.5000000000000000000e+1" or
        (                 -65 sci 30) <> "-6.500000000000000000000000000000e+1" or
        (                 -34 sci  0) <> "-3e+1" or
        (                 -34 sci  1) <> "-3.4e+1" or
        (                 -34 sci  2) <> "-3.40e+1" or
        (                 -34 sci  3) <> "-3.400e+1" or
        (                 -34 sci 10) <> "-3.4000000000e+1" or
        (                 -34 sci 15) <> "-3.400000000000000e+1" or
        (                 -34 sci 18) <> "-3.400000000000000000e+1" or
        (                 -34 sci 19) <> "-3.4000000000000000000e+1" or
        (                 -34 sci 30) <> "-3.400000000000000000000000000000e+1" or
        (                 -10 sci  0) <> "-1e+1" or
        (                 -10 sci  1) <> "-1.0e+1" or
        (                 -10 sci  2) <> "-1.00e+1" or
        (                 -10 sci  3) <> "-1.000e+1" or
        (                 -10 sci 10) <> "-1.0000000000e+1" or
        (                 -10 sci 15) <> "-1.000000000000000e+1" or
        (                 -10 sci 18) <> "-1.000000000000000000e+1" or
        (                 -10 sci 19) <> "-1.0000000000000000000e+1" or
        (                 -10 sci 30) <> "-1.000000000000000000000000000000e+1" or
        (                  -9 sci  0) <> "-9e+0" or
        (                  -9 sci  1) <> "-9.0e+0" or
        (                  -9 sci  2) <> "-9.00e+0" or
        (                  -9 sci  3) <> "-9.000e+0" or
        (                  -9 sci 10) <> "-9.0000000000e+0" or
        (                  -9 sci 15) <> "-9.000000000000000e+0" or
        (                  -9 sci 18) <> "-9.000000000000000000e+0" or
        (                  -9 sci 19) <> "-9.0000000000000000000e+0" or
        (                  -9 sci 30) <> "-9.000000000000000000000000000000e+0" or
        (                  -2 sci  0) <> "-2e+0" or
        (                  -2 sci  1) <> "-2.0e+0" or
        (                  -2 sci  2) <> "-2.00e+0" or
        (                  -2 sci  3) <> "-2.000e+0" or
        (                  -2 sci 10) <> "-2.0000000000e+0" or
        (                  -2 sci 15) <> "-2.000000000000000e+0" or
        (                  -2 sci 18) <> "-2.000000000000000000e+0" or
        (                  -2 sci 19) <> "-2.0000000000000000000e+0" or
        (                  -2 sci 30) <> "-2.000000000000000000000000000000e+0" or
        (                  -1 sci  0) <> "-1e+0" or
        (                  -1 sci  1) <> "-1.0e+0" or
        (                  -1 sci  2) <> "-1.00e+0" or
        (                  -1 sci  3) <> "-1.000e+0" or
        (                  -1 sci 10) <> "-1.0000000000e+0" or
        (                  -1 sci 15) <> "-1.000000000000000e+0" or
        (                  -1 sci 18) <> "-1.000000000000000000e+0" or
        (                  -1 sci 19) <> "-1.0000000000000000000e+0" or
        (                  -1 sci 30) <> "-1.000000000000000000000000000000e+0" or
        (                   0 sci  0) <> "0e+0" or
        (                   0 sci  1) <> "0.0e+0" or
        (                   0 sci  2) <> "0.00e+0" or
        (                   0 sci  3) <> "0.000e+0" or
        (                   0 sci 10) <> "0.0000000000e+0" or
        (                   0 sci 15) <> "0.000000000000000e+0" or
        (                   0 sci 18) <> "0.000000000000000000e+0" or
        (                   0 sci 19) <> "0.0000000000000000000e+0" or
        (                   0 sci 30) <> "0.000000000000000000000000000000e+0" or
        (                   1 sci  0) <> "1e+0" or
        (                   1 sci  1) <> "1.0e+0" or
        (                   1 sci  2) <> "1.00e+0" or
        (                   1 sci  3) <> "1.000e+0" or
        (                   1 sci 10) <> "1.0000000000e+0" or
        (                   1 sci 15) <> "1.000000000000000e+0" or
        (                   1 sci 18) <> "1.000000000000000000e+0" or
        (                   1 sci 19) <> "1.0000000000000000000e+0" or
        (                   1 sci 30) <> "1.000000000000000000000000000000e+0" or
        (                   2 sci  0) <> "2e+0" or
        (                   2 sci  1) <> "2.0e+0" or
        (                   2 sci  2) <> "2.00e+0" or
        (                   2 sci  3) <> "2.000e+0" or
        (                   2 sci 10) <> "2.0000000000e+0" or
        (                   2 sci 15) <> "2.000000000000000e+0" or
        (                   2 sci 18) <> "2.000000000000000000e+0" or
        (                   2 sci 19) <> "2.0000000000000000000e+0" or
        (                   2 sci 30) <> "2.000000000000000000000000000000e+0" or
        (                   9 sci  0) <> "9e+0" or
        (                   9 sci  1) <> "9.0e+0" or
        (                   9 sci  2) <> "9.00e+0" or
        (                   9 sci  3) <> "9.000e+0" or
        (                   9 sci 10) <> "9.0000000000e+0" or
        (                   9 sci 15) <> "9.000000000000000e+0" or
        (                   9 sci 18) <> "9.000000000000000000e+0" or
        (                   9 sci 19) <> "9.0000000000000000000e+0" or
        (                   9 sci 30) <> "9.000000000000000000000000000000e+0" or
        (                  10 sci  0) <> "1e+1" or
        (                  10 sci  1) <> "1.0e+1" or
        (                  10 sci  2) <> "1.00e+1" or
        (                  10 sci  3) <> "1.000e+1" or
        (                  10 sci 10) <> "1.0000000000e+1" or
        (                  10 sci 15) <> "1.000000000000000e+1" or
        (                  10 sci 18) <> "1.000000000000000000e+1" or
        (                  10 sci 19) <> "1.0000000000000000000e+1" or
        (                  10 sci 30) <> "1.000000000000000000000000000000e+1" or
        (                  34 sci  0) <> "3e+1" or
        (                  34 sci  1) <> "3.4e+1" or
        (                  34 sci  2) <> "3.40e+1" or
        (                  34 sci  3) <> "3.400e+1" or
        (                  34 sci 10) <> "3.4000000000e+1" or
        (                  34 sci 15) <> "3.400000000000000e+1" or
        (                  34 sci 18) <> "3.400000000000000000e+1" or
        (                  34 sci 19) <> "3.4000000000000000000e+1" or
        (                  34 sci 30) <> "3.400000000000000000000000000000e+1" or
        (                  65 sci  0) <> "7e+1" or
        (                  65 sci  1) <> "6.5e+1" or
        (                  65 sci  2) <> "6.50e+1" or
        (                  65 sci  3) <> "6.500e+1" or
        (                  65 sci 10) <> "6.5000000000e+1" or
        (                  65 sci 15) <> "6.500000000000000e+1" or
        (                  65 sci 18) <> "6.500000000000000000e+1" or
        (                  65 sci 19) <> "6.5000000000000000000e+1" or
        (                  65 sci 30) <> "6.500000000000000000000000000000e+1" or
        (                  99 sci  0) <> "1e+2" or
        (                  99 sci  1) <> "9.9e+1" or
        (                  99 sci  2) <> "9.90e+1" or
        (                  99 sci  3) <> "9.900e+1" or
        (                  99 sci 10) <> "9.9000000000e+1" or
        (                  99 sci 15) <> "9.900000000000000e+1" or
        (                  99 sci 18) <> "9.900000000000000000e+1" or
        (                  99 sci 19) <> "9.9000000000000000000e+1" or
        (                  99 sci 30) <> "9.900000000000000000000000000000e+1" or
        (                 100 sci  0) <> "1e+2" or
        (                 100 sci  1) <> "1.0e+2" or
        (                 100 sci  2) <> "1.00e+2" or
        (                 100 sci  3) <> "1.000e+2" or
        (                 100 sci 10) <> "1.0000000000e+2" or
        (                 100 sci 15) <> "1.000000000000000e+2" or
        (                 100 sci 18) <> "1.000000000000000000e+2" or
        (                 100 sci 19) <> "1.0000000000000000000e+2" or
        (                 100 sci 30) <> "1.000000000000000000000000000000e+2" or
        (                 234 sci  0) <> "2e+2" or
        (                 234 sci  1) <> "2.3e+2" or
        (                 234 sci  2) <> "2.34e+2" or
        (                 234 sci  3) <> "2.340e+2" or
        (                 234 sci 10) <> "2.3400000000e+2" or
        (                 234 sci 15) <> "2.340000000000000e+2" or
        (                 234 sci 18) <> "2.340000000000000000e+2" or
        (                 234 sci 19) <> "2.3400000000000000000e+2" or
        (                 234 sci 30) <> "2.340000000000000000000000000000e+2" or
        (                 345 sci  0) <> "3e+2" or
        (                 345 sci  1) <> "3.5e+2" or
        (                 345 sci  2) <> "3.45e+2" or
        (                 345 sci  3) <> "3.450e+2" or
        (                 345 sci 10) <> "3.4500000000e+2" or
        (                 345 sci 15) <> "3.450000000000000e+2" or
        (                 345 sci 18) <> "3.450000000000000000e+2" or
        (                 345 sci 19) <> "3.4500000000000000000e+2" or
        (                 345 sci 30) <> "3.450000000000000000000000000000e+2" or
        (                 454 sci  0) <> "5e+2" or
        (                 454 sci  1) <> "4.5e+2" or
        (                 454 sci  2) <> "4.54e+2" or
        (                 454 sci  3) <> "4.540e+2" or
        (                 454 sci 10) <> "4.5400000000e+2" or
        (                 454 sci 15) <> "4.540000000000000e+2" or
        (                 454 sci 18) <> "4.540000000000000000e+2" or
        (                 454 sci 19) <> "4.5400000000000000000e+2" or
        (                 454 sci 30) <> "4.540000000000000000000000000000e+2" or
        (                 555 sci  0) <> "6e+2" or
        (                 555 sci  1) <> "5.6e+2" or
        (                 555 sci  2) <> "5.55e+2" or
        (                 555 sci  3) <> "5.550e+2" or
        (                 555 sci 10) <> "5.5500000000e+2" or
        (                 555 sci 15) <> "5.550000000000000e+2" or
        (                 555 sci 18) <> "5.550000000000000000e+2" or
        (                 555 sci 19) <> "5.5500000000000000000e+2" or
        (                 555 sci 30) <> "5.550000000000000000000000000000e+2" or
        (                 999 sci  0) <> "1e+3" or
        (                 999 sci  1) <> "1.0e+3" or
        (                 999 sci  2) <> "9.99e+2" or
        (                 999 sci  3) <> "9.990e+2" or
        (                 999 sci 10) <> "9.9900000000e+2" or
        (                 999 sci 15) <> "9.990000000000000e+2" or
        (                 999 sci 18) <> "9.990000000000000000e+2" or
        (                 999 sci 19) <> "9.9900000000000000000e+2" or
        (                 999 sci 30) <> "9.990000000000000000000000000000e+2" or
        (                1000 sci  0) <> "1e+3" or
        (                1000 sci  1) <> "1.0e+3" or
        (                1000 sci  2) <> "1.00e+3" or
        (                1000 sci  3) <> "1.000e+3" or
        (                1000 sci 10) <> "1.0000000000e+3" or
        (                1000 sci 15) <> "1.000000000000000e+3" or
        (                1000 sci 18) <> "1.000000000000000000e+3" or
        (                1000 sci 19) <> "1.0000000000000000000e+3" or
        (                1000 sci 30) <> "1.000000000000000000000000000000e+3" or
        (                1234 sci  0) <> "1e+3" or
        (                1234 sci  1) <> "1.2e+3" or
        (                1234 sci  2) <> "1.23e+3" or
        (                1234 sci  3) <> "1.234e+3" or
        (                1234 sci 10) <> "1.2340000000e+3" or
        (                1234 sci 15) <> "1.234000000000000e+3" or
        (                1234 sci 18) <> "1.234000000000000000e+3" or
        (                1234 sci 19) <> "1.2340000000000000000e+3" or
        (                1234 sci 30) <> "1.234000000000000000000000000000e+3" or
        (                2345 sci  0) <> "2e+3" or
        (                2345 sci  1) <> "2.3e+3" or
        (                2345 sci  2) <> "2.35e+3" or
        (                2345 sci  3) <> "2.345e+3" or
        (                2345 sci 10) <> "2.3450000000e+3" or
        (                2345 sci 15) <> "2.345000000000000e+3" or
        (                2345 sci 18) <> "2.345000000000000000e+3" or
        (                2345 sci 19) <> "2.3450000000000000000e+3" or
        (                2345 sci 30) <> "2.345000000000000000000000000000e+3" or
        (                3456 sci  0) <> "3e+3" or
        (                3456 sci  1) <> "3.5e+3" or
        (                3456 sci  2) <> "3.46e+3" or
        (                3456 sci  3) <> "3.456e+3" or
        (                3456 sci 10) <> "3.4560000000e+3" or
        (                3456 sci 15) <> "3.456000000000000e+3" or
        (                3456 sci 18) <> "3.456000000000000000e+3" or
        (                3456 sci 19) <> "3.4560000000000000000e+3" or
        (                3456 sci 30) <> "3.456000000000000000000000000000e+3" or
        (                4567 sci  0) <> "5e+3" or
        (                4567 sci  1) <> "4.6e+3" or
        (                4567 sci  2) <> "4.57e+3" or
        (                4567 sci  3) <> "4.567e+3" or
        (                4567 sci 10) <> "4.5670000000e+3" or
        (                4567 sci 15) <> "4.567000000000000e+3" or
        (                4567 sci 18) <> "4.567000000000000000e+3" or
        (                4567 sci 19) <> "4.5670000000000000000e+3" or
        (                4567 sci 30) <> "4.567000000000000000000000000000e+3" or
        (                9999 sci  0) <> "1e+4" or
        (                9999 sci  1) <> "1.0e+4" or
        (                9999 sci  2) <> "1.00e+4" or
        (                9999 sci  3) <> "9.999e+3" or
        (                9999 sci 10) <> "9.9990000000e+3" or
        (                9999 sci 15) <> "9.999000000000000e+3" or
        (                9999 sci 18) <> "9.999000000000000000e+3" or
        (                9999 sci 19) <> "9.9990000000000000000e+3" or
        (                9999 sci 30) <> "9.999000000000000000000000000000e+3" or
        (               10000 sci  0) <> "1e+4" or
        (               10000 sci  1) <> "1.0e+4" or
        (               10000 sci  2) <> "1.00e+4" or
        (               10000 sci  3) <> "1.000e+4" or
        (               10000 sci 10) <> "1.0000000000e+4" or
        (               10000 sci 15) <> "1.000000000000000e+4" or
        (               10000 sci 18) <> "1.000000000000000000e+4" or
        (               10000 sci 19) <> "1.0000000000000000000e+4" or
        (               10000 sci 30) <> "1.000000000000000000000000000000e+4" or
        (               12345 sci  0) <> "1e+4" or
        (               12345 sci  1) <> "1.2e+4" or
        (               12345 sci  2) <> "1.23e+4" or
        (               12345 sci  3) <> "1.235e+4" or
        (               12345 sci 10) <> "1.2345000000e+4" or
        (               12345 sci 15) <> "1.234500000000000e+4" or
        (               12345 sci 18) <> "1.234500000000000000e+4" or
        (               12345 sci 19) <> "1.2345000000000000000e+4" or
        (               12345 sci 30) <> "1.234500000000000000000000000000e+4" or
        (              123456 sci  0) <> "1e+5" or
        (              123456 sci  1) <> "1.2e+5" or
        (              123456 sci  2) <> "1.23e+5" or
        (              123456 sci  3) <> "1.235e+5" or
        (              123456 sci 10) <> "1.2345600000e+5" or
        (              123456 sci 15) <> "1.234560000000000e+5" or
        (              123456 sci 18) <> "1.234560000000000000e+5" or
        (              123456 sci 19) <> "1.2345600000000000000e+5" or
        (              123456 sci 30) <> "1.234560000000000000000000000000e+5" or
        (             1234567 sci  0) <> "1e+6" or
        (             1234567 sci  1) <> "1.2e+6" or
        (             1234567 sci  2) <> "1.23e+6" or
        (             1234567 sci  3) <> "1.235e+6" or
        (             1234567 sci 10) <> "1.2345670000e+6" or
        (             1234567 sci 15) <> "1.234567000000000e+6" or
        (             1234567 sci 18) <> "1.234567000000000000e+6" or
        (             1234567 sci 19) <> "1.2345670000000000000e+6" or
        (             1234567 sci 30) <> "1.234567000000000000000000000000e+6" or
        (            12345678 sci  0) <> "1e+7" or
        (            12345678 sci  1) <> "1.2e+7" or
        (            12345678 sci  2) <> "1.23e+7" or
        (            12345678 sci  3) <> "1.235e+7" or
        (            12345678 sci 10) <> "1.2345678000e+7" or
        (            12345678 sci 15) <> "1.234567800000000e+7" or
        (            12345678 sci 18) <> "1.234567800000000000e+7" or
        (            12345678 sci 19) <> "1.2345678000000000000e+7" or
        (            12345678 sci 30) <> "1.234567800000000000000000000000e+7" or
        (           123456789 sci  0) <> "1e+8" or
        (           123456789 sci  1) <> "1.2e+8" or
        (           123456789 sci  2) <> "1.23e+8" or
        (           123456789 sci  3) <> "1.235e+8" or
        (           123456789 sci 10) <> "1.2345678900e+8" or
        (           123456789 sci 15) <> "1.234567890000000e+8" or
        (           123456789 sci 18) <> "1.234567890000000000e+8" or
        (           123456789 sci 19) <> "1.2345678900000000000e+8" or
        (           123456789 sci 30) <> "1.234567890000000000000000000000e+8" or
        (          1234567890 sci  0) <> "1e+9" or
        (          1234567890 sci  1) <> "1.2e+9" or
        (          1234567890 sci  2) <> "1.23e+9" or
        (          1234567890 sci  3) <> "1.235e+9" or
        (          1234567890 sci 10) <> "1.2345678900e+9" or
        (          1234567890 sci 15) <> "1.234567890000000e+9" or
        (          1234567890 sci 18) <> "1.234567890000000000e+9" or
        (          1234567890 sci 19) <> "1.2345678900000000000e+9" or
        (          1234567890 sci 30) <> "1.234567890000000000000000000000e+9" or
        (         12345678901 sci  0) <> "1e+10" or
        (         12345678901 sci  1) <> "1.2e+10" or
        (         12345678901 sci  2) <> "1.23e+10" or
        (         12345678901 sci  3) <> "1.235e+10" or
        (         12345678901 sci 10) <> "1.2345678901e+10" or
        (         12345678901 sci 15) <> "1.234567890100000e+10" or
        (         12345678901 sci 18) <> "1.234567890100000000e+10" or
        (         12345678901 sci 19) <> "1.2345678901000000000e+10" or
        (         12345678901 sci 30) <> "1.234567890100000000000000000000e+10" or
        (        123456789014 sci  0) <> "1e+11" or
        (        123456789014 sci  1) <> "1.2e+11" or
        (        123456789014 sci  2) <> "1.23e+11" or
        (        123456789014 sci  3) <> "1.235e+11" or
        (        123456789014 sci 10) <> "1.2345678901e+11" or
        (        123456789014 sci 15) <> "1.234567890140000e+11" or
        (        123456789014 sci 18) <> "1.234567890140000000e+11" or
        (        123456789014 sci 19) <> "1.2345678901400000000e+11" or
        (        123456789014 sci 30) <> "1.234567890140000000000000000000e+11" or
        (        123456789015 sci  0) <> "1e+11" or
        (        123456789015 sci  1) <> "1.2e+11" or
        (        123456789015 sci  2) <> "1.23e+11" or
        (        123456789015 sci  3) <> "1.235e+11" or
        (        123456789015 sci 10) <> "1.2345678902e+11" or
        (        123456789015 sci 15) <> "1.234567890150000e+11" or
        (        123456789015 sci 18) <> "1.234567890150000000e+11" or
        (        123456789015 sci 19) <> "1.2345678901500000000e+11" or
        (        123456789015 sci 30) <> "1.234567890150000000000000000000e+11" or
        ( 9223372036854775807 sci  0) <> "9e+18" or
        ( 9223372036854775807 sci  1) <> "9.2e+18" or
        ( 9223372036854775807 sci  2) <> "9.22e+18" or
        ( 9223372036854775807 sci  3) <> "9.223e+18" or
        ( 9223372036854775807 sci 10) <> "9.2233720369e+18" or
        ( 9223372036854775807 sci 15) <> "9.223372036854776e+18" or
        ( 9223372036854775807 sci 18) <> "9.223372036854775807e+18" or
        ( 9223372036854775807 sci 19) <> "9.2233720368547758070e+18" or
        ( 9223372036854775807 sci 30) <> "9.223372036854775807000000000000e+18" then
      writeln(" ***** The sci operator does not work correct.");
      okay := FALSE;
    end if;

    if  not raisesRangeError(        123  sci         integer.first ) or
        not raisesRangeError(        123  sci                    -1 ) or
        not raisesRangeError(intExpr(123) sci         integer.first ) or
        not raisesRangeError(intExpr(123) sci                    -1 ) or
        not raisesRangeError(        123  sci intExpr(integer.first)) or
        not raisesRangeError(        123  sci intExpr(           -1)) or
        not raisesRangeError(intExpr(123) sci intExpr(integer.first)) or
        not raisesRangeError(intExpr(123) sci intExpr(           -1)) then
      writeln(" ***** The sci operator does not raise RANGE_ERROR for negative precision.");
      okay := FALSE;
    end if;

    if okay then
      writeln("Integer sci operator does work correct.");
    end if;
  end func;


const proc: check_parse is func
  local
    var boolean: okay is TRUE;
  begin
    if  integer("-9223372036854775808") <>            INT64_MIN or
        integer("-9223372036854775807") <> -9223372036854775807 or
        integer("-1000000000000000000") <> -1000000000000000000 or
        integer( "-100000000000000000") <>  -100000000000000000 or
        integer(  "-10000000000000000") <>   -10000000000000000 or
        integer(   "-1000000000000000") <>    -1000000000000000 or
        integer(    "-100000000000000") <>     -100000000000000 or
        integer(     "-10000000000000") <>      -10000000000000 or
        integer(      "-1000000000000") <>       -1000000000000 or
        integer(       "-100000000000") <>        -100000000000 or
        integer(        "-10000000000") <>         -10000000000 or
        integer(         "-2147483649") <>          -2147483649 or
        integer(         "-2147483648") <>          -2147483648 or
        integer(         "-2147483647") <>          -2147483647 or
        integer(         "-1073741825") <>          -1073741825 or
        integer(         "-1073741824") <>          -1073741824 or
        integer(         "-1000000000") <>          -1000000000 or
        integer(          "-100000000") <>           -100000000 or
        integer(           "-10000000") <>            -10000000 or
        integer(            "-1000000") <>             -1000000 or
        integer(             "-100000") <>              -100000 or
        integer(              "-65537") <>               -65537 or
        integer(              "-65536") <>               -65536 or
        integer(              "-32769") <>               -32769 or
        integer(              "-32768") <>               -32768 or
        integer(              "-10001") <>               -10001 or
        integer(              "-10000") <>               -10000 or
        integer(               "-9999") <>                -9999 or
        integer(               "-2000") <>                -2000 or
        integer(               "-1001") <>                -1001 or
        integer(               "-1000") <>                -1000 or
        integer(                "-999") <>                 -999 or
        integer(                "-200") <>                 -200 or
        integer(                "-101") <>                 -101 or
        integer(                "-100") <>                 -100 or
        integer(                 "-99") <>                  -99 or
        integer(                 "-20") <>                  -20 or
        integer(                 "-11") <>                  -11 or
        integer(                 "-10") <>                  -10 or
        integer(                  "-9") <>                   -9 or
        integer(                  "-2") <>                   -2 or
        integer(                  "-1") <>                   -1 or
        integer(                   "0") <>                    0 or
        integer(                   "1") <>                    1 or
        integer(                   "2") <>                    2 or
        integer(                   "9") <>                    9 or
        integer(                  "10") <>                   10 or
        integer(                  "11") <>                   11 or
        integer(                  "20") <>                   20 or
        integer(                  "99") <>                   99 or
        integer(                 "100") <>                  100 or
        integer(                 "101") <>                  101 or
        integer(                 "200") <>                  200 or
        integer(                 "999") <>                  999 or
        integer(                "1000") <>                 1000 or
        integer(                "1001") <>                 1001 or
        integer(                "2000") <>                 2000 or
        integer(                "9999") <>                 9999 or
        integer(               "10000") <>                10000 or
        integer(               "10001") <>                10001 or
        integer(               "32768") <>                32768 or
        integer(               "32769") <>                32769 or
        integer(               "65536") <>                65536 or
        integer(               "65537") <>                65537 or
        integer(              "100000") <>               100000 or
        integer(             "1000000") <>              1000000 or
        integer(            "10000000") <>             10000000 or
        integer(           "100000000") <>            100000000 or
        integer(          "1000000000") <>           1000000000 or
        integer(          "1073741823") <>           1073741823 or
        integer(          "1073741824") <>           1073741824 or
        integer(          "2147483647") <>           2147483647 or
        integer(          "2147483648") <>           2147483648 or
        integer(         "10000000000") <>          10000000000 or
        integer(        "100000000000") <>         100000000000 or
        integer(       "1000000000000") <>        1000000000000 or
        integer(      "10000000000000") <>       10000000000000 or
        integer(     "100000000000000") <>      100000000000000 or
        integer(    "1000000000000000") <>     1000000000000000 or
        integer(   "10000000000000000") <>    10000000000000000 or
        integer(  "100000000000000000") <>   100000000000000000 or
        integer( "1000000000000000000") <>  1000000000000000000 or
        integer( "9223372036854775806") <>  9223372036854775806 or
        integer( "9223372036854775807") <>  9223372036854775807 or
        integer(                  "+0") <>                    0 or
        integer(                  "+1") <>                    1 or
        integer(                  "+2") <>                    2 or
        integer(                  "+9") <>                    9 or
        integer(                 "+10") <>                   10 or
        integer(                 "+11") <>                   11 or
        integer(                 "+20") <>                   20 or
        integer(                 "+99") <>                   99 or
        integer(                "+100") <>                  100 or
        integer(                "+101") <>                  101 or
        integer(                "+200") <>                  200 or
        integer(                "+999") <>                  999 or
        integer(               "+1000") <>                 1000 or
        integer(               "+1001") <>                 1001 or
        integer(               "+2000") <>                 2000 or
        integer(               "+9999") <>                 9999 or
        integer(              "+10000") <>                10000 or
        integer(              "+10001") <>                10001 or
        integer(              "+32768") <>                32768 or
        integer(              "+32769") <>                32769 or
        integer(              "+65536") <>                65536 or
        integer(              "+65537") <>                65537 or
        integer(             "+100000") <>               100000 or
        integer(            "+1000000") <>              1000000 or
        integer(           "+10000000") <>             10000000 or
        integer(          "+100000000") <>            100000000 or
        integer(         "+1000000000") <>           1000000000 or
        integer(         "+1073741823") <>           1073741823 or
        integer(         "+1073741824") <>           1073741824 or
        integer(         "+2147483647") <>           2147483647 or
        integer(         "+2147483648") <>           2147483648 or
        integer(        "+10000000000") <>          10000000000 or
        integer(       "+100000000000") <>         100000000000 or
        integer(      "+1000000000000") <>        1000000000000 or
        integer(     "+10000000000000") <>       10000000000000 or
        integer(    "+100000000000000") <>      100000000000000 or
        integer(   "+1000000000000000") <>     1000000000000000 or
        integer(  "+10000000000000000") <>    10000000000000000 or
        integer( "+100000000000000000") <>   100000000000000000 or
        integer("+1000000000000000000") <>  1000000000000000000 or
        integer("+9223372036854775806") <>  9223372036854775806 or
        integer("+9223372036854775807") <>  9223372036854775807 then
      writeln(" ***** Integer parse with literals does not work correct. (1)");
      okay := FALSE;
    end if;

    if  integer(striExpr("-9223372036854775808")) <>            INT64_MIN or
        integer(striExpr("-9223372036854775807")) <> -9223372036854775807 or
        integer(striExpr("-1000000000000000000")) <> -1000000000000000000 or
        integer(striExpr( "-100000000000000000")) <>  -100000000000000000 or
        integer(striExpr(  "-10000000000000000")) <>   -10000000000000000 or
        integer(striExpr(   "-1000000000000000")) <>    -1000000000000000 or
        integer(striExpr(    "-100000000000000")) <>     -100000000000000 or
        integer(striExpr(     "-10000000000000")) <>      -10000000000000 or
        integer(striExpr(      "-1000000000000")) <>       -1000000000000 or
        integer(striExpr(       "-100000000000")) <>        -100000000000 or
        integer(striExpr(        "-10000000000")) <>         -10000000000 or
        integer(striExpr(         "-2147483649")) <>          -2147483649 or
        integer(striExpr(         "-2147483648")) <>          -2147483648 or
        integer(striExpr(         "-2147483647")) <>          -2147483647 or
        integer(striExpr(         "-1073741825")) <>          -1073741825 or
        integer(striExpr(         "-1073741824")) <>          -1073741824 or
        integer(striExpr(         "-1000000000")) <>          -1000000000 or
        integer(striExpr(          "-100000000")) <>           -100000000 or
        integer(striExpr(           "-10000000")) <>            -10000000 or
        integer(striExpr(            "-1000000")) <>             -1000000 or
        integer(striExpr(             "-100000")) <>              -100000 or
        integer(striExpr(              "-65537")) <>               -65537 or
        integer(striExpr(              "-65536")) <>               -65536 or
        integer(striExpr(              "-32769")) <>               -32769 or
        integer(striExpr(              "-32768")) <>               -32768 or
        integer(striExpr(              "-10001")) <>               -10001 or
        integer(striExpr(              "-10000")) <>               -10000 or
        integer(striExpr(               "-9999")) <>                -9999 or
        integer(striExpr(               "-2000")) <>                -2000 or
        integer(striExpr(               "-1001")) <>                -1001 or
        integer(striExpr(               "-1000")) <>                -1000 or
        integer(striExpr(                "-999")) <>                 -999 or
        integer(striExpr(                "-200")) <>                 -200 or
        integer(striExpr(                "-101")) <>                 -101 or
        integer(striExpr(                "-100")) <>                 -100 or
        integer(striExpr(                 "-99")) <>                  -99 or
        integer(striExpr(                 "-20")) <>                  -20 or
        integer(striExpr(                 "-11")) <>                  -11 or
        integer(striExpr(                 "-10")) <>                  -10 or
        integer(striExpr(                  "-9")) <>                   -9 or
        integer(striExpr(                  "-2")) <>                   -2 or
        integer(striExpr(                  "-1")) <>                   -1 or
        integer(striExpr(                   "0")) <>                    0 or
        integer(striExpr(                   "1")) <>                    1 or
        integer(striExpr(                   "2")) <>                    2 or
        integer(striExpr(                   "9")) <>                    9 or
        integer(striExpr(                  "10")) <>                   10 or
        integer(striExpr(                  "11")) <>                   11 or
        integer(striExpr(                  "20")) <>                   20 or
        integer(striExpr(                  "99")) <>                   99 or
        integer(striExpr(                 "100")) <>                  100 or
        integer(striExpr(                 "101")) <>                  101 or
        integer(striExpr(                 "200")) <>                  200 or
        integer(striExpr(                 "999")) <>                  999 or
        integer(striExpr(                "1000")) <>                 1000 or
        integer(striExpr(                "1001")) <>                 1001 or
        integer(striExpr(                "2000")) <>                 2000 or
        integer(striExpr(                "9999")) <>                 9999 or
        integer(striExpr(               "10000")) <>                10000 or
        integer(striExpr(               "10001")) <>                10001 or
        integer(striExpr(               "32768")) <>                32768 or
        integer(striExpr(               "32769")) <>                32769 or
        integer(striExpr(               "65536")) <>                65536 or
        integer(striExpr(               "65537")) <>                65537 or
        integer(striExpr(              "100000")) <>               100000 or
        integer(striExpr(             "1000000")) <>              1000000 or
        integer(striExpr(            "10000000")) <>             10000000 or
        integer(striExpr(           "100000000")) <>            100000000 or
        integer(striExpr(          "1000000000")) <>           1000000000 or
        integer(striExpr(          "1073741823")) <>           1073741823 or
        integer(striExpr(          "1073741824")) <>           1073741824 or
        integer(striExpr(          "2147483647")) <>           2147483647 or
        integer(striExpr(          "2147483648")) <>           2147483648 or
        integer(striExpr(         "10000000000")) <>          10000000000 or
        integer(striExpr(        "100000000000")) <>         100000000000 or
        integer(striExpr(       "1000000000000")) <>        1000000000000 or
        integer(striExpr(      "10000000000000")) <>       10000000000000 or
        integer(striExpr(     "100000000000000")) <>      100000000000000 or
        integer(striExpr(    "1000000000000000")) <>     1000000000000000 or
        integer(striExpr(   "10000000000000000")) <>    10000000000000000 or
        integer(striExpr(  "100000000000000000")) <>   100000000000000000 or
        integer(striExpr( "1000000000000000000")) <>  1000000000000000000 or
        integer(striExpr( "9223372036854775806")) <>  9223372036854775806 or
        integer(striExpr( "9223372036854775807")) <>  9223372036854775807 or
        integer(striExpr(                  "+0")) <>                    0 or
        integer(striExpr(                  "+1")) <>                    1 or
        integer(striExpr(                  "+2")) <>                    2 or
        integer(striExpr(                  "+9")) <>                    9 or
        integer(striExpr(                 "+10")) <>                   10 or
        integer(striExpr(                 "+11")) <>                   11 or
        integer(striExpr(                 "+20")) <>                   20 or
        integer(striExpr(                 "+99")) <>                   99 or
        integer(striExpr(                "+100")) <>                  100 or
        integer(striExpr(                "+101")) <>                  101 or
        integer(striExpr(                "+200")) <>                  200 or
        integer(striExpr(                "+999")) <>                  999 or
        integer(striExpr(               "+1000")) <>                 1000 or
        integer(striExpr(               "+1001")) <>                 1001 or
        integer(striExpr(               "+2000")) <>                 2000 or
        integer(striExpr(               "+9999")) <>                 9999 or
        integer(striExpr(              "+10000")) <>                10000 or
        integer(striExpr(              "+10001")) <>                10001 or
        integer(striExpr(              "+32768")) <>                32768 or
        integer(striExpr(              "+32769")) <>                32769 or
        integer(striExpr(              "+65536")) <>                65536 or
        integer(striExpr(              "+65537")) <>                65537 or
        integer(striExpr(             "+100000")) <>               100000 or
        integer(striExpr(            "+1000000")) <>              1000000 or
        integer(striExpr(           "+10000000")) <>             10000000 or
        integer(striExpr(          "+100000000")) <>            100000000 or
        integer(striExpr(         "+1000000000")) <>           1000000000 or
        integer(striExpr(         "+1073741823")) <>           1073741823 or
        integer(striExpr(         "+1073741824")) <>           1073741824 or
        integer(striExpr(         "+2147483647")) <>           2147483647 or
        integer(striExpr(         "+2147483648")) <>           2147483648 or
        integer(striExpr(        "+10000000000")) <>          10000000000 or
        integer(striExpr(       "+100000000000")) <>         100000000000 or
        integer(striExpr(      "+1000000000000")) <>        1000000000000 or
        integer(striExpr(     "+10000000000000")) <>       10000000000000 or
        integer(striExpr(    "+100000000000000")) <>      100000000000000 or
        integer(striExpr(   "+1000000000000000")) <>     1000000000000000 or
        integer(striExpr(  "+10000000000000000")) <>    10000000000000000 or
        integer(striExpr( "+100000000000000000")) <>   100000000000000000 or
        integer(striExpr("+1000000000000000000")) <>  1000000000000000000 or
        integer(striExpr("+9223372036854775806")) <>  9223372036854775806 or
        integer(striExpr("+9223372036854775807")) <>  9223372036854775807 then
      writeln(" ***** Integer parse with expressions does not work correct. (1)");
      okay := FALSE;
    end if;

    if  integer parse "-9223372036854775808" <>            INT64_MIN or
        integer parse "-9223372036854775807" <> -9223372036854775807 or
        integer parse "-1000000000000000000" <> -1000000000000000000 or
        integer parse  "-100000000000000000" <>  -100000000000000000 or
        integer parse   "-10000000000000000" <>   -10000000000000000 or
        integer parse    "-1000000000000000" <>    -1000000000000000 or
        integer parse     "-100000000000000" <>     -100000000000000 or
        integer parse      "-10000000000000" <>      -10000000000000 or
        integer parse       "-1000000000000" <>       -1000000000000 or
        integer parse        "-100000000000" <>        -100000000000 or
        integer parse         "-10000000000" <>         -10000000000 or
        integer parse          "-2147483649" <>          -2147483649 or
        integer parse          "-2147483648" <>          -2147483648 or
        integer parse          "-2147483647" <>          -2147483647 or
        integer parse          "-1073741825" <>          -1073741825 or
        integer parse          "-1073741824" <>          -1073741824 or
        integer parse          "-1000000000" <>          -1000000000 or
        integer parse           "-100000000" <>           -100000000 or
        integer parse            "-10000000" <>            -10000000 or
        integer parse             "-1000000" <>             -1000000 or
        integer parse              "-100000" <>              -100000 or
        integer parse               "-65537" <>               -65537 or
        integer parse               "-65536" <>               -65536 or
        integer parse               "-32769" <>               -32769 or
        integer parse               "-32768" <>               -32768 or
        integer parse               "-10001" <>               -10001 or
        integer parse               "-10000" <>               -10000 or
        integer parse                "-9999" <>                -9999 or
        integer parse                "-2000" <>                -2000 or
        integer parse                "-1001" <>                -1001 or
        integer parse                "-1000" <>                -1000 or
        integer parse                 "-999" <>                 -999 or
        integer parse                 "-200" <>                 -200 or
        integer parse                 "-101" <>                 -101 or
        integer parse                 "-100" <>                 -100 or
        integer parse                  "-99" <>                  -99 or
        integer parse                  "-20" <>                  -20 or
        integer parse                  "-11" <>                  -11 or
        integer parse                  "-10" <>                  -10 or
        integer parse                   "-9" <>                   -9 or
        integer parse                   "-2" <>                   -2 or
        integer parse                   "-1" <>                   -1 or
        integer parse                    "0" <>                    0 or
        integer parse                    "1" <>                    1 or
        integer parse                    "2" <>                    2 or
        integer parse                    "9" <>                    9 or
        integer parse                   "10" <>                   10 or
        integer parse                   "11" <>                   11 or
        integer parse                   "20" <>                   20 or
        integer parse                   "99" <>                   99 or
        integer parse                  "100" <>                  100 or
        integer parse                  "101" <>                  101 or
        integer parse                  "200" <>                  200 or
        integer parse                  "999" <>                  999 or
        integer parse                 "1000" <>                 1000 or
        integer parse                 "1001" <>                 1001 or
        integer parse                 "2000" <>                 2000 or
        integer parse                 "9999" <>                 9999 or
        integer parse                "10000" <>                10000 or
        integer parse                "10001" <>                10001 or
        integer parse                "32768" <>                32768 or
        integer parse                "32769" <>                32769 or
        integer parse                "65536" <>                65536 or
        integer parse                "65537" <>                65537 or
        integer parse               "100000" <>               100000 or
        integer parse              "1000000" <>              1000000 or
        integer parse             "10000000" <>             10000000 or
        integer parse            "100000000" <>            100000000 or
        integer parse           "1000000000" <>           1000000000 or
        integer parse           "1073741823" <>           1073741823 or
        integer parse           "1073741824" <>           1073741824 or
        integer parse           "2147483647" <>           2147483647 or
        integer parse           "2147483648" <>           2147483648 or
        integer parse          "10000000000" <>          10000000000 or
        integer parse         "100000000000" <>         100000000000 or
        integer parse        "1000000000000" <>        1000000000000 or
        integer parse       "10000000000000" <>       10000000000000 or
        integer parse      "100000000000000" <>      100000000000000 or
        integer parse     "1000000000000000" <>     1000000000000000 or
        integer parse    "10000000000000000" <>    10000000000000000 or
        integer parse   "100000000000000000" <>   100000000000000000 or
        integer parse  "1000000000000000000" <>  1000000000000000000 or
        integer parse  "9223372036854775806" <>  9223372036854775806 or
        integer parse  "9223372036854775807" <>  9223372036854775807 or
        integer parse                   "+0" <>                    0 or
        integer parse                   "+1" <>                    1 or
        integer parse                   "+2" <>                    2 or
        integer parse                   "+9" <>                    9 or
        integer parse                  "+10" <>                   10 or
        integer parse                  "+11" <>                   11 or
        integer parse                  "+20" <>                   20 or
        integer parse                  "+99" <>                   99 or
        integer parse                 "+100" <>                  100 or
        integer parse                 "+101" <>                  101 or
        integer parse                 "+200" <>                  200 or
        integer parse                 "+999" <>                  999 or
        integer parse                "+1000" <>                 1000 or
        integer parse                "+1001" <>                 1001 or
        integer parse                "+2000" <>                 2000 or
        integer parse                "+9999" <>                 9999 or
        integer parse               "+10000" <>                10000 or
        integer parse               "+10001" <>                10001 or
        integer parse               "+32768" <>                32768 or
        integer parse               "+32769" <>                32769 or
        integer parse               "+65536" <>                65536 or
        integer parse               "+65537" <>                65537 or
        integer parse              "+100000" <>               100000 or
        integer parse             "+1000000" <>              1000000 or
        integer parse            "+10000000" <>             10000000 or
        integer parse           "+100000000" <>            100000000 or
        integer parse          "+1000000000" <>           1000000000 or
        integer parse          "+1073741823" <>           1073741823 or
        integer parse          "+1073741824" <>           1073741824 or
        integer parse          "+2147483647" <>           2147483647 or
        integer parse          "+2147483648" <>           2147483648 or
        integer parse         "+10000000000" <>          10000000000 or
        integer parse        "+100000000000" <>         100000000000 or
        integer parse       "+1000000000000" <>        1000000000000 or
        integer parse      "+10000000000000" <>       10000000000000 or
        integer parse     "+100000000000000" <>      100000000000000 or
        integer parse    "+1000000000000000" <>     1000000000000000 or
        integer parse   "+10000000000000000" <>    10000000000000000 or
        integer parse  "+100000000000000000" <>   100000000000000000 or
        integer parse "+1000000000000000000" <>  1000000000000000000 or
        integer parse "+9223372036854775806" <>  9223372036854775806 or
        integer parse "+9223372036854775807" <>  9223372036854775807 then
      writeln(" ***** Integer parse with literals does not work correct. (2)");
      okay := FALSE;
    end if;

    if  integer parse striExpr("-9223372036854775808") <>            INT64_MIN or
        integer parse striExpr("-9223372036854775807") <> -9223372036854775807 or
        integer parse striExpr("-1000000000000000000") <> -1000000000000000000 or
        integer parse striExpr( "-100000000000000000") <>  -100000000000000000 or
        integer parse striExpr(  "-10000000000000000") <>   -10000000000000000 or
        integer parse striExpr(   "-1000000000000000") <>    -1000000000000000 or
        integer parse striExpr(    "-100000000000000") <>     -100000000000000 or
        integer parse striExpr(     "-10000000000000") <>      -10000000000000 or
        integer parse striExpr(      "-1000000000000") <>       -1000000000000 or
        integer parse striExpr(       "-100000000000") <>        -100000000000 or
        integer parse striExpr(        "-10000000000") <>         -10000000000 or
        integer parse striExpr(         "-2147483649") <>          -2147483649 or
        integer parse striExpr(         "-2147483648") <>          -2147483648 or
        integer parse striExpr(         "-2147483647") <>          -2147483647 or
        integer parse striExpr(         "-1073741825") <>          -1073741825 or
        integer parse striExpr(         "-1073741824") <>          -1073741824 or
        integer parse striExpr(         "-1000000000") <>          -1000000000 or
        integer parse striExpr(          "-100000000") <>           -100000000 or
        integer parse striExpr(           "-10000000") <>            -10000000 or
        integer parse striExpr(            "-1000000") <>             -1000000 or
        integer parse striExpr(             "-100000") <>              -100000 or
        integer parse striExpr(              "-65537") <>               -65537 or
        integer parse striExpr(              "-65536") <>               -65536 or
        integer parse striExpr(              "-32769") <>               -32769 or
        integer parse striExpr(              "-32768") <>               -32768 or
        integer parse striExpr(              "-10001") <>               -10001 or
        integer parse striExpr(              "-10000") <>               -10000 or
        integer parse striExpr(               "-9999") <>                -9999 or
        integer parse striExpr(               "-2000") <>                -2000 or
        integer parse striExpr(               "-1001") <>                -1001 or
        integer parse striExpr(               "-1000") <>                -1000 or
        integer parse striExpr(                "-999") <>                 -999 or
        integer parse striExpr(                "-200") <>                 -200 or
        integer parse striExpr(                "-101") <>                 -101 or
        integer parse striExpr(                "-100") <>                 -100 or
        integer parse striExpr(                 "-99") <>                  -99 or
        integer parse striExpr(                 "-20") <>                  -20 or
        integer parse striExpr(                 "-11") <>                  -11 or
        integer parse striExpr(                 "-10") <>                  -10 or
        integer parse striExpr(                  "-9") <>                   -9 or
        integer parse striExpr(                  "-2") <>                   -2 or
        integer parse striExpr(                  "-1") <>                   -1 or
        integer parse striExpr(                   "0") <>                    0 or
        integer parse striExpr(                   "1") <>                    1 or
        integer parse striExpr(                   "2") <>                    2 or
        integer parse striExpr(                   "9") <>                    9 or
        integer parse striExpr(                  "10") <>                   10 or
        integer parse striExpr(                  "11") <>                   11 or
        integer parse striExpr(                  "20") <>                   20 or
        integer parse striExpr(                  "99") <>                   99 or
        integer parse striExpr(                 "100") <>                  100 or
        integer parse striExpr(                 "101") <>                  101 or
        integer parse striExpr(                 "200") <>                  200 or
        integer parse striExpr(                 "999") <>                  999 or
        integer parse striExpr(                "1000") <>                 1000 or
        integer parse striExpr(                "1001") <>                 1001 or
        integer parse striExpr(                "2000") <>                 2000 or
        integer parse striExpr(                "9999") <>                 9999 or
        integer parse striExpr(               "10000") <>                10000 or
        integer parse striExpr(               "10001") <>                10001 or
        integer parse striExpr(               "32768") <>                32768 or
        integer parse striExpr(               "32769") <>                32769 or
        integer parse striExpr(               "65536") <>                65536 or
        integer parse striExpr(               "65537") <>                65537 or
        integer parse striExpr(              "100000") <>               100000 or
        integer parse striExpr(             "1000000") <>              1000000 or
        integer parse striExpr(            "10000000") <>             10000000 or
        integer parse striExpr(           "100000000") <>            100000000 or
        integer parse striExpr(          "1000000000") <>           1000000000 or
        integer parse striExpr(          "1073741823") <>           1073741823 or
        integer parse striExpr(          "1073741824") <>           1073741824 or
        integer parse striExpr(          "2147483647") <>           2147483647 or
        integer parse striExpr(          "2147483648") <>           2147483648 or
        integer parse striExpr(         "10000000000") <>          10000000000 or
        integer parse striExpr(        "100000000000") <>         100000000000 or
        integer parse striExpr(       "1000000000000") <>        1000000000000 or
        integer parse striExpr(      "10000000000000") <>       10000000000000 or
        integer parse striExpr(     "100000000000000") <>      100000000000000 or
        integer parse striExpr(    "1000000000000000") <>     1000000000000000 or
        integer parse striExpr(   "10000000000000000") <>    10000000000000000 or
        integer parse striExpr(  "100000000000000000") <>   100000000000000000 or
        integer parse striExpr( "1000000000000000000") <>  1000000000000000000 or
        integer parse striExpr( "9223372036854775806") <>  9223372036854775806 or
        integer parse striExpr( "9223372036854775807") <>  9223372036854775807 or
        integer parse striExpr(                  "+0") <>                    0 or
        integer parse striExpr(                  "+1") <>                    1 or
        integer parse striExpr(                  "+2") <>                    2 or
        integer parse striExpr(                  "+9") <>                    9 or
        integer parse striExpr(                 "+10") <>                   10 or
        integer parse striExpr(                 "+11") <>                   11 or
        integer parse striExpr(                 "+20") <>                   20 or
        integer parse striExpr(                 "+99") <>                   99 or
        integer parse striExpr(                "+100") <>                  100 or
        integer parse striExpr(                "+101") <>                  101 or
        integer parse striExpr(                "+200") <>                  200 or
        integer parse striExpr(                "+999") <>                  999 or
        integer parse striExpr(               "+1000") <>                 1000 or
        integer parse striExpr(               "+1001") <>                 1001 or
        integer parse striExpr(               "+2000") <>                 2000 or
        integer parse striExpr(               "+9999") <>                 9999 or
        integer parse striExpr(              "+10000") <>                10000 or
        integer parse striExpr(              "+10001") <>                10001 or
        integer parse striExpr(              "+32768") <>                32768 or
        integer parse striExpr(              "+32769") <>                32769 or
        integer parse striExpr(              "+65536") <>                65536 or
        integer parse striExpr(              "+65537") <>                65537 or
        integer parse striExpr(             "+100000") <>               100000 or
        integer parse striExpr(            "+1000000") <>              1000000 or
        integer parse striExpr(           "+10000000") <>             10000000 or
        integer parse striExpr(          "+100000000") <>            100000000 or
        integer parse striExpr(         "+1000000000") <>           1000000000 or
        integer parse striExpr(         "+1073741823") <>           1073741823 or
        integer parse striExpr(         "+1073741824") <>           1073741824 or
        integer parse striExpr(         "+2147483647") <>           2147483647 or
        integer parse striExpr(         "+2147483648") <>           2147483648 or
        integer parse striExpr(        "+10000000000") <>          10000000000 or
        integer parse striExpr(       "+100000000000") <>         100000000000 or
        integer parse striExpr(      "+1000000000000") <>        1000000000000 or
        integer parse striExpr(     "+10000000000000") <>       10000000000000 or
        integer parse striExpr(    "+100000000000000") <>      100000000000000 or
        integer parse striExpr(   "+1000000000000000") <>     1000000000000000 or
        integer parse striExpr(  "+10000000000000000") <>    10000000000000000 or
        integer parse striExpr( "+100000000000000000") <>   100000000000000000 or
        integer parse striExpr("+1000000000000000000") <>  1000000000000000000 or
        integer parse striExpr("+9223372036854775806") <>  9223372036854775806 or
        integer parse striExpr("+9223372036854775807") <>  9223372036854775807 then
      writeln(" ***** Integer parse with expressions does not work correct. (2)");
      okay := FALSE;
    end if;

    if  integer(               "0123")  <> 123 or
        integer(      striExpr("0123")) <> 123 or
        integer parse          "0123"   <> 123 or
        integer parse striExpr("0123")  <> 123 then
      writeln(" ***** Integer parse with leading zeros does not work correct.");
      okay := FALSE;
    end if;

    if  not raisesRangeError(integer("-9223372036854775890")) or
        not raisesRangeError(integer("-9223372036854775820")) or
        not raisesRangeError(integer("-9223372036854775819")) or
        not raisesRangeError(integer("-9223372036854775811")) or
        not raisesRangeError(integer("-9223372036854775810")) or
        not raisesRangeError(integer("-9223372036854775809")) or
        not raisesRangeError(integer(                   "@")) or
        not raisesRangeError(integer(                   "+")) or
        not raisesRangeError(integer(                  "++")) or
        not raisesRangeError(integer(                  "+-")) or
        not raisesRangeError(integer(                 "++1")) or
        not raisesRangeError(integer(                 "+-1")) or
        not raisesRangeError(integer(                   "-")) or
        not raisesRangeError(integer(                  "--")) or
        not raisesRangeError(integer(                  "-+")) or
        not raisesRangeError(integer(                 "--1")) or
        not raisesRangeError(integer(                 "-+1")) or
        not raisesRangeError(integer(                    "")) or
        not raisesRangeError(integer(                " 123")) or
        not raisesRangeError(integer(                "123 ")) or
        not raisesRangeError(integer(                "123@")) or
        not raisesRangeError(integer(             "123@456")) or
        not raisesRangeError(integer( "9223372036854775808")) or
        not raisesRangeError(integer( "9223372036854775809")) or
        not raisesRangeError(integer( "9223372036854775810")) or
        not raisesRangeError(integer( "9223372036854775811")) or
        not raisesRangeError(integer( "9223372036854775819")) or
        not raisesRangeError(integer( "9223372036854775820")) or
        not raisesRangeError(integer( "9223372036854775890")) or
        not raisesRangeError(integer(striExpr("-9223372036854775890"))) or
        not raisesRangeError(integer(striExpr("-9223372036854775820"))) or
        not raisesRangeError(integer(striExpr("-9223372036854775819"))) or
        not raisesRangeError(integer(striExpr("-9223372036854775811"))) or
        not raisesRangeError(integer(striExpr("-9223372036854775810"))) or
        not raisesRangeError(integer(striExpr("-9223372036854775809"))) or
        not raisesRangeError(integer(striExpr(                   "@"))) or
        not raisesRangeError(integer(striExpr(                   "+"))) or
        not raisesRangeError(integer(striExpr(                  "++"))) or
        not raisesRangeError(integer(striExpr(                  "+-"))) or
        not raisesRangeError(integer(striExpr(                 "++1"))) or
        not raisesRangeError(integer(striExpr(                 "+-1"))) or
        not raisesRangeError(integer(striExpr(                   "-"))) or
        not raisesRangeError(integer(striExpr(                  "--"))) or
        not raisesRangeError(integer(striExpr(                  "-+"))) or
        not raisesRangeError(integer(striExpr(                 "--1"))) or
        not raisesRangeError(integer(striExpr(                 "-+1"))) or
        not raisesRangeError(integer(striExpr(                    ""))) or
        not raisesRangeError(integer(striExpr(                " 123"))) or
        not raisesRangeError(integer(striExpr(                "123 "))) or
        not raisesRangeError(integer(striExpr(                "123@"))) or
        not raisesRangeError(integer(striExpr(             "123@456"))) or
        not raisesRangeError(integer(striExpr( "9223372036854775808"))) or
        not raisesRangeError(integer(striExpr( "9223372036854775809"))) or
        not raisesRangeError(integer(striExpr( "9223372036854775810"))) or
        not raisesRangeError(integer(striExpr( "9223372036854775811"))) or
        not raisesRangeError(integer(striExpr( "9223372036854775819"))) or
        not raisesRangeError(integer(striExpr( "9223372036854775820"))) or
        not raisesRangeError(integer(striExpr( "9223372036854775890"))) then
      writeln(" ***** Integer parse with illegal literal does not raise RANGE_ERROR. (1)");
      okay := FALSE;
    end if;

    if  not raisesRangeError(integer parse "-9223372036854775890") or
        not raisesRangeError(integer parse "-9223372036854775820") or
        not raisesRangeError(integer parse "-9223372036854775819") or
        not raisesRangeError(integer parse "-9223372036854775811") or
        not raisesRangeError(integer parse "-9223372036854775810") or
        not raisesRangeError(integer parse "-9223372036854775809") or
        not raisesRangeError(integer parse                    "@") or
        not raisesRangeError(integer parse                    "+") or
        not raisesRangeError(integer parse                   "++") or
        not raisesRangeError(integer parse                   "+-") or
        not raisesRangeError(integer parse                  "++1") or
        not raisesRangeError(integer parse                  "+-1") or
        not raisesRangeError(integer parse                    "-") or
        not raisesRangeError(integer parse                   "--") or
        not raisesRangeError(integer parse                   "-+") or
        not raisesRangeError(integer parse                  "--1") or
        not raisesRangeError(integer parse                  "-+1") or
        not raisesRangeError(integer parse                     "") or
        not raisesRangeError(integer parse                 " 123") or
        not raisesRangeError(integer parse                 "123 ") or
        not raisesRangeError(integer parse                 "123@") or
        not raisesRangeError(integer parse              "123@456") or
        not raisesRangeError(integer parse  "9223372036854775808") or
        not raisesRangeError(integer parse  "9223372036854775809") or
        not raisesRangeError(integer parse  "9223372036854775810") or
        not raisesRangeError(integer parse  "9223372036854775811") or
        not raisesRangeError(integer parse  "9223372036854775819") or
        not raisesRangeError(integer parse  "9223372036854775820") or
        not raisesRangeError(integer parse  "9223372036854775890") or
        not raisesRangeError(integer parse striExpr("-9223372036854775890")) or
        not raisesRangeError(integer parse striExpr("-9223372036854775820")) or
        not raisesRangeError(integer parse striExpr("-9223372036854775819")) or
        not raisesRangeError(integer parse striExpr("-9223372036854775811")) or
        not raisesRangeError(integer parse striExpr("-9223372036854775810")) or
        not raisesRangeError(integer parse striExpr("-9223372036854775809")) or
        not raisesRangeError(integer parse striExpr(                   "@")) or
        not raisesRangeError(integer parse striExpr(                   "+")) or
        not raisesRangeError(integer parse striExpr(                  "++")) or
        not raisesRangeError(integer parse striExpr(                  "+-")) or
        not raisesRangeError(integer parse striExpr(                 "++1")) or
        not raisesRangeError(integer parse striExpr(                 "+-1")) or
        not raisesRangeError(integer parse striExpr(                   "-")) or
        not raisesRangeError(integer parse striExpr(                  "--")) or
        not raisesRangeError(integer parse striExpr(                  "-+")) or
        not raisesRangeError(integer parse striExpr(                 "--1")) or
        not raisesRangeError(integer parse striExpr(                 "-+1")) or
        not raisesRangeError(integer parse striExpr(                    "")) or
        not raisesRangeError(integer parse striExpr(                " 123")) or
        not raisesRangeError(integer parse striExpr(                "123 ")) or
        not raisesRangeError(integer parse striExpr(                "123@")) or
        not raisesRangeError(integer parse striExpr(             "123@456")) or
        not raisesRangeError(integer parse striExpr( "9223372036854775808")) or
        not raisesRangeError(integer parse striExpr( "9223372036854775809")) or
        not raisesRangeError(integer parse striExpr( "9223372036854775810")) or
        not raisesRangeError(integer parse striExpr( "9223372036854775811")) or
        not raisesRangeError(integer parse striExpr( "9223372036854775819")) or
        not raisesRangeError(integer parse striExpr( "9223372036854775820")) or
        not raisesRangeError(integer parse striExpr( "9223372036854775890")) then
      writeln(" ***** Integer parse with illegal literal does not raise RANGE_ERROR. (2)");
      okay := FALSE;
    end if;

    if  integer("11110100001001000000", 2)  <>  1000000 or
        integer("1212210202001", 3)         <>  1000000 or
        integer("3310021000", 4)            <>  1000000 or
        integer("224000000", 5)             <>  1000000 or
        integer("33233344", 6)              <>  1000000 or
        integer("11333311", 7)              <>  1000000 or
        integer("3641100", 8)               <>  1000000 or
        integer("1783661", 9)               <>  1000000 or
        integer("1000000", 10)              <>  1000000 or
        integer("623351", 11)               <>  1000000 or
        integer("402854", 12)               <>  1000000 or
        integer("290221", 13)               <>  1000000 or
        integer("1C0608", 14)               <>  1000000 or
        integer("14B46A", 15)               <>  1000000 or
        integer("F4240", 16)                <>  1000000 or
        integer("BG939", 17)                <>  1000000 or
        integer("9987A", 18)                <>  1000000 or
        integer("7CF1B", 19)                <>  1000000 or
        integer("65000", 20)                <>  1000000 or
        integer("52KC1", 21)                <>  1000000 or
        integer("45K2C", 22)                <>  1000000 or
        integer("3D486", 23)                <>  1000000 or
        integer("3082G", 24)                <>  1000000 or
        integer("2E000", 25)                <>  1000000 or
        integer("24N7E", 26)                <>  1000000 or
        integer("1NLK1", 27)                <>  1000000 or
        integer("1HFE8", 28)                <>  1000000 or
        integer("1C01M", 29)                <>  1000000 or
        integer("1713A", 30)                <>  1000000 or
        integer("12HI2", 31)                <>  1000000 or
        integer("UGI0", 32)                 <>  1000000 or
        integer("RR91", 33)                 <>  1000000 or
        integer("PF1Q", 34)                 <>  1000000 or
        integer("NBBF", 35)                 <>  1000000 or
        integer("LFLS", 36)                 <>  1000000 or
        integer("+11110100001001000000", 2) <>  1000000 or
        integer("+1212210202001", 3)        <>  1000000 or
        integer("+3310021000", 4)           <>  1000000 or
        integer("+224000000", 5)            <>  1000000 or
        integer("+33233344", 6)             <>  1000000 or
        integer("+11333311", 7)             <>  1000000 or
        integer("+3641100", 8)              <>  1000000 or
        integer("+1783661", 9)              <>  1000000 or
        integer("+1000000", 10)             <>  1000000 or
        integer("+623351", 11)              <>  1000000 or
        integer("+402854", 12)              <>  1000000 or
        integer("+290221", 13)              <>  1000000 or
        integer("+1C0608", 14)              <>  1000000 or
        integer("+14B46A", 15)              <>  1000000 or
        integer("+F4240", 16)               <>  1000000 or
        integer("+BG939", 17)               <>  1000000 or
        integer("+9987A", 18)               <>  1000000 or
        integer("+7CF1B", 19)               <>  1000000 or
        integer("+65000", 20)               <>  1000000 or
        integer("+52KC1", 21)               <>  1000000 or
        integer("+45K2C", 22)               <>  1000000 or
        integer("+3D486", 23)               <>  1000000 or
        integer("+3082G", 24)               <>  1000000 or
        integer("+2E000", 25)               <>  1000000 or
        integer("+24N7E", 26)               <>  1000000 or
        integer("+1NLK1", 27)               <>  1000000 or
        integer("+1HFE8", 28)               <>  1000000 or
        integer("+1C01M", 29)               <>  1000000 or
        integer("+1713A", 30)               <>  1000000 or
        integer("+12HI2", 31)               <>  1000000 or
        integer("+UGI0", 32)                <>  1000000 or
        integer("+RR91", 33)                <>  1000000 or
        integer("+PF1Q", 34)                <>  1000000 or
        integer("+NBBF", 35)                <>  1000000 or
        integer("+LFLS", 36)                <>  1000000 or
        integer("-11110100001001000000", 2) <> -1000000 or
        integer("-1212210202001", 3)        <> -1000000 or
        integer("-3310021000", 4)           <> -1000000 or
        integer("-224000000", 5)            <> -1000000 or
        integer("-33233344", 6)             <> -1000000 or
        integer("-11333311", 7)             <> -1000000 or
        integer("-3641100", 8)              <> -1000000 or
        integer("-1783661", 9)              <> -1000000 or
        integer("-1000000", 10)             <> -1000000 or
        integer("-623351", 11)              <> -1000000 or
        integer("-402854", 12)              <> -1000000 or
        integer("-290221", 13)              <> -1000000 or
        integer("-1C0608", 14)              <> -1000000 or
        integer("-14B46A", 15)              <> -1000000 or
        integer("-F4240", 16)               <> -1000000 or
        integer("-BG939", 17)               <> -1000000 or
        integer("-9987A", 18)               <> -1000000 or
        integer("-7CF1B", 19)               <> -1000000 or
        integer("-65000", 20)               <> -1000000 or
        integer("-52KC1", 21)               <> -1000000 or
        integer("-45K2C", 22)               <> -1000000 or
        integer("-3D486", 23)               <> -1000000 or
        integer("-3082G", 24)               <> -1000000 or
        integer("-2E000", 25)               <> -1000000 or
        integer("-24N7E", 26)               <> -1000000 or
        integer("-1NLK1", 27)               <> -1000000 or
        integer("-1HFE8", 28)               <> -1000000 or
        integer("-1C01M", 29)               <> -1000000 or
        integer("-1713A", 30)               <> -1000000 or
        integer("-12HI2", 31)               <> -1000000 or
        integer("-UGI0", 32)                <> -1000000 or
        integer("-RR91", 33)                <> -1000000 or
        integer("-PF1Q", 34)                <> -1000000 or
        integer("-NBBF", 35)                <> -1000000 or
        integer("-LFLS", 36)                <> -1000000 then
      writeln(" ***** Conversion of numeric string with specified radix does not work correct.");
      okay := FALSE;
    end if;

    if  not raisesRangeError(integer("0", integer.first)) or
        not raisesRangeError(integer("0",            -1)) or
        not raisesRangeError(integer("0",             0)) or
        not raisesRangeError(integer("0",             1)) or
        not raisesRangeError(integer("0",            37)) or
        not raisesRangeError(integer("0",            38)) or
        not raisesRangeError(integer("0",  integer.last)) or
        not raisesRangeError(integer(striExpr("0"), integer.first)) or
        not raisesRangeError(integer(striExpr("0"),            -1)) or
        not raisesRangeError(integer(striExpr("0"),             0)) or
        not raisesRangeError(integer(striExpr("0"),             1)) or
        not raisesRangeError(integer(striExpr("0"),            37)) or
        not raisesRangeError(integer(striExpr("0"),            38)) or
        not raisesRangeError(integer(striExpr("0"),  integer.last)) or
        not raisesRangeError(integer("0", intExpr(integer.first))) or
        not raisesRangeError(integer("0", intExpr(           -1))) or
        not raisesRangeError(integer("0", intExpr(            0))) or
        not raisesRangeError(integer("0", intExpr(            1))) or
        not raisesRangeError(integer("0", intExpr(           37))) or
        not raisesRangeError(integer("0", intExpr(           38))) or
        not raisesRangeError(integer("0", intExpr( integer.last))) or
        not raisesRangeError(integer(striExpr("0"), intExpr(integer.first))) or
        not raisesRangeError(integer(striExpr("0"), intExpr(           -1))) or
        not raisesRangeError(integer(striExpr("0"), intExpr(            0))) or
        not raisesRangeError(integer(striExpr("0"), intExpr(            1))) or
        not raisesRangeError(integer(striExpr("0"), intExpr(           37))) or
        not raisesRangeError(integer(striExpr("0"), intExpr(           38))) or
        not raisesRangeError(integer(striExpr("0"), intExpr( integer.last))) then
      writeln(" ***** Conversion of numeric string does not raise RANGE_ERROR for an illegal base.");
      okay := FALSE;
    end if;

    if okay then
      writeln("Integer parse does work correct.");
    end if;
  end func;


const proc: check_lpad0 is func
  local
    var boolean: okay is TRUE;
  begin
    if (-10001 lpad0 0) <> "-10001" or
       (-10000 lpad0 0) <> "-10000" or
       ( -9999 lpad0 0) <>  "-9999" or
       ( -2000 lpad0 0) <>  "-2000" or
       ( -1001 lpad0 0) <>  "-1001" or
       ( -1000 lpad0 0) <>  "-1000" or
       (  -999 lpad0 0) <>   "-999" or
       (  -200 lpad0 0) <>   "-200" or
       (  -101 lpad0 0) <>   "-101" or
       (  -100 lpad0 0) <>   "-100" or
       (   -99 lpad0 0) <>    "-99" or
       (   -20 lpad0 0) <>    "-20" or
       (   -11 lpad0 0) <>    "-11" or
       (   -10 lpad0 0) <>    "-10" or
       (    -9 lpad0 0) <>     "-9" or
       (    -2 lpad0 0) <>     "-2" or
       (    -1 lpad0 0) <>     "-1" or
       (     0 lpad0 0) <>      "0" or
       (     1 lpad0 0) <>      "1" or
       (     2 lpad0 0) <>      "2" or
       (     9 lpad0 0) <>      "9" or
       (    10 lpad0 0) <>     "10" or
       (    11 lpad0 0) <>     "11" or
       (    20 lpad0 0) <>     "20" or
       (    99 lpad0 0) <>     "99" or
       (   100 lpad0 0) <>    "100" or
       (   101 lpad0 0) <>    "101" or
       (   200 lpad0 0) <>    "200" or
       (   999 lpad0 0) <>    "999" or
       (  1000 lpad0 0) <>   "1000" or
       (  1001 lpad0 0) <>   "1001" or
       (  2000 lpad0 0) <>   "2000" or
       (  9999 lpad0 0) <>   "9999" or
       ( 10000 lpad0 0) <>  "10000" or
       ( 10001 lpad0 0) <>  "10001" or
       (-10001 lpad0 1) <> "-10001" or
       (-10000 lpad0 1) <> "-10000" or
       ( -9999 lpad0 1) <>  "-9999" or
       ( -2000 lpad0 1) <>  "-2000" or
       ( -1001 lpad0 1) <>  "-1001" or
       ( -1000 lpad0 1) <>  "-1000" or
       (  -999 lpad0 1) <>   "-999" or
       (  -200 lpad0 1) <>   "-200" or
       (  -101 lpad0 1) <>   "-101" or
       (  -100 lpad0 1) <>   "-100" or
       (   -99 lpad0 1) <>    "-99" or
       (   -20 lpad0 1) <>    "-20" or
       (   -11 lpad0 1) <>    "-11" or
       (   -10 lpad0 1) <>    "-10" or
       (    -9 lpad0 1) <>     "-9" or
       (    -2 lpad0 1) <>     "-2" or
       (    -1 lpad0 1) <>     "-1" or
       (     0 lpad0 1) <>      "0" or
       (     1 lpad0 1) <>      "1" or
       (     2 lpad0 1) <>      "2" or
       (     9 lpad0 1) <>      "9" or
       (    10 lpad0 1) <>     "10" or
       (    11 lpad0 1) <>     "11" or
       (    20 lpad0 1) <>     "20" or
       (    99 lpad0 1) <>     "99" or
       (   100 lpad0 1) <>    "100" or
       (   101 lpad0 1) <>    "101" or
       (   200 lpad0 1) <>    "200" or
       (   999 lpad0 1) <>    "999" or
       (  1000 lpad0 1) <>   "1000" or
       (  1001 lpad0 1) <>   "1001" or
       (  2000 lpad0 1) <>   "2000" or
       (  9999 lpad0 1) <>   "9999" or
       ( 10000 lpad0 1) <>  "10000" or
       ( 10001 lpad0 1) <>  "10001" or
       (-10001 lpad0 2) <> "-10001" or
       (-10000 lpad0 2) <> "-10000" or
       ( -9999 lpad0 2) <>  "-9999" or
       ( -2000 lpad0 2) <>  "-2000" or
       ( -1001 lpad0 2) <>  "-1001" or
       ( -1000 lpad0 2) <>  "-1000" or
       (  -999 lpad0 2) <>   "-999" or
       (  -200 lpad0 2) <>   "-200" or
       (  -101 lpad0 2) <>   "-101" or
       (  -100 lpad0 2) <>   "-100" or
       (   -99 lpad0 2) <>    "-99" or
       (   -20 lpad0 2) <>    "-20" or
       (   -11 lpad0 2) <>    "-11" or
       (   -10 lpad0 2) <>    "-10" or
       (    -9 lpad0 2) <>     "-9" or
       (    -2 lpad0 2) <>     "-2" or
       (    -1 lpad0 2) <>     "-1" or
       (     0 lpad0 2) <>     "00" or
       (     1 lpad0 2) <>     "01" or
       (     2 lpad0 2) <>     "02" or
       (     9 lpad0 2) <>     "09" or
       (    10 lpad0 2) <>     "10" or
       (    11 lpad0 2) <>     "11" or
       (    20 lpad0 2) <>     "20" or
       (    99 lpad0 2) <>     "99" or
       (   100 lpad0 2) <>    "100" or
       (   101 lpad0 2) <>    "101" or
       (   200 lpad0 2) <>    "200" or
       (   999 lpad0 2) <>    "999" or
       (  1000 lpad0 2) <>   "1000" or
       (  1001 lpad0 2) <>   "1001" or
       (  2000 lpad0 2) <>   "2000" or
       (  9999 lpad0 2) <>   "9999" or
       ( 10000 lpad0 2) <>  "10000" or
       ( 10001 lpad0 2) <>  "10001" or
       (-10001 lpad0 3) <> "-10001" or
       (-10000 lpad0 3) <> "-10000" or
       ( -9999 lpad0 3) <>  "-9999" or
       ( -2000 lpad0 3) <>  "-2000" or
       ( -1001 lpad0 3) <>  "-1001" or
       ( -1000 lpad0 3) <>  "-1000" or
       (  -999 lpad0 3) <>   "-999" or
       (  -200 lpad0 3) <>   "-200" or
       (  -101 lpad0 3) <>   "-101" or
       (  -100 lpad0 3) <>   "-100" or
       (   -99 lpad0 3) <>    "-99" or
       (   -20 lpad0 3) <>    "-20" or
       (   -11 lpad0 3) <>    "-11" or
       (   -10 lpad0 3) <>    "-10" or
       (    -9 lpad0 3) <>    "-09" or
       (    -2 lpad0 3) <>    "-02" or
       (    -1 lpad0 3) <>    "-01" or
       (     0 lpad0 3) <>    "000" or
       (     1 lpad0 3) <>    "001" or
       (     2 lpad0 3) <>    "002" or
       (     9 lpad0 3) <>    "009" or
       (    10 lpad0 3) <>    "010" or
       (    11 lpad0 3) <>    "011" or
       (    20 lpad0 3) <>    "020" or
       (    99 lpad0 3) <>    "099" or
       (   100 lpad0 3) <>    "100" or
       (   101 lpad0 3) <>    "101" or
       (   200 lpad0 3) <>    "200" or
       (   999 lpad0 3) <>    "999" or
       (  1000 lpad0 3) <>   "1000" or
       (  1001 lpad0 3) <>   "1001" or
       (  2000 lpad0 3) <>   "2000" or
       (  9999 lpad0 3) <>   "9999" or
       ( 10000 lpad0 3) <>  "10000" or
       ( 10001 lpad0 3) <>  "10001" or
       (-10001 lpad0 4) <> "-10001" or
       (-10000 lpad0 4) <> "-10000" or
       ( -9999 lpad0 4) <>  "-9999" or
       ( -2000 lpad0 4) <>  "-2000" or
       ( -1001 lpad0 4) <>  "-1001" or
       ( -1000 lpad0 4) <>  "-1000" or
       (  -999 lpad0 4) <>   "-999" or
       (  -200 lpad0 4) <>   "-200" or
       (  -101 lpad0 4) <>   "-101" or
       (  -100 lpad0 4) <>   "-100" or
       (   -99 lpad0 4) <>   "-099" or
       (   -20 lpad0 4) <>   "-020" or
       (   -11 lpad0 4) <>   "-011" or
       (   -10 lpad0 4) <>   "-010" or
       (    -9 lpad0 4) <>   "-009" or
       (    -2 lpad0 4) <>   "-002" or
       (    -1 lpad0 4) <>   "-001" or
       (     0 lpad0 4) <>   "0000" or
       (     1 lpad0 4) <>   "0001" or
       (     2 lpad0 4) <>   "0002" or
       (     9 lpad0 4) <>   "0009" or
       (    10 lpad0 4) <>   "0010" or
       (    11 lpad0 4) <>   "0011" or
       (    20 lpad0 4) <>   "0020" or
       (    99 lpad0 4) <>   "0099" or
       (   100 lpad0 4) <>   "0100" or
       (   101 lpad0 4) <>   "0101" or
       (   200 lpad0 4) <>   "0200" or
       (   999 lpad0 4) <>   "0999" or
       (  1000 lpad0 4) <>   "1000" or
       (  1001 lpad0 4) <>   "1001" or
       (  2000 lpad0 4) <>   "2000" or
       (  9999 lpad0 4) <>   "9999" or
       ( 10000 lpad0 4) <>  "10000" or
       ( 10001 lpad0 4) <>  "10001" or
       (-10001 lpad0 5) <> "-10001" or
       (-10000 lpad0 5) <> "-10000" or
       ( -9999 lpad0 5) <>  "-9999" or
       ( -2000 lpad0 5) <>  "-2000" or
       ( -1001 lpad0 5) <>  "-1001" or
       ( -1000 lpad0 5) <>  "-1000" or
       (  -999 lpad0 5) <>  "-0999" or
       (  -200 lpad0 5) <>  "-0200" or
       (  -101 lpad0 5) <>  "-0101" or
       (  -100 lpad0 5) <>  "-0100" or
       (   -99 lpad0 5) <>  "-0099" or
       (   -20 lpad0 5) <>  "-0020" or
       (   -11 lpad0 5) <>  "-0011" or
       (   -10 lpad0 5) <>  "-0010" or
       (    -9 lpad0 5) <>  "-0009" or
       (    -2 lpad0 5) <>  "-0002" or
       (    -1 lpad0 5) <>  "-0001" or
       (     0 lpad0 5) <>  "00000" or
       (     1 lpad0 5) <>  "00001" or
       (     2 lpad0 5) <>  "00002" or
       (     9 lpad0 5) <>  "00009" or
       (    10 lpad0 5) <>  "00010" or
       (    11 lpad0 5) <>  "00011" or
       (    20 lpad0 5) <>  "00020" or
       (    99 lpad0 5) <>  "00099" or
       (   100 lpad0 5) <>  "00100" or
       (   101 lpad0 5) <>  "00101" or
       (   200 lpad0 5) <>  "00200" or
       (   999 lpad0 5) <>  "00999" or
       (  1000 lpad0 5) <>  "01000" or
       (  1001 lpad0 5) <>  "01001" or
       (  2000 lpad0 5) <>  "02000" or
       (  9999 lpad0 5) <>  "09999" or
       ( 10000 lpad0 5) <>  "10000" or
       ( 10001 lpad0 5) <>  "10001" or
       (-10001 lpad0 6) <> "-10001" or
       (-10000 lpad0 6) <> "-10000" or
       ( -9999 lpad0 6) <> "-09999" or
       ( -2000 lpad0 6) <> "-02000" or
       ( -1001 lpad0 6) <> "-01001" or
       ( -1000 lpad0 6) <> "-01000" or
       (  -999 lpad0 6) <> "-00999" or
       (  -200 lpad0 6) <> "-00200" or
       (  -101 lpad0 6) <> "-00101" or
       (  -100 lpad0 6) <> "-00100" or
       (   -99 lpad0 6) <> "-00099" or
       (   -20 lpad0 6) <> "-00020" or
       (   -11 lpad0 6) <> "-00011" or
       (   -10 lpad0 6) <> "-00010" or
       (    -9 lpad0 6) <> "-00009" or
       (    -2 lpad0 6) <> "-00002" or
       (    -1 lpad0 6) <> "-00001" or
       (     0 lpad0 6) <> "000000" or
       (     1 lpad0 6) <> "000001" or
       (     2 lpad0 6) <> "000002" or
       (     9 lpad0 6) <> "000009" or
       (    10 lpad0 6) <> "000010" or
       (    11 lpad0 6) <> "000011" or
       (    20 lpad0 6) <> "000020" or
       (    99 lpad0 6) <> "000099" or
       (   100 lpad0 6) <> "000100" or
       (   101 lpad0 6) <> "000101" or
       (   200 lpad0 6) <> "000200" or
       (   999 lpad0 6) <> "000999" or
       (  1000 lpad0 6) <> "001000" or
       (  1001 lpad0 6) <> "001001" or
       (  2000 lpad0 6) <> "002000" or
       (  9999 lpad0 6) <> "009999" or
       ( 10000 lpad0 6) <> "010000" or
       ( 10001 lpad0 6) <> "010001" then
      writeln(" ***** Integer lpad0 is not correct computed. (1)");
      okay := FALSE;
    end if;

    if (intExpr(-10001) lpad0 0) <> "-10001" or
       (intExpr(-10000) lpad0 0) <> "-10000" or
       (intExpr( -9999) lpad0 0) <>  "-9999" or
       (intExpr( -2000) lpad0 0) <>  "-2000" or
       (intExpr( -1001) lpad0 0) <>  "-1001" or
       (intExpr( -1000) lpad0 0) <>  "-1000" or
       (intExpr(  -999) lpad0 0) <>   "-999" or
       (intExpr(  -200) lpad0 0) <>   "-200" or
       (intExpr(  -101) lpad0 0) <>   "-101" or
       (intExpr(  -100) lpad0 0) <>   "-100" or
       (intExpr(   -99) lpad0 0) <>    "-99" or
       (intExpr(   -20) lpad0 0) <>    "-20" or
       (intExpr(   -11) lpad0 0) <>    "-11" or
       (intExpr(   -10) lpad0 0) <>    "-10" or
       (intExpr(    -9) lpad0 0) <>     "-9" or
       (intExpr(    -2) lpad0 0) <>     "-2" or
       (intExpr(    -1) lpad0 0) <>     "-1" or
       (intExpr(     0) lpad0 0) <>      "0" or
       (intExpr(     1) lpad0 0) <>      "1" or
       (intExpr(     2) lpad0 0) <>      "2" or
       (intExpr(     9) lpad0 0) <>      "9" or
       (intExpr(    10) lpad0 0) <>     "10" or
       (intExpr(    11) lpad0 0) <>     "11" or
       (intExpr(    20) lpad0 0) <>     "20" or
       (intExpr(    99) lpad0 0) <>     "99" or
       (intExpr(   100) lpad0 0) <>    "100" or
       (intExpr(   101) lpad0 0) <>    "101" or
       (intExpr(   200) lpad0 0) <>    "200" or
       (intExpr(   999) lpad0 0) <>    "999" or
       (intExpr(  1000) lpad0 0) <>   "1000" or
       (intExpr(  1001) lpad0 0) <>   "1001" or
       (intExpr(  2000) lpad0 0) <>   "2000" or
       (intExpr(  9999) lpad0 0) <>   "9999" or
       (intExpr( 10000) lpad0 0) <>  "10000" or
       (intExpr( 10001) lpad0 0) <>  "10001" or
       (intExpr(-10001) lpad0 1) <> "-10001" or
       (intExpr(-10000) lpad0 1) <> "-10000" or
       (intExpr( -9999) lpad0 1) <>  "-9999" or
       (intExpr( -2000) lpad0 1) <>  "-2000" or
       (intExpr( -1001) lpad0 1) <>  "-1001" or
       (intExpr( -1000) lpad0 1) <>  "-1000" or
       (intExpr(  -999) lpad0 1) <>   "-999" or
       (intExpr(  -200) lpad0 1) <>   "-200" or
       (intExpr(  -101) lpad0 1) <>   "-101" or
       (intExpr(  -100) lpad0 1) <>   "-100" or
       (intExpr(   -99) lpad0 1) <>    "-99" or
       (intExpr(   -20) lpad0 1) <>    "-20" or
       (intExpr(   -11) lpad0 1) <>    "-11" or
       (intExpr(   -10) lpad0 1) <>    "-10" or
       (intExpr(    -9) lpad0 1) <>     "-9" or
       (intExpr(    -2) lpad0 1) <>     "-2" or
       (intExpr(    -1) lpad0 1) <>     "-1" or
       (intExpr(     0) lpad0 1) <>      "0" or
       (intExpr(     1) lpad0 1) <>      "1" or
       (intExpr(     2) lpad0 1) <>      "2" or
       (intExpr(     9) lpad0 1) <>      "9" or
       (intExpr(    10) lpad0 1) <>     "10" or
       (intExpr(    11) lpad0 1) <>     "11" or
       (intExpr(    20) lpad0 1) <>     "20" or
       (intExpr(    99) lpad0 1) <>     "99" or
       (intExpr(   100) lpad0 1) <>    "100" or
       (intExpr(   101) lpad0 1) <>    "101" or
       (intExpr(   200) lpad0 1) <>    "200" or
       (intExpr(   999) lpad0 1) <>    "999" or
       (intExpr(  1000) lpad0 1) <>   "1000" or
       (intExpr(  1001) lpad0 1) <>   "1001" or
       (intExpr(  2000) lpad0 1) <>   "2000" or
       (intExpr(  9999) lpad0 1) <>   "9999" or
       (intExpr( 10000) lpad0 1) <>  "10000" or
       (intExpr( 10001) lpad0 1) <>  "10001" or
       (intExpr(-10001) lpad0 2) <> "-10001" or
       (intExpr(-10000) lpad0 2) <> "-10000" or
       (intExpr( -9999) lpad0 2) <>  "-9999" or
       (intExpr( -2000) lpad0 2) <>  "-2000" or
       (intExpr( -1001) lpad0 2) <>  "-1001" or
       (intExpr( -1000) lpad0 2) <>  "-1000" or
       (intExpr(  -999) lpad0 2) <>   "-999" or
       (intExpr(  -200) lpad0 2) <>   "-200" or
       (intExpr(  -101) lpad0 2) <>   "-101" or
       (intExpr(  -100) lpad0 2) <>   "-100" or
       (intExpr(   -99) lpad0 2) <>    "-99" or
       (intExpr(   -20) lpad0 2) <>    "-20" or
       (intExpr(   -11) lpad0 2) <>    "-11" or
       (intExpr(   -10) lpad0 2) <>    "-10" or
       (intExpr(    -9) lpad0 2) <>     "-9" or
       (intExpr(    -2) lpad0 2) <>     "-2" or
       (intExpr(    -1) lpad0 2) <>     "-1" or
       (intExpr(     0) lpad0 2) <>     "00" or
       (intExpr(     1) lpad0 2) <>     "01" or
       (intExpr(     2) lpad0 2) <>     "02" or
       (intExpr(     9) lpad0 2) <>     "09" or
       (intExpr(    10) lpad0 2) <>     "10" or
       (intExpr(    11) lpad0 2) <>     "11" or
       (intExpr(    20) lpad0 2) <>     "20" or
       (intExpr(    99) lpad0 2) <>     "99" or
       (intExpr(   100) lpad0 2) <>    "100" or
       (intExpr(   101) lpad0 2) <>    "101" or
       (intExpr(   200) lpad0 2) <>    "200" or
       (intExpr(   999) lpad0 2) <>    "999" or
       (intExpr(  1000) lpad0 2) <>   "1000" or
       (intExpr(  1001) lpad0 2) <>   "1001" or
       (intExpr(  2000) lpad0 2) <>   "2000" or
       (intExpr(  9999) lpad0 2) <>   "9999" or
       (intExpr( 10000) lpad0 2) <>  "10000" or
       (intExpr( 10001) lpad0 2) <>  "10001" or
       (intExpr(-10001) lpad0 3) <> "-10001" or
       (intExpr(-10000) lpad0 3) <> "-10000" or
       (intExpr( -9999) lpad0 3) <>  "-9999" or
       (intExpr( -2000) lpad0 3) <>  "-2000" or
       (intExpr( -1001) lpad0 3) <>  "-1001" or
       (intExpr( -1000) lpad0 3) <>  "-1000" or
       (intExpr(  -999) lpad0 3) <>   "-999" or
       (intExpr(  -200) lpad0 3) <>   "-200" or
       (intExpr(  -101) lpad0 3) <>   "-101" or
       (intExpr(  -100) lpad0 3) <>   "-100" or
       (intExpr(   -99) lpad0 3) <>    "-99" or
       (intExpr(   -20) lpad0 3) <>    "-20" or
       (intExpr(   -11) lpad0 3) <>    "-11" or
       (intExpr(   -10) lpad0 3) <>    "-10" or
       (intExpr(    -9) lpad0 3) <>    "-09" or
       (intExpr(    -2) lpad0 3) <>    "-02" or
       (intExpr(    -1) lpad0 3) <>    "-01" or
       (intExpr(     0) lpad0 3) <>    "000" or
       (intExpr(     1) lpad0 3) <>    "001" or
       (intExpr(     2) lpad0 3) <>    "002" or
       (intExpr(     9) lpad0 3) <>    "009" or
       (intExpr(    10) lpad0 3) <>    "010" or
       (intExpr(    11) lpad0 3) <>    "011" or
       (intExpr(    20) lpad0 3) <>    "020" or
       (intExpr(    99) lpad0 3) <>    "099" or
       (intExpr(   100) lpad0 3) <>    "100" or
       (intExpr(   101) lpad0 3) <>    "101" or
       (intExpr(   200) lpad0 3) <>    "200" or
       (intExpr(   999) lpad0 3) <>    "999" or
       (intExpr(  1000) lpad0 3) <>   "1000" or
       (intExpr(  1001) lpad0 3) <>   "1001" or
       (intExpr(  2000) lpad0 3) <>   "2000" or
       (intExpr(  9999) lpad0 3) <>   "9999" or
       (intExpr( 10000) lpad0 3) <>  "10000" or
       (intExpr( 10001) lpad0 3) <>  "10001" or
       (intExpr(-10001) lpad0 4) <> "-10001" or
       (intExpr(-10000) lpad0 4) <> "-10000" or
       (intExpr( -9999) lpad0 4) <>  "-9999" or
       (intExpr( -2000) lpad0 4) <>  "-2000" or
       (intExpr( -1001) lpad0 4) <>  "-1001" or
       (intExpr( -1000) lpad0 4) <>  "-1000" or
       (intExpr(  -999) lpad0 4) <>   "-999" or
       (intExpr(  -200) lpad0 4) <>   "-200" or
       (intExpr(  -101) lpad0 4) <>   "-101" or
       (intExpr(  -100) lpad0 4) <>   "-100" or
       (intExpr(   -99) lpad0 4) <>   "-099" or
       (intExpr(   -20) lpad0 4) <>   "-020" or
       (intExpr(   -11) lpad0 4) <>   "-011" or
       (intExpr(   -10) lpad0 4) <>   "-010" or
       (intExpr(    -9) lpad0 4) <>   "-009" or
       (intExpr(    -2) lpad0 4) <>   "-002" or
       (intExpr(    -1) lpad0 4) <>   "-001" or
       (intExpr(     0) lpad0 4) <>   "0000" or
       (intExpr(     1) lpad0 4) <>   "0001" or
       (intExpr(     2) lpad0 4) <>   "0002" or
       (intExpr(     9) lpad0 4) <>   "0009" or
       (intExpr(    10) lpad0 4) <>   "0010" or
       (intExpr(    11) lpad0 4) <>   "0011" or
       (intExpr(    20) lpad0 4) <>   "0020" or
       (intExpr(    99) lpad0 4) <>   "0099" or
       (intExpr(   100) lpad0 4) <>   "0100" or
       (intExpr(   101) lpad0 4) <>   "0101" or
       (intExpr(   200) lpad0 4) <>   "0200" or
       (intExpr(   999) lpad0 4) <>   "0999" or
       (intExpr(  1000) lpad0 4) <>   "1000" or
       (intExpr(  1001) lpad0 4) <>   "1001" or
       (intExpr(  2000) lpad0 4) <>   "2000" or
       (intExpr(  9999) lpad0 4) <>   "9999" or
       (intExpr( 10000) lpad0 4) <>  "10000" or
       (intExpr( 10001) lpad0 4) <>  "10001" or
       (intExpr(-10001) lpad0 5) <> "-10001" or
       (intExpr(-10000) lpad0 5) <> "-10000" or
       (intExpr( -9999) lpad0 5) <>  "-9999" or
       (intExpr( -2000) lpad0 5) <>  "-2000" or
       (intExpr( -1001) lpad0 5) <>  "-1001" or
       (intExpr( -1000) lpad0 5) <>  "-1000" or
       (intExpr(  -999) lpad0 5) <>  "-0999" or
       (intExpr(  -200) lpad0 5) <>  "-0200" or
       (intExpr(  -101) lpad0 5) <>  "-0101" or
       (intExpr(  -100) lpad0 5) <>  "-0100" or
       (intExpr(   -99) lpad0 5) <>  "-0099" or
       (intExpr(   -20) lpad0 5) <>  "-0020" or
       (intExpr(   -11) lpad0 5) <>  "-0011" or
       (intExpr(   -10) lpad0 5) <>  "-0010" or
       (intExpr(    -9) lpad0 5) <>  "-0009" or
       (intExpr(    -2) lpad0 5) <>  "-0002" or
       (intExpr(    -1) lpad0 5) <>  "-0001" or
       (intExpr(     0) lpad0 5) <>  "00000" or
       (intExpr(     1) lpad0 5) <>  "00001" or
       (intExpr(     2) lpad0 5) <>  "00002" or
       (intExpr(     9) lpad0 5) <>  "00009" or
       (intExpr(    10) lpad0 5) <>  "00010" or
       (intExpr(    11) lpad0 5) <>  "00011" or
       (intExpr(    20) lpad0 5) <>  "00020" or
       (intExpr(    99) lpad0 5) <>  "00099" or
       (intExpr(   100) lpad0 5) <>  "00100" or
       (intExpr(   101) lpad0 5) <>  "00101" or
       (intExpr(   200) lpad0 5) <>  "00200" or
       (intExpr(   999) lpad0 5) <>  "00999" or
       (intExpr(  1000) lpad0 5) <>  "01000" or
       (intExpr(  1001) lpad0 5) <>  "01001" or
       (intExpr(  2000) lpad0 5) <>  "02000" or
       (intExpr(  9999) lpad0 5) <>  "09999" or
       (intExpr( 10000) lpad0 5) <>  "10000" or
       (intExpr( 10001) lpad0 5) <>  "10001" or
       (intExpr(-10001) lpad0 6) <> "-10001" or
       (intExpr(-10000) lpad0 6) <> "-10000" or
       (intExpr( -9999) lpad0 6) <> "-09999" or
       (intExpr( -2000) lpad0 6) <> "-02000" or
       (intExpr( -1001) lpad0 6) <> "-01001" or
       (intExpr( -1000) lpad0 6) <> "-01000" or
       (intExpr(  -999) lpad0 6) <> "-00999" or
       (intExpr(  -200) lpad0 6) <> "-00200" or
       (intExpr(  -101) lpad0 6) <> "-00101" or
       (intExpr(  -100) lpad0 6) <> "-00100" or
       (intExpr(   -99) lpad0 6) <> "-00099" or
       (intExpr(   -20) lpad0 6) <> "-00020" or
       (intExpr(   -11) lpad0 6) <> "-00011" or
       (intExpr(   -10) lpad0 6) <> "-00010" or
       (intExpr(    -9) lpad0 6) <> "-00009" or
       (intExpr(    -2) lpad0 6) <> "-00002" or
       (intExpr(    -1) lpad0 6) <> "-00001" or
       (intExpr(     0) lpad0 6) <> "000000" or
       (intExpr(     1) lpad0 6) <> "000001" or
       (intExpr(     2) lpad0 6) <> "000002" or
       (intExpr(     9) lpad0 6) <> "000009" or
       (intExpr(    10) lpad0 6) <> "000010" or
       (intExpr(    11) lpad0 6) <> "000011" or
       (intExpr(    20) lpad0 6) <> "000020" or
       (intExpr(    99) lpad0 6) <> "000099" or
       (intExpr(   100) lpad0 6) <> "000100" or
       (intExpr(   101) lpad0 6) <> "000101" or
       (intExpr(   200) lpad0 6) <> "000200" or
       (intExpr(   999) lpad0 6) <> "000999" or
       (intExpr(  1000) lpad0 6) <> "001000" or
       (intExpr(  1001) lpad0 6) <> "001001" or
       (intExpr(  2000) lpad0 6) <> "002000" or
       (intExpr(  9999) lpad0 6) <> "009999" or
       (intExpr( 10000) lpad0 6) <> "010000" or
       (intExpr( 10001) lpad0 6) <> "010001" then
      writeln(" ***** Integer lpad0 is not correct computed. (2)");
      okay := FALSE;
    end if;

    if okay then
      writeln("Integer lpad0 does work correct.");
    end if;
  end func;


const proc: check_bitLength is func
  local
    var boolean: okay is TRUE;
  begin
    if  bitLength(  INT32_MIN) <> 31 or
        bitLength(-2147483647) <> 31 or
        bitLength(-1073741825) <> 31 or
        bitLength(-1073741824) <> 30 or
        bitLength( -536870913) <> 30 or
        bitLength( -536870912) <> 29 or
        bitLength( -268435457) <> 29 or
        bitLength( -268435456) <> 28 or
        bitLength( -134217729) <> 28 or
        bitLength( -134217728) <> 27 or
        bitLength(  -67108865) <> 27 or
        bitLength(  -67108864) <> 26 or
        bitLength(  -33554433) <> 26 or
        bitLength(  -33554432) <> 25 or
        bitLength(  -16777217) <> 25 or
        bitLength(  -16777216) <> 24 or
        bitLength(   -8388609) <> 24 or
        bitLength(   -8388608) <> 23 or
        bitLength(   -4194305) <> 23 or
        bitLength(   -4194304) <> 22 or
        bitLength(   -2097153) <> 22 or
        bitLength(   -2097152) <> 21 or
        bitLength(   -1048577) <> 21 or
        bitLength(   -1048576) <> 20 or
        bitLength(    -524289) <> 20 or
        bitLength(    -524288) <> 19 or
        bitLength(    -262145) <> 19 or
        bitLength(    -262144) <> 18 or
        bitLength(    -131073) <> 18 or
        bitLength(    -131072) <> 17 or
        bitLength(     -65537) <> 17 or
        bitLength(     -65536) <> 16 or
        bitLength(     -32769) <> 16 or
        bitLength(     -32768) <> 15 or
        bitLength(     -16385) <> 15 or
        bitLength(     -16384) <> 14 or
        bitLength(      -8193) <> 14 or
        bitLength(      -8192) <> 13 or
        bitLength(      -4097) <> 13 or
        bitLength(      -4096) <> 12 or
        bitLength(      -2049) <> 12 or
        bitLength(      -2048) <> 11 or
        bitLength(      -1025) <> 11 or
        bitLength(      -1024) <> 10 or
        bitLength(       -513) <> 10 or
        bitLength(       -512) <>  9 or
        bitLength(       -257) <>  9 or
        bitLength(       -256) <>  8 or
        bitLength(       -129) <>  8 or
        bitLength(       -128) <>  7 or
        bitLength(        -65) <>  7 or
        bitLength(        -64) <>  6 or
        bitLength(        -33) <>  6 or
        bitLength(        -32) <>  5 or
        bitLength(        -17) <>  5 or
        bitLength(        -16) <>  4 or
        bitLength(         -9) <>  4 or
        bitLength(         -8) <>  3 or
        bitLength(         -5) <>  3 or
        bitLength(         -4) <>  2 or
        bitLength(         -3) <>  2 or
        bitLength(         -2) <>  1 or
        bitLength(         -1) <>  0 or
        bitLength(          0) <>  0 or
        bitLength(          1) <>  1 or
        bitLength(          2) <>  2 or
        bitLength(          3) <>  2 or
        bitLength(          4) <>  3 or
        bitLength(          7) <>  3 or
        bitLength(          8) <>  4 or
        bitLength(         15) <>  4 or
        bitLength(         16) <>  5 or
        bitLength(         31) <>  5 or
        bitLength(         32) <>  6 or
        bitLength(         63) <>  6 or
        bitLength(         64) <>  7 or
        bitLength(        127) <>  7 or
        bitLength(        128) <>  8 or
        bitLength(        255) <>  8 or
        bitLength(        256) <>  9 or
        bitLength(        511) <>  9 or
        bitLength(        512) <> 10 or
        bitLength(       1023) <> 10 or
        bitLength(       1024) <> 11 or
        bitLength(       2047) <> 11 or
        bitLength(       2048) <> 12 or
        bitLength(       4095) <> 12 or
        bitLength(       4096) <> 13 or
        bitLength(       8191) <> 13 or
        bitLength(       8192) <> 14 or
        bitLength(      16383) <> 14 or
        bitLength(      16384) <> 15 or
        bitLength(      32767) <> 15 or
        bitLength(      32768) <> 16 or
        bitLength(      65535) <> 16 or
        bitLength(      65536) <> 17 or
        bitLength(     131071) <> 17 or
        bitLength(     131072) <> 18 or
        bitLength(     262143) <> 18 or
        bitLength(     262144) <> 19 or
        bitLength(     524287) <> 19 or
        bitLength(     524288) <> 20 or
        bitLength(    1048575) <> 20 or
        bitLength(    1048576) <> 21 or
        bitLength(    2097151) <> 21 or
        bitLength(    2097152) <> 22 or
        bitLength(    4194303) <> 22 or
        bitLength(    4194304) <> 23 or
        bitLength(    8388607) <> 23 or
        bitLength(    8388608) <> 24 or
        bitLength(   16777215) <> 24 or
        bitLength(   16777216) <> 25 or
        bitLength(   33554431) <> 25 or
        bitLength(   33554432) <> 26 or
        bitLength(   67108863) <> 26 or
        bitLength(   67108864) <> 27 or
        bitLength(  134217727) <> 27 or
        bitLength(  134217728) <> 28 or
        bitLength(  268435455) <> 28 or
        bitLength(  268435456) <> 29 or
        bitLength(  536870911) <> 29 or
        bitLength(  536870912) <> 30 or
        bitLength( 1073741823) <> 30 or
        bitLength( 1073741824) <> 31 or
        bitLength( 2147483647) <> 31 then
      writeln(" ***** Integer bitLength is not correct computed.");
      okay := FALSE;
    end if;
    if okay then
      writeln("Integer bitLength does work correct.");
    end if;
  end func;


const proc: check_lowestSetBit is func
  local
    var boolean: okay is TRUE;
  begin
    if  lowestSetBit(-2) <>  1 or
        lowestSetBit(-1) <>  0 or
        lowestSetBit( 0) <> -1 or
        lowestSetBit( 1) <>  0 or
        lowestSetBit( 2) <>  1 or
        lowestSetBit(intExpr(-2)) <>  1 or
        lowestSetBit(intExpr(-1)) <>  0 or
        lowestSetBit(intExpr( 0)) <> -1 or
        lowestSetBit(intExpr( 1)) <>  0 or
        lowestSetBit(intExpr( 2)) <>  1 then
      writeln(" ***** The integer lowestSetBit function does not work correct.");
      okay := FALSE;
    end if;

    if  lowestSetBit(4611686018427387904) <> 62 or
        lowestSetBit(4611686018427387905) <>  0 or
        lowestSetBit(4611686018427387906) <>  1 or
        lowestSetBit(4611686018427387908) <>  2 or
        lowestSetBit(4611686018427387912) <>  3 or
        lowestSetBit(4611686018427387920) <>  4 or
        lowestSetBit(4611686018427387936) <>  5 or
        lowestSetBit(4611686018427387968) <>  6 or
        lowestSetBit(4611686018427388032) <>  7 or
        lowestSetBit(4611686018427388160) <>  8 or
        lowestSetBit(4611686018427388416) <>  9 or
        lowestSetBit(4611686018427388928) <> 10 or
        lowestSetBit(4611686018427389952) <> 11 or
        lowestSetBit(4611686018427392000) <> 12 or
        lowestSetBit(4611686018427396096) <> 13 or
        lowestSetBit(4611686018427404288) <> 14 or
        lowestSetBit(4611686018427420672) <> 15 or
        lowestSetBit(4611686018427453440) <> 16 or
        lowestSetBit(4611686018427518976) <> 17 or
        lowestSetBit(4611686018427650048) <> 18 or
        lowestSetBit(4611686018427912192) <> 19 or
        lowestSetBit(4611686018428436480) <> 20 or
        lowestSetBit(4611686018429485056) <> 21 or
        lowestSetBit(4611686018431582208) <> 22 or
        lowestSetBit(4611686018435776512) <> 23 or
        lowestSetBit(4611686018444165120) <> 24 or
        lowestSetBit(4611686018460942336) <> 25 or
        lowestSetBit(4611686018494496768) <> 26 or
        lowestSetBit(4611686018561605632) <> 27 or
        lowestSetBit(4611686018695823360) <> 28 or
        lowestSetBit(4611686018964258816) <> 29 or
        lowestSetBit(4611686019501129728) <> 30 or
        lowestSetBit(4611686020574871552) <> 31 or
        lowestSetBit(4611686022722355200) <> 32 or
        lowestSetBit(4611686027017322496) <> 33 or
        lowestSetBit(4611686035607257088) <> 34 or
        lowestSetBit(4611686052787126272) <> 35 or
        lowestSetBit(4611686087146864640) <> 36 or
        lowestSetBit(4611686155866341376) <> 37 or
        lowestSetBit(4611686293305294848) <> 38 or
        lowestSetBit(4611686568183201792) <> 39 or
        lowestSetBit(4611687117939015680) <> 40 or
        lowestSetBit(4611688217450643456) <> 41 or
        lowestSetBit(4611690416473899008) <> 42 or
        lowestSetBit(4611694814520410112) <> 43 or
        lowestSetBit(4611703610613432320) <> 44 or
        lowestSetBit(4611721202799476736) <> 45 or
        lowestSetBit(4611756387171565568) <> 46 or
        lowestSetBit(4611826755915743232) <> 47 or
        lowestSetBit(4611967493404098560) <> 48 or
        lowestSetBit(4612248968380809216) <> 49 or
        lowestSetBit(4612811918334230528) <> 50 or
        lowestSetBit(4613937818241073152) <> 51 or
        lowestSetBit(4616189618054758400) <> 52 or
        lowestSetBit(4620693217682128896) <> 53 or
        lowestSetBit(4629700416936869888) <> 54 or
        lowestSetBit(4647714815446351872) <> 55 or
        lowestSetBit(4683743612465315840) <> 56 or
        lowestSetBit(4755801206503243776) <> 57 or
        lowestSetBit(4899916394579099648) <> 58 or
        lowestSetBit(5188146770730811392) <> 59 or
        lowestSetBit(5764607523034234880) <> 60 or
        lowestSetBit(6917529027641081856) <> 61 then
      writeln(" ***** The integer lowestSetBit function does not work correct.");
      okay := FALSE;
    end if;

    if okay then
      writeln("Integer lowestSetBit does work correct.");
    end if;
  end func;


const proc: main is func

  begin
    writeln;
    check_exponent_integer_literal;
    check_based_integer_literal;
    check_compare;
    check_bytesBe;
    check_bytesLe;
    check_bytesBe2Int;
    check_bytesLe2Int;
    check_leb128;
    check_negation;
    check_add;
    check_add_assign;
    check_subtract;
    check_subtract_assign;
    check_succ;
    check_pred;
    check_incr;
    check_decr;
    check_mult;
    check_mult_assign;
    check_division;
    check_div;
    check_rem;
    check_mdiv;
    check_mod;
    check_odd;
    check_fact;
    check_binom;
    check_power;
    check_abs;
    check_rand;
    check_sqrt;
    check_log2;
    check_log10;
    check_lShift;
    check_rShift;
    check_str;
    check_sci;
    check_parse;
    check_lpad0;
    check_bitLength;
    check_lowestSetBit;
  end func;
