
(********************************************************************)
(*                                                                  *)
(*  chkint.sd7    Checks integer literals and operations            *)
(*  Copyright (C) 1991 - 1994, 2004, 2005, 2014  Thomas Mertes      *)
(*                                                                  *)
(*  This program is free software; you can redistribute it and/or   *)
(*  modify it under the terms of the GNU General Public License as  *)
(*  published by the Free Software Foundation; either version 2 of  *)
(*  the License, or (at your option) any later version.             *)
(*                                                                  *)
(*  This program is distributed in the hope that it will be useful, *)
(*  but WITHOUT ANY WARRANTY; without even the implied warranty of  *)
(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   *)
(*  GNU General Public License for more details.                    *)
(*                                                                  *)
(*  You should have received a copy of the GNU General Public       *)
(*  License along with this program; if not, write to the           *)
(*  Free Software Foundation, Inc., 51 Franklin Street,             *)
(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)
(*                                                                  *)
(********************************************************************)


$ include "seed7_05.s7i";
  include "stdio.s7i";
  include "bytedata.s7i";


const integer: INT32_MIN is pred(-2147483647);
const integer: INT32_MAX is 2147483647;
const integer: INT64_MIN is pred(-9223372036854775807);
const integer: INT64_MAX is 9223372036854775807;


const func string: striExpr (in string: stri) is
  return stri;


const func integer: intExpr (in integer: number) is
  return number;


const func boolean: raisesRangeError (ref func string: striExpr) is func
  result
    var boolean: raisesRangeError is FALSE;
  local
    var string: exprResult is "";
  begin
    block
      exprResult := striExpr;
    exception
      catch RANGE_ERROR:
        raisesRangeError := TRUE;
    end block;
  end func;


const func boolean: raisesRangeError (ref func integer: intExpr) is func
  result
    var boolean: raisesRangeError is FALSE;
  local
    var integer: exprResult is 0;
  begin
    block
      exprResult := intExpr;
    exception
      catch RANGE_ERROR:
        raisesRangeError := TRUE;
    end block;
  end func;


const func boolean: raisesNumericError (ref func integer: intExpr) is func
  result
    var boolean: raisesNumericError is FALSE;
  local
    var integer: exprResult is 0;
  begin
    block
      exprResult := intExpr;
    exception
      catch NUMERIC_ERROR:
        raisesNumericError := TRUE;
    end block;
  end func;


const proc: check_exponent_integer_literal is func
  local
    var boolean: okay is TRUE;
  begin
    okay := TRUE;
    if 0 <> 0E0 or 0E0 <> 0e0 or
        0 <> 0E1 or 0E1 <> 0e1 or
        0 <> 0E2 or 0E2 <> 0e2 or
        0 <> 0E3 or 0E3 <> 0e3 or
        0 <> 0E4 or 0E4 <> 0e4 or
        0 <> 0E5 or 0E5 <> 0e5 or
        0 <> 0E6 or 0E6 <> 0e6 or
        0 <> 0E7 or 0E7 <> 0e7 or
        0 <> 0E8 or 0E8 <> 0e8 or
        0 <> 0E9 or 0E9 <> 0e9 or
        0 <> 0E10 or 0E10 <> 0e10 or
        0 <> 0E11 or 0E11 <> 0e11 or
        0 <> 0E12 or 0E12 <> 0e12 or
        0 <> 0E13 or 0E13 <> 0e13 or
        0 <> 0E14 or 0E14 <> 0e14 or
        0 <> 0E15 or 0E15 <> 0e15 or
        0 <> 0E16 or 0E16 <> 0e16 or
        0 <> 0E17 or 0E17 <> 0e17 or
        0 <> 0E999999999999999 or 0E999999999999999 <> 0e999999999999999 or
        1 <>          1E0 or 1E0 <> 1e0 or
        10 <>         1E1 or 1E1 <> 1e1 or
        100 <>        1E2 or 1E2 <> 1e2 or
        1000 <>       1E3 or 1E3 <> 1e3 or
        10000 <>      1E4 or 1E4 <> 1e4 or
        100000 <>     1E5 or 1E5 <> 1e5 or
        1000000 <>    1E6 or 1E6 <> 1e6 or
        10000000 <>   1E7 or 1E7 <> 1e7 or
        100000000 <>  1E8 or 1E8 <> 1e8 or
        1000000000 <> 1E9 or 1E9 <> 1e9 or
        12 <>         12E0 or 12E0 <> 12e0 or
        120 <>        12E1 or 12E1 <> 12e1 or
        1200 <>       12E2 or 12E2 <> 12e2 or
        1200000 <>    12E5 or 12E5 <> 12e5 or
        1200000000 <> 12E8 or 12E8 <> 12e8 or
        123 <>        123E0 or 123E0 <> 123e0 or
        1230 <>       123E1 or 123E1 <> 123e1 or
        12300 <>      123E2 or 123E2 <> 123e2 or
        12300000 <>   123E5 or 123E5 <> 123e5 or
        1230000000 <> 123E7 or 123E7 <> 123e7 or
        12345 <>      12345E0 or 12345E0 <> 12345e0 or
        123450 <>     12345E1 or 12345E1 <> 12345e1 or
        1234500 <>    12345E2 or 12345E2 <> 12345e2 or
        123450000 <>  12345E4 or 12345E4 <> 12345e4 or
        1234500000 <> 12345E5 or 12345E5 <> 12345e5 then
      writeln("Integer literals with exponent do not work correct.");
      okay := FALSE;
    end if;

    if okay then
      writeln("Integer literals with exponent work correct.");
    else
      writeln(" ***** Integer literals with exponent do not work correct.");
      writeln;
    end if;
  end func;


const proc: check_based_integer_literal is func
  local
    var boolean: okay is TRUE;
  begin
    okay := TRUE;
    if     0 <>  2#0 or  2#0 <>  3#0 or
         3#0 <>  4#0 or  4#0 <>  5#0 or  5#0 <>  6#0 or  6#0 <>  7#0 or
         7#0 <>  8#0 or  8#0 <>  9#0 or  9#0 <> 10#0 or 10#0 <> 11#0 or
        11#0 <> 12#0 or 12#0 <> 13#0 or 13#0 <> 14#0 or 14#0 <> 15#0 or
        15#0 <> 16#0 or 16#0 <> 17#0 or 17#0 <> 18#0 or 18#0 <> 19#0 or
        19#0 <> 20#0 or 20#0 <> 21#0 or 21#0 <> 22#0 or 22#0 <> 23#0 or
        23#0 <> 24#0 or 24#0 <> 25#0 or 25#0 <> 26#0 or 26#0 <> 27#0 or
        27#0 <> 28#0 or 28#0 <> 29#0 or 29#0 <> 30#0 or 30#0 <> 31#0 or
        31#0 <> 32#0 or 32#0 <> 33#0 or 33#0 <> 34#0 or 34#0 <> 35#0 or
        35#0 <> 36#0 then
      writeln("Based integer literals do not work correct.");
      okay := FALSE;
    end if;
    if     1 <>  2#1 or  2#1 <>  3#1 or
         3#1 <>  4#1 or  4#1 <>  5#1 or  5#1 <>  6#1 or  6#1 <>  7#1 or
         7#1 <>  8#1 or  8#1 <>  9#1 or  9#1 <> 10#1 or 10#1 <> 11#1 or
        11#1 <> 12#1 or 12#1 <> 13#1 or 13#1 <> 14#1 or 14#1 <> 15#1 or
        15#1 <> 16#1 or 16#1 <> 17#1 or 17#1 <> 18#1 or 18#1 <> 19#1 or
        19#1 <> 20#1 or 20#1 <> 21#1 or 21#1 <> 22#1 or 22#1 <> 23#1 or
        23#1 <> 24#1 or 24#1 <> 25#1 or 25#1 <> 26#1 or 26#1 <> 27#1 or
        27#1 <> 28#1 or 28#1 <> 29#1 or 29#1 <> 30#1 or 30#1 <> 31#1 or
        31#1 <> 32#1 or 32#1 <> 33#1 or 33#1 <> 34#1 or 34#1 <> 35#1 or
        35#1 <> 36#1 then
      writeln("Based integer literals do not work correct.");
      okay := FALSE;
    end if;
    if     2 <> 2#10 or 2#10 <>  3#2 or
         3#2 <>  4#2 or  4#2 <>  5#2 or  5#2 <>  6#2 or  6#2 <>  7#2 or
         7#2 <>  8#2 or  8#2 <>  9#2 or  9#2 <> 10#2 or 10#2 <> 11#2 or
        11#2 <> 12#2 or 12#2 <> 13#2 or 13#2 <> 14#2 or 14#2 <> 15#2 or
        15#2 <> 16#2 or 16#2 <> 17#2 or 17#2 <> 18#2 or 18#2 <> 19#2 or
        19#2 <> 20#2 or 20#2 <> 21#2 or 21#2 <> 22#2 or 22#2 <> 23#2 or
        23#2 <> 24#2 or 24#2 <> 25#2 or 25#2 <> 26#2 or 26#2 <> 27#2 or
        27#2 <> 28#2 or 28#2 <> 29#2 or 29#2 <> 30#2 or 30#2 <> 31#2 or
        31#2 <> 32#2 or 32#2 <> 33#2 or 33#2 <> 34#2 or 34#2 <> 35#2 or
        35#2 <> 36#2 then
      writeln("Based integer literals do not work correct.");
      okay := FALSE;
    end if;
    if    16 <> 2#10000 or 2#10000 <> 3#121 or
        3#121 <> 4#100 or 4#100 <>  5#31 or  5#31 <>  6#24 or  6#24 <>  7#22 or
         7#22 <>  8#20 or  8#20 <>  9#17 or  9#17 <> 10#16 or 10#16 <> 11#15 or
        11#15 <> 12#14 or 12#14 <> 13#13 or 13#13 <> 14#12 or 14#12 <> 15#11 or
        15#11 <> 16#10 or 16#10 <> 17#G or 17#G <> 18#G or 18#G <> 19#G or
        19#G <> 20#G or 20#G <> 21#G or 21#G <> 22#G or 22#G <> 23#G or
        23#G <> 24#G or 24#G <> 25#G or 25#G <> 26#G or 26#G <> 27#G or
        27#G <> 28#G or 28#G <> 29#G or 29#G <> 30#G or 30#G <> 31#G or
        31#G <> 32#G or 32#G <> 33#G or 33#G <> 34#G or 34#G <> 35#G or
        35#G <> 36#G then
      writeln("Based integer literals do not work correct.");
      okay := FALSE;
    end if;
    if    32 <> 2#100000 or 2#100000 <> 3#1012 or
       3#1012 <> 4#200 or 4#200 <> 5#112 or 5#112 <>  6#52 or  6#52 <>  7#44 or
         7#44 <>  8#40 or  8#40 <>  9#35 or  9#35 <> 10#32 or 10#32 <> 11#2A or
        11#2A <> 12#28 or 12#28 <> 13#26 or 13#26 <> 14#24 or 14#24 <> 15#22 or
        15#22 <> 16#20 or 16#20 <> 17#1F or 17#1F <> 18#1E or 18#1E <> 19#1D or
        19#1D <> 20#1C or 20#1C <> 21#1B or 21#1B <> 22#1A or 22#1A <> 23#19 or
        23#19 <> 24#18 or 24#18 <> 25#17 or 25#17 <> 26#16 or 26#16 <> 27#15 or
        27#15 <> 28#14 or 28#14 <> 29#13 or 29#13 <> 30#12 or 30#12 <> 31#11 or
        31#11 <> 32#10 or 32#10 <> 33#W or 33#W <> 34#W or 34#W <> 35#W or
        35#W <> 36#W then
      writeln("Based integer literals do not work correct.");
      okay := FALSE;
    end if;
    if  1000000 <>  2#11110100001001000000 or
        1000000 <>  3#1212210202001 or
        1000000 <>  4#3310021000 or
        1000000 <>  5#224000000 or
        1000000 <>  6#33233344 or
        1000000 <>  7#11333311 or
        1000000 <>  8#3641100 or
        1000000 <>  9#1783661 or
        1000000 <> 10#1000000 or
        1000000 <> 11#623351 or
        1000000 <> 12#402854 or
        1000000 <> 13#290221 or
        1000000 <> 14#1C0608 or
        1000000 <> 15#14B46A or
        1000000 <> 16#F4240 or
        1000000 <> 17#BG939 or
        1000000 <> 18#9987A or
        1000000 <> 19#7CF1B or
        1000000 <> 20#65000 or
        1000000 <> 21#52KC1 or
        1000000 <> 22#45K2C or
        1000000 <> 23#3D486 or
        1000000 <> 24#3082G or
        1000000 <> 25#2E000 or
        1000000 <> 26#24N7E or
        1000000 <> 27#1NLK1 or
        1000000 <> 28#1HFE8 or
        1000000 <> 29#1C01M or
        1000000 <> 30#1713A or
        1000000 <> 31#12HI2 or
        1000000 <> 32#UGI0 or
        1000000 <> 33#RR91 or
        1000000 <> 34#PF1Q or
        1000000 <> 35#NBBF or
        1000000 <> 36#LFLS then
      writeln("Based integer literals do not work correct.");
      okay := FALSE;
    end if;

    if okay then
      writeln("Based integer literals work correct.");
    else
      writeln(" ***** Based integer literals do not work correct.");
      writeln;
    end if;
  end func;


const proc: check_bytesBe is func
  local
    var boolean: okay is TRUE;
  begin
    if  bytes(           INT64_MIN, SIGNED, BE) <> "\128;\000;\000;\000;\000;\000;\000;\000;" or
        bytes(-9223372036854775807, SIGNED, BE) <> "\128;\000;\000;\000;\000;\000;\000;\001;" or
        bytes(  -72057594037927937, SIGNED, BE) <> "\254;\255;\255;\255;\255;\255;\255;\255;" or
        bytes(  -72057594037927936, SIGNED, BE) <> "\255;\000;\000;\000;\000;\000;\000;\000;" or
        bytes(  -36028797018963969, SIGNED, BE) <> "\255;\127;\255;\255;\255;\255;\255;\255;" or
        bytes(  -36028797018963968, SIGNED, BE) <>      "\128;\000;\000;\000;\000;\000;\000;" or
        bytes(    -281474976710657, SIGNED, BE) <>      "\254;\255;\255;\255;\255;\255;\255;" or
        bytes(    -281474976710656, SIGNED, BE) <>      "\255;\000;\000;\000;\000;\000;\000;" or
        bytes(    -140737488355329, SIGNED, BE) <>      "\255;\127;\255;\255;\255;\255;\255;" or
        bytes(    -140737488355328, SIGNED, BE) <>           "\128;\000;\000;\000;\000;\000;" or
        bytes(      -1099511627777, SIGNED, BE) <>           "\254;\255;\255;\255;\255;\255;" or
        bytes(      -1099511627776, SIGNED, BE) <>           "\255;\000;\000;\000;\000;\000;" or
        bytes(       -549755813889, SIGNED, BE) <>           "\255;\127;\255;\255;\255;\255;" or
        bytes(       -549755813888, SIGNED, BE) <>                "\128;\000;\000;\000;\000;" or
        bytes(         -4294967297, SIGNED, BE) <>                "\254;\255;\255;\255;\255;" or
        bytes(         -4294967296, SIGNED, BE) <>                "\255;\000;\000;\000;\000;" or
        bytes(         -2147483649, SIGNED, BE) <>                "\255;\127;\255;\255;\255;" or
        bytes(         -2147483648, SIGNED, BE) <>                     "\128;\000;\000;\000;" or
        bytes(           -16777217, SIGNED, BE) <>                     "\254;\255;\255;\255;" or
        bytes(           -16777216, SIGNED, BE) <>                     "\255;\000;\000;\000;" or
        bytes(            -8388609, SIGNED, BE) <>                     "\255;\127;\255;\255;" or
        bytes(            -8388608, SIGNED, BE) <>                          "\128;\000;\000;" or
        bytes(              -65537, SIGNED, BE) <>                          "\254;\255;\255;" or
        bytes(              -65536, SIGNED, BE) <>                          "\255;\000;\000;" or
        bytes(              -65281, SIGNED, BE) <>                          "\255;\000;\255;" or
        bytes(              -65280, SIGNED, BE) <>                          "\255;\001;\000;" or
        bytes(              -65025, SIGNED, BE) <>                          "\255;\001;\255;" or
        bytes(              -65024, SIGNED, BE) <>                          "\255;\002;\000;" or
        bytes(              -32770, SIGNED, BE) <>                          "\255;\127;\254;" or
        bytes(              -32769, SIGNED, BE) <>                          "\255;\127;\255;" or
        bytes(              -32768, SIGNED, BE) <>                               "\128;\000;" or
        bytes(              -32767, SIGNED, BE) <>                               "\128;\001;" or
        bytes(              -32514, SIGNED, BE) <>                               "\128;\254;" or
        bytes(              -32513, SIGNED, BE) <>                               "\128;\255;" or
        bytes(              -32512, SIGNED, BE) <>                               "\129;\000;" or
        bytes(              -32511, SIGNED, BE) <>                               "\129;\001;" or
        bytes(              -32258, SIGNED, BE) <>                               "\129;\254;" or
        bytes(              -32257, SIGNED, BE) <>                               "\129;\255;" or
        bytes(              -32256, SIGNED, BE) <>                               "\130;\000;" or
        bytes(              -32255, SIGNED, BE) <>                               "\130;\001;" or
        bytes(                -514, SIGNED, BE) <>                               "\253;\254;" or
        bytes(                -513, SIGNED, BE) <>                               "\253;\255;" or
        bytes(                -512, SIGNED, BE) <>                               "\254;\000;" or
        bytes(                -511, SIGNED, BE) <>                               "\254;\001;" or
        bytes(                -258, SIGNED, BE) <>                               "\254;\254;" or
        bytes(                -257, SIGNED, BE) <>                               "\254;\255;" or
        bytes(                -256, SIGNED, BE) <>                               "\255;\000;" or
        bytes(                -255, SIGNED, BE) <>                               "\255;\001;" or
        bytes(                -130, SIGNED, BE) <>                               "\255;\126;" or
        bytes(                -129, SIGNED, BE) <>                               "\255;\127;" or
        bytes(                -128, SIGNED, BE) <>                                    "\128;" or
        bytes(                -127, SIGNED, BE) <>                                    "\129;" or
        bytes(                  -2, SIGNED, BE) <>                                    "\254;" or
        bytes(                  -1, SIGNED, BE) <>                                    "\255;" or
        bytes(                   0, SIGNED, BE) <>                                    "\000;" or
        bytes(                   1, SIGNED, BE) <>                                    "\001;" or
        bytes(                   2, SIGNED, BE) <>                                    "\002;" or
        bytes(                 126, SIGNED, BE) <>                                    "\126;" or
        bytes(                 127, SIGNED, BE) <>                                    "\127;" or
        bytes(                 128, SIGNED, BE) <>                               "\000;\128;" or
        bytes(                 129, SIGNED, BE) <>                               "\000;\129;" or
        bytes(                 254, SIGNED, BE) <>                               "\000;\254;" or
        bytes(                 255, SIGNED, BE) <>                               "\000;\255;" or
        bytes(                 256, SIGNED, BE) <>                               "\001;\000;" or
        bytes(                 257, SIGNED, BE) <>                               "\001;\001;" or
        bytes(                 510, SIGNED, BE) <>                               "\001;\254;" or
        bytes(                 511, SIGNED, BE) <>                               "\001;\255;" or
        bytes(                 512, SIGNED, BE) <>                               "\002;\000;" or
        bytes(                 513, SIGNED, BE) <>                               "\002;\001;" or
        bytes(               32254, SIGNED, BE) <>                               "\125;\254;" or
        bytes(               32255, SIGNED, BE) <>                               "\125;\255;" or
        bytes(               32256, SIGNED, BE) <>                               "\126;\000;" or
        bytes(               32257, SIGNED, BE) <>                               "\126;\001;" or
        bytes(               32510, SIGNED, BE) <>                               "\126;\254;" or
        bytes(               32511, SIGNED, BE) <>                               "\126;\255;" or
        bytes(               32512, SIGNED, BE) <>                               "\127;\000;" or
        bytes(               32513, SIGNED, BE) <>                               "\127;\001;" or
        bytes(               32766, SIGNED, BE) <>                               "\127;\254;" or
        bytes(               32767, SIGNED, BE) <>                               "\127;\255;" or
        bytes(               32768, SIGNED, BE) <>                          "\000;\128;\000;" or
        bytes(               32769, SIGNED, BE) <>                          "\000;\128;\001;" or
        bytes(               65023, SIGNED, BE) <>                          "\000;\253;\255;" or
        bytes(               65024, SIGNED, BE) <>                          "\000;\254;\000;" or
        bytes(               65279, SIGNED, BE) <>                          "\000;\254;\255;" or
        bytes(               65280, SIGNED, BE) <>                          "\000;\255;\000;" or
        bytes(               65535, SIGNED, BE) <>                          "\000;\255;\255;" or
        bytes(               65536, SIGNED, BE) <>                          "\001;\000;\000;" or
        bytes(             8388607, SIGNED, BE) <>                          "\127;\255;\255;" or
        bytes(             8388608, SIGNED, BE) <>                     "\000;\128;\000;\000;" or
        bytes(            16777215, SIGNED, BE) <>                     "\000;\255;\255;\255;" or
        bytes(            16777216, SIGNED, BE) <>                     "\001;\000;\000;\000;" or
        bytes(          2147483647, SIGNED, BE) <>                     "\127;\255;\255;\255;" or
        bytes(          2147483648, SIGNED, BE) <>                "\000;\128;\000;\000;\000;" or
        bytes(          4294967295, SIGNED, BE) <>                "\000;\255;\255;\255;\255;" or
        bytes(          4294967296, SIGNED, BE) <>                "\001;\000;\000;\000;\000;" or
        bytes(        549755813887, SIGNED, BE) <>                "\127;\255;\255;\255;\255;" or
        bytes(        549755813888, SIGNED, BE) <>           "\000;\128;\000;\000;\000;\000;" or
        bytes(       1099511627775, SIGNED, BE) <>           "\000;\255;\255;\255;\255;\255;" or
        bytes(       1099511627776, SIGNED, BE) <>           "\001;\000;\000;\000;\000;\000;" or
        bytes(     140737488355327, SIGNED, BE) <>           "\127;\255;\255;\255;\255;\255;" or
        bytes(     140737488355328, SIGNED, BE) <>      "\000;\128;\000;\000;\000;\000;\000;" or
        bytes(     281474976710655, SIGNED, BE) <>      "\000;\255;\255;\255;\255;\255;\255;" or
        bytes(     281474976710656, SIGNED, BE) <>      "\001;\000;\000;\000;\000;\000;\000;" or
        bytes(   36028797018963967, SIGNED, BE) <>      "\127;\255;\255;\255;\255;\255;\255;" or
        bytes(   36028797018963968, SIGNED, BE) <> "\000;\128;\000;\000;\000;\000;\000;\000;" or
        bytes(   72057594037927935, SIGNED, BE) <> "\000;\255;\255;\255;\255;\255;\255;\255;" or
        bytes(   72057594037927936, SIGNED, BE) <> "\001;\000;\000;\000;\000;\000;\000;\000;" or
        bytes( 9223372036854775807, SIGNED, BE) <> "\127;\255;\255;\255;\255;\255;\255;\255;" then
      writeln("Conversion of integer to big endian byte string does not work correct.");
      okay := FALSE;
    end if;

    if  bytes(               258, SIGNED, BE) <>                   "\1;\2;" or
        bytes(             66051, SIGNED, BE) <>                "\1;\2;\3;" or
        bytes(          16909060, SIGNED, BE) <>             "\1;\2;\3;\4;" or
        bytes(        4328719365, SIGNED, BE) <>          "\1;\2;\3;\4;\5;" or
        bytes(     1108152157446, SIGNED, BE) <>       "\1;\2;\3;\4;\5;\6;" or
        bytes(   283686952306183, SIGNED, BE) <>    "\1;\2;\3;\4;\5;\6;\7;" or
        bytes( 72623859790382856, SIGNED, BE) <> "\1;\2;\3;\4;\5;\6;\7;\8;" or
        bytes(               513, SIGNED, BE) <>                   "\2;\1;" or
        bytes(            197121, SIGNED, BE) <>                "\3;\2;\1;" or
        bytes(          67305985, SIGNED, BE) <>             "\4;\3;\2;\1;" or
        bytes(       21542142465, SIGNED, BE) <>          "\5;\4;\3;\2;\1;" or
        bytes(     6618611909121, SIGNED, BE) <>       "\6;\5;\4;\3;\2;\1;" or
        bytes(  1976943448883713, SIGNED, BE) <>    "\7;\6;\5;\4;\3;\2;\1;" or
        bytes(578437695752307201, SIGNED, BE) <> "\8;\7;\6;\5;\4;\3;\2;\1;" then
      writeln("Conversion of integer to big endian byte string does not work correct.");
      okay := FALSE;
    end if;

    if  bytes(              -255, SIGNED, BE) <>                   "\255;\1;" or
        bytes(            -65278, SIGNED, BE) <>                "\255;\1;\2;" or
        bytes(         -16711165, SIGNED, BE) <>             "\255;\1;\2;\3;" or
        bytes(       -4278058236, SIGNED, BE) <>          "\255;\1;\2;\3;\4;" or
        bytes(    -1095182908411, SIGNED, BE) <>       "\255;\1;\2;\3;\4;\5;" or
        bytes(  -280366824553210, SIGNED, BE) <>    "\255;\1;\2;\3;\4;\5;\6;" or
        bytes(-71773907085621753, SIGNED, BE) <> "\255;\1;\2;\3;\4;\5;\6;\7;" or
        bytes(              -255, SIGNED, BE) <>                   "\255;\1;" or
        bytes(            -65023, SIGNED, BE) <>                "\255;\2;\1;" or
        bytes(         -16580095, SIGNED, BE) <>             "\255;\3;\2;\1;" or
        bytes(       -4227661311, SIGNED, BE) <>          "\255;\4;\3;\2;\1;" or
        bytes(    -1077969485311, SIGNED, BE) <>       "\255;\5;\4;\3;\2;\1;" or
        bytes(  -274856364801535, SIGNED, BE) <>    "\255;\6;\5;\4;\3;\2;\1;" or
        bytes(-70080650589044223, SIGNED, BE) <> "\255;\7;\6;\5;\4;\3;\2;\1;" then
      writeln("Conversion of integer to big endian byte string does not work correct.");
      okay := FALSE;
    end if;

    if  bytes(                  0, UNSIGNED, BE) <>                                    "\000;" or
        bytes(                  1, UNSIGNED, BE) <>                                    "\001;" or
        bytes(                  2, UNSIGNED, BE) <>                                    "\002;" or
        bytes(                126, UNSIGNED, BE) <>                                    "\126;" or
        bytes(                127, UNSIGNED, BE) <>                                    "\127;" or
        bytes(                128, UNSIGNED, BE) <>                                    "\128;" or
        bytes(                129, UNSIGNED, BE) <>                                    "\129;" or
        bytes(                254, UNSIGNED, BE) <>                                    "\254;" or
        bytes(                255, UNSIGNED, BE) <>                                    "\255;" or
        bytes(                256, UNSIGNED, BE) <>                               "\001;\000;" or
        bytes(                257, UNSIGNED, BE) <>                               "\001;\001;" or
        bytes(                510, UNSIGNED, BE) <>                               "\001;\254;" or
        bytes(                511, UNSIGNED, BE) <>                               "\001;\255;" or
        bytes(                512, UNSIGNED, BE) <>                               "\002;\000;" or
        bytes(                513, UNSIGNED, BE) <>                               "\002;\001;" or
        bytes(              32254, UNSIGNED, BE) <>                               "\125;\254;" or
        bytes(              32255, UNSIGNED, BE) <>                               "\125;\255;" or
        bytes(              32256, UNSIGNED, BE) <>                               "\126;\000;" or
        bytes(              32257, UNSIGNED, BE) <>                               "\126;\001;" or
        bytes(              32510, UNSIGNED, BE) <>                               "\126;\254;" or
        bytes(              32511, UNSIGNED, BE) <>                               "\126;\255;" or
        bytes(              32512, UNSIGNED, BE) <>                               "\127;\000;" or
        bytes(              32513, UNSIGNED, BE) <>                               "\127;\001;" or
        bytes(              32766, UNSIGNED, BE) <>                               "\127;\254;" or
        bytes(              32767, UNSIGNED, BE) <>                               "\127;\255;" or
        bytes(              32768, UNSIGNED, BE) <>                               "\128;\000;" or
        bytes(              32769, UNSIGNED, BE) <>                               "\128;\001;" or
        bytes(              65023, UNSIGNED, BE) <>                               "\253;\255;" or
        bytes(              65024, UNSIGNED, BE) <>                               "\254;\000;" or
        bytes(              65279, UNSIGNED, BE) <>                               "\254;\255;" or
        bytes(              65280, UNSIGNED, BE) <>                               "\255;\000;" or
        bytes(              65535, UNSIGNED, BE) <>                               "\255;\255;" or
        bytes(              65536, UNSIGNED, BE) <>                          "\001;\000;\000;" or
        bytes(            8388607, UNSIGNED, BE) <>                          "\127;\255;\255;" or
        bytes(            8388608, UNSIGNED, BE) <>                          "\128;\000;\000;" or
        bytes(           16777215, UNSIGNED, BE) <>                          "\255;\255;\255;" or
        bytes(           16777216, UNSIGNED, BE) <>                     "\001;\000;\000;\000;" or
        bytes(         2147483647, UNSIGNED, BE) <>                     "\127;\255;\255;\255;" or
        bytes(         2147483648, UNSIGNED, BE) <>                     "\128;\000;\000;\000;" or
        bytes(         4294967295, UNSIGNED, BE) <>                     "\255;\255;\255;\255;" or
        bytes(         4294967296, UNSIGNED, BE) <>                "\001;\000;\000;\000;\000;" or
        bytes(       549755813887, UNSIGNED, BE) <>                "\127;\255;\255;\255;\255;" or
        bytes(       549755813888, UNSIGNED, BE) <>                "\128;\000;\000;\000;\000;" or
        bytes(      1099511627775, UNSIGNED, BE) <>                "\255;\255;\255;\255;\255;" or
        bytes(      1099511627776, UNSIGNED, BE) <>           "\001;\000;\000;\000;\000;\000;" or
        bytes(    140737488355327, UNSIGNED, BE) <>           "\127;\255;\255;\255;\255;\255;" or
        bytes(    140737488355328, UNSIGNED, BE) <>           "\128;\000;\000;\000;\000;\000;" or
        bytes(    281474976710655, UNSIGNED, BE) <>           "\255;\255;\255;\255;\255;\255;" or
        bytes(    281474976710656, UNSIGNED, BE) <>      "\001;\000;\000;\000;\000;\000;\000;" or
        bytes(  36028797018963967, UNSIGNED, BE) <>      "\127;\255;\255;\255;\255;\255;\255;" or
        bytes(  36028797018963968, UNSIGNED, BE) <>      "\128;\000;\000;\000;\000;\000;\000;" or
        bytes(  72057594037927935, UNSIGNED, BE) <>      "\255;\255;\255;\255;\255;\255;\255;" or
        bytes(  72057594037927936, UNSIGNED, BE) <> "\001;\000;\000;\000;\000;\000;\000;\000;" or
        bytes(9223372036854775807, UNSIGNED, BE) <> "\127;\255;\255;\255;\255;\255;\255;\255;" then
      writeln("Conversion of integer to unsigned big endian byte string does not work correct.");
      okay := FALSE;
    end if;

    if  bytes(               258, UNSIGNED, BE) <>                   "\1;\2;" or
        bytes(             66051, UNSIGNED, BE) <>                "\1;\2;\3;" or
        bytes(          16909060, UNSIGNED, BE) <>             "\1;\2;\3;\4;" or
        bytes(        4328719365, UNSIGNED, BE) <>          "\1;\2;\3;\4;\5;" or
        bytes(     1108152157446, UNSIGNED, BE) <>       "\1;\2;\3;\4;\5;\6;" or
        bytes(   283686952306183, UNSIGNED, BE) <>    "\1;\2;\3;\4;\5;\6;\7;" or
        bytes( 72623859790382856, UNSIGNED, BE) <> "\1;\2;\3;\4;\5;\6;\7;\8;" or
        bytes(               513, UNSIGNED, BE) <>                   "\2;\1;" or
        bytes(            197121, UNSIGNED, BE) <>                "\3;\2;\1;" or
        bytes(          67305985, UNSIGNED, BE) <>             "\4;\3;\2;\1;" or
        bytes(       21542142465, UNSIGNED, BE) <>          "\5;\4;\3;\2;\1;" or
        bytes(     6618611909121, UNSIGNED, BE) <>       "\6;\5;\4;\3;\2;\1;" or
        bytes(  1976943448883713, UNSIGNED, BE) <>    "\7;\6;\5;\4;\3;\2;\1;" or
        bytes(578437695752307201, UNSIGNED, BE) <> "\8;\7;\6;\5;\4;\3;\2;\1;" then
      writeln("Conversion of integer to unsigned big endian byte string does not work correct.");
      okay := FALSE;
    end if;

    if  bytes(            65281, UNSIGNED, BE) <>                "\255;\1;" or
        bytes(         16711938, UNSIGNED, BE) <>             "\255;\1;\2;" or
        bytes(       4278256131, UNSIGNED, BE) <>          "\255;\1;\2;\3;" or
        bytes(    1095233569540, UNSIGNED, BE) <>       "\255;\1;\2;\3;\4;" or
        bytes(  280379793802245, UNSIGNED, BE) <>    "\255;\1;\2;\3;\4;\5;" or
        bytes(71777227213374726, UNSIGNED, BE) <> "\255;\1;\2;\3;\4;\5;\6;" or
        bytes(            65281, UNSIGNED, BE) <>                "\255;\1;" or
        bytes(         16712193, UNSIGNED, BE) <>             "\255;\2;\1;" or
        bytes(       4278387201, UNSIGNED, BE) <>          "\255;\3;\2;\1;" or
        bytes(    1095283966465, UNSIGNED, BE) <>       "\255;\4;\3;\2;\1;" or
        bytes(  280397007225345, UNSIGNED, BE) <>    "\255;\5;\4;\3;\2;\1;" or
        bytes(71782737673126401, UNSIGNED, BE) <> "\255;\6;\5;\4;\3;\2;\1;" then
      writeln("Conversion of integer to unsigned big endian byte string does not work correct.");
      okay := FALSE;
    end if;

    if  bytes(1413829460,          SIGNED,   BE) <> "TEST"     or
        bytes(1330331993,          SIGNED,   BE) <> "OKAY"     or
        bytes(-338762715347,       SIGNED,   BE) <> "± +/-"    or
        bytes(760748912429,        SIGNED,   BE) <> "\0;± +/-" or
        bytes(760748912429,        UNSIGNED, BE) <> "± +/-"    or
        bytes(5292891159410142067, UNSIGNED, BE) <> "It works" then
      writeln("Conversion of bigInteger to byte string does not work correct.");
      okay := FALSE;
    end if;

    if  not raisesRangeError(bytes(-1, UNSIGNED, BE)) then
      writeln("Conversion of negative integer to unsigned big endian byte string does not raise RANGE_ERROR.");
      okay := FALSE;
    end if;

    if okay then
      writeln("Conversion of integer to big endian byte string works correct.");
    else
      writeln(" ***** Conversion of integer to big endian byte string does not work correct.");
      writeln;
    end if;
  end func;


const proc: check_bytesLe is func
  local
    var boolean: okay is TRUE;
  begin
    if  bytes(           INT64_MIN, SIGNED, LE) <> "\000;\000;\000;\000;\000;\000;\000;\128;" or
        bytes(-9223372036854775807, SIGNED, LE) <> "\001;\000;\000;\000;\000;\000;\000;\128;" or
        bytes(  -72057594037927937, SIGNED, LE) <> "\255;\255;\255;\255;\255;\255;\255;\254;" or
        bytes(  -72057594037927936, SIGNED, LE) <> "\000;\000;\000;\000;\000;\000;\000;\255;" or
        bytes(  -36028797018963969, SIGNED, LE) <> "\255;\255;\255;\255;\255;\255;\127;\255;" or
        bytes(  -36028797018963968, SIGNED, LE) <> "\000;\000;\000;\000;\000;\000;\128;"      or
        bytes(    -281474976710657, SIGNED, LE) <> "\255;\255;\255;\255;\255;\255;\254;"      or
        bytes(    -281474976710656, SIGNED, LE) <> "\000;\000;\000;\000;\000;\000;\255;"      or
        bytes(    -140737488355329, SIGNED, LE) <> "\255;\255;\255;\255;\255;\127;\255;"      or
        bytes(    -140737488355328, SIGNED, LE) <> "\000;\000;\000;\000;\000;\128;"           or
        bytes(      -1099511627777, SIGNED, LE) <> "\255;\255;\255;\255;\255;\254;"           or
        bytes(      -1099511627776, SIGNED, LE) <> "\000;\000;\000;\000;\000;\255;"           or
        bytes(       -549755813889, SIGNED, LE) <> "\255;\255;\255;\255;\127;\255;"           or
        bytes(       -549755813888, SIGNED, LE) <> "\000;\000;\000;\000;\128;"                or
        bytes(         -4294967297, SIGNED, LE) <> "\255;\255;\255;\255;\254;"                or
        bytes(         -4294967296, SIGNED, LE) <> "\000;\000;\000;\000;\255;"                or
        bytes(         -2147483649, SIGNED, LE) <> "\255;\255;\255;\127;\255;"                or
        bytes(         -2147483648, SIGNED, LE) <> "\000;\000;\000;\128;"                     or
        bytes(           -16777217, SIGNED, LE) <> "\255;\255;\255;\254;"                     or
        bytes(           -16777216, SIGNED, LE) <> "\000;\000;\000;\255;"                     or
        bytes(            -8388609, SIGNED, LE) <> "\255;\255;\127;\255;"                     or
        bytes(            -8388608, SIGNED, LE) <> "\000;\000;\128;"                          or
        bytes(              -65537, SIGNED, LE) <> "\255;\255;\254;"                          or
        bytes(              -65536, SIGNED, LE) <> "\000;\000;\255;"                          or
        bytes(              -65281, SIGNED, LE) <> "\255;\000;\255;"                          or
        bytes(              -65280, SIGNED, LE) <> "\000;\001;\255;"                          or
        bytes(              -65025, SIGNED, LE) <> "\255;\001;\255;"                          or
        bytes(              -65024, SIGNED, LE) <> "\000;\002;\255;"                          or
        bytes(              -32770, SIGNED, LE) <> "\254;\127;\255;"                          or
        bytes(              -32769, SIGNED, LE) <> "\255;\127;\255;"                          or
        bytes(              -32768, SIGNED, LE) <> "\000;\128;"                               or
        bytes(              -32767, SIGNED, LE) <> "\001;\128;"                               or
        bytes(              -32514, SIGNED, LE) <> "\254;\128;"                               or
        bytes(              -32513, SIGNED, LE) <> "\255;\128;"                               or
        bytes(              -32512, SIGNED, LE) <> "\000;\129;"                               or
        bytes(              -32511, SIGNED, LE) <> "\001;\129;"                               or
        bytes(              -32258, SIGNED, LE) <> "\254;\129;"                               or
        bytes(              -32257, SIGNED, LE) <> "\255;\129;"                               or
        bytes(              -32256, SIGNED, LE) <> "\000;\130;"                               or
        bytes(              -32255, SIGNED, LE) <> "\001;\130;"                               or
        bytes(                -514, SIGNED, LE) <> "\254;\253;"                               or
        bytes(                -513, SIGNED, LE) <> "\255;\253;"                               or
        bytes(                -512, SIGNED, LE) <> "\000;\254;"                               or
        bytes(                -511, SIGNED, LE) <> "\001;\254;"                               or
        bytes(                -258, SIGNED, LE) <> "\254;\254;"                               or
        bytes(                -257, SIGNED, LE) <> "\255;\254;"                               or
        bytes(                -256, SIGNED, LE) <> "\000;\255;"                               or
        bytes(                -255, SIGNED, LE) <> "\001;\255;"                               or
        bytes(                -130, SIGNED, LE) <> "\126;\255;"                               or
        bytes(                -129, SIGNED, LE) <> "\127;\255;"                               or
        bytes(                -128, SIGNED, LE) <> "\128;"                                    or
        bytes(                -127, SIGNED, LE) <> "\129;"                                    or
        bytes(                  -2, SIGNED, LE) <> "\254;"                                    or
        bytes(                  -1, SIGNED, LE) <> "\255;"                                    or
        bytes(                   0, SIGNED, LE) <> "\000;"                                    or
        bytes(                   1, SIGNED, LE) <> "\001;"                                    or
        bytes(                   2, SIGNED, LE) <> "\002;"                                    or
        bytes(                 126, SIGNED, LE) <> "\126;"                                    or
        bytes(                 127, SIGNED, LE) <> "\127;"                                    or
        bytes(                 128, SIGNED, LE) <> "\128;\000;"                               or
        bytes(                 129, SIGNED, LE) <> "\129;\000;"                               or
        bytes(                 254, SIGNED, LE) <> "\254;\000;"                               or
        bytes(                 255, SIGNED, LE) <> "\255;\000;"                               or
        bytes(                 256, SIGNED, LE) <> "\000;\001;"                               or
        bytes(                 257, SIGNED, LE) <> "\001;\001;"                               or
        bytes(                 510, SIGNED, LE) <> "\254;\001;"                               or
        bytes(                 511, SIGNED, LE) <> "\255;\001;"                               or
        bytes(                 512, SIGNED, LE) <> "\000;\002;"                               or
        bytes(                 513, SIGNED, LE) <> "\001;\002;"                               or
        bytes(               32254, SIGNED, LE) <> "\254;\125;"                               or
        bytes(               32255, SIGNED, LE) <> "\255;\125;"                               or
        bytes(               32256, SIGNED, LE) <> "\000;\126;"                               or
        bytes(               32257, SIGNED, LE) <> "\001;\126;"                               or
        bytes(               32510, SIGNED, LE) <> "\254;\126;"                               or
        bytes(               32511, SIGNED, LE) <> "\255;\126;"                               or
        bytes(               32512, SIGNED, LE) <> "\000;\127;"                               or
        bytes(               32513, SIGNED, LE) <> "\001;\127;"                               or
        bytes(               32766, SIGNED, LE) <> "\254;\127;"                               or
        bytes(               32767, SIGNED, LE) <> "\255;\127;"                               or
        bytes(               32768, SIGNED, LE) <> "\000;\128;\000;"                          or
        bytes(               32769, SIGNED, LE) <> "\001;\128;\000;"                          or
        bytes(               65023, SIGNED, LE) <> "\255;\253;\000;"                          or
        bytes(               65024, SIGNED, LE) <> "\000;\254;\000;"                          or
        bytes(               65279, SIGNED, LE) <> "\255;\254;\000;"                          or
        bytes(               65280, SIGNED, LE) <> "\000;\255;\000;"                          or
        bytes(               65535, SIGNED, LE) <> "\255;\255;\000;"                          or
        bytes(               65536, SIGNED, LE) <> "\000;\000;\001;"                          or
        bytes(             8388607, SIGNED, LE) <> "\255;\255;\127;"                          or
        bytes(             8388608, SIGNED, LE) <> "\000;\000;\128;\000;"                     or
        bytes(            16777215, SIGNED, LE) <> "\255;\255;\255;\000;"                     or
        bytes(            16777216, SIGNED, LE) <> "\000;\000;\000;\001;"                     or
        bytes(          2147483647, SIGNED, LE) <> "\255;\255;\255;\127;"                     or
        bytes(          2147483648, SIGNED, LE) <> "\000;\000;\000;\128;\000;"                or
        bytes(          4294967295, SIGNED, LE) <> "\255;\255;\255;\255;\000;"                or
        bytes(          4294967296, SIGNED, LE) <> "\000;\000;\000;\000;\001;"                or
        bytes(        549755813887, SIGNED, LE) <> "\255;\255;\255;\255;\127;"                or
        bytes(        549755813888, SIGNED, LE) <> "\000;\000;\000;\000;\128;\000;"           or
        bytes(       1099511627775, SIGNED, LE) <> "\255;\255;\255;\255;\255;\000;"           or
        bytes(       1099511627776, SIGNED, LE) <> "\000;\000;\000;\000;\000;\001;"           or
        bytes(     140737488355327, SIGNED, LE) <> "\255;\255;\255;\255;\255;\127;"           or
        bytes(     140737488355328, SIGNED, LE) <> "\000;\000;\000;\000;\000;\128;\000;"      or
        bytes(     281474976710655, SIGNED, LE) <> "\255;\255;\255;\255;\255;\255;\000;"      or
        bytes(     281474976710656, SIGNED, LE) <> "\000;\000;\000;\000;\000;\000;\001;"      or
        bytes(   36028797018963967, SIGNED, LE) <> "\255;\255;\255;\255;\255;\255;\127;"      or
        bytes(   36028797018963968, SIGNED, LE) <> "\000;\000;\000;\000;\000;\000;\128;\000;" or
        bytes(   72057594037927935, SIGNED, LE) <> "\255;\255;\255;\255;\255;\255;\255;\000;" or
        bytes(   72057594037927936, SIGNED, LE) <> "\000;\000;\000;\000;\000;\000;\000;\001;" or
        bytes( 9223372036854775807, SIGNED, LE) <> "\255;\255;\255;\255;\255;\255;\255;\127;" then
      writeln("Conversion of integer to little endian byte string does not work correct.");
      okay := FALSE;
    end if;

    if  bytes(               258, SIGNED, LE) <> "\2;\1;"                   or
        bytes(             66051, SIGNED, LE) <> "\3;\2;\1;"                or
        bytes(          16909060, SIGNED, LE) <> "\4;\3;\2;\1;"             or
        bytes(        4328719365, SIGNED, LE) <> "\5;\4;\3;\2;\1;"          or
        bytes(     1108152157446, SIGNED, LE) <> "\6;\5;\4;\3;\2;\1;"       or
        bytes(   283686952306183, SIGNED, LE) <> "\7;\6;\5;\4;\3;\2;\1;"    or
        bytes( 72623859790382856, SIGNED, LE) <> "\8;\7;\6;\5;\4;\3;\2;\1;" or
        bytes(               513, SIGNED, LE) <> "\1;\2;"                   or
        bytes(            197121, SIGNED, LE) <> "\1;\2;\3;"                or
        bytes(          67305985, SIGNED, LE) <> "\1;\2;\3;\4;"             or
        bytes(       21542142465, SIGNED, LE) <> "\1;\2;\3;\4;\5;"          or
        bytes(     6618611909121, SIGNED, LE) <> "\1;\2;\3;\4;\5;\6;"       or
        bytes(  1976943448883713, SIGNED, LE) <> "\1;\2;\3;\4;\5;\6;\7;"    or
        bytes(578437695752307201, SIGNED, LE) <> "\1;\2;\3;\4;\5;\6;\7;\8;" then
      writeln("Conversion of integer to little endian byte string does not work correct.");
      okay := FALSE;
    end if;

    if  bytes(              -255, SIGNED, LE) <> "\1;\255;"                   or
        bytes(            -65278, SIGNED, LE) <> "\2;\1;\255;"                or
        bytes(         -16711165, SIGNED, LE) <> "\3;\2;\1;\255;"             or
        bytes(       -4278058236, SIGNED, LE) <> "\4;\3;\2;\1;\255;"          or
        bytes(    -1095182908411, SIGNED, LE) <> "\5;\4;\3;\2;\1;\255;"       or
        bytes(  -280366824553210, SIGNED, LE) <> "\6;\5;\4;\3;\2;\1;\255;"    or
        bytes(-71773907085621753, SIGNED, LE) <> "\7;\6;\5;\4;\3;\2;\1;\255;" or
        bytes(              -255, SIGNED, LE) <> "\1;\255;"                   or
        bytes(            -65023, SIGNED, LE) <> "\1;\2;\255;"                or
        bytes(         -16580095, SIGNED, LE) <> "\1;\2;\3;\255;"             or
        bytes(       -4227661311, SIGNED, LE) <> "\1;\2;\3;\4;\255;"          or
        bytes(    -1077969485311, SIGNED, LE) <> "\1;\2;\3;\4;\5;\255;"       or
        bytes(  -274856364801535, SIGNED, LE) <> "\1;\2;\3;\4;\5;\6;\255;"    or
        bytes(-70080650589044223, SIGNED, LE) <> "\1;\2;\3;\4;\5;\6;\7;\255;" then
      writeln("Conversion of integer to little endian byte string does not work correct.");
      okay := FALSE;
    end if;

    if  bytes(                  0, UNSIGNED, LE) <> "\000;"                                    or
        bytes(                  1, UNSIGNED, LE) <> "\001;"                                    or
        bytes(                  2, UNSIGNED, LE) <> "\002;"                                    or
        bytes(                126, UNSIGNED, LE) <> "\126;"                                    or
        bytes(                127, UNSIGNED, LE) <> "\127;"                                    or
        bytes(                128, UNSIGNED, LE) <> "\128;"                                    or
        bytes(                129, UNSIGNED, LE) <> "\129;"                                    or
        bytes(                254, UNSIGNED, LE) <> "\254;"                                    or
        bytes(                255, UNSIGNED, LE) <> "\255;"                                    or
        bytes(                256, UNSIGNED, LE) <> "\000;\001;"                               or
        bytes(                257, UNSIGNED, LE) <> "\001;\001;"                               or
        bytes(                510, UNSIGNED, LE) <> "\254;\001;"                               or
        bytes(                511, UNSIGNED, LE) <> "\255;\001;"                               or
        bytes(                512, UNSIGNED, LE) <> "\000;\002;"                               or
        bytes(                513, UNSIGNED, LE) <> "\001;\002;"                               or
        bytes(              32254, UNSIGNED, LE) <> "\254;\125;"                               or
        bytes(              32255, UNSIGNED, LE) <> "\255;\125;"                               or
        bytes(              32256, UNSIGNED, LE) <> "\000;\126;"                               or
        bytes(              32257, UNSIGNED, LE) <> "\001;\126;"                               or
        bytes(              32510, UNSIGNED, LE) <> "\254;\126;"                               or
        bytes(              32511, UNSIGNED, LE) <> "\255;\126;"                               or
        bytes(              32512, UNSIGNED, LE) <> "\000;\127;"                               or
        bytes(              32513, UNSIGNED, LE) <> "\001;\127;"                               or
        bytes(              32766, UNSIGNED, LE) <> "\254;\127;"                               or
        bytes(              32767, UNSIGNED, LE) <> "\255;\127;"                               or
        bytes(              32768, UNSIGNED, LE) <> "\000;\128;"                               or
        bytes(              32769, UNSIGNED, LE) <> "\001;\128;"                               or
        bytes(              65023, UNSIGNED, LE) <> "\255;\253;"                               or
        bytes(              65024, UNSIGNED, LE) <> "\000;\254;"                               or
        bytes(              65279, UNSIGNED, LE) <> "\255;\254;"                               or
        bytes(              65280, UNSIGNED, LE) <> "\000;\255;"                               or
        bytes(              65535, UNSIGNED, LE) <> "\255;\255;"                               or
        bytes(              65536, UNSIGNED, LE) <> "\000;\000;\001;"                          or
        bytes(            8388607, UNSIGNED, LE) <> "\255;\255;\127;"                          or
        bytes(            8388608, UNSIGNED, LE) <> "\000;\000;\128;"                          or
        bytes(           16777215, UNSIGNED, LE) <> "\255;\255;\255;"                          or
        bytes(           16777216, UNSIGNED, LE) <> "\000;\000;\000;\001;"                     or
        bytes(         2147483647, UNSIGNED, LE) <> "\255;\255;\255;\127;"                     or
        bytes(         2147483648, UNSIGNED, LE) <> "\000;\000;\000;\128;"                     or
        bytes(         4294967295, UNSIGNED, LE) <> "\255;\255;\255;\255;"                     or
        bytes(         4294967296, UNSIGNED, LE) <> "\000;\000;\000;\000;\001;"                or
        bytes(       549755813887, UNSIGNED, LE) <> "\255;\255;\255;\255;\127;"                or
        bytes(       549755813888, UNSIGNED, LE) <> "\000;\000;\000;\000;\128;"                or
        bytes(      1099511627775, UNSIGNED, LE) <> "\255;\255;\255;\255;\255;"                or
        bytes(      1099511627776, UNSIGNED, LE) <> "\000;\000;\000;\000;\000;\001;"           or
        bytes(    140737488355327, UNSIGNED, LE) <> "\255;\255;\255;\255;\255;\127;"           or
        bytes(    140737488355328, UNSIGNED, LE) <> "\000;\000;\000;\000;\000;\128;"           or
        bytes(    281474976710655, UNSIGNED, LE) <> "\255;\255;\255;\255;\255;\255;"           or
        bytes(    281474976710656, UNSIGNED, LE) <> "\000;\000;\000;\000;\000;\000;\001;"      or
        bytes(  36028797018963967, UNSIGNED, LE) <> "\255;\255;\255;\255;\255;\255;\127;"      or
        bytes(  36028797018963968, UNSIGNED, LE) <> "\000;\000;\000;\000;\000;\000;\128;"      or
        bytes(  72057594037927935, UNSIGNED, LE) <> "\255;\255;\255;\255;\255;\255;\255;"      or
        bytes(  72057594037927936, UNSIGNED, LE) <> "\000;\000;\000;\000;\000;\000;\000;\001;" or
        bytes(9223372036854775807, UNSIGNED, LE) <> "\255;\255;\255;\255;\255;\255;\255;\127;" then
      writeln("Conversion of integer to unsigned little endian byte string does not work correct.");
      okay := FALSE;
    end if;

    if  bytes(               258, UNSIGNED, LE) <> "\2;\1;"                   or
        bytes(             66051, UNSIGNED, LE) <> "\3;\2;\1;"                or
        bytes(          16909060, UNSIGNED, LE) <> "\4;\3;\2;\1;"             or
        bytes(        4328719365, UNSIGNED, LE) <> "\5;\4;\3;\2;\1;"          or
        bytes(     1108152157446, UNSIGNED, LE) <> "\6;\5;\4;\3;\2;\1;"       or
        bytes(   283686952306183, UNSIGNED, LE) <> "\7;\6;\5;\4;\3;\2;\1;"    or
        bytes( 72623859790382856, UNSIGNED, LE) <> "\8;\7;\6;\5;\4;\3;\2;\1;" or
        bytes(               513, UNSIGNED, LE) <> "\1;\2;"                   or
        bytes(            197121, UNSIGNED, LE) <> "\1;\2;\3;"                or
        bytes(          67305985, UNSIGNED, LE) <> "\1;\2;\3;\4;"             or
        bytes(       21542142465, UNSIGNED, LE) <> "\1;\2;\3;\4;\5;"          or
        bytes(     6618611909121, UNSIGNED, LE) <> "\1;\2;\3;\4;\5;\6;"       or
        bytes(  1976943448883713, UNSIGNED, LE) <> "\1;\2;\3;\4;\5;\6;\7;"    or
        bytes(578437695752307201, UNSIGNED, LE) <> "\1;\2;\3;\4;\5;\6;\7;\8;" then
      writeln("Conversion of integer to unsigned little endian byte string does not work correct.");
      okay := FALSE;
    end if;

    if  bytes(            65281, UNSIGNED, LE) <> "\1;\255;"                or
        bytes(         16711938, UNSIGNED, LE) <> "\2;\1;\255;"             or
        bytes(       4278256131, UNSIGNED, LE) <> "\3;\2;\1;\255;"          or
        bytes(    1095233569540, UNSIGNED, LE) <> "\4;\3;\2;\1;\255;"       or
        bytes(  280379793802245, UNSIGNED, LE) <> "\5;\4;\3;\2;\1;\255;"    or
        bytes(71777227213374726, UNSIGNED, LE) <> "\6;\5;\4;\3;\2;\1;\255;" or
        bytes(            65281, UNSIGNED, LE) <> "\1;\255;"                or
        bytes(         16712193, UNSIGNED, LE) <> "\1;\2;\255;"             or
        bytes(       4278387201, UNSIGNED, LE) <> "\1;\2;\3;\255;"          or
        bytes(    1095283966465, UNSIGNED, LE) <> "\1;\2;\3;\4;\255;"       or
        bytes(  280397007225345, UNSIGNED, LE) <> "\1;\2;\3;\4;\5;\255;"    or
        bytes(71782737673126401, UNSIGNED, LE) <> "\1;\2;\3;\4;\5;\6;\255;" then
      writeln("Conversion of integer to unsigned little endian byte string does not work correct.");
      okay := FALSE;
    end if;

    if  bytes(1414743380,          SIGNED,   LE) <> "TEST"     or
        bytes(1497451343,          SIGNED,   LE) <> "OKAY"     or
        bytes(-338762584277,       SIGNED,   LE) <> "+/- ±"    or
        bytes(760749043499,        SIGNED,   LE) <> "+/- ±\0;" or
        bytes(760749043499,        UNSIGNED, LE) <> "+/- ±"    or
        bytes(8316866959935304777, UNSIGNED, LE) <> "It works" then
      writeln("Conversion of bigInteger to byte string does not work correct.");
      okay := FALSE;
    end if;

    if  not raisesRangeError(bytes(-1, UNSIGNED, LE)) then
      writeln("Conversion of negative integer to unsigned little endian byte string does not raise RANGE_ERROR.");
      okay := FALSE;
    end if;

    if okay then
      writeln("Conversion of integer to little endian byte string works correct.");
    else
      writeln(" ***** Conversion of integer to little endian byte string does not work correct.");
      writeln;
    end if;
  end func;


const proc: check_bytesBe2Int is func
  local
    var boolean: okay is TRUE;
  begin
    if  bytes2Int("\128;\000;\000;\000;\000;\000;\000;\000;", SIGNED, BE) <>            INT64_MIN or
        bytes2Int("\128;\000;\000;\000;\000;\000;\000;\001;", SIGNED, BE) <> -9223372036854775807 or
        bytes2Int("\254;\255;\255;\255;\255;\255;\255;\255;", SIGNED, BE) <>   -72057594037927937 or
        bytes2Int("\255;\000;\000;\000;\000;\000;\000;\000;", SIGNED, BE) <>   -72057594037927936 or
        bytes2Int("\255;\127;\255;\255;\255;\255;\255;\255;", SIGNED, BE) <>   -36028797018963969 or
        bytes2Int(     "\128;\000;\000;\000;\000;\000;\000;", SIGNED, BE) <>   -36028797018963968 or
        bytes2Int(     "\254;\255;\255;\255;\255;\255;\255;", SIGNED, BE) <>     -281474976710657 or
        bytes2Int(     "\255;\000;\000;\000;\000;\000;\000;", SIGNED, BE) <>     -281474976710656 or
        bytes2Int(     "\255;\127;\255;\255;\255;\255;\255;", SIGNED, BE) <>     -140737488355329 or
        bytes2Int(          "\128;\000;\000;\000;\000;\000;", SIGNED, BE) <>     -140737488355328 or
        bytes2Int(          "\254;\255;\255;\255;\255;\255;", SIGNED, BE) <>       -1099511627777 or
        bytes2Int(          "\255;\000;\000;\000;\000;\000;", SIGNED, BE) <>       -1099511627776 or
        bytes2Int(          "\255;\127;\255;\255;\255;\255;", SIGNED, BE) <>        -549755813889 or
        bytes2Int(               "\128;\000;\000;\000;\000;", SIGNED, BE) <>        -549755813888 or
        bytes2Int(               "\254;\255;\255;\255;\255;", SIGNED, BE) <>          -4294967297 or
        bytes2Int(               "\255;\000;\000;\000;\000;", SIGNED, BE) <>          -4294967296 or
        bytes2Int(               "\255;\127;\255;\255;\255;", SIGNED, BE) <>          -2147483649 or
        bytes2Int(                    "\128;\000;\000;\000;", SIGNED, BE) <>          -2147483648 or
        bytes2Int(                    "\254;\255;\255;\255;", SIGNED, BE) <>            -16777217 or
        bytes2Int(                    "\255;\000;\000;\000;", SIGNED, BE) <>            -16777216 or
        bytes2Int(                    "\255;\127;\255;\255;", SIGNED, BE) <>             -8388609 or
        bytes2Int(                         "\128;\000;\000;", SIGNED, BE) <>             -8388608 or
        bytes2Int(                         "\254;\255;\255;", SIGNED, BE) <>               -65537 or
        bytes2Int(                         "\255;\000;\000;", SIGNED, BE) <>               -65536 or
        bytes2Int(                         "\255;\000;\255;", SIGNED, BE) <>               -65281 or
        bytes2Int(                         "\255;\001;\000;", SIGNED, BE) <>               -65280 or
        bytes2Int(                         "\255;\001;\255;", SIGNED, BE) <>               -65025 or
        bytes2Int(                         "\255;\002;\000;", SIGNED, BE) <>               -65024 or
        bytes2Int(                         "\255;\127;\254;", SIGNED, BE) <>               -32770 or
        bytes2Int(                         "\255;\127;\255;", SIGNED, BE) <>               -32769 or
        bytes2Int(                              "\128;\000;", SIGNED, BE) <>               -32768 or
        bytes2Int(                              "\128;\001;", SIGNED, BE) <>               -32767 or
        bytes2Int(                              "\128;\254;", SIGNED, BE) <>               -32514 or
        bytes2Int(                              "\128;\255;", SIGNED, BE) <>               -32513 or
        bytes2Int(                              "\129;\000;", SIGNED, BE) <>               -32512 or
        bytes2Int(                              "\129;\001;", SIGNED, BE) <>               -32511 or
        bytes2Int(                              "\129;\254;", SIGNED, BE) <>               -32258 or
        bytes2Int(                              "\129;\255;", SIGNED, BE) <>               -32257 or
        bytes2Int(                              "\130;\000;", SIGNED, BE) <>               -32256 or
        bytes2Int(                              "\130;\001;", SIGNED, BE) <>               -32255 or
        bytes2Int(                              "\253;\254;", SIGNED, BE) <>                 -514 or
        bytes2Int(                              "\253;\255;", SIGNED, BE) <>                 -513 or
        bytes2Int(                              "\254;\000;", SIGNED, BE) <>                 -512 or
        bytes2Int(                              "\254;\001;", SIGNED, BE) <>                 -511 or
        bytes2Int(                              "\254;\254;", SIGNED, BE) <>                 -258 or
        bytes2Int(                              "\254;\255;", SIGNED, BE) <>                 -257 or
        bytes2Int(                              "\255;\000;", SIGNED, BE) <>                 -256 or
        bytes2Int(                              "\255;\001;", SIGNED, BE) <>                 -255 or
        bytes2Int(                              "\255;\126;", SIGNED, BE) <>                 -130 or
        bytes2Int(                              "\255;\127;", SIGNED, BE) <>                 -129 or
        bytes2Int(                                   "\128;", SIGNED, BE) <>                 -128 or
        bytes2Int(                                   "\129;", SIGNED, BE) <>                 -127 or
        bytes2Int(                                   "\254;", SIGNED, BE) <>                   -2 or
        bytes2Int(                                   "\255;", SIGNED, BE) <>                   -1 or
        bytes2Int(                                   "\000;", SIGNED, BE) <>                    0 or
        bytes2Int(                                   "\001;", SIGNED, BE) <>                    1 or
        bytes2Int(                                   "\002;", SIGNED, BE) <>                    2 or
        bytes2Int(                                   "\126;", SIGNED, BE) <>                  126 or
        bytes2Int(                                   "\127;", SIGNED, BE) <>                  127 or
        bytes2Int(                              "\000;\128;", SIGNED, BE) <>                  128 or
        bytes2Int(                              "\000;\129;", SIGNED, BE) <>                  129 or
        bytes2Int(                              "\000;\254;", SIGNED, BE) <>                  254 or
        bytes2Int(                              "\000;\255;", SIGNED, BE) <>                  255 or
        bytes2Int(                              "\001;\000;", SIGNED, BE) <>                  256 or
        bytes2Int(                              "\001;\001;", SIGNED, BE) <>                  257 or
        bytes2Int(                              "\001;\254;", SIGNED, BE) <>                  510 or
        bytes2Int(                              "\001;\255;", SIGNED, BE) <>                  511 or
        bytes2Int(                              "\002;\000;", SIGNED, BE) <>                  512 or
        bytes2Int(                              "\002;\001;", SIGNED, BE) <>                  513 or
        bytes2Int(                              "\125;\254;", SIGNED, BE) <>                32254 or
        bytes2Int(                              "\125;\255;", SIGNED, BE) <>                32255 or
        bytes2Int(                              "\126;\000;", SIGNED, BE) <>                32256 or
        bytes2Int(                              "\126;\001;", SIGNED, BE) <>                32257 or
        bytes2Int(                              "\126;\254;", SIGNED, BE) <>                32510 or
        bytes2Int(                              "\126;\255;", SIGNED, BE) <>                32511 or
        bytes2Int(                              "\127;\000;", SIGNED, BE) <>                32512 or
        bytes2Int(                              "\127;\001;", SIGNED, BE) <>                32513 or
        bytes2Int(                              "\127;\254;", SIGNED, BE) <>                32766 or
        bytes2Int(                              "\127;\255;", SIGNED, BE) <>                32767 or
        bytes2Int(                         "\000;\128;\000;", SIGNED, BE) <>                32768 or
        bytes2Int(                         "\000;\128;\001;", SIGNED, BE) <>                32769 or
        bytes2Int(                         "\000;\253;\255;", SIGNED, BE) <>                65023 or
        bytes2Int(                         "\000;\254;\000;", SIGNED, BE) <>                65024 or
        bytes2Int(                         "\000;\254;\255;", SIGNED, BE) <>                65279 or
        bytes2Int(                         "\000;\255;\000;", SIGNED, BE) <>                65280 or
        bytes2Int(                         "\000;\255;\255;", SIGNED, BE) <>                65535 or
        bytes2Int(                         "\001;\000;\000;", SIGNED, BE) <>                65536 or
        bytes2Int(                         "\127;\255;\255;", SIGNED, BE) <>              8388607 or
        bytes2Int(                    "\000;\128;\000;\000;", SIGNED, BE) <>              8388608 or
        bytes2Int(                    "\000;\255;\255;\255;", SIGNED, BE) <>             16777215 or
        bytes2Int(                    "\001;\000;\000;\000;", SIGNED, BE) <>             16777216 or
        bytes2Int(                    "\127;\255;\255;\255;", SIGNED, BE) <>           2147483647 or
        bytes2Int(               "\000;\128;\000;\000;\000;", SIGNED, BE) <>           2147483648 or
        bytes2Int(               "\000;\255;\255;\255;\255;", SIGNED, BE) <>           4294967295 or
        bytes2Int(               "\001;\000;\000;\000;\000;", SIGNED, BE) <>           4294967296 or
        bytes2Int(               "\127;\255;\255;\255;\255;", SIGNED, BE) <>         549755813887 or
        bytes2Int(          "\000;\128;\000;\000;\000;\000;", SIGNED, BE) <>         549755813888 or
        bytes2Int(          "\000;\255;\255;\255;\255;\255;", SIGNED, BE) <>        1099511627775 or
        bytes2Int(          "\001;\000;\000;\000;\000;\000;", SIGNED, BE) <>        1099511627776 or
        bytes2Int(          "\127;\255;\255;\255;\255;\255;", SIGNED, BE) <>      140737488355327 or
        bytes2Int(     "\000;\128;\000;\000;\000;\000;\000;", SIGNED, BE) <>      140737488355328 or
        bytes2Int(     "\000;\255;\255;\255;\255;\255;\255;", SIGNED, BE) <>      281474976710655 or
        bytes2Int(     "\001;\000;\000;\000;\000;\000;\000;", SIGNED, BE) <>      281474976710656 or
        bytes2Int(     "\127;\255;\255;\255;\255;\255;\255;", SIGNED, BE) <>    36028797018963967 or
        bytes2Int("\000;\128;\000;\000;\000;\000;\000;\000;", SIGNED, BE) <>    36028797018963968 or
        bytes2Int("\000;\255;\255;\255;\255;\255;\255;\255;", SIGNED, BE) <>    72057594037927935 or
        bytes2Int("\001;\000;\000;\000;\000;\000;\000;\000;", SIGNED, BE) <>    72057594037927936 or
        bytes2Int("\127;\255;\255;\255;\255;\255;\255;\255;", SIGNED, BE) <>  9223372036854775807 then
      writeln("Conversion of big endian byte string to integer does not work correct.");
      okay := FALSE;
    end if;

    if  bytes2Int(                  "\1;\2;", SIGNED, BE) <>                258 or
        bytes2Int(               "\1;\2;\3;", SIGNED, BE) <>              66051 or
        bytes2Int(            "\1;\2;\3;\4;", SIGNED, BE) <>           16909060 or
        bytes2Int(         "\1;\2;\3;\4;\5;", SIGNED, BE) <>         4328719365 or
        bytes2Int(      "\1;\2;\3;\4;\5;\6;", SIGNED, BE) <>      1108152157446 or
        bytes2Int(   "\1;\2;\3;\4;\5;\6;\7;", SIGNED, BE) <>    283686952306183 or
        bytes2Int("\1;\2;\3;\4;\5;\6;\7;\8;", SIGNED, BE) <>  72623859790382856 or
        bytes2Int(                  "\2;\1;", SIGNED, BE) <>                513 or
        bytes2Int(               "\3;\2;\1;", SIGNED, BE) <>             197121 or
        bytes2Int(            "\4;\3;\2;\1;", SIGNED, BE) <>           67305985 or
        bytes2Int(         "\5;\4;\3;\2;\1;", SIGNED, BE) <>        21542142465 or
        bytes2Int(      "\6;\5;\4;\3;\2;\1;", SIGNED, BE) <>      6618611909121 or
        bytes2Int(   "\7;\6;\5;\4;\3;\2;\1;", SIGNED, BE) <>   1976943448883713 or
        bytes2Int("\8;\7;\6;\5;\4;\3;\2;\1;", SIGNED, BE) <> 578437695752307201 then
      writeln("Conversion of big endian byte string to integer does not work correct.");
      okay := FALSE;
    end if;

    if  bytes2Int(                  "\255;\1;", SIGNED, BE) <>               -255 or
        bytes2Int(               "\255;\1;\2;", SIGNED, BE) <>             -65278 or
        bytes2Int(            "\255;\1;\2;\3;", SIGNED, BE) <>          -16711165 or
        bytes2Int(         "\255;\1;\2;\3;\4;", SIGNED, BE) <>        -4278058236 or
        bytes2Int(      "\255;\1;\2;\3;\4;\5;", SIGNED, BE) <>     -1095182908411 or
        bytes2Int(   "\255;\1;\2;\3;\4;\5;\6;", SIGNED, BE) <>   -280366824553210 or
        bytes2Int("\255;\1;\2;\3;\4;\5;\6;\7;", SIGNED, BE) <> -71773907085621753 or
        bytes2Int(                  "\255;\1;", SIGNED, BE) <>               -255 or
        bytes2Int(               "\255;\2;\1;", SIGNED, BE) <>             -65023 or
        bytes2Int(            "\255;\3;\2;\1;", SIGNED, BE) <>          -16580095 or
        bytes2Int(         "\255;\4;\3;\2;\1;", SIGNED, BE) <>        -4227661311 or
        bytes2Int(      "\255;\5;\4;\3;\2;\1;", SIGNED, BE) <>     -1077969485311 or
        bytes2Int(   "\255;\6;\5;\4;\3;\2;\1;", SIGNED, BE) <>   -274856364801535 or
        bytes2Int("\255;\7;\6;\5;\4;\3;\2;\1;", SIGNED, BE) <> -70080650589044223 then
      writeln("Conversion of big endian byte string to integer does not work correct.");
      okay := FALSE;
    end if;

    if  bytes2Int("\255;\255;\128;\000;\000;\000;\000;\000;\000;\000;", SIGNED, BE) <>            INT64_MIN or
        bytes2Int("\255;\255;\128;\000;\000;\000;\000;\000;\000;\001;", SIGNED, BE) <> -9223372036854775807 or
        bytes2Int("\255;\255;\255;\000;\000;\000;\000;\000;\000;\000;", SIGNED, BE) <>   -72057594037927936 or
        bytes2Int("\255;\255;\255;\127;\255;\255;\255;\255;\255;\255;", SIGNED, BE) <>   -36028797018963969 or
        bytes2Int("\255;\255;\255;\128;\000;\000;\000;\000;\000;\000;", SIGNED, BE) <>   -36028797018963968 or
        bytes2Int(                         "\255;\255;\255;\255;\127;", SIGNED, BE) <>                 -129 or
        bytes2Int(                              "\255;\255;\255;\127;", SIGNED, BE) <>                 -129 or
        bytes2Int(                                   "\255;\255;\127;", SIGNED, BE) <>                 -129 or
        bytes2Int(                         "\255;\255;\255;\255;\128;", SIGNED, BE) <>                 -128 or
        bytes2Int(                              "\255;\255;\255;\128;", SIGNED, BE) <>                 -128 or
        bytes2Int(                                   "\255;\255;\128;", SIGNED, BE) <>                 -128 or
        bytes2Int(                                        "\255;\128;", SIGNED, BE) <>                 -128 or
        bytes2Int("\255;\255;\255;\255;\255;\255;\255;\255;\255;\254;", SIGNED, BE) <>                   -2 or
        bytes2Int(                         "\255;\255;\255;\255;\254;", SIGNED, BE) <>                   -2 or
        bytes2Int(                              "\255;\255;\255;\254;", SIGNED, BE) <>                   -2 or
        bytes2Int(                                   "\255;\255;\254;", SIGNED, BE) <>                   -2 or
        bytes2Int(                                        "\255;\254;", SIGNED, BE) <>                   -2 or
        bytes2Int("\255;\255;\255;\255;\255;\255;\255;\255;\255;\255;", SIGNED, BE) <>                   -1 or
        bytes2Int(                         "\255;\255;\255;\255;\255;", SIGNED, BE) <>                   -1 or
        bytes2Int(                              "\255;\255;\255;\255;", SIGNED, BE) <>                   -1 or
        bytes2Int(                                   "\255;\255;\255;", SIGNED, BE) <>                   -1 or
        bytes2Int(                                        "\255;\255;", SIGNED, BE) <>                   -1 or
        bytes2Int(                                                  "", SIGNED, BE) <>                    0 or
        bytes2Int(                                        "\000;\000;", SIGNED, BE) <>                    0 or
        bytes2Int(                                   "\000;\000;\000;", SIGNED, BE) <>                    0 or
        bytes2Int(                              "\000;\000;\000;\000;", SIGNED, BE) <>                    0 or
        bytes2Int(                         "\000;\000;\000;\000;\000;", SIGNED, BE) <>                    0 or
        bytes2Int("\000;\000;\000;\000;\000;\000;\000;\000;\000;\000;", SIGNED, BE) <>                    0 or
        bytes2Int(                                        "\000;\001;", SIGNED, BE) <>                    1 or
        bytes2Int(                                   "\000;\000;\001;", SIGNED, BE) <>                    1 or
        bytes2Int(                              "\000;\000;\000;\001;", SIGNED, BE) <>                    1 or
        bytes2Int(                         "\000;\000;\000;\000;\001;", SIGNED, BE) <>                    1 or
        bytes2Int("\000;\000;\000;\000;\000;\000;\000;\000;\000;\001;", SIGNED, BE) <>                    1 or
        bytes2Int(                                        "\000;\127;", SIGNED, BE) <>                  127 or
        bytes2Int(                                   "\000;\000;\127;", SIGNED, BE) <>                  127 or
        bytes2Int(                              "\000;\000;\000;\127;", SIGNED, BE) <>                  127 or
        bytes2Int(                         "\000;\000;\000;\000;\127;", SIGNED, BE) <>                  127 or
        bytes2Int(                                   "\000;\000;\128;", SIGNED, BE) <>                  128 or
        bytes2Int(                              "\000;\000;\000;\128;", SIGNED, BE) <>                  128 or
        bytes2Int(                         "\000;\000;\000;\000;\128;", SIGNED, BE) <>                  128 or
        bytes2Int("\000;\000;\000;\127;\255;\255;\255;\255;\255;\255;", SIGNED, BE) <>    36028797018963967 or
        bytes2Int("\000;\000;\000;\128;\000;\000;\000;\000;\000;\000;", SIGNED, BE) <>    36028797018963968 or
        bytes2Int("\000;\000;\000;\255;\255;\255;\255;\255;\255;\255;", SIGNED, BE) <>    72057594037927935 or
        bytes2Int("\000;\000;\127;\255;\255;\255;\255;\255;\255;\255;", SIGNED, BE) <>  9223372036854775807 then
      writeln("Conversion of big endian byte string to integer does not work correct.");
      okay := FALSE;
    end if;

    if  bytes2Int(                                   "\000;", UNSIGNED, BE) <>                   0 or
        bytes2Int(                                   "\001;", UNSIGNED, BE) <>                   1 or
        bytes2Int(                                   "\002;", UNSIGNED, BE) <>                   2 or
        bytes2Int(                                   "\126;", UNSIGNED, BE) <>                 126 or
        bytes2Int(                                   "\127;", UNSIGNED, BE) <>                 127 or
        bytes2Int(                                   "\128;", UNSIGNED, BE) <>                 128 or
        bytes2Int(                                   "\129;", UNSIGNED, BE) <>                 129 or
        bytes2Int(                                   "\254;", UNSIGNED, BE) <>                 254 or
        bytes2Int(                                   "\255;", UNSIGNED, BE) <>                 255 or
        bytes2Int(                              "\001;\000;", UNSIGNED, BE) <>                 256 or
        bytes2Int(                              "\001;\001;", UNSIGNED, BE) <>                 257 or
        bytes2Int(                              "\001;\254;", UNSIGNED, BE) <>                 510 or
        bytes2Int(                              "\001;\255;", UNSIGNED, BE) <>                 511 or
        bytes2Int(                              "\002;\000;", UNSIGNED, BE) <>                 512 or
        bytes2Int(                              "\002;\001;", UNSIGNED, BE) <>                 513 or
        bytes2Int(                              "\125;\254;", UNSIGNED, BE) <>               32254 or
        bytes2Int(                              "\125;\255;", UNSIGNED, BE) <>               32255 or
        bytes2Int(                              "\126;\000;", UNSIGNED, BE) <>               32256 or
        bytes2Int(                              "\126;\001;", UNSIGNED, BE) <>               32257 or
        bytes2Int(                              "\126;\254;", UNSIGNED, BE) <>               32510 or
        bytes2Int(                              "\126;\255;", UNSIGNED, BE) <>               32511 or
        bytes2Int(                              "\127;\000;", UNSIGNED, BE) <>               32512 or
        bytes2Int(                              "\127;\001;", UNSIGNED, BE) <>               32513 or
        bytes2Int(                              "\127;\254;", UNSIGNED, BE) <>               32766 or
        bytes2Int(                              "\127;\255;", UNSIGNED, BE) <>               32767 or
        bytes2Int(                              "\128;\000;", UNSIGNED, BE) <>               32768 or
        bytes2Int(                              "\128;\001;", UNSIGNED, BE) <>               32769 or
        bytes2Int(                              "\253;\255;", UNSIGNED, BE) <>               65023 or
        bytes2Int(                              "\254;\000;", UNSIGNED, BE) <>               65024 or
        bytes2Int(                              "\254;\255;", UNSIGNED, BE) <>               65279 or
        bytes2Int(                              "\255;\000;", UNSIGNED, BE) <>               65280 or
        bytes2Int(                              "\255;\255;", UNSIGNED, BE) <>               65535 or
        bytes2Int(                         "\001;\000;\000;", UNSIGNED, BE) <>               65536 or
        bytes2Int(                         "\127;\255;\255;", UNSIGNED, BE) <>             8388607 or
        bytes2Int(                         "\128;\000;\000;", UNSIGNED, BE) <>             8388608 or
        bytes2Int(                         "\255;\255;\255;", UNSIGNED, BE) <>            16777215 or
        bytes2Int(                    "\001;\000;\000;\000;", UNSIGNED, BE) <>            16777216 or
        bytes2Int(                    "\127;\255;\255;\255;", UNSIGNED, BE) <>          2147483647 or
        bytes2Int(                    "\128;\000;\000;\000;", UNSIGNED, BE) <>          2147483648 or
        bytes2Int(                    "\255;\255;\255;\255;", UNSIGNED, BE) <>          4294967295 or
        bytes2Int(               "\001;\000;\000;\000;\000;", UNSIGNED, BE) <>          4294967296 or
        bytes2Int(               "\127;\255;\255;\255;\255;", UNSIGNED, BE) <>        549755813887 or
        bytes2Int(               "\128;\000;\000;\000;\000;", UNSIGNED, BE) <>        549755813888 or
        bytes2Int(               "\255;\255;\255;\255;\255;", UNSIGNED, BE) <>       1099511627775 or
        bytes2Int(          "\001;\000;\000;\000;\000;\000;", UNSIGNED, BE) <>       1099511627776 or
        bytes2Int(          "\127;\255;\255;\255;\255;\255;", UNSIGNED, BE) <>     140737488355327 or
        bytes2Int(          "\128;\000;\000;\000;\000;\000;", UNSIGNED, BE) <>     140737488355328 or
        bytes2Int(          "\255;\255;\255;\255;\255;\255;", UNSIGNED, BE) <>     281474976710655 or
        bytes2Int(     "\001;\000;\000;\000;\000;\000;\000;", UNSIGNED, BE) <>     281474976710656 or
        bytes2Int(     "\127;\255;\255;\255;\255;\255;\255;", UNSIGNED, BE) <>   36028797018963967 or
        bytes2Int(     "\128;\000;\000;\000;\000;\000;\000;", UNSIGNED, BE) <>   36028797018963968 or
        bytes2Int(     "\255;\255;\255;\255;\255;\255;\255;", UNSIGNED, BE) <>   72057594037927935 or
        bytes2Int("\001;\000;\000;\000;\000;\000;\000;\000;", UNSIGNED, BE) <>   72057594037927936 or
        bytes2Int("\127;\255;\255;\255;\255;\255;\255;\255;", UNSIGNED, BE) <> 9223372036854775807 then
      writeln("Conversion of unsigned big endian byte string to integer does not work correct.");
      okay := FALSE;
    end if;

    if  bytes2Int(                  "\1;\2;", UNSIGNED, BE) <>                258 or
        bytes2Int(               "\1;\2;\3;", UNSIGNED, BE) <>              66051 or
        bytes2Int(            "\1;\2;\3;\4;", UNSIGNED, BE) <>           16909060 or
        bytes2Int(         "\1;\2;\3;\4;\5;", UNSIGNED, BE) <>         4328719365 or
        bytes2Int(      "\1;\2;\3;\4;\5;\6;", UNSIGNED, BE) <>      1108152157446 or
        bytes2Int(   "\1;\2;\3;\4;\5;\6;\7;", UNSIGNED, BE) <>    283686952306183 or
        bytes2Int("\1;\2;\3;\4;\5;\6;\7;\8;", UNSIGNED, BE) <>  72623859790382856 or
        bytes2Int(                  "\2;\1;", UNSIGNED, BE) <>                513 or
        bytes2Int(               "\3;\2;\1;", UNSIGNED, BE) <>             197121 or
        bytes2Int(            "\4;\3;\2;\1;", UNSIGNED, BE) <>           67305985 or
        bytes2Int(         "\5;\4;\3;\2;\1;", UNSIGNED, BE) <>        21542142465 or
        bytes2Int(      "\6;\5;\4;\3;\2;\1;", UNSIGNED, BE) <>      6618611909121 or
        bytes2Int(   "\7;\6;\5;\4;\3;\2;\1;", UNSIGNED, BE) <>   1976943448883713 or
        bytes2Int("\8;\7;\6;\5;\4;\3;\2;\1;", UNSIGNED, BE) <> 578437695752307201 then
      writeln("Conversion of unsigned big endian byte string to integer does not work correct.");
      okay := FALSE;
    end if;

    if  bytes2Int(               "\255;\1;", UNSIGNED, BE) <>             65281 or
        bytes2Int(            "\255;\1;\2;", UNSIGNED, BE) <>          16711938 or
        bytes2Int(         "\255;\1;\2;\3;", UNSIGNED, BE) <>        4278256131 or
        bytes2Int(      "\255;\1;\2;\3;\4;", UNSIGNED, BE) <>     1095233569540 or
        bytes2Int(   "\255;\1;\2;\3;\4;\5;", UNSIGNED, BE) <>   280379793802245 or
        bytes2Int("\255;\1;\2;\3;\4;\5;\6;", UNSIGNED, BE) <> 71777227213374726 or
        bytes2Int(               "\255;\1;", UNSIGNED, BE) <>             65281 or
        bytes2Int(            "\255;\2;\1;", UNSIGNED, BE) <>          16712193 or
        bytes2Int(         "\255;\3;\2;\1;", UNSIGNED, BE) <>        4278387201 or
        bytes2Int(      "\255;\4;\3;\2;\1;", UNSIGNED, BE) <>     1095283966465 or
        bytes2Int(   "\255;\5;\4;\3;\2;\1;", UNSIGNED, BE) <>   280397007225345 or
        bytes2Int("\255;\6;\5;\4;\3;\2;\1;", UNSIGNED, BE) <> 71782737673126401 then
      writeln("Conversion of unsigned big endian byte string to integer does not work correct.");
      okay := FALSE;
    end if;

    if  bytes2Int(                                                  "", UNSIGNED, BE) <>                   0 or
        bytes2Int(                                        "\000;\000;", UNSIGNED, BE) <>                   0 or
        bytes2Int(                                   "\000;\000;\000;", UNSIGNED, BE) <>                   0 or
        bytes2Int(                              "\000;\000;\000;\000;", UNSIGNED, BE) <>                   0 or
        bytes2Int(                         "\000;\000;\000;\000;\000;", UNSIGNED, BE) <>                   0 or
        bytes2Int("\000;\000;\000;\000;\000;\000;\000;\000;\000;\000;", UNSIGNED, BE) <>                   0 or
        bytes2Int(                                        "\000;\001;", UNSIGNED, BE) <>                   1 or
        bytes2Int(                                   "\000;\000;\001;", UNSIGNED, BE) <>                   1 or
        bytes2Int(                              "\000;\000;\000;\001;", UNSIGNED, BE) <>                   1 or
        bytes2Int(                         "\000;\000;\000;\000;\001;", UNSIGNED, BE) <>                   1 or
        bytes2Int("\000;\000;\000;\000;\000;\000;\000;\000;\000;\001;", UNSIGNED, BE) <>                   1 or
        bytes2Int(                                        "\000;\127;", UNSIGNED, BE) <>                 127 or
        bytes2Int(                                   "\000;\000;\127;", UNSIGNED, BE) <>                 127 or
        bytes2Int(                              "\000;\000;\000;\127;", UNSIGNED, BE) <>                 127 or
        bytes2Int(                         "\000;\000;\000;\000;\127;", UNSIGNED, BE) <>                 127 or
        bytes2Int(                                   "\000;\000;\128;", UNSIGNED, BE) <>                 128 or
        bytes2Int(                              "\000;\000;\000;\128;", UNSIGNED, BE) <>                 128 or
        bytes2Int(                         "\000;\000;\000;\000;\128;", UNSIGNED, BE) <>                 128 or
        bytes2Int("\000;\000;\000;\127;\255;\255;\255;\255;\255;\255;", UNSIGNED, BE) <>   36028797018963967 or
        bytes2Int("\000;\000;\000;\128;\000;\000;\000;\000;\000;\000;", UNSIGNED, BE) <>   36028797018963968 or
        bytes2Int("\000;\000;\000;\255;\255;\255;\255;\255;\255;\255;", UNSIGNED, BE) <>   72057594037927935 or
        bytes2Int("\000;\000;\127;\255;\255;\255;\255;\255;\255;\255;", UNSIGNED, BE) <> 9223372036854775807 then
      writeln("Conversion of unsigned big endian byte string to integer does not work correct.");
      okay := FALSE;
    end if;

    if  not raisesRangeError(bytes2Int("\000;\127;\255;\255;\255;\255;\255;\255;\255;\255;",   SIGNED, BE)) or
        not raisesRangeError(bytes2Int("\000;\000;\128;\255;\255;\255;\255;\255;\255;\255;",   SIGNED, BE)) or
        not raisesRangeError(bytes2Int("\000;\000;\127;\255;\255;\255;\256;\255;\255;\255;",   SIGNED, BE)) or
        not raisesRangeError(bytes2Int("\255;\128;\255;\255;\255;\255;\255;\255;\255;\255;",   SIGNED, BE)) or
        not raisesRangeError(bytes2Int("\255;\255;\127;\255;\255;\255;\255;\255;\255;\255;",   SIGNED, BE)) or
        not raisesRangeError(bytes2Int("\255;\255;\128;\255;\255;\255;\256;\255;\255;\255;",   SIGNED, BE)) or
        not raisesRangeError(bytes2Int("\000;\127;\255;\255;\255;\255;\255;\255;\255;\255;", UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int("\000;\000;\128;\255;\255;\255;\255;\255;\255;\255;", UNSIGNED, BE)) or
        not raisesRangeError(bytes2Int("\000;\000;\127;\255;\255;\255;\256;\255;\255;\255;", UNSIGNED, BE)) then
      writeln("Illegal conversion of big endian byte string to integer does not raise RANGE_ERROR.");
      okay := FALSE;
    end if;

    if okay then
      writeln("Conversion of big endian byte string to integer works correct.");
    else
      writeln(" ***** Conversion of big endian byte string to integer does not work correct.");
      writeln;
    end if;
  end func;


const proc: check_bytesLe2Int is func
  local
    var boolean: okay is TRUE;
  begin
    if  bytes2Int("\000;\000;\000;\000;\000;\000;\000;\128;", SIGNED, LE) <>            INT64_MIN or
        bytes2Int("\001;\000;\000;\000;\000;\000;\000;\128;", SIGNED, LE) <> -9223372036854775807 or
        bytes2Int("\255;\255;\255;\255;\255;\255;\255;\254;", SIGNED, LE) <>   -72057594037927937 or
        bytes2Int("\000;\000;\000;\000;\000;\000;\000;\255;", SIGNED, LE) <>   -72057594037927936 or
        bytes2Int("\255;\255;\255;\255;\255;\255;\127;\255;", SIGNED, LE) <>   -36028797018963969 or
        bytes2Int("\000;\000;\000;\000;\000;\000;\128;",      SIGNED, LE) <>   -36028797018963968 or
        bytes2Int("\255;\255;\255;\255;\255;\255;\254;",      SIGNED, LE) <>     -281474976710657 or
        bytes2Int("\000;\000;\000;\000;\000;\000;\255;",      SIGNED, LE) <>     -281474976710656 or
        bytes2Int("\255;\255;\255;\255;\255;\127;\255;",      SIGNED, LE) <>     -140737488355329 or
        bytes2Int("\000;\000;\000;\000;\000;\128;",           SIGNED, LE) <>     -140737488355328 or
        bytes2Int("\255;\255;\255;\255;\255;\254;",           SIGNED, LE) <>       -1099511627777 or
        bytes2Int("\000;\000;\000;\000;\000;\255;",           SIGNED, LE) <>       -1099511627776 or
        bytes2Int("\255;\255;\255;\255;\127;\255;",           SIGNED, LE) <>        -549755813889 or
        bytes2Int("\000;\000;\000;\000;\128;",                SIGNED, LE) <>        -549755813888 or
        bytes2Int("\255;\255;\255;\255;\254;",                SIGNED, LE) <>          -4294967297 or
        bytes2Int("\000;\000;\000;\000;\255;",                SIGNED, LE) <>          -4294967296 or
        bytes2Int("\255;\255;\255;\127;\255;",                SIGNED, LE) <>          -2147483649 or
        bytes2Int("\000;\000;\000;\128;",                     SIGNED, LE) <>          -2147483648 or
        bytes2Int("\255;\255;\255;\254;",                     SIGNED, LE) <>            -16777217 or
        bytes2Int("\000;\000;\000;\255;",                     SIGNED, LE) <>            -16777216 or
        bytes2Int("\255;\255;\127;\255;",                     SIGNED, LE) <>             -8388609 or
        bytes2Int("\000;\000;\128;",                          SIGNED, LE) <>             -8388608 or
        bytes2Int("\255;\255;\254;",                          SIGNED, LE) <>               -65537 or
        bytes2Int("\000;\000;\255;",                          SIGNED, LE) <>               -65536 or
        bytes2Int("\255;\000;\255;",                          SIGNED, LE) <>               -65281 or
        bytes2Int("\000;\001;\255;",                          SIGNED, LE) <>               -65280 or
        bytes2Int("\255;\001;\255;",                          SIGNED, LE) <>               -65025 or
        bytes2Int("\000;\002;\255;",                          SIGNED, LE) <>               -65024 or
        bytes2Int("\254;\127;\255;",                          SIGNED, LE) <>               -32770 or
        bytes2Int("\255;\127;\255;",                          SIGNED, LE) <>               -32769 or
        bytes2Int("\000;\128;",                               SIGNED, LE) <>               -32768 or
        bytes2Int("\001;\128;",                               SIGNED, LE) <>               -32767 or
        bytes2Int("\254;\128;",                               SIGNED, LE) <>               -32514 or
        bytes2Int("\255;\128;",                               SIGNED, LE) <>               -32513 or
        bytes2Int("\000;\129;",                               SIGNED, LE) <>               -32512 or
        bytes2Int("\001;\129;",                               SIGNED, LE) <>               -32511 or
        bytes2Int("\254;\129;",                               SIGNED, LE) <>               -32258 or
        bytes2Int("\255;\129;",                               SIGNED, LE) <>               -32257 or
        bytes2Int("\000;\130;",                               SIGNED, LE) <>               -32256 or
        bytes2Int("\001;\130;",                               SIGNED, LE) <>               -32255 or
        bytes2Int("\254;\253;",                               SIGNED, LE) <>                 -514 or
        bytes2Int("\255;\253;",                               SIGNED, LE) <>                 -513 or
        bytes2Int("\000;\254;",                               SIGNED, LE) <>                 -512 or
        bytes2Int("\001;\254;",                               SIGNED, LE) <>                 -511 or
        bytes2Int("\254;\254;",                               SIGNED, LE) <>                 -258 or
        bytes2Int("\255;\254;",                               SIGNED, LE) <>                 -257 or
        bytes2Int("\000;\255;",                               SIGNED, LE) <>                 -256 or
        bytes2Int("\001;\255;",                               SIGNED, LE) <>                 -255 or
        bytes2Int("\126;\255;",                               SIGNED, LE) <>                 -130 or
        bytes2Int("\127;\255;",                               SIGNED, LE) <>                 -129 or
        bytes2Int("\128;",                                    SIGNED, LE) <>                 -128 or
        bytes2Int("\129;",                                    SIGNED, LE) <>                 -127 or
        bytes2Int("\254;",                                    SIGNED, LE) <>                   -2 or
        bytes2Int("\255;",                                    SIGNED, LE) <>                   -1 or
        bytes2Int("\000;",                                    SIGNED, LE) <>                    0 or
        bytes2Int("\001;",                                    SIGNED, LE) <>                    1 or
        bytes2Int("\002;",                                    SIGNED, LE) <>                    2 or
        bytes2Int("\126;",                                    SIGNED, LE) <>                  126 or
        bytes2Int("\127;",                                    SIGNED, LE) <>                  127 or
        bytes2Int("\128;\000;",                               SIGNED, LE) <>                  128 or
        bytes2Int("\129;\000;",                               SIGNED, LE) <>                  129 or
        bytes2Int("\254;\000;",                               SIGNED, LE) <>                  254 or
        bytes2Int("\255;\000;",                               SIGNED, LE) <>                  255 or
        bytes2Int("\000;\001;",                               SIGNED, LE) <>                  256 or
        bytes2Int("\001;\001;",                               SIGNED, LE) <>                  257 or
        bytes2Int("\254;\001;",                               SIGNED, LE) <>                  510 or
        bytes2Int("\255;\001;",                               SIGNED, LE) <>                  511 or
        bytes2Int("\000;\002;",                               SIGNED, LE) <>                  512 or
        bytes2Int("\001;\002;",                               SIGNED, LE) <>                  513 or
        bytes2Int("\254;\125;",                               SIGNED, LE) <>                32254 or
        bytes2Int("\255;\125;",                               SIGNED, LE) <>                32255 or
        bytes2Int("\000;\126;",                               SIGNED, LE) <>                32256 or
        bytes2Int("\001;\126;",                               SIGNED, LE) <>                32257 or
        bytes2Int("\254;\126;",                               SIGNED, LE) <>                32510 or
        bytes2Int("\255;\126;",                               SIGNED, LE) <>                32511 or
        bytes2Int("\000;\127;",                               SIGNED, LE) <>                32512 or
        bytes2Int("\001;\127;",                               SIGNED, LE) <>                32513 or
        bytes2Int("\254;\127;",                               SIGNED, LE) <>                32766 or
        bytes2Int("\255;\127;",                               SIGNED, LE) <>                32767 or
        bytes2Int("\000;\128;\000;",                          SIGNED, LE) <>                32768 or
        bytes2Int("\001;\128;\000;",                          SIGNED, LE) <>                32769 or
        bytes2Int("\255;\253;\000;",                          SIGNED, LE) <>                65023 or
        bytes2Int("\000;\254;\000;",                          SIGNED, LE) <>                65024 or
        bytes2Int("\255;\254;\000;",                          SIGNED, LE) <>                65279 or
        bytes2Int("\000;\255;\000;",                          SIGNED, LE) <>                65280 or
        bytes2Int("\255;\255;\000;",                          SIGNED, LE) <>                65535 or
        bytes2Int("\000;\000;\001;",                          SIGNED, LE) <>                65536 or
        bytes2Int("\255;\255;\127;",                          SIGNED, LE) <>              8388607 or
        bytes2Int("\000;\000;\128;\000;",                     SIGNED, LE) <>              8388608 or
        bytes2Int("\255;\255;\255;\000;",                     SIGNED, LE) <>             16777215 or
        bytes2Int("\000;\000;\000;\001;",                     SIGNED, LE) <>             16777216 or
        bytes2Int("\255;\255;\255;\127;",                     SIGNED, LE) <>           2147483647 or
        bytes2Int("\000;\000;\000;\128;\000;",                SIGNED, LE) <>           2147483648 or
        bytes2Int("\255;\255;\255;\255;\000;",                SIGNED, LE) <>           4294967295 or
        bytes2Int("\000;\000;\000;\000;\001;",                SIGNED, LE) <>           4294967296 or
        bytes2Int("\255;\255;\255;\255;\127;",                SIGNED, LE) <>         549755813887 or
        bytes2Int("\000;\000;\000;\000;\128;\000;",           SIGNED, LE) <>         549755813888 or
        bytes2Int("\255;\255;\255;\255;\255;\000;",           SIGNED, LE) <>        1099511627775 or
        bytes2Int("\000;\000;\000;\000;\000;\001;",           SIGNED, LE) <>        1099511627776 or
        bytes2Int("\255;\255;\255;\255;\255;\127;",           SIGNED, LE) <>      140737488355327 or
        bytes2Int("\000;\000;\000;\000;\000;\128;\000;",      SIGNED, LE) <>      140737488355328 or
        bytes2Int("\255;\255;\255;\255;\255;\255;\000;",      SIGNED, LE) <>      281474976710655 or
        bytes2Int("\000;\000;\000;\000;\000;\000;\001;",      SIGNED, LE) <>      281474976710656 or
        bytes2Int("\255;\255;\255;\255;\255;\255;\127;",      SIGNED, LE) <>    36028797018963967 or
        bytes2Int("\000;\000;\000;\000;\000;\000;\128;\000;", SIGNED, LE) <>    36028797018963968 or
        bytes2Int("\255;\255;\255;\255;\255;\255;\255;\000;", SIGNED, LE) <>    72057594037927935 or
        bytes2Int("\000;\000;\000;\000;\000;\000;\000;\001;", SIGNED, LE) <>    72057594037927936 or
        bytes2Int("\255;\255;\255;\255;\255;\255;\255;\127;", SIGNED, LE) <>  9223372036854775807 then
      writeln("Conversion of little endian byte string to integer does not work correct.");
      okay := FALSE;
    end if;

    if  bytes2Int("\2;\1;",                   SIGNED, LE) <>                258 or
        bytes2Int("\3;\2;\1;",                SIGNED, LE) <>              66051 or
        bytes2Int("\4;\3;\2;\1;",             SIGNED, LE) <>           16909060 or
        bytes2Int("\5;\4;\3;\2;\1;",          SIGNED, LE) <>         4328719365 or
        bytes2Int("\6;\5;\4;\3;\2;\1;",       SIGNED, LE) <>      1108152157446 or
        bytes2Int("\7;\6;\5;\4;\3;\2;\1;",    SIGNED, LE) <>    283686952306183 or
        bytes2Int("\8;\7;\6;\5;\4;\3;\2;\1;", SIGNED, LE) <>  72623859790382856 or
        bytes2Int("\1;\2;",                   SIGNED, LE) <>                513 or
        bytes2Int("\1;\2;\3;",                SIGNED, LE) <>             197121 or
        bytes2Int("\1;\2;\3;\4;",             SIGNED, LE) <>           67305985 or
        bytes2Int("\1;\2;\3;\4;\5;",          SIGNED, LE) <>        21542142465 or
        bytes2Int("\1;\2;\3;\4;\5;\6;",       SIGNED, LE) <>      6618611909121 or
        bytes2Int("\1;\2;\3;\4;\5;\6;\7;",    SIGNED, LE) <>   1976943448883713 or
        bytes2Int("\1;\2;\3;\4;\5;\6;\7;\8;", SIGNED, LE) <> 578437695752307201 then
      writeln("Conversion of little endian byte string to integer does not work correct.");
      okay := FALSE;
    end if;

    if  bytes2Int("\1;\255;",                   SIGNED, LE) <>               -255 or
        bytes2Int("\2;\1;\255;",                SIGNED, LE) <>             -65278 or
        bytes2Int("\3;\2;\1;\255;",             SIGNED, LE) <>          -16711165 or
        bytes2Int("\4;\3;\2;\1;\255;",          SIGNED, LE) <>        -4278058236 or
        bytes2Int("\5;\4;\3;\2;\1;\255;",       SIGNED, LE) <>     -1095182908411 or
        bytes2Int("\6;\5;\4;\3;\2;\1;\255;",    SIGNED, LE) <>   -280366824553210 or
        bytes2Int("\7;\6;\5;\4;\3;\2;\1;\255;", SIGNED, LE) <> -71773907085621753 or
        bytes2Int("\1;\255;",                   SIGNED, LE) <>               -255 or
        bytes2Int("\1;\2;\255;",                SIGNED, LE) <>             -65023 or
        bytes2Int("\1;\2;\3;\255;",             SIGNED, LE) <>          -16580095 or
        bytes2Int("\1;\2;\3;\4;\255;",          SIGNED, LE) <>        -4227661311 or
        bytes2Int("\1;\2;\3;\4;\5;\255;",       SIGNED, LE) <>     -1077969485311 or
        bytes2Int("\1;\2;\3;\4;\5;\6;\255;",    SIGNED, LE) <>   -274856364801535 or
        bytes2Int("\1;\2;\3;\4;\5;\6;\7;\255;", SIGNED, LE) <> -70080650589044223 then
      writeln("Conversion of little endian byte string to integer does not work correct.");
      okay := FALSE;
    end if;

    if  bytes2Int("\000;\000;\000;\000;\000;\000;\000;\128;\255;\255;", SIGNED, LE) <>            INT64_MIN or
        bytes2Int("\001;\000;\000;\000;\000;\000;\000;\128;\255;\255;", SIGNED, LE) <> -9223372036854775807 or
        bytes2Int("\000;\000;\000;\000;\000;\000;\000;\255;\255;\255;", SIGNED, LE) <>   -72057594037927936 or
        bytes2Int("\255;\255;\255;\255;\255;\255;\127;\255;\255;\255;", SIGNED, LE) <>   -36028797018963969 or
        bytes2Int("\000;\000;\000;\000;\000;\000;\128;\255;\255;\255;", SIGNED, LE) <>   -36028797018963968 or
        bytes2Int("\127;\255;\255;\255;\255;",                          SIGNED, LE) <>                 -129 or
        bytes2Int("\127;\255;\255;\255;",                               SIGNED, LE) <>                 -129 or
        bytes2Int("\127;\255;\255;",                                    SIGNED, LE) <>                 -129 or
        bytes2Int("\128;\255;\255;\255;\255;",                          SIGNED, LE) <>                 -128 or
        bytes2Int("\128;\255;\255;\255;",                               SIGNED, LE) <>                 -128 or
        bytes2Int("\128;\255;\255;",                                    SIGNED, LE) <>                 -128 or
        bytes2Int("\128;\255;",                                         SIGNED, LE) <>                 -128 or
        bytes2Int("\254;\255;\255;\255;\255;\255;\255;\255;\255;\255;", SIGNED, LE) <>                   -2 or
        bytes2Int("\254;\255;\255;\255;\255;",                          SIGNED, LE) <>                   -2 or
        bytes2Int("\254;\255;\255;\255;",                               SIGNED, LE) <>                   -2 or
        bytes2Int("\254;\255;\255;",                                    SIGNED, LE) <>                   -2 or
        bytes2Int("\254;\255;",                                         SIGNED, LE) <>                   -2 or
        bytes2Int("\255;\255;\255;\255;\255;\255;\255;\255;\255;\255;", SIGNED, LE) <>                   -1 or
        bytes2Int("\255;\255;\255;\255;\255;",                          SIGNED, LE) <>                   -1 or
        bytes2Int("\255;\255;\255;\255;",                               SIGNED, LE) <>                   -1 or
        bytes2Int("\255;\255;\255;",                                    SIGNED, LE) <>                   -1 or
        bytes2Int("\255;\255;",                                         SIGNED, LE) <>                   -1 or
        bytes2Int("",                                                   SIGNED, LE) <>                    0 or
        bytes2Int("\000;\000;",                                         SIGNED, LE) <>                    0 or
        bytes2Int("\000;\000;\000;",                                    SIGNED, LE) <>                    0 or
        bytes2Int("\000;\000;\000;\000;",                               SIGNED, LE) <>                    0 or
        bytes2Int("\000;\000;\000;\000;\000;",                          SIGNED, LE) <>                    0 or
        bytes2Int("\000;\000;\000;\000;\000;\000;\000;\000;\000;\000;", SIGNED, LE) <>                    0 or
        bytes2Int("\001;\000;",                                         SIGNED, LE) <>                    1 or
        bytes2Int("\001;\000;\000;",                                    SIGNED, LE) <>                    1 or
        bytes2Int("\001;\000;\000;\000;",                               SIGNED, LE) <>                    1 or
        bytes2Int("\001;\000;\000;\000;\000;",                          SIGNED, LE) <>                    1 or
        bytes2Int("\001;\000;\000;\000;\000;\000;\000;\000;\000;\000;", SIGNED, LE) <>                    1 or
        bytes2Int("\127;\000;",                                         SIGNED, LE) <>                  127 or
        bytes2Int("\127;\000;\000;",                                    SIGNED, LE) <>                  127 or
        bytes2Int("\127;\000;\000;\000;",                               SIGNED, LE) <>                  127 or
        bytes2Int("\127;\000;\000;\000;\000;",                          SIGNED, LE) <>                  127 or
        bytes2Int("\128;\000;\000;",                                    SIGNED, LE) <>                  128 or
        bytes2Int("\128;\000;\000;\000;",                               SIGNED, LE) <>                  128 or
        bytes2Int("\128;\000;\000;\000;\000;",                          SIGNED, LE) <>                  128 or
        bytes2Int("\255;\255;\255;\255;\255;\255;\127;\000;\000;\000;", SIGNED, LE) <>    36028797018963967 or
        bytes2Int("\000;\000;\000;\000;\000;\000;\128;\000;\000;\000;", SIGNED, LE) <>    36028797018963968 or
        bytes2Int("\255;\255;\255;\255;\255;\255;\255;\000;\000;\000;", SIGNED, LE) <>    72057594037927935 or
        bytes2Int("\255;\255;\255;\255;\255;\255;\255;\127;\000;\000;", SIGNED, LE) <>  9223372036854775807 then
      writeln("Conversion of little endian byte string to integer does not work correct.");
      okay := FALSE;
    end if;

    if  bytes2Int("\000;",                                    UNSIGNED, LE) <>                   0 or
        bytes2Int("\001;",                                    UNSIGNED, LE) <>                   1 or
        bytes2Int("\002;",                                    UNSIGNED, LE) <>                   2 or
        bytes2Int("\126;",                                    UNSIGNED, LE) <>                 126 or
        bytes2Int("\127;",                                    UNSIGNED, LE) <>                 127 or
        bytes2Int("\128;",                                    UNSIGNED, LE) <>                 128 or
        bytes2Int("\129;",                                    UNSIGNED, LE) <>                 129 or
        bytes2Int("\254;",                                    UNSIGNED, LE) <>                 254 or
        bytes2Int("\255;",                                    UNSIGNED, LE) <>                 255 or
        bytes2Int("\000;\001;",                               UNSIGNED, LE) <>                 256 or
        bytes2Int("\001;\001;",                               UNSIGNED, LE) <>                 257 or
        bytes2Int("\254;\001;",                               UNSIGNED, LE) <>                 510 or
        bytes2Int("\255;\001;",                               UNSIGNED, LE) <>                 511 or
        bytes2Int("\000;\002;",                               UNSIGNED, LE) <>                 512 or
        bytes2Int("\001;\002;",                               UNSIGNED, LE) <>                 513 or
        bytes2Int("\254;\125;",                               UNSIGNED, LE) <>               32254 or
        bytes2Int("\255;\125;",                               UNSIGNED, LE) <>               32255 or
        bytes2Int("\000;\126;",                               UNSIGNED, LE) <>               32256 or
        bytes2Int("\001;\126;",                               UNSIGNED, LE) <>               32257 or
        bytes2Int("\254;\126;",                               UNSIGNED, LE) <>               32510 or
        bytes2Int("\255;\126;",                               UNSIGNED, LE) <>               32511 or
        bytes2Int("\000;\127;",                               UNSIGNED, LE) <>               32512 or
        bytes2Int("\001;\127;",                               UNSIGNED, LE) <>               32513 or
        bytes2Int("\254;\127;",                               UNSIGNED, LE) <>               32766 or
        bytes2Int("\255;\127;",                               UNSIGNED, LE) <>               32767 or
        bytes2Int("\000;\128;",                               UNSIGNED, LE) <>               32768 or
        bytes2Int("\001;\128;",                               UNSIGNED, LE) <>               32769 or
        bytes2Int("\255;\253;",                               UNSIGNED, LE) <>               65023 or
        bytes2Int("\000;\254;",                               UNSIGNED, LE) <>               65024 or
        bytes2Int("\255;\254;",                               UNSIGNED, LE) <>               65279 or
        bytes2Int("\000;\255;",                               UNSIGNED, LE) <>               65280 or
        bytes2Int("\255;\255;",                               UNSIGNED, LE) <>               65535 or
        bytes2Int("\000;\000;\001;",                          UNSIGNED, LE) <>               65536 or
        bytes2Int("\255;\255;\127;",                          UNSIGNED, LE) <>             8388607 or
        bytes2Int("\000;\000;\128;",                          UNSIGNED, LE) <>             8388608 or
        bytes2Int("\255;\255;\255;",                          UNSIGNED, LE) <>            16777215 or
        bytes2Int("\000;\000;\000;\001;",                     UNSIGNED, LE) <>            16777216 or
        bytes2Int("\255;\255;\255;\127;",                     UNSIGNED, LE) <>          2147483647 or
        bytes2Int("\000;\000;\000;\128;",                     UNSIGNED, LE) <>          2147483648 or
        bytes2Int("\255;\255;\255;\255;",                     UNSIGNED, LE) <>          4294967295 or
        bytes2Int("\000;\000;\000;\000;\001;",                UNSIGNED, LE) <>          4294967296 or
        bytes2Int("\255;\255;\255;\255;\127;",                UNSIGNED, LE) <>        549755813887 or
        bytes2Int("\000;\000;\000;\000;\128;",                UNSIGNED, LE) <>        549755813888 or
        bytes2Int("\255;\255;\255;\255;\255;",                UNSIGNED, LE) <>       1099511627775 or
        bytes2Int("\000;\000;\000;\000;\000;\001;",           UNSIGNED, LE) <>       1099511627776 or
        bytes2Int("\255;\255;\255;\255;\255;\127;",           UNSIGNED, LE) <>     140737488355327 or
        bytes2Int("\000;\000;\000;\000;\000;\128;",           UNSIGNED, LE) <>     140737488355328 or
        bytes2Int("\255;\255;\255;\255;\255;\255;",           UNSIGNED, LE) <>     281474976710655 or
        bytes2Int("\000;\000;\000;\000;\000;\000;\001;",      UNSIGNED, LE) <>     281474976710656 or
        bytes2Int("\255;\255;\255;\255;\255;\255;\127;",      UNSIGNED, LE) <>   36028797018963967 or
        bytes2Int("\000;\000;\000;\000;\000;\000;\128;",      UNSIGNED, LE) <>   36028797018963968 or
        bytes2Int("\255;\255;\255;\255;\255;\255;\255;",      UNSIGNED, LE) <>   72057594037927935 or
        bytes2Int("\000;\000;\000;\000;\000;\000;\000;\001;", UNSIGNED, LE) <>   72057594037927936 or
        bytes2Int("\255;\255;\255;\255;\255;\255;\255;\127;", UNSIGNED, LE) <> 9223372036854775807 then
      writeln("Conversion of unsigned little endian byte string to integer does not work correct.");
      okay := FALSE;
    end if;

    if  bytes2Int("\2;\1;",                   UNSIGNED, LE) <>                258 or
        bytes2Int("\3;\2;\1;",                UNSIGNED, LE) <>              66051 or
        bytes2Int("\4;\3;\2;\1;",             UNSIGNED, LE) <>           16909060 or
        bytes2Int("\5;\4;\3;\2;\1;",          UNSIGNED, LE) <>         4328719365 or
        bytes2Int("\6;\5;\4;\3;\2;\1;",       UNSIGNED, LE) <>      1108152157446 or
        bytes2Int("\7;\6;\5;\4;\3;\2;\1;",    UNSIGNED, LE) <>    283686952306183 or
        bytes2Int("\8;\7;\6;\5;\4;\3;\2;\1;", UNSIGNED, LE) <>  72623859790382856 or
        bytes2Int("\1;\2;",                   UNSIGNED, LE) <>                513 or
        bytes2Int("\1;\2;\3;",                UNSIGNED, LE) <>             197121 or
        bytes2Int("\1;\2;\3;\4;",             UNSIGNED, LE) <>           67305985 or
        bytes2Int("\1;\2;\3;\4;\5;",          UNSIGNED, LE) <>        21542142465 or
        bytes2Int("\1;\2;\3;\4;\5;\6;",       UNSIGNED, LE) <>      6618611909121 or
        bytes2Int("\1;\2;\3;\4;\5;\6;\7;",    UNSIGNED, LE) <>   1976943448883713 or
        bytes2Int("\1;\2;\3;\4;\5;\6;\7;\8;", UNSIGNED, LE) <> 578437695752307201 then
      writeln("Conversion of unsigned little endian byte string to integer does not work correct.");
      okay := FALSE;
    end if;

    if  bytes2Int("\1;\255;",                UNSIGNED, LE) <>             65281 or
        bytes2Int("\2;\1;\255;",             UNSIGNED, LE) <>          16711938 or
        bytes2Int("\3;\2;\1;\255;",          UNSIGNED, LE) <>        4278256131 or
        bytes2Int("\4;\3;\2;\1;\255;",       UNSIGNED, LE) <>     1095233569540 or
        bytes2Int("\5;\4;\3;\2;\1;\255;",    UNSIGNED, LE) <>   280379793802245 or
        bytes2Int("\6;\5;\4;\3;\2;\1;\255;", UNSIGNED, LE) <> 71777227213374726 or
        bytes2Int("\1;\255;",                UNSIGNED, LE) <>             65281 or
        bytes2Int("\1;\2;\255;",             UNSIGNED, LE) <>          16712193 or
        bytes2Int("\1;\2;\3;\255;",          UNSIGNED, LE) <>        4278387201 or
        bytes2Int("\1;\2;\3;\4;\255;",       UNSIGNED, LE) <>     1095283966465 or
        bytes2Int("\1;\2;\3;\4;\5;\255;",    UNSIGNED, LE) <>   280397007225345 or
        bytes2Int("\1;\2;\3;\4;\5;\6;\255;", UNSIGNED, LE) <> 71782737673126401 then
      writeln("Conversion of unsigned little endian byte string to integer does not work correct.");
      okay := FALSE;
    end if;

    if  bytes2Int("",                                                   UNSIGNED, LE) <>                   0 or
        bytes2Int("\000;\000;",                                         UNSIGNED, LE) <>                   0 or
        bytes2Int("\000;\000;\000;",                                    UNSIGNED, LE) <>                   0 or
        bytes2Int("\000;\000;\000;\000;",                               UNSIGNED, LE) <>                   0 or
        bytes2Int("\000;\000;\000;\000;\000;",                          UNSIGNED, LE) <>                   0 or
        bytes2Int("\000;\000;\000;\000;\000;\000;\000;\000;\000;\000;", UNSIGNED, LE) <>                   0 or
        bytes2Int("\001;\000;",                                         UNSIGNED, LE) <>                   1 or
        bytes2Int("\001;\000;\000;",                                    UNSIGNED, LE) <>                   1 or
        bytes2Int("\001;\000;\000;\000;",                               UNSIGNED, LE) <>                   1 or
        bytes2Int("\001;\000;\000;\000;\000;",                          UNSIGNED, LE) <>                   1 or
        bytes2Int("\001;\000;\000;\000;\000;\000;\000;\000;\000;\000;", UNSIGNED, LE) <>                   1 or
        bytes2Int("\127;\000;",                                         UNSIGNED, LE) <>                 127 or
        bytes2Int("\127;\000;\000;",                                    UNSIGNED, LE) <>                 127 or
        bytes2Int("\127;\000;\000;\000;",                               UNSIGNED, LE) <>                 127 or
        bytes2Int("\127;\000;\000;\000;\000;",                          UNSIGNED, LE) <>                 127 or
        bytes2Int("\128;\000;\000;",                                    UNSIGNED, LE) <>                 128 or
        bytes2Int("\128;\000;\000;\000;",                               UNSIGNED, LE) <>                 128 or
        bytes2Int("\128;\000;\000;\000;\000;",                          UNSIGNED, LE) <>                 128 or
        bytes2Int("\255;\255;\255;\255;\255;\255;\127;\000;\000;\000;", UNSIGNED, LE) <>   36028797018963967 or
        bytes2Int("\000;\000;\000;\000;\000;\000;\128;\000;\000;\000;", UNSIGNED, LE) <>   36028797018963968 or
        bytes2Int("\255;\255;\255;\255;\255;\255;\255;\000;\000;\000;", UNSIGNED, LE) <>   72057594037927935 or
        bytes2Int("\255;\255;\255;\255;\255;\255;\255;\127;\000;\000;", UNSIGNED, LE) <> 9223372036854775807 then
      writeln("Conversion of unsigned little endian byte string to integer does not work correct.");
      okay := FALSE;
    end if;

    if  not raisesRangeError(bytes2Int("\255;\255;\255;\255;\255;\255;\255;\255;\127;\000;",   SIGNED, LE)) or
        not raisesRangeError(bytes2Int("\255;\255;\255;\255;\255;\255;\255;\128;\000;\000;",   SIGNED, LE)) or
        not raisesRangeError(bytes2Int("\255;\255;\255;\256;\255;\255;\255;\127;\000;\000;",   SIGNED, LE)) or
        not raisesRangeError(bytes2Int("\255;\255;\255;\255;\255;\255;\255;\255;\128;\255;",   SIGNED, LE)) or
        not raisesRangeError(bytes2Int("\255;\255;\255;\255;\255;\255;\255;\127;\255;\255;",   SIGNED, LE)) or
        not raisesRangeError(bytes2Int("\255;\255;\255;\256;\255;\255;\255;\128;\255;\255;",   SIGNED, LE)) or
        not raisesRangeError(bytes2Int("\255;\255;\255;\255;\255;\255;\255;\255;\127;\000;", UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int("\255;\255;\255;\255;\255;\255;\255;\128;\000;\000;", UNSIGNED, LE)) or
        not raisesRangeError(bytes2Int("\255;\255;\255;\256;\255;\255;\255;\127;\000;\000;", UNSIGNED, LE)) then
      writeln("Illegal conversion of little endian byte string to integer does not raise RANGE_ERROR.");
      okay := FALSE;
    end if;

    if okay then
      writeln("Conversion of little endian byte string to integer works correct.");
    else
      writeln(" ***** Conversion of little endian byte string to integer does not work correct.");
      writeln;
    end if;
  end func;


const proc: check_negation is func
  local
    var boolean: okay is TRUE;
    var integer: number is 0;
    var integer: neg_number is 0;
  begin
    okay := TRUE;
    neg_number := 10;
    for number range -10 to 10 do
      if -number <> neg_number then
        write(" ***** -");
        write(number);
        writeln(" is not correct computed.");
        okay := FALSE;
      end if;
      decr(neg_number);
    end for;
    if okay then
      writeln("-i is correct computed in the range -10 to 10.");
    end if;
  end func;


const proc: check_add is func
  local
    var boolean: okay is TRUE;
  begin
    if             INT64_MIN +                    0 <>            INT64_MIN or
                   INT64_MIN +  9223372036854775807 <>                   -1 or
        -9223372036854775807 +                   -1 <>            INT64_MIN or
        -9223372036854775807 +  9223372036854775807 <>                    0 or
                           0 +            INT64_MIN <>            INT64_MIN or
                           0 + -9223372036854775807 <> -9223372036854775807 or
                           0 +                    0 <>                    0 or
                           0 +           2147483647 <>           2147483647 or
                           0 +           2147483648 <>           2147483648 or
                           0 +  9223372036854775807 <>  9223372036854775807 or
                           2 +                    3 <>                    5 or
                         127 +                  127 <>                  254 or
                         255 +                  255 <>                  510 or
                       18341 +                26783 <>                45124 or
                       32767 +                32767 <>                65534 or
                       35759 +                58537 <>                94296 or
                       65535 +                65535 <>               131070 or
                       73819 +               124303 <>               198122 or
                  2147483647 +                    0 <>           2147483647 or
                  2147483648 +                    0 <>           2147483648 or
         9223372036854775807 +            INT64_MIN <>                   -1 or
         9223372036854775807 + -9223372036854775807 <>                    0 or
         9223372036854775807 +                    0 <>  9223372036854775807 then
      writeln(" ***** Addition does not work correct.");
      okay := FALSE;
    end if;

    if             INT64_MIN +                    0 <>            INT64_MIN or
        -9223372036854775807 +                   -1 <>            INT64_MIN or
        -9223372036854775806 +                   -2 <>            INT64_MIN or
        -9223372036854775805 +                   -3 <>            INT64_MIN or
        -9223372036854775797 +                  -11 <>            INT64_MIN or
        -9223372036854774951 +                 -857 <>            INT64_MIN or
        -9223372036854771169 +                -4639 <>            INT64_MIN or
        -9223372036854737535 +               -38273 <>            INT64_MIN or
        -9223372036854131365 +              -644443 <>            INT64_MIN or
        -9223372036844899255 +             -9876553 <>            INT64_MIN or
        -9223372036842430155 +            -12345653 <>            INT64_MIN or
        -9223372036731319017 +           -123456791 <>            INT64_MIN or
        -9223372033817775309 +          -3037000499 <>            INT64_MIN or
        -9223371962145462840 +         -74709312968 <>            INT64_MIN or
        -9223371289760066695 +        -747094709113 <>            INT64_MIN or
        -9223371102989282771 +        -933865493037 <>            INT64_MIN or
        -9223357724693674121 +      -14312161101687 <>            INT64_MIN or
        -9223131047853734480 +     -240989001041328 <>            INT64_MIN or
        -9221383812660584221 +    -1988224194191587 <>            INT64_MIN or
        -9212609642412704892 +   -10762394442070916 <>            INT64_MIN or
        -8384883669867978008 +  -838488366986797800 <>            INT64_MIN or
        -6148914691236517206 + -3074457345618258602 <>            INT64_MIN or
        -3074457345618258602 + -6148914691236517206 <>            INT64_MIN or
         -838488366986797800 + -8384883669867978008 <>            INT64_MIN or
          -10762394442070916 + -9212609642412704892 <>            INT64_MIN or
           -1988224194191587 + -9221383812660584221 <>            INT64_MIN or
            -240989001041328 + -9223131047853734480 <>            INT64_MIN or
             -14312161101687 + -9223357724693674121 <>            INT64_MIN or
               -933865493037 + -9223371102989282771 <>            INT64_MIN or
               -747094709113 + -9223371289760066695 <>            INT64_MIN or
                -74709312968 + -9223371962145462840 <>            INT64_MIN or
                 -3037000499 + -9223372033817775309 <>            INT64_MIN or
                  -123456791 + -9223372036731319017 <>            INT64_MIN or
                   -12345653 + -9223372036842430155 <>            INT64_MIN or
                    -9876553 + -9223372036844899255 <>            INT64_MIN or
                     -644443 + -9223372036854131365 <>            INT64_MIN or
                      -38273 + -9223372036854737535 <>            INT64_MIN or
                       -4639 + -9223372036854771169 <>            INT64_MIN or
                        -857 + -9223372036854774951 <>            INT64_MIN or
                         -11 + -9223372036854775797 <>            INT64_MIN or
                          -3 + -9223372036854775805 <>            INT64_MIN or
                          -2 + -9223372036854775806 <>            INT64_MIN or
                          -1 + -9223372036854775807 <>            INT64_MIN or
                           0 +            INT64_MIN <>            INT64_MIN or
         9223372036854775807 +                    0 <>  9223372036854775807 or
         9223372036854775806 +                    1 <>  9223372036854775807 or
         9223372036854775805 +                    2 <>  9223372036854775807 or
         9223372036854775804 +                    3 <>  9223372036854775807 or
         9223372036854775796 +                   11 <>  9223372036854775807 or
         9223372036854774950 +                  857 <>  9223372036854775807 or
         9223372036854771168 +                 4639 <>  9223372036854775807 or
         9223372036854737534 +                38273 <>  9223372036854775807 or
         9223372036854131364 +               644443 <>  9223372036854775807 or
         9223372036844899254 +              9876553 <>  9223372036854775807 or
         9223372036842430154 +             12345653 <>  9223372036854775807 or
         9223372036731319016 +            123456791 <>  9223372036854775807 or
         9223372033817775308 +           3037000499 <>  9223372036854775807 or
         9223371962145462839 +          74709312968 <>  9223372036854775807 or
         9223371289760066694 +         747094709113 <>  9223372036854775807 or
         9223371102989282770 +         933865493037 <>  9223372036854775807 or
         9223357724693674120 +       14312161101687 <>  9223372036854775807 or
         9223131047853734479 +      240989001041328 <>  9223372036854775807 or
         9221383812660584220 +     1988224194191587 <>  9223372036854775807 or
         9212609642412704891 +    10762394442070916 <>  9223372036854775807 or
         8384883669867978007 +   838488366986797800 <>  9223372036854775807 or
         6148914691236517205 +  3074457345618258602 <>  9223372036854775807 or
         3074457345618258602 +  6148914691236517205 <>  9223372036854775807 or
          838488366986797800 +  8384883669867978007 <>  9223372036854775807 or
           10762394442070916 +  9212609642412704891 <>  9223372036854775807 or
            1988224194191587 +  9221383812660584220 <>  9223372036854775807 or
             240989001041328 +  9223131047853734479 <>  9223372036854775807 or
              14312161101687 +  9223357724693674120 <>  9223372036854775807 or
                933865493037 +  9223371102989282770 <>  9223372036854775807 or
                747094709113 +  9223371289760066694 <>  9223372036854775807 or
                 74709312968 +  9223371962145462839 <>  9223372036854775807 or
                  3037000499 +  9223372033817775308 <>  9223372036854775807 or
                   123456791 +  9223372036731319016 <>  9223372036854775807 or
                    12345653 +  9223372036842430154 <>  9223372036854775807 or
                     9876553 +  9223372036844899254 <>  9223372036854775807 or
                      644443 +  9223372036854131364 <>  9223372036854775807 or
                       38273 +  9223372036854737534 <>  9223372036854775807 or
                        4639 +  9223372036854771168 <>  9223372036854775807 or
                         857 +  9223372036854774950 <>  9223372036854775807 or
                          11 +  9223372036854775796 <>  9223372036854775807 or
                           3 +  9223372036854775804 <>  9223372036854775807 or
                           2 +  9223372036854775805 <>  9223372036854775807 or
                           1 +  9223372036854775806 <>  9223372036854775807 or
                           0 +  9223372036854775807 <>  9223372036854775807 then
      writeln(" ***** Addition does not work correct.");
      okay := FALSE;
    end if;

(*
    if  not raisesNumericError(           INT64_MIN +                   -1) or
        not raisesNumericError(-9223372036854775807 +                   -2) or
        not raisesNumericError(-9223372036854775806 +                   -3) or
        not raisesNumericError(-9223372036854775798 +                  -11) or
        not raisesNumericError(-9223372036854774952 +                 -857) or
        not raisesNumericError(-9223372036854771170 +                -4639) or
        not raisesNumericError(-9223372036854737536 +               -38273) or
        not raisesNumericError(-9223372036854131366 +              -644443) or
        not raisesNumericError(-9223372036844899256 +             -9876553) or
        not raisesNumericError(-9223372036842430156 +            -12345653) or
        not raisesNumericError(-9223372036731319018 +           -123456791) or
        not raisesNumericError(-9223372033817775310 +          -3037000499) or
        not raisesNumericError(-9223371962145462841 +         -74709312968) or
        not raisesNumericError(-9223371289760066696 +        -747094709113) or
        not raisesNumericError(-9223371102989282772 +        -933865493037) or
        not raisesNumericError(-9223357724693674122 +      -14312161101687) or
        not raisesNumericError(-9223131047853734481 +     -240989001041328) or
        not raisesNumericError(-9221383812660584222 +    -1988224194191587) or
        not raisesNumericError(-9212609642412704893 +   -10762394442070916) or
        not raisesNumericError(-8384883669867978009 +  -838488366986797800) or
        not raisesNumericError(-6148914691236517207 + -3074457345618258602) or
        not raisesNumericError(-3074457345618258602 + -6148914691236517207) or
        not raisesNumericError( -838488366986797800 + -8384883669867978009) or
        not raisesNumericError(  -10762394442070916 + -9212609642412704893) or
        not raisesNumericError(   -1988224194191587 + -9221383812660584222) or
        not raisesNumericError(    -240989001041328 + -9223131047853734481) or
        not raisesNumericError(     -14312161101687 + -9223357724693674122) or
        not raisesNumericError(       -933865493037 + -9223371102989282772) or
        not raisesNumericError(       -747094709113 + -9223371289760066696) or
        not raisesNumericError(        -74709312968 + -9223371962145462841) or
        not raisesNumericError(         -3037000499 + -9223372033817775310) or
        not raisesNumericError(          -123456791 + -9223372036731319018) or
        not raisesNumericError(           -12345653 + -9223372036842430156) or
        not raisesNumericError(            -9876553 + -9223372036844899256) or
        not raisesNumericError(             -644443 + -9223372036854131366) or
        not raisesNumericError(              -38273 + -9223372036854737536) or
        not raisesNumericError(               -4639 + -9223372036854771170) or
        not raisesNumericError(                -857 + -9223372036854774952) or
        not raisesNumericError(                 -11 + -9223372036854775798) or
        not raisesNumericError(                  -3 + -9223372036854775806) or
        not raisesNumericError(                  -2 + -9223372036854775807) or
        not raisesNumericError(                  -1 +            INT64_MIN) or
        not raisesNumericError( 9223372036854775807 +                    1) or
        not raisesNumericError( 9223372036854775806 +                    2) or
        not raisesNumericError( 9223372036854775805 +                    3) or
        not raisesNumericError( 9223372036854775797 +                   11) or
        not raisesNumericError( 9223372036854774951 +                  857) or
        not raisesNumericError( 9223372036854771169 +                 4639) or
        not raisesNumericError( 9223372036854737535 +                38273) or
        not raisesNumericError( 9223372036854131365 +               644443) or
        not raisesNumericError( 9223372036844899255 +              9876553) or
        not raisesNumericError( 9223372036842430155 +             12345653) or
        not raisesNumericError( 9223372036731319017 +            123456791) or
        not raisesNumericError( 9223372033817775309 +           3037000499) or
        not raisesNumericError( 9223371962145462840 +          74709312968) or
        not raisesNumericError( 9223371289760066695 +         747094709113) or
        not raisesNumericError( 9223371102989282771 +         933865493037) or
        not raisesNumericError( 9223357724693674121 +       14312161101687) or
        not raisesNumericError( 9223131047853734480 +      240989001041328) or
        not raisesNumericError( 9221383812660584221 +     1988224194191587) or
        not raisesNumericError( 9212609642412704892 +    10762394442070916) or
        not raisesNumericError( 8384883669867978008 +   838488366986797800) or
        not raisesNumericError( 6148914691236517206 +  3074457345618258602) or
        not raisesNumericError( 3074457345618258602 +  6148914691236517206) or
        not raisesNumericError(  838488366986797800 +  8384883669867978008) or
        not raisesNumericError(   10762394442070916 +  9212609642412704892) or
        not raisesNumericError(    1988224194191587 +  9221383812660584221) or
        not raisesNumericError(     240989001041328 +  9223131047853734480) or
        not raisesNumericError(      14312161101687 +  9223357724693674121) or
        not raisesNumericError(        933865493037 +  9223371102989282771) or
        not raisesNumericError(        747094709113 +  9223371289760066695) or
        not raisesNumericError(         74709312968 +  9223371962145462840) or
        not raisesNumericError(          3037000499 +  9223372033817775309) or
        not raisesNumericError(           123456791 +  9223372036731319017) or
        not raisesNumericError(            12345653 +  9223372036842430155) or
        not raisesNumericError(             9876553 +  9223372036844899255) or
        not raisesNumericError(              644443 +  9223372036854131365) or
        not raisesNumericError(               38273 +  9223372036854737535) or
        not raisesNumericError(                4639 +  9223372036854771169) or
        not raisesNumericError(                 857 +  9223372036854774951) or
        not raisesNumericError(                  11 +  9223372036854775797) or
        not raisesNumericError(                   3 +  9223372036854775805) or
        not raisesNumericError(                   2 +  9223372036854775806) or
        not raisesNumericError(                   1 +  9223372036854775807) then
      writeln(" ***** Overflow when computing addition does not raise NUMERIC_ERROR.");
      okay := FALSE;
    end if;
*)

    if okay then
      writeln("Addition works correct for selected values.");
    else
      writeln(" ***** Addition does not work correct.");
    end if;
  end func;


const proc: check_subtract is func
  local
    var boolean: okay is TRUE;
  begin
    if             INT64_MIN -                    0 <>            INT64_MIN or
                   INT64_MIN - -9223372036854775807 <>                   -1 or
        -9223372036854775807 -                    1 <>            INT64_MIN or
        -9223372036854775807 - -9223372036854775807 <>                    0 or
                          -1 -  9223372036854775807 <>            INT64_MIN or
                           0 -  9223372036854775807 <> -9223372036854775807 or
                           0 -                    0 <>                    0 or
                           0 -          -2147483647 <>           2147483647 or
                           0 -          -2147483648 <>           2147483648 or
                           0 - -9223372036854775807 <>  9223372036854775807 or
                           2 -                   -3 <>                    5 or
                         127 -                 -127 <>                  254 or
                         255 -                 -255 <>                  510 or
                       18341 -               -26783 <>                45124 or
                       32767 -               -32767 <>                65534 or
                       35759 -               -58537 <>                94296 or
                       65535 -               -65535 <>               131070 or
                       73819 -              -124303 <>               198122 or
                  2147483647 -                    0 <>           2147483647 or
                  2147483648 -                    0 <>           2147483648 or
         9223372036854775807 -  9223372036854775807 <>                    0 or
         9223372036854775807 -                    0 <>  9223372036854775807 then
      writeln(" ***** Subtraction with selected values does not work correct.");
      okay := FALSE;
    end if;

    if             INT64_MIN -                    0 <>            INT64_MIN or
        -9223372036854775807 -                    1 <>            INT64_MIN or
        -9223372036854775806 -                    2 <>            INT64_MIN or
        -9223372036854775805 -                    3 <>            INT64_MIN or
        -9223372036854775797 -                   11 <>            INT64_MIN or
        -9223372036854774951 -                  857 <>            INT64_MIN or
        -9223372036854771169 -                 4639 <>            INT64_MIN or
        -9223372036854737535 -                38273 <>            INT64_MIN or
        -9223372036854131365 -               644443 <>            INT64_MIN or
        -9223372036844899255 -              9876553 <>            INT64_MIN or
        -9223372036842430155 -             12345653 <>            INT64_MIN or
        -9223372036731319017 -            123456791 <>            INT64_MIN or
        -9223372033817775309 -           3037000499 <>            INT64_MIN or
        -9223371962145462840 -          74709312968 <>            INT64_MIN or
        -9223371289760066695 -         747094709113 <>            INT64_MIN or
        -9223371102989282771 -         933865493037 <>            INT64_MIN or
        -9223357724693674121 -       14312161101687 <>            INT64_MIN or
        -9223131047853734480 -      240989001041328 <>            INT64_MIN or
        -9221383812660584221 -     1988224194191587 <>            INT64_MIN or
        -9212609642412704892 -    10762394442070916 <>            INT64_MIN or
        -8384883669867978008 -   838488366986797800 <>            INT64_MIN or
        -6148914691236517206 -  3074457345618258602 <>            INT64_MIN or
        -3074457345618258602 -  6148914691236517206 <>            INT64_MIN or
         -838488366986797800 -  8384883669867978008 <>            INT64_MIN or
          -10762394442070916 -  9212609642412704892 <>            INT64_MIN or
           -1988224194191587 -  9221383812660584221 <>            INT64_MIN or
            -240989001041328 -  9223131047853734480 <>            INT64_MIN or
             -14312161101687 -  9223357724693674121 <>            INT64_MIN or
               -933865493037 -  9223371102989282771 <>            INT64_MIN or
               -747094709113 -  9223371289760066695 <>            INT64_MIN or
                -74709312968 -  9223371962145462840 <>            INT64_MIN or
                 -3037000499 -  9223372033817775309 <>            INT64_MIN or
                  -123456791 -  9223372036731319017 <>            INT64_MIN or
                   -12345653 -  9223372036842430155 <>            INT64_MIN or
                    -9876553 -  9223372036844899255 <>            INT64_MIN or
                     -644443 -  9223372036854131365 <>            INT64_MIN or
                      -38273 -  9223372036854737535 <>            INT64_MIN or
                       -4639 -  9223372036854771169 <>            INT64_MIN or
                        -857 -  9223372036854774951 <>            INT64_MIN or
                         -11 -  9223372036854775797 <>            INT64_MIN or
                          -3 -  9223372036854775805 <>            INT64_MIN or
                          -2 -  9223372036854775806 <>            INT64_MIN or
                          -1 -  9223372036854775807 <>            INT64_MIN then
      writeln(" ***** Subtraction that results in the minimum integer does not work correct.");
      okay := FALSE;
    end if;

    if   9223372036854775807 -                    0 <>  9223372036854775807 or
         9223372036854775806 -                   -1 <>  9223372036854775807 or
         9223372036854775805 -                   -2 <>  9223372036854775807 or
         9223372036854775804 -                   -3 <>  9223372036854775807 or
         9223372036854775796 -                  -11 <>  9223372036854775807 or
         9223372036854774950 -                 -857 <>  9223372036854775807 or
         9223372036854771168 -                -4639 <>  9223372036854775807 or
         9223372036854737534 -               -38273 <>  9223372036854775807 or
         9223372036854131364 -              -644443 <>  9223372036854775807 or
         9223372036844899254 -             -9876553 <>  9223372036854775807 or
         9223372036842430154 -            -12345653 <>  9223372036854775807 or
         9223372036731319016 -           -123456791 <>  9223372036854775807 or
         9223372033817775308 -          -3037000499 <>  9223372036854775807 or
         9223371962145462839 -         -74709312968 <>  9223372036854775807 or
         9223371289760066694 -        -747094709113 <>  9223372036854775807 or
         9223371102989282770 -        -933865493037 <>  9223372036854775807 or
         9223357724693674120 -      -14312161101687 <>  9223372036854775807 or
         9223131047853734479 -     -240989001041328 <>  9223372036854775807 or
         9221383812660584220 -    -1988224194191587 <>  9223372036854775807 or
         9212609642412704891 -   -10762394442070916 <>  9223372036854775807 or
         8384883669867978007 -  -838488366986797800 <>  9223372036854775807 or
         6148914691236517205 - -3074457345618258602 <>  9223372036854775807 or
         3074457345618258602 - -6148914691236517205 <>  9223372036854775807 or
          838488366986797800 - -8384883669867978007 <>  9223372036854775807 or
           10762394442070916 - -9212609642412704891 <>  9223372036854775807 or
            1988224194191587 - -9221383812660584220 <>  9223372036854775807 or
             240989001041328 - -9223131047853734479 <>  9223372036854775807 or
              14312161101687 - -9223357724693674120 <>  9223372036854775807 or
                933865493037 - -9223371102989282770 <>  9223372036854775807 or
                747094709113 - -9223371289760066694 <>  9223372036854775807 or
                 74709312968 - -9223371962145462839 <>  9223372036854775807 or
                  3037000499 - -9223372033817775308 <>  9223372036854775807 or
                   123456791 - -9223372036731319016 <>  9223372036854775807 or
                    12345653 - -9223372036842430154 <>  9223372036854775807 or
                     9876553 - -9223372036844899254 <>  9223372036854775807 or
                      644443 - -9223372036854131364 <>  9223372036854775807 or
                       38273 - -9223372036854737534 <>  9223372036854775807 or
                        4639 - -9223372036854771168 <>  9223372036854775807 or
                         857 - -9223372036854774950 <>  9223372036854775807 or
                          11 - -9223372036854775796 <>  9223372036854775807 or
                           3 - -9223372036854775804 <>  9223372036854775807 or
                           2 - -9223372036854775805 <>  9223372036854775807 or
                           1 - -9223372036854775806 <>  9223372036854775807 or
                           0 - -9223372036854775807 <>  9223372036854775807 then
      writeln(" ***** Subtraction that results in the maximum integer does not work correct.");
      okay := FALSE;
    end if;

(*
    if  not raisesNumericError(           INT64_MIN -                    1) or
        not raisesNumericError(-9223372036854775807 -                    2) or
        not raisesNumericError(-9223372036854775806 -                    3) or
        not raisesNumericError(-9223372036854775798 -                   11) or
        not raisesNumericError(-9223372036854774952 -                  857) or
        not raisesNumericError(-9223372036854771170 -                 4639) or
        not raisesNumericError(-9223372036854737536 -                38273) or
        not raisesNumericError(-9223372036854131366 -               644443) or
        not raisesNumericError(-9223372036844899256 -              9876553) or
        not raisesNumericError(-9223372036842430156 -             12345653) or
        not raisesNumericError(-9223372036731319018 -            123456791) or
        not raisesNumericError(-9223372033817775310 -           3037000499) or
        not raisesNumericError(-9223371962145462841 -          74709312968) or
        not raisesNumericError(-9223371289760066696 -         747094709113) or
        not raisesNumericError(-9223371102989282772 -         933865493037) or
        not raisesNumericError(-9223357724693674122 -       14312161101687) or
        not raisesNumericError(-9223131047853734481 -      240989001041328) or
        not raisesNumericError(-9221383812660584222 -     1988224194191587) or
        not raisesNumericError(-9212609642412704893 -    10762394442070916) or
        not raisesNumericError(-8384883669867978009 -   838488366986797800) or
        not raisesNumericError(-6148914691236517207 -  3074457345618258602) or
        not raisesNumericError(-3074457345618258602 -  6148914691236517207) or
        not raisesNumericError( -838488366986797800 -  8384883669867978009) or
        not raisesNumericError(  -10762394442070916 -  9212609642412704893) or
        not raisesNumericError(   -1988224194191587 -  9221383812660584222) or
        not raisesNumericError(    -240989001041328 -  9223131047853734481) or
        not raisesNumericError(     -14312161101687 -  9223357724693674122) or
        not raisesNumericError(       -933865493037 -  9223371102989282772) or
        not raisesNumericError(       -747094709113 -  9223371289760066696) or
        not raisesNumericError(        -74709312968 -  9223371962145462841) or
        not raisesNumericError(         -3037000499 -  9223372033817775310) or
        not raisesNumericError(          -123456791 -  9223372036731319018) or
        not raisesNumericError(           -12345653 -  9223372036842430156) or
        not raisesNumericError(            -9876553 -  9223372036844899256) or
        not raisesNumericError(             -644443 -  9223372036854131366) or
        not raisesNumericError(              -38273 -  9223372036854737536) or
        not raisesNumericError(               -4639 -  9223372036854771170) or
        not raisesNumericError(                -857 -  9223372036854774952) or
        not raisesNumericError(                 -11 -  9223372036854775798) or
        not raisesNumericError(                  -3 -  9223372036854775806) or
        not raisesNumericError(                  -2 -  9223372036854775807) or
        not raisesNumericError( 9223372036854775807 -                   -1) or
        not raisesNumericError( 9223372036854775806 -                   -2) or
        not raisesNumericError( 9223372036854775805 -                   -3) or
        not raisesNumericError( 9223372036854775797 -                  -11) or
        not raisesNumericError( 9223372036854774951 -                 -857) or
        not raisesNumericError( 9223372036854771169 -                -4639) or
        not raisesNumericError( 9223372036854737535 -               -38273) or
        not raisesNumericError( 9223372036854131365 -              -644443) or
        not raisesNumericError( 9223372036844899255 -             -9876553) or
        not raisesNumericError( 9223372036842430155 -            -12345653) or
        not raisesNumericError( 9223372036731319017 -           -123456791) or
        not raisesNumericError( 9223372033817775309 -          -3037000499) or
        not raisesNumericError( 9223371962145462840 -         -74709312968) or
        not raisesNumericError( 9223371289760066695 -        -747094709113) or
        not raisesNumericError( 9223371102989282771 -        -933865493037) or
        not raisesNumericError( 9223357724693674121 -      -14312161101687) or
        not raisesNumericError( 9223131047853734480 -     -240989001041328) or
        not raisesNumericError( 9221383812660584221 -    -1988224194191587) or
        not raisesNumericError( 9212609642412704892 -   -10762394442070916) or
        not raisesNumericError( 8384883669867978008 -  -838488366986797800) or
        not raisesNumericError( 6148914691236517206 - -3074457345618258602) or
        not raisesNumericError( 3074457345618258602 - -6148914691236517206) or
        not raisesNumericError(  838488366986797800 - -8384883669867978008) or
        not raisesNumericError(   10762394442070916 - -9212609642412704892) or
        not raisesNumericError(    1988224194191587 - -9221383812660584221) or
        not raisesNumericError(     240989001041328 - -9223131047853734480) or
        not raisesNumericError(      14312161101687 - -9223357724693674121) or
        not raisesNumericError(        933865493037 - -9223371102989282771) or
        not raisesNumericError(        747094709113 - -9223371289760066695) or
        not raisesNumericError(         74709312968 - -9223371962145462840) or
        not raisesNumericError(          3037000499 - -9223372033817775309) or
        not raisesNumericError(           123456791 - -9223372036731319017) or
        not raisesNumericError(            12345653 - -9223372036842430155) or
        not raisesNumericError(             9876553 - -9223372036844899255) or
        not raisesNumericError(              644443 - -9223372036854131365) or
        not raisesNumericError(               38273 - -9223372036854737535) or
        not raisesNumericError(                4639 - -9223372036854771169) or
        not raisesNumericError(                 857 - -9223372036854774951) or
        not raisesNumericError(                  11 - -9223372036854775797) or
        not raisesNumericError(                   3 - -9223372036854775805) or
        not raisesNumericError(                   2 - -9223372036854775806) or
        not raisesNumericError(                   1 - -9223372036854775807) then
      writeln(" ***** Overflow when computing subtraction does not raise NUMERIC_ERROR.");
      okay := FALSE;
    end if;
*)

    if okay then
      writeln("Subtraction works correct for selected values.");
    else
      writeln(" ***** Subtraction does not work correct.");
    end if;
  end func;


const proc: check_mult is func
  local
    var boolean: okay is TRUE;
  begin
    if  -2147483648 * -2147483648 <>  4611686018427387904 or
        -2147483648 * -2147483647 <>  4611686016279904256 or
        -2147483648 *  2147483647 <> -4611686016279904256 or
        -2147483648 *  2147483648 <> -4611686018427387904 or
        -2147483647 * -2147483648 <>  4611686016279904256 or
        -2147483647 * -2147483647 <>  4611686014132420609 or
        -2147483647 *  2147483647 <> -4611686014132420609 or
        -2147483647 *  2147483648 <> -4611686016279904256 or
         2147483647 * -2147483648 <> -4611686016279904256 or
         2147483647 * -2147483647 <> -4611686014132420609 or
         2147483647 *  2147483647 <>  4611686014132420609 or
         2147483647 *  2147483648 <>  4611686016279904256 or
         2147483648 * -2147483648 <> -4611686018427387904 or
         2147483648 * -2147483647 <> -4611686016279904256 or
         2147483648 *  2147483647 <>  4611686016279904256 or
         2147483648 *  2147483648 <>  4611686018427387904 then
      writeln(" ***** Multiplication with big and small factors does not work correct.");
      okay := FALSE;
    end if;

    if  -4611686018427387903 *                   -2 <>  9223372036854775806 or
        -3074457345618258602 *                   -3 <>  9223372036854775806 or
         -838488366986797800 *                  -11 <>  9223372036854775800 or
          -10762394442070916 *                 -857 <>  9223372036854775012 or
           -1988224194191587 *                -4639 <>  9223372036854772093 or
            -240989001041328 *               -38273 <>  9223372036854746544 or
             -14312161101687 *              -644443 <>  9223372036854475341 or
               -933865493037 *             -9876553 <>  9223372036851061461 or
               -747094709113 *            -12345653 <>  9223372036845035789 or
                -74709312968 *           -123456791 <>  9223372036843965688 or
                 -3037000499 *          -3037000499 <>  9223372030926249001 or
                  -123456791 *         -74709312968 <>  9223372036843965688 or
                   -12345653 *        -747094709113 <>  9223372036845035789 or
                    -9876553 *        -933865493037 <>  9223372036851061461 or
                     -644443 *      -14312161101687 <>  9223372036854475341 or
                      -38273 *     -240989001041328 <>  9223372036854746544 or
                       -4639 *    -1988224194191587 <>  9223372036854772093 or
                        -857 *   -10762394442070916 <>  9223372036854775012 or
                         -11 *  -838488366986797800 <>  9223372036854775800 or
                          -3 * -3074457345618258602 <>  9223372036854775806 or
                          -2 * -4611686018427387903 <>  9223372036854775806 or
        -4611686018427387904 *                    2 <>            INT64_MIN or
        -3074457345618258602 *                    3 <> -9223372036854775806 or
         -838488366986797800 *                   11 <> -9223372036854775800 or
          -10762394442070916 *                  857 <> -9223372036854775012 or
           -1988224194191587 *                 4639 <> -9223372036854772093 or
            -240989001041328 *                38273 <> -9223372036854746544 or
             -14312161101687 *               644443 <> -9223372036854475341 or
               -933865493037 *              9876553 <> -9223372036851061461 or
               -747094709113 *             12345653 <> -9223372036845035789 or
                -74709312968 *            123456791 <> -9223372036843965688 or
                 -3037000499 *           3037000499 <> -9223372030926249001 or
                  -123456791 *          74709312968 <> -9223372036843965688 or
                   -12345653 *         747094709113 <> -9223372036845035789 or
                    -9876553 *         933865493037 <> -9223372036851061461 or
                     -644443 *       14312161101687 <> -9223372036854475341 or
                      -38273 *      240989001041328 <> -9223372036854746544 or
                       -4639 *     1988224194191587 <> -9223372036854772093 or
                        -857 *    10762394442070916 <> -9223372036854775012 or
                         -11 *   838488366986797800 <> -9223372036854775800 or
                          -3 *  3074457345618258602 <> -9223372036854775806 or
                          -2 *  4611686018427387904 <>            INT64_MIN or
         4611686018427387904 *                   -2 <>            INT64_MIN or
         3074457345618258602 *                   -3 <> -9223372036854775806 or
          838488366986797800 *                  -11 <> -9223372036854775800 or
           10762394442070916 *                 -857 <> -9223372036854775012 or
            1988224194191587 *                -4639 <> -9223372036854772093 or
             240989001041328 *               -38273 <> -9223372036854746544 or
              14312161101687 *              -644443 <> -9223372036854475341 or
                933865493037 *             -9876553 <> -9223372036851061461 or
                747094709113 *            -12345653 <> -9223372036845035789 or
                 74709312968 *           -123456791 <> -9223372036843965688 or
                  3037000499 *          -3037000499 <> -9223372030926249001 or
                   123456791 *         -74709312968 <> -9223372036843965688 or
                    12345653 *        -747094709113 <> -9223372036845035789 or
                     9876553 *        -933865493037 <> -9223372036851061461 or
                      644443 *      -14312161101687 <> -9223372036854475341 or
                       38273 *     -240989001041328 <> -9223372036854746544 or
                        4639 *    -1988224194191587 <> -9223372036854772093 or
                         857 *   -10762394442070916 <> -9223372036854775012 or
                          11 *  -838488366986797800 <> -9223372036854775800 or
                           3 * -3074457345618258602 <> -9223372036854775806 or
                           2 * -4611686018427387904 <>            INT64_MIN or
         4611686018427387903 *                    2 <>  9223372036854775806 or
         3074457345618258602 *                    3 <>  9223372036854775806 or
          838488366986797800 *                   11 <>  9223372036854775800 or
           10762394442070916 *                  857 <>  9223372036854775012 or
            1988224194191587 *                 4639 <>  9223372036854772093 or
             240989001041328 *                38273 <>  9223372036854746544 or
              14312161101687 *               644443 <>  9223372036854475341 or
                933865493037 *              9876553 <>  9223372036851061461 or
                747094709113 *             12345653 <>  9223372036845035789 or
                 74709312968 *            123456791 <>  9223372036843965688 or
                  3037000499 *           3037000499 <>  9223372030926249001 or
                   123456791 *          74709312968 <>  9223372036843965688 or
                    12345653 *         747094709113 <>  9223372036845035789 or
                     9876553 *         933865493037 <>  9223372036851061461 or
                      644443 *       14312161101687 <>  9223372036854475341 or
                       38273 *      240989001041328 <>  9223372036854746544 or
                        4639 *     1988224194191587 <>  9223372036854772093 or
                         857 *    10762394442070916 <>  9223372036854775012 or
                          11 *   838488366986797800 <>  9223372036854775800 or
                           3 *  3074457345618258602 <>  9223372036854775806 or
                           2 *  4611686018427387903 <>  9223372036854775806 then
      writeln(" ***** Multiplication with big products does not work correct.");
      okay := FALSE;
    end if;

(*
    if  not raisesNumericError(-4611686018427387904 *                   -2) or
        not raisesNumericError(-4611686018427387903 *                   -3) or
        not raisesNumericError(-3074457345618258603 *                   -3) or
        not raisesNumericError(-3074457345618258602 *                   -4) or
        not raisesNumericError( -838488366986797801 *                  -11) or
        not raisesNumericError( -838488366986797800 *                  -12) or
        not raisesNumericError(  -10762394442070917 *                 -857) or
        not raisesNumericError(  -10762394442070916 *                 -858) or
        not raisesNumericError(   -1988224194191588 *                -4639) or
        not raisesNumericError(   -1988224194191587 *                -4640) or
        not raisesNumericError(    -240989001041329 *               -38273) or
        not raisesNumericError(    -240989001041328 *               -38274) or
        not raisesNumericError(     -14312161101688 *              -644443) or
        not raisesNumericError(     -14312161101687 *              -644444) or
        not raisesNumericError(       -933865493038 *             -9876553) or
        not raisesNumericError(       -933865493037 *             -9876554) or
        not raisesNumericError(       -747094709114 *            -12345653) or
        not raisesNumericError(       -747094709113 *            -12345654) or
        not raisesNumericError(        -74709312969 *           -123456791) or
        not raisesNumericError(        -74709312968 *           -123456792) or
        not raisesNumericError(         -3037000500 *          -3037000500) or
        not raisesNumericError(          -123456792 *         -74709312968) or
        not raisesNumericError(          -123456791 *         -74709312969) or
        not raisesNumericError(           -12345654 *        -747094709113) or
        not raisesNumericError(           -12345653 *        -747094709114) or
        not raisesNumericError(            -9876554 *        -933865493037) or
        not raisesNumericError(            -9876553 *        -933865493038) or
        not raisesNumericError(             -644444 *      -14312161101687) or
        not raisesNumericError(             -644443 *      -14312161101688) or
        not raisesNumericError(              -38274 *     -240989001041328) or
        not raisesNumericError(              -38273 *     -240989001041329) or
        not raisesNumericError(               -4640 *    -1988224194191587) or
        not raisesNumericError(               -4639 *    -1988224194191588) or
        not raisesNumericError(                -858 *   -10762394442070916) or
        not raisesNumericError(                -857 *   -10762394442070917) or
        not raisesNumericError(                 -12 *  -838488366986797800) or
        not raisesNumericError(                 -11 *  -838488366986797801) or
        not raisesNumericError(                  -4 * -3074457345618258602) or
        not raisesNumericError(                  -3 * -3074457345618258603) or
        not raisesNumericError(                  -3 * -4611686018427387903) or
        not raisesNumericError(                  -2 * -4611686018427387904) or
        not raisesNumericError(-4611686018427387905 *                    2) or
        not raisesNumericError(-4611686018427387904 *                    3) or
        not raisesNumericError(-3074457345618258603 *                    3) or
        not raisesNumericError(-3074457345618258602 *                    4) or
        not raisesNumericError( -838488366986797801 *                   11) or
        not raisesNumericError( -838488366986797800 *                   12) or
        not raisesNumericError(  -10762394442070917 *                  857) or
        not raisesNumericError(  -10762394442070916 *                  858) or
        not raisesNumericError(   -1988224194191588 *                 4639) or
        not raisesNumericError(   -1988224194191587 *                 4640) or
        not raisesNumericError(    -240989001041329 *                38273) or
        not raisesNumericError(    -240989001041328 *                38274) or
        not raisesNumericError(     -14312161101688 *               644443) or
        not raisesNumericError(     -14312161101687 *               644444) or
        not raisesNumericError(       -933865493038 *              9876553) or
        not raisesNumericError(       -933865493037 *              9876554) or
        not raisesNumericError(       -747094709114 *             12345653) or
        not raisesNumericError(       -747094709113 *             12345654) or
        not raisesNumericError(        -74709312969 *            123456791) or
        not raisesNumericError(        -74709312968 *            123456792) or
        not raisesNumericError(         -3037000500 *           3037000500) or
        not raisesNumericError(          -123456792 *          74709312968) or
        not raisesNumericError(          -123456791 *          74709312969) or
        not raisesNumericError(           -12345654 *         747094709113) or
        not raisesNumericError(           -12345653 *         747094709114) or
        not raisesNumericError(            -9876554 *         933865493037) or
        not raisesNumericError(            -9876553 *         933865493038) or
        not raisesNumericError(             -644444 *       14312161101687) or
        not raisesNumericError(             -644443 *       14312161101688) or
        not raisesNumericError(              -38274 *      240989001041328) or
        not raisesNumericError(              -38273 *      240989001041329) or
        not raisesNumericError(               -4640 *     1988224194191587) or
        not raisesNumericError(               -4639 *     1988224194191588) or
        not raisesNumericError(                -858 *    10762394442070916) or
        not raisesNumericError(                -857 *    10762394442070917) or
        not raisesNumericError(                 -12 *   838488366986797800) or
        not raisesNumericError(                 -11 *   838488366986797801) or
        not raisesNumericError(                  -4 *  3074457345618258602) or
        not raisesNumericError(                  -3 *  3074457345618258603) or
        not raisesNumericError(                  -3 *  4611686018427387904) or
        not raisesNumericError(                  -2 *  4611686018427387905) or
        not raisesNumericError( 4611686018427387905 *                   -2) or
        not raisesNumericError( 4611686018427387904 *                   -3) or
        not raisesNumericError( 3074457345618258603 *                   -3) or
        not raisesNumericError( 3074457345618258602 *                   -4) or
        not raisesNumericError(  838488366986797801 *                  -11) or
        not raisesNumericError(  838488366986797800 *                  -12) or
        not raisesNumericError(   10762394442070917 *                 -857) or
        not raisesNumericError(   10762394442070916 *                 -858) or
        not raisesNumericError(    1988224194191588 *                -4639) or
        not raisesNumericError(    1988224194191587 *                -4640) or
        not raisesNumericError(     240989001041329 *               -38273) or
        not raisesNumericError(     240989001041328 *               -38274) or
        not raisesNumericError(      14312161101688 *              -644443) or
        not raisesNumericError(      14312161101687 *              -644444) or
        not raisesNumericError(        933865493038 *             -9876553) or
        not raisesNumericError(        933865493037 *             -9876554) or
        not raisesNumericError(        747094709114 *            -12345653) or
        not raisesNumericError(        747094709113 *            -12345654) or
        not raisesNumericError(         74709312969 *           -123456791) or
        not raisesNumericError(         74709312968 *           -123456792) or
        not raisesNumericError(          3037000500 *          -3037000500) or
        not raisesNumericError(           123456792 *         -74709312968) or
        not raisesNumericError(           123456791 *         -74709312969) or
        not raisesNumericError(            12345654 *        -747094709113) or
        not raisesNumericError(            12345653 *        -747094709114) or
        not raisesNumericError(             9876554 *        -933865493037) or
        not raisesNumericError(             9876553 *        -933865493038) or
        not raisesNumericError(              644444 *      -14312161101687) or
        not raisesNumericError(              644443 *      -14312161101688) or
        not raisesNumericError(               38274 *     -240989001041328) or
        not raisesNumericError(               38273 *     -240989001041329) or
        not raisesNumericError(                4640 *    -1988224194191587) or
        not raisesNumericError(                4639 *    -1988224194191588) or
        not raisesNumericError(                 858 *   -10762394442070916) or
        not raisesNumericError(                 857 *   -10762394442070917) or
        not raisesNumericError(                  12 *  -838488366986797800) or
        not raisesNumericError(                  11 *  -838488366986797801) or
        not raisesNumericError(                   4 * -3074457345618258602) or
        not raisesNumericError(                   3 * -3074457345618258603) or
        not raisesNumericError(                   3 * -4611686018427387904) or
        not raisesNumericError(                   2 * -4611686018427387905) or
        not raisesNumericError( 4611686018427387904 *                    2) or
        not raisesNumericError( 4611686018427387903 *                    3) or
        not raisesNumericError( 3074457345618258603 *                    3) or
        not raisesNumericError( 3074457345618258602 *                    4) or
        not raisesNumericError(  838488366986797801 *                   11) or
        not raisesNumericError(  838488366986797800 *                   12) or
        not raisesNumericError(   10762394442070917 *                  857) or
        not raisesNumericError(   10762394442070916 *                  858) or
        not raisesNumericError(    1988224194191588 *                 4639) or
        not raisesNumericError(    1988224194191587 *                 4640) or
        not raisesNumericError(     240989001041329 *                38273) or
        not raisesNumericError(     240989001041328 *                38274) or
        not raisesNumericError(      14312161101688 *               644443) or
        not raisesNumericError(      14312161101687 *               644444) or
        not raisesNumericError(        933865493038 *              9876553) or
        not raisesNumericError(        933865493037 *              9876554) or
        not raisesNumericError(        747094709114 *             12345653) or
        not raisesNumericError(        747094709113 *             12345654) or
        not raisesNumericError(         74709312969 *            123456791) or
        not raisesNumericError(         74709312968 *            123456792) or
        not raisesNumericError(          3037000500 *           3037000500) or
        not raisesNumericError(           123456792 *          74709312968) or
        not raisesNumericError(           123456791 *          74709312969) or
        not raisesNumericError(            12345654 *         747094709113) or
        not raisesNumericError(            12345653 *         747094709114) or
        not raisesNumericError(             9876554 *         933865493037) or
        not raisesNumericError(             9876553 *         933865493038) or
        not raisesNumericError(              644444 *       14312161101687) or
        not raisesNumericError(              644443 *       14312161101688) or
        not raisesNumericError(               38274 *      240989001041328) or
        not raisesNumericError(               38273 *      240989001041329) or
        not raisesNumericError(                4640 *     1988224194191587) or
        not raisesNumericError(                4639 *     1988224194191588) or
        not raisesNumericError(                 858 *    10762394442070916) or
        not raisesNumericError(                 857 *    10762394442070917) or
        not raisesNumericError(                  12 *   838488366986797800) or
        not raisesNumericError(                  11 *   838488366986797801) or
        not raisesNumericError(                   4 *  3074457345618258602) or
        not raisesNumericError(                   3 *  3074457345618258603) or
        not raisesNumericError(                   3 *  4611686018427387903) or
        not raisesNumericError(                   2 *  4611686018427387904) then
      writeln(" ***** Overflow when computing multiplication does not raise NUMERIC_ERROR.");
      okay := FALSE;
    end if;
*)

    if okay then
      writeln("Multiplication works correct for selected values.");
    else
      writeln(" ***** Multiplication does not work correct.");
    end if;
  end func;


const proc: check_division is func
  local
    var boolean: okay is TRUE;
    var boolean: p_div_p is FALSE;
    var boolean: n_div_n is FALSE;
    var boolean: p_div_n is FALSE;
    var boolean: n_div_p is FALSE;
    var integer: dividend is 0;
    var integer: divisor is 0;
  begin
    writeln("a div b is integer division and a rem b is integer remainder:");

    if ( 11 div  4) =  2  and  ( 11 rem  4) =  3 then
      if (-11 div -4) =  2  and  (-11 rem -4) = -3 then
        if ( ( 11 div -4) = -2  and  ( 11 rem -4) =  3 ) and
           ( (-11 div  4) = -2  and  (-11 rem  4) = -3 ) then
          writeln("for positive and negative a and b");
        else
          writeln("only when a and b have the same sign");
        end if;
      else
        writeln("only when a and b are positive");
      end if;
    else
      writeln("not even when a and b are positive");
    end if;

    p_div_p := ( 11 div  4) *  4 + ( 11 rem  4) =  11;
    n_div_n := (-11 div -4) * -4 + (-11 rem -4) = -11;
    p_div_n := ( 11 div -4) * -4 + ( 11 rem -4) =  11;
    n_div_p := (-11 div  4) *  4 + (-11 rem  4) = -11;

    write("(a div b) * b + (a rem b) = a  holds ");

    if p_div_p then
      if n_div_n then
        if p_div_n and n_div_p then
          writeln("for positive and negative a and b");
        else
          writeln("only when a and b have the same sign");
        end if;
      else
        writeln("only when a and b are positive");
      end if;
    else
      writeln("not even when a and b are positive");
    end if;

    for dividend range -9 to 9 do
      for divisor range -4 to 4 do
        if divisor <> 0 then
          if (dividend div divisor) * divisor + dividend rem divisor <>
              dividend then
            okay := FALSE;
          end if;
        end if;
      end for;
    end for;
    if okay then
      writeln("Div and rem work correct for selected values.");
    else
      writeln(" ***** div and rem does not work correct.");
    end if;

    okay := TRUE;
    for dividend range -9 to 9 do
      for divisor range -4 to 4 do
        if divisor <> 0 then
          if (dividend mdiv divisor) * divisor + dividend mod divisor <>
              dividend then
            okay := FALSE;
          end if;
        end if;
      end for;
    end for;
    if okay then
      writeln("Mdiv and mod work correct for selected values.");
    else
      writeln(" ***** mdiv and mod does not work correct.");
    end if;
  end func;


const proc: check_div is func
  local
    var boolean: okay is TRUE;
  begin
    okay := TRUE;
    if   10 div  5 <>  2 or
          9 div  5 <>  1 or
          8 div  5 <>  1 or
          7 div  5 <>  1 or
          6 div  5 <>  1 or
          5 div  5 <>  1 or
          4 div  5 <>  0 or
          3 div  5 <>  0 or
          2 div  5 <>  0 or
          1 div  5 <>  0 or
          0 div  5 <>  0 or
         -1 div  5 <>  0 or
         -2 div  5 <>  0 or
         -3 div  5 <>  0 or
         -4 div  5 <>  0 or
         -5 div  5 <> -1 or
         -6 div  5 <> -1 or
         -7 div  5 <> -1 or
         -8 div  5 <> -1 or
         -9 div  5 <> -1 or
        -10 div  5 <> -2 or
         10 div  4 <>  2 or
          9 div  4 <>  2 or
          8 div  4 <>  2 or
          7 div  4 <>  1 or
          6 div  4 <>  1 or
          5 div  4 <>  1 or
          4 div  4 <>  1 or
          3 div  4 <>  0 or
          2 div  4 <>  0 or
          1 div  4 <>  0 or
          0 div  4 <>  0 or
         -1 div  4 <>  0 or
         -2 div  4 <>  0 or
         -3 div  4 <>  0 or
         -4 div  4 <> -1 or
         -5 div  4 <> -1 or
         -6 div  4 <> -1 or
         -7 div  4 <> -1 or
         -8 div  4 <> -2 or
         -9 div  4 <> -2 or
        -10 div  4 <> -2 or
         10 div  3 <>  3 or
          9 div  3 <>  3 or
          8 div  3 <>  2 or
          7 div  3 <>  2 or
          6 div  3 <>  2 or
          5 div  3 <>  1 or
          4 div  3 <>  1 or
          3 div  3 <>  1 or
          2 div  3 <>  0 or
          1 div  3 <>  0 or
          0 div  3 <>  0 or
         -1 div  3 <>  0 or
         -2 div  3 <>  0 or
         -3 div  3 <> -1 or
         -4 div  3 <> -1 or
         -5 div  3 <> -1 or
         -6 div  3 <> -2 or
         -7 div  3 <> -2 or
         -8 div  3 <> -2 or
         -9 div  3 <> -3 or
        -10 div  3 <> -3 or
         10 div  2 <>  5 or
          9 div  2 <>  4 or
          8 div  2 <>  4 or
          7 div  2 <>  3 or
          6 div  2 <>  3 or
          5 div  2 <>  2 or
          4 div  2 <>  2 or
          3 div  2 <>  1 or
          2 div  2 <>  1 or
          1 div  2 <>  0 or
          0 div  2 <>  0 or
         -1 div  2 <>  0 or
         -2 div  2 <> -1 or
         -3 div  2 <> -1 or
         -4 div  2 <> -2 or
         -5 div  2 <> -2 or
         -6 div  2 <> -3 or
         -7 div  2 <> -3 or
         -8 div  2 <> -4 or
         -9 div  2 <> -4 or
        -10 div  2 <> -5 or
         10 div  1 <> 10 or
          9 div  1 <>  9 or
          8 div  1 <>  8 or
          7 div  1 <>  7 or
          6 div  1 <>  6 or
          5 div  1 <>  5 or
          4 div  1 <>  4 or
          3 div  1 <>  3 or
          2 div  1 <>  2 or
          1 div  1 <>  1 or
          0 div  1 <>  0 or
         -1 div  1 <> -1 or
         -2 div  1 <> -2 or
         -3 div  1 <> -3 or
         -4 div  1 <> -4 or
         -5 div  1 <> -5 or
         -6 div  1 <> -6 or
         -7 div  1 <> -7 or
         -8 div  1 <> -8 or
         -9 div  1 <> -9 or
        -10 div  1 <> -10 or
         10 div -1 <> -10 or
          9 div -1 <> -9 or
          8 div -1 <> -8 or
          7 div -1 <> -7 or
          6 div -1 <> -6 or
          5 div -1 <> -5 or
          4 div -1 <> -4 or
          3 div -1 <> -3 or
          2 div -1 <> -2 or
          1 div -1 <> -1 or
          0 div -1 <>  0 or
         -1 div -1 <>  1 or
         -2 div -1 <>  2 or
         -3 div -1 <>  3 or
         -4 div -1 <>  4 or
         -5 div -1 <>  5 or
         -6 div -1 <>  6 or
         -7 div -1 <>  7 or
         -8 div -1 <>  8 or
         -9 div -1 <>  9 or
        -10 div -1 <> 10 or
         10 div -2 <> -5 or
          9 div -2 <> -4 or
          8 div -2 <> -4 or
          7 div -2 <> -3 or
          6 div -2 <> -3 or
          5 div -2 <> -2 or
          4 div -2 <> -2 or
          3 div -2 <> -1 or
          2 div -2 <> -1 or
          1 div -2 <>  0 or
          0 div -2 <>  0 or
         -1 div -2 <>  0 or
         -2 div -2 <>  1 or
         -3 div -2 <>  1 or
         -4 div -2 <>  2 or
         -5 div -2 <>  2 or
         -6 div -2 <>  3 or
         -7 div -2 <>  3 or
         -8 div -2 <>  4 or
         -9 div -2 <>  4 or
        -10 div -2 <>  5 or
         10 div -3 <> -3 or
          9 div -3 <> -3 or
          8 div -3 <> -2 or
          7 div -3 <> -2 or
          6 div -3 <> -2 or
          5 div -3 <> -1 or
          4 div -3 <> -1 or
          3 div -3 <> -1 or
          2 div -3 <>  0 or
          1 div -3 <>  0 or
          0 div -3 <>  0 or
         -1 div -3 <>  0 or
         -2 div -3 <>  0 or
         -3 div -3 <>  1 or
         -4 div -3 <>  1 or
         -5 div -3 <>  1 or
         -6 div -3 <>  2 or
         -7 div -3 <>  2 or
         -8 div -3 <>  2 or
         -9 div -3 <>  3 or
        -10 div -3 <>  3 or
         10 div -4 <> -2 or
          9 div -4 <> -2 or
          8 div -4 <> -2 or
          7 div -4 <> -1 or
          6 div -4 <> -1 or
          5 div -4 <> -1 or
          4 div -4 <> -1 or
          3 div -4 <>  0 or
          2 div -4 <>  0 or
          1 div -4 <>  0 or
          0 div -4 <>  0 or
         -1 div -4 <>  0 or
         -2 div -4 <>  0 or
         -3 div -4 <>  0 or
         -4 div -4 <>  1 or
         -5 div -4 <>  1 or
         -6 div -4 <>  1 or
         -7 div -4 <>  1 or
         -8 div -4 <>  2 or
         -9 div -4 <>  2 or
        -10 div -4 <>  2 or
         10 div -5 <> -2 or
          9 div -5 <> -1 or
          8 div -5 <> -1 or
          7 div -5 <> -1 or
          6 div -5 <> -1 or
          5 div -5 <> -1 or
          4 div -5 <>  0 or
          3 div -5 <>  0 or
          2 div -5 <>  0 or
          1 div -5 <>  0 or
          0 div -5 <>  0 or
         -1 div -5 <>  0 or
         -2 div -5 <>  0 or
         -3 div -5 <>  0 or
         -4 div -5 <>  0 or
         -5 div -5 <>  1 or
         -6 div -5 <>  1 or
         -7 div -5 <>  1 or
         -8 div -5 <>  1 or
         -9 div -5 <>  1 or
        -10 div -5 <>  2 then
      writeln(" ***** div with two constants does not work correct.");
      okay := FALSE;
    end if;

    if  intExpr( 10) div  5 <>  2 or
        intExpr(  9) div  5 <>  1 or
        intExpr(  8) div  5 <>  1 or
        intExpr(  7) div  5 <>  1 or
        intExpr(  6) div  5 <>  1 or
        intExpr(  5) div  5 <>  1 or
        intExpr(  4) div  5 <>  0 or
        intExpr(  3) div  5 <>  0 or
        intExpr(  2) div  5 <>  0 or
        intExpr(  1) div  5 <>  0 or
        intExpr(  0) div  5 <>  0 or
        intExpr( -1) div  5 <>  0 or
        intExpr( -2) div  5 <>  0 or
        intExpr( -3) div  5 <>  0 or
        intExpr( -4) div  5 <>  0 or
        intExpr( -5) div  5 <> -1 or
        intExpr( -6) div  5 <> -1 or
        intExpr( -7) div  5 <> -1 or
        intExpr( -8) div  5 <> -1 or
        intExpr( -9) div  5 <> -1 or
        intExpr(-10) div  5 <> -2 or
        intExpr( 10) div  4 <>  2 or
        intExpr(  9) div  4 <>  2 or
        intExpr(  8) div  4 <>  2 or
        intExpr(  7) div  4 <>  1 or
        intExpr(  6) div  4 <>  1 or
        intExpr(  5) div  4 <>  1 or
        intExpr(  4) div  4 <>  1 or
        intExpr(  3) div  4 <>  0 or
        intExpr(  2) div  4 <>  0 or
        intExpr(  1) div  4 <>  0 or
        intExpr(  0) div  4 <>  0 or
        intExpr( -1) div  4 <>  0 or
        intExpr( -2) div  4 <>  0 or
        intExpr( -3) div  4 <>  0 or
        intExpr( -4) div  4 <> -1 or
        intExpr( -5) div  4 <> -1 or
        intExpr( -6) div  4 <> -1 or
        intExpr( -7) div  4 <> -1 or
        intExpr( -8) div  4 <> -2 or
        intExpr( -9) div  4 <> -2 or
        intExpr(-10) div  4 <> -2 or
        intExpr( 10) div  3 <>  3 or
        intExpr(  9) div  3 <>  3 or
        intExpr(  8) div  3 <>  2 or
        intExpr(  7) div  3 <>  2 or
        intExpr(  6) div  3 <>  2 or
        intExpr(  5) div  3 <>  1 or
        intExpr(  4) div  3 <>  1 or
        intExpr(  3) div  3 <>  1 or
        intExpr(  2) div  3 <>  0 or
        intExpr(  1) div  3 <>  0 or
        intExpr(  0) div  3 <>  0 or
        intExpr( -1) div  3 <>  0 or
        intExpr( -2) div  3 <>  0 or
        intExpr( -3) div  3 <> -1 or
        intExpr( -4) div  3 <> -1 or
        intExpr( -5) div  3 <> -1 or
        intExpr( -6) div  3 <> -2 or
        intExpr( -7) div  3 <> -2 or
        intExpr( -8) div  3 <> -2 or
        intExpr( -9) div  3 <> -3 or
        intExpr(-10) div  3 <> -3 or
        intExpr( 10) div  2 <>  5 or
        intExpr(  9) div  2 <>  4 or
        intExpr(  8) div  2 <>  4 or
        intExpr(  7) div  2 <>  3 or
        intExpr(  6) div  2 <>  3 or
        intExpr(  5) div  2 <>  2 or
        intExpr(  4) div  2 <>  2 or
        intExpr(  3) div  2 <>  1 or
        intExpr(  2) div  2 <>  1 or
        intExpr(  1) div  2 <>  0 or
        intExpr(  0) div  2 <>  0 or
        intExpr( -1) div  2 <>  0 or
        intExpr( -2) div  2 <> -1 or
        intExpr( -3) div  2 <> -1 or
        intExpr( -4) div  2 <> -2 or
        intExpr( -5) div  2 <> -2 or
        intExpr( -6) div  2 <> -3 or
        intExpr( -7) div  2 <> -3 or
        intExpr( -8) div  2 <> -4 or
        intExpr( -9) div  2 <> -4 or
        intExpr(-10) div  2 <> -5 or
        intExpr( 10) div  1 <> 10 or
        intExpr(  9) div  1 <>  9 or
        intExpr(  8) div  1 <>  8 or
        intExpr(  7) div  1 <>  7 or
        intExpr(  6) div  1 <>  6 or
        intExpr(  5) div  1 <>  5 or
        intExpr(  4) div  1 <>  4 or
        intExpr(  3) div  1 <>  3 or
        intExpr(  2) div  1 <>  2 or
        intExpr(  1) div  1 <>  1 or
        intExpr(  0) div  1 <>  0 or
        intExpr( -1) div  1 <> -1 or
        intExpr( -2) div  1 <> -2 or
        intExpr( -3) div  1 <> -3 or
        intExpr( -4) div  1 <> -4 or
        intExpr( -5) div  1 <> -5 or
        intExpr( -6) div  1 <> -6 or
        intExpr( -7) div  1 <> -7 or
        intExpr( -8) div  1 <> -8 or
        intExpr( -9) div  1 <> -9 or
        intExpr(-10) div  1 <> -10 or
        intExpr( 10) div -1 <> -10 or
        intExpr(  9) div -1 <> -9 or
        intExpr(  8) div -1 <> -8 or
        intExpr(  7) div -1 <> -7 or
        intExpr(  6) div -1 <> -6 or
        intExpr(  5) div -1 <> -5 or
        intExpr(  4) div -1 <> -4 or
        intExpr(  3) div -1 <> -3 or
        intExpr(  2) div -1 <> -2 or
        intExpr(  1) div -1 <> -1 or
        intExpr(  0) div -1 <>  0 or
        intExpr( -1) div -1 <>  1 or
        intExpr( -2) div -1 <>  2 or
        intExpr( -3) div -1 <>  3 or
        intExpr( -4) div -1 <>  4 or
        intExpr( -5) div -1 <>  5 or
        intExpr( -6) div -1 <>  6 or
        intExpr( -7) div -1 <>  7 or
        intExpr( -8) div -1 <>  8 or
        intExpr( -9) div -1 <>  9 or
        intExpr(-10) div -1 <> 10 or
        intExpr( 10) div -2 <> -5 or
        intExpr(  9) div -2 <> -4 or
        intExpr(  8) div -2 <> -4 or
        intExpr(  7) div -2 <> -3 or
        intExpr(  6) div -2 <> -3 or
        intExpr(  5) div -2 <> -2 or
        intExpr(  4) div -2 <> -2 or
        intExpr(  3) div -2 <> -1 or
        intExpr(  2) div -2 <> -1 or
        intExpr(  1) div -2 <>  0 or
        intExpr(  0) div -2 <>  0 or
        intExpr( -1) div -2 <>  0 or
        intExpr( -2) div -2 <>  1 or
        intExpr( -3) div -2 <>  1 or
        intExpr( -4) div -2 <>  2 or
        intExpr( -5) div -2 <>  2 or
        intExpr( -6) div -2 <>  3 or
        intExpr( -7) div -2 <>  3 or
        intExpr( -8) div -2 <>  4 or
        intExpr( -9) div -2 <>  4 or
        intExpr(-10) div -2 <>  5 or
        intExpr( 10) div -3 <> -3 or
        intExpr(  9) div -3 <> -3 or
        intExpr(  8) div -3 <> -2 or
        intExpr(  7) div -3 <> -2 or
        intExpr(  6) div -3 <> -2 or
        intExpr(  5) div -3 <> -1 or
        intExpr(  4) div -3 <> -1 or
        intExpr(  3) div -3 <> -1 or
        intExpr(  2) div -3 <>  0 or
        intExpr(  1) div -3 <>  0 or
        intExpr(  0) div -3 <>  0 or
        intExpr( -1) div -3 <>  0 or
        intExpr( -2) div -3 <>  0 or
        intExpr( -3) div -3 <>  1 or
        intExpr( -4) div -3 <>  1 or
        intExpr( -5) div -3 <>  1 or
        intExpr( -6) div -3 <>  2 or
        intExpr( -7) div -3 <>  2 or
        intExpr( -8) div -3 <>  2 or
        intExpr( -9) div -3 <>  3 or
        intExpr(-10) div -3 <>  3 or
        intExpr( 10) div -4 <> -2 or
        intExpr(  9) div -4 <> -2 or
        intExpr(  8) div -4 <> -2 or
        intExpr(  7) div -4 <> -1 or
        intExpr(  6) div -4 <> -1 or
        intExpr(  5) div -4 <> -1 or
        intExpr(  4) div -4 <> -1 or
        intExpr(  3) div -4 <>  0 or
        intExpr(  2) div -4 <>  0 or
        intExpr(  1) div -4 <>  0 or
        intExpr(  0) div -4 <>  0 or
        intExpr( -1) div -4 <>  0 or
        intExpr( -2) div -4 <>  0 or
        intExpr( -3) div -4 <>  0 or
        intExpr( -4) div -4 <>  1 or
        intExpr( -5) div -4 <>  1 or
        intExpr( -6) div -4 <>  1 or
        intExpr( -7) div -4 <>  1 or
        intExpr( -8) div -4 <>  2 or
        intExpr( -9) div -4 <>  2 or
        intExpr(-10) div -4 <>  2 or
        intExpr( 10) div -5 <> -2 or
        intExpr(  9) div -5 <> -1 or
        intExpr(  8) div -5 <> -1 or
        intExpr(  7) div -5 <> -1 or
        intExpr(  6) div -5 <> -1 or
        intExpr(  5) div -5 <> -1 or
        intExpr(  4) div -5 <>  0 or
        intExpr(  3) div -5 <>  0 or
        intExpr(  2) div -5 <>  0 or
        intExpr(  1) div -5 <>  0 or
        intExpr(  0) div -5 <>  0 or
        intExpr( -1) div -5 <>  0 or
        intExpr( -2) div -5 <>  0 or
        intExpr( -3) div -5 <>  0 or
        intExpr( -4) div -5 <>  0 or
        intExpr( -5) div -5 <>  1 or
        intExpr( -6) div -5 <>  1 or
        intExpr( -7) div -5 <>  1 or
        intExpr( -8) div -5 <>  1 or
        intExpr( -9) div -5 <>  1 or
        intExpr(-10) div -5 <>  2 then
      writeln(" *****) div with an expression and a constant does not work correct");
      okay := FALSE;
    end if;

    if   10 div intExpr( 5) <>  2 or
          9 div intExpr( 5) <>  1 or
          8 div intExpr( 5) <>  1 or
          7 div intExpr( 5) <>  1 or
          6 div intExpr( 5) <>  1 or
          5 div intExpr( 5) <>  1 or
          4 div intExpr( 5) <>  0 or
          3 div intExpr( 5) <>  0 or
          2 div intExpr( 5) <>  0 or
          1 div intExpr( 5) <>  0 or
          0 div intExpr( 5) <>  0 or
         -1 div intExpr( 5) <>  0 or
         -2 div intExpr( 5) <>  0 or
         -3 div intExpr( 5) <>  0 or
         -4 div intExpr( 5) <>  0 or
         -5 div intExpr( 5) <> -1 or
         -6 div intExpr( 5) <> -1 or
         -7 div intExpr( 5) <> -1 or
         -8 div intExpr( 5) <> -1 or
         -9 div intExpr( 5) <> -1 or
        -10 div intExpr( 5) <> -2 or
         10 div intExpr( 4) <>  2 or
          9 div intExpr( 4) <>  2 or
          8 div intExpr( 4) <>  2 or
          7 div intExpr( 4) <>  1 or
          6 div intExpr( 4) <>  1 or
          5 div intExpr( 4) <>  1 or
          4 div intExpr( 4) <>  1 or
          3 div intExpr( 4) <>  0 or
          2 div intExpr( 4) <>  0 or
          1 div intExpr( 4) <>  0 or
          0 div intExpr( 4) <>  0 or
         -1 div intExpr( 4) <>  0 or
         -2 div intExpr( 4) <>  0 or
         -3 div intExpr( 4) <>  0 or
         -4 div intExpr( 4) <> -1 or
         -5 div intExpr( 4) <> -1 or
         -6 div intExpr( 4) <> -1 or
         -7 div intExpr( 4) <> -1 or
         -8 div intExpr( 4) <> -2 or
         -9 div intExpr( 4) <> -2 or
        -10 div intExpr( 4) <> -2 or
         10 div intExpr( 3) <>  3 or
          9 div intExpr( 3) <>  3 or
          8 div intExpr( 3) <>  2 or
          7 div intExpr( 3) <>  2 or
          6 div intExpr( 3) <>  2 or
          5 div intExpr( 3) <>  1 or
          4 div intExpr( 3) <>  1 or
          3 div intExpr( 3) <>  1 or
          2 div intExpr( 3) <>  0 or
          1 div intExpr( 3) <>  0 or
          0 div intExpr( 3) <>  0 or
         -1 div intExpr( 3) <>  0 or
         -2 div intExpr( 3) <>  0 or
         -3 div intExpr( 3) <> -1 or
         -4 div intExpr( 3) <> -1 or
         -5 div intExpr( 3) <> -1 or
         -6 div intExpr( 3) <> -2 or
         -7 div intExpr( 3) <> -2 or
         -8 div intExpr( 3) <> -2 or
         -9 div intExpr( 3) <> -3 or
        -10 div intExpr( 3) <> -3 or
         10 div intExpr( 2) <>  5 or
          9 div intExpr( 2) <>  4 or
          8 div intExpr( 2) <>  4 or
          7 div intExpr( 2) <>  3 or
          6 div intExpr( 2) <>  3 or
          5 div intExpr( 2) <>  2 or
          4 div intExpr( 2) <>  2 or
          3 div intExpr( 2) <>  1 or
          2 div intExpr( 2) <>  1 or
          1 div intExpr( 2) <>  0 or
          0 div intExpr( 2) <>  0 or
         -1 div intExpr( 2) <>  0 or
         -2 div intExpr( 2) <> -1 or
         -3 div intExpr( 2) <> -1 or
         -4 div intExpr( 2) <> -2 or
         -5 div intExpr( 2) <> -2 or
         -6 div intExpr( 2) <> -3 or
         -7 div intExpr( 2) <> -3 or
         -8 div intExpr( 2) <> -4 or
         -9 div intExpr( 2) <> -4 or
        -10 div intExpr( 2) <> -5 or
         10 div intExpr( 1) <> 10 or
          9 div intExpr( 1) <>  9 or
          8 div intExpr( 1) <>  8 or
          7 div intExpr( 1) <>  7 or
          6 div intExpr( 1) <>  6 or
          5 div intExpr( 1) <>  5 or
          4 div intExpr( 1) <>  4 or
          3 div intExpr( 1) <>  3 or
          2 div intExpr( 1) <>  2 or
          1 div intExpr( 1) <>  1 or
          0 div intExpr( 1) <>  0 or
         -1 div intExpr( 1) <> -1 or
         -2 div intExpr( 1) <> -2 or
         -3 div intExpr( 1) <> -3 or
         -4 div intExpr( 1) <> -4 or
         -5 div intExpr( 1) <> -5 or
         -6 div intExpr( 1) <> -6 or
         -7 div intExpr( 1) <> -7 or
         -8 div intExpr( 1) <> -8 or
         -9 div intExpr( 1) <> -9 or
        -10 div intExpr( 1) <> -10 or
         10 div intExpr(-1) <> -10 or
          9 div intExpr(-1) <> -9 or
          8 div intExpr(-1) <> -8 or
          7 div intExpr(-1) <> -7 or
          6 div intExpr(-1) <> -6 or
          5 div intExpr(-1) <> -5 or
          4 div intExpr(-1) <> -4 or
          3 div intExpr(-1) <> -3 or
          2 div intExpr(-1) <> -2 or
          1 div intExpr(-1) <> -1 or
          0 div intExpr(-1) <>  0 or
         -1 div intExpr(-1) <>  1 or
         -2 div intExpr(-1) <>  2 or
         -3 div intExpr(-1) <>  3 or
         -4 div intExpr(-1) <>  4 or
         -5 div intExpr(-1) <>  5 or
         -6 div intExpr(-1) <>  6 or
         -7 div intExpr(-1) <>  7 or
         -8 div intExpr(-1) <>  8 or
         -9 div intExpr(-1) <>  9 or
        -10 div intExpr(-1) <> 10 or
         10 div intExpr(-2) <> -5 or
          9 div intExpr(-2) <> -4 or
          8 div intExpr(-2) <> -4 or
          7 div intExpr(-2) <> -3 or
          6 div intExpr(-2) <> -3 or
          5 div intExpr(-2) <> -2 or
          4 div intExpr(-2) <> -2 or
          3 div intExpr(-2) <> -1 or
          2 div intExpr(-2) <> -1 or
          1 div intExpr(-2) <>  0 or
          0 div intExpr(-2) <>  0 or
         -1 div intExpr(-2) <>  0 or
         -2 div intExpr(-2) <>  1 or
         -3 div intExpr(-2) <>  1 or
         -4 div intExpr(-2) <>  2 or
         -5 div intExpr(-2) <>  2 or
         -6 div intExpr(-2) <>  3 or
         -7 div intExpr(-2) <>  3 or
         -8 div intExpr(-2) <>  4 or
         -9 div intExpr(-2) <>  4 or
        -10 div intExpr(-2) <>  5 or
         10 div intExpr(-3) <> -3 or
          9 div intExpr(-3) <> -3 or
          8 div intExpr(-3) <> -2 or
          7 div intExpr(-3) <> -2 or
          6 div intExpr(-3) <> -2 or
          5 div intExpr(-3) <> -1 or
          4 div intExpr(-3) <> -1 or
          3 div intExpr(-3) <> -1 or
          2 div intExpr(-3) <>  0 or
          1 div intExpr(-3) <>  0 or
          0 div intExpr(-3) <>  0 or
         -1 div intExpr(-3) <>  0 or
         -2 div intExpr(-3) <>  0 or
         -3 div intExpr(-3) <>  1 or
         -4 div intExpr(-3) <>  1 or
         -5 div intExpr(-3) <>  1 or
         -6 div intExpr(-3) <>  2 or
         -7 div intExpr(-3) <>  2 or
         -8 div intExpr(-3) <>  2 or
         -9 div intExpr(-3) <>  3 or
        -10 div intExpr(-3) <>  3 or
         10 div intExpr(-4) <> -2 or
          9 div intExpr(-4) <> -2 or
          8 div intExpr(-4) <> -2 or
          7 div intExpr(-4) <> -1 or
          6 div intExpr(-4) <> -1 or
          5 div intExpr(-4) <> -1 or
          4 div intExpr(-4) <> -1 or
          3 div intExpr(-4) <>  0 or
          2 div intExpr(-4) <>  0 or
          1 div intExpr(-4) <>  0 or
          0 div intExpr(-4) <>  0 or
         -1 div intExpr(-4) <>  0 or
         -2 div intExpr(-4) <>  0 or
         -3 div intExpr(-4) <>  0 or
         -4 div intExpr(-4) <>  1 or
         -5 div intExpr(-4) <>  1 or
         -6 div intExpr(-4) <>  1 or
         -7 div intExpr(-4) <>  1 or
         -8 div intExpr(-4) <>  2 or
         -9 div intExpr(-4) <>  2 or
        -10 div intExpr(-4) <>  2 or
         10 div intExpr(-5) <> -2 or
          9 div intExpr(-5) <> -1 or
          8 div intExpr(-5) <> -1 or
          7 div intExpr(-5) <> -1 or
          6 div intExpr(-5) <> -1 or
          5 div intExpr(-5) <> -1 or
          4 div intExpr(-5) <>  0 or
          3 div intExpr(-5) <>  0 or
          2 div intExpr(-5) <>  0 or
          1 div intExpr(-5) <>  0 or
          0 div intExpr(-5) <>  0 or
         -1 div intExpr(-5) <>  0 or
         -2 div intExpr(-5) <>  0 or
         -3 div intExpr(-5) <>  0 or
         -4 div intExpr(-5) <>  0 or
         -5 div intExpr(-5) <>  1 or
         -6 div intExpr(-5) <>  1 or
         -7 div intExpr(-5) <>  1 or
         -8 div intExpr(-5) <>  1 or
         -9 div intExpr(-5) <>  1 or
        -10 div intExpr(-5) <>  2 then
      writeln(" ***** div with a constant and an expression does not work correct.");
      okay := FALSE;
    end if;

    if  intExpr( 10) div intExpr( 5) <>  2 or
        intExpr(  9) div intExpr( 5) <>  1 or
        intExpr(  8) div intExpr( 5) <>  1 or
        intExpr(  7) div intExpr( 5) <>  1 or
        intExpr(  6) div intExpr( 5) <>  1 or
        intExpr(  5) div intExpr( 5) <>  1 or
        intExpr(  4) div intExpr( 5) <>  0 or
        intExpr(  3) div intExpr( 5) <>  0 or
        intExpr(  2) div intExpr( 5) <>  0 or
        intExpr(  1) div intExpr( 5) <>  0 or
        intExpr(  0) div intExpr( 5) <>  0 or
        intExpr( -1) div intExpr( 5) <>  0 or
        intExpr( -2) div intExpr( 5) <>  0 or
        intExpr( -3) div intExpr( 5) <>  0 or
        intExpr( -4) div intExpr( 5) <>  0 or
        intExpr( -5) div intExpr( 5) <> -1 or
        intExpr( -6) div intExpr( 5) <> -1 or
        intExpr( -7) div intExpr( 5) <> -1 or
        intExpr( -8) div intExpr( 5) <> -1 or
        intExpr( -9) div intExpr( 5) <> -1 or
        intExpr(-10) div intExpr( 5) <> -2 or
        intExpr( 10) div intExpr( 4) <>  2 or
        intExpr(  9) div intExpr( 4) <>  2 or
        intExpr(  8) div intExpr( 4) <>  2 or
        intExpr(  7) div intExpr( 4) <>  1 or
        intExpr(  6) div intExpr( 4) <>  1 or
        intExpr(  5) div intExpr( 4) <>  1 or
        intExpr(  4) div intExpr( 4) <>  1 or
        intExpr(  3) div intExpr( 4) <>  0 or
        intExpr(  2) div intExpr( 4) <>  0 or
        intExpr(  1) div intExpr( 4) <>  0 or
        intExpr(  0) div intExpr( 4) <>  0 or
        intExpr( -1) div intExpr( 4) <>  0 or
        intExpr( -2) div intExpr( 4) <>  0 or
        intExpr( -3) div intExpr( 4) <>  0 or
        intExpr( -4) div intExpr( 4) <> -1 or
        intExpr( -5) div intExpr( 4) <> -1 or
        intExpr( -6) div intExpr( 4) <> -1 or
        intExpr( -7) div intExpr( 4) <> -1 or
        intExpr( -8) div intExpr( 4) <> -2 or
        intExpr( -9) div intExpr( 4) <> -2 or
        intExpr(-10) div intExpr( 4) <> -2 or
        intExpr( 10) div intExpr( 3) <>  3 or
        intExpr(  9) div intExpr( 3) <>  3 or
        intExpr(  8) div intExpr( 3) <>  2 or
        intExpr(  7) div intExpr( 3) <>  2 or
        intExpr(  6) div intExpr( 3) <>  2 or
        intExpr(  5) div intExpr( 3) <>  1 or
        intExpr(  4) div intExpr( 3) <>  1 or
        intExpr(  3) div intExpr( 3) <>  1 or
        intExpr(  2) div intExpr( 3) <>  0 or
        intExpr(  1) div intExpr( 3) <>  0 or
        intExpr(  0) div intExpr( 3) <>  0 or
        intExpr( -1) div intExpr( 3) <>  0 or
        intExpr( -2) div intExpr( 3) <>  0 or
        intExpr( -3) div intExpr( 3) <> -1 or
        intExpr( -4) div intExpr( 3) <> -1 or
        intExpr( -5) div intExpr( 3) <> -1 or
        intExpr( -6) div intExpr( 3) <> -2 or
        intExpr( -7) div intExpr( 3) <> -2 or
        intExpr( -8) div intExpr( 3) <> -2 or
        intExpr( -9) div intExpr( 3) <> -3 or
        intExpr(-10) div intExpr( 3) <> -3 or
        intExpr( 10) div intExpr( 2) <>  5 or
        intExpr(  9) div intExpr( 2) <>  4 or
        intExpr(  8) div intExpr( 2) <>  4 or
        intExpr(  7) div intExpr( 2) <>  3 or
        intExpr(  6) div intExpr( 2) <>  3 or
        intExpr(  5) div intExpr( 2) <>  2 or
        intExpr(  4) div intExpr( 2) <>  2 or
        intExpr(  3) div intExpr( 2) <>  1 or
        intExpr(  2) div intExpr( 2) <>  1 or
        intExpr(  1) div intExpr( 2) <>  0 or
        intExpr(  0) div intExpr( 2) <>  0 or
        intExpr( -1) div intExpr( 2) <>  0 or
        intExpr( -2) div intExpr( 2) <> -1 or
        intExpr( -3) div intExpr( 2) <> -1 or
        intExpr( -4) div intExpr( 2) <> -2 or
        intExpr( -5) div intExpr( 2) <> -2 or
        intExpr( -6) div intExpr( 2) <> -3 or
        intExpr( -7) div intExpr( 2) <> -3 or
        intExpr( -8) div intExpr( 2) <> -4 or
        intExpr( -9) div intExpr( 2) <> -4 or
        intExpr(-10) div intExpr( 2) <> -5 or
        intExpr( 10) div intExpr( 1) <> 10 or
        intExpr(  9) div intExpr( 1) <>  9 or
        intExpr(  8) div intExpr( 1) <>  8 or
        intExpr(  7) div intExpr( 1) <>  7 or
        intExpr(  6) div intExpr( 1) <>  6 or
        intExpr(  5) div intExpr( 1) <>  5 or
        intExpr(  4) div intExpr( 1) <>  4 or
        intExpr(  3) div intExpr( 1) <>  3 or
        intExpr(  2) div intExpr( 1) <>  2 or
        intExpr(  1) div intExpr( 1) <>  1 or
        intExpr(  0) div intExpr( 1) <>  0 or
        intExpr( -1) div intExpr( 1) <> -1 or
        intExpr( -2) div intExpr( 1) <> -2 or
        intExpr( -3) div intExpr( 1) <> -3 or
        intExpr( -4) div intExpr( 1) <> -4 or
        intExpr( -5) div intExpr( 1) <> -5 or
        intExpr( -6) div intExpr( 1) <> -6 or
        intExpr( -7) div intExpr( 1) <> -7 or
        intExpr( -8) div intExpr( 1) <> -8 or
        intExpr( -9) div intExpr( 1) <> -9 or
        intExpr(-10) div intExpr( 1) <> -10 or
        intExpr( 10) div intExpr(-1) <> -10 or
        intExpr(  9) div intExpr(-1) <> -9 or
        intExpr(  8) div intExpr(-1) <> -8 or
        intExpr(  7) div intExpr(-1) <> -7 or
        intExpr(  6) div intExpr(-1) <> -6 or
        intExpr(  5) div intExpr(-1) <> -5 or
        intExpr(  4) div intExpr(-1) <> -4 or
        intExpr(  3) div intExpr(-1) <> -3 or
        intExpr(  2) div intExpr(-1) <> -2 or
        intExpr(  1) div intExpr(-1) <> -1 or
        intExpr(  0) div intExpr(-1) <>  0 or
        intExpr( -1) div intExpr(-1) <>  1 or
        intExpr( -2) div intExpr(-1) <>  2 or
        intExpr( -3) div intExpr(-1) <>  3 or
        intExpr( -4) div intExpr(-1) <>  4 or
        intExpr( -5) div intExpr(-1) <>  5 or
        intExpr( -6) div intExpr(-1) <>  6 or
        intExpr( -7) div intExpr(-1) <>  7 or
        intExpr( -8) div intExpr(-1) <>  8 or
        intExpr( -9) div intExpr(-1) <>  9 or
        intExpr(-10) div intExpr(-1) <> 10 or
        intExpr( 10) div intExpr(-2) <> -5 or
        intExpr(  9) div intExpr(-2) <> -4 or
        intExpr(  8) div intExpr(-2) <> -4 or
        intExpr(  7) div intExpr(-2) <> -3 or
        intExpr(  6) div intExpr(-2) <> -3 or
        intExpr(  5) div intExpr(-2) <> -2 or
        intExpr(  4) div intExpr(-2) <> -2 or
        intExpr(  3) div intExpr(-2) <> -1 or
        intExpr(  2) div intExpr(-2) <> -1 or
        intExpr(  1) div intExpr(-2) <>  0 or
        intExpr(  0) div intExpr(-2) <>  0 or
        intExpr( -1) div intExpr(-2) <>  0 or
        intExpr( -2) div intExpr(-2) <>  1 or
        intExpr( -3) div intExpr(-2) <>  1 or
        intExpr( -4) div intExpr(-2) <>  2 or
        intExpr( -5) div intExpr(-2) <>  2 or
        intExpr( -6) div intExpr(-2) <>  3 or
        intExpr( -7) div intExpr(-2) <>  3 or
        intExpr( -8) div intExpr(-2) <>  4 or
        intExpr( -9) div intExpr(-2) <>  4 or
        intExpr(-10) div intExpr(-2) <>  5 or
        intExpr( 10) div intExpr(-3) <> -3 or
        intExpr(  9) div intExpr(-3) <> -3 or
        intExpr(  8) div intExpr(-3) <> -2 or
        intExpr(  7) div intExpr(-3) <> -2 or
        intExpr(  6) div intExpr(-3) <> -2 or
        intExpr(  5) div intExpr(-3) <> -1 or
        intExpr(  4) div intExpr(-3) <> -1 or
        intExpr(  3) div intExpr(-3) <> -1 or
        intExpr(  2) div intExpr(-3) <>  0 or
        intExpr(  1) div intExpr(-3) <>  0 or
        intExpr(  0) div intExpr(-3) <>  0 or
        intExpr( -1) div intExpr(-3) <>  0 or
        intExpr( -2) div intExpr(-3) <>  0 or
        intExpr( -3) div intExpr(-3) <>  1 or
        intExpr( -4) div intExpr(-3) <>  1 or
        intExpr( -5) div intExpr(-3) <>  1 or
        intExpr( -6) div intExpr(-3) <>  2 or
        intExpr( -7) div intExpr(-3) <>  2 or
        intExpr( -8) div intExpr(-3) <>  2 or
        intExpr( -9) div intExpr(-3) <>  3 or
        intExpr(-10) div intExpr(-3) <>  3 or
        intExpr( 10) div intExpr(-4) <> -2 or
        intExpr(  9) div intExpr(-4) <> -2 or
        intExpr(  8) div intExpr(-4) <> -2 or
        intExpr(  7) div intExpr(-4) <> -1 or
        intExpr(  6) div intExpr(-4) <> -1 or
        intExpr(  5) div intExpr(-4) <> -1 or
        intExpr(  4) div intExpr(-4) <> -1 or
        intExpr(  3) div intExpr(-4) <>  0 or
        intExpr(  2) div intExpr(-4) <>  0 or
        intExpr(  1) div intExpr(-4) <>  0 or
        intExpr(  0) div intExpr(-4) <>  0 or
        intExpr( -1) div intExpr(-4) <>  0 or
        intExpr( -2) div intExpr(-4) <>  0 or
        intExpr( -3) div intExpr(-4) <>  0 or
        intExpr( -4) div intExpr(-4) <>  1 or
        intExpr( -5) div intExpr(-4) <>  1 or
        intExpr( -6) div intExpr(-4) <>  1 or
        intExpr( -7) div intExpr(-4) <>  1 or
        intExpr( -8) div intExpr(-4) <>  2 or
        intExpr( -9) div intExpr(-4) <>  2 or
        intExpr(-10) div intExpr(-4) <>  2 or
        intExpr( 10) div intExpr(-5) <> -2 or
        intExpr(  9) div intExpr(-5) <> -1 or
        intExpr(  8) div intExpr(-5) <> -1 or
        intExpr(  7) div intExpr(-5) <> -1 or
        intExpr(  6) div intExpr(-5) <> -1 or
        intExpr(  5) div intExpr(-5) <> -1 or
        intExpr(  4) div intExpr(-5) <>  0 or
        intExpr(  3) div intExpr(-5) <>  0 or
        intExpr(  2) div intExpr(-5) <>  0 or
        intExpr(  1) div intExpr(-5) <>  0 or
        intExpr(  0) div intExpr(-5) <>  0 or
        intExpr( -1) div intExpr(-5) <>  0 or
        intExpr( -2) div intExpr(-5) <>  0 or
        intExpr( -3) div intExpr(-5) <>  0 or
        intExpr( -4) div intExpr(-5) <>  0 or
        intExpr( -5) div intExpr(-5) <>  1 or
        intExpr( -6) div intExpr(-5) <>  1 or
        intExpr( -7) div intExpr(-5) <>  1 or
        intExpr( -8) div intExpr(-5) <>  1 or
        intExpr( -9) div intExpr(-5) <>  1 or
        intExpr(-10) div intExpr(-5) <>  2 then
      writeln(" ***** div with two expressions does not work correct.");
      okay := FALSE;
    end if;
    if INT64_MIN div INT64_MIN <>           1 or
       INT64_MIN div INT32_MIN <>  4294967296 or
       INT64_MIN div INT32_MAX <> -4294967298 or
       INT64_MIN div INT64_MAX <>          -1 or
       INT64_MAX div INT64_MIN <>           0 or
       INT64_MAX div INT32_MIN <> -4294967295 or
       INT64_MAX div INT32_MAX <>  4294967298 or
       INT64_MAX div INT64_MAX <>           1 or
       intExpr(INT64_MIN) div INT64_MIN <>           1 or
       intExpr(INT64_MIN) div INT32_MIN <>  4294967296 or
       intExpr(INT64_MIN) div INT32_MAX <> -4294967298 or
       intExpr(INT64_MIN) div INT64_MAX <>          -1 or
       intExpr(INT64_MAX) div INT64_MIN <>           0 or
       intExpr(INT64_MAX) div INT32_MIN <> -4294967295 or
       intExpr(INT64_MAX) div INT32_MAX <>  4294967298 or
       intExpr(INT64_MAX) div INT64_MAX <>           1 or
       INT64_MIN div intExpr(INT64_MIN) <>           1 or
       INT64_MIN div intExpr(INT32_MIN) <>  4294967296 or
       INT64_MIN div intExpr(INT32_MAX) <> -4294967298 or
       INT64_MIN div intExpr(INT64_MAX) <>          -1 or
       INT64_MAX div intExpr(INT64_MIN) <>           0 or
       INT64_MAX div intExpr(INT32_MIN) <> -4294967295 or
       INT64_MAX div intExpr(INT32_MAX) <>  4294967298 or
       INT64_MAX div intExpr(INT64_MAX) <>           1 or
       intExpr(INT64_MIN) div intExpr(INT64_MIN) <>           1 or
       intExpr(INT64_MIN) div intExpr(INT32_MIN) <>  4294967296 or
       intExpr(INT64_MIN) div intExpr(INT32_MAX) <> -4294967298 or
       intExpr(INT64_MIN) div intExpr(INT64_MAX) <>          -1 or
       intExpr(INT64_MAX) div intExpr(INT64_MIN) <>           0 or
       intExpr(INT64_MAX) div intExpr(INT32_MIN) <> -4294967295 or
       intExpr(INT64_MAX) div intExpr(INT32_MAX) <>  4294967298 or
       intExpr(INT64_MAX) div intExpr(INT64_MAX) <>           1 then
      writeln(" ***** div with maximum values does not work correct.");
      okay := FALSE;
    end if;

    if okay then
      writeln("Div works correct for selected values.");
    else
      writeln(" ***** div does not work correct.");
    end if;
  end func;


const proc: check_rem is func
  local
    var boolean: okay is TRUE;
  begin
    okay := TRUE;
    if   10 rem  5 <>  0 or
          9 rem  5 <>  4 or
          8 rem  5 <>  3 or
          7 rem  5 <>  2 or
          6 rem  5 <>  1 or
          5 rem  5 <>  0 or
          4 rem  5 <>  4 or
          3 rem  5 <>  3 or
          2 rem  5 <>  2 or
          1 rem  5 <>  1 or
          0 rem  5 <>  0 or
         -1 rem  5 <> -1 or
         -2 rem  5 <> -2 or
         -3 rem  5 <> -3 or
         -4 rem  5 <> -4 or
         -5 rem  5 <>  0 or
         -6 rem  5 <> -1 or
         -7 rem  5 <> -2 or
         -8 rem  5 <> -3 or
         -9 rem  5 <> -4 or
        -10 rem  5 <>  0 or
         10 rem  4 <>  2 or
          9 rem  4 <>  1 or
          8 rem  4 <>  0 or
          7 rem  4 <>  3 or
          6 rem  4 <>  2 or
          5 rem  4 <>  1 or
          4 rem  4 <>  0 or
          3 rem  4 <>  3 or
          2 rem  4 <>  2 or
          1 rem  4 <>  1 or
          0 rem  4 <>  0 or
         -1 rem  4 <> -1 or
         -2 rem  4 <> -2 or
         -3 rem  4 <> -3 or
         -4 rem  4 <>  0 or
         -5 rem  4 <> -1 or
         -6 rem  4 <> -2 or
         -7 rem  4 <> -3 or
         -8 rem  4 <>  0 or
         -9 rem  4 <> -1 or
        -10 rem  4 <> -2 or
         10 rem  3 <>  1 or
          9 rem  3 <>  0 or
          8 rem  3 <>  2 or
          7 rem  3 <>  1 or
          6 rem  3 <>  0 or
          5 rem  3 <>  2 or
          4 rem  3 <>  1 or
          3 rem  3 <>  0 or
          2 rem  3 <>  2 or
          1 rem  3 <>  1 or
          0 rem  3 <>  0 or
         -1 rem  3 <> -1 or
         -2 rem  3 <> -2 or
         -3 rem  3 <>  0 or
         -4 rem  3 <> -1 or
         -5 rem  3 <> -2 or
         -6 rem  3 <>  0 or
         -7 rem  3 <> -1 or
         -8 rem  3 <> -2 or
         -9 rem  3 <>  0 or
        -10 rem  3 <> -1 or
         10 rem  2 <>  0 or
          9 rem  2 <>  1 or
          8 rem  2 <>  0 or
          7 rem  2 <>  1 or
          6 rem  2 <>  0 or
          5 rem  2 <>  1 or
          4 rem  2 <>  0 or
          3 rem  2 <>  1 or
          2 rem  2 <>  0 or
          1 rem  2 <>  1 or
          0 rem  2 <>  0 or
         -1 rem  2 <> -1 or
         -2 rem  2 <>  0 or
         -3 rem  2 <> -1 or
         -4 rem  2 <>  0 or
         -5 rem  2 <> -1 or
         -6 rem  2 <>  0 or
         -7 rem  2 <> -1 or
         -8 rem  2 <>  0 or
         -9 rem  2 <> -1 or
        -10 rem  2 <>  0 or
         10 rem  1 <>  0 or
          9 rem  1 <>  0 or
          8 rem  1 <>  0 or
          7 rem  1 <>  0 or
          6 rem  1 <>  0 or
          5 rem  1 <>  0 or
          4 rem  1 <>  0 or
          3 rem  1 <>  0 or
          2 rem  1 <>  0 or
          1 rem  1 <>  0 or
          0 rem  1 <>  0 or
         -1 rem  1 <>  0 or
         -2 rem  1 <>  0 or
         -3 rem  1 <>  0 or
         -4 rem  1 <>  0 or
         -5 rem  1 <>  0 or
         -6 rem  1 <>  0 or
         -7 rem  1 <>  0 or
         -8 rem  1 <>  0 or
         -9 rem  1 <>  0 or
        -10 rem  1 <>  0 or
         10 rem -1 <>  0 or
          9 rem -1 <>  0 or
          8 rem -1 <>  0 or
          7 rem -1 <>  0 or
          6 rem -1 <>  0 or
          5 rem -1 <>  0 or
          4 rem -1 <>  0 or
          3 rem -1 <>  0 or
          2 rem -1 <>  0 or
          1 rem -1 <>  0 or
          0 rem -1 <>  0 or
         -1 rem -1 <>  0 or
         -2 rem -1 <>  0 or
         -3 rem -1 <>  0 or
         -4 rem -1 <>  0 or
         -5 rem -1 <>  0 or
         -6 rem -1 <>  0 or
         -7 rem -1 <>  0 or
         -8 rem -1 <>  0 or
         -9 rem -1 <>  0 or
        -10 rem -1 <>  0 or
         10 rem -2 <>  0 or
          9 rem -2 <>  1 or
          8 rem -2 <>  0 or
          7 rem -2 <>  1 or
          6 rem -2 <>  0 or
          5 rem -2 <>  1 or
          4 rem -2 <>  0 or
          3 rem -2 <>  1 or
          2 rem -2 <>  0 or
          1 rem -2 <>  1 or
          0 rem -2 <>  0 or
         -1 rem -2 <> -1 or
         -2 rem -2 <>  0 or
         -3 rem -2 <> -1 or
         -4 rem -2 <>  0 or
         -5 rem -2 <> -1 or
         -6 rem -2 <>  0 or
         -7 rem -2 <> -1 or
         -8 rem -2 <>  0 or
         -9 rem -2 <> -1 or
        -10 rem -2 <>  0 or
         10 rem -3 <>  1 or
          9 rem -3 <>  0 or
          8 rem -3 <>  2 or
          7 rem -3 <>  1 or
          6 rem -3 <>  0 or
          5 rem -3 <>  2 or
          4 rem -3 <>  1 or
          3 rem -3 <>  0 or
          2 rem -3 <>  2 or
          1 rem -3 <>  1 or
          0 rem -3 <>  0 or
         -1 rem -3 <> -1 or
         -2 rem -3 <> -2 or
         -3 rem -3 <>  0 or
         -4 rem -3 <> -1 or
         -5 rem -3 <> -2 or
         -6 rem -3 <>  0 or
         -7 rem -3 <> -1 or
         -8 rem -3 <> -2 or
         -9 rem -3 <>  0 or
        -10 rem -3 <> -1 or
         10 rem -4 <>  2 or
          9 rem -4 <>  1 or
          8 rem -4 <>  0 or
          7 rem -4 <>  3 or
          6 rem -4 <>  2 or
          5 rem -4 <>  1 or
          4 rem -4 <>  0 or
          3 rem -4 <>  3 or
          2 rem -4 <>  2 or
          1 rem -4 <>  1 or
          0 rem -4 <>  0 or
         -1 rem -4 <> -1 or
         -2 rem -4 <> -2 or
         -3 rem -4 <> -3 or
         -4 rem -4 <>  0 or
         -5 rem -4 <> -1 or
         -6 rem -4 <> -2 or
         -7 rem -4 <> -3 or
         -8 rem -4 <>  0 or
         -9 rem -4 <> -1 or
        -10 rem -4 <> -2 or
         10 rem -5 <>  0 or
          9 rem -5 <>  4 or
          8 rem -5 <>  3 or
          7 rem -5 <>  2 or
          6 rem -5 <>  1 or
          5 rem -5 <>  0 or
          4 rem -5 <>  4 or
          3 rem -5 <>  3 or
          2 rem -5 <>  2 or
          1 rem -5 <>  1 or
          0 rem -5 <>  0 or
         -1 rem -5 <> -1 or
         -2 rem -5 <> -2 or
         -3 rem -5 <> -3 or
         -4 rem -5 <> -4 or
         -5 rem -5 <>  0 or
         -6 rem -5 <> -1 or
         -7 rem -5 <> -2 or
         -8 rem -5 <> -3 or
         -9 rem -5 <> -4 or
        -10 rem -5 <>  0 then
      writeln(" ***** rem with two constants does not work correct.");
      okay := FALSE;
    end if;

    if  intExpr( 10) rem  5 <>  0 or
        intExpr(  9) rem  5 <>  4 or
        intExpr(  8) rem  5 <>  3 or
        intExpr(  7) rem  5 <>  2 or
        intExpr(  6) rem  5 <>  1 or
        intExpr(  5) rem  5 <>  0 or
        intExpr(  4) rem  5 <>  4 or
        intExpr(  3) rem  5 <>  3 or
        intExpr(  2) rem  5 <>  2 or
        intExpr(  1) rem  5 <>  1 or
        intExpr(  0) rem  5 <>  0 or
        intExpr( -1) rem  5 <> -1 or
        intExpr( -2) rem  5 <> -2 or
        intExpr( -3) rem  5 <> -3 or
        intExpr( -4) rem  5 <> -4 or
        intExpr( -5) rem  5 <>  0 or
        intExpr( -6) rem  5 <> -1 or
        intExpr( -7) rem  5 <> -2 or
        intExpr( -8) rem  5 <> -3 or
        intExpr( -9) rem  5 <> -4 or
        intExpr(-10) rem  5 <>  0 or
        intExpr( 10) rem  4 <>  2 or
        intExpr(  9) rem  4 <>  1 or
        intExpr(  8) rem  4 <>  0 or
        intExpr(  7) rem  4 <>  3 or
        intExpr(  6) rem  4 <>  2 or
        intExpr(  5) rem  4 <>  1 or
        intExpr(  4) rem  4 <>  0 or
        intExpr(  3) rem  4 <>  3 or
        intExpr(  2) rem  4 <>  2 or
        intExpr(  1) rem  4 <>  1 or
        intExpr(  0) rem  4 <>  0 or
        intExpr( -1) rem  4 <> -1 or
        intExpr( -2) rem  4 <> -2 or
        intExpr( -3) rem  4 <> -3 or
        intExpr( -4) rem  4 <>  0 or
        intExpr( -5) rem  4 <> -1 or
        intExpr( -6) rem  4 <> -2 or
        intExpr( -7) rem  4 <> -3 or
        intExpr( -8) rem  4 <>  0 or
        intExpr( -9) rem  4 <> -1 or
        intExpr(-10) rem  4 <> -2 or
        intExpr( 10) rem  3 <>  1 or
        intExpr(  9) rem  3 <>  0 or
        intExpr(  8) rem  3 <>  2 or
        intExpr(  7) rem  3 <>  1 or
        intExpr(  6) rem  3 <>  0 or
        intExpr(  5) rem  3 <>  2 or
        intExpr(  4) rem  3 <>  1 or
        intExpr(  3) rem  3 <>  0 or
        intExpr(  2) rem  3 <>  2 or
        intExpr(  1) rem  3 <>  1 or
        intExpr(  0) rem  3 <>  0 or
        intExpr( -1) rem  3 <> -1 or
        intExpr( -2) rem  3 <> -2 or
        intExpr( -3) rem  3 <>  0 or
        intExpr( -4) rem  3 <> -1 or
        intExpr( -5) rem  3 <> -2 or
        intExpr( -6) rem  3 <>  0 or
        intExpr( -7) rem  3 <> -1 or
        intExpr( -8) rem  3 <> -2 or
        intExpr( -9) rem  3 <>  0 or
        intExpr(-10) rem  3 <> -1 or
        intExpr( 10) rem  2 <>  0 or
        intExpr(  9) rem  2 <>  1 or
        intExpr(  8) rem  2 <>  0 or
        intExpr(  7) rem  2 <>  1 or
        intExpr(  6) rem  2 <>  0 or
        intExpr(  5) rem  2 <>  1 or
        intExpr(  4) rem  2 <>  0 or
        intExpr(  3) rem  2 <>  1 or
        intExpr(  2) rem  2 <>  0 or
        intExpr(  1) rem  2 <>  1 or
        intExpr(  0) rem  2 <>  0 or
        intExpr( -1) rem  2 <> -1 or
        intExpr( -2) rem  2 <>  0 or
        intExpr( -3) rem  2 <> -1 or
        intExpr( -4) rem  2 <>  0 or
        intExpr( -5) rem  2 <> -1 or
        intExpr( -6) rem  2 <>  0 or
        intExpr( -7) rem  2 <> -1 or
        intExpr( -8) rem  2 <>  0 or
        intExpr( -9) rem  2 <> -1 or
        intExpr(-10) rem  2 <>  0 or
        intExpr( 10) rem  1 <>  0 or
        intExpr(  9) rem  1 <>  0 or
        intExpr(  8) rem  1 <>  0 or
        intExpr(  7) rem  1 <>  0 or
        intExpr(  6) rem  1 <>  0 or
        intExpr(  5) rem  1 <>  0 or
        intExpr(  4) rem  1 <>  0 or
        intExpr(  3) rem  1 <>  0 or
        intExpr(  2) rem  1 <>  0 or
        intExpr(  1) rem  1 <>  0 or
        intExpr(  0) rem  1 <>  0 or
        intExpr( -1) rem  1 <>  0 or
        intExpr( -2) rem  1 <>  0 or
        intExpr( -3) rem  1 <>  0 or
        intExpr( -4) rem  1 <>  0 or
        intExpr( -5) rem  1 <>  0 or
        intExpr( -6) rem  1 <>  0 or
        intExpr( -7) rem  1 <>  0 or
        intExpr( -8) rem  1 <>  0 or
        intExpr( -9) rem  1 <>  0 or
        intExpr(-10) rem  1 <>  0 or
        intExpr( 10) rem -1 <>  0 or
        intExpr(  9) rem -1 <>  0 or
        intExpr(  8) rem -1 <>  0 or
        intExpr(  7) rem -1 <>  0 or
        intExpr(  6) rem -1 <>  0 or
        intExpr(  5) rem -1 <>  0 or
        intExpr(  4) rem -1 <>  0 or
        intExpr(  3) rem -1 <>  0 or
        intExpr(  2) rem -1 <>  0 or
        intExpr(  1) rem -1 <>  0 or
        intExpr(  0) rem -1 <>  0 or
        intExpr( -1) rem -1 <>  0 or
        intExpr( -2) rem -1 <>  0 or
        intExpr( -3) rem -1 <>  0 or
        intExpr( -4) rem -1 <>  0 or
        intExpr( -5) rem -1 <>  0 or
        intExpr( -6) rem -1 <>  0 or
        intExpr( -7) rem -1 <>  0 or
        intExpr( -8) rem -1 <>  0 or
        intExpr( -9) rem -1 <>  0 or
        intExpr(-10) rem -1 <>  0 or
        intExpr( 10) rem -2 <>  0 or
        intExpr(  9) rem -2 <>  1 or
        intExpr(  8) rem -2 <>  0 or
        intExpr(  7) rem -2 <>  1 or
        intExpr(  6) rem -2 <>  0 or
        intExpr(  5) rem -2 <>  1 or
        intExpr(  4) rem -2 <>  0 or
        intExpr(  3) rem -2 <>  1 or
        intExpr(  2) rem -2 <>  0 or
        intExpr(  1) rem -2 <>  1 or
        intExpr(  0) rem -2 <>  0 or
        intExpr( -1) rem -2 <> -1 or
        intExpr( -2) rem -2 <>  0 or
        intExpr( -3) rem -2 <> -1 or
        intExpr( -4) rem -2 <>  0 or
        intExpr( -5) rem -2 <> -1 or
        intExpr( -6) rem -2 <>  0 or
        intExpr( -7) rem -2 <> -1 or
        intExpr( -8) rem -2 <>  0 or
        intExpr( -9) rem -2 <> -1 or
        intExpr(-10) rem -2 <>  0 or
        intExpr( 10) rem -3 <>  1 or
        intExpr(  9) rem -3 <>  0 or
        intExpr(  8) rem -3 <>  2 or
        intExpr(  7) rem -3 <>  1 or
        intExpr(  6) rem -3 <>  0 or
        intExpr(  5) rem -3 <>  2 or
        intExpr(  4) rem -3 <>  1 or
        intExpr(  3) rem -3 <>  0 or
        intExpr(  2) rem -3 <>  2 or
        intExpr(  1) rem -3 <>  1 or
        intExpr(  0) rem -3 <>  0 or
        intExpr( -1) rem -3 <> -1 or
        intExpr( -2) rem -3 <> -2 or
        intExpr( -3) rem -3 <>  0 or
        intExpr( -4) rem -3 <> -1 or
        intExpr( -5) rem -3 <> -2 or
        intExpr( -6) rem -3 <>  0 or
        intExpr( -7) rem -3 <> -1 or
        intExpr( -8) rem -3 <> -2 or
        intExpr( -9) rem -3 <>  0 or
        intExpr(-10) rem -3 <> -1 or
        intExpr( 10) rem -4 <>  2 or
        intExpr(  9) rem -4 <>  1 or
        intExpr(  8) rem -4 <>  0 or
        intExpr(  7) rem -4 <>  3 or
        intExpr(  6) rem -4 <>  2 or
        intExpr(  5) rem -4 <>  1 or
        intExpr(  4) rem -4 <>  0 or
        intExpr(  3) rem -4 <>  3 or
        intExpr(  2) rem -4 <>  2 or
        intExpr(  1) rem -4 <>  1 or
        intExpr(  0) rem -4 <>  0 or
        intExpr( -1) rem -4 <> -1 or
        intExpr( -2) rem -4 <> -2 or
        intExpr( -3) rem -4 <> -3 or
        intExpr( -4) rem -4 <>  0 or
        intExpr( -5) rem -4 <> -1 or
        intExpr( -6) rem -4 <> -2 or
        intExpr( -7) rem -4 <> -3 or
        intExpr( -8) rem -4 <>  0 or
        intExpr( -9) rem -4 <> -1 or
        intExpr(-10) rem -4 <> -2 or
        intExpr( 10) rem -5 <>  0 or
        intExpr(  9) rem -5 <>  4 or
        intExpr(  8) rem -5 <>  3 or
        intExpr(  7) rem -5 <>  2 or
        intExpr(  6) rem -5 <>  1 or
        intExpr(  5) rem -5 <>  0 or
        intExpr(  4) rem -5 <>  4 or
        intExpr(  3) rem -5 <>  3 or
        intExpr(  2) rem -5 <>  2 or
        intExpr(  1) rem -5 <>  1 or
        intExpr(  0) rem -5 <>  0 or
        intExpr( -1) rem -5 <> -1 or
        intExpr( -2) rem -5 <> -2 or
        intExpr( -3) rem -5 <> -3 or
        intExpr( -4) rem -5 <> -4 or
        intExpr( -5) rem -5 <>  0 or
        intExpr( -6) rem -5 <> -1 or
        intExpr( -7) rem -5 <> -2 or
        intExpr( -8) rem -5 <> -3 or
        intExpr( -9) rem -5 <> -4 or
        intExpr(-10) rem -5 <>  0 then
      writeln(" ***** rem with an expression and a constant does not work correct.");
      okay := FALSE;
    end if;

    if   10 rem intExpr( 5) <>  0 or
          9 rem intExpr( 5) <>  4 or
          8 rem intExpr( 5) <>  3 or
          7 rem intExpr( 5) <>  2 or
          6 rem intExpr( 5) <>  1 or
          5 rem intExpr( 5) <>  0 or
          4 rem intExpr( 5) <>  4 or
          3 rem intExpr( 5) <>  3 or
          2 rem intExpr( 5) <>  2 or
          1 rem intExpr( 5) <>  1 or
          0 rem intExpr( 5) <>  0 or
         -1 rem intExpr( 5) <> -1 or
         -2 rem intExpr( 5) <> -2 or
         -3 rem intExpr( 5) <> -3 or
         -4 rem intExpr( 5) <> -4 or
         -5 rem intExpr( 5) <>  0 or
         -6 rem intExpr( 5) <> -1 or
         -7 rem intExpr( 5) <> -2 or
         -8 rem intExpr( 5) <> -3 or
         -9 rem intExpr( 5) <> -4 or
        -10 rem intExpr( 5) <>  0 or
         10 rem intExpr( 4) <>  2 or
          9 rem intExpr( 4) <>  1 or
          8 rem intExpr( 4) <>  0 or
          7 rem intExpr( 4) <>  3 or
          6 rem intExpr( 4) <>  2 or
          5 rem intExpr( 4) <>  1 or
          4 rem intExpr( 4) <>  0 or
          3 rem intExpr( 4) <>  3 or
          2 rem intExpr( 4) <>  2 or
          1 rem intExpr( 4) <>  1 or
          0 rem intExpr( 4) <>  0 or
         -1 rem intExpr( 4) <> -1 or
         -2 rem intExpr( 4) <> -2 or
         -3 rem intExpr( 4) <> -3 or
         -4 rem intExpr( 4) <>  0 or
         -5 rem intExpr( 4) <> -1 or
         -6 rem intExpr( 4) <> -2 or
         -7 rem intExpr( 4) <> -3 or
         -8 rem intExpr( 4) <>  0 or
         -9 rem intExpr( 4) <> -1 or
        -10 rem intExpr( 4) <> -2 or
         10 rem intExpr( 3) <>  1 or
          9 rem intExpr( 3) <>  0 or
          8 rem intExpr( 3) <>  2 or
          7 rem intExpr( 3) <>  1 or
          6 rem intExpr( 3) <>  0 or
          5 rem intExpr( 3) <>  2 or
          4 rem intExpr( 3) <>  1 or
          3 rem intExpr( 3) <>  0 or
          2 rem intExpr( 3) <>  2 or
          1 rem intExpr( 3) <>  1 or
          0 rem intExpr( 3) <>  0 or
         -1 rem intExpr( 3) <> -1 or
         -2 rem intExpr( 3) <> -2 or
         -3 rem intExpr( 3) <>  0 or
         -4 rem intExpr( 3) <> -1 or
         -5 rem intExpr( 3) <> -2 or
         -6 rem intExpr( 3) <>  0 or
         -7 rem intExpr( 3) <> -1 or
         -8 rem intExpr( 3) <> -2 or
         -9 rem intExpr( 3) <>  0 or
        -10 rem intExpr( 3) <> -1 or
         10 rem intExpr( 2) <>  0 or
          9 rem intExpr( 2) <>  1 or
          8 rem intExpr( 2) <>  0 or
          7 rem intExpr( 2) <>  1 or
          6 rem intExpr( 2) <>  0 or
          5 rem intExpr( 2) <>  1 or
          4 rem intExpr( 2) <>  0 or
          3 rem intExpr( 2) <>  1 or
          2 rem intExpr( 2) <>  0 or
          1 rem intExpr( 2) <>  1 or
          0 rem intExpr( 2) <>  0 or
         -1 rem intExpr( 2) <> -1 or
         -2 rem intExpr( 2) <>  0 or
         -3 rem intExpr( 2) <> -1 or
         -4 rem intExpr( 2) <>  0 or
         -5 rem intExpr( 2) <> -1 or
         -6 rem intExpr( 2) <>  0 or
         -7 rem intExpr( 2) <> -1 or
         -8 rem intExpr( 2) <>  0 or
         -9 rem intExpr( 2) <> -1 or
        -10 rem intExpr( 2) <>  0 or
         10 rem intExpr( 1) <>  0 or
          9 rem intExpr( 1) <>  0 or
          8 rem intExpr( 1) <>  0 or
          7 rem intExpr( 1) <>  0 or
          6 rem intExpr( 1) <>  0 or
          5 rem intExpr( 1) <>  0 or
          4 rem intExpr( 1) <>  0 or
          3 rem intExpr( 1) <>  0 or
          2 rem intExpr( 1) <>  0 or
          1 rem intExpr( 1) <>  0 or
          0 rem intExpr( 1) <>  0 or
         -1 rem intExpr( 1) <>  0 or
         -2 rem intExpr( 1) <>  0 or
         -3 rem intExpr( 1) <>  0 or
         -4 rem intExpr( 1) <>  0 or
         -5 rem intExpr( 1) <>  0 or
         -6 rem intExpr( 1) <>  0 or
         -7 rem intExpr( 1) <>  0 or
         -8 rem intExpr( 1) <>  0 or
         -9 rem intExpr( 1) <>  0 or
        -10 rem intExpr( 1) <>  0 or
         10 rem intExpr(-1) <>  0 or
          9 rem intExpr(-1) <>  0 or
          8 rem intExpr(-1) <>  0 or
          7 rem intExpr(-1) <>  0 or
          6 rem intExpr(-1) <>  0 or
          5 rem intExpr(-1) <>  0 or
          4 rem intExpr(-1) <>  0 or
          3 rem intExpr(-1) <>  0 or
          2 rem intExpr(-1) <>  0 or
          1 rem intExpr(-1) <>  0 or
          0 rem intExpr(-1) <>  0 or
         -1 rem intExpr(-1) <>  0 or
         -2 rem intExpr(-1) <>  0 or
         -3 rem intExpr(-1) <>  0 or
         -4 rem intExpr(-1) <>  0 or
         -5 rem intExpr(-1) <>  0 or
         -6 rem intExpr(-1) <>  0 or
         -7 rem intExpr(-1) <>  0 or
         -8 rem intExpr(-1) <>  0 or
         -9 rem intExpr(-1) <>  0 or
        -10 rem intExpr(-1) <>  0 or
         10 rem intExpr(-2) <>  0 or
          9 rem intExpr(-2) <>  1 or
          8 rem intExpr(-2) <>  0 or
          7 rem intExpr(-2) <>  1 or
          6 rem intExpr(-2) <>  0 or
          5 rem intExpr(-2) <>  1 or
          4 rem intExpr(-2) <>  0 or
          3 rem intExpr(-2) <>  1 or
          2 rem intExpr(-2) <>  0 or
          1 rem intExpr(-2) <>  1 or
          0 rem intExpr(-2) <>  0 or
         -1 rem intExpr(-2) <> -1 or
         -2 rem intExpr(-2) <>  0 or
         -3 rem intExpr(-2) <> -1 or
         -4 rem intExpr(-2) <>  0 or
         -5 rem intExpr(-2) <> -1 or
         -6 rem intExpr(-2) <>  0 or
         -7 rem intExpr(-2) <> -1 or
         -8 rem intExpr(-2) <>  0 or
         -9 rem intExpr(-2) <> -1 or
        -10 rem intExpr(-2) <>  0 or
         10 rem intExpr(-3) <>  1 or
          9 rem intExpr(-3) <>  0 or
          8 rem intExpr(-3) <>  2 or
          7 rem intExpr(-3) <>  1 or
          6 rem intExpr(-3) <>  0 or
          5 rem intExpr(-3) <>  2 or
          4 rem intExpr(-3) <>  1 or
          3 rem intExpr(-3) <>  0 or
          2 rem intExpr(-3) <>  2 or
          1 rem intExpr(-3) <>  1 or
          0 rem intExpr(-3) <>  0 or
         -1 rem intExpr(-3) <> -1 or
         -2 rem intExpr(-3) <> -2 or
         -3 rem intExpr(-3) <>  0 or
         -4 rem intExpr(-3) <> -1 or
         -5 rem intExpr(-3) <> -2 or
         -6 rem intExpr(-3) <>  0 or
         -7 rem intExpr(-3) <> -1 or
         -8 rem intExpr(-3) <> -2 or
         -9 rem intExpr(-3) <>  0 or
        -10 rem intExpr(-3) <> -1 or
         10 rem intExpr(-4) <>  2 or
          9 rem intExpr(-4) <>  1 or
          8 rem intExpr(-4) <>  0 or
          7 rem intExpr(-4) <>  3 or
          6 rem intExpr(-4) <>  2 or
          5 rem intExpr(-4) <>  1 or
          4 rem intExpr(-4) <>  0 or
          3 rem intExpr(-4) <>  3 or
          2 rem intExpr(-4) <>  2 or
          1 rem intExpr(-4) <>  1 or
          0 rem intExpr(-4) <>  0 or
         -1 rem intExpr(-4) <> -1 or
         -2 rem intExpr(-4) <> -2 or
         -3 rem intExpr(-4) <> -3 or
         -4 rem intExpr(-4) <>  0 or
         -5 rem intExpr(-4) <> -1 or
         -6 rem intExpr(-4) <> -2 or
         -7 rem intExpr(-4) <> -3 or
         -8 rem intExpr(-4) <>  0 or
         -9 rem intExpr(-4) <> -1 or
        -10 rem intExpr(-4) <> -2 or
         10 rem intExpr(-5) <>  0 or
          9 rem intExpr(-5) <>  4 or
          8 rem intExpr(-5) <>  3 or
          7 rem intExpr(-5) <>  2 or
          6 rem intExpr(-5) <>  1 or
          5 rem intExpr(-5) <>  0 or
          4 rem intExpr(-5) <>  4 or
          3 rem intExpr(-5) <>  3 or
          2 rem intExpr(-5) <>  2 or
          1 rem intExpr(-5) <>  1 or
          0 rem intExpr(-5) <>  0 or
         -1 rem intExpr(-5) <> -1 or
         -2 rem intExpr(-5) <> -2 or
         -3 rem intExpr(-5) <> -3 or
         -4 rem intExpr(-5) <> -4 or
         -5 rem intExpr(-5) <>  0 or
         -6 rem intExpr(-5) <> -1 or
         -7 rem intExpr(-5) <> -2 or
         -8 rem intExpr(-5) <> -3 or
         -9 rem intExpr(-5) <> -4 or
        -10 rem intExpr(-5) <>  0 then
      writeln(" ***** rem with a constant and an expression does not work correct.");
      okay := FALSE;
    end if;

    if  intExpr( 10) rem intExpr( 5) <>  0 or
        intExpr(  9) rem intExpr( 5) <>  4 or
        intExpr(  8) rem intExpr( 5) <>  3 or
        intExpr(  7) rem intExpr( 5) <>  2 or
        intExpr(  6) rem intExpr( 5) <>  1 or
        intExpr(  5) rem intExpr( 5) <>  0 or
        intExpr(  4) rem intExpr( 5) <>  4 or
        intExpr(  3) rem intExpr( 5) <>  3 or
        intExpr(  2) rem intExpr( 5) <>  2 or
        intExpr(  1) rem intExpr( 5) <>  1 or
        intExpr(  0) rem intExpr( 5) <>  0 or
        intExpr( -1) rem intExpr( 5) <> -1 or
        intExpr( -2) rem intExpr( 5) <> -2 or
        intExpr( -3) rem intExpr( 5) <> -3 or
        intExpr( -4) rem intExpr( 5) <> -4 or
        intExpr( -5) rem intExpr( 5) <>  0 or
        intExpr( -6) rem intExpr( 5) <> -1 or
        intExpr( -7) rem intExpr( 5) <> -2 or
        intExpr( -8) rem intExpr( 5) <> -3 or
        intExpr( -9) rem intExpr( 5) <> -4 or
        intExpr(-10) rem intExpr( 5) <>  0 or
        intExpr( 10) rem intExpr( 4) <>  2 or
        intExpr(  9) rem intExpr( 4) <>  1 or
        intExpr(  8) rem intExpr( 4) <>  0 or
        intExpr(  7) rem intExpr( 4) <>  3 or
        intExpr(  6) rem intExpr( 4) <>  2 or
        intExpr(  5) rem intExpr( 4) <>  1 or
        intExpr(  4) rem intExpr( 4) <>  0 or
        intExpr(  3) rem intExpr( 4) <>  3 or
        intExpr(  2) rem intExpr( 4) <>  2 or
        intExpr(  1) rem intExpr( 4) <>  1 or
        intExpr(  0) rem intExpr( 4) <>  0 or
        intExpr( -1) rem intExpr( 4) <> -1 or
        intExpr( -2) rem intExpr( 4) <> -2 or
        intExpr( -3) rem intExpr( 4) <> -3 or
        intExpr( -4) rem intExpr( 4) <>  0 or
        intExpr( -5) rem intExpr( 4) <> -1 or
        intExpr( -6) rem intExpr( 4) <> -2 or
        intExpr( -7) rem intExpr( 4) <> -3 or
        intExpr( -8) rem intExpr( 4) <>  0 or
        intExpr( -9) rem intExpr( 4) <> -1 or
        intExpr(-10) rem intExpr( 4) <> -2 or
        intExpr( 10) rem intExpr( 3) <>  1 or
        intExpr(  9) rem intExpr( 3) <>  0 or
        intExpr(  8) rem intExpr( 3) <>  2 or
        intExpr(  7) rem intExpr( 3) <>  1 or
        intExpr(  6) rem intExpr( 3) <>  0 or
        intExpr(  5) rem intExpr( 3) <>  2 or
        intExpr(  4) rem intExpr( 3) <>  1 or
        intExpr(  3) rem intExpr( 3) <>  0 or
        intExpr(  2) rem intExpr( 3) <>  2 or
        intExpr(  1) rem intExpr( 3) <>  1 or
        intExpr(  0) rem intExpr( 3) <>  0 or
        intExpr( -1) rem intExpr( 3) <> -1 or
        intExpr( -2) rem intExpr( 3) <> -2 or
        intExpr( -3) rem intExpr( 3) <>  0 or
        intExpr( -4) rem intExpr( 3) <> -1 or
        intExpr( -5) rem intExpr( 3) <> -2 or
        intExpr( -6) rem intExpr( 3) <>  0 or
        intExpr( -7) rem intExpr( 3) <> -1 or
        intExpr( -8) rem intExpr( 3) <> -2 or
        intExpr( -9) rem intExpr( 3) <>  0 or
        intExpr(-10) rem intExpr( 3) <> -1 or
        intExpr( 10) rem intExpr( 2) <>  0 or
        intExpr(  9) rem intExpr( 2) <>  1 or
        intExpr(  8) rem intExpr( 2) <>  0 or
        intExpr(  7) rem intExpr( 2) <>  1 or
        intExpr(  6) rem intExpr( 2) <>  0 or
        intExpr(  5) rem intExpr( 2) <>  1 or
        intExpr(  4) rem intExpr( 2) <>  0 or
        intExpr(  3) rem intExpr( 2) <>  1 or
        intExpr(  2) rem intExpr( 2) <>  0 or
        intExpr(  1) rem intExpr( 2) <>  1 or
        intExpr(  0) rem intExpr( 2) <>  0 or
        intExpr( -1) rem intExpr( 2) <> -1 or
        intExpr( -2) rem intExpr( 2) <>  0 or
        intExpr( -3) rem intExpr( 2) <> -1 or
        intExpr( -4) rem intExpr( 2) <>  0 or
        intExpr( -5) rem intExpr( 2) <> -1 or
        intExpr( -6) rem intExpr( 2) <>  0 or
        intExpr( -7) rem intExpr( 2) <> -1 or
        intExpr( -8) rem intExpr( 2) <>  0 or
        intExpr( -9) rem intExpr( 2) <> -1 or
        intExpr(-10) rem intExpr( 2) <>  0 or
        intExpr( 10) rem intExpr( 1) <>  0 or
        intExpr(  9) rem intExpr( 1) <>  0 or
        intExpr(  8) rem intExpr( 1) <>  0 or
        intExpr(  7) rem intExpr( 1) <>  0 or
        intExpr(  6) rem intExpr( 1) <>  0 or
        intExpr(  5) rem intExpr( 1) <>  0 or
        intExpr(  4) rem intExpr( 1) <>  0 or
        intExpr(  3) rem intExpr( 1) <>  0 or
        intExpr(  2) rem intExpr( 1) <>  0 or
        intExpr(  1) rem intExpr( 1) <>  0 or
        intExpr(  0) rem intExpr( 1) <>  0 or
        intExpr( -1) rem intExpr( 1) <>  0 or
        intExpr( -2) rem intExpr( 1) <>  0 or
        intExpr( -3) rem intExpr( 1) <>  0 or
        intExpr( -4) rem intExpr( 1) <>  0 or
        intExpr( -5) rem intExpr( 1) <>  0 or
        intExpr( -6) rem intExpr( 1) <>  0 or
        intExpr( -7) rem intExpr( 1) <>  0 or
        intExpr( -8) rem intExpr( 1) <>  0 or
        intExpr( -9) rem intExpr( 1) <>  0 or
        intExpr(-10) rem intExpr( 1) <>  0 or
        intExpr( 10) rem intExpr(-1) <>  0 or
        intExpr(  9) rem intExpr(-1) <>  0 or
        intExpr(  8) rem intExpr(-1) <>  0 or
        intExpr(  7) rem intExpr(-1) <>  0 or
        intExpr(  6) rem intExpr(-1) <>  0 or
        intExpr(  5) rem intExpr(-1) <>  0 or
        intExpr(  4) rem intExpr(-1) <>  0 or
        intExpr(  3) rem intExpr(-1) <>  0 or
        intExpr(  2) rem intExpr(-1) <>  0 or
        intExpr(  1) rem intExpr(-1) <>  0 or
        intExpr(  0) rem intExpr(-1) <>  0 or
        intExpr( -1) rem intExpr(-1) <>  0 or
        intExpr( -2) rem intExpr(-1) <>  0 or
        intExpr( -3) rem intExpr(-1) <>  0 or
        intExpr( -4) rem intExpr(-1) <>  0 or
        intExpr( -5) rem intExpr(-1) <>  0 or
        intExpr( -6) rem intExpr(-1) <>  0 or
        intExpr( -7) rem intExpr(-1) <>  0 or
        intExpr( -8) rem intExpr(-1) <>  0 or
        intExpr( -9) rem intExpr(-1) <>  0 or
        intExpr(-10) rem intExpr(-1) <>  0 or
        intExpr( 10) rem intExpr(-2) <>  0 or
        intExpr(  9) rem intExpr(-2) <>  1 or
        intExpr(  8) rem intExpr(-2) <>  0 or
        intExpr(  7) rem intExpr(-2) <>  1 or
        intExpr(  6) rem intExpr(-2) <>  0 or
        intExpr(  5) rem intExpr(-2) <>  1 or
        intExpr(  4) rem intExpr(-2) <>  0 or
        intExpr(  3) rem intExpr(-2) <>  1 or
        intExpr(  2) rem intExpr(-2) <>  0 or
        intExpr(  1) rem intExpr(-2) <>  1 or
        intExpr(  0) rem intExpr(-2) <>  0 or
        intExpr( -1) rem intExpr(-2) <> -1 or
        intExpr( -2) rem intExpr(-2) <>  0 or
        intExpr( -3) rem intExpr(-2) <> -1 or
        intExpr( -4) rem intExpr(-2) <>  0 or
        intExpr( -5) rem intExpr(-2) <> -1 or
        intExpr( -6) rem intExpr(-2) <>  0 or
        intExpr( -7) rem intExpr(-2) <> -1 or
        intExpr( -8) rem intExpr(-2) <>  0 or
        intExpr( -9) rem intExpr(-2) <> -1 or
        intExpr(-10) rem intExpr(-2) <>  0 or
        intExpr( 10) rem intExpr(-3) <>  1 or
        intExpr(  9) rem intExpr(-3) <>  0 or
        intExpr(  8) rem intExpr(-3) <>  2 or
        intExpr(  7) rem intExpr(-3) <>  1 or
        intExpr(  6) rem intExpr(-3) <>  0 or
        intExpr(  5) rem intExpr(-3) <>  2 or
        intExpr(  4) rem intExpr(-3) <>  1 or
        intExpr(  3) rem intExpr(-3) <>  0 or
        intExpr(  2) rem intExpr(-3) <>  2 or
        intExpr(  1) rem intExpr(-3) <>  1 or
        intExpr(  0) rem intExpr(-3) <>  0 or
        intExpr( -1) rem intExpr(-3) <> -1 or
        intExpr( -2) rem intExpr(-3) <> -2 or
        intExpr( -3) rem intExpr(-3) <>  0 or
        intExpr( -4) rem intExpr(-3) <> -1 or
        intExpr( -5) rem intExpr(-3) <> -2 or
        intExpr( -6) rem intExpr(-3) <>  0 or
        intExpr( -7) rem intExpr(-3) <> -1 or
        intExpr( -8) rem intExpr(-3) <> -2 or
        intExpr( -9) rem intExpr(-3) <>  0 or
        intExpr(-10) rem intExpr(-3) <> -1 or
        intExpr( 10) rem intExpr(-4) <>  2 or
        intExpr(  9) rem intExpr(-4) <>  1 or
        intExpr(  8) rem intExpr(-4) <>  0 or
        intExpr(  7) rem intExpr(-4) <>  3 or
        intExpr(  6) rem intExpr(-4) <>  2 or
        intExpr(  5) rem intExpr(-4) <>  1 or
        intExpr(  4) rem intExpr(-4) <>  0 or
        intExpr(  3) rem intExpr(-4) <>  3 or
        intExpr(  2) rem intExpr(-4) <>  2 or
        intExpr(  1) rem intExpr(-4) <>  1 or
        intExpr(  0) rem intExpr(-4) <>  0 or
        intExpr( -1) rem intExpr(-4) <> -1 or
        intExpr( -2) rem intExpr(-4) <> -2 or
        intExpr( -3) rem intExpr(-4) <> -3 or
        intExpr( -4) rem intExpr(-4) <>  0 or
        intExpr( -5) rem intExpr(-4) <> -1 or
        intExpr( -6) rem intExpr(-4) <> -2 or
        intExpr( -7) rem intExpr(-4) <> -3 or
        intExpr( -8) rem intExpr(-4) <>  0 or
        intExpr( -9) rem intExpr(-4) <> -1 or
        intExpr(-10) rem intExpr(-4) <> -2 or
        intExpr( 10) rem intExpr(-5) <>  0 or
        intExpr(  9) rem intExpr(-5) <>  4 or
        intExpr(  8) rem intExpr(-5) <>  3 or
        intExpr(  7) rem intExpr(-5) <>  2 or
        intExpr(  6) rem intExpr(-5) <>  1 or
        intExpr(  5) rem intExpr(-5) <>  0 or
        intExpr(  4) rem intExpr(-5) <>  4 or
        intExpr(  3) rem intExpr(-5) <>  3 or
        intExpr(  2) rem intExpr(-5) <>  2 or
        intExpr(  1) rem intExpr(-5) <>  1 or
        intExpr(  0) rem intExpr(-5) <>  0 or
        intExpr( -1) rem intExpr(-5) <> -1 or
        intExpr( -2) rem intExpr(-5) <> -2 or
        intExpr( -3) rem intExpr(-5) <> -3 or
        intExpr( -4) rem intExpr(-5) <> -4 or
        intExpr( -5) rem intExpr(-5) <>  0 or
        intExpr( -6) rem intExpr(-5) <> -1 or
        intExpr( -7) rem intExpr(-5) <> -2 or
        intExpr( -8) rem intExpr(-5) <> -3 or
        intExpr( -9) rem intExpr(-5) <> -4 or
        intExpr(-10) rem intExpr(-5) <>  0 then
      writeln(" ***** rem with two expressions does not work correct.");
      okay := FALSE;
    end if;

    if okay then
      writeln("Rem works correct for selected values.");
    else
      writeln(" ***** rem does not work correct.");
    end if;
  end func;


const proc: check_mdiv is func
  local
    var boolean: okay is TRUE;
  begin
    okay := TRUE;
    if   10 mdiv  5 <>  2 or
          9 mdiv  5 <>  1 or
          8 mdiv  5 <>  1 or
          7 mdiv  5 <>  1 or
          6 mdiv  5 <>  1 or
          5 mdiv  5 <>  1 or
          4 mdiv  5 <>  0 or
          3 mdiv  5 <>  0 or
          2 mdiv  5 <>  0 or
          1 mdiv  5 <>  0 or
          0 mdiv  5 <>  0 or
         -1 mdiv  5 <> -1 or
         -2 mdiv  5 <> -1 or
         -3 mdiv  5 <> -1 or
         -4 mdiv  5 <> -1 or
         -5 mdiv  5 <> -1 or
         -6 mdiv  5 <> -2 or
         -7 mdiv  5 <> -2 or
         -8 mdiv  5 <> -2 or
         -9 mdiv  5 <> -2 or
        -10 mdiv  5 <> -2 or
         10 mdiv  4 <>  2 or
          9 mdiv  4 <>  2 or
          8 mdiv  4 <>  2 or
          7 mdiv  4 <>  1 or
          6 mdiv  4 <>  1 or
          5 mdiv  4 <>  1 or
          4 mdiv  4 <>  1 or
          3 mdiv  4 <>  0 or
          2 mdiv  4 <>  0 or
          1 mdiv  4 <>  0 or
          0 mdiv  4 <>  0 or
         -1 mdiv  4 <> -1 or
         -2 mdiv  4 <> -1 or
         -3 mdiv  4 <> -1 or
         -4 mdiv  4 <> -1 or
         -5 mdiv  4 <> -2 or
         -6 mdiv  4 <> -2 or
         -7 mdiv  4 <> -2 or
         -8 mdiv  4 <> -2 or
         -9 mdiv  4 <> -3 or
        -10 mdiv  4 <> -3 or
         10 mdiv  3 <>  3 or
          9 mdiv  3 <>  3 or
          8 mdiv  3 <>  2 or
          7 mdiv  3 <>  2 or
          6 mdiv  3 <>  2 or
          5 mdiv  3 <>  1 or
          4 mdiv  3 <>  1 or
          3 mdiv  3 <>  1 or
          2 mdiv  3 <>  0 or
          1 mdiv  3 <>  0 or
          0 mdiv  3 <>  0 or
         -1 mdiv  3 <> -1 or
         -2 mdiv  3 <> -1 or
         -3 mdiv  3 <> -1 or
         -4 mdiv  3 <> -2 or
         -5 mdiv  3 <> -2 or
         -6 mdiv  3 <> -2 or
         -7 mdiv  3 <> -3 or
         -8 mdiv  3 <> -3 or
         -9 mdiv  3 <> -3 or
        -10 mdiv  3 <> -4 or
         10 mdiv  2 <>  5 or
          9 mdiv  2 <>  4 or
          8 mdiv  2 <>  4 or
          7 mdiv  2 <>  3 or
          6 mdiv  2 <>  3 or
          5 mdiv  2 <>  2 or
          4 mdiv  2 <>  2 or
          3 mdiv  2 <>  1 or
          2 mdiv  2 <>  1 or
          1 mdiv  2 <>  0 or
          0 mdiv  2 <>  0 or
         -1 mdiv  2 <> -1 or
         -2 mdiv  2 <> -1 or
         -3 mdiv  2 <> -2 or
         -4 mdiv  2 <> -2 or
         -5 mdiv  2 <> -3 or
         -6 mdiv  2 <> -3 or
         -7 mdiv  2 <> -4 or
         -8 mdiv  2 <> -4 or
         -9 mdiv  2 <> -5 or
        -10 mdiv  2 <> -5 or
         10 mdiv  1 <> 10 or
          9 mdiv  1 <>  9 or
          8 mdiv  1 <>  8 or
          7 mdiv  1 <>  7 or
          6 mdiv  1 <>  6 or
          5 mdiv  1 <>  5 or
          4 mdiv  1 <>  4 or
          3 mdiv  1 <>  3 or
          2 mdiv  1 <>  2 or
          1 mdiv  1 <>  1 or
          0 mdiv  1 <>  0 or
         -1 mdiv  1 <> -1 or
         -2 mdiv  1 <> -2 or
         -3 mdiv  1 <> -3 or
         -4 mdiv  1 <> -4 or
         -5 mdiv  1 <> -5 or
         -6 mdiv  1 <> -6 or
         -7 mdiv  1 <> -7 or
         -8 mdiv  1 <> -8 or
         -9 mdiv  1 <> -9 or
        -10 mdiv  1 <> -10 or
         10 mdiv -1 <> -10 or
          9 mdiv -1 <> -9 or
          8 mdiv -1 <> -8 or
          7 mdiv -1 <> -7 or
          6 mdiv -1 <> -6 or
          5 mdiv -1 <> -5 or
          4 mdiv -1 <> -4 or
          3 mdiv -1 <> -3 or
          2 mdiv -1 <> -2 or
          1 mdiv -1 <> -1 or
          0 mdiv -1 <>  0 or
         -1 mdiv -1 <>  1 or
         -2 mdiv -1 <>  2 or
         -3 mdiv -1 <>  3 or
         -4 mdiv -1 <>  4 or
         -5 mdiv -1 <>  5 or
         -6 mdiv -1 <>  6 or
         -7 mdiv -1 <>  7 or
         -8 mdiv -1 <>  8 or
         -9 mdiv -1 <>  9 or
        -10 mdiv -1 <> 10 or
         10 mdiv -2 <> -5 or
          9 mdiv -2 <> -5 or
          8 mdiv -2 <> -4 or
          7 mdiv -2 <> -4 or
          6 mdiv -2 <> -3 or
          5 mdiv -2 <> -3 or
          4 mdiv -2 <> -2 or
          3 mdiv -2 <> -2 or
          2 mdiv -2 <> -1 or
          1 mdiv -2 <> -1 or
          0 mdiv -2 <>  0 or
         -1 mdiv -2 <>  0 or
         -2 mdiv -2 <>  1 or
         -3 mdiv -2 <>  1 or
         -4 mdiv -2 <>  2 or
         -5 mdiv -2 <>  2 or
         -6 mdiv -2 <>  3 or
         -7 mdiv -2 <>  3 or
         -8 mdiv -2 <>  4 or
         -9 mdiv -2 <>  4 or
        -10 mdiv -2 <>  5 or
         10 mdiv -3 <> -4 or
          9 mdiv -3 <> -3 or
          8 mdiv -3 <> -3 or
          7 mdiv -3 <> -3 or
          6 mdiv -3 <> -2 or
          5 mdiv -3 <> -2 or
          4 mdiv -3 <> -2 or
          3 mdiv -3 <> -1 or
          2 mdiv -3 <> -1 or
          1 mdiv -3 <> -1 or
          0 mdiv -3 <>  0 or
         -1 mdiv -3 <>  0 or
         -2 mdiv -3 <>  0 or
         -3 mdiv -3 <>  1 or
         -4 mdiv -3 <>  1 or
         -5 mdiv -3 <>  1 or
         -6 mdiv -3 <>  2 or
         -7 mdiv -3 <>  2 or
         -8 mdiv -3 <>  2 or
         -9 mdiv -3 <>  3 or
        -10 mdiv -3 <>  3 or
         10 mdiv -4 <> -3 or
          9 mdiv -4 <> -3 or
          8 mdiv -4 <> -2 or
          7 mdiv -4 <> -2 or
          6 mdiv -4 <> -2 or
          5 mdiv -4 <> -2 or
          4 mdiv -4 <> -1 or
          3 mdiv -4 <> -1 or
          2 mdiv -4 <> -1 or
          1 mdiv -4 <> -1 or
          0 mdiv -4 <>  0 or
         -1 mdiv -4 <>  0 or
         -2 mdiv -4 <>  0 or
         -3 mdiv -4 <>  0 or
         -4 mdiv -4 <>  1 or
         -5 mdiv -4 <>  1 or
         -6 mdiv -4 <>  1 or
         -7 mdiv -4 <>  1 or
         -8 mdiv -4 <>  2 or
         -9 mdiv -4 <>  2 or
        -10 mdiv -4 <>  2 or
         10 mdiv -5 <> -2 or
          9 mdiv -5 <> -2 or
          8 mdiv -5 <> -2 or
          7 mdiv -5 <> -2 or
          6 mdiv -5 <> -2 or
          5 mdiv -5 <> -1 or
          4 mdiv -5 <> -1 or
          3 mdiv -5 <> -1 or
          2 mdiv -5 <> -1 or
          1 mdiv -5 <> -1 or
          0 mdiv -5 <>  0 or
         -1 mdiv -5 <>  0 or
         -2 mdiv -5 <>  0 or
         -3 mdiv -5 <>  0 or
         -4 mdiv -5 <>  0 or
         -5 mdiv -5 <>  1 or
         -6 mdiv -5 <>  1 or
         -7 mdiv -5 <>  1 or
         -8 mdiv -5 <>  1 or
         -9 mdiv -5 <>  1 or
        -10 mdiv -5 <>  2 then
      writeln(" ***** mdiv with two constants does not work correct.");
      okay := FALSE;
    end if;

    if  intExpr( 10) mdiv  5 <>  2 or
        intExpr(  9) mdiv  5 <>  1 or
        intExpr(  8) mdiv  5 <>  1 or
        intExpr(  7) mdiv  5 <>  1 or
        intExpr(  6) mdiv  5 <>  1 or
        intExpr(  5) mdiv  5 <>  1 or
        intExpr(  4) mdiv  5 <>  0 or
        intExpr(  3) mdiv  5 <>  0 or
        intExpr(  2) mdiv  5 <>  0 or
        intExpr(  1) mdiv  5 <>  0 or
        intExpr(  0) mdiv  5 <>  0 or
        intExpr( -1) mdiv  5 <> -1 or
        intExpr( -2) mdiv  5 <> -1 or
        intExpr( -3) mdiv  5 <> -1 or
        intExpr( -4) mdiv  5 <> -1 or
        intExpr( -5) mdiv  5 <> -1 or
        intExpr( -6) mdiv  5 <> -2 or
        intExpr( -7) mdiv  5 <> -2 or
        intExpr( -8) mdiv  5 <> -2 or
        intExpr( -9) mdiv  5 <> -2 or
        intExpr(-10) mdiv  5 <> -2 or
        intExpr( 10) mdiv  4 <>  2 or
        intExpr(  9) mdiv  4 <>  2 or
        intExpr(  8) mdiv  4 <>  2 or
        intExpr(  7) mdiv  4 <>  1 or
        intExpr(  6) mdiv  4 <>  1 or
        intExpr(  5) mdiv  4 <>  1 or
        intExpr(  4) mdiv  4 <>  1 or
        intExpr(  3) mdiv  4 <>  0 or
        intExpr(  2) mdiv  4 <>  0 or
        intExpr(  1) mdiv  4 <>  0 or
        intExpr(  0) mdiv  4 <>  0 or
        intExpr( -1) mdiv  4 <> -1 or
        intExpr( -2) mdiv  4 <> -1 or
        intExpr( -3) mdiv  4 <> -1 or
        intExpr( -4) mdiv  4 <> -1 or
        intExpr( -5) mdiv  4 <> -2 or
        intExpr( -6) mdiv  4 <> -2 or
        intExpr( -7) mdiv  4 <> -2 or
        intExpr( -8) mdiv  4 <> -2 or
        intExpr( -9) mdiv  4 <> -3 or
        intExpr(-10) mdiv  4 <> -3 or
        intExpr( 10) mdiv  3 <>  3 or
        intExpr(  9) mdiv  3 <>  3 or
        intExpr(  8) mdiv  3 <>  2 or
        intExpr(  7) mdiv  3 <>  2 or
        intExpr(  6) mdiv  3 <>  2 or
        intExpr(  5) mdiv  3 <>  1 or
        intExpr(  4) mdiv  3 <>  1 or
        intExpr(  3) mdiv  3 <>  1 or
        intExpr(  2) mdiv  3 <>  0 or
        intExpr(  1) mdiv  3 <>  0 or
        intExpr(  0) mdiv  3 <>  0 or
        intExpr( -1) mdiv  3 <> -1 or
        intExpr( -2) mdiv  3 <> -1 or
        intExpr( -3) mdiv  3 <> -1 or
        intExpr( -4) mdiv  3 <> -2 or
        intExpr( -5) mdiv  3 <> -2 or
        intExpr( -6) mdiv  3 <> -2 or
        intExpr( -7) mdiv  3 <> -3 or
        intExpr( -8) mdiv  3 <> -3 or
        intExpr( -9) mdiv  3 <> -3 or
        intExpr(-10) mdiv  3 <> -4 or
        intExpr( 10) mdiv  2 <>  5 or
        intExpr(  9) mdiv  2 <>  4 or
        intExpr(  8) mdiv  2 <>  4 or
        intExpr(  7) mdiv  2 <>  3 or
        intExpr(  6) mdiv  2 <>  3 or
        intExpr(  5) mdiv  2 <>  2 or
        intExpr(  4) mdiv  2 <>  2 or
        intExpr(  3) mdiv  2 <>  1 or
        intExpr(  2) mdiv  2 <>  1 or
        intExpr(  1) mdiv  2 <>  0 or
        intExpr(  0) mdiv  2 <>  0 or
        intExpr( -1) mdiv  2 <> -1 or
        intExpr( -2) mdiv  2 <> -1 or
        intExpr( -3) mdiv  2 <> -2 or
        intExpr( -4) mdiv  2 <> -2 or
        intExpr( -5) mdiv  2 <> -3 or
        intExpr( -6) mdiv  2 <> -3 or
        intExpr( -7) mdiv  2 <> -4 or
        intExpr( -8) mdiv  2 <> -4 or
        intExpr( -9) mdiv  2 <> -5 or
        intExpr(-10) mdiv  2 <> -5 or
        intExpr( 10) mdiv  1 <> 10 or
        intExpr(  9) mdiv  1 <>  9 or
        intExpr(  8) mdiv  1 <>  8 or
        intExpr(  7) mdiv  1 <>  7 or
        intExpr(  6) mdiv  1 <>  6 or
        intExpr(  5) mdiv  1 <>  5 or
        intExpr(  4) mdiv  1 <>  4 or
        intExpr(  3) mdiv  1 <>  3 or
        intExpr(  2) mdiv  1 <>  2 or
        intExpr(  1) mdiv  1 <>  1 or
        intExpr(  0) mdiv  1 <>  0 or
        intExpr( -1) mdiv  1 <> -1 or
        intExpr( -2) mdiv  1 <> -2 or
        intExpr( -3) mdiv  1 <> -3 or
        intExpr( -4) mdiv  1 <> -4 or
        intExpr( -5) mdiv  1 <> -5 or
        intExpr( -6) mdiv  1 <> -6 or
        intExpr( -7) mdiv  1 <> -7 or
        intExpr( -8) mdiv  1 <> -8 or
        intExpr( -9) mdiv  1 <> -9 or
        intExpr(-10) mdiv  1 <> -10 or
        intExpr( 10) mdiv -1 <> -10 or
        intExpr(  9) mdiv -1 <> -9 or
        intExpr(  8) mdiv -1 <> -8 or
        intExpr(  7) mdiv -1 <> -7 or
        intExpr(  6) mdiv -1 <> -6 or
        intExpr(  5) mdiv -1 <> -5 or
        intExpr(  4) mdiv -1 <> -4 or
        intExpr(  3) mdiv -1 <> -3 or
        intExpr(  2) mdiv -1 <> -2 or
        intExpr(  1) mdiv -1 <> -1 or
        intExpr(  0) mdiv -1 <>  0 or
        intExpr( -1) mdiv -1 <>  1 or
        intExpr( -2) mdiv -1 <>  2 or
        intExpr( -3) mdiv -1 <>  3 or
        intExpr( -4) mdiv -1 <>  4 or
        intExpr( -5) mdiv -1 <>  5 or
        intExpr( -6) mdiv -1 <>  6 or
        intExpr( -7) mdiv -1 <>  7 or
        intExpr( -8) mdiv -1 <>  8 or
        intExpr( -9) mdiv -1 <>  9 or
        intExpr(-10) mdiv -1 <> 10 or
        intExpr( 10) mdiv -2 <> -5 or
        intExpr(  9) mdiv -2 <> -5 or
        intExpr(  8) mdiv -2 <> -4 or
        intExpr(  7) mdiv -2 <> -4 or
        intExpr(  6) mdiv -2 <> -3 or
        intExpr(  5) mdiv -2 <> -3 or
        intExpr(  4) mdiv -2 <> -2 or
        intExpr(  3) mdiv -2 <> -2 or
        intExpr(  2) mdiv -2 <> -1 or
        intExpr(  1) mdiv -2 <> -1 or
        intExpr(  0) mdiv -2 <>  0 or
        intExpr( -1) mdiv -2 <>  0 or
        intExpr( -2) mdiv -2 <>  1 or
        intExpr( -3) mdiv -2 <>  1 or
        intExpr( -4) mdiv -2 <>  2 or
        intExpr( -5) mdiv -2 <>  2 or
        intExpr( -6) mdiv -2 <>  3 or
        intExpr( -7) mdiv -2 <>  3 or
        intExpr( -8) mdiv -2 <>  4 or
        intExpr( -9) mdiv -2 <>  4 or
        intExpr(-10) mdiv -2 <>  5 or
        intExpr( 10) mdiv -3 <> -4 or
        intExpr(  9) mdiv -3 <> -3 or
        intExpr(  8) mdiv -3 <> -3 or
        intExpr(  7) mdiv -3 <> -3 or
        intExpr(  6) mdiv -3 <> -2 or
        intExpr(  5) mdiv -3 <> -2 or
        intExpr(  4) mdiv -3 <> -2 or
        intExpr(  3) mdiv -3 <> -1 or
        intExpr(  2) mdiv -3 <> -1 or
        intExpr(  1) mdiv -3 <> -1 or
        intExpr(  0) mdiv -3 <>  0 or
        intExpr( -1) mdiv -3 <>  0 or
        intExpr( -2) mdiv -3 <>  0 or
        intExpr( -3) mdiv -3 <>  1 or
        intExpr( -4) mdiv -3 <>  1 or
        intExpr( -5) mdiv -3 <>  1 or
        intExpr( -6) mdiv -3 <>  2 or
        intExpr( -7) mdiv -3 <>  2 or
        intExpr( -8) mdiv -3 <>  2 or
        intExpr( -9) mdiv -3 <>  3 or
        intExpr(-10) mdiv -3 <>  3 or
        intExpr( 10) mdiv -4 <> -3 or
        intExpr(  9) mdiv -4 <> -3 or
        intExpr(  8) mdiv -4 <> -2 or
        intExpr(  7) mdiv -4 <> -2 or
        intExpr(  6) mdiv -4 <> -2 or
        intExpr(  5) mdiv -4 <> -2 or
        intExpr(  4) mdiv -4 <> -1 or
        intExpr(  3) mdiv -4 <> -1 or
        intExpr(  2) mdiv -4 <> -1 or
        intExpr(  1) mdiv -4 <> -1 or
        intExpr(  0) mdiv -4 <>  0 or
        intExpr( -1) mdiv -4 <>  0 or
        intExpr( -2) mdiv -4 <>  0 or
        intExpr( -3) mdiv -4 <>  0 or
        intExpr( -4) mdiv -4 <>  1 or
        intExpr( -5) mdiv -4 <>  1 or
        intExpr( -6) mdiv -4 <>  1 or
        intExpr( -7) mdiv -4 <>  1 or
        intExpr( -8) mdiv -4 <>  2 or
        intExpr( -9) mdiv -4 <>  2 or
        intExpr(-10) mdiv -4 <>  2 or
        intExpr( 10) mdiv -5 <> -2 or
        intExpr(  9) mdiv -5 <> -2 or
        intExpr(  8) mdiv -5 <> -2 or
        intExpr(  7) mdiv -5 <> -2 or
        intExpr(  6) mdiv -5 <> -2 or
        intExpr(  5) mdiv -5 <> -1 or
        intExpr(  4) mdiv -5 <> -1 or
        intExpr(  3) mdiv -5 <> -1 or
        intExpr(  2) mdiv -5 <> -1 or
        intExpr(  1) mdiv -5 <> -1 or
        intExpr(  0) mdiv -5 <>  0 or
        intExpr( -1) mdiv -5 <>  0 or
        intExpr( -2) mdiv -5 <>  0 or
        intExpr( -3) mdiv -5 <>  0 or
        intExpr( -4) mdiv -5 <>  0 or
        intExpr( -5) mdiv -5 <>  1 or
        intExpr( -6) mdiv -5 <>  1 or
        intExpr( -7) mdiv -5 <>  1 or
        intExpr( -8) mdiv -5 <>  1 or
        intExpr( -9) mdiv -5 <>  1 or
        intExpr(-10) mdiv -5 <>  2 then
      writeln(" ***** mdiv with an expression and a constant does not work correct");
      okay := FALSE;
    end if;

    if   10 mdiv intExpr( 5) <>  2 or
          9 mdiv intExpr( 5) <>  1 or
          8 mdiv intExpr( 5) <>  1 or
          7 mdiv intExpr( 5) <>  1 or
          6 mdiv intExpr( 5) <>  1 or
          5 mdiv intExpr( 5) <>  1 or
          4 mdiv intExpr( 5) <>  0 or
          3 mdiv intExpr( 5) <>  0 or
          2 mdiv intExpr( 5) <>  0 or
          1 mdiv intExpr( 5) <>  0 or
          0 mdiv intExpr( 5) <>  0 or
         -1 mdiv intExpr( 5) <> -1 or
         -2 mdiv intExpr( 5) <> -1 or
         -3 mdiv intExpr( 5) <> -1 or
         -4 mdiv intExpr( 5) <> -1 or
         -5 mdiv intExpr( 5) <> -1 or
         -6 mdiv intExpr( 5) <> -2 or
         -7 mdiv intExpr( 5) <> -2 or
         -8 mdiv intExpr( 5) <> -2 or
         -9 mdiv intExpr( 5) <> -2 or
        -10 mdiv intExpr( 5) <> -2 or
         10 mdiv intExpr( 4) <>  2 or
          9 mdiv intExpr( 4) <>  2 or
          8 mdiv intExpr( 4) <>  2 or
          7 mdiv intExpr( 4) <>  1 or
          6 mdiv intExpr( 4) <>  1 or
          5 mdiv intExpr( 4) <>  1 or
          4 mdiv intExpr( 4) <>  1 or
          3 mdiv intExpr( 4) <>  0 or
          2 mdiv intExpr( 4) <>  0 or
          1 mdiv intExpr( 4) <>  0 or
          0 mdiv intExpr( 4) <>  0 or
         -1 mdiv intExpr( 4) <> -1 or
         -2 mdiv intExpr( 4) <> -1 or
         -3 mdiv intExpr( 4) <> -1 or
         -4 mdiv intExpr( 4) <> -1 or
         -5 mdiv intExpr( 4) <> -2 or
         -6 mdiv intExpr( 4) <> -2 or
         -7 mdiv intExpr( 4) <> -2 or
         -8 mdiv intExpr( 4) <> -2 or
         -9 mdiv intExpr( 4) <> -3 or
        -10 mdiv intExpr( 4) <> -3 or
         10 mdiv intExpr( 3) <>  3 or
          9 mdiv intExpr( 3) <>  3 or
          8 mdiv intExpr( 3) <>  2 or
          7 mdiv intExpr( 3) <>  2 or
          6 mdiv intExpr( 3) <>  2 or
          5 mdiv intExpr( 3) <>  1 or
          4 mdiv intExpr( 3) <>  1 or
          3 mdiv intExpr( 3) <>  1 or
          2 mdiv intExpr( 3) <>  0 or
          1 mdiv intExpr( 3) <>  0 or
          0 mdiv intExpr( 3) <>  0 or
         -1 mdiv intExpr( 3) <> -1 or
         -2 mdiv intExpr( 3) <> -1 or
         -3 mdiv intExpr( 3) <> -1 or
         -4 mdiv intExpr( 3) <> -2 or
         -5 mdiv intExpr( 3) <> -2 or
         -6 mdiv intExpr( 3) <> -2 or
         -7 mdiv intExpr( 3) <> -3 or
         -8 mdiv intExpr( 3) <> -3 or
         -9 mdiv intExpr( 3) <> -3 or
        -10 mdiv intExpr( 3) <> -4 or
         10 mdiv intExpr( 2) <>  5 or
          9 mdiv intExpr( 2) <>  4 or
          8 mdiv intExpr( 2) <>  4 or
          7 mdiv intExpr( 2) <>  3 or
          6 mdiv intExpr( 2) <>  3 or
          5 mdiv intExpr( 2) <>  2 or
          4 mdiv intExpr( 2) <>  2 or
          3 mdiv intExpr( 2) <>  1 or
          2 mdiv intExpr( 2) <>  1 or
          1 mdiv intExpr( 2) <>  0 or
          0 mdiv intExpr( 2) <>  0 or
         -1 mdiv intExpr( 2) <> -1 or
         -2 mdiv intExpr( 2) <> -1 or
         -3 mdiv intExpr( 2) <> -2 or
         -4 mdiv intExpr( 2) <> -2 or
         -5 mdiv intExpr( 2) <> -3 or
         -6 mdiv intExpr( 2) <> -3 or
         -7 mdiv intExpr( 2) <> -4 or
         -8 mdiv intExpr( 2) <> -4 or
         -9 mdiv intExpr( 2) <> -5 or
        -10 mdiv intExpr( 2) <> -5 or
         10 mdiv intExpr( 1) <> 10 or
          9 mdiv intExpr( 1) <>  9 or
          8 mdiv intExpr( 1) <>  8 or
          7 mdiv intExpr( 1) <>  7 or
          6 mdiv intExpr( 1) <>  6 or
          5 mdiv intExpr( 1) <>  5 or
          4 mdiv intExpr( 1) <>  4 or
          3 mdiv intExpr( 1) <>  3 or
          2 mdiv intExpr( 1) <>  2 or
          1 mdiv intExpr( 1) <>  1 or
          0 mdiv intExpr( 1) <>  0 or
         -1 mdiv intExpr( 1) <> -1 or
         -2 mdiv intExpr( 1) <> -2 or
         -3 mdiv intExpr( 1) <> -3 or
         -4 mdiv intExpr( 1) <> -4 or
         -5 mdiv intExpr( 1) <> -5 or
         -6 mdiv intExpr( 1) <> -6 or
         -7 mdiv intExpr( 1) <> -7 or
         -8 mdiv intExpr( 1) <> -8 or
         -9 mdiv intExpr( 1) <> -9 or
        -10 mdiv intExpr( 1) <> -10 or
         10 mdiv intExpr(-1) <> -10 or
          9 mdiv intExpr(-1) <> -9 or
          8 mdiv intExpr(-1) <> -8 or
          7 mdiv intExpr(-1) <> -7 or
          6 mdiv intExpr(-1) <> -6 or
          5 mdiv intExpr(-1) <> -5 or
          4 mdiv intExpr(-1) <> -4 or
          3 mdiv intExpr(-1) <> -3 or
          2 mdiv intExpr(-1) <> -2 or
          1 mdiv intExpr(-1) <> -1 or
          0 mdiv intExpr(-1) <>  0 or
         -1 mdiv intExpr(-1) <>  1 or
         -2 mdiv intExpr(-1) <>  2 or
         -3 mdiv intExpr(-1) <>  3 or
         -4 mdiv intExpr(-1) <>  4 or
         -5 mdiv intExpr(-1) <>  5 or
         -6 mdiv intExpr(-1) <>  6 or
         -7 mdiv intExpr(-1) <>  7 or
         -8 mdiv intExpr(-1) <>  8 or
         -9 mdiv intExpr(-1) <>  9 or
        -10 mdiv intExpr(-1) <> 10 or
         10 mdiv intExpr(-2) <> -5 or
          9 mdiv intExpr(-2) <> -5 or
          8 mdiv intExpr(-2) <> -4 or
          7 mdiv intExpr(-2) <> -4 or
          6 mdiv intExpr(-2) <> -3 or
          5 mdiv intExpr(-2) <> -3 or
          4 mdiv intExpr(-2) <> -2 or
          3 mdiv intExpr(-2) <> -2 or
          2 mdiv intExpr(-2) <> -1 or
          1 mdiv intExpr(-2) <> -1 or
          0 mdiv intExpr(-2) <>  0 or
         -1 mdiv intExpr(-2) <>  0 or
         -2 mdiv intExpr(-2) <>  1 or
         -3 mdiv intExpr(-2) <>  1 or
         -4 mdiv intExpr(-2) <>  2 or
         -5 mdiv intExpr(-2) <>  2 or
         -6 mdiv intExpr(-2) <>  3 or
         -7 mdiv intExpr(-2) <>  3 or
         -8 mdiv intExpr(-2) <>  4 or
         -9 mdiv intExpr(-2) <>  4 or
        -10 mdiv intExpr(-2) <>  5 or
         10 mdiv intExpr(-3) <> -4 or
          9 mdiv intExpr(-3) <> -3 or
          8 mdiv intExpr(-3) <> -3 or
          7 mdiv intExpr(-3) <> -3 or
          6 mdiv intExpr(-3) <> -2 or
          5 mdiv intExpr(-3) <> -2 or
          4 mdiv intExpr(-3) <> -2 or
          3 mdiv intExpr(-3) <> -1 or
          2 mdiv intExpr(-3) <> -1 or
          1 mdiv intExpr(-3) <> -1 or
          0 mdiv intExpr(-3) <>  0 or
         -1 mdiv intExpr(-3) <>  0 or
         -2 mdiv intExpr(-3) <>  0 or
         -3 mdiv intExpr(-3) <>  1 or
         -4 mdiv intExpr(-3) <>  1 or
         -5 mdiv intExpr(-3) <>  1 or
         -6 mdiv intExpr(-3) <>  2 or
         -7 mdiv intExpr(-3) <>  2 or
         -8 mdiv intExpr(-3) <>  2 or
         -9 mdiv intExpr(-3) <>  3 or
        -10 mdiv intExpr(-3) <>  3 or
         10 mdiv intExpr(-4) <> -3 or
          9 mdiv intExpr(-4) <> -3 or
          8 mdiv intExpr(-4) <> -2 or
          7 mdiv intExpr(-4) <> -2 or
          6 mdiv intExpr(-4) <> -2 or
          5 mdiv intExpr(-4) <> -2 or
          4 mdiv intExpr(-4) <> -1 or
          3 mdiv intExpr(-4) <> -1 or
          2 mdiv intExpr(-4) <> -1 or
          1 mdiv intExpr(-4) <> -1 or
          0 mdiv intExpr(-4) <>  0 or
         -1 mdiv intExpr(-4) <>  0 or
         -2 mdiv intExpr(-4) <>  0 or
         -3 mdiv intExpr(-4) <>  0 or
         -4 mdiv intExpr(-4) <>  1 or
         -5 mdiv intExpr(-4) <>  1 or
         -6 mdiv intExpr(-4) <>  1 or
         -7 mdiv intExpr(-4) <>  1 or
         -8 mdiv intExpr(-4) <>  2 or
         -9 mdiv intExpr(-4) <>  2 or
        -10 mdiv intExpr(-4) <>  2 or
         10 mdiv intExpr(-5) <> -2 or
          9 mdiv intExpr(-5) <> -2 or
          8 mdiv intExpr(-5) <> -2 or
          7 mdiv intExpr(-5) <> -2 or
          6 mdiv intExpr(-5) <> -2 or
          5 mdiv intExpr(-5) <> -1 or
          4 mdiv intExpr(-5) <> -1 or
          3 mdiv intExpr(-5) <> -1 or
          2 mdiv intExpr(-5) <> -1 or
          1 mdiv intExpr(-5) <> -1 or
          0 mdiv intExpr(-5) <>  0 or
         -1 mdiv intExpr(-5) <>  0 or
         -2 mdiv intExpr(-5) <>  0 or
         -3 mdiv intExpr(-5) <>  0 or
         -4 mdiv intExpr(-5) <>  0 or
         -5 mdiv intExpr(-5) <>  1 or
         -6 mdiv intExpr(-5) <>  1 or
         -7 mdiv intExpr(-5) <>  1 or
         -8 mdiv intExpr(-5) <>  1 or
         -9 mdiv intExpr(-5) <>  1 or
        -10 mdiv intExpr(-5) <>  2 then
      writeln(" ***** mdiv with a constant and an expression does not work correct.");
      okay := FALSE;
    end if;

    if  intExpr( 10) mdiv intExpr( 5) <>  2 or
        intExpr(  9) mdiv intExpr( 5) <>  1 or
        intExpr(  8) mdiv intExpr( 5) <>  1 or
        intExpr(  7) mdiv intExpr( 5) <>  1 or
        intExpr(  6) mdiv intExpr( 5) <>  1 or
        intExpr(  5) mdiv intExpr( 5) <>  1 or
        intExpr(  4) mdiv intExpr( 5) <>  0 or
        intExpr(  3) mdiv intExpr( 5) <>  0 or
        intExpr(  2) mdiv intExpr( 5) <>  0 or
        intExpr(  1) mdiv intExpr( 5) <>  0 or
        intExpr(  0) mdiv intExpr( 5) <>  0 or
        intExpr( -1) mdiv intExpr( 5) <> -1 or
        intExpr( -2) mdiv intExpr( 5) <> -1 or
        intExpr( -3) mdiv intExpr( 5) <> -1 or
        intExpr( -4) mdiv intExpr( 5) <> -1 or
        intExpr( -5) mdiv intExpr( 5) <> -1 or
        intExpr( -6) mdiv intExpr( 5) <> -2 or
        intExpr( -7) mdiv intExpr( 5) <> -2 or
        intExpr( -8) mdiv intExpr( 5) <> -2 or
        intExpr( -9) mdiv intExpr( 5) <> -2 or
        intExpr(-10) mdiv intExpr( 5) <> -2 or
        intExpr( 10) mdiv intExpr( 4) <>  2 or
        intExpr(  9) mdiv intExpr( 4) <>  2 or
        intExpr(  8) mdiv intExpr( 4) <>  2 or
        intExpr(  7) mdiv intExpr( 4) <>  1 or
        intExpr(  6) mdiv intExpr( 4) <>  1 or
        intExpr(  5) mdiv intExpr( 4) <>  1 or
        intExpr(  4) mdiv intExpr( 4) <>  1 or
        intExpr(  3) mdiv intExpr( 4) <>  0 or
        intExpr(  2) mdiv intExpr( 4) <>  0 or
        intExpr(  1) mdiv intExpr( 4) <>  0 or
        intExpr(  0) mdiv intExpr( 4) <>  0 or
        intExpr( -1) mdiv intExpr( 4) <> -1 or
        intExpr( -2) mdiv intExpr( 4) <> -1 or
        intExpr( -3) mdiv intExpr( 4) <> -1 or
        intExpr( -4) mdiv intExpr( 4) <> -1 or
        intExpr( -5) mdiv intExpr( 4) <> -2 or
        intExpr( -6) mdiv intExpr( 4) <> -2 or
        intExpr( -7) mdiv intExpr( 4) <> -2 or
        intExpr( -8) mdiv intExpr( 4) <> -2 or
        intExpr( -9) mdiv intExpr( 4) <> -3 or
        intExpr(-10) mdiv intExpr( 4) <> -3 or
        intExpr( 10) mdiv intExpr( 3) <>  3 or
        intExpr(  9) mdiv intExpr( 3) <>  3 or
        intExpr(  8) mdiv intExpr( 3) <>  2 or
        intExpr(  7) mdiv intExpr( 3) <>  2 or
        intExpr(  6) mdiv intExpr( 3) <>  2 or
        intExpr(  5) mdiv intExpr( 3) <>  1 or
        intExpr(  4) mdiv intExpr( 3) <>  1 or
        intExpr(  3) mdiv intExpr( 3) <>  1 or
        intExpr(  2) mdiv intExpr( 3) <>  0 or
        intExpr(  1) mdiv intExpr( 3) <>  0 or
        intExpr(  0) mdiv intExpr( 3) <>  0 or
        intExpr( -1) mdiv intExpr( 3) <> -1 or
        intExpr( -2) mdiv intExpr( 3) <> -1 or
        intExpr( -3) mdiv intExpr( 3) <> -1 or
        intExpr( -4) mdiv intExpr( 3) <> -2 or
        intExpr( -5) mdiv intExpr( 3) <> -2 or
        intExpr( -6) mdiv intExpr( 3) <> -2 or
        intExpr( -7) mdiv intExpr( 3) <> -3 or
        intExpr( -8) mdiv intExpr( 3) <> -3 or
        intExpr( -9) mdiv intExpr( 3) <> -3 or
        intExpr(-10) mdiv intExpr( 3) <> -4 or
        intExpr( 10) mdiv intExpr( 2) <>  5 or
        intExpr(  9) mdiv intExpr( 2) <>  4 or
        intExpr(  8) mdiv intExpr( 2) <>  4 or
        intExpr(  7) mdiv intExpr( 2) <>  3 or
        intExpr(  6) mdiv intExpr( 2) <>  3 or
        intExpr(  5) mdiv intExpr( 2) <>  2 or
        intExpr(  4) mdiv intExpr( 2) <>  2 or
        intExpr(  3) mdiv intExpr( 2) <>  1 or
        intExpr(  2) mdiv intExpr( 2) <>  1 or
        intExpr(  1) mdiv intExpr( 2) <>  0 or
        intExpr(  0) mdiv intExpr( 2) <>  0 or
        intExpr( -1) mdiv intExpr( 2) <> -1 or
        intExpr( -2) mdiv intExpr( 2) <> -1 or
        intExpr( -3) mdiv intExpr( 2) <> -2 or
        intExpr( -4) mdiv intExpr( 2) <> -2 or
        intExpr( -5) mdiv intExpr( 2) <> -3 or
        intExpr( -6) mdiv intExpr( 2) <> -3 or
        intExpr( -7) mdiv intExpr( 2) <> -4 or
        intExpr( -8) mdiv intExpr( 2) <> -4 or
        intExpr( -9) mdiv intExpr( 2) <> -5 or
        intExpr(-10) mdiv intExpr( 2) <> -5 or
        intExpr( 10) mdiv intExpr( 1) <> 10 or
        intExpr(  9) mdiv intExpr( 1) <>  9 or
        intExpr(  8) mdiv intExpr( 1) <>  8 or
        intExpr(  7) mdiv intExpr( 1) <>  7 or
        intExpr(  6) mdiv intExpr( 1) <>  6 or
        intExpr(  5) mdiv intExpr( 1) <>  5 or
        intExpr(  4) mdiv intExpr( 1) <>  4 or
        intExpr(  3) mdiv intExpr( 1) <>  3 or
        intExpr(  2) mdiv intExpr( 1) <>  2 or
        intExpr(  1) mdiv intExpr( 1) <>  1 or
        intExpr(  0) mdiv intExpr( 1) <>  0 or
        intExpr( -1) mdiv intExpr( 1) <> -1 or
        intExpr( -2) mdiv intExpr( 1) <> -2 or
        intExpr( -3) mdiv intExpr( 1) <> -3 or
        intExpr( -4) mdiv intExpr( 1) <> -4 or
        intExpr( -5) mdiv intExpr( 1) <> -5 or
        intExpr( -6) mdiv intExpr( 1) <> -6 or
        intExpr( -7) mdiv intExpr( 1) <> -7 or
        intExpr( -8) mdiv intExpr( 1) <> -8 or
        intExpr( -9) mdiv intExpr( 1) <> -9 or
        intExpr(-10) mdiv intExpr( 1) <> -10 or
        intExpr( 10) mdiv intExpr(-1) <> -10 or
        intExpr(  9) mdiv intExpr(-1) <> -9 or
        intExpr(  8) mdiv intExpr(-1) <> -8 or
        intExpr(  7) mdiv intExpr(-1) <> -7 or
        intExpr(  6) mdiv intExpr(-1) <> -6 or
        intExpr(  5) mdiv intExpr(-1) <> -5 or
        intExpr(  4) mdiv intExpr(-1) <> -4 or
        intExpr(  3) mdiv intExpr(-1) <> -3 or
        intExpr(  2) mdiv intExpr(-1) <> -2 or
        intExpr(  1) mdiv intExpr(-1) <> -1 or
        intExpr(  0) mdiv intExpr(-1) <>  0 or
        intExpr( -1) mdiv intExpr(-1) <>  1 or
        intExpr( -2) mdiv intExpr(-1) <>  2 or
        intExpr( -3) mdiv intExpr(-1) <>  3 or
        intExpr( -4) mdiv intExpr(-1) <>  4 or
        intExpr( -5) mdiv intExpr(-1) <>  5 or
        intExpr( -6) mdiv intExpr(-1) <>  6 or
        intExpr( -7) mdiv intExpr(-1) <>  7 or
        intExpr( -8) mdiv intExpr(-1) <>  8 or
        intExpr( -9) mdiv intExpr(-1) <>  9 or
        intExpr(-10) mdiv intExpr(-1) <> 10 or
        intExpr( 10) mdiv intExpr(-2) <> -5 or
        intExpr(  9) mdiv intExpr(-2) <> -5 or
        intExpr(  8) mdiv intExpr(-2) <> -4 or
        intExpr(  7) mdiv intExpr(-2) <> -4 or
        intExpr(  6) mdiv intExpr(-2) <> -3 or
        intExpr(  5) mdiv intExpr(-2) <> -3 or
        intExpr(  4) mdiv intExpr(-2) <> -2 or
        intExpr(  3) mdiv intExpr(-2) <> -2 or
        intExpr(  2) mdiv intExpr(-2) <> -1 or
        intExpr(  1) mdiv intExpr(-2) <> -1 or
        intExpr(  0) mdiv intExpr(-2) <>  0 or
        intExpr( -1) mdiv intExpr(-2) <>  0 or
        intExpr( -2) mdiv intExpr(-2) <>  1 or
        intExpr( -3) mdiv intExpr(-2) <>  1 or
        intExpr( -4) mdiv intExpr(-2) <>  2 or
        intExpr( -5) mdiv intExpr(-2) <>  2 or
        intExpr( -6) mdiv intExpr(-2) <>  3 or
        intExpr( -7) mdiv intExpr(-2) <>  3 or
        intExpr( -8) mdiv intExpr(-2) <>  4 or
        intExpr( -9) mdiv intExpr(-2) <>  4 or
        intExpr(-10) mdiv intExpr(-2) <>  5 or
        intExpr( 10) mdiv intExpr(-3) <> -4 or
        intExpr(  9) mdiv intExpr(-3) <> -3 or
        intExpr(  8) mdiv intExpr(-3) <> -3 or
        intExpr(  7) mdiv intExpr(-3) <> -3 or
        intExpr(  6) mdiv intExpr(-3) <> -2 or
        intExpr(  5) mdiv intExpr(-3) <> -2 or
        intExpr(  4) mdiv intExpr(-3) <> -2 or
        intExpr(  3) mdiv intExpr(-3) <> -1 or
        intExpr(  2) mdiv intExpr(-3) <> -1 or
        intExpr(  1) mdiv intExpr(-3) <> -1 or
        intExpr(  0) mdiv intExpr(-3) <>  0 or
        intExpr( -1) mdiv intExpr(-3) <>  0 or
        intExpr( -2) mdiv intExpr(-3) <>  0 or
        intExpr( -3) mdiv intExpr(-3) <>  1 or
        intExpr( -4) mdiv intExpr(-3) <>  1 or
        intExpr( -5) mdiv intExpr(-3) <>  1 or
        intExpr( -6) mdiv intExpr(-3) <>  2 or
        intExpr( -7) mdiv intExpr(-3) <>  2 or
        intExpr( -8) mdiv intExpr(-3) <>  2 or
        intExpr( -9) mdiv intExpr(-3) <>  3 or
        intExpr(-10) mdiv intExpr(-3) <>  3 or
        intExpr( 10) mdiv intExpr(-4) <> -3 or
        intExpr(  9) mdiv intExpr(-4) <> -3 or
        intExpr(  8) mdiv intExpr(-4) <> -2 or
        intExpr(  7) mdiv intExpr(-4) <> -2 or
        intExpr(  6) mdiv intExpr(-4) <> -2 or
        intExpr(  5) mdiv intExpr(-4) <> -2 or
        intExpr(  4) mdiv intExpr(-4) <> -1 or
        intExpr(  3) mdiv intExpr(-4) <> -1 or
        intExpr(  2) mdiv intExpr(-4) <> -1 or
        intExpr(  1) mdiv intExpr(-4) <> -1 or
        intExpr(  0) mdiv intExpr(-4) <>  0 or
        intExpr( -1) mdiv intExpr(-4) <>  0 or
        intExpr( -2) mdiv intExpr(-4) <>  0 or
        intExpr( -3) mdiv intExpr(-4) <>  0 or
        intExpr( -4) mdiv intExpr(-4) <>  1 or
        intExpr( -5) mdiv intExpr(-4) <>  1 or
        intExpr( -6) mdiv intExpr(-4) <>  1 or
        intExpr( -7) mdiv intExpr(-4) <>  1 or
        intExpr( -8) mdiv intExpr(-4) <>  2 or
        intExpr( -9) mdiv intExpr(-4) <>  2 or
        intExpr(-10) mdiv intExpr(-4) <>  2 or
        intExpr( 10) mdiv intExpr(-5) <> -2 or
        intExpr(  9) mdiv intExpr(-5) <> -2 or
        intExpr(  8) mdiv intExpr(-5) <> -2 or
        intExpr(  7) mdiv intExpr(-5) <> -2 or
        intExpr(  6) mdiv intExpr(-5) <> -2 or
        intExpr(  5) mdiv intExpr(-5) <> -1 or
        intExpr(  4) mdiv intExpr(-5) <> -1 or
        intExpr(  3) mdiv intExpr(-5) <> -1 or
        intExpr(  2) mdiv intExpr(-5) <> -1 or
        intExpr(  1) mdiv intExpr(-5) <> -1 or
        intExpr(  0) mdiv intExpr(-5) <>  0 or
        intExpr( -1) mdiv intExpr(-5) <>  0 or
        intExpr( -2) mdiv intExpr(-5) <>  0 or
        intExpr( -3) mdiv intExpr(-5) <>  0 or
        intExpr( -4) mdiv intExpr(-5) <>  0 or
        intExpr( -5) mdiv intExpr(-5) <>  1 or
        intExpr( -6) mdiv intExpr(-5) <>  1 or
        intExpr( -7) mdiv intExpr(-5) <>  1 or
        intExpr( -8) mdiv intExpr(-5) <>  1 or
        intExpr( -9) mdiv intExpr(-5) <>  1 or
        intExpr(-10) mdiv intExpr(-5) <>  2 then
      writeln(" ***** mdiv with two expressions does not work correct.");
      okay := FALSE;
    end if;

    if         2109876543  mdiv           INT32_MIN  <>          -1 or
               2109876543  mdiv         -1073741824  <>          -2 or
               2109876543  mdiv          -536870912  <>          -4 or
               2109876543  mdiv          -268435456  <>          -8 or
               2109876543  mdiv          -134217728  <>         -16 or
               2109876543  mdiv           -67108864  <>         -32 or
               2109876543  mdiv           -33554432  <>         -63 or
               2109876543  mdiv           -16777216  <>        -126 or
               2109876543  mdiv            -8388608  <>        -252 or
               2109876543  mdiv            -4194304  <>        -504 or
               2109876543  mdiv            -2097152  <>       -1007 or
               2109876543  mdiv            -1048576  <>       -2013 or
               2109876543  mdiv             -524288  <>       -4025 or
               2109876543  mdiv             -262144  <>       -8049 or
               2109876543  mdiv             -131072  <>      -16098 or
               2109876543  mdiv              -65536  <>      -32195 or
               2109876543  mdiv              -32768  <>      -64389 or
               2109876543  mdiv              -16384  <>     -128777 or
               2109876543  mdiv               -8192  <>     -257554 or
               2109876543  mdiv               -4096  <>     -515107 or
               2109876543  mdiv               -2048  <>    -1030214 or
               2109876543  mdiv               -1024  <>    -2060427 or
               2109876543  mdiv                -512  <>    -4120853 or
               2109876543  mdiv                -256  <>    -8241706 or
               2109876543  mdiv                -128  <>   -16483411 or
               2109876543  mdiv                 -64  <>   -32966821 or
               2109876543  mdiv                 -32  <>   -65933642 or
               2109876543  mdiv                 -16  <>  -131867284 or
               2109876543  mdiv                  -8  <>  -263734568 or
               2109876543  mdiv                  -4  <>  -527469136 or
               2109876543  mdiv                  -2  <> -1054938272 or
               2109876543  mdiv                   2  <>  1054938271 or
               2109876543  mdiv                   4  <>   527469135 or
               2109876543  mdiv                   8  <>   263734567 or
               2109876543  mdiv                  16  <>   131867283 or
               2109876543  mdiv                  32  <>    65933641 or
               2109876543  mdiv                  64  <>    32966820 or
               2109876543  mdiv                 128  <>    16483410 or
               2109876543  mdiv                 256  <>     8241705 or
               2109876543  mdiv                 512  <>     4120852 or
               2109876543  mdiv                1024  <>     2060426 or
               2109876543  mdiv                2048  <>     1030213 or
               2109876543  mdiv                4096  <>      515106 or
               2109876543  mdiv                8192  <>      257553 or
               2109876543  mdiv               16384  <>      128776 or
               2109876543  mdiv               32768  <>       64388 or
               2109876543  mdiv               65536  <>       32194 or
               2109876543  mdiv              131072  <>       16097 or
               2109876543  mdiv              262144  <>        8048 or
               2109876543  mdiv              524288  <>        4024 or
               2109876543  mdiv             1048576  <>        2012 or
               2109876543  mdiv             2097152  <>        1006 or
               2109876543  mdiv             4194304  <>         503 or
               2109876543  mdiv             8388608  <>         251 or
               2109876543  mdiv            16777216  <>         125 or
               2109876543  mdiv            33554432  <>          62 or
               2109876543  mdiv            67108864  <>          31 or
               2109876543  mdiv           134217728  <>          15 or
               2109876543  mdiv           268435456  <>           7 or
               2109876543  mdiv           536870912  <>           3 or
               2109876543  mdiv          1073741824  <>           1 or
       intExpr(2109876543) mdiv           INT32_MIN  <>          -1 or
       intExpr(2109876543) mdiv         -1073741824  <>          -2 or
       intExpr(2109876543) mdiv          -536870912  <>          -4 or
       intExpr(2109876543) mdiv          -268435456  <>          -8 or
       intExpr(2109876543) mdiv          -134217728  <>         -16 or
       intExpr(2109876543) mdiv           -67108864  <>         -32 or
       intExpr(2109876543) mdiv           -33554432  <>         -63 or
       intExpr(2109876543) mdiv           -16777216  <>        -126 or
       intExpr(2109876543) mdiv            -8388608  <>        -252 or
       intExpr(2109876543) mdiv            -4194304  <>        -504 or
       intExpr(2109876543) mdiv            -2097152  <>       -1007 or
       intExpr(2109876543) mdiv            -1048576  <>       -2013 or
       intExpr(2109876543) mdiv             -524288  <>       -4025 or
       intExpr(2109876543) mdiv             -262144  <>       -8049 or
       intExpr(2109876543) mdiv             -131072  <>      -16098 or
       intExpr(2109876543) mdiv              -65536  <>      -32195 or
       intExpr(2109876543) mdiv              -32768  <>      -64389 or
       intExpr(2109876543) mdiv              -16384  <>     -128777 or
       intExpr(2109876543) mdiv               -8192  <>     -257554 or
       intExpr(2109876543) mdiv               -4096  <>     -515107 or
       intExpr(2109876543) mdiv               -2048  <>    -1030214 or
       intExpr(2109876543) mdiv               -1024  <>    -2060427 or
       intExpr(2109876543) mdiv                -512  <>    -4120853 or
       intExpr(2109876543) mdiv                -256  <>    -8241706 or
       intExpr(2109876543) mdiv                -128  <>   -16483411 or
       intExpr(2109876543) mdiv                 -64  <>   -32966821 or
       intExpr(2109876543) mdiv                 -32  <>   -65933642 or
       intExpr(2109876543) mdiv                 -16  <>  -131867284 or
       intExpr(2109876543) mdiv                  -8  <>  -263734568 or
       intExpr(2109876543) mdiv                  -4  <>  -527469136 or
       intExpr(2109876543) mdiv                  -2  <> -1054938272 or
       intExpr(2109876543) mdiv                   2  <>  1054938271 or
       intExpr(2109876543) mdiv                   4  <>   527469135 or
       intExpr(2109876543) mdiv                   8  <>   263734567 or
       intExpr(2109876543) mdiv                  16  <>   131867283 or
       intExpr(2109876543) mdiv                  32  <>    65933641 or
       intExpr(2109876543) mdiv                  64  <>    32966820 or
       intExpr(2109876543) mdiv                 128  <>    16483410 or
       intExpr(2109876543) mdiv                 256  <>     8241705 or
       intExpr(2109876543) mdiv                 512  <>     4120852 or
       intExpr(2109876543) mdiv                1024  <>     2060426 or
       intExpr(2109876543) mdiv                2048  <>     1030213 or
       intExpr(2109876543) mdiv                4096  <>      515106 or
       intExpr(2109876543) mdiv                8192  <>      257553 or
       intExpr(2109876543) mdiv               16384  <>      128776 or
       intExpr(2109876543) mdiv               32768  <>       64388 or
       intExpr(2109876543) mdiv               65536  <>       32194 or
       intExpr(2109876543) mdiv              131072  <>       16097 or
       intExpr(2109876543) mdiv              262144  <>        8048 or
       intExpr(2109876543) mdiv              524288  <>        4024 or
       intExpr(2109876543) mdiv             1048576  <>        2012 or
       intExpr(2109876543) mdiv             2097152  <>        1006 or
       intExpr(2109876543) mdiv             4194304  <>         503 or
       intExpr(2109876543) mdiv             8388608  <>         251 or
       intExpr(2109876543) mdiv            16777216  <>         125 or
       intExpr(2109876543) mdiv            33554432  <>          62 or
       intExpr(2109876543) mdiv            67108864  <>          31 or
       intExpr(2109876543) mdiv           134217728  <>          15 or
       intExpr(2109876543) mdiv           268435456  <>           7 or
       intExpr(2109876543) mdiv           536870912  <>           3 or
       intExpr(2109876543) mdiv          1073741824  <>           1 or
               2109876543  mdiv intExpr(  INT32_MIN) <>          -1 or
               2109876543  mdiv intExpr(-1073741824) <>          -2 or
               2109876543  mdiv intExpr( -536870912) <>          -4 or
               2109876543  mdiv intExpr( -268435456) <>          -8 or
               2109876543  mdiv intExpr( -134217728) <>         -16 or
               2109876543  mdiv intExpr(  -67108864) <>         -32 or
               2109876543  mdiv intExpr(  -33554432) <>         -63 or
               2109876543  mdiv intExpr(  -16777216) <>        -126 or
               2109876543  mdiv intExpr(   -8388608) <>        -252 or
               2109876543  mdiv intExpr(   -4194304) <>        -504 or
               2109876543  mdiv intExpr(   -2097152) <>       -1007 or
               2109876543  mdiv intExpr(   -1048576) <>       -2013 or
               2109876543  mdiv intExpr(    -524288) <>       -4025 or
               2109876543  mdiv intExpr(    -262144) <>       -8049 or
               2109876543  mdiv intExpr(    -131072) <>      -16098 or
               2109876543  mdiv intExpr(     -65536) <>      -32195 or
               2109876543  mdiv intExpr(     -32768) <>      -64389 or
               2109876543  mdiv intExpr(     -16384) <>     -128777 or
               2109876543  mdiv intExpr(      -8192) <>     -257554 or
               2109876543  mdiv intExpr(      -4096) <>     -515107 or
               2109876543  mdiv intExpr(      -2048) <>    -1030214 or
               2109876543  mdiv intExpr(      -1024) <>    -2060427 or
               2109876543  mdiv intExpr(       -512) <>    -4120853 or
               2109876543  mdiv intExpr(       -256) <>    -8241706 or
               2109876543  mdiv intExpr(       -128) <>   -16483411 or
               2109876543  mdiv intExpr(        -64) <>   -32966821 or
               2109876543  mdiv intExpr(        -32) <>   -65933642 or
               2109876543  mdiv intExpr(        -16) <>  -131867284 or
               2109876543  mdiv intExpr(         -8) <>  -263734568 or
               2109876543  mdiv intExpr(         -4) <>  -527469136 or
               2109876543  mdiv intExpr(         -2) <> -1054938272 or
               2109876543  mdiv intExpr(          2) <>  1054938271 or
               2109876543  mdiv intExpr(          4) <>   527469135 or
               2109876543  mdiv intExpr(          8) <>   263734567 or
               2109876543  mdiv intExpr(         16) <>   131867283 or
               2109876543  mdiv intExpr(         32) <>    65933641 or
               2109876543  mdiv intExpr(         64) <>    32966820 or
               2109876543  mdiv intExpr(        128) <>    16483410 or
               2109876543  mdiv intExpr(        256) <>     8241705 or
               2109876543  mdiv intExpr(        512) <>     4120852 or
               2109876543  mdiv intExpr(       1024) <>     2060426 or
               2109876543  mdiv intExpr(       2048) <>     1030213 or
               2109876543  mdiv intExpr(       4096) <>      515106 or
               2109876543  mdiv intExpr(       8192) <>      257553 or
               2109876543  mdiv intExpr(      16384) <>      128776 or
               2109876543  mdiv intExpr(      32768) <>       64388 or
               2109876543  mdiv intExpr(      65536) <>       32194 or
               2109876543  mdiv intExpr(     131072) <>       16097 or
               2109876543  mdiv intExpr(     262144) <>        8048 or
               2109876543  mdiv intExpr(     524288) <>        4024 or
               2109876543  mdiv intExpr(    1048576) <>        2012 or
               2109876543  mdiv intExpr(    2097152) <>        1006 or
               2109876543  mdiv intExpr(    4194304) <>         503 or
               2109876543  mdiv intExpr(    8388608) <>         251 or
               2109876543  mdiv intExpr(   16777216) <>         125 or
               2109876543  mdiv intExpr(   33554432) <>          62 or
               2109876543  mdiv intExpr(   67108864) <>          31 or
               2109876543  mdiv intExpr(  134217728) <>          15 or
               2109876543  mdiv intExpr(  268435456) <>           7 or
               2109876543  mdiv intExpr(  536870912) <>           3 or
               2109876543  mdiv intExpr( 1073741824) <>           1 or
       intExpr(2109876543) mdiv intExpr(  INT32_MIN) <>          -1 or
       intExpr(2109876543) mdiv intExpr(-1073741824) <>          -2 or
       intExpr(2109876543) mdiv intExpr( -536870912) <>          -4 or
       intExpr(2109876543) mdiv intExpr( -268435456) <>          -8 or
       intExpr(2109876543) mdiv intExpr( -134217728) <>         -16 or
       intExpr(2109876543) mdiv intExpr(  -67108864) <>         -32 or
       intExpr(2109876543) mdiv intExpr(  -33554432) <>         -63 or
       intExpr(2109876543) mdiv intExpr(  -16777216) <>        -126 or
       intExpr(2109876543) mdiv intExpr(   -8388608) <>        -252 or
       intExpr(2109876543) mdiv intExpr(   -4194304) <>        -504 or
       intExpr(2109876543) mdiv intExpr(   -2097152) <>       -1007 or
       intExpr(2109876543) mdiv intExpr(   -1048576) <>       -2013 or
       intExpr(2109876543) mdiv intExpr(    -524288) <>       -4025 or
       intExpr(2109876543) mdiv intExpr(    -262144) <>       -8049 or
       intExpr(2109876543) mdiv intExpr(    -131072) <>      -16098 or
       intExpr(2109876543) mdiv intExpr(     -65536) <>      -32195 or
       intExpr(2109876543) mdiv intExpr(     -32768) <>      -64389 or
       intExpr(2109876543) mdiv intExpr(     -16384) <>     -128777 or
       intExpr(2109876543) mdiv intExpr(      -8192) <>     -257554 or
       intExpr(2109876543) mdiv intExpr(      -4096) <>     -515107 or
       intExpr(2109876543) mdiv intExpr(      -2048) <>    -1030214 or
       intExpr(2109876543) mdiv intExpr(      -1024) <>    -2060427 or
       intExpr(2109876543) mdiv intExpr(       -512) <>    -4120853 or
       intExpr(2109876543) mdiv intExpr(       -256) <>    -8241706 or
       intExpr(2109876543) mdiv intExpr(       -128) <>   -16483411 or
       intExpr(2109876543) mdiv intExpr(        -64) <>   -32966821 or
       intExpr(2109876543) mdiv intExpr(        -32) <>   -65933642 or
       intExpr(2109876543) mdiv intExpr(        -16) <>  -131867284 or
       intExpr(2109876543) mdiv intExpr(         -8) <>  -263734568 or
       intExpr(2109876543) mdiv intExpr(         -4) <>  -527469136 or
       intExpr(2109876543) mdiv intExpr(         -2) <> -1054938272 or
       intExpr(2109876543) mdiv intExpr(          2) <>  1054938271 or
       intExpr(2109876543) mdiv intExpr(          4) <>   527469135 or
       intExpr(2109876543) mdiv intExpr(          8) <>   263734567 or
       intExpr(2109876543) mdiv intExpr(         16) <>   131867283 or
       intExpr(2109876543) mdiv intExpr(         32) <>    65933641 or
       intExpr(2109876543) mdiv intExpr(         64) <>    32966820 or
       intExpr(2109876543) mdiv intExpr(        128) <>    16483410 or
       intExpr(2109876543) mdiv intExpr(        256) <>     8241705 or
       intExpr(2109876543) mdiv intExpr(        512) <>     4120852 or
       intExpr(2109876543) mdiv intExpr(       1024) <>     2060426 or
       intExpr(2109876543) mdiv intExpr(       2048) <>     1030213 or
       intExpr(2109876543) mdiv intExpr(       4096) <>      515106 or
       intExpr(2109876543) mdiv intExpr(       8192) <>      257553 or
       intExpr(2109876543) mdiv intExpr(      16384) <>      128776 or
       intExpr(2109876543) mdiv intExpr(      32768) <>       64388 or
       intExpr(2109876543) mdiv intExpr(      65536) <>       32194 or
       intExpr(2109876543) mdiv intExpr(     131072) <>       16097 or
       intExpr(2109876543) mdiv intExpr(     262144) <>        8048 or
       intExpr(2109876543) mdiv intExpr(     524288) <>        4024 or
       intExpr(2109876543) mdiv intExpr(    1048576) <>        2012 or
       intExpr(2109876543) mdiv intExpr(    2097152) <>        1006 or
       intExpr(2109876543) mdiv intExpr(    4194304) <>         503 or
       intExpr(2109876543) mdiv intExpr(    8388608) <>         251 or
       intExpr(2109876543) mdiv intExpr(   16777216) <>         125 or
       intExpr(2109876543) mdiv intExpr(   33554432) <>          62 or
       intExpr(2109876543) mdiv intExpr(   67108864) <>          31 or
       intExpr(2109876543) mdiv intExpr(  134217728) <>          15 or
       intExpr(2109876543) mdiv intExpr(  268435456) <>           7 or
       intExpr(2109876543) mdiv intExpr(  536870912) <>           3 or
       intExpr(2109876543) mdiv intExpr( 1073741824) <>           1 then
      writeln(" ***** mdiv with powers of two does not work correct.");
      okay := FALSE;
    end if;

    if INT64_MIN mdiv INT64_MIN <>           1 or
       INT64_MIN mdiv INT32_MIN <>  4294967296 or
       INT64_MIN mdiv INT32_MAX <> -4294967299 or
       INT64_MIN mdiv INT64_MAX <>          -2 or
       INT64_MAX mdiv INT64_MIN <>          -1 or
       INT64_MAX mdiv INT32_MIN <> -4294967296 or
       INT64_MAX mdiv INT32_MAX <>  4294967298 or
       INT64_MAX mdiv INT64_MAX <>           1 or
       intExpr(INT64_MIN) mdiv INT64_MIN <>           1 or
       intExpr(INT64_MIN) mdiv INT32_MIN <>  4294967296 or
       intExpr(INT64_MIN) mdiv INT32_MAX <> -4294967299 or
       intExpr(INT64_MIN) mdiv INT64_MAX <>          -2 or
       intExpr(INT64_MAX) mdiv INT64_MIN <>          -1 or
       intExpr(INT64_MAX) mdiv INT32_MIN <> -4294967296 or
       intExpr(INT64_MAX) mdiv INT32_MAX <>  4294967298 or
       intExpr(INT64_MAX) mdiv INT64_MAX <>           1 or
       INT64_MIN mdiv intExpr(INT64_MIN) <>           1 or
       INT64_MIN mdiv intExpr(INT32_MIN) <>  4294967296 or
       INT64_MIN mdiv intExpr(INT32_MAX) <> -4294967299 or
       INT64_MIN mdiv intExpr(INT64_MAX) <>          -2 or
       INT64_MAX mdiv intExpr(INT64_MIN) <>          -1 or
       INT64_MAX mdiv intExpr(INT32_MIN) <> -4294967296 or
       INT64_MAX mdiv intExpr(INT32_MAX) <>  4294967298 or
       INT64_MAX mdiv intExpr(INT64_MAX) <>           1 or
       intExpr(INT64_MIN) mdiv intExpr(INT64_MIN) <>           1 or
       intExpr(INT64_MIN) mdiv intExpr(INT32_MIN) <>  4294967296 or
       intExpr(INT64_MIN) mdiv intExpr(INT32_MAX) <> -4294967299 or
       intExpr(INT64_MIN) mdiv intExpr(INT64_MAX) <>          -2 or
       intExpr(INT64_MAX) mdiv intExpr(INT64_MIN) <>          -1 or
       intExpr(INT64_MAX) mdiv intExpr(INT32_MIN) <> -4294967296 or
       intExpr(INT64_MAX) mdiv intExpr(INT32_MAX) <>  4294967298 or
       intExpr(INT64_MAX) mdiv intExpr(INT64_MAX) <>           1 then
      writeln(" ***** mdiv with maximum values does not work correct.");
      okay := FALSE;
    end if;

    if okay then
      writeln("Mdiv works correct for selected values.");
    else
      writeln(" ***** mdiv does not work correct.");
    end if;
  end func;


const proc: check_mod is func
  local
    var boolean: okay is TRUE;
  begin
    okay := TRUE;
    if   10 mod  5 <>  0 or
          9 mod  5 <>  4 or
          8 mod  5 <>  3 or
          7 mod  5 <>  2 or
          6 mod  5 <>  1 or
          5 mod  5 <>  0 or
          4 mod  5 <>  4 or
          3 mod  5 <>  3 or
          2 mod  5 <>  2 or
          1 mod  5 <>  1 or
          0 mod  5 <>  0 or
         -1 mod  5 <>  4 or
         -2 mod  5 <>  3 or
         -3 mod  5 <>  2 or
         -4 mod  5 <>  1 or
         -5 mod  5 <>  0 or
         -6 mod  5 <>  4 or
         -7 mod  5 <>  3 or
         -8 mod  5 <>  2 or
         -9 mod  5 <>  1 or
        -10 mod  5 <>  0 or
         10 mod  4 <>  2 or
          9 mod  4 <>  1 or
          8 mod  4 <>  0 or
          7 mod  4 <>  3 or
          6 mod  4 <>  2 or
          5 mod  4 <>  1 or
          4 mod  4 <>  0 or
          3 mod  4 <>  3 or
          2 mod  4 <>  2 or
          1 mod  4 <>  1 or
          0 mod  4 <>  0 or
         -1 mod  4 <>  3 or
         -2 mod  4 <>  2 or
         -3 mod  4 <>  1 or
         -4 mod  4 <>  0 or
         -5 mod  4 <>  3 or
         -6 mod  4 <>  2 or
         -7 mod  4 <>  1 or
         -8 mod  4 <>  0 or
         -9 mod  4 <>  3 or
        -10 mod  4 <>  2 or
         10 mod  3 <>  1 or
          9 mod  3 <>  0 or
          8 mod  3 <>  2 or
          7 mod  3 <>  1 or
          6 mod  3 <>  0 or
          5 mod  3 <>  2 or
          4 mod  3 <>  1 or
          3 mod  3 <>  0 or
          2 mod  3 <>  2 or
          1 mod  3 <>  1 or
          0 mod  3 <>  0 or
         -1 mod  3 <>  2 or
         -2 mod  3 <>  1 or
         -3 mod  3 <>  0 or
         -4 mod  3 <>  2 or
         -5 mod  3 <>  1 or
         -6 mod  3 <>  0 or
         -7 mod  3 <>  2 or
         -8 mod  3 <>  1 or
         -9 mod  3 <>  0 or
        -10 mod  3 <>  2 or
         10 mod  2 <>  0 or
          9 mod  2 <>  1 or
          8 mod  2 <>  0 or
          7 mod  2 <>  1 or
          6 mod  2 <>  0 or
          5 mod  2 <>  1 or
          4 mod  2 <>  0 or
          3 mod  2 <>  1 or
          2 mod  2 <>  0 or
          1 mod  2 <>  1 or
          0 mod  2 <>  0 or
         -1 mod  2 <>  1 or
         -2 mod  2 <>  0 or
         -3 mod  2 <>  1 or
         -4 mod  2 <>  0 or
         -5 mod  2 <>  1 or
         -6 mod  2 <>  0 or
         -7 mod  2 <>  1 or
         -8 mod  2 <>  0 or
         -9 mod  2 <>  1 or
        -10 mod  2 <>  0 or
         10 mod  1 <>  0 or
          9 mod  1 <>  0 or
          8 mod  1 <>  0 or
          7 mod  1 <>  0 or
          6 mod  1 <>  0 or
          5 mod  1 <>  0 or
          4 mod  1 <>  0 or
          3 mod  1 <>  0 or
          2 mod  1 <>  0 or
          1 mod  1 <>  0 or
          0 mod  1 <>  0 or
         -1 mod  1 <>  0 or
         -2 mod  1 <>  0 or
         -3 mod  1 <>  0 or
         -4 mod  1 <>  0 or
         -5 mod  1 <>  0 or
         -6 mod  1 <>  0 or
         -7 mod  1 <>  0 or
         -8 mod  1 <>  0 or
         -9 mod  1 <>  0 or
        -10 mod  1 <>  0 or
         10 mod -1 <>  0 or
          9 mod -1 <>  0 or
          8 mod -1 <>  0 or
          7 mod -1 <>  0 or
          6 mod -1 <>  0 or
          5 mod -1 <>  0 or
          4 mod -1 <>  0 or
          3 mod -1 <>  0 or
          2 mod -1 <>  0 or
          1 mod -1 <>  0 or
          0 mod -1 <>  0 or
         -1 mod -1 <>  0 or
         -2 mod -1 <>  0 or
         -3 mod -1 <>  0 or
         -4 mod -1 <>  0 or
         -5 mod -1 <>  0 or
         -6 mod -1 <>  0 or
         -7 mod -1 <>  0 or
         -8 mod -1 <>  0 or
         -9 mod -1 <>  0 or
        -10 mod -1 <>  0 or
         10 mod -2 <>  0 or
          9 mod -2 <> -1 or
          8 mod -2 <>  0 or
          7 mod -2 <> -1 or
          6 mod -2 <>  0 or
          5 mod -2 <> -1 or
          4 mod -2 <>  0 or
          3 mod -2 <> -1 or
          2 mod -2 <>  0 or
          1 mod -2 <> -1 or
          0 mod -2 <>  0 or
         -1 mod -2 <> -1 or
         -2 mod -2 <>  0 or
         -3 mod -2 <> -1 or
         -4 mod -2 <>  0 or
         -5 mod -2 <> -1 or
         -6 mod -2 <>  0 or
         -7 mod -2 <> -1 or
         -8 mod -2 <>  0 or
         -9 mod -2 <> -1 or
        -10 mod -2 <>  0 or
         10 mod -3 <> -2 or
          9 mod -3 <>  0 or
          8 mod -3 <> -1 or
          7 mod -3 <> -2 or
          6 mod -3 <>  0 or
          5 mod -3 <> -1 or
          4 mod -3 <> -2 or
          3 mod -3 <>  0 or
          2 mod -3 <> -1 or
          1 mod -3 <> -2 or
          0 mod -3 <>  0 or
         -1 mod -3 <> -1 or
         -2 mod -3 <> -2 or
         -3 mod -3 <>  0 or
         -4 mod -3 <> -1 or
         -5 mod -3 <> -2 or
         -6 mod -3 <>  0 or
         -7 mod -3 <> -1 or
         -8 mod -3 <> -2 or
         -9 mod -3 <>  0 or
        -10 mod -3 <> -1 or
         10 mod -4 <> -2 or
          9 mod -4 <> -3 or
          8 mod -4 <>  0 or
          7 mod -4 <> -1 or
          6 mod -4 <> -2 or
          5 mod -4 <> -3 or
          4 mod -4 <>  0 or
          3 mod -4 <> -1 or
          2 mod -4 <> -2 or
          1 mod -4 <> -3 or
          0 mod -4 <>  0 or
         -1 mod -4 <> -1 or
         -2 mod -4 <> -2 or
         -3 mod -4 <> -3 or
         -4 mod -4 <>  0 or
         -5 mod -4 <> -1 or
         -6 mod -4 <> -2 or
         -7 mod -4 <> -3 or
         -8 mod -4 <>  0 or
         -9 mod -4 <> -1 or
        -10 mod -4 <> -2 or
         10 mod -5 <> -0 or
          9 mod -5 <> -1 or
          8 mod -5 <> -2 or
          7 mod -5 <> -3 or
          6 mod -5 <> -4 or
          5 mod -5 <>  0 or
          4 mod -5 <> -1 or
          3 mod -5 <> -2 or
          2 mod -5 <> -3 or
          1 mod -5 <> -4 or
          0 mod -5 <>  0 or
         -1 mod -5 <> -1 or
         -2 mod -5 <> -2 or
         -3 mod -5 <> -3 or
         -4 mod -5 <> -4 or
         -5 mod -5 <>  0 or
         -6 mod -5 <> -1 or
         -7 mod -5 <> -2 or
         -8 mod -5 <> -3 or
         -9 mod -5 <> -4 or
        -10 mod -5 <>  0 then
      writeln(" ***** mod with two constants does not work correct.");
      okay := FALSE;
    end if;

    if  intExpr( 10) mod  5 <>  0 or
        intExpr(  9) mod  5 <>  4 or
        intExpr(  8) mod  5 <>  3 or
        intExpr(  7) mod  5 <>  2 or
        intExpr(  6) mod  5 <>  1 or
        intExpr(  5) mod  5 <>  0 or
        intExpr(  4) mod  5 <>  4 or
        intExpr(  3) mod  5 <>  3 or
        intExpr(  2) mod  5 <>  2 or
        intExpr(  1) mod  5 <>  1 or
        intExpr(  0) mod  5 <>  0 or
        intExpr( -1) mod  5 <>  4 or
        intExpr( -2) mod  5 <>  3 or
        intExpr( -3) mod  5 <>  2 or
        intExpr( -4) mod  5 <>  1 or
        intExpr( -5) mod  5 <>  0 or
        intExpr( -6) mod  5 <>  4 or
        intExpr( -7) mod  5 <>  3 or
        intExpr( -8) mod  5 <>  2 or
        intExpr( -9) mod  5 <>  1 or
        intExpr(-10) mod  5 <>  0 or
        intExpr( 10) mod  4 <>  2 or
        intExpr(  9) mod  4 <>  1 or
        intExpr(  8) mod  4 <>  0 or
        intExpr(  7) mod  4 <>  3 or
        intExpr(  6) mod  4 <>  2 or
        intExpr(  5) mod  4 <>  1 or
        intExpr(  4) mod  4 <>  0 or
        intExpr(  3) mod  4 <>  3 or
        intExpr(  2) mod  4 <>  2 or
        intExpr(  1) mod  4 <>  1 or
        intExpr(  0) mod  4 <>  0 or
        intExpr( -1) mod  4 <>  3 or
        intExpr( -2) mod  4 <>  2 or
        intExpr( -3) mod  4 <>  1 or
        intExpr( -4) mod  4 <>  0 or
        intExpr( -5) mod  4 <>  3 or
        intExpr( -6) mod  4 <>  2 or
        intExpr( -7) mod  4 <>  1 or
        intExpr( -8) mod  4 <>  0 or
        intExpr( -9) mod  4 <>  3 or
        intExpr(-10) mod  4 <>  2 or
        intExpr( 10) mod  3 <>  1 or
        intExpr(  9) mod  3 <>  0 or
        intExpr(  8) mod  3 <>  2 or
        intExpr(  7) mod  3 <>  1 or
        intExpr(  6) mod  3 <>  0 or
        intExpr(  5) mod  3 <>  2 or
        intExpr(  4) mod  3 <>  1 or
        intExpr(  3) mod  3 <>  0 or
        intExpr(  2) mod  3 <>  2 or
        intExpr(  1) mod  3 <>  1 or
        intExpr(  0) mod  3 <>  0 or
        intExpr( -1) mod  3 <>  2 or
        intExpr( -2) mod  3 <>  1 or
        intExpr( -3) mod  3 <>  0 or
        intExpr( -4) mod  3 <>  2 or
        intExpr( -5) mod  3 <>  1 or
        intExpr( -6) mod  3 <>  0 or
        intExpr( -7) mod  3 <>  2 or
        intExpr( -8) mod  3 <>  1 or
        intExpr( -9) mod  3 <>  0 or
        intExpr(-10) mod  3 <>  2 or
        intExpr( 10) mod  2 <>  0 or
        intExpr(  9) mod  2 <>  1 or
        intExpr(  8) mod  2 <>  0 or
        intExpr(  7) mod  2 <>  1 or
        intExpr(  6) mod  2 <>  0 or
        intExpr(  5) mod  2 <>  1 or
        intExpr(  4) mod  2 <>  0 or
        intExpr(  3) mod  2 <>  1 or
        intExpr(  2) mod  2 <>  0 or
        intExpr(  1) mod  2 <>  1 or
        intExpr(  0) mod  2 <>  0 or
        intExpr( -1) mod  2 <>  1 or
        intExpr( -2) mod  2 <>  0 or
        intExpr( -3) mod  2 <>  1 or
        intExpr( -4) mod  2 <>  0 or
        intExpr( -5) mod  2 <>  1 or
        intExpr( -6) mod  2 <>  0 or
        intExpr( -7) mod  2 <>  1 or
        intExpr( -8) mod  2 <>  0 or
        intExpr( -9) mod  2 <>  1 or
        intExpr(-10) mod  2 <>  0 or
        intExpr( 10) mod  1 <>  0 or
        intExpr(  9) mod  1 <>  0 or
        intExpr(  8) mod  1 <>  0 or
        intExpr(  7) mod  1 <>  0 or
        intExpr(  6) mod  1 <>  0 or
        intExpr(  5) mod  1 <>  0 or
        intExpr(  4) mod  1 <>  0 or
        intExpr(  3) mod  1 <>  0 or
        intExpr(  2) mod  1 <>  0 or
        intExpr(  1) mod  1 <>  0 or
        intExpr(  0) mod  1 <>  0 or
        intExpr( -1) mod  1 <>  0 or
        intExpr( -2) mod  1 <>  0 or
        intExpr( -3) mod  1 <>  0 or
        intExpr( -4) mod  1 <>  0 or
        intExpr( -5) mod  1 <>  0 or
        intExpr( -6) mod  1 <>  0 or
        intExpr( -7) mod  1 <>  0 or
        intExpr( -8) mod  1 <>  0 or
        intExpr( -9) mod  1 <>  0 or
        intExpr(-10) mod  1 <>  0 or
        intExpr( 10) mod -1 <>  0 or
        intExpr(  9) mod -1 <>  0 or
        intExpr(  8) mod -1 <>  0 or
        intExpr(  7) mod -1 <>  0 or
        intExpr(  6) mod -1 <>  0 or
        intExpr(  5) mod -1 <>  0 or
        intExpr(  4) mod -1 <>  0 or
        intExpr(  3) mod -1 <>  0 or
        intExpr(  2) mod -1 <>  0 or
        intExpr(  1) mod -1 <>  0 or
        intExpr(  0) mod -1 <>  0 or
        intExpr( -1) mod -1 <>  0 or
        intExpr( -2) mod -1 <>  0 or
        intExpr( -3) mod -1 <>  0 or
        intExpr( -4) mod -1 <>  0 or
        intExpr( -5) mod -1 <>  0 or
        intExpr( -6) mod -1 <>  0 or
        intExpr( -7) mod -1 <>  0 or
        intExpr( -8) mod -1 <>  0 or
        intExpr( -9) mod -1 <>  0 or
        intExpr(-10) mod -1 <>  0 or
        intExpr( 10) mod -2 <>  0 or
        intExpr(  9) mod -2 <> -1 or
        intExpr(  8) mod -2 <>  0 or
        intExpr(  7) mod -2 <> -1 or
        intExpr(  6) mod -2 <>  0 or
        intExpr(  5) mod -2 <> -1 or
        intExpr(  4) mod -2 <>  0 or
        intExpr(  3) mod -2 <> -1 or
        intExpr(  2) mod -2 <>  0 or
        intExpr(  1) mod -2 <> -1 or
        intExpr(  0) mod -2 <>  0 or
        intExpr( -1) mod -2 <> -1 or
        intExpr( -2) mod -2 <>  0 or
        intExpr( -3) mod -2 <> -1 or
        intExpr( -4) mod -2 <>  0 or
        intExpr( -5) mod -2 <> -1 or
        intExpr( -6) mod -2 <>  0 or
        intExpr( -7) mod -2 <> -1 or
        intExpr( -8) mod -2 <>  0 or
        intExpr( -9) mod -2 <> -1 or
        intExpr(-10) mod -2 <>  0 or
        intExpr( 10) mod -3 <> -2 or
        intExpr(  9) mod -3 <>  0 or
        intExpr(  8) mod -3 <> -1 or
        intExpr(  7) mod -3 <> -2 or
        intExpr(  6) mod -3 <>  0 or
        intExpr(  5) mod -3 <> -1 or
        intExpr(  4) mod -3 <> -2 or
        intExpr(  3) mod -3 <>  0 or
        intExpr(  2) mod -3 <> -1 or
        intExpr(  1) mod -3 <> -2 or
        intExpr(  0) mod -3 <>  0 or
        intExpr( -1) mod -3 <> -1 or
        intExpr( -2) mod -3 <> -2 or
        intExpr( -3) mod -3 <>  0 or
        intExpr( -4) mod -3 <> -1 or
        intExpr( -5) mod -3 <> -2 or
        intExpr( -6) mod -3 <>  0 or
        intExpr( -7) mod -3 <> -1 or
        intExpr( -8) mod -3 <> -2 or
        intExpr( -9) mod -3 <>  0 or
        intExpr(-10) mod -3 <> -1 or
        intExpr( 10) mod -4 <> -2 or
        intExpr(  9) mod -4 <> -3 or
        intExpr(  8) mod -4 <>  0 or
        intExpr(  7) mod -4 <> -1 or
        intExpr(  6) mod -4 <> -2 or
        intExpr(  5) mod -4 <> -3 or
        intExpr(  4) mod -4 <>  0 or
        intExpr(  3) mod -4 <> -1 or
        intExpr(  2) mod -4 <> -2 or
        intExpr(  1) mod -4 <> -3 or
        intExpr(  0) mod -4 <>  0 or
        intExpr( -1) mod -4 <> -1 or
        intExpr( -2) mod -4 <> -2 or
        intExpr( -3) mod -4 <> -3 or
        intExpr( -4) mod -4 <>  0 or
        intExpr( -5) mod -4 <> -1 or
        intExpr( -6) mod -4 <> -2 or
        intExpr( -7) mod -4 <> -3 or
        intExpr( -8) mod -4 <>  0 or
        intExpr( -9) mod -4 <> -1 or
        intExpr(-10) mod -4 <> -2 or
        intExpr( 10) mod -5 <> -0 or
        intExpr(  9) mod -5 <> -1 or
        intExpr(  8) mod -5 <> -2 or
        intExpr(  7) mod -5 <> -3 or
        intExpr(  6) mod -5 <> -4 or
        intExpr(  5) mod -5 <>  0 or
        intExpr(  4) mod -5 <> -1 or
        intExpr(  3) mod -5 <> -2 or
        intExpr(  2) mod -5 <> -3 or
        intExpr(  1) mod -5 <> -4 or
        intExpr(  0) mod -5 <>  0 or
        intExpr( -1) mod -5 <> -1 or
        intExpr( -2) mod -5 <> -2 or
        intExpr( -3) mod -5 <> -3 or
        intExpr( -4) mod -5 <> -4 or
        intExpr( -5) mod -5 <>  0 or
        intExpr( -6) mod -5 <> -1 or
        intExpr( -7) mod -5 <> -2 or
        intExpr( -8) mod -5 <> -3 or
        intExpr( -9) mod -5 <> -4 or
        intExpr(-10) mod -5 <>  0 then
      writeln(" ***** mod with an expression and a constant does not work correct.");
      okay := FALSE;
    end if;

    if   10 mod intExpr( 5) <>  0 or
          9 mod intExpr( 5) <>  4 or
          8 mod intExpr( 5) <>  3 or
          7 mod intExpr( 5) <>  2 or
          6 mod intExpr( 5) <>  1 or
          5 mod intExpr( 5) <>  0 or
          4 mod intExpr( 5) <>  4 or
          3 mod intExpr( 5) <>  3 or
          2 mod intExpr( 5) <>  2 or
          1 mod intExpr( 5) <>  1 or
          0 mod intExpr( 5) <>  0 or
         -1 mod intExpr( 5) <>  4 or
         -2 mod intExpr( 5) <>  3 or
         -3 mod intExpr( 5) <>  2 or
         -4 mod intExpr( 5) <>  1 or
         -5 mod intExpr( 5) <>  0 or
         -6 mod intExpr( 5) <>  4 or
         -7 mod intExpr( 5) <>  3 or
         -8 mod intExpr( 5) <>  2 or
         -9 mod intExpr( 5) <>  1 or
        -10 mod intExpr( 5) <>  0 or
         10 mod intExpr( 4) <>  2 or
          9 mod intExpr( 4) <>  1 or
          8 mod intExpr( 4) <>  0 or
          7 mod intExpr( 4) <>  3 or
          6 mod intExpr( 4) <>  2 or
          5 mod intExpr( 4) <>  1 or
          4 mod intExpr( 4) <>  0 or
          3 mod intExpr( 4) <>  3 or
          2 mod intExpr( 4) <>  2 or
          1 mod intExpr( 4) <>  1 or
          0 mod intExpr( 4) <>  0 or
         -1 mod intExpr( 4) <>  3 or
         -2 mod intExpr( 4) <>  2 or
         -3 mod intExpr( 4) <>  1 or
         -4 mod intExpr( 4) <>  0 or
         -5 mod intExpr( 4) <>  3 or
         -6 mod intExpr( 4) <>  2 or
         -7 mod intExpr( 4) <>  1 or
         -8 mod intExpr( 4) <>  0 or
         -9 mod intExpr( 4) <>  3 or
        -10 mod intExpr( 4) <>  2 or
         10 mod intExpr( 3) <>  1 or
          9 mod intExpr( 3) <>  0 or
          8 mod intExpr( 3) <>  2 or
          7 mod intExpr( 3) <>  1 or
          6 mod intExpr( 3) <>  0 or
          5 mod intExpr( 3) <>  2 or
          4 mod intExpr( 3) <>  1 or
          3 mod intExpr( 3) <>  0 or
          2 mod intExpr( 3) <>  2 or
          1 mod intExpr( 3) <>  1 or
          0 mod intExpr( 3) <>  0 or
         -1 mod intExpr( 3) <>  2 or
         -2 mod intExpr( 3) <>  1 or
         -3 mod intExpr( 3) <>  0 or
         -4 mod intExpr( 3) <>  2 or
         -5 mod intExpr( 3) <>  1 or
         -6 mod intExpr( 3) <>  0 or
         -7 mod intExpr( 3) <>  2 or
         -8 mod intExpr( 3) <>  1 or
         -9 mod intExpr( 3) <>  0 or
        -10 mod intExpr( 3) <>  2 or
         10 mod intExpr( 2) <>  0 or
          9 mod intExpr( 2) <>  1 or
          8 mod intExpr( 2) <>  0 or
          7 mod intExpr( 2) <>  1 or
          6 mod intExpr( 2) <>  0 or
          5 mod intExpr( 2) <>  1 or
          4 mod intExpr( 2) <>  0 or
          3 mod intExpr( 2) <>  1 or
          2 mod intExpr( 2) <>  0 or
          1 mod intExpr( 2) <>  1 or
          0 mod intExpr( 2) <>  0 or
         -1 mod intExpr( 2) <>  1 or
         -2 mod intExpr( 2) <>  0 or
         -3 mod intExpr( 2) <>  1 or
         -4 mod intExpr( 2) <>  0 or
         -5 mod intExpr( 2) <>  1 or
         -6 mod intExpr( 2) <>  0 or
         -7 mod intExpr( 2) <>  1 or
         -8 mod intExpr( 2) <>  0 or
         -9 mod intExpr( 2) <>  1 or
        -10 mod intExpr( 2) <>  0 or
         10 mod intExpr( 1) <>  0 or
          9 mod intExpr( 1) <>  0 or
          8 mod intExpr( 1) <>  0 or
          7 mod intExpr( 1) <>  0 or
          6 mod intExpr( 1) <>  0 or
          5 mod intExpr( 1) <>  0 or
          4 mod intExpr( 1) <>  0 or
          3 mod intExpr( 1) <>  0 or
          2 mod intExpr( 1) <>  0 or
          1 mod intExpr( 1) <>  0 or
          0 mod intExpr( 1) <>  0 or
         -1 mod intExpr( 1) <>  0 or
         -2 mod intExpr( 1) <>  0 or
         -3 mod intExpr( 1) <>  0 or
         -4 mod intExpr( 1) <>  0 or
         -5 mod intExpr( 1) <>  0 or
         -6 mod intExpr( 1) <>  0 or
         -7 mod intExpr( 1) <>  0 or
         -8 mod intExpr( 1) <>  0 or
         -9 mod intExpr( 1) <>  0 or
        -10 mod intExpr( 1) <>  0 or
         10 mod intExpr(-1) <>  0 or
          9 mod intExpr(-1) <>  0 or
          8 mod intExpr(-1) <>  0 or
          7 mod intExpr(-1) <>  0 or
          6 mod intExpr(-1) <>  0 or
          5 mod intExpr(-1) <>  0 or
          4 mod intExpr(-1) <>  0 or
          3 mod intExpr(-1) <>  0 or
          2 mod intExpr(-1) <>  0 or
          1 mod intExpr(-1) <>  0 or
          0 mod intExpr(-1) <>  0 or
         -1 mod intExpr(-1) <>  0 or
         -2 mod intExpr(-1) <>  0 or
         -3 mod intExpr(-1) <>  0 or
         -4 mod intExpr(-1) <>  0 or
         -5 mod intExpr(-1) <>  0 or
         -6 mod intExpr(-1) <>  0 or
         -7 mod intExpr(-1) <>  0 or
         -8 mod intExpr(-1) <>  0 or
         -9 mod intExpr(-1) <>  0 or
        -10 mod intExpr(-1) <>  0 or
         10 mod intExpr(-2) <>  0 or
          9 mod intExpr(-2) <> -1 or
          8 mod intExpr(-2) <>  0 or
          7 mod intExpr(-2) <> -1 or
          6 mod intExpr(-2) <>  0 or
          5 mod intExpr(-2) <> -1 or
          4 mod intExpr(-2) <>  0 or
          3 mod intExpr(-2) <> -1 or
          2 mod intExpr(-2) <>  0 or
          1 mod intExpr(-2) <> -1 or
          0 mod intExpr(-2) <>  0 or
         -1 mod intExpr(-2) <> -1 or
         -2 mod intExpr(-2) <>  0 or
         -3 mod intExpr(-2) <> -1 or
         -4 mod intExpr(-2) <>  0 or
         -5 mod intExpr(-2) <> -1 or
         -6 mod intExpr(-2) <>  0 or
         -7 mod intExpr(-2) <> -1 or
         -8 mod intExpr(-2) <>  0 or
         -9 mod intExpr(-2) <> -1 or
        -10 mod intExpr(-2) <>  0 or
         10 mod intExpr(-3) <> -2 or
          9 mod intExpr(-3) <>  0 or
          8 mod intExpr(-3) <> -1 or
          7 mod intExpr(-3) <> -2 or
          6 mod intExpr(-3) <>  0 or
          5 mod intExpr(-3) <> -1 or
          4 mod intExpr(-3) <> -2 or
          3 mod intExpr(-3) <>  0 or
          2 mod intExpr(-3) <> -1 or
          1 mod intExpr(-3) <> -2 or
          0 mod intExpr(-3) <>  0 or
         -1 mod intExpr(-3) <> -1 or
         -2 mod intExpr(-3) <> -2 or
         -3 mod intExpr(-3) <>  0 or
         -4 mod intExpr(-3) <> -1 or
         -5 mod intExpr(-3) <> -2 or
         -6 mod intExpr(-3) <>  0 or
         -7 mod intExpr(-3) <> -1 or
         -8 mod intExpr(-3) <> -2 or
         -9 mod intExpr(-3) <>  0 or
        -10 mod intExpr(-3) <> -1 or
         10 mod intExpr(-4) <> -2 or
          9 mod intExpr(-4) <> -3 or
          8 mod intExpr(-4) <>  0 or
          7 mod intExpr(-4) <> -1 or
          6 mod intExpr(-4) <> -2 or
          5 mod intExpr(-4) <> -3 or
          4 mod intExpr(-4) <>  0 or
          3 mod intExpr(-4) <> -1 or
          2 mod intExpr(-4) <> -2 or
          1 mod intExpr(-4) <> -3 or
          0 mod intExpr(-4) <>  0 or
         -1 mod intExpr(-4) <> -1 or
         -2 mod intExpr(-4) <> -2 or
         -3 mod intExpr(-4) <> -3 or
         -4 mod intExpr(-4) <>  0 or
         -5 mod intExpr(-4) <> -1 or
         -6 mod intExpr(-4) <> -2 or
         -7 mod intExpr(-4) <> -3 or
         -8 mod intExpr(-4) <>  0 or
         -9 mod intExpr(-4) <> -1 or
        -10 mod intExpr(-4) <> -2 or
         10 mod intExpr(-5) <> -0 or
          9 mod intExpr(-5) <> -1 or
          8 mod intExpr(-5) <> -2 or
          7 mod intExpr(-5) <> -3 or
          6 mod intExpr(-5) <> -4 or
          5 mod intExpr(-5) <>  0 or
          4 mod intExpr(-5) <> -1 or
          3 mod intExpr(-5) <> -2 or
          2 mod intExpr(-5) <> -3 or
          1 mod intExpr(-5) <> -4 or
          0 mod intExpr(-5) <>  0 or
         -1 mod intExpr(-5) <> -1 or
         -2 mod intExpr(-5) <> -2 or
         -3 mod intExpr(-5) <> -3 or
         -4 mod intExpr(-5) <> -4 or
         -5 mod intExpr(-5) <>  0 or
         -6 mod intExpr(-5) <> -1 or
         -7 mod intExpr(-5) <> -2 or
         -8 mod intExpr(-5) <> -3 or
         -9 mod intExpr(-5) <> -4 or
        -10 mod intExpr(-5) <>  0 then
      writeln(" ***** mod with a constant and an expression does not work correct.");
      okay := FALSE;
    end if;

    if  intExpr( 10) mod intExpr( 5) <>  0 or
        intExpr(  9) mod intExpr( 5) <>  4 or
        intExpr(  8) mod intExpr( 5) <>  3 or
        intExpr(  7) mod intExpr( 5) <>  2 or
        intExpr(  6) mod intExpr( 5) <>  1 or
        intExpr(  5) mod intExpr( 5) <>  0 or
        intExpr(  4) mod intExpr( 5) <>  4 or
        intExpr(  3) mod intExpr( 5) <>  3 or
        intExpr(  2) mod intExpr( 5) <>  2 or
        intExpr(  1) mod intExpr( 5) <>  1 or
        intExpr(  0) mod intExpr( 5) <>  0 or
        intExpr( -1) mod intExpr( 5) <>  4 or
        intExpr( -2) mod intExpr( 5) <>  3 or
        intExpr( -3) mod intExpr( 5) <>  2 or
        intExpr( -4) mod intExpr( 5) <>  1 or
        intExpr( -5) mod intExpr( 5) <>  0 or
        intExpr( -6) mod intExpr( 5) <>  4 or
        intExpr( -7) mod intExpr( 5) <>  3 or
        intExpr( -8) mod intExpr( 5) <>  2 or
        intExpr( -9) mod intExpr( 5) <>  1 or
        intExpr(-10) mod intExpr( 5) <>  0 or
        intExpr( 10) mod intExpr( 4) <>  2 or
        intExpr(  9) mod intExpr( 4) <>  1 or
        intExpr(  8) mod intExpr( 4) <>  0 or
        intExpr(  7) mod intExpr( 4) <>  3 or
        intExpr(  6) mod intExpr( 4) <>  2 or
        intExpr(  5) mod intExpr( 4) <>  1 or
        intExpr(  4) mod intExpr( 4) <>  0 or
        intExpr(  3) mod intExpr( 4) <>  3 or
        intExpr(  2) mod intExpr( 4) <>  2 or
        intExpr(  1) mod intExpr( 4) <>  1 or
        intExpr(  0) mod intExpr( 4) <>  0 or
        intExpr( -1) mod intExpr( 4) <>  3 or
        intExpr( -2) mod intExpr( 4) <>  2 or
        intExpr( -3) mod intExpr( 4) <>  1 or
        intExpr( -4) mod intExpr( 4) <>  0 or
        intExpr( -5) mod intExpr( 4) <>  3 or
        intExpr( -6) mod intExpr( 4) <>  2 or
        intExpr( -7) mod intExpr( 4) <>  1 or
        intExpr( -8) mod intExpr( 4) <>  0 or
        intExpr( -9) mod intExpr( 4) <>  3 or
        intExpr(-10) mod intExpr( 4) <>  2 or
        intExpr( 10) mod intExpr( 3) <>  1 or
        intExpr(  9) mod intExpr( 3) <>  0 or
        intExpr(  8) mod intExpr( 3) <>  2 or
        intExpr(  7) mod intExpr( 3) <>  1 or
        intExpr(  6) mod intExpr( 3) <>  0 or
        intExpr(  5) mod intExpr( 3) <>  2 or
        intExpr(  4) mod intExpr( 3) <>  1 or
        intExpr(  3) mod intExpr( 3) <>  0 or
        intExpr(  2) mod intExpr( 3) <>  2 or
        intExpr(  1) mod intExpr( 3) <>  1 or
        intExpr(  0) mod intExpr( 3) <>  0 or
        intExpr( -1) mod intExpr( 3) <>  2 or
        intExpr( -2) mod intExpr( 3) <>  1 or
        intExpr( -3) mod intExpr( 3) <>  0 or
        intExpr( -4) mod intExpr( 3) <>  2 or
        intExpr( -5) mod intExpr( 3) <>  1 or
        intExpr( -6) mod intExpr( 3) <>  0 or
        intExpr( -7) mod intExpr( 3) <>  2 or
        intExpr( -8) mod intExpr( 3) <>  1 or
        intExpr( -9) mod intExpr( 3) <>  0 or
        intExpr(-10) mod intExpr( 3) <>  2 or
        intExpr( 10) mod intExpr( 2) <>  0 or
        intExpr(  9) mod intExpr( 2) <>  1 or
        intExpr(  8) mod intExpr( 2) <>  0 or
        intExpr(  7) mod intExpr( 2) <>  1 or
        intExpr(  6) mod intExpr( 2) <>  0 or
        intExpr(  5) mod intExpr( 2) <>  1 or
        intExpr(  4) mod intExpr( 2) <>  0 or
        intExpr(  3) mod intExpr( 2) <>  1 or
        intExpr(  2) mod intExpr( 2) <>  0 or
        intExpr(  1) mod intExpr( 2) <>  1 or
        intExpr(  0) mod intExpr( 2) <>  0 or
        intExpr( -1) mod intExpr( 2) <>  1 or
        intExpr( -2) mod intExpr( 2) <>  0 or
        intExpr( -3) mod intExpr( 2) <>  1 or
        intExpr( -4) mod intExpr( 2) <>  0 or
        intExpr( -5) mod intExpr( 2) <>  1 or
        intExpr( -6) mod intExpr( 2) <>  0 or
        intExpr( -7) mod intExpr( 2) <>  1 or
        intExpr( -8) mod intExpr( 2) <>  0 or
        intExpr( -9) mod intExpr( 2) <>  1 or
        intExpr(-10) mod intExpr( 2) <>  0 or
        intExpr( 10) mod intExpr( 1) <>  0 or
        intExpr(  9) mod intExpr( 1) <>  0 or
        intExpr(  8) mod intExpr( 1) <>  0 or
        intExpr(  7) mod intExpr( 1) <>  0 or
        intExpr(  6) mod intExpr( 1) <>  0 or
        intExpr(  5) mod intExpr( 1) <>  0 or
        intExpr(  4) mod intExpr( 1) <>  0 or
        intExpr(  3) mod intExpr( 1) <>  0 or
        intExpr(  2) mod intExpr( 1) <>  0 or
        intExpr(  1) mod intExpr( 1) <>  0 or
        intExpr(  0) mod intExpr( 1) <>  0 or
        intExpr( -1) mod intExpr( 1) <>  0 or
        intExpr( -2) mod intExpr( 1) <>  0 or
        intExpr( -3) mod intExpr( 1) <>  0 or
        intExpr( -4) mod intExpr( 1) <>  0 or
        intExpr( -5) mod intExpr( 1) <>  0 or
        intExpr( -6) mod intExpr( 1) <>  0 or
        intExpr( -7) mod intExpr( 1) <>  0 or
        intExpr( -8) mod intExpr( 1) <>  0 or
        intExpr( -9) mod intExpr( 1) <>  0 or
        intExpr(-10) mod intExpr( 1) <>  0 or
        intExpr( 10) mod intExpr(-1) <>  0 or
        intExpr(  9) mod intExpr(-1) <>  0 or
        intExpr(  8) mod intExpr(-1) <>  0 or
        intExpr(  7) mod intExpr(-1) <>  0 or
        intExpr(  6) mod intExpr(-1) <>  0 or
        intExpr(  5) mod intExpr(-1) <>  0 or
        intExpr(  4) mod intExpr(-1) <>  0 or
        intExpr(  3) mod intExpr(-1) <>  0 or
        intExpr(  2) mod intExpr(-1) <>  0 or
        intExpr(  1) mod intExpr(-1) <>  0 or
        intExpr(  0) mod intExpr(-1) <>  0 or
        intExpr( -1) mod intExpr(-1) <>  0 or
        intExpr( -2) mod intExpr(-1) <>  0 or
        intExpr( -3) mod intExpr(-1) <>  0 or
        intExpr( -4) mod intExpr(-1) <>  0 or
        intExpr( -5) mod intExpr(-1) <>  0 or
        intExpr( -6) mod intExpr(-1) <>  0 or
        intExpr( -7) mod intExpr(-1) <>  0 or
        intExpr( -8) mod intExpr(-1) <>  0 or
        intExpr( -9) mod intExpr(-1) <>  0 or
        intExpr(-10) mod intExpr(-1) <>  0 or
        intExpr( 10) mod intExpr(-2) <>  0 or
        intExpr(  9) mod intExpr(-2) <> -1 or
        intExpr(  8) mod intExpr(-2) <>  0 or
        intExpr(  7) mod intExpr(-2) <> -1 or
        intExpr(  6) mod intExpr(-2) <>  0 or
        intExpr(  5) mod intExpr(-2) <> -1 or
        intExpr(  4) mod intExpr(-2) <>  0 or
        intExpr(  3) mod intExpr(-2) <> -1 or
        intExpr(  2) mod intExpr(-2) <>  0 or
        intExpr(  1) mod intExpr(-2) <> -1 or
        intExpr(  0) mod intExpr(-2) <>  0 or
        intExpr( -1) mod intExpr(-2) <> -1 or
        intExpr( -2) mod intExpr(-2) <>  0 or
        intExpr( -3) mod intExpr(-2) <> -1 or
        intExpr( -4) mod intExpr(-2) <>  0 or
        intExpr( -5) mod intExpr(-2) <> -1 or
        intExpr( -6) mod intExpr(-2) <>  0 or
        intExpr( -7) mod intExpr(-2) <> -1 or
        intExpr( -8) mod intExpr(-2) <>  0 or
        intExpr( -9) mod intExpr(-2) <> -1 or
        intExpr(-10) mod intExpr(-2) <>  0 or
        intExpr( 10) mod intExpr(-3) <> -2 or
        intExpr(  9) mod intExpr(-3) <>  0 or
        intExpr(  8) mod intExpr(-3) <> -1 or
        intExpr(  7) mod intExpr(-3) <> -2 or
        intExpr(  6) mod intExpr(-3) <>  0 or
        intExpr(  5) mod intExpr(-3) <> -1 or
        intExpr(  4) mod intExpr(-3) <> -2 or
        intExpr(  3) mod intExpr(-3) <>  0 or
        intExpr(  2) mod intExpr(-3) <> -1 or
        intExpr(  1) mod intExpr(-3) <> -2 or
        intExpr(  0) mod intExpr(-3) <>  0 or
        intExpr( -1) mod intExpr(-3) <> -1 or
        intExpr( -2) mod intExpr(-3) <> -2 or
        intExpr( -3) mod intExpr(-3) <>  0 or
        intExpr( -4) mod intExpr(-3) <> -1 or
        intExpr( -5) mod intExpr(-3) <> -2 or
        intExpr( -6) mod intExpr(-3) <>  0 or
        intExpr( -7) mod intExpr(-3) <> -1 or
        intExpr( -8) mod intExpr(-3) <> -2 or
        intExpr( -9) mod intExpr(-3) <>  0 or
        intExpr(-10) mod intExpr(-3) <> -1 or
        intExpr( 10) mod intExpr(-4) <> -2 or
        intExpr(  9) mod intExpr(-4) <> -3 or
        intExpr(  8) mod intExpr(-4) <>  0 or
        intExpr(  7) mod intExpr(-4) <> -1 or
        intExpr(  6) mod intExpr(-4) <> -2 or
        intExpr(  5) mod intExpr(-4) <> -3 or
        intExpr(  4) mod intExpr(-4) <>  0 or
        intExpr(  3) mod intExpr(-4) <> -1 or
        intExpr(  2) mod intExpr(-4) <> -2 or
        intExpr(  1) mod intExpr(-4) <> -3 or
        intExpr(  0) mod intExpr(-4) <>  0 or
        intExpr( -1) mod intExpr(-4) <> -1 or
        intExpr( -2) mod intExpr(-4) <> -2 or
        intExpr( -3) mod intExpr(-4) <> -3 or
        intExpr( -4) mod intExpr(-4) <>  0 or
        intExpr( -5) mod intExpr(-4) <> -1 or
        intExpr( -6) mod intExpr(-4) <> -2 or
        intExpr( -7) mod intExpr(-4) <> -3 or
        intExpr( -8) mod intExpr(-4) <>  0 or
        intExpr( -9) mod intExpr(-4) <> -1 or
        intExpr(-10) mod intExpr(-4) <> -2 or
        intExpr( 10) mod intExpr(-5) <> -0 or
        intExpr(  9) mod intExpr(-5) <> -1 or
        intExpr(  8) mod intExpr(-5) <> -2 or
        intExpr(  7) mod intExpr(-5) <> -3 or
        intExpr(  6) mod intExpr(-5) <> -4 or
        intExpr(  5) mod intExpr(-5) <>  0 or
        intExpr(  4) mod intExpr(-5) <> -1 or
        intExpr(  3) mod intExpr(-5) <> -2 or
        intExpr(  2) mod intExpr(-5) <> -3 or
        intExpr(  1) mod intExpr(-5) <> -4 or
        intExpr(  0) mod intExpr(-5) <>  0 or
        intExpr( -1) mod intExpr(-5) <> -1 or
        intExpr( -2) mod intExpr(-5) <> -2 or
        intExpr( -3) mod intExpr(-5) <> -3 or
        intExpr( -4) mod intExpr(-5) <> -4 or
        intExpr( -5) mod intExpr(-5) <>  0 or
        intExpr( -6) mod intExpr(-5) <> -1 or
        intExpr( -7) mod intExpr(-5) <> -2 or
        intExpr( -8) mod intExpr(-5) <> -3 or
        intExpr( -9) mod intExpr(-5) <> -4 or
        intExpr(-10) mod intExpr(-5) <>  0 then
      writeln(" ***** mod with two expressions does not work correct.");
      okay := FALSE;
    end if;

    if         2109876543  mod           INT32_MIN  <>   -37607105 or
               2109876543  mod         -1073741824  <>   -37607105 or
               2109876543  mod          -536870912  <>   -37607105 or
               2109876543  mod          -268435456  <>   -37607105 or
               2109876543  mod          -134217728  <>   -37607105 or
               2109876543  mod           -67108864  <>   -37607105 or
               2109876543  mod           -33554432  <>    -4052673 or
               2109876543  mod           -16777216  <>    -4052673 or
               2109876543  mod            -8388608  <>    -4052673 or
               2109876543  mod            -4194304  <>    -4052673 or
               2109876543  mod            -2097152  <>    -1955521 or
               2109876543  mod            -1048576  <>     -906945 or
               2109876543  mod             -524288  <>     -382657 or
               2109876543  mod             -262144  <>     -120513 or
               2109876543  mod             -131072  <>     -120513 or
               2109876543  mod              -65536  <>      -54977 or
               2109876543  mod              -32768  <>      -22209 or
               2109876543  mod              -16384  <>       -5825 or
               2109876543  mod               -8192  <>       -5825 or
               2109876543  mod               -4096  <>       -1729 or
               2109876543  mod               -2048  <>       -1729 or
               2109876543  mod               -1024  <>        -705 or
               2109876543  mod                -512  <>        -193 or
               2109876543  mod                -256  <>        -193 or
               2109876543  mod                -128  <>         -65 or
               2109876543  mod                 -64  <>          -1 or
               2109876543  mod                 -32  <>          -1 or
               2109876543  mod                 -16  <>          -1 or
               2109876543  mod                  -8  <>          -1 or
               2109876543  mod                  -4  <>          -1 or
               2109876543  mod                  -2  <>          -1 or
               2109876543  mod                   2  <>           1 or
               2109876543  mod                   4  <>           3 or
               2109876543  mod                   8  <>           7 or
               2109876543  mod                  16  <>          15 or
               2109876543  mod                  32  <>          31 or
               2109876543  mod                  64  <>          63 or
               2109876543  mod                 128  <>          63 or
               2109876543  mod                 256  <>          63 or
               2109876543  mod                 512  <>         319 or
               2109876543  mod                1024  <>         319 or
               2109876543  mod                2048  <>         319 or
               2109876543  mod                4096  <>        2367 or
               2109876543  mod                8192  <>        2367 or
               2109876543  mod               16384  <>       10559 or
               2109876543  mod               32768  <>       10559 or
               2109876543  mod               65536  <>       10559 or
               2109876543  mod              131072  <>       10559 or
               2109876543  mod              262144  <>      141631 or
               2109876543  mod              524288  <>      141631 or
               2109876543  mod             1048576  <>      141631 or
               2109876543  mod             2097152  <>      141631 or
               2109876543  mod             4194304  <>      141631 or
               2109876543  mod             8388608  <>     4335935 or
               2109876543  mod            16777216  <>    12724543 or
               2109876543  mod            33554432  <>    29501759 or
               2109876543  mod            67108864  <>    29501759 or
               2109876543  mod           134217728  <>    96610623 or
               2109876543  mod           268435456  <>   230828351 or
               2109876543  mod           536870912  <>   499263807 or
               2109876543  mod          1073741824  <>  1036134719 or
       intExpr(2109876543) mod           INT32_MIN  <>   -37607105 or
       intExpr(2109876543) mod         -1073741824  <>   -37607105 or
       intExpr(2109876543) mod          -536870912  <>   -37607105 or
       intExpr(2109876543) mod          -268435456  <>   -37607105 or
       intExpr(2109876543) mod          -134217728  <>   -37607105 or
       intExpr(2109876543) mod           -67108864  <>   -37607105 or
       intExpr(2109876543) mod           -33554432  <>    -4052673 or
       intExpr(2109876543) mod           -16777216  <>    -4052673 or
       intExpr(2109876543) mod            -8388608  <>    -4052673 or
       intExpr(2109876543) mod            -4194304  <>    -4052673 or
       intExpr(2109876543) mod            -2097152  <>    -1955521 or
       intExpr(2109876543) mod            -1048576  <>     -906945 or
       intExpr(2109876543) mod             -524288  <>     -382657 or
       intExpr(2109876543) mod             -262144  <>     -120513 or
       intExpr(2109876543) mod             -131072  <>     -120513 or
       intExpr(2109876543) mod              -65536  <>      -54977 or
       intExpr(2109876543) mod              -32768  <>      -22209 or
       intExpr(2109876543) mod              -16384  <>       -5825 or
       intExpr(2109876543) mod               -8192  <>       -5825 or
       intExpr(2109876543) mod               -4096  <>       -1729 or
       intExpr(2109876543) mod               -2048  <>       -1729 or
       intExpr(2109876543) mod               -1024  <>        -705 or
       intExpr(2109876543) mod                -512  <>        -193 or
       intExpr(2109876543) mod                -256  <>        -193 or
       intExpr(2109876543) mod                -128  <>         -65 or
       intExpr(2109876543) mod                 -64  <>          -1 or
       intExpr(2109876543) mod                 -32  <>          -1 or
       intExpr(2109876543) mod                 -16  <>          -1 or
       intExpr(2109876543) mod                  -8  <>          -1 or
       intExpr(2109876543) mod                  -4  <>          -1 or
       intExpr(2109876543) mod                  -2  <>          -1 or
       intExpr(2109876543) mod                   2  <>           1 or
       intExpr(2109876543) mod                   4  <>           3 or
       intExpr(2109876543) mod                   8  <>           7 or
       intExpr(2109876543) mod                  16  <>          15 or
       intExpr(2109876543) mod                  32  <>          31 or
       intExpr(2109876543) mod                  64  <>          63 or
       intExpr(2109876543) mod                 128  <>          63 or
       intExpr(2109876543) mod                 256  <>          63 or
       intExpr(2109876543) mod                 512  <>         319 or
       intExpr(2109876543) mod                1024  <>         319 or
       intExpr(2109876543) mod                2048  <>         319 or
       intExpr(2109876543) mod                4096  <>        2367 or
       intExpr(2109876543) mod                8192  <>        2367 or
       intExpr(2109876543) mod               16384  <>       10559 or
       intExpr(2109876543) mod               32768  <>       10559 or
       intExpr(2109876543) mod               65536  <>       10559 or
       intExpr(2109876543) mod              131072  <>       10559 or
       intExpr(2109876543) mod              262144  <>      141631 or
       intExpr(2109876543) mod              524288  <>      141631 or
       intExpr(2109876543) mod             1048576  <>      141631 or
       intExpr(2109876543) mod             2097152  <>      141631 or
       intExpr(2109876543) mod             4194304  <>      141631 or
       intExpr(2109876543) mod             8388608  <>     4335935 or
       intExpr(2109876543) mod            16777216  <>    12724543 or
       intExpr(2109876543) mod            33554432  <>    29501759 or
       intExpr(2109876543) mod            67108864  <>    29501759 or
       intExpr(2109876543) mod           134217728  <>    96610623 or
       intExpr(2109876543) mod           268435456  <>   230828351 or
       intExpr(2109876543) mod           536870912  <>   499263807 or
       intExpr(2109876543) mod          1073741824  <>  1036134719 or
               2109876543  mod intExpr(  INT32_MIN) <>   -37607105 or
               2109876543  mod intExpr(-1073741824) <>   -37607105 or
               2109876543  mod intExpr( -536870912) <>   -37607105 or
               2109876543  mod intExpr( -268435456) <>   -37607105 or
               2109876543  mod intExpr( -134217728) <>   -37607105 or
               2109876543  mod intExpr(  -67108864) <>   -37607105 or
               2109876543  mod intExpr(  -33554432) <>    -4052673 or
               2109876543  mod intExpr(  -16777216) <>    -4052673 or
               2109876543  mod intExpr(   -8388608) <>    -4052673 or
               2109876543  mod intExpr(   -4194304) <>    -4052673 or
               2109876543  mod intExpr(   -2097152) <>    -1955521 or
               2109876543  mod intExpr(   -1048576) <>     -906945 or
               2109876543  mod intExpr(    -524288) <>     -382657 or
               2109876543  mod intExpr(    -262144) <>     -120513 or
               2109876543  mod intExpr(    -131072) <>     -120513 or
               2109876543  mod intExpr(     -65536) <>      -54977 or
               2109876543  mod intExpr(     -32768) <>      -22209 or
               2109876543  mod intExpr(     -16384) <>       -5825 or
               2109876543  mod intExpr(      -8192) <>       -5825 or
               2109876543  mod intExpr(      -4096) <>       -1729 or
               2109876543  mod intExpr(      -2048) <>       -1729 or
               2109876543  mod intExpr(      -1024) <>        -705 or
               2109876543  mod intExpr(       -512) <>        -193 or
               2109876543  mod intExpr(       -256) <>        -193 or
               2109876543  mod intExpr(       -128) <>         -65 or
               2109876543  mod intExpr(        -64) <>          -1 or
               2109876543  mod intExpr(        -32) <>          -1 or
               2109876543  mod intExpr(        -16) <>          -1 or
               2109876543  mod intExpr(         -8) <>          -1 or
               2109876543  mod intExpr(         -4) <>          -1 or
               2109876543  mod intExpr(         -2) <>          -1 or
               2109876543  mod intExpr(          2) <>           1 or
               2109876543  mod intExpr(          4) <>           3 or
               2109876543  mod intExpr(          8) <>           7 or
               2109876543  mod intExpr(         16) <>          15 or
               2109876543  mod intExpr(         32) <>          31 or
               2109876543  mod intExpr(         64) <>          63 or
               2109876543  mod intExpr(        128) <>          63 or
               2109876543  mod intExpr(        256) <>          63 or
               2109876543  mod intExpr(        512) <>         319 or
               2109876543  mod intExpr(       1024) <>         319 or
               2109876543  mod intExpr(       2048) <>         319 or
               2109876543  mod intExpr(       4096) <>        2367 or
               2109876543  mod intExpr(       8192) <>        2367 or
               2109876543  mod intExpr(      16384) <>       10559 or
               2109876543  mod intExpr(      32768) <>       10559 or
               2109876543  mod intExpr(      65536) <>       10559 or
               2109876543  mod intExpr(     131072) <>       10559 or
               2109876543  mod intExpr(     262144) <>      141631 or
               2109876543  mod intExpr(     524288) <>      141631 or
               2109876543  mod intExpr(    1048576) <>      141631 or
               2109876543  mod intExpr(    2097152) <>      141631 or
               2109876543  mod intExpr(    4194304) <>      141631 or
               2109876543  mod intExpr(    8388608) <>     4335935 or
               2109876543  mod intExpr(   16777216) <>    12724543 or
               2109876543  mod intExpr(   33554432) <>    29501759 or
               2109876543  mod intExpr(   67108864) <>    29501759 or
               2109876543  mod intExpr(  134217728) <>    96610623 or
               2109876543  mod intExpr(  268435456) <>   230828351 or
               2109876543  mod intExpr(  536870912) <>   499263807 or
               2109876543  mod intExpr( 1073741824) <>  1036134719 or
       intExpr(2109876543) mod intExpr(  INT32_MIN) <>   -37607105 or
       intExpr(2109876543) mod intExpr(-1073741824) <>   -37607105 or
       intExpr(2109876543) mod intExpr( -536870912) <>   -37607105 or
       intExpr(2109876543) mod intExpr( -268435456) <>   -37607105 or
       intExpr(2109876543) mod intExpr( -134217728) <>   -37607105 or
       intExpr(2109876543) mod intExpr(  -67108864) <>   -37607105 or
       intExpr(2109876543) mod intExpr(  -33554432) <>    -4052673 or
       intExpr(2109876543) mod intExpr(  -16777216) <>    -4052673 or
       intExpr(2109876543) mod intExpr(   -8388608) <>    -4052673 or
       intExpr(2109876543) mod intExpr(   -4194304) <>    -4052673 or
       intExpr(2109876543) mod intExpr(   -2097152) <>    -1955521 or
       intExpr(2109876543) mod intExpr(   -1048576) <>     -906945 or
       intExpr(2109876543) mod intExpr(    -524288) <>     -382657 or
       intExpr(2109876543) mod intExpr(    -262144) <>     -120513 or
       intExpr(2109876543) mod intExpr(    -131072) <>     -120513 or
       intExpr(2109876543) mod intExpr(     -65536) <>      -54977 or
       intExpr(2109876543) mod intExpr(     -32768) <>      -22209 or
       intExpr(2109876543) mod intExpr(     -16384) <>       -5825 or
       intExpr(2109876543) mod intExpr(      -8192) <>       -5825 or
       intExpr(2109876543) mod intExpr(      -4096) <>       -1729 or
       intExpr(2109876543) mod intExpr(      -2048) <>       -1729 or
       intExpr(2109876543) mod intExpr(      -1024) <>        -705 or
       intExpr(2109876543) mod intExpr(       -512) <>        -193 or
       intExpr(2109876543) mod intExpr(       -256) <>        -193 or
       intExpr(2109876543) mod intExpr(       -128) <>         -65 or
       intExpr(2109876543) mod intExpr(        -64) <>          -1 or
       intExpr(2109876543) mod intExpr(        -32) <>          -1 or
       intExpr(2109876543) mod intExpr(        -16) <>          -1 or
       intExpr(2109876543) mod intExpr(         -8) <>          -1 or
       intExpr(2109876543) mod intExpr(         -4) <>          -1 or
       intExpr(2109876543) mod intExpr(         -2) <>          -1 or
       intExpr(2109876543) mod intExpr(          2) <>           1 or
       intExpr(2109876543) mod intExpr(          4) <>           3 or
       intExpr(2109876543) mod intExpr(          8) <>           7 or
       intExpr(2109876543) mod intExpr(         16) <>          15 or
       intExpr(2109876543) mod intExpr(         32) <>          31 or
       intExpr(2109876543) mod intExpr(         64) <>          63 or
       intExpr(2109876543) mod intExpr(        128) <>          63 or
       intExpr(2109876543) mod intExpr(        256) <>          63 or
       intExpr(2109876543) mod intExpr(        512) <>         319 or
       intExpr(2109876543) mod intExpr(       1024) <>         319 or
       intExpr(2109876543) mod intExpr(       2048) <>         319 or
       intExpr(2109876543) mod intExpr(       4096) <>        2367 or
       intExpr(2109876543) mod intExpr(       8192) <>        2367 or
       intExpr(2109876543) mod intExpr(      16384) <>       10559 or
       intExpr(2109876543) mod intExpr(      32768) <>       10559 or
       intExpr(2109876543) mod intExpr(      65536) <>       10559 or
       intExpr(2109876543) mod intExpr(     131072) <>       10559 or
       intExpr(2109876543) mod intExpr(     262144) <>      141631 or
       intExpr(2109876543) mod intExpr(     524288) <>      141631 or
       intExpr(2109876543) mod intExpr(    1048576) <>      141631 or
       intExpr(2109876543) mod intExpr(    2097152) <>      141631 or
       intExpr(2109876543) mod intExpr(    4194304) <>      141631 or
       intExpr(2109876543) mod intExpr(    8388608) <>     4335935 or
       intExpr(2109876543) mod intExpr(   16777216) <>    12724543 or
       intExpr(2109876543) mod intExpr(   33554432) <>    29501759 or
       intExpr(2109876543) mod intExpr(   67108864) <>    29501759 or
       intExpr(2109876543) mod intExpr(  134217728) <>    96610623 or
       intExpr(2109876543) mod intExpr(  268435456) <>   230828351 or
       intExpr(2109876543) mod intExpr(  536870912) <>   499263807 or
       intExpr(2109876543) mod intExpr( 1073741824) <>  1036134719 then
      writeln(" ***** mod with powers of two does not work correct.");
      okay := FALSE;
    end if;

    if okay then
      writeln("Mod works correct for selected values.");
    else
      writeln(" ***** mod does not work correct.");
    end if;
  end func;


const proc: check_odd is func
  local
    var boolean: okay is TRUE;
    var boolean: is_odd is FALSE;
    var integer: number is 0;
  begin
    okay := TRUE;
    is_odd := FALSE;
    for number range -20 to 20 do
      if is_odd <> odd(number) then
        okay := FALSE;
      end if;
      is_odd := not is_odd;
    end for;
    if okay then
      writeln("odd(i) works correct in the range -20 to 20.");
    else
      writeln(" ***** odd(i) does not work correct.");
    end if;
  end func;


const proc: check_fact is func
  local
    var boolean: okay is TRUE;
    var integer: number is 0;
    var integer: fact is 0;
  begin
    okay := TRUE;
    if !0 <> 1 then
      okay := FALSE;
    else
      fact := 1;
      for number range 1 to 12 do
        fact *:= number;
        if !number <> fact then
          write(" ***** !");
          write(number);
          writeln(" is not correct computed.");
          okay := FALSE;
        end if;
      end for;
    end if;
    if okay then
      writeln("!i works correct for i in the range 0 to 12.");
    end if;
  end func;


const proc: check_binom is func
  local
    var boolean: okay is TRUE;
    var integer: n is 0;
    var integer: k is 0;
    var integer: j is 0;
    var integer: binom_result is 0;
    var boolean: overflow is FALSE;
  begin
    okay := TRUE;
    for n range 0 to 12 do
      for k range 0 to n do
        if n ! k <> !n div (!(n - k) * !k) then
          write(" ***** ");
          write(n);
          write(" ! ");
          write(k);
          writeln(" is not correct computed.");
          okay := FALSE;
        end if;
      end for;
      for k range succ(n) to 20 do
        if n ! k <> 0 then
          write(" ***** ");
          write(n);
          write(" ! ");
          write(k);
          writeln(" is not correct computed.");
          okay := FALSE;
        end if;
      end for;
    end for;
    for n range 1 to 30 do
      for k range 0 to n do
        if n ! k <> pred(n) ! pred(k) + pred(n) ! k then
          write(" ***** ");
          write(n);
          write(" ! ");
          write(k);
          writeln(" is not correct computed.");
          write(pred(n) ! pred(k));
          write(" ");
          write(pred(n) ! k);
          write(" ");
          write(pred(n) ! pred(k) + pred(n) ! k);
          write(" ");
          writeln(n ! k);
          okay := FALSE;
        end if;
      end for;
      for k range succ(n) to 40 do
        if n ! k <> 0 then
          write(" ***** ");
          write(n);
          write(" ! ");
          write(k);
          writeln(" is not correct computed.");
          okay := FALSE;
        end if;
      end for;
    end for;
    for n range -1 downto -30 do
      for k range 0 to 40 do
        binom_result := 1;
        overflow := FALSE;
        for j range 1 to k do
          if abs(n + 1 - j) > 2147483647 div abs(binom_result) then
            # writeln(" *** overflow: " <& n <& "!" <& k);
            overflow := TRUE;
            j := k;
          else
            binom_result *:= (n + 1 - j);
            binom_result := binom_result div j;
          end if;
        end for;
        if not overflow and n ! k <> binom_result then
          write(" ***** ");
          write(n);
          write(" ! ");
          write(k);
          writeln(" is not correct computed.");
          write(binom_result);
          write(" ");
          writeln(n ! k);
          okay := FALSE;
        end if;
      end for;
    end for;
    if okay then
      writeln("n ! k is correct for n <= 30.");
    end if;
  end func;


const proc: check_power is func
  local
    var boolean: okay is TRUE;
  begin
    okay := TRUE;
    if  (-3037000499) **  0 <>                    1 or
        (-3037000499) **  1 <>          -3037000499 or
        (-3037000499) **  2 <>  9223372030926249001 or
        (-2147483648) **  0 <>                    1 or
        (-2147483648) **  1 <>          -2147483648 or
        (-2147483648) **  2 <>  4611686018427387904 or
           (-2097152) **  0 <>                    1 or
           (-2097152) **  1 <>             -2097152 or
           (-2097152) **  2 <>        4398046511104 or
           (-2097152) **  3 <>            INT64_MIN or
           (-1234577) **  0 <>                    1 or
           (-1234577) **  1 <>             -1234577 or
           (-1234577) **  2 <>        1524180368929 or
           (-1234577) **  3 <> -1881718027331258033 or
            (-123457) **  0 <>                    1 or
            (-123457) **  1 <>              -123457 or
            (-123457) **  2 <>          15241630849 or
            (-123457) **  3 <>    -1881686019724993 or
             (-55108) **  0 <>                    1 or
             (-55108) **  1 <>               -55108 or
             (-55108) **  2 <>           3036891664 or
             (-55108) **  3 <>     -167357025819712 or
             (-55108) **  4 <>  9222710978872688896 or
             (-32768) **  0 <>                    1 or
             (-32768) **  1 <>               -32768 or
             (-32768) **  2 <>           1073741824 or
             (-32768) **  3 <>      -35184372088832 or
             (-32768) **  4 <>  1152921504606846976 or
             (-32767) **  0 <>                    1 or
             (-32767) **  1 <>               -32767 or
             (-32767) **  2 <>           1073676289 or
             (-32767) **  3 <>      -35181150961663 or
             (-32767) **  4 <>  1152780773560811521 or
              (-6208) **  0 <>                    1 or
              (-6208) **  1 <>                -6208 or
              (-6208) **  2 <>             38539264 or
              (-6208) **  3 <>        -239251750912 or
              (-6208) **  4 <>     1485274869661696 or
              (-6208) **  5 <> -9220586390859808768 or
              (-1448) **  0 <>                    1 or
              (-1448) **  1 <>                -1448 or
              (-1448) **  2 <>              2096704 or
              (-1448) **  3 <>          -3036027392 or
              (-1448) **  4 <>        4396167663616 or
              (-1448) **  5 <>    -6365650776915968 or
              (-1448) **  6 <>  9217462324974321664 or
               (-512) **  0 <>                    1 or
               (-512) **  1 <>                 -512 or
               (-512) **  2 <>               262144 or
               (-512) **  3 <>           -134217728 or
               (-512) **  4 <>          68719476736 or
               (-512) **  5 <>      -35184372088832 or
               (-512) **  6 <>    18014398509481984 or
               (-512) **  7 <>            INT64_MIN or
                (-97) **  0 <>                    1 or
                (-97) **  1 <>                  -97 or
                (-97) **  2 <>                 9409 or
                (-97) **  3 <>              -912673 or
                (-97) **  4 <>             88529281 or
                (-97) **  8 <>     7837433594376961 or
                (-97) **  9 <>  -760231058654565217 or
                 (-5) **  0 <>                    1 or
                 (-5) **  1 <>                   -5 or
                 (-5) **  2 <>                   25 or
                 (-5) **  3 <>                 -125 or
                 (-5) **  4 <>                  625 or
                 (-5) **  5 <>                -3125 or
                 (-5) **  6 <>                15625 or
                 (-5) **  7 <>               -78125 or
                 (-5) **  8 <>               390625 or
                 (-5) **  9 <>             -1953125 or
                 (-5) ** 10 <>              9765625 or
                 (-5) ** 11 <>            -48828125 or
                 (-5) ** 12 <>            244140625 or
                 (-5) ** 13 <>          -1220703125 or
                 (-5) ** 14 <>           6103515625 or
                 (-5) ** 15 <>         -30517578125 or
                 (-5) ** 16 <>         152587890625 or
                 (-5) ** 17 <>        -762939453125 or
                 (-5) ** 18 <>        3814697265625 or
                 (-5) ** 19 <>      -19073486328125 or
                 (-5) ** 20 <>       95367431640625 or
                 (-5) ** 21 <>     -476837158203125 or
                 (-5) ** 22 <>     2384185791015625 or
                 (-5) ** 23 <>   -11920928955078125 or
                 (-5) ** 24 <>    59604644775390625 or
                 (-5) ** 25 <>  -298023223876953125 or
                 (-5) ** 26 <>  1490116119384765625 or
                 (-5) ** 27 <> -7450580596923828125 or
                 (-4) **  0 <>                    1 or
                 (-4) **  1 <>                   -4 or
                 (-4) **  2 <>                   16 or
                 (-4) **  3 <>                  -64 or
                 (-4) **  4 <>                  256 or
                 (-4) **  5 <>                -1024 or
                 (-4) ** 10 <>              1048576 or
                 (-4) ** 15 <>          -1073741824 or
                 (-4) ** 20 <>        1099511627776 or
                 (-4) ** 25 <>    -1125899906842624 or
                 (-4) ** 30 <>  1152921504606846976 or
                 (-4) ** 31 <> -4611686018427387904 or
                 (-3) **  0 <>                    1 or
                 (-3) **  1 <>                   -3 or
                 (-3) **  2 <>                    9 or
                 (-3) **  3 <>                  -27 or
                 (-3) **  4 <>                   81 or
                 (-3) **  5 <>                 -243 or
                 (-3) ** 10 <>                59049 or
                 (-3) ** 15 <>            -14348907 or
                 (-3) ** 20 <>           3486784401 or
                 (-3) ** 25 <>        -847288609443 or
                 (-3) ** 30 <>      205891132094649 or
                 (-3) ** 35 <>   -50031545098999707 or
                 (-3) ** 39 <> -4052555153018976267 or
                 (-2) **  0 <>                    1 or
                 (-2) **  1 <>                   -2 or
                 (-2) **  2 <>                    4 or
                 (-2) **  3 <>                   -8 or
                 (-2) **  4 <>                   16 or
                 (-2) **  5 <>                  -32 or
                 (-2) ** 10 <>                 1024 or
                 (-2) ** 15 <>               -32768 or
                 (-2) ** 16 <>                65536 or
                 (-2) ** 20 <>              1048576 or
                 (-2) ** 25 <>            -33554432 or
                 (-2) ** 30 <>           1073741824 or
                 (-2) ** 31 <>          -2147483648 or
                 (-2) ** 32 <>           4294967296 or
                 (-2) ** 35 <>         -34359738368 or
                 (-2) ** 40 <>        1099511627776 or
                 (-2) ** 45 <>      -35184372088832 or
                 (-2) ** 50 <>     1125899906842624 or
                 (-2) ** 55 <>   -36028797018963968 or
                 (-2) ** 60 <>  1152921504606846976 or
                 (-2) ** 61 <> -2305843009213693952 or
                 (-2) ** 62 <>  4611686018427387904 or
                 (-2) ** 63 <>            INT64_MIN or
                 (-1) **                   0 <>   1 or
                 (-1) **                   1 <>  -1 or
                 (-1) **                   2 <>   1 or
                 (-1) **                   3 <>  -1 or
                 (-1) **                  99 <>  -1 or
                 (-1) **                 999 <>  -1 or
                 (-1) **           999999999 <>  -1 or
                 (-1) **          2147483647 <>  -1 or
                 (-1) **          2147483648 <>   1 or
                 (-1) ** 9223372036854775806 <>   1 or
                 (-1) ** 9223372036854775807 <>  -1 or
                   0  **                   0 <>   1 or
                   0  **                   1 <>   0 or
                   0  **                   2 <>   0 or
                   0  **                   3 <>   0 or
                   0  **                  99 <>   0 or
                   0  **                 999 <>   0 or
                   0  **           999999999 <>   0 or
                   0  **          2147483647 <>   0 or
                   0  **          2147483648 <>   0 or
                   0  ** 9223372036854775806 <>   0 or
                   0  ** 9223372036854775807 <>   0 or
                   1  **                   0 <>   1 or
                   1  **                   1 <>   1 or
                   1  **                   2 <>   1 or
                   1  **                   3 <>   1 or
                   1  **                  99 <>   1 or
                   1  **                 999 <>   1 or
                   1  **           999999999 <>   1 or
                   1  **          2147483647 <>   1 or
                   1  **          2147483648 <>   1 or
                   1  ** 9223372036854775806 <>   1 or
                   1  ** 9223372036854775807 <>   1 or
                   2  **  0 <>                    1 or
                   2  **  1 <>                    2 or
                   2  **  2 <>                    4 or
                   2  **  3 <>                    8 or
                   2  **  4 <>                   16 or
                   2  **  5 <>                   32 or
                   2  ** 10 <>                 1024 or
                   2  ** 15 <>                32768 or
                   2  ** 16 <>                65536 or
                   2  ** 20 <>              1048576 or
                   2  ** 25 <>             33554432 or
                   2  ** 30 <>           1073741824 or
                   2  ** 31 <>           2147483648 or
                   2  ** 32 <>           4294967296 or
                   2  ** 35 <>          34359738368 or
                   2  ** 40 <>        1099511627776 or
                   2  ** 45 <>       35184372088832 or
                   2  ** 50 <>     1125899906842624 or
                   2  ** 55 <>    36028797018963968 or
                   2  ** 60 <>  1152921504606846976 or
                   2  ** 61 <>  2305843009213693952 or
                   2  ** 62 <>  4611686018427387904 or
                   3  **  0 <>                    1 or
                   3  **  1 <>                    3 or
                   3  **  2 <>                    9 or
                   3  **  3 <>                   27 or
                   3  **  4 <>                   81 or
                   3  **  5 <>                  243 or
                   3  ** 10 <>                59049 or
                   3  ** 15 <>             14348907 or
                   3  ** 20 <>           3486784401 or
                   3  ** 25 <>         847288609443 or
                   3  ** 30 <>      205891132094649 or
                   3  ** 35 <>    50031545098999707 or
                   3  ** 39 <>  4052555153018976267 or
                   4  **  0 <>                    1 or
                   4  **  1 <>                    4 or
                   4  **  2 <>                   16 or
                   4  **  3 <>                   64 or
                   4  **  4 <>                  256 or
                   4  **  5 <>                 1024 or
                   4  ** 10 <>              1048576 or
                   4  ** 15 <>           1073741824 or
                   4  ** 20 <>        1099511627776 or
                   4  ** 25 <>     1125899906842624 or
                   4  ** 30 <>  1152921504606846976 or
                   4  ** 31 <>  4611686018427387904 or
                   5  **  0 <>                    1 or
                   5  **  1 <>                    5 or
                   5  **  2 <>                   25 or
                   5  **  3 <>                  125 or
                   5  **  4 <>                  625 or
                   5  **  5 <>                 3125 or
                   5  **  6 <>                15625 or
                   5  **  7 <>                78125 or
                   5  **  8 <>               390625 or
                   5  **  9 <>              1953125 or
                   5  ** 10 <>              9765625 or
                   5  ** 11 <>             48828125 or
                   5  ** 12 <>            244140625 or
                   5  ** 13 <>           1220703125 or
                   5  ** 14 <>           6103515625 or
                   5  ** 15 <>          30517578125 or
                   5  ** 16 <>         152587890625 or
                   5  ** 17 <>         762939453125 or
                   5  ** 18 <>        3814697265625 or
                   5  ** 19 <>       19073486328125 or
                   5  ** 20 <>       95367431640625 or
                   5  ** 21 <>      476837158203125 or
                   5  ** 22 <>     2384185791015625 or
                   5  ** 23 <>    11920928955078125 or
                   5  ** 24 <>    59604644775390625 or
                   5  ** 25 <>   298023223876953125 or
                   5  ** 26 <>  1490116119384765625 or
                   5  ** 27 <>  7450580596923828125 or
                  97  **  0 <>                    1 or
                  97  **  1 <>                   97 or
                  97  **  2 <>                 9409 or
                  97  **  3 <>               912673 or
                  97  **  4 <>             88529281 or
                  97  **  8 <>     7837433594376961 or
                  97  **  9 <>   760231058654565217 or
                 511  **  0 <>                    1 or
                 511  **  1 <>                  511 or
                 511  **  2 <>               261121 or
                 511  **  3 <>            133432831 or
                 511  **  4 <>          68184176641 or
                 511  **  5 <>       34842114263551 or
                 511  **  6 <>    17804320388674561 or
                 511  **  7 <>  9098007718612700671 or
                1448  **  0 <>                    1 or
                1448  **  1 <>                 1448 or
                1448  **  2 <>              2096704 or
                1448  **  3 <>           3036027392 or
                1448  **  4 <>        4396167663616 or
                1448  **  5 <>     6365650776915968 or
                1448  **  6 <>  9217462324974321664 or
                6208  **  0 <>                    1 or
                6208  **  1 <>                 6208 or
                6208  **  2 <>             38539264 or
                6208  **  3 <>         239251750912 or
                6208  **  4 <>     1485274869661696 or
                6208  **  5 <>  9220586390859808768 or
               32767  **  0 <>                    1 or
               32767  **  1 <>                32767 or
               32767  **  2 <>           1073676289 or
               32767  **  3 <>       35181150961663 or
               32767  **  4 <>  1152780773560811521 or
               32768  **  0 <>                    1 or
               32768  **  1 <>                32768 or
               32768  **  2 <>           1073741824 or
               32768  **  3 <>       35184372088832 or
               32768  **  4 <>  1152921504606846976 or
               55108  **  0 <>                    1 or
               55108  **  1 <>                55108 or
               55108  **  2 <>           3036891664 or
               55108  **  3 <>      167357025819712 or
               55108  **  4 <>  9222710978872688896 or
              123457  **  0 <>                    1 or
              123457  **  1 <>               123457 or
              123457  **  2 <>          15241630849 or
              123457  **  3 <>     1881686019724993 or
             1234577  **  0 <>                    1 or
             1234577  **  1 <>              1234577 or
             1234577  **  2 <>        1524180368929 or
             1234577  **  3 <>  1881718027331258033 or
             2097151  **  0 <>                    1 or
             2097151  **  1 <>              2097151 or
             2097151  **  2 <>        4398042316801 or
             2097151  **  3 <>  9223358842721533951 or
          2147483648  **  0 <>                    1 or
          2147483648  **  1 <>           2147483648 or
          2147483648  **  2 <>  4611686018427387904 or
          3037000499  **  0 <>                    1 or
          3037000499  **  1 <>           3037000499 or
          3037000499  **  2 <>  9223372030926249001 then
      writeln(" ***** Computing power with constants does not work correct.");
      okay := FALSE;
    end if;

    if  intExpr(-3037000499) **  0 <>                    1 or
        intExpr(-3037000499) **  1 <>          -3037000499 or
        intExpr(-3037000499) **  2 <>  9223372030926249001 or
        intExpr(-2147483648) **  0 <>                    1 or
        intExpr(-2147483648) **  1 <>          -2147483648 or
        intExpr(-2147483648) **  2 <>  4611686018427387904 or
        intExpr(   -2097152) **  0 <>                    1 or
        intExpr(   -2097152) **  1 <>             -2097152 or
        intExpr(   -2097152) **  2 <>        4398046511104 or
        intExpr(   -2097152) **  3 <>            INT64_MIN or
        intExpr(   -1234577) **  0 <>                    1 or
        intExpr(   -1234577) **  1 <>             -1234577 or
        intExpr(   -1234577) **  2 <>        1524180368929 or
        intExpr(   -1234577) **  3 <> -1881718027331258033 or
        intExpr(    -123457) **  0 <>                    1 or
        intExpr(    -123457) **  1 <>              -123457 or
        intExpr(    -123457) **  2 <>          15241630849 or
        intExpr(    -123457) **  3 <>    -1881686019724993 or
        intExpr(     -55108) **  0 <>                    1 or
        intExpr(     -55108) **  1 <>               -55108 or
        intExpr(     -55108) **  2 <>           3036891664 or
        intExpr(     -55108) **  3 <>     -167357025819712 or
        intExpr(     -55108) **  4 <>  9222710978872688896 or
        intExpr(     -32768) **  0 <>                    1 or
        intExpr(     -32768) **  1 <>               -32768 or
        intExpr(     -32768) **  2 <>           1073741824 or
        intExpr(     -32768) **  3 <>      -35184372088832 or
        intExpr(     -32768) **  4 <>  1152921504606846976 or
        intExpr(     -32767) **  0 <>                    1 or
        intExpr(     -32767) **  1 <>               -32767 or
        intExpr(     -32767) **  2 <>           1073676289 or
        intExpr(     -32767) **  3 <>      -35181150961663 or
        intExpr(     -32767) **  4 <>  1152780773560811521 or
        intExpr(      -6208) **  0 <>                    1 or
        intExpr(      -6208) **  1 <>                -6208 or
        intExpr(      -6208) **  2 <>             38539264 or
        intExpr(      -6208) **  3 <>        -239251750912 or
        intExpr(      -6208) **  4 <>     1485274869661696 or
        intExpr(      -6208) **  5 <> -9220586390859808768 or
        intExpr(      -1448) **  0 <>                    1 or
        intExpr(      -1448) **  1 <>                -1448 or
        intExpr(      -1448) **  2 <>              2096704 or
        intExpr(      -1448) **  3 <>          -3036027392 or
        intExpr(      -1448) **  4 <>        4396167663616 or
        intExpr(      -1448) **  5 <>    -6365650776915968 or
        intExpr(      -1448) **  6 <>  9217462324974321664 or
        intExpr(       -512) **  0 <>                    1 or
        intExpr(       -512) **  1 <>                 -512 or
        intExpr(       -512) **  2 <>               262144 or
        intExpr(       -512) **  3 <>           -134217728 or
        intExpr(       -512) **  4 <>          68719476736 or
        intExpr(       -512) **  5 <>      -35184372088832 or
        intExpr(       -512) **  6 <>    18014398509481984 or
        intExpr(       -512) **  7 <>            INT64_MIN or
        intExpr(        -97) **  0 <>                    1 or
        intExpr(        -97) **  1 <>                  -97 or
        intExpr(        -97) **  2 <>                 9409 or
        intExpr(        -97) **  3 <>              -912673 or
        intExpr(        -97) **  4 <>             88529281 or
        intExpr(        -97) **  8 <>     7837433594376961 or
        intExpr(        -97) **  9 <>  -760231058654565217 or
        intExpr(         -5) **  0 <>                    1 or
        intExpr(         -5) **  1 <>                   -5 or
        intExpr(         -5) **  2 <>                   25 or
        intExpr(         -5) **  3 <>                 -125 or
        intExpr(         -5) **  4 <>                  625 or
        intExpr(         -5) **  5 <>                -3125 or
        intExpr(         -5) **  6 <>                15625 or
        intExpr(         -5) **  7 <>               -78125 or
        intExpr(         -5) **  8 <>               390625 or
        intExpr(         -5) **  9 <>             -1953125 or
        intExpr(         -5) ** 10 <>              9765625 or
        intExpr(         -5) ** 11 <>            -48828125 or
        intExpr(         -5) ** 12 <>            244140625 or
        intExpr(         -5) ** 13 <>          -1220703125 or
        intExpr(         -5) ** 14 <>           6103515625 or
        intExpr(         -5) ** 15 <>         -30517578125 or
        intExpr(         -5) ** 16 <>         152587890625 or
        intExpr(         -5) ** 17 <>        -762939453125 or
        intExpr(         -5) ** 18 <>        3814697265625 or
        intExpr(         -5) ** 19 <>      -19073486328125 or
        intExpr(         -5) ** 20 <>       95367431640625 or
        intExpr(         -5) ** 21 <>     -476837158203125 or
        intExpr(         -5) ** 22 <>     2384185791015625 or
        intExpr(         -5) ** 23 <>   -11920928955078125 or
        intExpr(         -5) ** 24 <>    59604644775390625 or
        intExpr(         -5) ** 25 <>  -298023223876953125 or
        intExpr(         -5) ** 26 <>  1490116119384765625 or
        intExpr(         -5) ** 27 <> -7450580596923828125 or
        intExpr(         -4) **  0 <>                    1 or
        intExpr(         -4) **  1 <>                   -4 or
        intExpr(         -4) **  2 <>                   16 or
        intExpr(         -4) **  3 <>                  -64 or
        intExpr(         -4) **  4 <>                  256 or
        intExpr(         -4) **  5 <>                -1024 or
        intExpr(         -4) ** 10 <>              1048576 or
        intExpr(         -4) ** 15 <>          -1073741824 or
        intExpr(         -4) ** 20 <>        1099511627776 or
        intExpr(         -4) ** 25 <>    -1125899906842624 or
        intExpr(         -4) ** 30 <>  1152921504606846976 or
        intExpr(         -4) ** 31 <> -4611686018427387904 or
        intExpr(         -3) **  0 <>                    1 or
        intExpr(         -3) **  1 <>                   -3 or
        intExpr(         -3) **  2 <>                    9 or
        intExpr(         -3) **  3 <>                  -27 or
        intExpr(         -3) **  4 <>                   81 or
        intExpr(         -3) **  5 <>                 -243 or
        intExpr(         -3) ** 10 <>                59049 or
        intExpr(         -3) ** 15 <>            -14348907 or
        intExpr(         -3) ** 20 <>           3486784401 or
        intExpr(         -3) ** 25 <>        -847288609443 or
        intExpr(         -3) ** 30 <>      205891132094649 or
        intExpr(         -3) ** 35 <>   -50031545098999707 or
        intExpr(         -3) ** 39 <> -4052555153018976267 or
        intExpr(         -2) **  0 <>                    1 or
        intExpr(         -2) **  1 <>                   -2 or
        intExpr(         -2) **  2 <>                    4 or
        intExpr(         -2) **  3 <>                   -8 or
        intExpr(         -2) **  4 <>                   16 or
        intExpr(         -2) **  5 <>                  -32 or
        intExpr(         -2) ** 10 <>                 1024 or
        intExpr(         -2) ** 15 <>               -32768 or
        intExpr(         -2) ** 16 <>                65536 or
        intExpr(         -2) ** 20 <>              1048576 or
        intExpr(         -2) ** 25 <>            -33554432 or
        intExpr(         -2) ** 30 <>           1073741824 or
        intExpr(         -2) ** 31 <>          -2147483648 or
        intExpr(         -2) ** 32 <>           4294967296 or
        intExpr(         -2) ** 35 <>         -34359738368 or
        intExpr(         -2) ** 40 <>        1099511627776 or
        intExpr(         -2) ** 45 <>      -35184372088832 or
        intExpr(         -2) ** 50 <>     1125899906842624 or
        intExpr(         -2) ** 55 <>   -36028797018963968 or
        intExpr(         -2) ** 60 <>  1152921504606846976 or
        intExpr(         -2) ** 61 <> -2305843009213693952 or
        intExpr(         -2) ** 62 <>  4611686018427387904 or
        intExpr(         -2) ** 63 <>            INT64_MIN or
        intExpr(         -1) **                   0 <>   1 or
        intExpr(         -1) **                   1 <>  -1 or
        intExpr(         -1) **                   2 <>   1 or
        intExpr(         -1) **                   3 <>  -1 or
        intExpr(         -1) **                  99 <>  -1 or
        intExpr(         -1) **                 999 <>  -1 or
        intExpr(         -1) **           999999999 <>  -1 or
        intExpr(         -1) **          2147483647 <>  -1 or
        intExpr(         -1) **          2147483648 <>   1 or
        intExpr(         -1) ** 9223372036854775806 <>   1 or
        intExpr(         -1) ** 9223372036854775807 <>  -1 or
        intExpr(          0) **                   0 <>   1 or
        intExpr(          0) **                   1 <>   0 or
        intExpr(          0) **                   2 <>   0 or
        intExpr(          0) **                   3 <>   0 or
        intExpr(          0) **                  99 <>   0 or
        intExpr(          0) **                 999 <>   0 or
        intExpr(          0) **           999999999 <>   0 or
        intExpr(          0) **          2147483647 <>   0 or
        intExpr(          0) **          2147483648 <>   0 or
        intExpr(          0) ** 9223372036854775806 <>   0 or
        intExpr(          0) ** 9223372036854775807 <>   0 or
        intExpr(          1) **                   0 <>   1 or
        intExpr(          1) **                   1 <>   1 or
        intExpr(          1) **                   2 <>   1 or
        intExpr(          1) **                   3 <>   1 or
        intExpr(          1) **                  99 <>   1 or
        intExpr(          1) **                 999 <>   1 or
        intExpr(          1) **           999999999 <>   1 or
        intExpr(          1) **          2147483647 <>   1 or
        intExpr(          1) **          2147483648 <>   1 or
        intExpr(          1) ** 9223372036854775806 <>   1 or
        intExpr(          1) ** 9223372036854775807 <>   1 or
        intExpr(          2) **  0 <>                    1 or
        intExpr(          2) **  1 <>                    2 or
        intExpr(          2) **  2 <>                    4 or
        intExpr(          2) **  3 <>                    8 or
        intExpr(          2) **  4 <>                   16 or
        intExpr(          2) **  5 <>                   32 or
        intExpr(          2) ** 10 <>                 1024 or
        intExpr(          2) ** 15 <>                32768 or
        intExpr(          2) ** 16 <>                65536 or
        intExpr(          2) ** 20 <>              1048576 or
        intExpr(          2) ** 25 <>             33554432 or
        intExpr(          2) ** 30 <>           1073741824 or
        intExpr(          2) ** 31 <>           2147483648 or
        intExpr(          2) ** 32 <>           4294967296 or
        intExpr(          2) ** 35 <>          34359738368 or
        intExpr(          2) ** 40 <>        1099511627776 or
        intExpr(          2) ** 45 <>       35184372088832 or
        intExpr(          2) ** 50 <>     1125899906842624 or
        intExpr(          2) ** 55 <>    36028797018963968 or
        intExpr(          2) ** 60 <>  1152921504606846976 or
        intExpr(          2) ** 61 <>  2305843009213693952 or
        intExpr(          2) ** 62 <>  4611686018427387904 or
        intExpr(          3) **  0 <>                    1 or
        intExpr(          3) **  1 <>                    3 or
        intExpr(          3) **  2 <>                    9 or
        intExpr(          3) **  3 <>                   27 or
        intExpr(          3) **  4 <>                   81 or
        intExpr(          3) **  5 <>                  243 or
        intExpr(          3) ** 10 <>                59049 or
        intExpr(          3) ** 15 <>             14348907 or
        intExpr(          3) ** 20 <>           3486784401 or
        intExpr(          3) ** 25 <>         847288609443 or
        intExpr(          3) ** 30 <>      205891132094649 or
        intExpr(          3) ** 35 <>    50031545098999707 or
        intExpr(          3) ** 39 <>  4052555153018976267 or
        intExpr(          4) **  0 <>                    1 or
        intExpr(          4) **  1 <>                    4 or
        intExpr(          4) **  2 <>                   16 or
        intExpr(          4) **  3 <>                   64 or
        intExpr(          4) **  4 <>                  256 or
        intExpr(          4) **  5 <>                 1024 or
        intExpr(          4) ** 10 <>              1048576 or
        intExpr(          4) ** 15 <>           1073741824 or
        intExpr(          4) ** 20 <>        1099511627776 or
        intExpr(          4) ** 25 <>     1125899906842624 or
        intExpr(          4) ** 30 <>  1152921504606846976 or
        intExpr(          4) ** 31 <>  4611686018427387904 or
        intExpr(          5) **  0 <>                    1 or
        intExpr(          5) **  1 <>                    5 or
        intExpr(          5) **  2 <>                   25 or
        intExpr(          5) **  3 <>                  125 or
        intExpr(          5) **  4 <>                  625 or
        intExpr(          5) **  5 <>                 3125 or
        intExpr(          5) **  6 <>                15625 or
        intExpr(          5) **  7 <>                78125 or
        intExpr(          5) **  8 <>               390625 or
        intExpr(          5) **  9 <>              1953125 or
        intExpr(          5) ** 10 <>              9765625 or
        intExpr(          5) ** 11 <>             48828125 or
        intExpr(          5) ** 12 <>            244140625 or
        intExpr(          5) ** 13 <>           1220703125 or
        intExpr(          5) ** 14 <>           6103515625 or
        intExpr(          5) ** 15 <>          30517578125 or
        intExpr(          5) ** 16 <>         152587890625 or
        intExpr(          5) ** 17 <>         762939453125 or
        intExpr(          5) ** 18 <>        3814697265625 or
        intExpr(          5) ** 19 <>       19073486328125 or
        intExpr(          5) ** 20 <>       95367431640625 or
        intExpr(          5) ** 21 <>      476837158203125 or
        intExpr(          5) ** 22 <>     2384185791015625 or
        intExpr(          5) ** 23 <>    11920928955078125 or
        intExpr(          5) ** 24 <>    59604644775390625 or
        intExpr(          5) ** 25 <>   298023223876953125 or
        intExpr(          5) ** 26 <>  1490116119384765625 or
        intExpr(          5) ** 27 <>  7450580596923828125 or
        intExpr(         97) **  0 <>                    1 or
        intExpr(         97) **  1 <>                   97 or
        intExpr(         97) **  2 <>                 9409 or
        intExpr(         97) **  3 <>               912673 or
        intExpr(         97) **  4 <>             88529281 or
        intExpr(         97) **  8 <>     7837433594376961 or
        intExpr(         97) **  9 <>   760231058654565217 or
        intExpr(        511) **  0 <>                    1 or
        intExpr(        511) **  1 <>                  511 or
        intExpr(        511) **  2 <>               261121 or
        intExpr(        511) **  3 <>            133432831 or
        intExpr(        511) **  4 <>          68184176641 or
        intExpr(        511) **  5 <>       34842114263551 or
        intExpr(        511) **  6 <>    17804320388674561 or
        intExpr(        511) **  7 <>  9098007718612700671 or
        intExpr(       1448) **  0 <>                    1 or
        intExpr(       1448) **  1 <>                 1448 or
        intExpr(       1448) **  2 <>              2096704 or
        intExpr(       1448) **  3 <>           3036027392 or
        intExpr(       1448) **  4 <>        4396167663616 or
        intExpr(       1448) **  5 <>     6365650776915968 or
        intExpr(       1448) **  6 <>  9217462324974321664 or
        intExpr(       6208) **  0 <>                    1 or
        intExpr(       6208) **  1 <>                 6208 or
        intExpr(       6208) **  2 <>             38539264 or
        intExpr(       6208) **  3 <>         239251750912 or
        intExpr(       6208) **  4 <>     1485274869661696 or
        intExpr(       6208) **  5 <>  9220586390859808768 or
        intExpr(      32767) **  0 <>                    1 or
        intExpr(      32767) **  1 <>                32767 or
        intExpr(      32767) **  2 <>           1073676289 or
        intExpr(      32767) **  3 <>       35181150961663 or
        intExpr(      32767) **  4 <>  1152780773560811521 or
        intExpr(      32768) **  0 <>                    1 or
        intExpr(      32768) **  1 <>                32768 or
        intExpr(      32768) **  2 <>           1073741824 or
        intExpr(      32768) **  3 <>       35184372088832 or
        intExpr(      32768) **  4 <>  1152921504606846976 or
        intExpr(      55108) **  0 <>                    1 or
        intExpr(      55108) **  1 <>                55108 or
        intExpr(      55108) **  2 <>           3036891664 or
        intExpr(      55108) **  3 <>      167357025819712 or
        intExpr(      55108) **  4 <>  9222710978872688896 or
        intExpr(     123457) **  0 <>                    1 or
        intExpr(     123457) **  1 <>               123457 or
        intExpr(     123457) **  2 <>          15241630849 or
        intExpr(     123457) **  3 <>     1881686019724993 or
        intExpr(    1234577) **  0 <>                    1 or
        intExpr(    1234577) **  1 <>              1234577 or
        intExpr(    1234577) **  2 <>        1524180368929 or
        intExpr(    1234577) **  3 <>  1881718027331258033 or
        intExpr(    2097151) **  0 <>                    1 or
        intExpr(    2097151) **  1 <>              2097151 or
        intExpr(    2097151) **  2 <>        4398042316801 or
        intExpr(    2097151) **  3 <>  9223358842721533951 or
        intExpr( 2147483648) **  0 <>                    1 or
        intExpr( 2147483648) **  1 <>           2147483648 or
        intExpr( 2147483648) **  2 <>  4611686018427387904 or
        intExpr( 3037000499) **  0 <>                    1 or
        intExpr( 3037000499) **  1 <>           3037000499 or
        intExpr( 3037000499) **  2 <>  9223372030926249001 then
      writeln(" ***** Computing power with a constant exponent does not work correct.");
      okay := FALSE;
    end if;

    if  (-3037000499) ** intExpr( 0) <>                    1 or
        (-3037000499) ** intExpr( 1) <>          -3037000499 or
        (-3037000499) ** intExpr( 2) <>  9223372030926249001 or
        (-2147483648) ** intExpr( 0) <>                    1 or
        (-2147483648) ** intExpr( 1) <>          -2147483648 or
        (-2147483648) ** intExpr( 2) <>  4611686018427387904 or
           (-2097152) ** intExpr( 0) <>                    1 or
           (-2097152) ** intExpr( 1) <>             -2097152 or
           (-2097152) ** intExpr( 2) <>        4398046511104 or
           (-2097152) ** intExpr( 3) <>            INT64_MIN or
           (-1234577) ** intExpr( 0) <>                    1 or
           (-1234577) ** intExpr( 1) <>             -1234577 or
           (-1234577) ** intExpr( 2) <>        1524180368929 or
           (-1234577) ** intExpr( 3) <> -1881718027331258033 or
            (-123457) ** intExpr( 0) <>                    1 or
            (-123457) ** intExpr( 1) <>              -123457 or
            (-123457) ** intExpr( 2) <>          15241630849 or
            (-123457) ** intExpr( 3) <>    -1881686019724993 or
             (-55108) ** intExpr( 0) <>                    1 or
             (-55108) ** intExpr( 1) <>               -55108 or
             (-55108) ** intExpr( 2) <>           3036891664 or
             (-55108) ** intExpr( 3) <>     -167357025819712 or
             (-55108) ** intExpr( 4) <>  9222710978872688896 or
             (-32768) ** intExpr( 0) <>                    1 or
             (-32768) ** intExpr( 1) <>               -32768 or
             (-32768) ** intExpr( 2) <>           1073741824 or
             (-32768) ** intExpr( 3) <>      -35184372088832 or
             (-32768) ** intExpr( 4) <>  1152921504606846976 or
             (-32767) ** intExpr( 0) <>                    1 or
             (-32767) ** intExpr( 1) <>               -32767 or
             (-32767) ** intExpr( 2) <>           1073676289 or
             (-32767) ** intExpr( 3) <>      -35181150961663 or
             (-32767) ** intExpr( 4) <>  1152780773560811521 or
              (-6208) ** intExpr( 0) <>                    1 or
              (-6208) ** intExpr( 1) <>                -6208 or
              (-6208) ** intExpr( 2) <>             38539264 or
              (-6208) ** intExpr( 3) <>        -239251750912 or
              (-6208) ** intExpr( 4) <>     1485274869661696 or
              (-6208) ** intExpr( 5) <> -9220586390859808768 or
              (-1448) ** intExpr( 0) <>                    1 or
              (-1448) ** intExpr( 1) <>                -1448 or
              (-1448) ** intExpr( 2) <>              2096704 or
              (-1448) ** intExpr( 3) <>          -3036027392 or
              (-1448) ** intExpr( 4) <>        4396167663616 or
              (-1448) ** intExpr( 5) <>    -6365650776915968 or
              (-1448) ** intExpr( 6) <>  9217462324974321664 or
               (-512) ** intExpr( 0) <>                    1 or
               (-512) ** intExpr( 1) <>                 -512 or
               (-512) ** intExpr( 2) <>               262144 or
               (-512) ** intExpr( 3) <>           -134217728 or
               (-512) ** intExpr( 4) <>          68719476736 or
               (-512) ** intExpr( 5) <>      -35184372088832 or
               (-512) ** intExpr( 6) <>    18014398509481984 or
               (-512) ** intExpr( 7) <>            INT64_MIN or
                (-97) ** intExpr( 0) <>                    1 or
                (-97) ** intExpr( 1) <>                  -97 or
                (-97) ** intExpr( 2) <>                 9409 or
                (-97) ** intExpr( 3) <>              -912673 or
                (-97) ** intExpr( 4) <>             88529281 or
                (-97) ** intExpr( 8) <>     7837433594376961 or
                (-97) ** intExpr( 9) <>  -760231058654565217 or
                 (-5) ** intExpr( 0) <>                    1 or
                 (-5) ** intExpr( 1) <>                   -5 or
                 (-5) ** intExpr( 2) <>                   25 or
                 (-5) ** intExpr( 3) <>                 -125 or
                 (-5) ** intExpr( 4) <>                  625 or
                 (-5) ** intExpr( 5) <>                -3125 or
                 (-5) ** intExpr( 6) <>                15625 or
                 (-5) ** intExpr( 7) <>               -78125 or
                 (-5) ** intExpr( 8) <>               390625 or
                 (-5) ** intExpr( 9) <>             -1953125 or
                 (-5) ** intExpr(10) <>              9765625 or
                 (-5) ** intExpr(11) <>            -48828125 or
                 (-5) ** intExpr(12) <>            244140625 or
                 (-5) ** intExpr(13) <>          -1220703125 or
                 (-5) ** intExpr(14) <>           6103515625 or
                 (-5) ** intExpr(15) <>         -30517578125 or
                 (-5) ** intExpr(16) <>         152587890625 or
                 (-5) ** intExpr(17) <>        -762939453125 or
                 (-5) ** intExpr(18) <>        3814697265625 or
                 (-5) ** intExpr(19) <>      -19073486328125 or
                 (-5) ** intExpr(20) <>       95367431640625 or
                 (-5) ** intExpr(21) <>     -476837158203125 or
                 (-5) ** intExpr(22) <>     2384185791015625 or
                 (-5) ** intExpr(23) <>   -11920928955078125 or
                 (-5) ** intExpr(24) <>    59604644775390625 or
                 (-5) ** intExpr(25) <>  -298023223876953125 or
                 (-5) ** intExpr(26) <>  1490116119384765625 or
                 (-5) ** intExpr(27) <> -7450580596923828125 or
                 (-4) ** intExpr( 0) <>                    1 or
                 (-4) ** intExpr( 1) <>                   -4 or
                 (-4) ** intExpr( 2) <>                   16 or
                 (-4) ** intExpr( 3) <>                  -64 or
                 (-4) ** intExpr( 4) <>                  256 or
                 (-4) ** intExpr( 5) <>                -1024 or
                 (-4) ** intExpr(10) <>              1048576 or
                 (-4) ** intExpr(15) <>          -1073741824 or
                 (-4) ** intExpr(20) <>        1099511627776 or
                 (-4) ** intExpr(25) <>    -1125899906842624 or
                 (-4) ** intExpr(30) <>  1152921504606846976 or
                 (-4) ** intExpr(31) <> -4611686018427387904 or
                 (-3) ** intExpr( 0) <>                    1 or
                 (-3) ** intExpr( 1) <>                   -3 or
                 (-3) ** intExpr( 2) <>                    9 or
                 (-3) ** intExpr( 3) <>                  -27 or
                 (-3) ** intExpr( 4) <>                   81 or
                 (-3) ** intExpr( 5) <>                 -243 or
                 (-3) ** intExpr(10) <>                59049 or
                 (-3) ** intExpr(15) <>            -14348907 or
                 (-3) ** intExpr(20) <>           3486784401 or
                 (-3) ** intExpr(25) <>        -847288609443 or
                 (-3) ** intExpr(30) <>      205891132094649 or
                 (-3) ** intExpr(35) <>   -50031545098999707 or
                 (-3) ** intExpr(39) <> -4052555153018976267 or
                 (-2) ** intExpr( 0) <>                    1 or
                 (-2) ** intExpr( 1) <>                   -2 or
                 (-2) ** intExpr( 2) <>                    4 or
                 (-2) ** intExpr( 3) <>                   -8 or
                 (-2) ** intExpr( 4) <>                   16 or
                 (-2) ** intExpr( 5) <>                  -32 or
                 (-2) ** intExpr(10) <>                 1024 or
                 (-2) ** intExpr(15) <>               -32768 or
                 (-2) ** intExpr(16) <>                65536 or
                 (-2) ** intExpr(20) <>              1048576 or
                 (-2) ** intExpr(25) <>            -33554432 or
                 (-2) ** intExpr(30) <>           1073741824 or
                 (-2) ** intExpr(31) <>          -2147483648 or
                 (-2) ** intExpr(32) <>           4294967296 or
                 (-2) ** intExpr(35) <>         -34359738368 or
                 (-2) ** intExpr(40) <>        1099511627776 or
                 (-2) ** intExpr(45) <>      -35184372088832 or
                 (-2) ** intExpr(50) <>     1125899906842624 or
                 (-2) ** intExpr(55) <>   -36028797018963968 or
                 (-2) ** intExpr(60) <>  1152921504606846976 or
                 (-2) ** intExpr(61) <> -2305843009213693952 or
                 (-2) ** intExpr(62) <>  4611686018427387904 or
                 (-2) ** intExpr(63) <>            INT64_MIN or
                 (-1) ** intExpr(                  0) <>   1 or
                 (-1) ** intExpr(                  1) <>  -1 or
                 (-1) ** intExpr(                  2) <>   1 or
                 (-1) ** intExpr(                  3) <>  -1 or
                 (-1) ** intExpr(                 99) <>  -1 or
                 (-1) ** intExpr(                999) <>  -1 or
                 (-1) ** intExpr(          999999999) <>  -1 or
                 (-1) ** intExpr(         2147483647) <>  -1 or
                 (-1) ** intExpr(         2147483648) <>   1 or
                 (-1) ** intExpr(9223372036854775806) <>   1 or
                 (-1) ** intExpr(9223372036854775807) <>  -1 or
                   0  ** intExpr(                  0) <>   1 or
                   0  ** intExpr(                  1) <>   0 or
                   0  ** intExpr(                  2) <>   0 or
                   0  ** intExpr(                  3) <>   0 or
                   0  ** intExpr(                 99) <>   0 or
                   0  ** intExpr(                999) <>   0 or
                   0  ** intExpr(          999999999) <>   0 or
                   0  ** intExpr(         2147483647) <>   0 or
                   0  ** intExpr(         2147483648) <>   0 or
                   0  ** intExpr(9223372036854775806) <>   0 or
                   0  ** intExpr(9223372036854775807) <>   0 or
                   1  ** intExpr(                  0) <>   1 or
                   1  ** intExpr(                  1) <>   1 or
                   1  ** intExpr(                  2) <>   1 or
                   1  ** intExpr(                  3) <>   1 or
                   1  ** intExpr(                 99) <>   1 or
                   1  ** intExpr(                999) <>   1 or
                   1  ** intExpr(          999999999) <>   1 or
                   1  ** intExpr(         2147483647) <>   1 or
                   1  ** intExpr(         2147483648) <>   1 or
                   1  ** intExpr(9223372036854775806) <>   1 or
                   1  ** intExpr(9223372036854775807) <>   1 or
                   2  ** intExpr( 0) <>                    1 or
                   2  ** intExpr( 1) <>                    2 or
                   2  ** intExpr( 2) <>                    4 or
                   2  ** intExpr( 3) <>                    8 or
                   2  ** intExpr( 4) <>                   16 or
                   2  ** intExpr( 5) <>                   32 or
                   2  ** intExpr(10) <>                 1024 or
                   2  ** intExpr(15) <>                32768 or
                   2  ** intExpr(16) <>                65536 or
                   2  ** intExpr(20) <>              1048576 or
                   2  ** intExpr(25) <>             33554432 or
                   2  ** intExpr(30) <>           1073741824 or
                   2  ** intExpr(31) <>           2147483648 or
                   2  ** intExpr(32) <>           4294967296 or
                   2  ** intExpr(35) <>          34359738368 or
                   2  ** intExpr(40) <>        1099511627776 or
                   2  ** intExpr(45) <>       35184372088832 or
                   2  ** intExpr(50) <>     1125899906842624 or
                   2  ** intExpr(55) <>    36028797018963968 or
                   2  ** intExpr(60) <>  1152921504606846976 or
                   2  ** intExpr(61) <>  2305843009213693952 or
                   2  ** intExpr(62) <>  4611686018427387904 or
                   3  ** intExpr( 0) <>                    1 or
                   3  ** intExpr( 1) <>                    3 or
                   3  ** intExpr( 2) <>                    9 or
                   3  ** intExpr( 3) <>                   27 or
                   3  ** intExpr( 4) <>                   81 or
                   3  ** intExpr( 5) <>                  243 or
                   3  ** intExpr(10) <>                59049 or
                   3  ** intExpr(15) <>             14348907 or
                   3  ** intExpr(20) <>           3486784401 or
                   3  ** intExpr(25) <>         847288609443 or
                   3  ** intExpr(30) <>      205891132094649 or
                   3  ** intExpr(35) <>    50031545098999707 or
                   3  ** intExpr(39) <>  4052555153018976267 or
                   4  ** intExpr( 0) <>                    1 or
                   4  ** intExpr( 1) <>                    4 or
                   4  ** intExpr( 2) <>                   16 or
                   4  ** intExpr( 3) <>                   64 or
                   4  ** intExpr( 4) <>                  256 or
                   4  ** intExpr( 5) <>                 1024 or
                   4  ** intExpr(10) <>              1048576 or
                   4  ** intExpr(15) <>           1073741824 or
                   4  ** intExpr(20) <>        1099511627776 or
                   4  ** intExpr(25) <>     1125899906842624 or
                   4  ** intExpr(30) <>  1152921504606846976 or
                   4  ** intExpr(31) <>  4611686018427387904 or
                   5  ** intExpr( 0) <>                    1 or
                   5  ** intExpr( 1) <>                    5 or
                   5  ** intExpr( 2) <>                   25 or
                   5  ** intExpr( 3) <>                  125 or
                   5  ** intExpr( 4) <>                  625 or
                   5  ** intExpr( 5) <>                 3125 or
                   5  ** intExpr( 6) <>                15625 or
                   5  ** intExpr( 7) <>                78125 or
                   5  ** intExpr( 8) <>               390625 or
                   5  ** intExpr( 9) <>              1953125 or
                   5  ** intExpr(10) <>              9765625 or
                   5  ** intExpr(11) <>             48828125 or
                   5  ** intExpr(12) <>            244140625 or
                   5  ** intExpr(13) <>           1220703125 or
                   5  ** intExpr(14) <>           6103515625 or
                   5  ** intExpr(15) <>          30517578125 or
                   5  ** intExpr(16) <>         152587890625 or
                   5  ** intExpr(17) <>         762939453125 or
                   5  ** intExpr(18) <>        3814697265625 or
                   5  ** intExpr(19) <>       19073486328125 or
                   5  ** intExpr(20) <>       95367431640625 or
                   5  ** intExpr(21) <>      476837158203125 or
                   5  ** intExpr(22) <>     2384185791015625 or
                   5  ** intExpr(23) <>    11920928955078125 or
                   5  ** intExpr(24) <>    59604644775390625 or
                   5  ** intExpr(25) <>   298023223876953125 or
                   5  ** intExpr(26) <>  1490116119384765625 or
                   5  ** intExpr(27) <>  7450580596923828125 or
                  97  ** intExpr( 0) <>                    1 or
                  97  ** intExpr( 1) <>                   97 or
                  97  ** intExpr( 2) <>                 9409 or
                  97  ** intExpr( 3) <>               912673 or
                  97  ** intExpr( 4) <>             88529281 or
                  97  ** intExpr( 8) <>     7837433594376961 or
                  97  ** intExpr( 9) <>   760231058654565217 or
                 511  ** intExpr( 0) <>                    1 or
                 511  ** intExpr( 1) <>                  511 or
                 511  ** intExpr( 2) <>               261121 or
                 511  ** intExpr( 3) <>            133432831 or
                 511  ** intExpr( 4) <>          68184176641 or
                 511  ** intExpr( 5) <>       34842114263551 or
                 511  ** intExpr( 6) <>    17804320388674561 or
                 511  ** intExpr( 7) <>  9098007718612700671 or
                1448  ** intExpr( 0) <>                    1 or
                1448  ** intExpr( 1) <>                 1448 or
                1448  ** intExpr( 2) <>              2096704 or
                1448  ** intExpr( 3) <>           3036027392 or
                1448  ** intExpr( 4) <>        4396167663616 or
                1448  ** intExpr( 5) <>     6365650776915968 or
                1448  ** intExpr( 6) <>  9217462324974321664 or
                6208  ** intExpr( 0) <>                    1 or
                6208  ** intExpr( 1) <>                 6208 or
                6208  ** intExpr( 2) <>             38539264 or
                6208  ** intExpr( 3) <>         239251750912 or
                6208  ** intExpr( 4) <>     1485274869661696 or
                6208  ** intExpr( 5) <>  9220586390859808768 or
               32767  ** intExpr( 0) <>                    1 or
               32767  ** intExpr( 1) <>                32767 or
               32767  ** intExpr( 2) <>           1073676289 or
               32767  ** intExpr( 3) <>       35181150961663 or
               32767  ** intExpr( 4) <>  1152780773560811521 or
               32768  ** intExpr( 0) <>                    1 or
               32768  ** intExpr( 1) <>                32768 or
               32768  ** intExpr( 2) <>           1073741824 or
               32768  ** intExpr( 3) <>       35184372088832 or
               32768  ** intExpr( 4) <>  1152921504606846976 or
               55108  ** intExpr( 0) <>                    1 or
               55108  ** intExpr( 1) <>                55108 or
               55108  ** intExpr( 2) <>           3036891664 or
               55108  ** intExpr( 3) <>      167357025819712 or
               55108  ** intExpr( 4) <>  9222710978872688896 or
              123457  ** intExpr( 0) <>                    1 or
              123457  ** intExpr( 1) <>               123457 or
              123457  ** intExpr( 2) <>          15241630849 or
              123457  ** intExpr( 3) <>     1881686019724993 or
             1234577  ** intExpr( 0) <>                    1 or
             1234577  ** intExpr( 1) <>              1234577 or
             1234577  ** intExpr( 2) <>        1524180368929 or
             1234577  ** intExpr( 3) <>  1881718027331258033 or
             2097151  ** intExpr( 0) <>                    1 or
             2097151  ** intExpr( 1) <>              2097151 or
             2097151  ** intExpr( 2) <>        4398042316801 or
             2097151  ** intExpr( 3) <>  9223358842721533951 or
          2147483648  ** intExpr( 0) <>                    1 or
          2147483648  ** intExpr( 1) <>           2147483648 or
          2147483648  ** intExpr( 2) <>  4611686018427387904 or
          3037000499  ** intExpr( 0) <>                    1 or
          3037000499  ** intExpr( 1) <>           3037000499 or
          3037000499  ** intExpr( 2) <>  9223372030926249001 then
      writeln(" ***** Computing power with a constant base does not work correct.");
      okay := FALSE;
    end if;

    if  intExpr(-3037000499) ** intExpr( 0) <>                    1 or
        intExpr(-3037000499) ** intExpr( 1) <>          -3037000499 or
        intExpr(-3037000499) ** intExpr( 2) <>  9223372030926249001 or
        intExpr(-2147483648) ** intExpr( 0) <>                    1 or
        intExpr(-2147483648) ** intExpr( 1) <>          -2147483648 or
        intExpr(-2147483648) ** intExpr( 2) <>  4611686018427387904 or
        intExpr(   -2097152) ** intExpr( 0) <>                    1 or
        intExpr(   -2097152) ** intExpr( 1) <>             -2097152 or
        intExpr(   -2097152) ** intExpr( 2) <>        4398046511104 or
        intExpr(   -2097152) ** intExpr( 3) <>            INT64_MIN or
        intExpr(   -1234577) ** intExpr( 0) <>                    1 or
        intExpr(   -1234577) ** intExpr( 1) <>             -1234577 or
        intExpr(   -1234577) ** intExpr( 2) <>        1524180368929 or
        intExpr(   -1234577) ** intExpr( 3) <> -1881718027331258033 or
        intExpr(    -123457) ** intExpr( 0) <>                    1 or
        intExpr(    -123457) ** intExpr( 1) <>              -123457 or
        intExpr(    -123457) ** intExpr( 2) <>          15241630849 or
        intExpr(    -123457) ** intExpr( 3) <>    -1881686019724993 or
        intExpr(     -55108) ** intExpr( 0) <>                    1 or
        intExpr(     -55108) ** intExpr( 1) <>               -55108 or
        intExpr(     -55108) ** intExpr( 2) <>           3036891664 or
        intExpr(     -55108) ** intExpr( 3) <>     -167357025819712 or
        intExpr(     -55108) ** intExpr( 4) <>  9222710978872688896 or
        intExpr(     -32768) ** intExpr( 0) <>                    1 or
        intExpr(     -32768) ** intExpr( 1) <>               -32768 or
        intExpr(     -32768) ** intExpr( 2) <>           1073741824 or
        intExpr(     -32768) ** intExpr( 3) <>      -35184372088832 or
        intExpr(     -32768) ** intExpr( 4) <>  1152921504606846976 or
        intExpr(     -32767) ** intExpr( 0) <>                    1 or
        intExpr(     -32767) ** intExpr( 1) <>               -32767 or
        intExpr(     -32767) ** intExpr( 2) <>           1073676289 or
        intExpr(     -32767) ** intExpr( 3) <>      -35181150961663 or
        intExpr(     -32767) ** intExpr( 4) <>  1152780773560811521 or
        intExpr(      -6208) ** intExpr( 0) <>                    1 or
        intExpr(      -6208) ** intExpr( 1) <>                -6208 or
        intExpr(      -6208) ** intExpr( 2) <>             38539264 or
        intExpr(      -6208) ** intExpr( 3) <>        -239251750912 or
        intExpr(      -6208) ** intExpr( 4) <>     1485274869661696 or
        intExpr(      -6208) ** intExpr( 5) <> -9220586390859808768 or
        intExpr(      -1448) ** intExpr( 0) <>                    1 or
        intExpr(      -1448) ** intExpr( 1) <>                -1448 or
        intExpr(      -1448) ** intExpr( 2) <>              2096704 or
        intExpr(      -1448) ** intExpr( 3) <>          -3036027392 or
        intExpr(      -1448) ** intExpr( 4) <>        4396167663616 or
        intExpr(      -1448) ** intExpr( 5) <>    -6365650776915968 or
        intExpr(      -1448) ** intExpr( 6) <>  9217462324974321664 or
        intExpr(       -512) ** intExpr( 0) <>                    1 or
        intExpr(       -512) ** intExpr( 1) <>                 -512 or
        intExpr(       -512) ** intExpr( 2) <>               262144 or
        intExpr(       -512) ** intExpr( 3) <>           -134217728 or
        intExpr(       -512) ** intExpr( 4) <>          68719476736 or
        intExpr(       -512) ** intExpr( 5) <>      -35184372088832 or
        intExpr(       -512) ** intExpr( 6) <>    18014398509481984 or
        intExpr(       -512) ** intExpr( 7) <>            INT64_MIN or
        intExpr(        -97) ** intExpr( 0) <>                    1 or
        intExpr(        -97) ** intExpr( 1) <>                  -97 or
        intExpr(        -97) ** intExpr( 2) <>                 9409 or
        intExpr(        -97) ** intExpr( 3) <>              -912673 or
        intExpr(        -97) ** intExpr( 4) <>             88529281 or
        intExpr(        -97) ** intExpr( 8) <>     7837433594376961 or
        intExpr(        -97) ** intExpr( 9) <>  -760231058654565217 or
        intExpr(         -5) ** intExpr( 0) <>                    1 or
        intExpr(         -5) ** intExpr( 1) <>                   -5 or
        intExpr(         -5) ** intExpr( 2) <>                   25 or
        intExpr(         -5) ** intExpr( 3) <>                 -125 or
        intExpr(         -5) ** intExpr( 4) <>                  625 or
        intExpr(         -5) ** intExpr( 5) <>                -3125 or
        intExpr(         -5) ** intExpr( 6) <>                15625 or
        intExpr(         -5) ** intExpr( 7) <>               -78125 or
        intExpr(         -5) ** intExpr( 8) <>               390625 or
        intExpr(         -5) ** intExpr( 9) <>             -1953125 or
        intExpr(         -5) ** intExpr(10) <>              9765625 or
        intExpr(         -5) ** intExpr(11) <>            -48828125 or
        intExpr(         -5) ** intExpr(12) <>            244140625 or
        intExpr(         -5) ** intExpr(13) <>          -1220703125 or
        intExpr(         -5) ** intExpr(14) <>           6103515625 or
        intExpr(         -5) ** intExpr(15) <>         -30517578125 or
        intExpr(         -5) ** intExpr(16) <>         152587890625 or
        intExpr(         -5) ** intExpr(17) <>        -762939453125 or
        intExpr(         -5) ** intExpr(18) <>        3814697265625 or
        intExpr(         -5) ** intExpr(19) <>      -19073486328125 or
        intExpr(         -5) ** intExpr(20) <>       95367431640625 or
        intExpr(         -5) ** intExpr(21) <>     -476837158203125 or
        intExpr(         -5) ** intExpr(22) <>     2384185791015625 or
        intExpr(         -5) ** intExpr(23) <>   -11920928955078125 or
        intExpr(         -5) ** intExpr(24) <>    59604644775390625 or
        intExpr(         -5) ** intExpr(25) <>  -298023223876953125 or
        intExpr(         -5) ** intExpr(26) <>  1490116119384765625 or
        intExpr(         -5) ** intExpr(27) <> -7450580596923828125 or
        intExpr(         -4) ** intExpr( 0) <>                    1 or
        intExpr(         -4) ** intExpr( 1) <>                   -4 or
        intExpr(         -4) ** intExpr( 2) <>                   16 or
        intExpr(         -4) ** intExpr( 3) <>                  -64 or
        intExpr(         -4) ** intExpr( 4) <>                  256 or
        intExpr(         -4) ** intExpr( 5) <>                -1024 or
        intExpr(         -4) ** intExpr(10) <>              1048576 or
        intExpr(         -4) ** intExpr(15) <>          -1073741824 or
        intExpr(         -4) ** intExpr(20) <>        1099511627776 or
        intExpr(         -4) ** intExpr(25) <>    -1125899906842624 or
        intExpr(         -4) ** intExpr(30) <>  1152921504606846976 or
        intExpr(         -4) ** intExpr(31) <> -4611686018427387904 or
        intExpr(         -3) ** intExpr( 0) <>                    1 or
        intExpr(         -3) ** intExpr( 1) <>                   -3 or
        intExpr(         -3) ** intExpr( 2) <>                    9 or
        intExpr(         -3) ** intExpr( 3) <>                  -27 or
        intExpr(         -3) ** intExpr( 4) <>                   81 or
        intExpr(         -3) ** intExpr( 5) <>                 -243 or
        intExpr(         -3) ** intExpr(10) <>                59049 or
        intExpr(         -3) ** intExpr(15) <>            -14348907 or
        intExpr(         -3) ** intExpr(20) <>           3486784401 or
        intExpr(         -3) ** intExpr(25) <>        -847288609443 or
        intExpr(         -3) ** intExpr(30) <>      205891132094649 or
        intExpr(         -3) ** intExpr(35) <>   -50031545098999707 or
        intExpr(         -3) ** intExpr(39) <> -4052555153018976267 or
        intExpr(         -2) ** intExpr( 0) <>                    1 or
        intExpr(         -2) ** intExpr( 1) <>                   -2 or
        intExpr(         -2) ** intExpr( 2) <>                    4 or
        intExpr(         -2) ** intExpr( 3) <>                   -8 or
        intExpr(         -2) ** intExpr( 4) <>                   16 or
        intExpr(         -2) ** intExpr( 5) <>                  -32 or
        intExpr(         -2) ** intExpr(10) <>                 1024 or
        intExpr(         -2) ** intExpr(15) <>               -32768 or
        intExpr(         -2) ** intExpr(16) <>                65536 or
        intExpr(         -2) ** intExpr(20) <>              1048576 or
        intExpr(         -2) ** intExpr(25) <>            -33554432 or
        intExpr(         -2) ** intExpr(30) <>           1073741824 or
        intExpr(         -2) ** intExpr(31) <>          -2147483648 or
        intExpr(         -2) ** intExpr(32) <>           4294967296 or
        intExpr(         -2) ** intExpr(35) <>         -34359738368 or
        intExpr(         -2) ** intExpr(40) <>        1099511627776 or
        intExpr(         -2) ** intExpr(45) <>      -35184372088832 or
        intExpr(         -2) ** intExpr(50) <>     1125899906842624 or
        intExpr(         -2) ** intExpr(55) <>   -36028797018963968 or
        intExpr(         -2) ** intExpr(60) <>  1152921504606846976 or
        intExpr(         -2) ** intExpr(61) <> -2305843009213693952 or
        intExpr(         -2) ** intExpr(62) <>  4611686018427387904 or
        intExpr(         -2) ** intExpr(63) <>            INT64_MIN or
        intExpr(         -1) ** intExpr(                  0) <>   1 or
        intExpr(         -1) ** intExpr(                  1) <>  -1 or
        intExpr(         -1) ** intExpr(                  2) <>   1 or
        intExpr(         -1) ** intExpr(                  3) <>  -1 or
        intExpr(         -1) ** intExpr(                 99) <>  -1 or
        intExpr(         -1) ** intExpr(                999) <>  -1 or
        intExpr(         -1) ** intExpr(          999999999) <>  -1 or
        intExpr(         -1) ** intExpr(         2147483647) <>  -1 or
        intExpr(         -1) ** intExpr(         2147483648) <>   1 or
        intExpr(         -1) ** intExpr(9223372036854775806) <>   1 or
        intExpr(         -1) ** intExpr(9223372036854775807) <>  -1 or
        intExpr(          0) ** intExpr(                  0) <>   1 or
        intExpr(          0) ** intExpr(                  1) <>   0 or
        intExpr(          0) ** intExpr(                  2) <>   0 or
        intExpr(          0) ** intExpr(                  3) <>   0 or
        intExpr(          0) ** intExpr(                 99) <>   0 or
        intExpr(          0) ** intExpr(                999) <>   0 or
        intExpr(          0) ** intExpr(          999999999) <>   0 or
        intExpr(          0) ** intExpr(         2147483647) <>   0 or
        intExpr(          0) ** intExpr(         2147483648) <>   0 or
        intExpr(          0) ** intExpr(9223372036854775806) <>   0 or
        intExpr(          0) ** intExpr(9223372036854775807) <>   0 or
        intExpr(          1) ** intExpr(                  0) <>   1 or
        intExpr(          1) ** intExpr(                  1) <>   1 or
        intExpr(          1) ** intExpr(                  2) <>   1 or
        intExpr(          1) ** intExpr(                  3) <>   1 or
        intExpr(          1) ** intExpr(                 99) <>   1 or
        intExpr(          1) ** intExpr(                999) <>   1 or
        intExpr(          1) ** intExpr(          999999999) <>   1 or
        intExpr(          1) ** intExpr(         2147483647) <>   1 or
        intExpr(          1) ** intExpr(         2147483648) <>   1 or
        intExpr(          1) ** intExpr(9223372036854775806) <>   1 or
        intExpr(          1) ** intExpr(9223372036854775807) <>   1 or
        intExpr(          2) ** intExpr( 0) <>                    1 or
        intExpr(          2) ** intExpr( 1) <>                    2 or
        intExpr(          2) ** intExpr( 2) <>                    4 or
        intExpr(          2) ** intExpr( 3) <>                    8 or
        intExpr(          2) ** intExpr( 4) <>                   16 or
        intExpr(          2) ** intExpr( 5) <>                   32 or
        intExpr(          2) ** intExpr(10) <>                 1024 or
        intExpr(          2) ** intExpr(15) <>                32768 or
        intExpr(          2) ** intExpr(16) <>                65536 or
        intExpr(          2) ** intExpr(20) <>              1048576 or
        intExpr(          2) ** intExpr(25) <>             33554432 or
        intExpr(          2) ** intExpr(30) <>           1073741824 or
        intExpr(          2) ** intExpr(31) <>           2147483648 or
        intExpr(          2) ** intExpr(32) <>           4294967296 or
        intExpr(          2) ** intExpr(35) <>          34359738368 or
        intExpr(          2) ** intExpr(40) <>        1099511627776 or
        intExpr(          2) ** intExpr(45) <>       35184372088832 or
        intExpr(          2) ** intExpr(50) <>     1125899906842624 or
        intExpr(          2) ** intExpr(55) <>    36028797018963968 or
        intExpr(          2) ** intExpr(60) <>  1152921504606846976 or
        intExpr(          2) ** intExpr(61) <>  2305843009213693952 or
        intExpr(          2) ** intExpr(62) <>  4611686018427387904 or
        intExpr(          3) ** intExpr( 0) <>                    1 or
        intExpr(          3) ** intExpr( 1) <>                    3 or
        intExpr(          3) ** intExpr( 2) <>                    9 or
        intExpr(          3) ** intExpr( 3) <>                   27 or
        intExpr(          3) ** intExpr( 4) <>                   81 or
        intExpr(          3) ** intExpr( 5) <>                  243 or
        intExpr(          3) ** intExpr(10) <>                59049 or
        intExpr(          3) ** intExpr(15) <>             14348907 or
        intExpr(          3) ** intExpr(20) <>           3486784401 or
        intExpr(          3) ** intExpr(25) <>         847288609443 or
        intExpr(          3) ** intExpr(30) <>      205891132094649 or
        intExpr(          3) ** intExpr(35) <>    50031545098999707 or
        intExpr(          3) ** intExpr(39) <>  4052555153018976267 or
        intExpr(          4) ** intExpr( 0) <>                    1 or
        intExpr(          4) ** intExpr( 1) <>                    4 or
        intExpr(          4) ** intExpr( 2) <>                   16 or
        intExpr(          4) ** intExpr( 3) <>                   64 or
        intExpr(          4) ** intExpr( 4) <>                  256 or
        intExpr(          4) ** intExpr( 5) <>                 1024 or
        intExpr(          4) ** intExpr(10) <>              1048576 or
        intExpr(          4) ** intExpr(15) <>           1073741824 or
        intExpr(          4) ** intExpr(20) <>        1099511627776 or
        intExpr(          4) ** intExpr(25) <>     1125899906842624 or
        intExpr(          4) ** intExpr(30) <>  1152921504606846976 or
        intExpr(          4) ** intExpr(31) <>  4611686018427387904 or
        intExpr(          5) ** intExpr( 0) <>                    1 or
        intExpr(          5) ** intExpr( 1) <>                    5 or
        intExpr(          5) ** intExpr( 2) <>                   25 or
        intExpr(          5) ** intExpr( 3) <>                  125 or
        intExpr(          5) ** intExpr( 4) <>                  625 or
        intExpr(          5) ** intExpr( 5) <>                 3125 or
        intExpr(          5) ** intExpr( 6) <>                15625 or
        intExpr(          5) ** intExpr( 7) <>                78125 or
        intExpr(          5) ** intExpr( 8) <>               390625 or
        intExpr(          5) ** intExpr( 9) <>              1953125 or
        intExpr(          5) ** intExpr(10) <>              9765625 or
        intExpr(          5) ** intExpr(11) <>             48828125 or
        intExpr(          5) ** intExpr(12) <>            244140625 or
        intExpr(          5) ** intExpr(13) <>           1220703125 or
        intExpr(          5) ** intExpr(14) <>           6103515625 or
        intExpr(          5) ** intExpr(15) <>          30517578125 or
        intExpr(          5) ** intExpr(16) <>         152587890625 or
        intExpr(          5) ** intExpr(17) <>         762939453125 or
        intExpr(          5) ** intExpr(18) <>        3814697265625 or
        intExpr(          5) ** intExpr(19) <>       19073486328125 or
        intExpr(          5) ** intExpr(20) <>       95367431640625 or
        intExpr(          5) ** intExpr(21) <>      476837158203125 or
        intExpr(          5) ** intExpr(22) <>     2384185791015625 or
        intExpr(          5) ** intExpr(23) <>    11920928955078125 or
        intExpr(          5) ** intExpr(24) <>    59604644775390625 or
        intExpr(          5) ** intExpr(25) <>   298023223876953125 or
        intExpr(          5) ** intExpr(26) <>  1490116119384765625 or
        intExpr(          5) ** intExpr(27) <>  7450580596923828125 or
        intExpr(         97) ** intExpr( 0) <>                    1 or
        intExpr(         97) ** intExpr( 1) <>                   97 or
        intExpr(         97) ** intExpr( 2) <>                 9409 or
        intExpr(         97) ** intExpr( 3) <>               912673 or
        intExpr(         97) ** intExpr( 4) <>             88529281 or
        intExpr(         97) ** intExpr( 8) <>     7837433594376961 or
        intExpr(         97) ** intExpr( 9) <>   760231058654565217 or
        intExpr(        511) ** intExpr( 0) <>                    1 or
        intExpr(        511) ** intExpr( 1) <>                  511 or
        intExpr(        511) ** intExpr( 2) <>               261121 or
        intExpr(        511) ** intExpr( 3) <>            133432831 or
        intExpr(        511) ** intExpr( 4) <>          68184176641 or
        intExpr(        511) ** intExpr( 5) <>       34842114263551 or
        intExpr(        511) ** intExpr( 6) <>    17804320388674561 or
        intExpr(        511) ** intExpr( 7) <>  9098007718612700671 or
        intExpr(       1448) ** intExpr( 0) <>                    1 or
        intExpr(       1448) ** intExpr( 1) <>                 1448 or
        intExpr(       1448) ** intExpr( 2) <>              2096704 or
        intExpr(       1448) ** intExpr( 3) <>           3036027392 or
        intExpr(       1448) ** intExpr( 4) <>        4396167663616 or
        intExpr(       1448) ** intExpr( 5) <>     6365650776915968 or
        intExpr(       1448) ** intExpr( 6) <>  9217462324974321664 or
        intExpr(       6208) ** intExpr( 0) <>                    1 or
        intExpr(       6208) ** intExpr( 1) <>                 6208 or
        intExpr(       6208) ** intExpr( 2) <>             38539264 or
        intExpr(       6208) ** intExpr( 3) <>         239251750912 or
        intExpr(       6208) ** intExpr( 4) <>     1485274869661696 or
        intExpr(       6208) ** intExpr( 5) <>  9220586390859808768 or
        intExpr(      32767) ** intExpr( 0) <>                    1 or
        intExpr(      32767) ** intExpr( 1) <>                32767 or
        intExpr(      32767) ** intExpr( 2) <>           1073676289 or
        intExpr(      32767) ** intExpr( 3) <>       35181150961663 or
        intExpr(      32767) ** intExpr( 4) <>  1152780773560811521 or
        intExpr(      32768) ** intExpr( 0) <>                    1 or
        intExpr(      32768) ** intExpr( 1) <>                32768 or
        intExpr(      32768) ** intExpr( 2) <>           1073741824 or
        intExpr(      32768) ** intExpr( 3) <>       35184372088832 or
        intExpr(      32768) ** intExpr( 4) <>  1152921504606846976 or
        intExpr(      55108) ** intExpr( 0) <>                    1 or
        intExpr(      55108) ** intExpr( 1) <>                55108 or
        intExpr(      55108) ** intExpr( 2) <>           3036891664 or
        intExpr(      55108) ** intExpr( 3) <>      167357025819712 or
        intExpr(      55108) ** intExpr( 4) <>  9222710978872688896 or
        intExpr(     123457) ** intExpr( 0) <>                    1 or
        intExpr(     123457) ** intExpr( 1) <>               123457 or
        intExpr(     123457) ** intExpr( 2) <>          15241630849 or
        intExpr(     123457) ** intExpr( 3) <>     1881686019724993 or
        intExpr(    1234577) ** intExpr( 0) <>                    1 or
        intExpr(    1234577) ** intExpr( 1) <>              1234577 or
        intExpr(    1234577) ** intExpr( 2) <>        1524180368929 or
        intExpr(    1234577) ** intExpr( 3) <>  1881718027331258033 or
        intExpr(    2097151) ** intExpr( 0) <>                    1 or
        intExpr(    2097151) ** intExpr( 1) <>              2097151 or
        intExpr(    2097151) ** intExpr( 2) <>        4398042316801 or
        intExpr(    2097151) ** intExpr( 3) <>  9223358842721533951 or
        intExpr( 2147483648) ** intExpr( 0) <>                    1 or
        intExpr( 2147483648) ** intExpr( 1) <>           2147483648 or
        intExpr( 2147483648) ** intExpr( 2) <>  4611686018427387904 or
        intExpr( 3037000499) ** intExpr( 0) <>                    1 or
        intExpr( 3037000499) ** intExpr( 1) <>           3037000499 or
        intExpr( 3037000499) ** intExpr( 2) <>  9223372030926249001 then
      writeln(" ***** Computing power with two expressions does not work correct.");
      okay := FALSE;
    end if;

    if intExpr(7) **  0 <>                   1 or
       intExpr(7) **  1 <>                   7 or
       intExpr(7) **  2 <>                  49 or
       intExpr(7) **  3 <>                 343 or
       intExpr(7) **  4 <>                2401 or
       intExpr(7) **  5 <>               16807 or
       intExpr(7) **  6 <>              117649 or
       intExpr(7) **  7 <>              823543 or
       intExpr(7) **  8 <>             5764801 or
       intExpr(7) **  9 <>            40353607 or
       intExpr(7) ** 10 <>           282475249 or
       intExpr(7) ** 11 <>          1977326743 or
       intExpr(7) ** 12 <>         13841287201 or
       intExpr(7) ** 13 <>         96889010407 or
       intExpr(7) ** 14 <>        678223072849 or
       intExpr(7) ** 15 <>       4747561509943 or
       intExpr(7) ** 16 <>      33232930569601 or
       intExpr(7) ** 17 <>     232630513987207 or
       intExpr(7) ** 18 <>    1628413597910449 or
       intExpr(7) ** 19 <>   11398895185373143 or
       intExpr(7) ** 20 <>   79792266297612001 or
       intExpr(7) ** 21 <>  558545864083284007 or
       intExpr(7) ** 22 <> 3909821048582988049 then
      writeln(" ***** Computing power of 7 with exponents up to 22 does not work correct.");
      okay := FALSE;
    end if;

    if intExpr(11) **  0 <>                   1 or
       intExpr(11) **  1 <>                  11 or
       intExpr(11) **  2 <>                 121 or
       intExpr(11) **  3 <>                1331 or
       intExpr(11) **  4 <>               14641 or
       intExpr(11) **  5 <>              161051 or
       intExpr(11) **  6 <>             1771561 or
       intExpr(11) **  7 <>            19487171 or
       intExpr(11) **  8 <>           214358881 or
       intExpr(11) **  9 <>          2357947691 or
       intExpr(11) ** 10 <>         25937424601 or
       intExpr(11) ** 11 <>        285311670611 or
       intExpr(11) ** 12 <>       3138428376721 or
       intExpr(11) ** 13 <>      34522712143931 or
       intExpr(11) ** 14 <>     379749833583241 or
       intExpr(11) ** 15 <>    4177248169415651 or
       intExpr(11) ** 16 <>   45949729863572161 or
       intExpr(11) ** 17 <>  505447028499293771 or
       intExpr(11) ** 18 <> 5559917313492231481 then
      writeln(" ***** Computing power of 11 with exponents up to 18 does not work correct.");
      okay := FALSE;
    end if;

(*
    if  not raisesNumericError((-3037000500) **  2) or
        not raisesNumericError((-3037000499) **  3) or
        not raisesNumericError((-2147483648) **  3) or
        not raisesNumericError(   (-2097153) **  3) or
        not raisesNumericError(   (-2097152) **  4) or
        not raisesNumericError(   (-2097151) **  4) or
        not raisesNumericError(   (-1234577) **  4) or
        not raisesNumericError(    (-123457) **  4) or
        not raisesNumericError(     (-55109) **  4) or
        not raisesNumericError(     (-55108) **  5) or
        not raisesNumericError(     (-32768) **  5) or
        not raisesNumericError(     (-32767) **  5) or
        not raisesNumericError(      (-6209) **  5) or
        not raisesNumericError(      (-6208) **  6) or
        not raisesNumericError(      (-1449) **  6) or
        not raisesNumericError(      (-1448) **  7) or
        not raisesNumericError(       (-513) **  7) or
        not raisesNumericError(       (-512) **  8) or
        not raisesNumericError(       (-511) **  8) or
        not raisesNumericError(        (-97) ** 10) or
        not raisesNumericError(         (-3) ** 40) or
        not raisesNumericError(         (-2) ** 64) or
        not raisesNumericError(           2  ** 63) or
        not raisesNumericError(           3  ** 40) or
        not raisesNumericError(          97  ** 10) or
        not raisesNumericError(         511  **  8) or
        not raisesNumericError(         512  **  7) or
        not raisesNumericError(         513  **  7) or
        not raisesNumericError(        1448  **  7) or
        not raisesNumericError(        1449  **  6) or
        not raisesNumericError(        6208  **  6) or
        not raisesNumericError(        6209  **  5) or
        not raisesNumericError(       32767  **  5) or
        not raisesNumericError(       32768  **  5) or
        not raisesNumericError(       55108  **  5) or
        not raisesNumericError(       55109  **  4) or
        not raisesNumericError(      123457  **  4) or
        not raisesNumericError(     1234577  **  4) or
        not raisesNumericError(     2097151  **  4) or
        not raisesNumericError(     2097152  **  3) or
        not raisesNumericError(     2097153  **  3) or
        not raisesNumericError(  2147483648  **  3) or
        not raisesNumericError(  3037000499  **  3) or
        not raisesNumericError(  3037000500  **  2) then
      writeln(" ***** Overflow when computing power does not raise NUMERIC_ERROR.");
      okay := FALSE;
    end if;
*)

    if okay then
      writeln("Power works correct for selected values.");
    end if;
  end func;


const proc: check_abs is func
  local
    var boolean: okay is TRUE;
  begin
    if  abs(-9223372036854775807) <> 9223372036854775807 or
        abs(         -2147483648) <>          2147483648 or
        abs(         -2147483647) <>          2147483647 or
        abs(                  -1) <>                   1 or
        abs(                   0) <>                   0 or
        abs(                   1) <>                   1 or
        abs(          2147483647) <>          2147483647 or
        abs(          2147483648) <>          2147483648 or
        abs( 9223372036854775807) <> 9223372036854775807 then
      writeln("The integer abs function does not work correct.");
      okay := FALSE;
    end if;

    if okay then
      writeln("The integer abs function works correct.");
    else
      writeln(" ***** The integer abs function does not work correct.");
      writeln;
    end if;
  end func;


const proc: check_sqrt is func
  local
    var boolean: okay is TRUE;
    var integer: number is 0;
    var integer: sqrt_num is 0;
    var integer: count is 0;
  begin
    okay := TRUE;
    for number range 0 to 1000 do
      sqrt_num := sqrt(number);
      if sqrt_num * sqrt_num > number or
          (sqrt_num + 1) * (sqrt_num + 1) <= number then
        write("sqrt(");
        write(number);
        write(") = ");
        write(sqrt_num);
        writeln(" is NOT OKAY");
        okay := FALSE;
      end if;
    end for;
    if okay then
      writeln("Integer sqrt is correct for values between 0 and 1000.");
    end if;
    okay := TRUE;
    for count range 1 to 10000 do
      number := rand(0, 2147395599);
      sqrt_num := sqrt(number);
      if sqrt_num * sqrt_num > number or
          (sqrt_num + 1) * (sqrt_num + 1) <= number then
        write("sqrt(");
        write(number);
        write(") = ");
        write(sqrt_num);
        writeln(" is NOT OKAY");
        okay := FALSE;
      end if;
    end for;
    for count range 1 to 1000 do
      number := rand(2147395600, 2147483647);
      sqrt_num := sqrt(number);
      if sqrt_num <> 46340 then
        write("sqrt(");
        write(number);
        write(") = ");
        write(sqrt_num);
        writeln(" is NOT OKAY");
        okay := FALSE;
      end if;
    end for;
    if okay then
      writeln("Integer sqrt is correct for 11000 random values.");
    end if;
  end func;


const proc: check_log2 is func
  local
    var boolean: okay is TRUE;
    var boolean: okay2 is TRUE;
    var integer: number is 0;
    var integer: power_of_two is 0;
    var integer: counter is 0;
    var integer: log2_arg is 0;
    var integer: log2_num is 0;
  begin
    if  log2(                  0) <>  -1 or
        log2(                  1) <>   0 or
        log2(                  2) <>   1 or
        log2(                  3) <>   1 or
        log2(                  4) <>   2 or
        log2(                  5) <>   2 or
        log2(                  6) <>   2 or
        log2(                  7) <>   2 or
        log2(                  8) <>   3 or
        log2(                  9) <>   3 or
        log2(                 10) <>   3 or
        log2(                 15) <>   3 or
        log2(                 16) <>   4 or
        log2(                 25) <>   4 or
        log2(                 31) <>   4 or
        log2(                 32) <>   5 or
        log2(                 50) <>   5 or
        log2(                 63) <>   5 or
        log2(                 64) <>   6 or
        log2(                 71) <>   6 or
        log2(                127) <>   6 or
        log2(                128) <>   7 or
        log2(                243) <>   7 or
        log2(                255) <>   7 or
        log2(                256) <>   8 or
        log2(                467) <>   8 or
        log2(                511) <>   8 or
        log2(                512) <>   9 or
        log2(                873) <>   9 or
        log2(               1023) <>   9 or
        log2(               1024) <>  10 or
        log2(               1715) <>  10 or
        log2(               2047) <>  10 or
        log2(               2048) <>  11 or
        log2(               3761) <>  11 or
        log2(               4095) <>  11 or
        log2(               4096) <>  12 or
        log2(               5965) <>  12 or
        log2(               8191) <>  12 or
        log2(               8192) <>  13 or
        log2(              10445) <>  13 or
        log2(              16383) <>  13 or
        log2(              16384) <>  14 or
        log2(              22490) <>  14 or
        log2(              32767) <>  14 or
        log2(              32768) <>  15 or
        log2(              46524) <>  15 or
        log2(              65535) <>  15 or
        log2(              65536) <>  16 or
        log2(             106275) <>  16 or
        log2(             131071) <>  16 or
        log2(             131072) <>  17 or
        log2(             206206) <>  17 or
        log2(             262143) <>  17 or
        log2(             262144) <>  18 or
        log2(             415694) <>  18 or
        log2(             524287) <>  18 or
        log2(             524288) <>  19 or
        log2(             923667) <>  19 or
        log2(            1048575) <>  19 or
        log2(            1048576) <>  20 or
        log2(            1430124) <>  20 or
        log2(            2097151) <>  20 or
        log2(            2097152) <>  21 or
        log2(            3297211) <>  21 or
        log2(            4194303) <>  21 or
        log2(            4194304) <>  22 or
        log2(            5622078) <>  22 or
        log2(            8388607) <>  22 or
        log2(            8388608) <>  23 or
        log2(           11404725) <>  23 or
        log2(           16777215) <>  23 or
        log2(           16777216) <>  24 or
        log2(           23839458) <>  24 or
        log2(           33554431) <>  24 or
        log2(           33554432) <>  25 or
        log2(           51314883) <>  25 or
        log2(           67108863) <>  25 or
        log2(           67108864) <>  26 or
        log2(          118996825) <>  26 or
        log2(          134217727) <>  26 or
        log2(          134217728) <>  27 or
        log2(          226885284) <>  27 or
        log2(          268435455) <>  27 or
        log2(          268435456) <>  28 or
        log2(          374980260) <>  28 or
        log2(          536870911) <>  28 or
        log2(          536870912) <>  29 or
        log2(          697499480) <>  29 or
        log2(         1073741823) <>  29 or
        log2(         1073741824) <>  30 or
        log2(         1597096129) <>  30 or
        log2(         2147483647) <>  30 or
        log2(         2147483648) <>  31 or
        log2(         3073770207) <>  31 or
        log2(         4294967295) <>  31 or
        log2(         4294967296) <>  32 or
        log2(         6469698993) <>  32 or
        log2(         8589934591) <>  32 or
        log2(         8589934592) <>  33 or
        log2(        13650611573) <>  33 or
        log2(        17179869183) <>  33 or
        log2(        17179869184) <>  34 or
        log2(        25287317515) <>  34 or
        log2(        34359738367) <>  34 or
        log2(        34359738368) <>  35 or
        log2(        34937365876) <>  35 or
        log2(        68719476735) <>  35 or
        log2(        68719476736) <>  36 or
        log2(       130647586224) <>  36 or
        log2(       137438953471) <>  36 or
        log2(       137438953472) <>  37 or
        log2(       237256050880) <>  37 or
        log2(       274877906943) <>  37 or
        log2(       274877906944) <>  38 or
        log2(       421334752930) <>  38 or
        log2(       549755813887) <>  38 or
        log2(       549755813888) <>  39 or
        log2(       831060064087) <>  39 or
        log2(      1099511627775) <>  39 or
        log2(      1099511627776) <>  40 or
        log2(      1872306393824) <>  40 or
        log2(      2199023255551) <>  40 or
        log2(      2199023255552) <>  41 or
        log2(      3817804165435) <>  41 or
        log2(      4398046511103) <>  41 or
        log2(      4398046511104) <>  42 or
        log2(      4470677607017) <>  42 or
        log2(      8796093022207) <>  42 or
        log2(      8796093022208) <>  43 or
        log2(     10425849001579) <>  43 or
        log2(     17592186044415) <>  43 or
        log2(     17592186044416) <>  44 or
        log2(     19482147609919) <>  44 or
        log2(     35184372088831) <>  44 or
        log2(     35184372088832) <>  45 or
        log2(     66834682939110) <>  45 or
        log2(     70368744177663) <>  45 or
        log2(     70368744177664) <>  46 or
        log2(     82108268360545) <>  46 or
        log2(    140737488355327) <>  46 or
        log2(    140737488355328) <>  47 or
        log2(    206038244745902) <>  47 or
        log2(    281474976710655) <>  47 or
        log2(    281474976710656) <>  48 or
        log2(    544184170812622) <>  48 or
        log2(    562949953421311) <>  48 or
        log2(    562949953421312) <>  49 or
        log2(    603954099898818) <>  49 or
        log2(   1125899906842623) <>  49 or
        log2(   1125899906842624) <>  50 or
        log2(   1511254381298056) <>  50 or
        log2(   2251799813685247) <>  50 or
        log2(   2251799813685248) <>  51 or
        log2(   2421662232362017) <>  51 or
        log2(   4503599627370495) <>  51 or
        log2(   4503599627370496) <>  52 or
        log2(   5024025365870990) <>  52 or
        log2(   9007199254740991) <>  52 or
        log2(   9007199254740992) <>  53 or
        log2(  16073745370364365) <>  53 or
        log2(  18014398509481983) <>  53 or
        log2(  18014398509481984) <>  54 or
        log2(  24311821029932255) <>  54 or
        log2(  36028797018963967) <>  54 or
        log2(  36028797018963968) <>  55 or
        log2(  56759843666346693) <>  55 or
        log2(  72057594037927935) <>  55 or
        log2(  72057594037927936) <>  56 or
        log2( 113417824017025917) <>  56 or
        log2( 144115188075855871) <>  56 or
        log2( 144115188075855872) <>  57 or
        log2( 176271357130037000) <>  57 or
        log2( 288230376151711743) <>  57 or
        log2( 288230376151711744) <>  58 or
        log2( 497522024285611367) <>  58 or
        log2( 576460752303423487) <>  58 or
        log2( 576460752303423488) <>  59 or
        log2( 644824263403665048) <>  59 or
        log2(1152921504606846975) <>  59 or
        log2(1152921504606846976) <>  60 or
        log2(2059329953095273116) <>  60 or
        log2(2305843009213693951) <>  60 or
        log2(2305843009213693952) <>  61 or
        log2(4164578334614561140) <>  61 or
        log2(4611686018427387903) <>  61 or
        log2(4611686018427387904) <>  62 or
        log2(5807647918387067678) <>  62 or
        log2(9223372036854775807) <>  62 then
      writeln("The integer log2 function does not work correct.");
      okay := FALSE;
    end if;

    power_of_two := 1;
    for number range 0 to 62 do
      for counter range 1 to 200 do
        log2_arg := power_of_two + rand(0, power_of_two div 2);
        log2_num := log2(log2_arg);
        if log2_num <> number then
          write("log2(");
          write(log2_arg);
          write(") = ");
          write(log2_num);
          write(" instead of ");
          writeln(number);
          okay2 := FALSE;
        end if;
      end for;
      if number < 62 then
        power_of_two := power_of_two * 2;
      end if;
    end for;
    if not okay2 then
      writeln("The integer log2 function does not work correct for random values.");
      okay := FALSE;
    end if;

    if okay then
      writeln("The integer log2 function works correct.");
    else
      writeln(" ***** The integer log2 function does not work correct.");
      writeln;
    end if;
  end func;


const proc: check_log10 is func
  local
    var boolean: okay is TRUE;
  begin
    if  log10(                  0) <> -1 or
        log10(                  1) <>  0 or
        log10(                  9) <>  0 or
        log10(                 10) <>  1 or
        log10(                 99) <>  1 or
        log10(                100) <>  2 or
        log10(                999) <>  2 or
        log10(               1000) <>  3 or
        log10(               9999) <>  3 or
        log10(              10000) <>  4 or
        log10(              99999) <>  4 or
        log10(             100000) <>  5 or
        log10(             999999) <>  5 or
        log10(            1000000) <>  6 or
        log10(            9999999) <>  6 or
        log10(           10000000) <>  7 or
        log10(           99999999) <>  7 or
        log10(          100000000) <>  8 or
        log10(          999999999) <>  8 or
        log10(         1000000000) <>  9 or
        log10(         9999999999) <>  9 or
        log10(        10000000000) <> 10 or
        log10(        99999999999) <> 10 or
        log10(       100000000000) <> 11 or
        log10(       999999999999) <> 11 or
        log10(      1000000000000) <> 12 or
        log10(      9999999999999) <> 12 or
        log10(     10000000000000) <> 13 or
        log10(     99999999999999) <> 13 or
        log10(    100000000000000) <> 14 or
        log10(    999999999999999) <> 14 or
        log10(   1000000000000000) <> 15 or
        log10(   9999999999999999) <> 15 or
        log10(  10000000000000000) <> 16 or
        log10(  99999999999999999) <> 16 or
        log10( 100000000000000000) <> 17 or
        log10( 999999999999999999) <> 17 or
        log10(1000000000000000000) <> 18 or
        log10(9223372036854775807) <> 18 then
      writeln("The integer log10 function does not work correct.");
      okay := FALSE;
    end if;

    if okay then
      writeln("The integer log10 function works correct.");
    else
      writeln(" ***** The integer log10 function does not work correct.");
      writeln;
    end if;
  end func;


const func boolean: chkLShift (in integer: number, in integer: lshift,
    in integer: checkValue) is func
  result
    var boolean: wrong is FALSE;
  local
    var integer: intVar is 0;
  begin
    wrong := number << lshift <> checkValue;
    if not wrong then
      intVar := number;
      intVar <<:= lshift;
      wrong := intVar <> checkValue;
    end if;
  end func;


const func boolean: chkLShift (in integer: number, in integer: lshift) is func
  result
    var boolean: wrong is FALSE;
  begin
    if lshift = 31 and number = 0 then
      # writeln(number <& " << " <& lshift);
      wrong := chkLShift(number, lshift, 0);
    elsif lshift = 31 and number = -1 then
      # writeln(number <& " << " <& lshift);
      wrong := chkLShift(number, lshift, INT32_MIN);
    elsif lshift <= 30 and
        number <= 2147483647 mdiv 2 ** lshift and
        number >= INT32_MIN mdiv 2 ** lshift then
      # writeln(number <& " << " <& lshift);
      wrong := chkLShift(number, lshift, number * 2 ** lshift);
    end if;
  end func;


const proc: chkLShift (in integer: lshift, inout boolean: okay) is func
  begin
    if  chkLShift( 2147483647, lshift) or
        chkLShift( 1073741824, lshift) or
        chkLShift( 1073741823, lshift) or
        chkLShift( 1000000000, lshift) or
        chkLShift(  100000000, lshift) or
        chkLShift(   10000000, lshift) or
        chkLShift(    1000000, lshift) or
        chkLShift(     100000, lshift) or
        chkLShift(      65536, lshift) or
        chkLShift(      65535, lshift) or
        chkLShift(      32768, lshift) or
        chkLShift(      32767, lshift) or
        chkLShift(      10000, lshift) or
        chkLShift(       1000, lshift) or
        chkLShift(        256, lshift) or
        chkLShift(        255, lshift) or
        chkLShift(        128, lshift) or
        chkLShift(        127, lshift) or
        chkLShift(        100, lshift) or
        chkLShift(         17, lshift) or
        chkLShift(         16, lshift) or
        chkLShift(         15, lshift) or
        chkLShift(         10, lshift) or
        chkLShift(          9, lshift) or
        chkLShift(          8, lshift) or
        chkLShift(          7, lshift) or
        chkLShift(          5, lshift) or
        chkLShift(          4, lshift) or
        chkLShift(          3, lshift) or
        chkLShift(          2, lshift) or
        chkLShift(          1, lshift) or
        chkLShift(          0, lshift) or
        chkLShift(         -1, lshift) or
        chkLShift(         -2, lshift) or
        chkLShift(         -3, lshift) or
        chkLShift(         -4, lshift) or
        chkLShift(         -5, lshift) or
        chkLShift(         -7, lshift) or
        chkLShift(         -8, lshift) or
        chkLShift(         -9, lshift) or
        chkLShift(        -10, lshift) or
        chkLShift(        -15, lshift) or
        chkLShift(        -16, lshift) or
        chkLShift(        -17, lshift) or
        chkLShift(       -100, lshift) or
        chkLShift(       -128, lshift) or
        chkLShift(       -129, lshift) or
        chkLShift(       -256, lshift) or
        chkLShift(       -257, lshift) or
        chkLShift(      -1000, lshift) or
        chkLShift(     -10000, lshift) or
        chkLShift(     -32768, lshift) or
        chkLShift(     -32769, lshift) or
        chkLShift(     -65536, lshift) or
        chkLShift(     -65537, lshift) or
        chkLShift(    -100000, lshift) or
        chkLShift(   -1000000, lshift) or
        chkLShift(  -10000000, lshift) or
        chkLShift( -100000000, lshift) or
        chkLShift(-1000000000, lshift) or
        chkLShift(-1073741824, lshift) or
        chkLShift(-1073741825, lshift) or
        chkLShift(-2147483647, lshift) or
        chkLShift(  INT32_MIN, lshift) then
      writeln("The integer << or <<:= with " <& lshift <& " does not work correct.");
      okay := FALSE;
    end if;
  end func;


const proc: check_lShift is func
  local
    var boolean: okay is TRUE;
    var integer: lshift is 0;
  begin
    for lshift range 0 to 31 do
      chkLShift(lshift, okay);
    end for;

    if okay then
      writeln("The integer << and <<:= works correct.");
    else
      writeln(" ***** The integer << or <<:= does not work correct.");
      writeln;
    end if;
  end func;


const func boolean: chkRShift (in integer: number, in integer: rshift,
    in integer: check) is func
  result
    var boolean: wrong is FALSE;
  local
    var integer: intVar is 0;
  begin
    wrong := number >> rshift <> check;
    if not wrong then
      intVar := number;
      intVar >>:= rshift;
      wrong := intVar <> check;
    end if;
  end func;


const func boolean: chkRShift (in integer: number, in integer: rshift) is func
  result
    var boolean: wrong is FALSE;
  begin
    if rshift < 31 then
      wrong := chkRShift(number, rshift, number mdiv 2 ** rshift);
    elsif number < 0 then
      wrong := chkRShift(number, rshift, -1);
    else
      wrong := chkRShift(number, rshift, 0);
    end if;
  end func;


const proc: chkRShift (in integer: rshift, inout boolean: okay) is func
  begin
    if  chkRShift( 2147483647, rshift) or
        chkRShift( 1073741824, rshift) or
        chkRShift( 1073741823, rshift) or
        chkRShift( 1000000000, rshift) or
        chkRShift(  100000000, rshift) or
        chkRShift(   10000000, rshift) or
        chkRShift(    1000000, rshift) or
        chkRShift(     100000, rshift) or
        chkRShift(      65536, rshift) or
        chkRShift(      65535, rshift) or
        chkRShift(      32768, rshift) or
        chkRShift(      32767, rshift) or
        chkRShift(      10000, rshift) or
        chkRShift(       1000, rshift) or
        chkRShift(        256, rshift) or
        chkRShift(        255, rshift) or
        chkRShift(        128, rshift) or
        chkRShift(        127, rshift) or
        chkRShift(        100, rshift) or
        chkRShift(         10, rshift) or
        chkRShift(          1, rshift) or
        chkRShift(          0, rshift) or
        chkRShift(         -1, rshift) or
        chkRShift(        -10, rshift) or
        chkRShift(       -100, rshift) or
        chkRShift(       -128, rshift) or
        chkRShift(       -129, rshift) or
        chkRShift(       -256, rshift) or
        chkRShift(       -257, rshift) or
        chkRShift(      -1000, rshift) or
        chkRShift(     -10000, rshift) or
        chkRShift(     -32768, rshift) or
        chkRShift(     -32769, rshift) or
        chkRShift(     -65536, rshift) or
        chkRShift(     -65537, rshift) or
        chkRShift(    -100000, rshift) or
        chkRShift(   -1000000, rshift) or
        chkRShift(  -10000000, rshift) or
        chkRShift( -100000000, rshift) or
        chkRShift(-1000000000, rshift) or
        chkRShift(-1073741824, rshift) or
        chkRShift(-1073741825, rshift) or
        chkRShift(-2147483647, rshift) or
        chkRShift(  INT32_MIN, rshift) then
      writeln("The integer >> or >>:= with " <& rshift <& " does not work correct.");
      okay := FALSE;
    end if;
  end func;


const proc: check_rShift is func
  local
    var boolean: okay is TRUE;
    var integer: rshift is 0;
  begin
    for rshift range 0 to 31 do
      chkRShift(rshift, okay);
    end for;

    if okay then
      writeln("The integer >> and >>:= works correct.");
    else
      writeln(" ***** The integer >> or >>:= does not work correct.");
      writeln;
    end if;
  end func;


const proc: check_str is func
  local
    var boolean: okay is TRUE;
  begin
    okay := TRUE;
    if  str(                  0) <>                   "0" or
        str(                  1) <>                   "1" or
        str(                  2) <>                   "2" or
        str(                  8) <>                   "8" or
        str(                  9) <>                   "9" or
        str(                 10) <>                  "10" or
        str(                 11) <>                  "11" or
        str(                 99) <>                  "99" or
        str(                100) <>                 "100" or
        str(                127) <>                 "127" or
        str(                128) <>                 "128" or
        str(                200) <>                 "200" or
        str(                255) <>                 "255" or
        str(                256) <>                 "256" or
        str(                999) <>                 "999" or
        str(               1000) <>                "1000" or
        str(               1001) <>                "1001" or
        str(               2000) <>                "2000" or
        str(               9999) <>                "9999" or
        str(              10000) <>               "10000" or
        str(              10001) <>               "10001" or
        str(              10002) <>               "10002" or
        str(              32767) <>               "32767" or
        str(              32768) <>               "32768" or
        str(              65535) <>               "65535" or
        str(              65536) <>               "65536" or
        str(              99999) <>               "99999" or
        str(             100000) <>              "100000" or
        str(             999999) <>              "999999" or
        str(            1000000) <>             "1000000" or
        str(            8388607) <>             "8388607" or
        str(            8388608) <>             "8388608" or
        str(            9999999) <>             "9999999" or
        str(           10000000) <>            "10000000" or
        str(           16777215) <>            "16777215" or
        str(           16777216) <>            "16777216" or
        str(           99999999) <>            "99999999" or
        str(          100000000) <>           "100000000" or
        str(          999999999) <>           "999999999" or
        str(         1000000000) <>          "1000000000" or
        str(         2147483647) <>          "2147483647" or
        str(         2147483648) <>          "2147483648" or
        str(         4294967295) <>          "4294967295" or
        str(         4294967296) <>          "4294967296" or
        str(         9999999999) <>          "9999999999" or
        str(        10000000000) <>         "10000000000" or
        str(        99999999999) <>         "99999999999" or
        str(       100000000000) <>        "100000000000" or
        str(       549755813887) <>        "549755813887" or
        str(       549755813888) <>        "549755813888" or
        str(       999999999999) <>        "999999999999" or
        str(      1000000000000) <>       "1000000000000" or
        str(      1099511627775) <>       "1099511627775" or
        str(      1099511627776) <>       "1099511627776" or
        str(      9999999999999) <>       "9999999999999" or
        str(     10000000000000) <>      "10000000000000" or
        str(     99999999999999) <>      "99999999999999" or
        str(    100000000000000) <>     "100000000000000" or
        str(    140737488355327) <>     "140737488355327" or
        str(    140737488355328) <>     "140737488355328" or
        str(    281474976710655) <>     "281474976710655" or
        str(    281474976710656) <>     "281474976710656" or
        str(    999999999999999) <>     "999999999999999" or
        str(   1000000000000000) <>    "1000000000000000" or
        str(   9999999999999999) <>    "9999999999999999" or
        str(  10000000000000000) <>   "10000000000000000" or
        str(  36028797018963967) <>   "36028797018963967" or
        str(  36028797018963968) <>   "36028797018963968" or
        str(  72057594037927935) <>   "72057594037927935" or
        str(  72057594037927936) <>   "72057594037927936" or
        str(  99999999999999999) <>   "99999999999999999" or
        str( 100000000000000000) <>  "100000000000000000" or
        str( 999999999000000000) <>  "999999999000000000" or
        str(1000000000000000000) <> "1000000000000000000" or
        str(9223372036854775806) <> "9223372036854775806" or
        str(9223372036854775807) <> "9223372036854775807" then
      writeln(" ***** Integer str of a positive integer does not work correct.");
      okay := FALSE;
    end if;

    if  str(                  -1) <>                   "-1" or
        str(                  -2) <>                   "-2" or
        str(                  -8) <>                   "-8" or
        str(                  -9) <>                   "-9" or
        str(                 -10) <>                  "-10" or
        str(                 -11) <>                  "-11" or
        str(                 -99) <>                  "-99" or
        str(                -100) <>                 "-100" or
        str(                -127) <>                 "-127" or
        str(                -128) <>                 "-128" or
        str(                -200) <>                 "-200" or
        str(                -255) <>                 "-255" or
        str(                -256) <>                 "-256" or
        str(                -999) <>                 "-999" or
        str(               -1000) <>                "-1000" or
        str(               -1001) <>                "-1001" or
        str(               -2000) <>                "-2000" or
        str(               -9999) <>                "-9999" or
        str(              -10000) <>               "-10000" or
        str(              -10001) <>               "-10001" or
        str(              -10002) <>               "-10002" or
        str(              -32767) <>               "-32767" or
        str(              -32768) <>               "-32768" or
        str(              -65535) <>               "-65535" or
        str(              -65536) <>               "-65536" or
        str(              -99999) <>               "-99999" or
        str(             -100000) <>              "-100000" or
        str(             -999999) <>              "-999999" or
        str(            -1000000) <>             "-1000000" or
        str(            -8388607) <>             "-8388607" or
        str(            -8388608) <>             "-8388608" or
        str(            -9999999) <>             "-9999999" or
        str(           -10000000) <>            "-10000000" or
        str(           -16777215) <>            "-16777215" or
        str(           -16777216) <>            "-16777216" or
        str(           -99999999) <>            "-99999999" or
        str(          -100000000) <>           "-100000000" or
        str(          -999999999) <>           "-999999999" or
        str(         -1000000000) <>          "-1000000000" or
        str(         -2147483647) <>          "-2147483647" or
        str(         -2147483648) <>          "-2147483648" or
        str(         -4294967295) <>          "-4294967295" or
        str(         -4294967296) <>          "-4294967296" or
        str(         -9999999999) <>          "-9999999999" or
        str(        -10000000000) <>         "-10000000000" or
        str(        -99999999999) <>         "-99999999999" or
        str(       -100000000000) <>        "-100000000000" or
        str(       -549755813887) <>        "-549755813887" or
        str(       -549755813888) <>        "-549755813888" or
        str(       -999999999999) <>        "-999999999999" or
        str(      -1000000000000) <>       "-1000000000000" or
        str(      -1099511627775) <>       "-1099511627775" or
        str(      -1099511627776) <>       "-1099511627776" or
        str(      -9999999999999) <>       "-9999999999999" or
        str(     -10000000000000) <>      "-10000000000000" or
        str(     -99999999999999) <>      "-99999999999999" or
        str(    -100000000000000) <>     "-100000000000000" or
        str(    -140737488355327) <>     "-140737488355327" or
        str(    -140737488355328) <>     "-140737488355328" or
        str(    -281474976710655) <>     "-281474976710655" or
        str(    -281474976710656) <>     "-281474976710656" or
        str(    -999999999999999) <>     "-999999999999999" or
        str(   -1000000000000000) <>    "-1000000000000000" or
        str(   -9999999999999999) <>    "-9999999999999999" or
        str(  -10000000000000000) <>   "-10000000000000000" or
        str(  -36028797018963967) <>   "-36028797018963967" or
        str(  -36028797018963968) <>   "-36028797018963968" or
        str(  -72057594037927935) <>   "-72057594037927935" or
        str(  -72057594037927936) <>   "-72057594037927936" or
        str(  -99999999999999999) <>   "-99999999999999999" or
        str( -100000000000000000) <>  "-100000000000000000" or
        str( -999999999000000000) <>  "-999999999000000000" or
        str(-1000000000000000000) <> "-1000000000000000000" or
        str(-9223372036854775806) <> "-9223372036854775806" or
        str(-9223372036854775807) <> "-9223372036854775807" or
        str(INT64_MIN)            <> "-9223372036854775808" then
      writeln(" ***** Integer str of a negative integer does not work correct.");
      okay := FALSE;
    end if;

    if  str(intExpr(                  0)) <>                   "0" or
        str(intExpr(                  1)) <>                   "1" or
        str(intExpr(                  2)) <>                   "2" or
        str(intExpr(                  8)) <>                   "8" or
        str(intExpr(                  9)) <>                   "9" or
        str(intExpr(                 10)) <>                  "10" or
        str(intExpr(                 11)) <>                  "11" or
        str(intExpr(                 99)) <>                  "99" or
        str(intExpr(                100)) <>                 "100" or
        str(intExpr(                127)) <>                 "127" or
        str(intExpr(                128)) <>                 "128" or
        str(intExpr(                200)) <>                 "200" or
        str(intExpr(                255)) <>                 "255" or
        str(intExpr(                256)) <>                 "256" or
        str(intExpr(                999)) <>                 "999" or
        str(intExpr(               1000)) <>                "1000" or
        str(intExpr(               1001)) <>                "1001" or
        str(intExpr(               2000)) <>                "2000" or
        str(intExpr(               9999)) <>                "9999" or
        str(intExpr(              10000)) <>               "10000" or
        str(intExpr(              10001)) <>               "10001" or
        str(intExpr(              10002)) <>               "10002" or
        str(intExpr(              32767)) <>               "32767" or
        str(intExpr(              32768)) <>               "32768" or
        str(intExpr(              65535)) <>               "65535" or
        str(intExpr(              65536)) <>               "65536" or
        str(intExpr(              99999)) <>               "99999" or
        str(intExpr(             100000)) <>              "100000" or
        str(intExpr(             999999)) <>              "999999" or
        str(intExpr(            1000000)) <>             "1000000" or
        str(intExpr(            8388607)) <>             "8388607" or
        str(intExpr(            8388608)) <>             "8388608" or
        str(intExpr(            9999999)) <>             "9999999" or
        str(intExpr(           10000000)) <>            "10000000" or
        str(intExpr(           16777215)) <>            "16777215" or
        str(intExpr(           16777216)) <>            "16777216" or
        str(intExpr(           99999999)) <>            "99999999" or
        str(intExpr(          100000000)) <>           "100000000" or
        str(intExpr(          999999999)) <>           "999999999" or
        str(intExpr(         1000000000)) <>          "1000000000" or
        str(intExpr(         2147483647)) <>          "2147483647" or
        str(intExpr(         2147483648)) <>          "2147483648" or
        str(intExpr(         4294967295)) <>          "4294967295" or
        str(intExpr(         4294967296)) <>          "4294967296" or
        str(intExpr(         9999999999)) <>          "9999999999" or
        str(intExpr(        10000000000)) <>         "10000000000" or
        str(intExpr(        99999999999)) <>         "99999999999" or
        str(intExpr(       100000000000)) <>        "100000000000" or
        str(intExpr(       549755813887)) <>        "549755813887" or
        str(intExpr(       549755813888)) <>        "549755813888" or
        str(intExpr(       999999999999)) <>        "999999999999" or
        str(intExpr(      1000000000000)) <>       "1000000000000" or
        str(intExpr(      1099511627775)) <>       "1099511627775" or
        str(intExpr(      1099511627776)) <>       "1099511627776" or
        str(intExpr(      9999999999999)) <>       "9999999999999" or
        str(intExpr(     10000000000000)) <>      "10000000000000" or
        str(intExpr(     99999999999999)) <>      "99999999999999" or
        str(intExpr(    100000000000000)) <>     "100000000000000" or
        str(intExpr(    140737488355327)) <>     "140737488355327" or
        str(intExpr(    140737488355328)) <>     "140737488355328" or
        str(intExpr(    281474976710655)) <>     "281474976710655" or
        str(intExpr(    281474976710656)) <>     "281474976710656" or
        str(intExpr(    999999999999999)) <>     "999999999999999" or
        str(intExpr(   1000000000000000)) <>    "1000000000000000" or
        str(intExpr(   9999999999999999)) <>    "9999999999999999" or
        str(intExpr(  10000000000000000)) <>   "10000000000000000" or
        str(intExpr(  36028797018963967)) <>   "36028797018963967" or
        str(intExpr(  36028797018963968)) <>   "36028797018963968" or
        str(intExpr(  72057594037927935)) <>   "72057594037927935" or
        str(intExpr(  72057594037927936)) <>   "72057594037927936" or
        str(intExpr(  99999999999999999)) <>   "99999999999999999" or
        str(intExpr( 100000000000000000)) <>  "100000000000000000" or
        str(intExpr( 999999999000000000)) <>  "999999999000000000" or
        str(intExpr(1000000000000000000)) <> "1000000000000000000" or
        str(intExpr(9223372036854775806)) <> "9223372036854775806" or
        str(intExpr(9223372036854775807)) <> "9223372036854775807" then
      writeln(" ***** Integer str of a positive integer expression does not work correct.");
      okay := FALSE;
    end if;

    if  str(intExpr(                  -1)) <>                   "-1" or
        str(intExpr(                  -2)) <>                   "-2" or
        str(intExpr(                  -8)) <>                   "-8" or
        str(intExpr(                  -9)) <>                   "-9" or
        str(intExpr(                 -10)) <>                  "-10" or
        str(intExpr(                 -11)) <>                  "-11" or
        str(intExpr(                 -99)) <>                  "-99" or
        str(intExpr(                -100)) <>                 "-100" or
        str(intExpr(                -127)) <>                 "-127" or
        str(intExpr(                -128)) <>                 "-128" or
        str(intExpr(                -200)) <>                 "-200" or
        str(intExpr(                -255)) <>                 "-255" or
        str(intExpr(                -256)) <>                 "-256" or
        str(intExpr(                -999)) <>                 "-999" or
        str(intExpr(               -1000)) <>                "-1000" or
        str(intExpr(               -1001)) <>                "-1001" or
        str(intExpr(               -2000)) <>                "-2000" or
        str(intExpr(               -9999)) <>                "-9999" or
        str(intExpr(              -10000)) <>               "-10000" or
        str(intExpr(              -10001)) <>               "-10001" or
        str(intExpr(              -10002)) <>               "-10002" or
        str(intExpr(              -32767)) <>               "-32767" or
        str(intExpr(              -32768)) <>               "-32768" or
        str(intExpr(              -65535)) <>               "-65535" or
        str(intExpr(              -65536)) <>               "-65536" or
        str(intExpr(              -99999)) <>               "-99999" or
        str(intExpr(             -100000)) <>              "-100000" or
        str(intExpr(             -999999)) <>              "-999999" or
        str(intExpr(            -1000000)) <>             "-1000000" or
        str(intExpr(            -8388607)) <>             "-8388607" or
        str(intExpr(            -8388608)) <>             "-8388608" or
        str(intExpr(            -9999999)) <>             "-9999999" or
        str(intExpr(           -10000000)) <>            "-10000000" or
        str(intExpr(           -16777215)) <>            "-16777215" or
        str(intExpr(           -16777216)) <>            "-16777216" or
        str(intExpr(           -99999999)) <>            "-99999999" or
        str(intExpr(          -100000000)) <>           "-100000000" or
        str(intExpr(          -999999999)) <>           "-999999999" or
        str(intExpr(         -1000000000)) <>          "-1000000000" or
        str(intExpr(         -2147483647)) <>          "-2147483647" or
        str(intExpr(         -2147483648)) <>          "-2147483648" or
        str(intExpr(         -4294967295)) <>          "-4294967295" or
        str(intExpr(         -4294967296)) <>          "-4294967296" or
        str(intExpr(         -9999999999)) <>          "-9999999999" or
        str(intExpr(        -10000000000)) <>         "-10000000000" or
        str(intExpr(        -99999999999)) <>         "-99999999999" or
        str(intExpr(       -100000000000)) <>        "-100000000000" or
        str(intExpr(       -549755813887)) <>        "-549755813887" or
        str(intExpr(       -549755813888)) <>        "-549755813888" or
        str(intExpr(       -999999999999)) <>        "-999999999999" or
        str(intExpr(      -1000000000000)) <>       "-1000000000000" or
        str(intExpr(      -1099511627775)) <>       "-1099511627775" or
        str(intExpr(      -1099511627776)) <>       "-1099511627776" or
        str(intExpr(      -9999999999999)) <>       "-9999999999999" or
        str(intExpr(     -10000000000000)) <>      "-10000000000000" or
        str(intExpr(     -99999999999999)) <>      "-99999999999999" or
        str(intExpr(    -100000000000000)) <>     "-100000000000000" or
        str(intExpr(    -140737488355327)) <>     "-140737488355327" or
        str(intExpr(    -140737488355328)) <>     "-140737488355328" or
        str(intExpr(    -281474976710655)) <>     "-281474976710655" or
        str(intExpr(    -281474976710656)) <>     "-281474976710656" or
        str(intExpr(    -999999999999999)) <>     "-999999999999999" or
        str(intExpr(   -1000000000000000)) <>    "-1000000000000000" or
        str(intExpr(   -9999999999999999)) <>    "-9999999999999999" or
        str(intExpr(  -10000000000000000)) <>   "-10000000000000000" or
        str(intExpr(  -36028797018963967)) <>   "-36028797018963967" or
        str(intExpr(  -36028797018963968)) <>   "-36028797018963968" or
        str(intExpr(  -72057594037927935)) <>   "-72057594037927935" or
        str(intExpr(  -72057594037927936)) <>   "-72057594037927936" or
        str(intExpr(  -99999999999999999)) <>   "-99999999999999999" or
        str(intExpr( -100000000000000000)) <>  "-100000000000000000" or
        str(intExpr( -999999999000000000)) <>  "-999999999000000000" or
        str(intExpr(-1000000000000000000)) <> "-1000000000000000000" or
        str(intExpr(-9223372036854775806)) <> "-9223372036854775806" or
        str(intExpr(-9223372036854775807)) <> "-9223372036854775807" or
        str(intExpr(INT64_MIN))            <> "-9223372036854775808" then
      writeln(" ***** Integer str of a negative integer expression does not work correct.");
      okay := FALSE;
    end if;

    if  (1000000 radix  2) <> "11110100001001000000" or
        (1000000 radix  3) <> "1212210202001" or
        (1000000 radix  4) <> "3310021000" or
        (1000000 radix  5) <> "224000000" or
        (1000000 radix  6) <> "33233344" or
        (1000000 radix  7) <> "11333311" or
        (1000000 radix  8) <> "3641100" or
        (1000000 radix  9) <> "1783661" or
        (1000000 radix 10) <> "1000000" or
        (1000000 radix 11) <> "623351" or
        (1000000 radix 12) <> "402854" or
        (1000000 radix 13) <> "290221" or
        (1000000 radix 14) <> "1c0608" or
        (1000000 radix 15) <> "14b46a" or
        (1000000 radix 16) <> "f4240" or
        (1000000 radix 17) <> "bg939" or
        (1000000 radix 18) <> "9987a" or
        (1000000 radix 19) <> "7cf1b" or
        (1000000 radix 20) <> "65000" or
        (1000000 radix 21) <> "52kc1" or
        (1000000 radix 22) <> "45k2c" or
        (1000000 radix 23) <> "3d486" or
        (1000000 radix 24) <> "3082g" or
        (1000000 radix 25) <> "2e000" or
        (1000000 radix 26) <> "24n7e" or
        (1000000 radix 27) <> "1nlk1" or
        (1000000 radix 28) <> "1hfe8" or
        (1000000 radix 29) <> "1c01m" or
        (1000000 radix 30) <> "1713a" or
        (1000000 radix 31) <> "12hi2" or
        (1000000 radix 32) <> "ugi0" or
        (1000000 radix 33) <> "rr91" or
        (1000000 radix 34) <> "pf1q" or
        (1000000 radix 35) <> "nbbf" or
        (1000000 radix 36) <> "lfls" then
      writeln(" ***** The radix operator does not work correct.");
      okay := FALSE;
    end if;
    if  (intExpr(1000000) radix  2) <> "11110100001001000000" or
        (intExpr(1000000) radix  3) <> "1212210202001" or
        (intExpr(1000000) radix  4) <> "3310021000" or
        (intExpr(1000000) radix  5) <> "224000000" or
        (intExpr(1000000) radix  6) <> "33233344" or
        (intExpr(1000000) radix  7) <> "11333311" or
        (intExpr(1000000) radix  8) <> "3641100" or
        (intExpr(1000000) radix  9) <> "1783661" or
        (intExpr(1000000) radix 10) <> "1000000" or
        (intExpr(1000000) radix 11) <> "623351" or
        (intExpr(1000000) radix 12) <> "402854" or
        (intExpr(1000000) radix 13) <> "290221" or
        (intExpr(1000000) radix 14) <> "1c0608" or
        (intExpr(1000000) radix 15) <> "14b46a" or
        (intExpr(1000000) radix 16) <> "f4240" or
        (intExpr(1000000) radix 17) <> "bg939" or
        (intExpr(1000000) radix 18) <> "9987a" or
        (intExpr(1000000) radix 19) <> "7cf1b" or
        (intExpr(1000000) radix 20) <> "65000" or
        (intExpr(1000000) radix 21) <> "52kc1" or
        (intExpr(1000000) radix 22) <> "45k2c" or
        (intExpr(1000000) radix 23) <> "3d486" or
        (intExpr(1000000) radix 24) <> "3082g" or
        (intExpr(1000000) radix 25) <> "2e000" or
        (intExpr(1000000) radix 26) <> "24n7e" or
        (intExpr(1000000) radix 27) <> "1nlk1" or
        (intExpr(1000000) radix 28) <> "1hfe8" or
        (intExpr(1000000) radix 29) <> "1c01m" or
        (intExpr(1000000) radix 30) <> "1713a" or
        (intExpr(1000000) radix 31) <> "12hi2" or
        (intExpr(1000000) radix 32) <> "ugi0" or
        (intExpr(1000000) radix 33) <> "rr91" or
        (intExpr(1000000) radix 34) <> "pf1q" or
        (intExpr(1000000) radix 35) <> "nbbf" or
        (intExpr(1000000) radix 36) <> "lfls" then
      writeln(" ***** The radix operator does not work correct.");
      okay := FALSE;
    end if;
    if  (1000000 radix intExpr( 2)) <> "11110100001001000000" or
        (1000000 radix intExpr( 3)) <> "1212210202001" or
        (1000000 radix intExpr( 4)) <> "3310021000" or
        (1000000 radix intExpr( 5)) <> "224000000" or
        (1000000 radix intExpr( 6)) <> "33233344" or
        (1000000 radix intExpr( 7)) <> "11333311" or
        (1000000 radix intExpr( 8)) <> "3641100" or
        (1000000 radix intExpr( 9)) <> "1783661" or
        (1000000 radix intExpr(10)) <> "1000000" or
        (1000000 radix intExpr(11)) <> "623351" or
        (1000000 radix intExpr(12)) <> "402854" or
        (1000000 radix intExpr(13)) <> "290221" or
        (1000000 radix intExpr(14)) <> "1c0608" or
        (1000000 radix intExpr(15)) <> "14b46a" or
        (1000000 radix intExpr(16)) <> "f4240" or
        (1000000 radix intExpr(17)) <> "bg939" or
        (1000000 radix intExpr(18)) <> "9987a" or
        (1000000 radix intExpr(19)) <> "7cf1b" or
        (1000000 radix intExpr(20)) <> "65000" or
        (1000000 radix intExpr(21)) <> "52kc1" or
        (1000000 radix intExpr(22)) <> "45k2c" or
        (1000000 radix intExpr(23)) <> "3d486" or
        (1000000 radix intExpr(24)) <> "3082g" or
        (1000000 radix intExpr(25)) <> "2e000" or
        (1000000 radix intExpr(26)) <> "24n7e" or
        (1000000 radix intExpr(27)) <> "1nlk1" or
        (1000000 radix intExpr(28)) <> "1hfe8" or
        (1000000 radix intExpr(29)) <> "1c01m" or
        (1000000 radix intExpr(30)) <> "1713a" or
        (1000000 radix intExpr(31)) <> "12hi2" or
        (1000000 radix intExpr(32)) <> "ugi0" or
        (1000000 radix intExpr(33)) <> "rr91" or
        (1000000 radix intExpr(34)) <> "pf1q" or
        (1000000 radix intExpr(35)) <> "nbbf" or
        (1000000 radix intExpr(36)) <> "lfls" then
      writeln(" ***** The radix operator does not work correct.");
      okay := FALSE;
    end if;
    if  (intExpr(1000000) radix intExpr( 2)) <> "11110100001001000000" or
        (intExpr(1000000) radix intExpr( 3)) <> "1212210202001" or
        (intExpr(1000000) radix intExpr( 4)) <> "3310021000" or
        (intExpr(1000000) radix intExpr( 5)) <> "224000000" or
        (intExpr(1000000) radix intExpr( 6)) <> "33233344" or
        (intExpr(1000000) radix intExpr( 7)) <> "11333311" or
        (intExpr(1000000) radix intExpr( 8)) <> "3641100" or
        (intExpr(1000000) radix intExpr( 9)) <> "1783661" or
        (intExpr(1000000) radix intExpr(10)) <> "1000000" or
        (intExpr(1000000) radix intExpr(11)) <> "623351" or
        (intExpr(1000000) radix intExpr(12)) <> "402854" or
        (intExpr(1000000) radix intExpr(13)) <> "290221" or
        (intExpr(1000000) radix intExpr(14)) <> "1c0608" or
        (intExpr(1000000) radix intExpr(15)) <> "14b46a" or
        (intExpr(1000000) radix intExpr(16)) <> "f4240" or
        (intExpr(1000000) radix intExpr(17)) <> "bg939" or
        (intExpr(1000000) radix intExpr(18)) <> "9987a" or
        (intExpr(1000000) radix intExpr(19)) <> "7cf1b" or
        (intExpr(1000000) radix intExpr(20)) <> "65000" or
        (intExpr(1000000) radix intExpr(21)) <> "52kc1" or
        (intExpr(1000000) radix intExpr(22)) <> "45k2c" or
        (intExpr(1000000) radix intExpr(23)) <> "3d486" or
        (intExpr(1000000) radix intExpr(24)) <> "3082g" or
        (intExpr(1000000) radix intExpr(25)) <> "2e000" or
        (intExpr(1000000) radix intExpr(26)) <> "24n7e" or
        (intExpr(1000000) radix intExpr(27)) <> "1nlk1" or
        (intExpr(1000000) radix intExpr(28)) <> "1hfe8" or
        (intExpr(1000000) radix intExpr(29)) <> "1c01m" or
        (intExpr(1000000) radix intExpr(30)) <> "1713a" or
        (intExpr(1000000) radix intExpr(31)) <> "12hi2" or
        (intExpr(1000000) radix intExpr(32)) <> "ugi0" or
        (intExpr(1000000) radix intExpr(33)) <> "rr91" or
        (intExpr(1000000) radix intExpr(34)) <> "pf1q" or
        (intExpr(1000000) radix intExpr(35)) <> "nbbf" or
        (intExpr(1000000) radix intExpr(36)) <> "lfls" then
      writeln(" ***** The radix operator does not work correct.");
      okay := FALSE;
    end if;
    if  (1000000 RADIX  2) <> "11110100001001000000" or
        (1000000 RADIX  3) <> "1212210202001" or
        (1000000 RADIX  4) <> "3310021000" or
        (1000000 RADIX  5) <> "224000000" or
        (1000000 RADIX  6) <> "33233344" or
        (1000000 RADIX  7) <> "11333311" or
        (1000000 RADIX  8) <> "3641100" or
        (1000000 RADIX  9) <> "1783661" or
        (1000000 RADIX 10) <> "1000000" or
        (1000000 RADIX 11) <> "623351" or
        (1000000 RADIX 12) <> "402854" or
        (1000000 RADIX 13) <> "290221" or
        (1000000 RADIX 14) <> "1C0608" or
        (1000000 RADIX 15) <> "14B46A" or
        (1000000 RADIX 16) <> "F4240" or
        (1000000 RADIX 17) <> "BG939" or
        (1000000 RADIX 18) <> "9987A" or
        (1000000 RADIX 19) <> "7CF1B" or
        (1000000 RADIX 20) <> "65000" or
        (1000000 RADIX 21) <> "52KC1" or
        (1000000 RADIX 22) <> "45K2C" or
        (1000000 RADIX 23) <> "3D486" or
        (1000000 RADIX 24) <> "3082G" or
        (1000000 RADIX 25) <> "2E000" or
        (1000000 RADIX 26) <> "24N7E" or
        (1000000 RADIX 27) <> "1NLK1" or
        (1000000 RADIX 28) <> "1HFE8" or
        (1000000 RADIX 29) <> "1C01M" or
        (1000000 RADIX 30) <> "1713A" or
        (1000000 RADIX 31) <> "12HI2" or
        (1000000 RADIX 32) <> "UGI0" or
        (1000000 RADIX 33) <> "RR91" or
        (1000000 RADIX 34) <> "PF1Q" or
        (1000000 RADIX 35) <> "NBBF" or
        (1000000 RADIX 36) <> "LFLS" then
      writeln(" ***** The RADIX operator does not work correct.");
      okay := FALSE;
    end if;
    if  (intExpr(1000000) RADIX  2) <> "11110100001001000000" or
        (intExpr(1000000) RADIX  3) <> "1212210202001" or
        (intExpr(1000000) RADIX  4) <> "3310021000" or
        (intExpr(1000000) RADIX  5) <> "224000000" or
        (intExpr(1000000) RADIX  6) <> "33233344" or
        (intExpr(1000000) RADIX  7) <> "11333311" or
        (intExpr(1000000) RADIX  8) <> "3641100" or
        (intExpr(1000000) RADIX  9) <> "1783661" or
        (intExpr(1000000) RADIX 10) <> "1000000" or
        (intExpr(1000000) RADIX 11) <> "623351" or
        (intExpr(1000000) RADIX 12) <> "402854" or
        (intExpr(1000000) RADIX 13) <> "290221" or
        (intExpr(1000000) RADIX 14) <> "1C0608" or
        (intExpr(1000000) RADIX 15) <> "14B46A" or
        (intExpr(1000000) RADIX 16) <> "F4240" or
        (intExpr(1000000) RADIX 17) <> "BG939" or
        (intExpr(1000000) RADIX 18) <> "9987A" or
        (intExpr(1000000) RADIX 19) <> "7CF1B" or
        (intExpr(1000000) RADIX 20) <> "65000" or
        (intExpr(1000000) RADIX 21) <> "52KC1" or
        (intExpr(1000000) RADIX 22) <> "45K2C" or
        (intExpr(1000000) RADIX 23) <> "3D486" or
        (intExpr(1000000) RADIX 24) <> "3082G" or
        (intExpr(1000000) RADIX 25) <> "2E000" or
        (intExpr(1000000) RADIX 26) <> "24N7E" or
        (intExpr(1000000) RADIX 27) <> "1NLK1" or
        (intExpr(1000000) RADIX 28) <> "1HFE8" or
        (intExpr(1000000) RADIX 29) <> "1C01M" or
        (intExpr(1000000) RADIX 30) <> "1713A" or
        (intExpr(1000000) RADIX 31) <> "12HI2" or
        (intExpr(1000000) RADIX 32) <> "UGI0" or
        (intExpr(1000000) RADIX 33) <> "RR91" or
        (intExpr(1000000) RADIX 34) <> "PF1Q" or
        (intExpr(1000000) RADIX 35) <> "NBBF" or
        (intExpr(1000000) RADIX 36) <> "LFLS" then
      writeln(" ***** The RADIX operator does not work correct.");
      okay := FALSE;
    end if;
    if  (1000000 RADIX intExpr( 2)) <> "11110100001001000000" or
        (1000000 RADIX intExpr( 3)) <> "1212210202001" or
        (1000000 RADIX intExpr( 4)) <> "3310021000" or
        (1000000 RADIX intExpr( 5)) <> "224000000" or
        (1000000 RADIX intExpr( 6)) <> "33233344" or
        (1000000 RADIX intExpr( 7)) <> "11333311" or
        (1000000 RADIX intExpr( 8)) <> "3641100" or
        (1000000 RADIX intExpr( 9)) <> "1783661" or
        (1000000 RADIX intExpr(10)) <> "1000000" or
        (1000000 RADIX intExpr(11)) <> "623351" or
        (1000000 RADIX intExpr(12)) <> "402854" or
        (1000000 RADIX intExpr(13)) <> "290221" or
        (1000000 RADIX intExpr(14)) <> "1C0608" or
        (1000000 RADIX intExpr(15)) <> "14B46A" or
        (1000000 RADIX intExpr(16)) <> "F4240" or
        (1000000 RADIX intExpr(17)) <> "BG939" or
        (1000000 RADIX intExpr(18)) <> "9987A" or
        (1000000 RADIX intExpr(19)) <> "7CF1B" or
        (1000000 RADIX intExpr(20)) <> "65000" or
        (1000000 RADIX intExpr(21)) <> "52KC1" or
        (1000000 RADIX intExpr(22)) <> "45K2C" or
        (1000000 RADIX intExpr(23)) <> "3D486" or
        (1000000 RADIX intExpr(24)) <> "3082G" or
        (1000000 RADIX intExpr(25)) <> "2E000" or
        (1000000 RADIX intExpr(26)) <> "24N7E" or
        (1000000 RADIX intExpr(27)) <> "1NLK1" or
        (1000000 RADIX intExpr(28)) <> "1HFE8" or
        (1000000 RADIX intExpr(29)) <> "1C01M" or
        (1000000 RADIX intExpr(30)) <> "1713A" or
        (1000000 RADIX intExpr(31)) <> "12HI2" or
        (1000000 RADIX intExpr(32)) <> "UGI0" or
        (1000000 RADIX intExpr(33)) <> "RR91" or
        (1000000 RADIX intExpr(34)) <> "PF1Q" or
        (1000000 RADIX intExpr(35)) <> "NBBF" or
        (1000000 RADIX intExpr(36)) <> "LFLS" then
      writeln(" ***** The RADIX operator does not work correct.");
      okay := FALSE;
    end if;
    if  (intExpr(1000000) RADIX intExpr( 2)) <> "11110100001001000000" or
        (intExpr(1000000) RADIX intExpr( 3)) <> "1212210202001" or
        (intExpr(1000000) RADIX intExpr( 4)) <> "3310021000" or
        (intExpr(1000000) RADIX intExpr( 5)) <> "224000000" or
        (intExpr(1000000) RADIX intExpr( 6)) <> "33233344" or
        (intExpr(1000000) RADIX intExpr( 7)) <> "11333311" or
        (intExpr(1000000) RADIX intExpr( 8)) <> "3641100" or
        (intExpr(1000000) RADIX intExpr( 9)) <> "1783661" or
        (intExpr(1000000) RADIX intExpr(10)) <> "1000000" or
        (intExpr(1000000) RADIX intExpr(11)) <> "623351" or
        (intExpr(1000000) RADIX intExpr(12)) <> "402854" or
        (intExpr(1000000) RADIX intExpr(13)) <> "290221" or
        (intExpr(1000000) RADIX intExpr(14)) <> "1C0608" or
        (intExpr(1000000) RADIX intExpr(15)) <> "14B46A" or
        (intExpr(1000000) RADIX intExpr(16)) <> "F4240" or
        (intExpr(1000000) RADIX intExpr(17)) <> "BG939" or
        (intExpr(1000000) RADIX intExpr(18)) <> "9987A" or
        (intExpr(1000000) RADIX intExpr(19)) <> "7CF1B" or
        (intExpr(1000000) RADIX intExpr(20)) <> "65000" or
        (intExpr(1000000) RADIX intExpr(21)) <> "52KC1" or
        (intExpr(1000000) RADIX intExpr(22)) <> "45K2C" or
        (intExpr(1000000) RADIX intExpr(23)) <> "3D486" or
        (intExpr(1000000) RADIX intExpr(24)) <> "3082G" or
        (intExpr(1000000) RADIX intExpr(25)) <> "2E000" or
        (intExpr(1000000) RADIX intExpr(26)) <> "24N7E" or
        (intExpr(1000000) RADIX intExpr(27)) <> "1NLK1" or
        (intExpr(1000000) RADIX intExpr(28)) <> "1HFE8" or
        (intExpr(1000000) RADIX intExpr(29)) <> "1C01M" or
        (intExpr(1000000) RADIX intExpr(30)) <> "1713A" or
        (intExpr(1000000) RADIX intExpr(31)) <> "12HI2" or
        (intExpr(1000000) RADIX intExpr(32)) <> "UGI0" or
        (intExpr(1000000) RADIX intExpr(33)) <> "RR91" or
        (intExpr(1000000) RADIX intExpr(34)) <> "PF1Q" or
        (intExpr(1000000) RADIX intExpr(35)) <> "NBBF" or
        (intExpr(1000000) RADIX intExpr(36)) <> "LFLS" then
      writeln(" ***** The RADIX operator does not work correct.");
      okay := FALSE;
    end if;

    if  (        INT64_MIN            radix         2 ) <> "-1000000000000000000000000000000000000000000000000000000000000000" or
        (intExpr(INT64_MIN)           radix         2 ) <> "-1000000000000000000000000000000000000000000000000000000000000000" or
        (        INT64_MIN            radix intExpr(2)) <> "-1000000000000000000000000000000000000000000000000000000000000000" or
        (intExpr(INT64_MIN)           radix intExpr(2)) <> "-1000000000000000000000000000000000000000000000000000000000000000" or
        (        INT32_MIN            radix         2 ) <>                                 "-10000000000000000000000000000000" or
        (intExpr(INT32_MIN)           radix         2 ) <>                                 "-10000000000000000000000000000000" or
        (        INT32_MIN            radix intExpr(2)) <>                                 "-10000000000000000000000000000000" or
        (intExpr(INT32_MIN)           radix intExpr(2)) <>                                 "-10000000000000000000000000000000" or
        (                 2147483647  radix         2 ) <>                                   "1111111111111111111111111111111" or
        (intExpr(         2147483647) radix         2 ) <>                                   "1111111111111111111111111111111" or
        (                 2147483647  radix intExpr(2)) <>                                   "1111111111111111111111111111111" or
        (intExpr(         2147483647) radix intExpr(2)) <>                                   "1111111111111111111111111111111" or
        (        9223372036854775807  radix         2 ) <>   "111111111111111111111111111111111111111111111111111111111111111" or
        (intExpr(9223372036854775807) radix         2 ) <>   "111111111111111111111111111111111111111111111111111111111111111" or
        (        9223372036854775807  radix intExpr(2)) <>   "111111111111111111111111111111111111111111111111111111111111111" or
        (intExpr(9223372036854775807) radix intExpr(2)) <>   "111111111111111111111111111111111111111111111111111111111111111" then
      writeln(" ***** The radix operator with base 2 does not work correct.");
      okay := FALSE;
    end if;

    if okay then
      writeln("Integer str does work correct.");
    end if;
  end func;


const proc: check_parse is func
  local
    var boolean: okay is TRUE;
  begin
    okay := TRUE;
    if  # integer parse "-2147483648" <>   INT32_MIN or
        integer parse "-2147483647" <> -2147483647 or
        integer parse "-1073741825" <> -1073741825 or
        integer parse "-1073741824" <> -1073741824 or
        integer parse "-1000000000" <> -1000000000 or
        integer parse  "-100000000" <>  -100000000 or
        integer parse   "-10000000" <>   -10000000 or
        integer parse    "-1000000" <>    -1000000 or
        integer parse     "-100000" <>     -100000 or
        integer parse      "-65537" <>      -65537 or
        integer parse      "-65536" <>      -65536 or
        integer parse      "-32769" <>      -32769 or
        integer parse      "-32768" <>      -32768 or
        integer parse      "-10001" <>      -10001 or
        integer parse      "-10000" <>      -10000 or
        integer parse       "-9999" <>       -9999 or
        integer parse       "-2000" <>       -2000 or
        integer parse       "-1001" <>       -1001 or
        integer parse       "-1000" <>       -1000 or
        integer parse        "-999" <>        -999 or
        integer parse        "-200" <>        -200 or
        integer parse        "-101" <>        -101 or
        integer parse        "-100" <>        -100 or
        integer parse         "-99" <>         -99 or
        integer parse         "-20" <>         -20 or
        integer parse         "-11" <>         -11 or
        integer parse         "-10" <>         -10 or
        integer parse          "-9" <>          -9 or
        integer parse          "-2" <>          -2 or
        integer parse          "-1" <>          -1 or
        integer parse           "0" <>           0 or
        integer parse           "1" <>           1 or
        integer parse           "2" <>           2 or
        integer parse           "9" <>           9 or
        integer parse          "10" <>          10 or
        integer parse          "11" <>          11 or
        integer parse          "20" <>          20 or
        integer parse          "99" <>          99 or
        integer parse         "100" <>         100 or
        integer parse         "101" <>         101 or
        integer parse         "200" <>         200 or
        integer parse         "999" <>         999 or
        integer parse        "1000" <>        1000 or
        integer parse        "1001" <>        1001 or
        integer parse        "2000" <>        2000 or
        integer parse        "9999" <>        9999 or
        integer parse       "10000" <>       10000 or
        integer parse       "10001" <>       10001 or
        integer parse       "32768" <>       32768 or
        integer parse       "32769" <>       32769 or
        integer parse       "65536" <>       65536 or
        integer parse       "65537" <>       65537 or
        integer parse      "100000" <>      100000 or
        integer parse     "1000000" <>     1000000 or
        integer parse    "10000000" <>    10000000 or
        integer parse   "100000000" <>   100000000 or
        integer parse  "1000000000" <>  1000000000 or
        integer parse  "1073741823" <>  1073741823 or
        integer parse  "1073741824" <>  1073741824 or
        integer parse  "2147483647" <>  2147483647 then
      writeln(" ***** Integer parse with literals does not work correct.");
      okay := FALSE;
    end if;
    if  # integer parse striExpr("-2147483648") <>   INT32_MIN or
        integer parse striExpr("-2147483647") <> -2147483647 or
        integer parse striExpr("-1073741825") <> -1073741825 or
        integer parse striExpr("-1073741824") <> -1073741824 or
        integer parse striExpr("-1000000000") <> -1000000000 or
        integer parse striExpr( "-100000000") <>  -100000000 or
        integer parse striExpr(  "-10000000") <>   -10000000 or
        integer parse striExpr(   "-1000000") <>    -1000000 or
        integer parse striExpr(    "-100000") <>     -100000 or
        integer parse striExpr(     "-65537") <>      -65537 or
        integer parse striExpr(     "-65536") <>      -65536 or
        integer parse striExpr(     "-32769") <>      -32769 or
        integer parse striExpr(     "-32768") <>      -32768 or
        integer parse striExpr(     "-10001") <>      -10001 or
        integer parse striExpr(     "-10000") <>      -10000 or
        integer parse striExpr(      "-9999") <>       -9999 or
        integer parse striExpr(      "-2000") <>       -2000 or
        integer parse striExpr(      "-1001") <>       -1001 or
        integer parse striExpr(      "-1000") <>       -1000 or
        integer parse striExpr(       "-999") <>        -999 or
        integer parse striExpr(       "-200") <>        -200 or
        integer parse striExpr(       "-101") <>        -101 or
        integer parse striExpr(       "-100") <>        -100 or
        integer parse striExpr(        "-99") <>         -99 or
        integer parse striExpr(        "-20") <>         -20 or
        integer parse striExpr(        "-11") <>         -11 or
        integer parse striExpr(        "-10") <>         -10 or
        integer parse striExpr(         "-9") <>          -9 or
        integer parse striExpr(         "-2") <>          -2 or
        integer parse striExpr(         "-1") <>          -1 or
        integer parse striExpr(          "0") <>           0 or
        integer parse striExpr(          "1") <>           1 or
        integer parse striExpr(          "2") <>           2 or
        integer parse striExpr(          "9") <>           9 or
        integer parse striExpr(         "10") <>          10 or
        integer parse striExpr(         "11") <>          11 or
        integer parse striExpr(         "20") <>          20 or
        integer parse striExpr(         "99") <>          99 or
        integer parse striExpr(        "100") <>         100 or
        integer parse striExpr(        "101") <>         101 or
        integer parse striExpr(        "200") <>         200 or
        integer parse striExpr(        "999") <>         999 or
        integer parse striExpr(       "1000") <>        1000 or
        integer parse striExpr(       "1001") <>        1001 or
        integer parse striExpr(       "2000") <>        2000 or
        integer parse striExpr(       "9999") <>        9999 or
        integer parse striExpr(      "10000") <>       10000 or
        integer parse striExpr(      "10001") <>       10001 or
        integer parse striExpr(      "32768") <>       32768 or
        integer parse striExpr(      "32769") <>       32769 or
        integer parse striExpr(      "65536") <>       65536 or
        integer parse striExpr(      "65537") <>       65537 or
        integer parse striExpr(     "100000") <>      100000 or
        integer parse striExpr(    "1000000") <>     1000000 or
        integer parse striExpr(   "10000000") <>    10000000 or
        integer parse striExpr(  "100000000") <>   100000000 or
        integer parse striExpr( "1000000000") <>  1000000000 or
        integer parse striExpr( "1073741823") <>  1073741823 or
        integer parse striExpr( "1073741824") <>  1073741824 or
        integer parse striExpr( "2147483647") <>  2147483647 then
      writeln(" ***** Integer parse with expressions does not work correct.");
      okay := FALSE;
    end if;
    if  integer parse          "+0" <>           0 or
        integer parse          "+1" <>           1 or
        integer parse          "+2" <>           2 or
        integer parse          "+9" <>           9 or
        integer parse         "+10" <>          10 or
        integer parse         "+11" <>          11 or
        integer parse         "+20" <>          20 or
        integer parse         "+99" <>          99 or
        integer parse        "+100" <>         100 or
        integer parse        "+101" <>         101 or
        integer parse        "+200" <>         200 or
        integer parse        "+999" <>         999 or
        integer parse       "+1000" <>        1000 or
        integer parse       "+1001" <>        1001 or
        integer parse       "+2000" <>        2000 or
        integer parse       "+9999" <>        9999 or
        integer parse      "+10000" <>       10000 or
        integer parse      "+10001" <>       10001 or
        integer parse      "+32768" <>       32768 or
        integer parse      "+32769" <>       32769 or
        integer parse      "+65536" <>       65536 or
        integer parse      "+65537" <>       65537 or
        integer parse     "+100000" <>      100000 or
        integer parse    "+1000000" <>     1000000 or
        integer parse   "+10000000" <>    10000000 or
        integer parse  "+100000000" <>   100000000 or
        integer parse "+1000000000" <>  1000000000 or
        integer parse "+1073741823" <>  1073741823 or
        integer parse "+1073741824" <>  1073741824 or
        integer parse "+2147483647" <>  2147483647 then
      writeln(" ***** Integer parse with plus sign does not work correct.");
      okay := FALSE;
    end if;
    if  integer parse          "0123"  <> 123 or
        integer parse striExpr("0123") <> 123 then
      writeln(" ***** Integer parse with leading zeros does not work correct.");
      okay := FALSE;
    end if;

    if  integer("11110100001001000000", 2)  <>  1000000 or
        integer("1212210202001", 3)         <>  1000000 or
        integer("3310021000", 4)            <>  1000000 or
        integer("224000000", 5)             <>  1000000 or
        integer("33233344", 6)              <>  1000000 or
        integer("11333311", 7)              <>  1000000 or
        integer("3641100", 8)               <>  1000000 or
        integer("1783661", 9)               <>  1000000 or
        integer("1000000", 10)              <>  1000000 or
        integer("623351", 11)               <>  1000000 or
        integer("402854", 12)               <>  1000000 or
        integer("290221", 13)               <>  1000000 or
        integer("1C0608", 14)               <>  1000000 or
        integer("14B46A", 15)               <>  1000000 or
        integer("F4240", 16)                <>  1000000 or
        integer("BG939", 17)                <>  1000000 or
        integer("9987A", 18)                <>  1000000 or
        integer("7CF1B", 19)                <>  1000000 or
        integer("65000", 20)                <>  1000000 or
        integer("52KC1", 21)                <>  1000000 or
        integer("45K2C", 22)                <>  1000000 or
        integer("3D486", 23)                <>  1000000 or
        integer("3082G", 24)                <>  1000000 or
        integer("2E000", 25)                <>  1000000 or
        integer("24N7E", 26)                <>  1000000 or
        integer("1NLK1", 27)                <>  1000000 or
        integer("1HFE8", 28)                <>  1000000 or
        integer("1C01M", 29)                <>  1000000 or
        integer("1713A", 30)                <>  1000000 or
        integer("12HI2", 31)                <>  1000000 or
        integer("UGI0", 32)                 <>  1000000 or
        integer("RR91", 33)                 <>  1000000 or
        integer("PF1Q", 34)                 <>  1000000 or
        integer("NBBF", 35)                 <>  1000000 or
        integer("LFLS", 36)                 <>  1000000 or
        integer("+11110100001001000000", 2) <>  1000000 or
        integer("+1212210202001", 3)        <>  1000000 or
        integer("+3310021000", 4)           <>  1000000 or
        integer("+224000000", 5)            <>  1000000 or
        integer("+33233344", 6)             <>  1000000 or
        integer("+11333311", 7)             <>  1000000 or
        integer("+3641100", 8)              <>  1000000 or
        integer("+1783661", 9)              <>  1000000 or
        integer("+1000000", 10)             <>  1000000 or
        integer("+623351", 11)              <>  1000000 or
        integer("+402854", 12)              <>  1000000 or
        integer("+290221", 13)              <>  1000000 or
        integer("+1C0608", 14)              <>  1000000 or
        integer("+14B46A", 15)              <>  1000000 or
        integer("+F4240", 16)               <>  1000000 or
        integer("+BG939", 17)               <>  1000000 or
        integer("+9987A", 18)               <>  1000000 or
        integer("+7CF1B", 19)               <>  1000000 or
        integer("+65000", 20)               <>  1000000 or
        integer("+52KC1", 21)               <>  1000000 or
        integer("+45K2C", 22)               <>  1000000 or
        integer("+3D486", 23)               <>  1000000 or
        integer("+3082G", 24)               <>  1000000 or
        integer("+2E000", 25)               <>  1000000 or
        integer("+24N7E", 26)               <>  1000000 or
        integer("+1NLK1", 27)               <>  1000000 or
        integer("+1HFE8", 28)               <>  1000000 or
        integer("+1C01M", 29)               <>  1000000 or
        integer("+1713A", 30)               <>  1000000 or
        integer("+12HI2", 31)               <>  1000000 or
        integer("+UGI0", 32)                <>  1000000 or
        integer("+RR91", 33)                <>  1000000 or
        integer("+PF1Q", 34)                <>  1000000 or
        integer("+NBBF", 35)                <>  1000000 or
        integer("+LFLS", 36)                <>  1000000 or
        integer("-11110100001001000000", 2) <> -1000000 or
        integer("-1212210202001", 3)        <> -1000000 or
        integer("-3310021000", 4)           <> -1000000 or
        integer("-224000000", 5)            <> -1000000 or
        integer("-33233344", 6)             <> -1000000 or
        integer("-11333311", 7)             <> -1000000 or
        integer("-3641100", 8)              <> -1000000 or
        integer("-1783661", 9)              <> -1000000 or
        integer("-1000000", 10)             <> -1000000 or
        integer("-623351", 11)              <> -1000000 or
        integer("-402854", 12)              <> -1000000 or
        integer("-290221", 13)              <> -1000000 or
        integer("-1C0608", 14)              <> -1000000 or
        integer("-14B46A", 15)              <> -1000000 or
        integer("-F4240", 16)               <> -1000000 or
        integer("-BG939", 17)               <> -1000000 or
        integer("-9987A", 18)               <> -1000000 or
        integer("-7CF1B", 19)               <> -1000000 or
        integer("-65000", 20)               <> -1000000 or
        integer("-52KC1", 21)               <> -1000000 or
        integer("-45K2C", 22)               <> -1000000 or
        integer("-3D486", 23)               <> -1000000 or
        integer("-3082G", 24)               <> -1000000 or
        integer("-2E000", 25)               <> -1000000 or
        integer("-24N7E", 26)               <> -1000000 or
        integer("-1NLK1", 27)               <> -1000000 or
        integer("-1HFE8", 28)               <> -1000000 or
        integer("-1C01M", 29)               <> -1000000 or
        integer("-1713A", 30)               <> -1000000 or
        integer("-12HI2", 31)               <> -1000000 or
        integer("-UGI0", 32)                <> -1000000 or
        integer("-RR91", 33)                <> -1000000 or
        integer("-PF1Q", 34)                <> -1000000 or
        integer("-NBBF", 35)                <> -1000000 or
        integer("-LFLS", 36)                <> -1000000 then
      writeln(" ***** Conversion of numeric string with specified radix does not work correct.");
      okay := FALSE;
    end if;

    if okay then
      writeln("Integer parse does work correct.");
    end if;
  end func;


const proc: check_lpad0 is func
  local
    var boolean: okay is TRUE;
  begin
    okay := TRUE;
    if (-10001 lpad0 0) <> "-10001" or
       (-10000 lpad0 0) <> "-10000" or
       ( -9999 lpad0 0) <>  "-9999" or
       ( -2000 lpad0 0) <>  "-2000" or
       ( -1001 lpad0 0) <>  "-1001" or
       ( -1000 lpad0 0) <>  "-1000" or
       (  -999 lpad0 0) <>   "-999" or
       (  -200 lpad0 0) <>   "-200" or
       (  -101 lpad0 0) <>   "-101" or
       (  -100 lpad0 0) <>   "-100" or
       (   -99 lpad0 0) <>    "-99" or
       (   -20 lpad0 0) <>    "-20" or
       (   -11 lpad0 0) <>    "-11" or
       (   -10 lpad0 0) <>    "-10" or
       (    -9 lpad0 0) <>     "-9" or
       (    -2 lpad0 0) <>     "-2" or
       (    -1 lpad0 0) <>     "-1" or
       (     0 lpad0 0) <>      "0" or
       (     1 lpad0 0) <>      "1" or
       (     2 lpad0 0) <>      "2" or
       (     9 lpad0 0) <>      "9" or
       (    10 lpad0 0) <>     "10" or
       (    11 lpad0 0) <>     "11" or
       (    20 lpad0 0) <>     "20" or
       (    99 lpad0 0) <>     "99" or
       (   100 lpad0 0) <>    "100" or
       (   101 lpad0 0) <>    "101" or
       (   200 lpad0 0) <>    "200" or
       (   999 lpad0 0) <>    "999" or
       (  1000 lpad0 0) <>   "1000" or
       (  1001 lpad0 0) <>   "1001" or
       (  2000 lpad0 0) <>   "2000" or
       (  9999 lpad0 0) <>   "9999" or
       ( 10000 lpad0 0) <>  "10000" or
       ( 10001 lpad0 0) <>  "10001" or
       (-10001 lpad0 1) <> "-10001" or
       (-10000 lpad0 1) <> "-10000" or
       ( -9999 lpad0 1) <>  "-9999" or
       ( -2000 lpad0 1) <>  "-2000" or
       ( -1001 lpad0 1) <>  "-1001" or
       ( -1000 lpad0 1) <>  "-1000" or
       (  -999 lpad0 1) <>   "-999" or
       (  -200 lpad0 1) <>   "-200" or
       (  -101 lpad0 1) <>   "-101" or
       (  -100 lpad0 1) <>   "-100" or
       (   -99 lpad0 1) <>    "-99" or
       (   -20 lpad0 1) <>    "-20" or
       (   -11 lpad0 1) <>    "-11" or
       (   -10 lpad0 1) <>    "-10" or
       (    -9 lpad0 1) <>     "-9" or
       (    -2 lpad0 1) <>     "-2" or
       (    -1 lpad0 1) <>     "-1" or
       (     0 lpad0 1) <>      "0" or
       (     1 lpad0 1) <>      "1" or
       (     2 lpad0 1) <>      "2" or
       (     9 lpad0 1) <>      "9" or
       (    10 lpad0 1) <>     "10" or
       (    11 lpad0 1) <>     "11" or
       (    20 lpad0 1) <>     "20" or
       (    99 lpad0 1) <>     "99" or
       (   100 lpad0 1) <>    "100" or
       (   101 lpad0 1) <>    "101" or
       (   200 lpad0 1) <>    "200" or
       (   999 lpad0 1) <>    "999" or
       (  1000 lpad0 1) <>   "1000" or
       (  1001 lpad0 1) <>   "1001" or
       (  2000 lpad0 1) <>   "2000" or
       (  9999 lpad0 1) <>   "9999" or
       ( 10000 lpad0 1) <>  "10000" or
       ( 10001 lpad0 1) <>  "10001" or
       (-10001 lpad0 2) <> "-10001" or
       (-10000 lpad0 2) <> "-10000" or
       ( -9999 lpad0 2) <>  "-9999" or
       ( -2000 lpad0 2) <>  "-2000" or
       ( -1001 lpad0 2) <>  "-1001" or
       ( -1000 lpad0 2) <>  "-1000" or
       (  -999 lpad0 2) <>   "-999" or
       (  -200 lpad0 2) <>   "-200" or
       (  -101 lpad0 2) <>   "-101" or
       (  -100 lpad0 2) <>   "-100" or
       (   -99 lpad0 2) <>    "-99" or
       (   -20 lpad0 2) <>    "-20" or
       (   -11 lpad0 2) <>    "-11" or
       (   -10 lpad0 2) <>    "-10" or
       (    -9 lpad0 2) <>     "-9" or
       (    -2 lpad0 2) <>     "-2" or
       (    -1 lpad0 2) <>     "-1" or
       (     0 lpad0 2) <>     "00" or
       (     1 lpad0 2) <>     "01" or
       (     2 lpad0 2) <>     "02" or
       (     9 lpad0 2) <>     "09" or
       (    10 lpad0 2) <>     "10" or
       (    11 lpad0 2) <>     "11" or
       (    20 lpad0 2) <>     "20" or
       (    99 lpad0 2) <>     "99" or
       (   100 lpad0 2) <>    "100" or
       (   101 lpad0 2) <>    "101" or
       (   200 lpad0 2) <>    "200" or
       (   999 lpad0 2) <>    "999" or
       (  1000 lpad0 2) <>   "1000" or
       (  1001 lpad0 2) <>   "1001" or
       (  2000 lpad0 2) <>   "2000" or
       (  9999 lpad0 2) <>   "9999" or
       ( 10000 lpad0 2) <>  "10000" or
       ( 10001 lpad0 2) <>  "10001" or
       (-10001 lpad0 3) <> "-10001" or
       (-10000 lpad0 3) <> "-10000" or
       ( -9999 lpad0 3) <>  "-9999" or
       ( -2000 lpad0 3) <>  "-2000" or
       ( -1001 lpad0 3) <>  "-1001" or
       ( -1000 lpad0 3) <>  "-1000" or
       (  -999 lpad0 3) <>   "-999" or
       (  -200 lpad0 3) <>   "-200" or
       (  -101 lpad0 3) <>   "-101" or
       (  -100 lpad0 3) <>   "-100" or
       (   -99 lpad0 3) <>    "-99" or
       (   -20 lpad0 3) <>    "-20" or
       (   -11 lpad0 3) <>    "-11" or
       (   -10 lpad0 3) <>    "-10" or
       (    -9 lpad0 3) <>    "-09" or
       (    -2 lpad0 3) <>    "-02" or
       (    -1 lpad0 3) <>    "-01" or
       (     0 lpad0 3) <>    "000" or
       (     1 lpad0 3) <>    "001" or
       (     2 lpad0 3) <>    "002" or
       (     9 lpad0 3) <>    "009" or
       (    10 lpad0 3) <>    "010" or
       (    11 lpad0 3) <>    "011" or
       (    20 lpad0 3) <>    "020" or
       (    99 lpad0 3) <>    "099" or
       (   100 lpad0 3) <>    "100" or
       (   101 lpad0 3) <>    "101" or
       (   200 lpad0 3) <>    "200" or
       (   999 lpad0 3) <>    "999" or
       (  1000 lpad0 3) <>   "1000" or
       (  1001 lpad0 3) <>   "1001" or
       (  2000 lpad0 3) <>   "2000" or
       (  9999 lpad0 3) <>   "9999" or
       ( 10000 lpad0 3) <>  "10000" or
       ( 10001 lpad0 3) <>  "10001" or
       (-10001 lpad0 4) <> "-10001" or
       (-10000 lpad0 4) <> "-10000" or
       ( -9999 lpad0 4) <>  "-9999" or
       ( -2000 lpad0 4) <>  "-2000" or
       ( -1001 lpad0 4) <>  "-1001" or
       ( -1000 lpad0 4) <>  "-1000" or
       (  -999 lpad0 4) <>   "-999" or
       (  -200 lpad0 4) <>   "-200" or
       (  -101 lpad0 4) <>   "-101" or
       (  -100 lpad0 4) <>   "-100" or
       (   -99 lpad0 4) <>   "-099" or
       (   -20 lpad0 4) <>   "-020" or
       (   -11 lpad0 4) <>   "-011" or
       (   -10 lpad0 4) <>   "-010" or
       (    -9 lpad0 4) <>   "-009" or
       (    -2 lpad0 4) <>   "-002" or
       (    -1 lpad0 4) <>   "-001" or
       (     0 lpad0 4) <>   "0000" or
       (     1 lpad0 4) <>   "0001" or
       (     2 lpad0 4) <>   "0002" or
       (     9 lpad0 4) <>   "0009" or
       (    10 lpad0 4) <>   "0010" or
       (    11 lpad0 4) <>   "0011" or
       (    20 lpad0 4) <>   "0020" or
       (    99 lpad0 4) <>   "0099" or
       (   100 lpad0 4) <>   "0100" or
       (   101 lpad0 4) <>   "0101" or
       (   200 lpad0 4) <>   "0200" or
       (   999 lpad0 4) <>   "0999" or
       (  1000 lpad0 4) <>   "1000" or
       (  1001 lpad0 4) <>   "1001" or
       (  2000 lpad0 4) <>   "2000" or
       (  9999 lpad0 4) <>   "9999" or
       ( 10000 lpad0 4) <>  "10000" or
       ( 10001 lpad0 4) <>  "10001" or
       (-10001 lpad0 5) <> "-10001" or
       (-10000 lpad0 5) <> "-10000" or
       ( -9999 lpad0 5) <>  "-9999" or
       ( -2000 lpad0 5) <>  "-2000" or
       ( -1001 lpad0 5) <>  "-1001" or
       ( -1000 lpad0 5) <>  "-1000" or
       (  -999 lpad0 5) <>  "-0999" or
       (  -200 lpad0 5) <>  "-0200" or
       (  -101 lpad0 5) <>  "-0101" or
       (  -100 lpad0 5) <>  "-0100" or
       (   -99 lpad0 5) <>  "-0099" or
       (   -20 lpad0 5) <>  "-0020" or
       (   -11 lpad0 5) <>  "-0011" or
       (   -10 lpad0 5) <>  "-0010" or
       (    -9 lpad0 5) <>  "-0009" or
       (    -2 lpad0 5) <>  "-0002" or
       (    -1 lpad0 5) <>  "-0001" or
       (     0 lpad0 5) <>  "00000" or
       (     1 lpad0 5) <>  "00001" or
       (     2 lpad0 5) <>  "00002" or
       (     9 lpad0 5) <>  "00009" or
       (    10 lpad0 5) <>  "00010" or
       (    11 lpad0 5) <>  "00011" or
       (    20 lpad0 5) <>  "00020" or
       (    99 lpad0 5) <>  "00099" or
       (   100 lpad0 5) <>  "00100" or
       (   101 lpad0 5) <>  "00101" or
       (   200 lpad0 5) <>  "00200" or
       (   999 lpad0 5) <>  "00999" or
       (  1000 lpad0 5) <>  "01000" or
       (  1001 lpad0 5) <>  "01001" or
       (  2000 lpad0 5) <>  "02000" or
       (  9999 lpad0 5) <>  "09999" or
       ( 10000 lpad0 5) <>  "10000" or
       ( 10001 lpad0 5) <>  "10001" or
       (-10001 lpad0 6) <> "-10001" or
       (-10000 lpad0 6) <> "-10000" or
       ( -9999 lpad0 6) <> "-09999" or
       ( -2000 lpad0 6) <> "-02000" or
       ( -1001 lpad0 6) <> "-01001" or
       ( -1000 lpad0 6) <> "-01000" or
       (  -999 lpad0 6) <> "-00999" or
       (  -200 lpad0 6) <> "-00200" or
       (  -101 lpad0 6) <> "-00101" or
       (  -100 lpad0 6) <> "-00100" or
       (   -99 lpad0 6) <> "-00099" or
       (   -20 lpad0 6) <> "-00020" or
       (   -11 lpad0 6) <> "-00011" or
       (   -10 lpad0 6) <> "-00010" or
       (    -9 lpad0 6) <> "-00009" or
       (    -2 lpad0 6) <> "-00002" or
       (    -1 lpad0 6) <> "-00001" or
       (     0 lpad0 6) <> "000000" or
       (     1 lpad0 6) <> "000001" or
       (     2 lpad0 6) <> "000002" or
       (     9 lpad0 6) <> "000009" or
       (    10 lpad0 6) <> "000010" or
       (    11 lpad0 6) <> "000011" or
       (    20 lpad0 6) <> "000020" or
       (    99 lpad0 6) <> "000099" or
       (   100 lpad0 6) <> "000100" or
       (   101 lpad0 6) <> "000101" or
       (   200 lpad0 6) <> "000200" or
       (   999 lpad0 6) <> "000999" or
       (  1000 lpad0 6) <> "001000" or
       (  1001 lpad0 6) <> "001001" or
       (  2000 lpad0 6) <> "002000" or
       (  9999 lpad0 6) <> "009999" or
       ( 10000 lpad0 6) <> "010000" or
       ( 10001 lpad0 6) <> "010001" then
      writeln(" ***** Integer lpad0 is not correct computed.");
      okay := FALSE;
    end if;
    if okay then
      writeln("Integer lpad0 does work correct.");
    end if;
  end func;


const proc: check_bitLength is func
  local
    var boolean: okay is TRUE;
  begin
    okay := TRUE;
    if  bitLength(  INT32_MIN) <> 31 or
        bitLength(-2147483647) <> 31 or
        bitLength(-1073741825) <> 31 or
        bitLength(-1073741824) <> 30 or
        bitLength( -536870913) <> 30 or
        bitLength( -536870912) <> 29 or
        bitLength( -268435457) <> 29 or
        bitLength( -268435456) <> 28 or
        bitLength( -134217729) <> 28 or
        bitLength( -134217728) <> 27 or
        bitLength(  -67108865) <> 27 or
        bitLength(  -67108864) <> 26 or
        bitLength(  -33554433) <> 26 or
        bitLength(  -33554432) <> 25 or
        bitLength(  -16777217) <> 25 or
        bitLength(  -16777216) <> 24 or
        bitLength(   -8388609) <> 24 or
        bitLength(   -8388608) <> 23 or
        bitLength(   -4194305) <> 23 or
        bitLength(   -4194304) <> 22 or
        bitLength(   -2097153) <> 22 or
        bitLength(   -2097152) <> 21 or
        bitLength(   -1048577) <> 21 or
        bitLength(   -1048576) <> 20 or
        bitLength(    -524289) <> 20 or
        bitLength(    -524288) <> 19 or
        bitLength(    -262145) <> 19 or
        bitLength(    -262144) <> 18 or
        bitLength(    -131073) <> 18 or
        bitLength(    -131072) <> 17 or
        bitLength(     -65537) <> 17 or
        bitLength(     -65536) <> 16 or
        bitLength(     -32769) <> 16 or
        bitLength(     -32768) <> 15 or
        bitLength(     -16385) <> 15 or
        bitLength(     -16384) <> 14 or
        bitLength(      -8193) <> 14 or
        bitLength(      -8192) <> 13 or
        bitLength(      -4097) <> 13 or
        bitLength(      -4096) <> 12 or
        bitLength(      -2049) <> 12 or
        bitLength(      -2048) <> 11 or
        bitLength(      -1025) <> 11 or
        bitLength(      -1024) <> 10 or
        bitLength(       -513) <> 10 or
        bitLength(       -512) <>  9 or
        bitLength(       -257) <>  9 or
        bitLength(       -256) <>  8 or
        bitLength(       -129) <>  8 or
        bitLength(       -128) <>  7 or
        bitLength(        -65) <>  7 or
        bitLength(        -64) <>  6 or
        bitLength(        -33) <>  6 or
        bitLength(        -32) <>  5 or
        bitLength(        -17) <>  5 or
        bitLength(        -16) <>  4 or
        bitLength(         -9) <>  4 or
        bitLength(         -8) <>  3 or
        bitLength(         -5) <>  3 or
        bitLength(         -4) <>  2 or
        bitLength(         -3) <>  2 or
        bitLength(         -2) <>  1 or
        bitLength(         -1) <>  0 or
        bitLength(          0) <>  0 or
        bitLength(          1) <>  1 or
        bitLength(          2) <>  2 or
        bitLength(          3) <>  2 or
        bitLength(          4) <>  3 or
        bitLength(          7) <>  3 or
        bitLength(          8) <>  4 or
        bitLength(         15) <>  4 or
        bitLength(         16) <>  5 or
        bitLength(         31) <>  5 or
        bitLength(         32) <>  6 or
        bitLength(         63) <>  6 or
        bitLength(         64) <>  7 or
        bitLength(        127) <>  7 or
        bitLength(        128) <>  8 or
        bitLength(        255) <>  8 or
        bitLength(        256) <>  9 or
        bitLength(        511) <>  9 or
        bitLength(        512) <> 10 or
        bitLength(       1023) <> 10 or
        bitLength(       1024) <> 11 or
        bitLength(       2047) <> 11 or
        bitLength(       2048) <> 12 or
        bitLength(       4095) <> 12 or
        bitLength(       4096) <> 13 or
        bitLength(       8191) <> 13 or
        bitLength(       8192) <> 14 or
        bitLength(      16383) <> 14 or
        bitLength(      16384) <> 15 or
        bitLength(      32767) <> 15 or
        bitLength(      32768) <> 16 or
        bitLength(      65535) <> 16 or
        bitLength(      65536) <> 17 or
        bitLength(     131071) <> 17 or
        bitLength(     131072) <> 18 or
        bitLength(     262143) <> 18 or
        bitLength(     262144) <> 19 or
        bitLength(     524287) <> 19 or
        bitLength(     524288) <> 20 or
        bitLength(    1048575) <> 20 or
        bitLength(    1048576) <> 21 or
        bitLength(    2097151) <> 21 or
        bitLength(    2097152) <> 22 or
        bitLength(    4194303) <> 22 or
        bitLength(    4194304) <> 23 or
        bitLength(    8388607) <> 23 or
        bitLength(    8388608) <> 24 or
        bitLength(   16777215) <> 24 or
        bitLength(   16777216) <> 25 or
        bitLength(   33554431) <> 25 or
        bitLength(   33554432) <> 26 or
        bitLength(   67108863) <> 26 or
        bitLength(   67108864) <> 27 or
        bitLength(  134217727) <> 27 or
        bitLength(  134217728) <> 28 or
        bitLength(  268435455) <> 28 or
        bitLength(  268435456) <> 29 or
        bitLength(  536870911) <> 29 or
        bitLength(  536870912) <> 30 or
        bitLength( 1073741823) <> 30 or
        bitLength( 1073741824) <> 31 or
        bitLength( 2147483647) <> 31 then
      writeln(" ***** Integer bitLength is not correct computed.");
      okay := FALSE;
    end if;
    if okay then
      writeln("Integer bitLength does work correct.");
    end if;
  end func;


const proc: check_lowestSetBit is func
  local
    var boolean: okay is TRUE;
  begin
    if  lowestSetBit(-2) <>  1 or
        lowestSetBit(-1) <>  0 or
        lowestSetBit( 0) <> -1 or
        lowestSetBit( 1) <>  0 or
        lowestSetBit( 2) <>  1 or
        lowestSetBit(intExpr(-2)) <>  1 or
        lowestSetBit(intExpr(-1)) <>  0 or
        lowestSetBit(intExpr( 0)) <> -1 or
        lowestSetBit(intExpr( 1)) <>  0 or
        lowestSetBit(intExpr( 2)) <>  1 then
      writeln(" ***** The integer lowestSetBit function does not work correct.");
      okay := FALSE;
    end if;

    if  lowestSetBit(4611686018427387904) <> 62 or
        lowestSetBit(4611686018427387905) <>  0 or
        lowestSetBit(4611686018427387906) <>  1 or
        lowestSetBit(4611686018427387908) <>  2 or
        lowestSetBit(4611686018427387912) <>  3 or
        lowestSetBit(4611686018427387920) <>  4 or
        lowestSetBit(4611686018427387936) <>  5 or
        lowestSetBit(4611686018427387968) <>  6 or
        lowestSetBit(4611686018427388032) <>  7 or
        lowestSetBit(4611686018427388160) <>  8 or
        lowestSetBit(4611686018427388416) <>  9 or
        lowestSetBit(4611686018427388928) <> 10 or
        lowestSetBit(4611686018427389952) <> 11 or
        lowestSetBit(4611686018427392000) <> 12 or
        lowestSetBit(4611686018427396096) <> 13 or
        lowestSetBit(4611686018427404288) <> 14 or
        lowestSetBit(4611686018427420672) <> 15 or
        lowestSetBit(4611686018427453440) <> 16 or
        lowestSetBit(4611686018427518976) <> 17 or
        lowestSetBit(4611686018427650048) <> 18 or
        lowestSetBit(4611686018427912192) <> 19 or
        lowestSetBit(4611686018428436480) <> 20 or
        lowestSetBit(4611686018429485056) <> 21 or
        lowestSetBit(4611686018431582208) <> 22 or
        lowestSetBit(4611686018435776512) <> 23 or
        lowestSetBit(4611686018444165120) <> 24 or
        lowestSetBit(4611686018460942336) <> 25 or
        lowestSetBit(4611686018494496768) <> 26 or
        lowestSetBit(4611686018561605632) <> 27 or
        lowestSetBit(4611686018695823360) <> 28 or
        lowestSetBit(4611686018964258816) <> 29 or
        lowestSetBit(4611686019501129728) <> 30 or
        lowestSetBit(4611686020574871552) <> 31 or
        lowestSetBit(4611686022722355200) <> 32 or
        lowestSetBit(4611686027017322496) <> 33 or
        lowestSetBit(4611686035607257088) <> 34 or
        lowestSetBit(4611686052787126272) <> 35 or
        lowestSetBit(4611686087146864640) <> 36 or
        lowestSetBit(4611686155866341376) <> 37 or
        lowestSetBit(4611686293305294848) <> 38 or
        lowestSetBit(4611686568183201792) <> 39 or
        lowestSetBit(4611687117939015680) <> 40 or
        lowestSetBit(4611688217450643456) <> 41 or
        lowestSetBit(4611690416473899008) <> 42 or
        lowestSetBit(4611694814520410112) <> 43 or
        lowestSetBit(4611703610613432320) <> 44 or
        lowestSetBit(4611721202799476736) <> 45 or
        lowestSetBit(4611756387171565568) <> 46 or
        lowestSetBit(4611826755915743232) <> 47 or
        lowestSetBit(4611967493404098560) <> 48 or
        lowestSetBit(4612248968380809216) <> 49 or
        lowestSetBit(4612811918334230528) <> 50 or
        lowestSetBit(4613937818241073152) <> 51 or
        lowestSetBit(4616189618054758400) <> 52 or
        lowestSetBit(4620693217682128896) <> 53 or
        lowestSetBit(4629700416936869888) <> 54 or
        lowestSetBit(4647714815446351872) <> 55 or
        lowestSetBit(4683743612465315840) <> 56 or
        lowestSetBit(4755801206503243776) <> 57 or
        lowestSetBit(4899916394579099648) <> 58 or
        lowestSetBit(5188146770730811392) <> 59 or
        lowestSetBit(5764607523034234880) <> 60 or
        lowestSetBit(6917529027641081856) <> 61 then
      writeln(" ***** The integer lowestSetBit function does not work correct.");
      okay := FALSE;
    end if;

    if okay then
      writeln("Integer lowestSetBit does work correct.");
    end if;
  end func;


const proc: main is func

  begin
    writeln;
    check_exponent_integer_literal;
    check_based_integer_literal;
    check_bytesBe;
    check_bytesLe;
    check_bytesBe2Int;
    check_bytesLe2Int;
    check_negation;
    check_add;
    check_subtract;
    check_mult;
    check_division;
    check_div;
    check_rem;
    check_mdiv;
    check_mod;
    check_odd;
    check_fact;
    check_binom;
    check_power;
    check_abs;
    check_sqrt;
    check_log2;
    check_log10;
    check_lShift;
    check_rShift;
    check_str;
    check_parse;
    check_lpad0;
    check_bitLength;
    check_lowestSetBit
  end func;
