
(********************************************************************)
(*                                                                  *)
(*  err.sd7       Test for almost all possible compile time errors  *)
(*  Copyright (C) 1994, 2004  Thomas Mertes                         *)
(*                                                                  *)
(*  This program is free software; you can redistribute it and/or   *)
(*  modify it under the terms of the GNU General Public License as  *)
(*  published by the Free Software Foundation; either version 2 of  *)
(*  the License, or (at your option) any later version.             *)
(*                                                                  *)
(*  This program is distributed in the hope that it will be useful, *)
(*  but WITHOUT ANY WARRANTY; without even the implied warranty of  *)
(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   *)
(*  GNU General Public License for more details.                    *)
(*                                                                  *)
(*  You should have received a copy of the GNU General Public       *)
(*  License along with this program; if not, write to the Free      *)
(*  Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,  *)
(*  MA 02111-1307 USA                                               *)
(*                                                                  *)
(********************************************************************)


$ include "seed7_05.s7i";
include "qwertyuiop";           (* Include file not found      *)

(* Illegal char: *)  (* *)    (* Illegal character           *)

$ illegal;                      (* Illegal pragma              *)
const ACTION: a is action "z";  (* Illegal action              *)
$ system "qwert" is qwert;      (* Illegal system declaration  *)
ignore(9876543210987654);       (* Integer too big             *)
ignore(1E-1);                   (* Negative exponent           *)
ignore(2E);                     (* Digit expected              *)
ignore(1E999999);               (* Integer too big             *)
ignore(37#0);                   (* Base not between 2 and 36   *)
ignore(2#);                     (* Extended digit expected     *)
ignore(8#1239123);              (* Illegal digit               *)
ignore(36#ZZZZZZZZZZZZ);        (* Based integer too big       *)
ignore('abcdefg');              (* "'" expected                *)
ignore(                         (* Character literal exceeds   *) '
); ignore("a""b");              (* Use \" instead of ""        *)
ignore("\!");                   (* Illegal string escape       *)
ignore("\8y"); ignore(          (* Numerical escape wrong      *) "\
continued string");             (* String continuation wrong   *)
ignore("not terminated          (* String literal exceeds      *)
); $ 12345;                      (* Name expected               *)
$ syntax: l2 is -> x;           (* Integer literal expected    *)
include 1                     (* String literal expected     *)
const: ";asdf" is 1;             (* Identifier expected         *)
const: k is proc begin x        (* Expression expected         *) end proc;
syntax: [.{}.] is -> 1; syntax: i.{} is -> 1; const: h is [i];
x                               (* Declaration expected        *)
const j2: j3 is ASD(1);         (* Initialisation failed       *)
const: h2 is 1;                 (* Declared twice              *)
                                (* Not declared                *)
syntax: h is x 1;               (* Associativity expected      *)
syntax: j is -> 999999;         (* Statement priority too big  *)
syntax: {}.{}.x is -> 1;        (* Syntax with two parameters  *)
syntax: {} is -> 1;             (* Empty syntax declaration    *)
syntax: {}.a2 is -> 5; syntax: {}.a2 is -> 7;
syntax: .b2 is -> 5; syntax: .b2 is -> 7;
syntax: .c2.{} is -> 5; syntax: .c2.{} is <- 5;
syntax: .d2.{} is -> 100; const: d3 is d2 1;
syntax: .e2 is -> 20; const: e3 is e2.e4;
syntax: .i2.i3 is -> 3; const: i4 is i2 i5;
const l m is 1;
const: n is 1 const
: p(q is 1;
const: r is { a ;
const: s ;
const: t is proc begin c.c proc;
const: u is proc begin c.c end;
const: v is module end;
(*
